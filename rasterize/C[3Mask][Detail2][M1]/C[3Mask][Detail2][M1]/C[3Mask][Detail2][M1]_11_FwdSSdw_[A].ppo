#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1447;
float _3853;
float _3854;
float _3855;
float _3856;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _272 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _272.x * cbMtdParam._m0[10u].x;
    float _279 = _272.y * cbMtdParam._m0[10u].y;
    float _280 = _272.z * cbMtdParam._m0[10u].z;
    vec4 _298 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _348 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _358 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _348)) + 1.0;
    float _3865 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _366 = (_359 * ((_298.x * cbMtdParam._m0[11u].x) - _278)) + _278;
    float _367 = (_359 * ((_298.y * cbMtdParam._m0[11u].y) - _279)) + _279;
    float _368 = (_359 * ((_298.z * cbMtdParam._m0[11u].z) - _280)) + _280;
    vec4 _386 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _417 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _348)) + 1.0;
    float _3876 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _425 = (_418 * ((_386.x * cbMtdParam._m0[12u].x) - _366)) + _366;
    float _426 = (_418 * ((_386.y * cbMtdParam._m0[12u].y) - _367)) + _367;
    float _427 = (_418 * ((_386.z * cbMtdParam._m0[12u].z) - _368)) + _368;
    vec4 _445 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _470 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _348)) + 1.0;
    float _3887 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _478 = (_471 * ((_445.x * cbMtdParam._m0[13u].x) - _425)) + _425;
    float _479 = (_471 * ((_445.y * cbMtdParam._m0[13u].y) - _426)) + _426;
    float _480 = (_471 * ((_445.z * cbMtdParam._m0[13u].z) - _427)) + _427;
    vec4 _500 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _529 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3898 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _537 = (_530 * ((_500.x * cbMtdParam._m0[14u].x) - _478)) + _478;
    float _538 = (_530 * ((_500.y * cbMtdParam._m0[14u].y) - _479)) + _479;
    float _539 = (_530 * ((_500.z * cbMtdParam._m0[14u].z) - _480)) + _480;
    vec4 _559 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _587 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _3909 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _595 = (_588 * ((_559.x * cbMtdParam._m0[15u].x) - _537)) + _537;
    float _596 = (_588 * ((_559.y * cbMtdParam._m0[15u].y) - _538)) + _538;
    float _597 = (_588 * ((_559.z * cbMtdParam._m0[15u].z) - _539)) + _539;
    vec4 _610 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _612 = _610.x;
    float _630 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _612) * _359) + _612;
    float _648 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _630) * _418) + _630;
    float _665 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _648) * _471) + _648;
    float _667 = _665 - (_665 * TEXCOORD_5.x);
    vec4 _683 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _705 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _707 = _705.x;
    float _708 = _705.y;
    float _711 = cbMtdParam._m0[18u].y * _705.z;
    vec4 _723 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _732 = (((cbMtdParam._m0[18u].x * _723.z) - _711) * _359) + _711;
    vec4 _745 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _756 = (((cbMtdParam._m0[17u].w * _745.z) - _732) * _418) + _732;
    vec4 _769 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _778 = (((cbMtdParam._m0[17u].z * _769.z) - _756) * _471) + _756;
    float _783 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_683.z * cbMtdParam._m0[18u].z) - _778)) + _778;
    vec4 _796 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _810 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_796.z * cbMtdParam._m0[19u].y) - _783)) + _783;
    float _815 = ((_723.x - _707) * _359) + _707;
    float _816 = ((_723.y - _708) * _359) + _708;
    float _821 = ((_745.x - _815) * _418) + _815;
    float _822 = ((_745.y - _816) * _418) + _816;
    float _831 = ((((_769.x - _821) * _471) + _821) * 2.0) + (-1.0);
    float _832 = ((((_769.y - _822) * _471) + _822) * 2.0) + (-1.0);
    float _833 = dot(vec2(_831, _832), vec2(_831, _832));
    float _3920 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _838 = sqrt(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))));
    float _851 = (((((_683.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _831) + ((((_796.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _852 = (((((_683.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _832) + ((((_796.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _855 = fma(_838, _242 * NORMAL.x, fma(_852, _249 * TANGENT.x, (_235 * _227) * _851));
    float _858 = fma(_838, _242 * NORMAL.y, fma(_852, _249 * TANGENT.y, (_235 * _228) * _851));
    float _861 = fma(_838, _242 * NORMAL.z, fma(_852, _249 * TANGENT.z, (_235 * _229) * _851));
    float _865 = inversesqrt(dot(vec3(_855, _858, _861), vec3(_855, _858, _861)));
    float _866 = _865 * _855;
    float _867 = _865 * _858;
    float _868 = _865 * _861;
    float _3931 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _869 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3953 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3964 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3975 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _873 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _889 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _939 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _929);
    float _940 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _929);
    float _941 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _929);
    float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
    float _946 = _939 * _945;
    float _947 = _940 * _945;
    float _948 = _941 * _945;
    vec4 _953 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _955 = _953.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1127 = sqrt(((_939 * _939) + (_940 * _940)) + (_941 * _941));
        float _1133 = (cbMatDynParam._m0[5u].x * _1127) + cbMatDynParam._m0[5u].y;
        float _3986 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1138 = (cbMatDynParam._m0[5u].z * _1127) + cbMatDynParam._m0[5u].w;
        float _3997 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) - _1134)) + _1134) < ((_955 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _966 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _967 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _985 = fma(_868, cbSceneParam._m0[5u].z, fma(_867, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _866));
    float _988 = fma(_868, cbSceneParam._m0[6u].z, fma(_867, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _866));
    float _991 = fma(_868, cbSceneParam._m0[7u].z, fma(_867, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _866));
    uint _1004 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1005 = _1004 + 9u;
    uint _1006 = _1005 + uint(cbMatDynParam._m0[0u].w);
    float _1012 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_1006].x;
    float _1013 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * cbInstanceData._m0[_1006].y;
    float _1014 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * cbInstanceData._m0[_1006].z;
    float _4008 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1016 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1018 = 1.0 - _873;
    float _1019 = _1015 * _1018;
    float _1020 = _1016 * _1018;
    float _1021 = _1017 * _1018;
    float _1026 = (_1015 + (-0.039999999105930328369140625)) * _873;
    float _1027 = (_1016 + (-0.039999999105930328369140625)) * _873;
    float _1028 = (_1017 + (-0.039999999105930328369140625)) * _873;
    float _1029 = _1026 + 0.039999999105930328369140625;
    float _1031 = _1027 + 0.039999999105930328369140625;
    float _1032 = _1028 + 0.039999999105930328369140625;
    vec4 _1041 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _966, cbSceneParam._m0[86u].y * _967));
    float _1044 = _1041.x * TEXCOORD_5.w;
    float _1045 = dot(vec3(_866, _867, _868), vec3(_946, _947, _948));
    float _1048 = _1045 * 2.0;
    float _1052 = (_1048 * _866) - _946;
    float _1053 = (_1048 * _867) - _947;
    float _1054 = (_1048 * _868) - _948;
    float _1058 = abs(dot(vec3(_946, _947, _948), vec3(_866, _867, _868)));
    float _4041 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1060 = sqrt(_869);
    float _1073 = exp2((_1060 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1060 * 3.0));
    float _1079 = (1.0 - _1073) * ((_1060 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1080 = _1073 * _1060;
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1446;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1171 = fma(_1116, cbModelParam._m0[26u].z, fma(_1112, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1108));
        float _1175 = fma(_1116, cbModelParam._m0[27u].z, fma(_1112, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1108));
        float _1179 = fma(_1116, cbModelParam._m0[28u].z, fma(_1112, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1108));
        float _1204 = _1108 + _866;
        float _1205 = _1112 + _867;
        float _1206 = _1116 + _868;
        float _1216 = fma(_1206, cbModelParam._m0[26u].z, fma(_1205, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1204)) - _1171;
        float _1217 = fma(_1206, cbModelParam._m0[27u].z, fma(_1205, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1204)) - _1175;
        float _1218 = fma(_1206, cbModelParam._m0[28u].z, fma(_1205, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1204)) - _1179;
        float _1222 = inversesqrt(dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218)));
        float _1235 = ((_1222 * _1216) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1171 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1222 * _1217) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1175 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1222 * _1218) / cbModelParam._m0[34u].z) + ((((((_1179 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        float _1274 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1240.x + (-0.5));
        float _1276 = _1274 * (_1240.y + (-0.5));
        float _1277 = _1274 * (_1240.z + (-0.5));
        float _1284 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1247.x + (-0.5));
        float _1286 = _1284 * (_1247.y + (-0.5));
        float _1287 = _1284 * (_1247.z + (-0.5));
        float _1294 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1254.x + (-0.5));
        float _1296 = _1294 * (_1254.y + (-0.5));
        float _1297 = _1294 * (_1254.z + (-0.5));
        float _1304 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1261.x + (-0.5));
        float _1306 = _1304 * (_1261.y + (-0.5));
        float _1307 = _1304 * (_1261.z + (-0.5));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = _1275 * 0.5;
        float _1312 = _1285 * 0.5;
        float _1313 = _1295 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1328 = (dot(vec3(_866, _867, _868), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1338 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4089 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1340 + 1.0))) + _1345) * _1308;
        float _1355 = _1276 * 0.5;
        float _1356 = _1286 * 0.5;
        float _1357 = _1296 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_866, _867, _868), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4122 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1382 + 1.0))) + _1387) * _1309;
        float _1397 = _1277 * 0.5;
        float _1398 = _1287 * 0.5;
        float _1399 = _1297 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_866, _867, _868), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4155 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1424 + 1.0))) + _1429) * _1310;
        _1446 = _1277;
        _1448 = _1276;
        _1449 = _1275;
        _1450 = _1287;
        _1451 = _1286;
        _1452 = _1285;
        _1453 = _1297;
        _1454 = _1296;
        _1455 = _1295;
        _1456 = _1310;
        _1457 = _1309;
        _1458 = _1308;
        _1459 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1460 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1461 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
    }
    else
    {
        _1446 = _1447;
        _1448 = _1447;
        _1449 = _1447;
        _1450 = _1447;
        _1451 = _1447;
        _1452 = _1447;
        _1453 = _1447;
        _1454 = _1447;
        _1455 = _1447;
        _1456 = _1447;
        _1457 = _1447;
        _1458 = _1447;
        _1459 = 0.0;
        _1460 = 0.0;
        _1461 = 0.0;
    }
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1490 = fma(_1116, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1108));
        float _1494 = fma(_1116, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1108));
        float _1498 = fma(_1116, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1108));
        float _1521 = _1108 + _866;
        float _1522 = _1112 + _867;
        float _1523 = _1116 + _868;
        float _1533 = fma(_1523, cbModelParam._m0[30u].z, fma(_1522, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1521)) - _1490;
        float _1534 = fma(_1523, cbModelParam._m0[31u].z, fma(_1522, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1521)) - _1494;
        float _1535 = fma(_1523, cbModelParam._m0[32u].z, fma(_1522, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1521)) - _1498;
        float _1539 = inversesqrt(dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535)));
        float _1552 = ((_1539 * _1533) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1490 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1553 = ((_1539 * _1534) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1494 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1539 * _1535) / cbModelParam._m0[35u].z) + ((((((_1498 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        float _1589 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1556.x + (-0.5));
        float _1591 = _1589 * (_1556.y + (-0.5));
        float _1592 = _1589 * (_1556.z + (-0.5));
        float _1599 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1563.x + (-0.5));
        float _1601 = _1599 * (_1563.y + (-0.5));
        float _1602 = _1599 * (_1563.z + (-0.5));
        float _1609 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1570.x + (-0.5));
        float _1611 = _1609 * (_1570.y + (-0.5));
        float _1612 = _1609 * (_1570.z + (-0.5));
        float _1619 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1577.x + (-0.5));
        float _1621 = _1619 * (_1577.y + (-0.5));
        float _1622 = _1619 * (_1577.z + (-0.5));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = _1590 * 0.5;
        float _1627 = _1600 * 0.5;
        float _1628 = _1610 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_866, _867, _868), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4218 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1653 + 1.0))) + _1658) * _1623;
        float _1668 = _1591 * 0.5;
        float _1669 = _1601 * 0.5;
        float _1670 = _1611 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_866, _867, _868), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4251 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1695 + 1.0))) + _1700) * _1624;
        float _1710 = _1592 * 0.5;
        float _1711 = _1602 * 0.5;
        float _1712 = _1612 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_866, _867, _868), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4284 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1737 + 1.0))) + _1742) * _1625;
        _1759 = _1592;
        _1760 = _1591;
        _1761 = _1590;
        _1762 = _1602;
        _1763 = _1601;
        _1764 = _1600;
        _1765 = _1612;
        _1766 = _1611;
        _1767 = _1610;
        _1768 = _1625;
        _1769 = _1624;
        _1770 = _1623;
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
    }
    else
    {
        _1759 = _1447;
        _1760 = _1447;
        _1761 = _1447;
        _1762 = _1447;
        _1763 = _1447;
        _1764 = _1447;
        _1765 = _1447;
        _1766 = _1447;
        _1767 = _1447;
        _1768 = _1447;
        _1769 = _1447;
        _1770 = _1447;
        _1771 = 0.0;
        _1772 = 0.0;
        _1773 = 0.0;
    }
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1459)) + _1459;
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1460)) + _1460;
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1461)) + _1461;
    float _1806 = fma(_1785, cbSceneParam._m0[89u].z, fma(_1784, cbSceneParam._m0[89u].y, _1783 * cbSceneParam._m0[89u].x));
    float _1809 = fma(_1785, cbSceneParam._m0[90u].z, fma(_1784, cbSceneParam._m0[90u].y, _1783 * cbSceneParam._m0[90u].x));
    float _1812 = fma(_1785, cbSceneParam._m0[91u].z, fma(_1784, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1783));
    float _1827 = _1052 * 0.5;
    float _1828 = _1053 * 0.5;
    float _1829 = _1054 * 0.5;
    float _1830 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1833 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1836 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1870;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1843 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1446, _1450, _1453, _1456));
        float _1847 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1448, _1451, _1454, _1457));
        float _1851 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1449, _1452, _1455, _1458));
        float _1858 = dot(vec4(cbModelParam._m0[39u]), vec4(_1827, _1828, _1829, 1.0));
        _1870 = dot(vec3(isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1858) ? 0.0 : (isnan(0.0) ? _1858 : max(0.0, _1858))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1870 = 1.0;
    }
    float _1881;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1872 = dot(vec4(cbModelParam._m0[40u]), vec4(_1827, _1828, _1829, 1.0));
        _1881 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1872) ? 0.0 : (isnan(0.0) ? _1872 : max(0.0, _1872))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1881 = 1.0;
    }
    float _1885 = (_1881 * cbModelParam._m0[1u].x) + (_1870 * (1.0 - cbModelParam._m0[1u].x));
    float _1895 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _869);
    float _1896 = isnan(_1895) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1895 : min(cbModelParam._m0[25u].z, _1895));
    float _1976;
    float _1978;
    float _1980;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1943 = fma(_1116, cbModelParam._m0[13u].z, fma(_1112, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1108)) + cbModelParam._m0[13u].w;
        float _1947 = fma(_1116, cbModelParam._m0[14u].z, fma(_1112, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1108)) + cbModelParam._m0[14u].w;
        float _1951 = fma(_1116, cbModelParam._m0[15u].z, fma(_1112, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1108)) + cbModelParam._m0[15u].w;
        float _1954 = fma(_1054, cbModelParam._m0[13u].z, fma(_1053, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1052));
        float _1957 = fma(_1054, cbModelParam._m0[14u].z, fma(_1053, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1052));
        float _1960 = fma(_1054, cbModelParam._m0[15u].z, fma(_1053, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1052));
        float _1988;
        if (_1954 > 0.0)
        {
            _1988 = abs((1.0 - _1943) / _1954);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1943 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1988 = frontier_phi_17_15_ladder;
        }
        float _2212;
        if (_1957 > 0.0)
        {
            _2212 = abs((1.0 - _1947) / _1957);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1947 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2212 = frontier_phi_26_22_ladder;
        }
        float _2469;
        if (_1960 > 0.0)
        {
            _2469 = abs((1.0 - _1951) / _1960);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1951 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2469 = frontier_phi_38_33_ladder;
        }
        float _2471 = isnan(_2212) ? _1988 : (isnan(_1988) ? _2212 : min(_1988, _2212));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1954) + _1943;
        float _2477 = (_2472 * _1957) + _1947;
        float _2478 = (_2472 * _1960) + _1951;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2479;
        float _2483 = _2479 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 > _2483) || ((_2477 < _2481) || ((_2476 < _2481) || (_2476 > _2483))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2606 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2478, cbModelParam._m0[9u].z, fma(_2477, cbModelParam._m0[9u].y, _2476 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2478, cbModelParam._m0[10u].z, fma(_2477, cbModelParam._m0[10u].y, _2476 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2478, cbModelParam._m0[11u].z, fma(_2477, cbModelParam._m0[11u].y, _2476 * cbModelParam._m0[11u].x))), _1896);
            frontier_phi_16_38_ladder = _2606.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2606.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2606.x * cbModelParam._m0[1u].y;
        }
        _1976 = frontier_phi_16_38_ladder_2;
        _1978 = frontier_phi_16_38_ladder_1;
        _1980 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1964 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1052, _1053, _1054), _1896);
        _1976 = _1964.x * cbModelParam._m0[1u].y;
        _1978 = _1964.y * cbModelParam._m0[1u].y;
        _1980 = _1964.z * cbModelParam._m0[1u].y;
    }
    float _1984 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _869);
    float _1985 = isnan(_1984) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1984 : min(cbModelParam._m0[25u].w, _1984));
    float _2074;
    float _2076;
    float _2078;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2038 = fma(_1116, cbModelParam._m0[21u].z, fma(_1112, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1108)) + cbModelParam._m0[21u].w;
        float _2042 = fma(_1116, cbModelParam._m0[22u].z, fma(_1112, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1108)) + cbModelParam._m0[22u].w;
        float _2046 = fma(_1116, cbModelParam._m0[23u].z, fma(_1112, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1108)) + cbModelParam._m0[23u].w;
        float _2049 = fma(_1054, cbModelParam._m0[21u].z, fma(_1053, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1052));
        float _2052 = fma(_1054, cbModelParam._m0[22u].z, fma(_1053, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1052));
        float _2055 = fma(_1054, cbModelParam._m0[23u].z, fma(_1053, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1052));
        float _2217;
        if (_2049 > 0.0)
        {
            _2217 = abs((1.0 - _2038) / _2049);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2038 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2217 = frontier_phi_28_24_ladder;
        }
        float _2496;
        if (_2052 > 0.0)
        {
            _2496 = abs((1.0 - _2042) / _2052);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2042 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2496 = frontier_phi_40_35_ladder;
        }
        float _2709;
        if (_2055 > 0.0)
        {
            _2709 = abs((1.0 - _2046) / _2055);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2046 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2709 = frontier_phi_49_46_ladder;
        }
        float _2711 = isnan(_2496) ? _2217 : (isnan(_2217) ? _2496 : min(_2217, _2496));
        float _2712 = isnan(_2709) ? _2711 : (isnan(_2711) ? _2709 : min(_2711, _2709));
        float _2716 = (_2712 * _2049) + _2038;
        float _2717 = (_2712 * _2052) + _2042;
        float _2718 = (_2712 * _2055) + _2046;
        float _2719 = _2712 * 9.9999997473787516355514526367188e-05;
        float _2720 = (-1.0) - _2719;
        float _2722 = _2719 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2718 > _2722) || ((_2718 < _2720) || ((_2717 > _2722) || ((_2717 < _2720) || ((_2716 < _2720) || (_2716 > _2722))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2718, cbModelParam._m0[17u].z, fma(_2717, cbModelParam._m0[17u].y, _2716 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2718, cbModelParam._m0[18u].z, fma(_2717, cbModelParam._m0[18u].y, _2716 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2718, cbModelParam._m0[19u].z, fma(_2717, cbModelParam._m0[19u].y, _2716 * cbModelParam._m0[19u].x))), _1985);
            frontier_phi_25_49_ladder = _2917.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2917.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2917.x * cbModelParam._m0[1u].z;
        }
        _2074 = frontier_phi_25_49_ladder_2;
        _2076 = frontier_phi_25_49_ladder_1;
        _2078 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2058 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1052, _1053, _1054), _1985);
        _2074 = _2058.x * cbModelParam._m0[1u].z;
        _2076 = _2058.y * cbModelParam._m0[1u].z;
        _2078 = _2058.z * cbModelParam._m0[1u].z;
    }
    float _2091 = (((_1079 * _1029) + _1080) * _1044) * ((cbModelParam._m0[1u].w * (_2074 - _1976)) + _1976);
    float _2093 = (((_1079 * _1031) + _1080) * _1044) * ((cbModelParam._m0[1u].w * (_2076 - _1978)) + _1978);
    float _2095 = (((_1079 * _1032) + _1080) * _1044) * ((cbModelParam._m0[1u].w * (_2078 - _1980)) + _1980);
    float _2098 = fma(_2095, cbSceneParam._m0[89u].z, fma(_2093, cbSceneParam._m0[89u].y, _2091 * cbSceneParam._m0[89u].x));
    float _2101 = fma(_2095, cbSceneParam._m0[90u].z, fma(_2093, cbSceneParam._m0[90u].y, _2091 * cbSceneParam._m0[90u].x));
    float _2104 = fma(_2095, cbSceneParam._m0[91u].z, fma(_2093, cbSceneParam._m0[91u].y, _2091 * cbSceneParam._m0[91u].x));
    vec4 _2112 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_966, _967));
    float _2114 = _2112.w;
    float _2126 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2114);
    float _2127 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2114);
    float _2128 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2114);
    uvec4 _2132 = floatBitsToUint(cbInstanceData._m0[_1004 + 5u]);
    uint _2134 = _2132.x * 14u;
    uint _2135 = _2134 + 13u;
    float _2142 = _1044 + (-1.0);
    float _2147 = (cbLight._m0[_2135].x * _2142) + 1.0;
    float _2148 = (cbLight._m0[_2135].y * _2142) + 1.0;
    float _2149 = (cbLight._m0[_2135].z * _2142) + 1.0;
    float _2150 = (cbLight._m0[_2135].w * _2142) + 1.0;
    uint _2151 = _2134 + 5u;
    float _2157 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
    uint _2161 = _2134 + 4u;
    float _2171 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
    uint _2175 = _2134 | 1u;
    float _2186 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_866, _867, _868));
    float _2189 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_866, _867, _868));
    float _4420 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _4431 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2194 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * 0.3183098733425140380859375;
    float _2196 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * 0.3183098733425140380859375;
    float _2203 = ((cbLight._m0[_2151].x * _2157) * _2196) + (((cbLight._m0[_2161].x * _2126) * _2171) * _2194);
    float _2204 = ((_2157 * cbLight._m0[_2151].y) * _2196) + (((cbLight._m0[_2161].y * _2127) * _2171) * _2194);
    float _2205 = ((_2157 * cbLight._m0[_2151].z) * _2196) + (((cbLight._m0[_2161].z * _2128) * _2171) * _2194);
    uvec4 _2209 = floatBitsToUint(cbLight._m0[_2134 + 12u]);
    bool _2211 = _2209.x == 0u;
    float _2222;
    float _2224;
    float _2226;
    if (_2211)
    {
        _2222 = _2203;
        _2224 = _2204;
        _2226 = _2205;
    }
    else
    {
        uint _2230 = _2134 + 6u;
        float _2246 = (dot(vec3(cbLight._m0[_2134 + 2u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2247 = _2246 * _2246;
        float _4442 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2248 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2249 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2222 = (((cbLight._m0[_2230].x * 0.3183098733425140380859375) * _2248) * _2249) + _2203;
        _2224 = (((cbLight._m0[_2230].y * 0.3183098733425140380859375) * _2248) * _2249) + _2204;
        _2226 = (((cbLight._m0[_2230].z * 0.3183098733425140380859375) * _2248) * _2249) + _2205;
    }
    bool _2229 = _2209.y == 0u;
    float _2267;
    float _2269;
    float _2271;
    if (_2229)
    {
        _2267 = _2222;
        _2269 = _2224;
        _2271 = _2226;
    }
    else
    {
        uint _2440 = _2134 + 7u;
        float _2456 = (dot(vec3(cbLight._m0[_2134 + 3u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2457 = _2456 * _2456;
        float _4458 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2458 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2459 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2267 = (((cbLight._m0[_2440].x * 0.3183098733425140380859375) * _2458) * _2459) + _2222;
        _2269 = (((cbLight._m0[_2440].y * 0.3183098733425140380859375) * _2458) * _2459) + _2224;
        _2271 = (((cbLight._m0[_2440].z * 0.3183098733425140380859375) * _2458) * _2459) + _2226;
    }
    uint _2274 = _2134 + 8u;
    float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _869) * 0.949999988079071044921875);
    float _2288 = _2287 * _2287;
    float _2289 = cbLight._m0[_2134].x + _946;
    float _2290 = cbLight._m0[_2134].y + _947;
    float _2291 = cbLight._m0[_2134].z + _948;
    float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
    float _2296 = _2295 * _2289;
    float _2297 = _2295 * _2290;
    float _2298 = _2295 * _2291;
    float _2299 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2134].xyz));
    float _4474 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _4485 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _2303 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _2304 = dot(vec3(_866, _867, _868), vec3(_2296, _2297, _2298));
    float _4496 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2296, _2297, _2298));
    float _4507 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2288 * _2288;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0);
    float _2325 = 0.959999978542327880859375 - _1026;
    float _2327 = 0.959999978542327880859375 - _1027;
    float _2328 = 0.959999978542327880859375 - _1028;
    float _2335 = 1.0 - _2288;
    float _2346 = (0.5 / (((_2303 * ((_2302 * _2335) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2335) + _2288) * _2302))) * _2302;
    float _4518 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2348 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    uint _2362 = _2134 + 9u;
    float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _869) * 0.949999988079071044921875);
    float _2374 = _2373 * _2373;
    float _2375 = cbLight._m0[_2175].x + _946;
    float _2376 = cbLight._m0[_2175].y + _947;
    float _2377 = cbLight._m0[_2175].z + _948;
    float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
    float _2382 = _2381 * _2375;
    float _2383 = _2381 * _2376;
    float _2384 = _2381 * _2377;
    float _2385 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2175].xyz));
    float _4529 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2389 = dot(vec3(_866, _867, _868), vec3(_2382, _2383, _2384));
    float _4540 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2393 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2382, _2383, _2384));
    float _4551 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2397 = _2374 * _2374;
    float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
    float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0);
    float _2415 = 1.0 - _2374;
    float _2425 = (0.5 / (((_2303 * ((_2388 * _2415) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2415) + _2374) * _2388))) * _2388;
    float _4562 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2427 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
    float _2437 = (((((_2408 * _2325) + _1029) * cbLight._m0[_2362].x) * _2427) * _2157) + ((((cbLight._m0[_2274].x * _2126) * ((_2324 * _2325) + _1029)) * _2348) * _2171);
    float _2438 = (((((_2408 * _2327) + _1031) * cbLight._m0[_2362].y) * _2427) * _2157) + ((((cbLight._m0[_2274].y * _2127) * ((_2324 * _2327) + _1031)) * _2348) * _2171);
    float _2439 = (((((_2408 * _2328) + _1032) * cbLight._m0[_2362].z) * _2427) * _2157) + ((((cbLight._m0[_2274].z * _2128) * ((_2324 * _2328) + _1032)) * _2348) * _2171);
    float _2501;
    float _2503;
    float _2505;
    if (_2211)
    {
        _2501 = _2437;
        _2503 = _2438;
        _2505 = _2439;
    }
    else
    {
        uint _2507 = _2134 + 2u;
        uint _2511 = _2134 + 10u;
        float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2507].w)) * _869) * 0.949999988079071044921875);
        float _2526 = _2525 * _2525;
        float _2527 = cbLight._m0[_2507].x + _946;
        float _2528 = cbLight._m0[_2507].y + _947;
        float _2529 = cbLight._m0[_2507].z + _948;
        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
        float _2534 = _2533 * _2527;
        float _2535 = _2533 * _2528;
        float _2536 = _2533 * _2529;
        float _2537 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2507].xyz));
        float _4573 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2541 = dot(vec3(_866, _867, _868), vec3(_2534, _2535, _2536));
        float _4584 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2545 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_2534, _2535, _2536));
        float _4595 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2549 = _2526 * _2526;
        float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
        float _2560 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
        float _2567 = 1.0 - _2526;
        float _2577 = (0.5 / (((_2303 * ((_2540 * _2567) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2567) + _2526) * _2540))) * _2540;
        float _4606 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2579 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
        float _2580 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2501 = (((((_2560 * _2325) + _1029) * cbLight._m0[_2511].x) * _2579) * _2580) + _2437;
        _2503 = (((((_2560 * _2327) + _1031) * cbLight._m0[_2511].y) * _2579) * _2580) + _2438;
        _2505 = (((((_2560 * _2328) + _1032) * cbLight._m0[_2511].z) * _2579) * _2580) + _2439;
    }
    float _2615;
    float _2617;
    float _2619;
    if (_2229)
    {
        _2615 = _2501;
        _2617 = _2503;
        _2619 = _2505;
    }
    else
    {
        uint _2626 = _2134 + 3u;
        uint _2630 = _2134 + 11u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _869) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _946;
        float _2647 = cbLight._m0[_2626].y + _947;
        float _2648 = cbLight._m0[_2626].z + _948;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2626].xyz));
        float _4622 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2660 = dot(vec3(_866, _867, _868), vec3(_2653, _2654, _2655));
        float _4633 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4644 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) * 5.0);
        float _2686 = 1.0 - _2645;
        float _2696 = (0.5 / (((_2303 * ((_2659 * _2686) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2686) + _2645) * _2659))) * _2659;
        float _4655 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2615 = (((((_2679 * _2325) + _1029) * cbLight._m0[_2630].x) * _2698) * _2699) + _2501;
        _2617 = (((((_2679 * _2327) + _1031) * cbLight._m0[_2630].y) * _2698) * _2699) + _2503;
        _2619 = (((((_2679 * _2328) + _1032) * cbLight._m0[_2630].z) * _2698) * _2699) + _2505;
    }
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_2132.y == 0u)
    {
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2775 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2774;
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2774;
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2774;
        uvec4 _2789 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2790 = _2789.x;
        uint _2801 = uint((float(_2789.y) * floor(float(uint(cbSceneParam._m0[85u].y * _967) / _2790))) + floor(float(uint(cbSceneParam._m0[85u].x * _966) / _2790)));
        float _2811 = (log2(_2777 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2812 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        uint _2815 = uint(isnan(14.0) ? _2812 : (isnan(_2812) ? 14.0 : min(_2812, 14.0)));
        uvec4 _2820 = texelFetch(g_lightClusterGridBuffer, int(((_2815 << 2u) + (_2801 << 6u)) >> 2u));
        uint _2821 = _2820.x;
        uint _2822 = _2789.z;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        if (((((1u << ((_2822 >> 4u) & 15u)) + 4294967295u) & _2821) == 0u) || ((_2822 & 240u) == 0u))
        {
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
        }
        else
        {
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            uint _3081 = 0u;
            uint _3090;
            bool _3091;
            for (;;)
            {
                _3090 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3081 << 2u)) >> 2u)).x;
                _3091 = _3090 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3091)
                {
                    frontier_phi_66_pred = _3075;
                    frontier_phi_66_pred_1 = _3080;
                    frontier_phi_66_pred_2 = _3079;
                    frontier_phi_66_pred_3 = _3078;
                    frontier_phi_66_pred_4 = _3077;
                    frontier_phi_66_pred_5 = _3076;
                }
                else
                {
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    uint _3226;
                    _3220 = _3075;
                    _3221 = _3076;
                    _3222 = _3077;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3090;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    for (;;)
                    {
                        uint _3230 = uint(findLSB(_3226)) + (_3081 << 5u);
                        uint _3227 = (_3226 + 4294967295u) & _3226;
                        uint _3232 = _3230 * 48u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3252 = (_3230 * 48u) + 4u;
                        vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 3u)).x));
                        uint _3271 = (_3230 * 48u) + 8u;
                        vec3 _3282 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x));
                        float _3286 = _3246.x - _2775;
                        float _3287 = _3246.y - _2776;
                        float _3288 = _3246.z - _2777;
                        float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                        float _3292 = inversesqrt(_3289);
                        float _3293 = _3292 * _3286;
                        float _3294 = _3292 * _3287;
                        float _3295 = _3292 * _3288;
                        float _3296 = dot(vec3(_985, _988, _991), vec3(_3293, _3294, _3295));
                        float _3301 = 1.0 - (_3289 * _3246.w);
                        float _4681 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3303 = sqrt(_3289) * _3265.w;
                        float _3306 = 1.39999997615814208984375 / (_3303 + 1.39999997615814208984375);
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3296) + _3307;
                        float _3313 = _3303 * _3303;
                        float _3317 = ((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3302) / ((_3313 * 0.699999988079071044921875) + 1.0);
                        float _3321 = (-0.0) - _2775;
                        float _3322 = (-0.0) - _2776;
                        float _3323 = (-0.0) - _2777;
                        float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                        float _3328 = _3327 * _3321;
                        float _3329 = _3327 * _3322;
                        float _3330 = _3327 * _3323;
                        float _3338 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                        float _3339 = 1.0 - _1060;
                        float _3346 = sqrt(1.0 - ((1.0 - (_3339 * _3339)) * (1.0 - (_3338 * _3338))));
                        float _3347 = _3346 * _3346;
                        float _3348 = _3347 * _3347;
                        float _3349 = _3328 + _3293;
                        float _3350 = _3329 + _3294;
                        float _3351 = _3330 + _3295;
                        float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                        float _3359 = dot(vec3(_985, _988, _991), vec3(_3328, _3329, _3330));
                        float _4697 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3362 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3363 = dot(vec3(_985, _988, _991), vec3(_3355 * _3349, _3355 * _3350, _3355 * _3351));
                        float _4708 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3366 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                        float _3370 = ((_3366 * _3366) * (_3348 + (-1.0))) + 1.0;
                        float _3371 = _3306 * _3347;
                        float _3372 = _3371 * _3371;
                        float _3375 = ((1.0 - _3372) * _3296) + _3372;
                        float _4719 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3376 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3377 = 1.0 - _3347;
                        float _3387 = (0.5 / (((_3376 * ((_3362 * _3377) + _3347)) + 9.9999999392252902907785028219223e-09) + (((_3376 * _3377) + _3347) * _3362))) * _3376;
                        float _4730 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3398 = (((_3348 * 3.1415927410125732421875) * (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) / ((_3370 * _3370) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125))) * _3302;
                        _3150 = (_3317 * _3265.x) + _3223;
                        _3151 = (_3317 * _3265.y) + _3224;
                        _3152 = (_3317 * _3265.z) + _3225;
                        _3147 = (_3398 * _3282.x) + _3220;
                        _3148 = (_3398 * _3282.y) + _3221;
                        _3149 = (_3398 * _3282.z) + _3222;
                        if (_3227 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3220 = _3147;
                            _3221 = _3148;
                            _3222 = _3149;
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3227;
                        }
                    }
                    frontier_phi_66_pred = _3147;
                    frontier_phi_66_pred_1 = _3152;
                    frontier_phi_66_pred_2 = _3151;
                    frontier_phi_66_pred_3 = _3150;
                    frontier_phi_66_pred_4 = _3149;
                    frontier_phi_66_pred_5 = _3148;
                }
                _2923 = frontier_phi_66_pred;
                _2933 = frontier_phi_66_pred_1;
                _2931 = frontier_phi_66_pred_2;
                _2929 = frontier_phi_66_pred_3;
                _2927 = frontier_phi_66_pred_4;
                _2925 = frontier_phi_66_pred_5;
                uint _3082 = _3081 + 1u;
                if (_3082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3075 = _2923;
                    _3076 = _2925;
                    _3077 = _2927;
                    _3078 = _2929;
                    _3079 = _2931;
                    _3080 = _2933;
                    _3081 = _3082;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
        }
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.z;
        uint _2939 = (_2937 >> 8u) & 15u;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        if (((4294967295u << _2939) & _2821) == 0u)
        {
            _3043 = _2922;
            _3045 = _2924;
            _3047 = _2926;
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
        }
        else
        {
            float _3068 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
            float _3069 = _3068 * _2775;
            float _3070 = _3068 * _2776;
            float _3071 = _3068 * _2777;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2939 < ((_2937 >> 12u) & 15u))
            {
                float _3044;
                float _3046;
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3203 = _2922;
                float _3204 = _2924;
                float _3205 = _2926;
                float _3206 = _2928;
                float _3207 = _2930;
                float _3208 = _2932;
                uint _3209 = _2939;
                uint _3218;
                bool _3219;
                for (;;)
                {
                    _3218 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3209 << 2u)) >> 2u)).x;
                    _3219 = _3218 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3219)
                    {
                        frontier_phi_77_pred = _3208;
                        frontier_phi_77_pred_1 = _3207;
                        frontier_phi_77_pred_2 = _3206;
                        frontier_phi_77_pred_3 = _3205;
                        frontier_phi_77_pred_4 = _3204;
                        frontier_phi_77_pred_5 = _3203;
                    }
                    else
                    {
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3425 = _3203;
                        float _3426 = _3204;
                        float _3427 = _3205;
                        float _3428 = _3206;
                        float _3429 = _3207;
                        float _3430 = _3208;
                        uint _3431 = _3218;
                        uint _3432;
                        vec4 _3457;
                        float _3458;
                        vec4 _3473;
                        vec3 _3485;
                        vec4 _3500;
                        vec4 _3515;
                        float _3562;
                        bool _3563;
                        for (;;)
                        {
                            uint _3442 = ((_3209 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3431));
                            _3432 = (_3431 + 4294967295u) & _3431;
                            uint _3444 = _3442 * 40u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            _3458 = _3457.w;
                            uint _3460 = (_3442 * 40u) + 4u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3442 * 40u) + 8u;
                            _3485 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x));
                            uint _3487 = (_3442 * 40u) + 16u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3502 = (_3442 * 40u) + 20u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3518 = (_3442 * 40u) + 24u;
                            vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3537 = (_3442 * 40u) + 28u;
                            vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            _3562 = fma(_2777, _3550.z, fma(_2776, _3550.y, _3550.x * _2775)) + _3550.w;
                            _3563 = !((fma(_2777, _3531.z, fma(_2776, _3531.y, _3531.x * _2775)) + _3531.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3563)
                            {
                                float _3590 = _3457.x - _2775;
                                float _3591 = _3457.y - _2776;
                                float _3592 = _3457.z - _2777;
                                float _3593 = dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592));
                                float _3596 = inversesqrt(_3593);
                                float _3597 = _3596 * _3590;
                                float _3598 = _3596 * _3591;
                                float _3599 = _3596 * _3592;
                                float _3603 = 1.0 - (_3593 / (_3458 * _3458));
                                float _4741 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3608 = sqrt(_3593) * _3473.w;
                                float _3610 = 1.39999997615814208984375 / (_3608 + 1.39999997615814208984375);
                                float _3611 = _3610 * _3610;
                                float _3614 = ((1.0 - _3611) * dot(vec3(_3597, _3598, _3599), vec3(_985, _988, _991))) + _3611;
                                float _3617 = _3608 * _3608;
                                float _3621 = (fma(_2777, _3500.z, fma(_2776, _3500.y, _3500.x * _2775)) + _3500.w) / _3562;
                                float _3622 = (fma(_2777, _3515.z, fma(_2776, _3515.y, _3515.x * _2775)) + _3515.w) / _3562;
                                float _3626 = 1.0 - dot(vec2(_3621, _3622), vec2(_3621, _3622));
                                float _4757 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3628 = _3627 * (((isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0))) * _3604) / ((_3617 * 0.699999988079071044921875) + 1.0));
                                float _3640 = exp2(log2(1.0 / ((_3617 * 3.5) + 5.0)) * 0.25);
                                float _3641 = 1.0 - _1060;
                                float _3648 = sqrt(1.0 - ((1.0 - (_3641 * _3641)) * (1.0 - (_3640 * _3640))));
                                float _3649 = _3648 * _3648;
                                float _3650 = _3649 * _3649;
                                float _3651 = _3597 - _3069;
                                float _3652 = _3598 - _3070;
                                float _3653 = _3599 - _3071;
                                float _3657 = inversesqrt(dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653)));
                                float _3661 = dot(vec3(_985, _988, _991), vec3((-0.0) - _3069, (-0.0) - _3070, (-0.0) - _3071));
                                float _4768 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3664 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3665 = dot(vec3(_985, _988, _991), vec3(_3657 * _3651, _3657 * _3652, _3657 * _3653));
                                float _4779 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3668 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3672 = ((_3668 * _3668) * (_3650 + (-1.0))) + 1.0;
                                float _3673 = _3610 * _3649;
                                float _3674 = _3673 * _3673;
                                float _3680 = ((1.0 - _3674) * dot(vec3(_985, _988, _991), vec3(_3597, _3598, _3599))) + _3674;
                                float _4790 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3682 = 1.0 - _3649;
                                float _3692 = (0.5 / (((_3681 * ((_3664 * _3682) + _3649)) + 9.9999999392252902907785028219223e-09) + (((_3681 * _3682) + _3649) * _3664))) * _3681;
                                float _4801 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3702 = (_3627 * _3604) * (((_3650 * 3.1415927410125732421875) * (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) / ((_3672 * _3672) * ((_3617 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3628 * _3473.y;
                                frontier_phi_83_pred_1 = _3628 * _3473.x;
                                frontier_phi_83_pred_2 = _3702 * _3485.z;
                                frontier_phi_83_pred_3 = _3702 * _3485.y;
                                frontier_phi_83_pred_4 = _3702 * _3485.x;
                                frontier_phi_83_pred_5 = _3628 * _3473.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3710 = frontier_phi_83_pred;
                            _3709 = frontier_phi_83_pred_1;
                            _3708 = frontier_phi_83_pred_2;
                            _3707 = frontier_phi_83_pred_3;
                            _3706 = frontier_phi_83_pred_4;
                            _3711 = frontier_phi_83_pred_5;
                            _3415 = _3709 + _3428;
                            _3416 = _3710 + _3429;
                            _3417 = _3711 + _3430;
                            _3412 = _3706 + _3425;
                            _3413 = _3707 + _3426;
                            _3414 = _3708 + _3427;
                            if (_3432 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3432;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3417;
                        frontier_phi_77_pred_1 = _3416;
                        frontier_phi_77_pred_2 = _3415;
                        frontier_phi_77_pred_3 = _3414;
                        frontier_phi_77_pred_4 = _3413;
                        frontier_phi_77_pred_5 = _3412;
                    }
                    _3054 = frontier_phi_77_pred;
                    _3052 = frontier_phi_77_pred_1;
                    _3050 = frontier_phi_77_pred_2;
                    _3048 = frontier_phi_77_pred_3;
                    _3046 = frontier_phi_77_pred_4;
                    _3044 = frontier_phi_77_pred_5;
                    uint _3210 = _3209 + 1u;
                    if (_3210 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3203 = _3044;
                        _3204 = _3046;
                        _3205 = _3048;
                        _3206 = _3050;
                        _3207 = _3052;
                        _3208 = _3054;
                        _3209 = _3210;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3048;
                frontier_phi_58_59_ladder_1 = _3054;
                frontier_phi_58_59_ladder_2 = _3052;
                frontier_phi_58_59_ladder_3 = _3050;
                frontier_phi_58_59_ladder_4 = _3046;
                frontier_phi_58_59_ladder_5 = _3044;
            }
            else
            {
                frontier_phi_58_59_ladder = _2926;
                frontier_phi_58_59_ladder_1 = _2932;
                frontier_phi_58_59_ladder_2 = _2930;
                frontier_phi_58_59_ladder_3 = _2928;
                frontier_phi_58_59_ladder_4 = _2924;
                frontier_phi_58_59_ladder_5 = _2922;
            }
            _3043 = frontier_phi_58_59_ladder_5;
            _3045 = frontier_phi_58_59_ladder_4;
            _3047 = frontier_phi_58_59_ladder;
            _3049 = frontier_phi_58_59_ladder_3;
            _3051 = frontier_phi_58_59_ladder_2;
            _3053 = frontier_phi_58_59_ladder_1;
        }
        float _3058 = isnan(1.0) ? _1044 : (isnan(_1044) ? 1.0 : min(_1044, 1.0));
        _2834 = (_3058 * _3049) + _2267;
        _2836 = (_3058 * _3051) + _2269;
        _2838 = (_3058 * _3053) + _2271;
        _2840 = ((_3043 * _1029) * _3058) + _2615;
        _2842 = ((_3045 * _1031) * _3058) + _2617;
        _2844 = ((_3047 * _1032) * _3058) + _2619;
    }
    else
    {
        _2834 = _2267;
        _2836 = _2269;
        _2838 = _2271;
        _2840 = _2615;
        _2842 = _2617;
        _2844 = _2619;
    }
    float _4817 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _4828 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _4839 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _2861 = ((isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2834 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1044))) + ((_2840 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1885)) * cbPerFrame._m0[3u].x);
    float _2862 = ((isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2836 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1044))) + ((_2842 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1885)) * cbPerFrame._m0[3u].x);
    float _2863 = ((isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2838 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1044))) + ((_2844 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1885)) * cbPerFrame._m0[3u].x);
    uint _2864 = _1004 + 6u;
    float _2872 = _966 / cbSceneParam._m0[86u].x;
    float _2873 = _967 / cbSceneParam._m0[86u].y;
    vec4 _2887 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, (log2((isnan(cbSceneParam._m0[77u].w) ? _889 : (isnan(_889) ? cbSceneParam._m0[77u].w : min(_889, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2889 = _2887.x;
    float _2890 = _2887.y;
    float _2891 = _2887.z;
    float _2892 = _2887.w;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    if (_889 > cbSceneParam._m0[78u].w)
    {
        float _2947 = isnan(_889) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _889 : min(cbSceneParam._m0[80u].w, _889));
        float _2948 = _2947 / _889;
        float _2959 = _2948 * _939;
        float _2960 = _940 * _2948;
        float _2961 = (-0.0) - _2960;
        float _2963 = _2948 * _941;
        float _2965 = (cbSceneParam._m0[77u].w * _2961) / _2947;
        float _2966 = _2965 + cbSceneParam._m0[79u].w;
        float _2967 = cbSceneParam._m0[79u].w - _2960;
        float _2973 = sqrt(((_2959 * _2959) + (_2960 * _2960)) + (_2963 * _2963));
        float _2976 = (1.0 - (cbSceneParam._m0[77u].w / _2947)) * _2973;
        float _2981 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2983 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3160;
        if (abs((_2961 - _2965) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3160 = ((((_2966 > 0.0) ? exp2(_2981 * _2966) : (2.0 - exp2(_2983 * _2966))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2976;
        }
        else
        {
            float _3104 = 1.0 / cbSceneParam._m0[80u].x;
            float _3105 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : max(_2966, _2967));
            float _3106 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : min(_2966, _2967));
            float _3115 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : min(_3105, 0.0));
            float _3116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : min(_3106, 0.0));
            _3160 = ((abs(_2973 / _2961) * cbSceneParam._m0[80u].y) * ((((_3115 - _3116) * 2.0) - ((exp2(_2981 * (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0)))) - exp2(_2981 * (isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))))) * _3104)) - ((exp2(_2983 * _3115) - exp2(_2983 * _3116)) * _3104))) + (_2976 * cbSceneParam._m0[80u].z);
        }
        vec4 _3162 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, 1.0), 0.0);
        float _3171 = exp2((_3160 * (-1.44269502162933349609375)) * (1.0 - _3162.w));
        float _3172 = log2(_3171);
        float _3188 = log2(_2892);
        _2985 = (exp2(_3188 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].x)) * _3162.x) / cbSceneParam._m0[78u].x)) + _2889;
        _2987 = (exp2(_3188 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].y)) * _3162.y) / cbSceneParam._m0[78u].y)) + _2890;
        _2989 = (exp2(_3188 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].z)) * _3162.z) / cbSceneParam._m0[78u].z)) + _2891;
        _2991 = _3171 * _2892;
    }
    else
    {
        _2985 = _2889;
        _2987 = _2890;
        _2989 = _2891;
        _2991 = _2892;
    }
    bool _3198;
    vec4 _3001;
    vec4 _3023;
    float _3025;
    float _3029;
    float _3030;
    float _3031;
    float _3032;
    bool _3042;
    for (;;)
    {
        _3001 = cbMatDynParam._m0[0u];
        float _3003 = roundEven(_3001.y);
        bool _3004 = _3003 == 3.0;
        float _3005 = log2(_2991);
        float _3012 = exp2(_3005 * cbSceneParam._m0[78u].x) * _2861;
        float _3013 = exp2(_3005 * cbSceneParam._m0[78u].y) * _2862;
        float _3014 = exp2(_3005 * cbSceneParam._m0[78u].z) * _2863;
        float _3021 = _955 + (-0.5);
        _3023 = cbMtdParam._m0[1u];
        _3025 = _3023.y * _3021;
        float _3028 = (_3003 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3029 = _3028 * (_3004 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2985)));
        _3030 = _3028 * (_3004 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2987)));
        _3031 = _3028 * (_3004 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2989)));
        _3032 = _3021 * 0.999000012874603271484375;
        _3042 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3042)
        {
            if ((cbInstanceData._m0[_1004 + 7u].x + _3032) < 0.5)
            {
                _3198 = true;
                break;
            }
        }
        uint _3139 = _1005 + uint(_3001.w);
        if ((cbInstanceData._m0[_3139].w < 1.0) && ((cbInstanceData._m0[_3139].w + _3032) < 0.5))
        {
            _3198 = true;
            break;
        }
        if ((_3025 + 1.0) < _3023.x)
        {
            _3198 = true;
            break;
        }
        _3198 = false;
        break;
    }
    float _3403;
    if (_3198)
    {
        discard_state = true;
        _3403 = 0.0;
    }
    else
    {
        _3403 = cbInstanceData._m0[_2864].w;
    }
    SV_Target.x = _3029;
    SV_Target.y = _3030;
    SV_Target.z = _3031;
    SV_Target.w = _3403;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2864].w;
    discard_exit();
}


