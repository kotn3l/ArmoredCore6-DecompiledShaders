#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1475;
float _4140;
float _4141;
float _4142;
float _4143;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _276 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _282 = _276.x * cbMtdParam._m0[10u].x;
    float _283 = _276.y * cbMtdParam._m0[10u].y;
    float _284 = _276.z * cbMtdParam._m0[10u].z;
    vec4 _302 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _352 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _362 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _352)) + 1.0;
    float _4152 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _370 = (_363 * ((_302.x * cbMtdParam._m0[11u].x) - _282)) + _282;
    float _371 = (_363 * ((_302.y * cbMtdParam._m0[11u].y) - _283)) + _283;
    float _372 = (_363 * ((_302.z * cbMtdParam._m0[11u].z) - _284)) + _284;
    vec4 _390 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _421 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _352)) + 1.0;
    float _4163 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _429 = (_422 * ((_390.x * cbMtdParam._m0[12u].x) - _370)) + _370;
    float _430 = (_422 * ((_390.y * cbMtdParam._m0[12u].y) - _371)) + _371;
    float _431 = (_422 * ((_390.z * cbMtdParam._m0[12u].z) - _372)) + _372;
    vec4 _449 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _474 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _352)) + 1.0;
    float _4174 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _482 = (_475 * ((_449.x * cbMtdParam._m0[13u].x) - _429)) + _429;
    float _483 = (_475 * ((_449.y * cbMtdParam._m0[13u].y) - _430)) + _430;
    float _484 = (_475 * ((_449.z * cbMtdParam._m0[13u].z) - _431)) + _431;
    vec4 _504 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _533 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _4185 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _541 = (_534 * ((_504.x * cbMtdParam._m0[14u].x) - _482)) + _482;
    float _542 = (_534 * ((_504.y * cbMtdParam._m0[14u].y) - _483)) + _483;
    float _543 = (_534 * ((_504.z * cbMtdParam._m0[14u].z) - _484)) + _484;
    vec4 _563 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _591 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _4196 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _599 = (_592 * ((_563.x * cbMtdParam._m0[15u].x) - _541)) + _541;
    float _600 = (_592 * ((_563.y * cbMtdParam._m0[15u].y) - _542)) + _542;
    float _601 = (_592 * ((_563.z * cbMtdParam._m0[15u].z) - _543)) + _543;
    vec4 _614 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _616 = _614.x;
    float _634 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _616) * _363) + _616;
    float _652 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _634) * _422) + _634;
    float _669 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _652) * _475) + _652;
    float _671 = _669 - (_669 * TEXCOORD_5.x);
    vec4 _687 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _709 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _711 = _709.x;
    float _712 = _709.y;
    float _715 = cbMtdParam._m0[18u].y * _709.z;
    vec4 _727 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _736 = (((cbMtdParam._m0[18u].x * _727.z) - _715) * _363) + _715;
    vec4 _749 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _760 = (((cbMtdParam._m0[17u].w * _749.z) - _736) * _422) + _736;
    vec4 _773 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _782 = (((cbMtdParam._m0[17u].z * _773.z) - _760) * _475) + _760;
    float _787 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_687.z * cbMtdParam._m0[18u].z) - _782)) + _782;
    vec4 _800 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _814 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_800.z * cbMtdParam._m0[19u].y) - _787)) + _787;
    vec4 _827 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _839 = ((_727.x - _711) * _363) + _711;
    float _840 = ((_727.y - _712) * _363) + _712;
    float _845 = ((_749.x - _839) * _422) + _839;
    float _846 = ((_749.y - _840) * _422) + _840;
    float _855 = ((((_773.x - _845) * _475) + _845) * 2.0) + (-1.0);
    float _856 = ((((_773.y - _846) * _475) + _846) * 2.0) + (-1.0);
    float _857 = dot(vec2(_855, _856), vec2(_855, _856));
    float _4207 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _862 = sqrt(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))));
    float _879 = (((((_827.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _855) + ((((_687.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y)) + ((((_800.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _880 = (((((_827.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _856) + ((((_687.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y)) + ((((_800.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _883 = fma(_862, _246 * NORMAL.x, fma(_880, _253 * TANGENT.x, (_239 * _231) * _879));
    float _886 = fma(_862, _246 * NORMAL.y, fma(_880, _253 * TANGENT.y, (_239 * _232) * _879));
    float _889 = fma(_862, _246 * NORMAL.z, fma(_880, _253 * TANGENT.z, (_239 * _233) * _879));
    float _893 = inversesqrt(dot(vec3(_883, _886, _889), vec3(_883, _886, _889)));
    float _894 = _893 * _883;
    float _895 = _893 * _886;
    float _896 = _893 * _889;
    float _4218 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _897 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4240 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4251 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4262 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _901 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _917 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _967 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _957);
    float _968 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _957);
    float _969 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _957);
    float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
    float _974 = _967 * _973;
    float _975 = _968 * _973;
    float _976 = _969 * _973;
    vec4 _981 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _983 = _981.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1155 = sqrt(((_967 * _967) + (_968 * _968)) + (_969 * _969));
        float _1161 = (cbMatDynParam._m0[5u].x * _1155) + cbMatDynParam._m0[5u].y;
        float _4273 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1166 = (cbMatDynParam._m0[5u].z * _1155) + cbMatDynParam._m0[5u].w;
        float _4284 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) - _1162)) + _1162) < ((_983 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _994 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _995 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1013 = fma(_896, cbSceneParam._m0[5u].z, fma(_895, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _894));
    float _1016 = fma(_896, cbSceneParam._m0[6u].z, fma(_895, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _894));
    float _1019 = fma(_896, cbSceneParam._m0[7u].z, fma(_895, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _894));
    uint _1032 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1033 = _1032 + 9u;
    uint _1034 = _1033 + uint(cbMatDynParam._m0[0u].w);
    float _1040 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * cbInstanceData._m0[_1034].x;
    float _1041 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * cbInstanceData._m0[_1034].y;
    float _1042 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * cbInstanceData._m0[_1034].z;
    float _4295 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _4306 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _4317 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _1046 = 1.0 - _901;
    float _1047 = _1043 * _1046;
    float _1048 = _1044 * _1046;
    float _1049 = _1045 * _1046;
    float _1054 = (_1043 + (-0.039999999105930328369140625)) * _901;
    float _1055 = (_1044 + (-0.039999999105930328369140625)) * _901;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _901;
    float _1057 = _1054 + 0.039999999105930328369140625;
    float _1059 = _1055 + 0.039999999105930328369140625;
    float _1060 = _1056 + 0.039999999105930328369140625;
    vec4 _1069 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _994, cbSceneParam._m0[86u].y * _995));
    float _1072 = _1069.x * TEXCOORD_5.w;
    float _1073 = dot(vec3(_894, _895, _896), vec3(_974, _975, _976));
    float _1076 = _1073 * 2.0;
    float _1080 = (_1076 * _894) - _974;
    float _1081 = (_1076 * _895) - _975;
    float _1082 = (_1076 * _896) - _976;
    float _1086 = abs(dot(vec3(_974, _975, _976), vec3(_894, _895, _896)));
    float _4328 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _1088 = sqrt(_897);
    float _1101 = exp2((_1088 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1088 * 3.0));
    float _1107 = (1.0 - _1101) * ((_1088 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1108 = _1101 * _1088;
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1474;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1199 = fma(_1144, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1136));
        float _1203 = fma(_1144, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1136));
        float _1207 = fma(_1144, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1136));
        float _1232 = _1136 + _894;
        float _1233 = _1140 + _895;
        float _1234 = _1144 + _896;
        float _1244 = fma(_1234, cbModelParam._m0[26u].z, fma(_1233, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1232)) - _1199;
        float _1245 = fma(_1234, cbModelParam._m0[27u].z, fma(_1233, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1232)) - _1203;
        float _1246 = fma(_1234, cbModelParam._m0[28u].z, fma(_1233, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1232)) - _1207;
        float _1250 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
        float _1263 = ((_1250 * _1244) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1199 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1250 * _1245) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1203 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1250 * _1246) / cbModelParam._m0[34u].z) + ((((((_1207 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        float _1302 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1268.x + (-0.5));
        float _1304 = _1302 * (_1268.y + (-0.5));
        float _1305 = _1302 * (_1268.z + (-0.5));
        float _1312 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1275.x + (-0.5));
        float _1314 = _1312 * (_1275.y + (-0.5));
        float _1315 = _1312 * (_1275.z + (-0.5));
        float _1322 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1282.x + (-0.5));
        float _1324 = _1322 * (_1282.y + (-0.5));
        float _1325 = _1322 * (_1282.z + (-0.5));
        float _1332 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1289.x + (-0.5));
        float _1334 = _1332 * (_1289.y + (-0.5));
        float _1335 = _1332 * (_1289.z + (-0.5));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = _1303 * 0.5;
        float _1340 = _1313 * 0.5;
        float _1341 = _1323 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1356 = (dot(vec3(_894, _895, _896), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4354 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1366 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4365 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4376 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_1368 + 1.0))) + _1373) * _1336;
        float _1383 = _1304 * 0.5;
        float _1384 = _1314 * 0.5;
        float _1385 = _1324 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_894, _895, _896), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4409 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1410 + 1.0))) + _1415) * _1337;
        float _1425 = _1305 * 0.5;
        float _1426 = _1315 * 0.5;
        float _1427 = _1325 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_894, _895, _896), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4442 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1452 + 1.0))) + _1457) * _1338;
        _1474 = _1305;
        _1476 = _1304;
        _1477 = _1303;
        _1478 = _1315;
        _1479 = _1314;
        _1480 = _1313;
        _1481 = _1325;
        _1482 = _1324;
        _1483 = _1323;
        _1484 = _1338;
        _1485 = _1337;
        _1486 = _1336;
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
    }
    else
    {
        _1474 = _1475;
        _1476 = _1475;
        _1477 = _1475;
        _1478 = _1475;
        _1479 = _1475;
        _1480 = _1475;
        _1481 = _1475;
        _1482 = _1475;
        _1483 = _1475;
        _1484 = _1475;
        _1485 = _1475;
        _1486 = _1475;
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
    }
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1518 = fma(_1144, cbModelParam._m0[30u].z, fma(_1140, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1136));
        float _1522 = fma(_1144, cbModelParam._m0[31u].z, fma(_1140, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1136));
        float _1526 = fma(_1144, cbModelParam._m0[32u].z, fma(_1140, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1136));
        float _1549 = _1136 + _894;
        float _1550 = _1140 + _895;
        float _1551 = _1144 + _896;
        float _1561 = fma(_1551, cbModelParam._m0[30u].z, fma(_1550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1549)) - _1518;
        float _1562 = fma(_1551, cbModelParam._m0[31u].z, fma(_1550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1549)) - _1522;
        float _1563 = fma(_1551, cbModelParam._m0[32u].z, fma(_1550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1549)) - _1526;
        float _1567 = inversesqrt(dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563)));
        float _1580 = ((_1567 * _1561) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1518 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1581 = ((_1567 * _1562) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1522 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1582 = ((_1567 * _1563) / cbModelParam._m0[35u].z) + ((((((_1526 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        float _1617 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1584.x + (-0.5));
        float _1619 = _1617 * (_1584.y + (-0.5));
        float _1620 = _1617 * (_1584.z + (-0.5));
        float _1627 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1591.x + (-0.5));
        float _1629 = _1627 * (_1591.y + (-0.5));
        float _1630 = _1627 * (_1591.z + (-0.5));
        float _1637 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1598.x + (-0.5));
        float _1639 = _1637 * (_1598.y + (-0.5));
        float _1640 = _1637 * (_1598.z + (-0.5));
        float _1647 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1605.x + (-0.5));
        float _1649 = _1647 * (_1605.y + (-0.5));
        float _1650 = _1647 * (_1605.z + (-0.5));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = _1618 * 0.5;
        float _1655 = _1628 * 0.5;
        float _1656 = _1638 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_894, _895, _896), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4483 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4494 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4505 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_1681 + 1.0))) + _1686) * _1651;
        float _1696 = _1619 * 0.5;
        float _1697 = _1629 * 0.5;
        float _1698 = _1639 * 0.5;
        float _1699 = dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698));
        float _1704 = (_1699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1699);
        float _1712 = (dot(vec3(_894, _895, _896), vec3(_1704 * _1696, _1704 * _1697, _1704 * _1698)) + 1.0) * 0.5;
        float _4516 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1721 = sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4527 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _1723 = _1722 * 2.0;
        float _1727 = (1.0 - _1722) / (_1722 + 1.0);
        float _4538 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1737 = ((((1.0 - _1728) * (_1723 + 2.0)) * exp2(log2(isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_1723 + 1.0))) + _1728) * _1652;
        float _1738 = _1620 * 0.5;
        float _1739 = _1630 * 0.5;
        float _1740 = _1640 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_894, _895, _896), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4549 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4560 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4571 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_1765 + 1.0))) + _1770) * _1653;
        _1787 = _1620;
        _1788 = _1619;
        _1789 = _1618;
        _1790 = _1630;
        _1791 = _1629;
        _1792 = _1628;
        _1793 = _1640;
        _1794 = _1639;
        _1795 = _1638;
        _1796 = _1653;
        _1797 = _1652;
        _1798 = _1651;
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)));
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
    }
    else
    {
        _1787 = _1475;
        _1788 = _1475;
        _1789 = _1475;
        _1790 = _1475;
        _1791 = _1475;
        _1792 = _1475;
        _1793 = _1475;
        _1794 = _1475;
        _1795 = _1475;
        _1796 = _1475;
        _1797 = _1475;
        _1798 = _1475;
        _1799 = 0.0;
        _1800 = 0.0;
        _1801 = 0.0;
    }
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1487)) + _1487;
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1488)) + _1488;
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1489)) + _1489;
    float _1834 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1811));
    float _1855 = _1080 * 0.5;
    float _1856 = _1081 * 0.5;
    float _1857 = _1082 * 0.5;
    float _1858 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1861 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1864 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1898;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1871 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1474, _1478, _1481, _1484));
        float _1875 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1476, _1479, _1482, _1485));
        float _1879 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1477, _1480, _1483, _1486));
        float _1886 = dot(vec4(cbModelParam._m0[39u]), vec4(_1855, _1856, _1857, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1886) ? 0.0 : (isnan(0.0) ? _1886 : max(0.0, _1886))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1909;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1900 = dot(vec4(cbModelParam._m0[40u]), vec4(_1855, _1856, _1857, 1.0));
        _1909 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1900) ? 0.0 : (isnan(0.0) ? _1900 : max(0.0, _1900))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1909 = 1.0;
    }
    float _1913 = (_1909 * cbModelParam._m0[1u].x) + (_1898 * (1.0 - cbModelParam._m0[1u].x));
    float _1923 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _897);
    float _1924 = isnan(_1923) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1923 : min(cbModelParam._m0[25u].z, _1923));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1971 = fma(_1144, cbModelParam._m0[13u].z, fma(_1140, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1136)) + cbModelParam._m0[13u].w;
        float _1975 = fma(_1144, cbModelParam._m0[14u].z, fma(_1140, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1136)) + cbModelParam._m0[14u].w;
        float _1979 = fma(_1144, cbModelParam._m0[15u].z, fma(_1140, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1136)) + cbModelParam._m0[15u].w;
        float _1982 = fma(_1082, cbModelParam._m0[13u].z, fma(_1081, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1080));
        float _1985 = fma(_1082, cbModelParam._m0[14u].z, fma(_1081, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1080));
        float _1988 = fma(_1082, cbModelParam._m0[15u].z, fma(_1081, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1080));
        float _2016;
        if (_1982 > 0.0)
        {
            _2016 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2016 = frontier_phi_17_15_ladder;
        }
        float _2187;
        if (_1985 > 0.0)
        {
            _2187 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2187 = frontier_phi_26_22_ladder;
        }
        float _2483;
        if (_1988 > 0.0)
        {
            _2483 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2483 = frontier_phi_38_33_ladder;
        }
        float _2485 = isnan(_2187) ? _2016 : (isnan(_2016) ? _2187 : min(_2016, _2187));
        float _2486 = isnan(_2483) ? _2485 : (isnan(_2485) ? _2483 : min(_2485, _2483));
        float _2490 = (_2486 * _1982) + _1971;
        float _2491 = (_2486 * _1985) + _1975;
        float _2492 = (_2486 * _1988) + _1979;
        float _2493 = _2486 * 9.9999997473787516355514526367188e-05;
        float _2495 = (-1.0) - _2493;
        float _2497 = _2493 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2492 > _2497) || ((_2492 < _2495) || ((_2491 > _2497) || ((_2491 < _2495) || ((_2490 < _2495) || (_2490 > _2497))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2637 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2492, cbModelParam._m0[9u].z, fma(_2491, cbModelParam._m0[9u].y, _2490 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2492, cbModelParam._m0[10u].z, fma(_2491, cbModelParam._m0[10u].y, _2490 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2492, cbModelParam._m0[11u].z, fma(_2491, cbModelParam._m0[11u].y, _2490 * cbModelParam._m0[11u].x))), _1924);
            frontier_phi_16_38_ladder = _2637.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2637.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2637.x * cbModelParam._m0[1u].y;
        }
        _2004 = frontier_phi_16_38_ladder_2;
        _2006 = frontier_phi_16_38_ladder_1;
        _2008 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1080, _1081, _1082), _1924);
        _2004 = _1992.x * cbModelParam._m0[1u].y;
        _2006 = _1992.y * cbModelParam._m0[1u].y;
        _2008 = _1992.z * cbModelParam._m0[1u].y;
    }
    float _2012 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _897);
    float _2013 = isnan(_2012) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2012 : min(cbModelParam._m0[25u].w, _2012));
    float _2102;
    float _2104;
    float _2106;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2066 = fma(_1144, cbModelParam._m0[21u].z, fma(_1140, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1136)) + cbModelParam._m0[21u].w;
        float _2070 = fma(_1144, cbModelParam._m0[22u].z, fma(_1140, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1136)) + cbModelParam._m0[22u].w;
        float _2074 = fma(_1144, cbModelParam._m0[23u].z, fma(_1140, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1136)) + cbModelParam._m0[23u].w;
        float _2077 = fma(_1082, cbModelParam._m0[21u].z, fma(_1081, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1080));
        float _2080 = fma(_1082, cbModelParam._m0[22u].z, fma(_1081, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1080));
        float _2083 = fma(_1082, cbModelParam._m0[23u].z, fma(_1081, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1080));
        float _2192;
        if (_2077 > 0.0)
        {
            _2192 = abs((1.0 - _2066) / _2077);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2066 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2192 = frontier_phi_28_24_ladder;
        }
        float _2510;
        if (_2080 > 0.0)
        {
            _2510 = abs((1.0 - _2070) / _2080);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2070 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2510 = frontier_phi_40_35_ladder;
        }
        float _2848;
        if (_2083 > 0.0)
        {
            _2848 = abs((1.0 - _2074) / _2083);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2074 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2848 = frontier_phi_50_47_ladder;
        }
        float _2850 = isnan(_2510) ? _2192 : (isnan(_2192) ? _2510 : min(_2192, _2510));
        float _2851 = isnan(_2848) ? _2850 : (isnan(_2850) ? _2848 : min(_2850, _2848));
        float _2855 = (_2851 * _2077) + _2066;
        float _2856 = (_2851 * _2080) + _2070;
        float _2857 = (_2851 * _2083) + _2074;
        float _2858 = _2851 * 9.9999997473787516355514526367188e-05;
        float _2859 = (-1.0) - _2858;
        float _2861 = _2858 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2857 > _2861) || ((_2857 < _2859) || ((_2856 > _2861) || ((_2856 < _2859) || ((_2855 < _2859) || (_2855 > _2861))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2857, cbModelParam._m0[17u].z, fma(_2856, cbModelParam._m0[17u].y, _2855 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2857, cbModelParam._m0[18u].z, fma(_2856, cbModelParam._m0[18u].y, _2855 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2857, cbModelParam._m0[19u].z, fma(_2856, cbModelParam._m0[19u].y, _2855 * cbModelParam._m0[19u].x))), _2013);
            frontier_phi_25_50_ladder = _2979.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2979.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2979.x * cbModelParam._m0[1u].z;
        }
        _2102 = frontier_phi_25_50_ladder_2;
        _2104 = frontier_phi_25_50_ladder_1;
        _2106 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2086 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1080, _1081, _1082), _2013);
        _2102 = _2086.x * cbModelParam._m0[1u].z;
        _2104 = _2086.y * cbModelParam._m0[1u].z;
        _2106 = _2086.z * cbModelParam._m0[1u].z;
    }
    float _2119 = (((_1107 * _1057) + _1108) * _1072) * ((cbModelParam._m0[1u].w * (_2102 - _2004)) + _2004);
    float _2121 = (((_1107 * _1059) + _1108) * _1072) * ((cbModelParam._m0[1u].w * (_2104 - _2006)) + _2006);
    float _2123 = (((_1107 * _1060) + _1108) * _1072) * ((cbModelParam._m0[1u].w * (_2106 - _2008)) + _2008);
    float _2126 = fma(_2123, cbSceneParam._m0[89u].z, fma(_2121, cbSceneParam._m0[89u].y, _2119 * cbSceneParam._m0[89u].x));
    float _2129 = fma(_2123, cbSceneParam._m0[90u].z, fma(_2121, cbSceneParam._m0[90u].y, _2119 * cbSceneParam._m0[90u].x));
    float _2132 = fma(_2123, cbSceneParam._m0[91u].z, fma(_2121, cbSceneParam._m0[91u].y, _2119 * cbSceneParam._m0[91u].x));
    float _2166 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2170 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2174 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2178 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2179 = _2166 / _2178;
    float _2180 = _2170 / _2178;
    float _2181 = _2174 / _2178;
    float _2328;
    float _2329;
    float _2330;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2208 = ((uint(_2181 > cbSceneParam._m0[59u].y) + uint(_2181 > cbSceneParam._m0[59u].x)) + uint(_2181 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2209 = _2208 + 43u;
        uint _2217 = _2208 + 44u;
        uint _2225 = _2208 + 45u;
        uint _2233 = _2208 + 46u;
        float _2244 = fma(_2178, cbSceneParam._m0[_2209].w, fma(_2174, cbSceneParam._m0[_2209].z, fma(_2170, cbSceneParam._m0[_2209].y, _2166 * cbSceneParam._m0[_2209].x)));
        float _2248 = fma(_2178, cbSceneParam._m0[_2217].w, fma(_2174, cbSceneParam._m0[_2217].z, fma(_2170, cbSceneParam._m0[_2217].y, _2166 * cbSceneParam._m0[_2217].x)));
        float _2256 = fma(_2178, cbSceneParam._m0[_2233].w, fma(_2174, cbSceneParam._m0[_2233].z, fma(_2170, cbSceneParam._m0[_2233].y, _2166 * cbSceneParam._m0[_2233].x)));
        float _2261 = cbSceneParam._m0[33u].z * _2256;
        float _2263 = cbSceneParam._m0[33u].w * _2256;
        float _2266 = fma(_2178, cbSceneParam._m0[_2225].w, fma(_2174, cbSceneParam._m0[_2225].z, fma(_2170, cbSceneParam._m0[_2225].y, _2166 * cbSceneParam._m0[_2225].x))) / _2256;
        float _2314 = (cbSceneParam._m0[33u].x - sqrt(((_2180 * _2180) + (_2179 * _2179)) + (_2181 * _2181))) * cbSceneParam._m0[33u].y;
        float _4697 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2321 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2261 + _2244) / _2256, (_2263 + _2248) / _2256), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2263 + _2244) / _2256, (_2248 - _2261) / _2256), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2244 - _2261) / _2256, (_2248 - _2263) / _2256), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2244 - _2263) / _2256, (_2261 + _2248) / _2256), _2266), 0.0)).x), vec4(0.25)));
        _2328 = 1.0 - (_2321 * cbSceneParam._m0[34u].x);
        _2329 = 1.0 - (_2321 * cbSceneParam._m0[34u].y);
        _2330 = 1.0 - (_2321 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2328 = 1.0;
        _2329 = 1.0;
        _2330 = 1.0;
    }
    float _2394;
    float _2396;
    float _2398;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2382 = fma(_2178, cbSceneParam._m0[63u].w, fma(_2174, cbSceneParam._m0[63u].z, fma(_2170, cbSceneParam._m0[63u].y, _2166 * cbSceneParam._m0[63u].x)));
        float _2383 = fma(_2178, cbSceneParam._m0[60u].w, fma(_2174, cbSceneParam._m0[60u].z, fma(_2170, cbSceneParam._m0[60u].y, _2166 * cbSceneParam._m0[60u].x))) / _2382;
        float _2384 = fma(_2178, cbSceneParam._m0[61u].w, fma(_2174, cbSceneParam._m0[61u].z, fma(_2170, cbSceneParam._m0[61u].y, _2166 * cbSceneParam._m0[61u].x))) / _2382;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2383 >= cbSceneParam._m0[64u].x) && (_2384 >= cbSceneParam._m0[64u].y)) && (_2383 <= cbSceneParam._m0[64u].z)) && (_2384 <= cbSceneParam._m0[64u].w))
        {
            float _2523 = fma(_2178, cbSceneParam._m0[62u].w, fma(_2174, cbSceneParam._m0[62u].z, fma(_2170, cbSceneParam._m0[62u].y, _2166 * cbSceneParam._m0[62u].x))) / _2382;
            float _2527 = isnan(cbSceneParam._m0[41u].w) ? _2523 : (isnan(_2523) ? cbSceneParam._m0[41u].w : max(_2523, cbSceneParam._m0[41u].w));
            float _2570 = (cbSceneParam._m0[33u].x - sqrt(((_2180 * _2180) + (_2179 * _2179)) + (_2181 * _2181))) * cbSceneParam._m0[33u].y;
            float _4713 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
            float _2577 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2383, cbSceneParam._m0[33u].w + _2384), _2527), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2383, _2384 - cbSceneParam._m0[33u].z), _2527), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2383 - cbSceneParam._m0[33u].z, _2384 - cbSceneParam._m0[33u].w), _2527), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2383 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2384), _2527), 0.0)).x), vec4(0.25)));
            float _2581 = 1.0 - (_2577 * cbSceneParam._m0[34u].x);
            float _2582 = 1.0 - (_2577 * cbSceneParam._m0[34u].y);
            float _2583 = 1.0 - (_2577 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2583) ? _2330 : (isnan(_2330) ? _2583 : min(_2330, _2583));
            frontier_phi_37_36_ladder_1 = isnan(_2582) ? _2329 : (isnan(_2329) ? _2582 : min(_2329, _2582));
            frontier_phi_37_36_ladder_2 = isnan(_2581) ? _2328 : (isnan(_2328) ? _2581 : min(_2328, _2581));
        }
        else
        {
            frontier_phi_37_36_ladder = _2330;
            frontier_phi_37_36_ladder_1 = _2329;
            frontier_phi_37_36_ladder_2 = _2328;
        }
        _2394 = frontier_phi_37_36_ladder_2;
        _2396 = frontier_phi_37_36_ladder_1;
        _2398 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2394 = _2328;
        _2396 = _2329;
        _2398 = _2330;
    }
    uvec4 _2403 = floatBitsToUint(cbInstanceData._m0[_1032 + 5u]);
    uint _2405 = _2403.x * 14u;
    uint _2406 = _2405 + 13u;
    float _2413 = _1072 + (-1.0);
    float _2418 = (cbLight._m0[_2406].x * _2413) + 1.0;
    float _2419 = (cbLight._m0[_2406].y * _2413) + 1.0;
    float _2420 = (cbLight._m0[_2406].z * _2413) + 1.0;
    float _2421 = (cbLight._m0[_2406].w * _2413) + 1.0;
    uint _2422 = _2405 + 5u;
    float _2428 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
    uint _2432 = _2405 + 4u;
    float _2442 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
    uint _2446 = _2405 | 1u;
    float _2457 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_894, _895, _896));
    float _2460 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_894, _895, _896));
    float _4749 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _4760 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2465 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * 0.3183098733425140380859375;
    float _2467 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * 0.3183098733425140380859375;
    float _2474 = ((cbLight._m0[_2422].x * _2428) * _2467) + (((cbLight._m0[_2432].x * _2394) * _2442) * _2465);
    float _2475 = ((_2428 * cbLight._m0[_2422].y) * _2467) + (((cbLight._m0[_2432].y * _2396) * _2442) * _2465);
    float _2476 = ((_2428 * cbLight._m0[_2422].z) * _2467) + (((cbLight._m0[_2432].z * _2398) * _2442) * _2465);
    uvec4 _2480 = floatBitsToUint(cbLight._m0[_2405 + 12u]);
    bool _2482 = _2480.x == 0u;
    float _2584;
    float _2586;
    float _2588;
    if (_2482)
    {
        _2584 = _2474;
        _2586 = _2475;
        _2588 = _2476;
    }
    else
    {
        uint _2592 = _2405 + 6u;
        float _2608 = (dot(vec3(cbLight._m0[_2405 + 2u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2609 = _2608 * _2608;
        float _4771 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2610 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _2611 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
        _2584 = (((cbLight._m0[_2592].x * 0.3183098733425140380859375) * _2610) * _2611) + _2474;
        _2586 = (((cbLight._m0[_2592].y * 0.3183098733425140380859375) * _2610) * _2611) + _2475;
        _2588 = (((cbLight._m0[_2592].z * 0.3183098733425140380859375) * _2610) * _2611) + _2476;
    }
    bool _2591 = _2480.y == 0u;
    float _2646;
    float _2648;
    float _2650;
    if (_2591)
    {
        _2646 = _2584;
        _2648 = _2586;
        _2650 = _2588;
    }
    else
    {
        uint _2819 = _2405 + 7u;
        float _2835 = (dot(vec3(cbLight._m0[_2405 + 3u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2836 = _2835 * _2835;
        float _4787 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2837 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2838 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
        _2646 = (((cbLight._m0[_2819].x * 0.3183098733425140380859375) * _2837) * _2838) + _2584;
        _2648 = (((cbLight._m0[_2819].y * 0.3183098733425140380859375) * _2837) * _2838) + _2586;
        _2650 = (((cbLight._m0[_2819].z * 0.3183098733425140380859375) * _2837) * _2838) + _2588;
    }
    uint _2653 = _2405 + 8u;
    float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _897) * 0.949999988079071044921875);
    float _2667 = _2666 * _2666;
    float _2668 = cbLight._m0[_2405].x + _974;
    float _2669 = cbLight._m0[_2405].y + _975;
    float _2670 = cbLight._m0[_2405].z + _976;
    float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
    float _2675 = _2674 * _2668;
    float _2676 = _2674 * _2669;
    float _2677 = _2674 * _2670;
    float _2678 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2405].xyz));
    float _4803 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2681 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
    float _4814 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _2682 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
    float _2683 = dot(vec3(_894, _895, _896), vec3(_2675, _2676, _2677));
    float _4825 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2686 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
    float _2687 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2675, _2676, _2677));
    float _4836 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2691 = _2667 * _2667;
    float _2695 = ((_2686 * _2686) * (_2691 + (-1.0))) + 1.0;
    float _2703 = exp2(log2(1.0 - (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) * 5.0);
    float _2704 = 0.959999978542327880859375 - _1054;
    float _2706 = 0.959999978542327880859375 - _1055;
    float _2707 = 0.959999978542327880859375 - _1056;
    float _2714 = 1.0 - _2667;
    float _2725 = (0.5 / (((_2682 * ((_2681 * _2714) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _2714) + _2667) * _2681))) * _2681;
    float _4847 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2727 = (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2691 / ((_2695 * _2695) * 3.141590118408203125));
    uint _2741 = _2405 + 9u;
    float _2752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2446].w)) * _897) * 0.949999988079071044921875);
    float _2753 = _2752 * _2752;
    float _2754 = cbLight._m0[_2446].x + _974;
    float _2755 = cbLight._m0[_2446].y + _975;
    float _2756 = cbLight._m0[_2446].z + _976;
    float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
    float _2761 = _2760 * _2754;
    float _2762 = _2760 * _2755;
    float _2763 = _2760 * _2756;
    float _2764 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2446].xyz));
    float _4858 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2767 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
    float _2768 = dot(vec3(_894, _895, _896), vec3(_2761, _2762, _2763));
    float _4869 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2771 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
    float _2772 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_2761, _2762, _2763));
    float _4880 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
    float _2776 = _2753 * _2753;
    float _2780 = ((_2771 * _2771) * (_2776 + (-1.0))) + 1.0;
    float _2787 = exp2(log2(1.0 - (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) * 5.0);
    float _2794 = 1.0 - _2753;
    float _2804 = (0.5 / (((_2682 * ((_2767 * _2794) + _2753)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _2794) + _2753) * _2767))) * _2767;
    float _4891 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
    float _2806 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2776 / ((_2780 * _2780) * 3.141590118408203125));
    float _2816 = (((((_2787 * _2704) + _1057) * cbLight._m0[_2741].x) * _2806) * _2428) + ((((cbLight._m0[_2653].x * _2394) * ((_2703 * _2704) + _1057)) * _2727) * _2442);
    float _2817 = (((((_2787 * _2706) + _1059) * cbLight._m0[_2741].y) * _2806) * _2428) + ((((cbLight._m0[_2653].y * _2396) * ((_2703 * _2706) + _1059)) * _2727) * _2442);
    float _2818 = (((((_2787 * _2707) + _1060) * cbLight._m0[_2741].z) * _2806) * _2428) + ((((cbLight._m0[_2653].z * _2398) * ((_2703 * _2707) + _1060)) * _2727) * _2442);
    float _2874;
    float _2876;
    float _2878;
    if (_2482)
    {
        _2874 = _2816;
        _2876 = _2817;
        _2878 = _2818;
    }
    else
    {
        uint _2880 = _2405 + 2u;
        uint _2884 = _2405 + 10u;
        float _2898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2880].w)) * _897) * 0.949999988079071044921875);
        float _2899 = _2898 * _2898;
        float _2900 = cbLight._m0[_2880].x + _974;
        float _2901 = cbLight._m0[_2880].y + _975;
        float _2902 = cbLight._m0[_2880].z + _976;
        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
        float _2907 = _2906 * _2900;
        float _2908 = _2906 * _2901;
        float _2909 = _2906 * _2902;
        float _2910 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2880].xyz));
        float _4902 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
        float _2914 = dot(vec3(_894, _895, _896), vec3(_2907, _2908, _2909));
        float _4913 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2917 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
        float _2918 = dot(vec3(cbLight._m0[_2880].xyz), vec3(_2907, _2908, _2909));
        float _4924 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2922 = _2899 * _2899;
        float _2926 = ((_2917 * _2917) * (_2922 + (-1.0))) + 1.0;
        float _2933 = exp2(log2(1.0 - (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) * 5.0);
        float _2940 = 1.0 - _2899;
        float _2950 = (0.5 / (((_2682 * ((_2913 * _2940) + _2899)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _2940) + _2899) * _2913))) * _2913;
        float _4935 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2952 = (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2922 / ((_2926 * _2926) * 3.141590118408203125));
        float _2953 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
        _2874 = (((((_2933 * _2704) + _1057) * cbLight._m0[_2884].x) * _2952) * _2953) + _2816;
        _2876 = (((((_2933 * _2706) + _1059) * cbLight._m0[_2884].y) * _2952) * _2953) + _2817;
        _2878 = (((((_2933 * _2707) + _1060) * cbLight._m0[_2884].z) * _2952) * _2953) + _2818;
    }
    float _2984;
    float _2986;
    float _2988;
    if (_2591)
    {
        _2984 = _2874;
        _2986 = _2876;
        _2988 = _2878;
    }
    else
    {
        uint _2995 = _2405 + 3u;
        uint _2999 = _2405 + 11u;
        float _3013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2995].w)) * _897) * 0.949999988079071044921875);
        float _3014 = _3013 * _3013;
        float _3015 = cbLight._m0[_2995].x + _974;
        float _3016 = cbLight._m0[_2995].y + _975;
        float _3017 = cbLight._m0[_2995].z + _976;
        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
        float _3022 = _3021 * _3015;
        float _3023 = _3021 * _3016;
        float _3024 = _3021 * _3017;
        float _3025 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2995].xyz));
        float _4951 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
        float _3028 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
        float _3029 = dot(vec3(_894, _895, _896), vec3(_3022, _3023, _3024));
        float _4962 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3032 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
        float _3033 = dot(vec3(cbLight._m0[_2995].xyz), vec3(_3022, _3023, _3024));
        float _4973 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3037 = _3014 * _3014;
        float _3041 = ((_3032 * _3032) * (_3037 + (-1.0))) + 1.0;
        float _3048 = exp2(log2(1.0 - (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0)))) * 5.0);
        float _3055 = 1.0 - _3014;
        float _3065 = (0.5 / (((_2682 * ((_3028 * _3055) + _3014)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _3055) + _3014) * _3028))) * _3028;
        float _4984 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        float _3067 = (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_3037 / ((_3041 * _3041) * 3.141590118408203125));
        float _3068 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
        _2984 = (((((_3048 * _2704) + _1057) * cbLight._m0[_2999].x) * _3067) * _3068) + _2874;
        _2986 = (((((_3048 * _2706) + _1059) * cbLight._m0[_2999].y) * _3067) * _3068) + _2876;
        _2988 = (((((_3048 * _2707) + _1060) * cbLight._m0[_2999].z) * _3067) * _3068) + _2878;
    }
    float _3134;
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    float _3144;
    if (_2403.y == 0u)
    {
        uvec4 _3089 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3090 = _3089.x;
        uint _3101 = uint((float(_3089.y) * floor(float(uint(cbSceneParam._m0[85u].y * _995) / _3090))) + floor(float(uint(cbSceneParam._m0[85u].x * _994) / _3090)));
        float _3111 = (log2(_2181 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3112 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
        uint _3115 = uint(isnan(14.0) ? _3112 : (isnan(_3112) ? 14.0 : min(_3112, 14.0)));
        uvec4 _3120 = texelFetch(g_lightClusterGridBuffer, int(((_3115 << 2u) + (_3101 << 6u)) >> 2u));
        uint _3121 = _3120.x;
        uint _3122 = _3089.z;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        if (((((1u << ((_3122 >> 4u) & 15u)) + 4294967295u) & _3121) == 0u) || ((_3122 & 240u) == 0u))
        {
            _3201 = 0.0;
            _3203 = 0.0;
            _3205 = 0.0;
            _3207 = 0.0;
            _3209 = 0.0;
            _3211 = 0.0;
        }
        else
        {
            float _3202;
            float _3204;
            float _3206;
            float _3208;
            float _3210;
            float _3212;
            float _3354 = 0.0;
            float _3355 = 0.0;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            float _3359 = 0.0;
            uint _3360 = 0u;
            uint _3369;
            bool _3370;
            for (;;)
            {
                _3369 = texelFetch(g_lightClassification, int((((_3115 << 5u) + (_3101 << 9u)) + (_3360 << 2u)) >> 2u)).x;
                _3370 = _3369 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3370)
                {
                    frontier_phi_71_pred = _3359;
                    frontier_phi_71_pred_1 = _3358;
                    frontier_phi_71_pred_2 = _3357;
                    frontier_phi_71_pred_3 = _3356;
                    frontier_phi_71_pred_4 = _3355;
                    frontier_phi_71_pred_5 = _3354;
                }
                else
                {
                    float _3499;
                    float _3500;
                    float _3501;
                    float _3502;
                    float _3503;
                    float _3504;
                    uint _3505;
                    _3499 = _3354;
                    _3500 = _3355;
                    _3501 = _3356;
                    _3502 = _3357;
                    _3503 = _3358;
                    _3504 = _3359;
                    _3505 = _3369;
                    float _3426;
                    float _3427;
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    for (;;)
                    {
                        uint _3509 = uint(findLSB(_3505)) + (_3360 << 5u);
                        uint _3506 = (_3505 + 4294967295u) & _3505;
                        uint _3511 = _3509 * 48u;
                        vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3511)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 3u)).x));
                        uint _3531 = (_3509 * 48u) + 4u;
                        vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3531)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 3u)).x));
                        uint _3550 = (_3509 * 48u) + 8u;
                        vec3 _3561 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3550)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 2u)).x));
                        float _3565 = _3525.x - _2179;
                        float _3566 = _3525.y - _2180;
                        float _3567 = _3525.z - _2181;
                        float _3568 = dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567));
                        float _3571 = inversesqrt(_3568);
                        float _3572 = _3571 * _3565;
                        float _3573 = _3571 * _3566;
                        float _3574 = _3571 * _3567;
                        float _3575 = dot(vec3(_1013, _1016, _1019), vec3(_3572, _3573, _3574));
                        float _3580 = 1.0 - (_3568 * _3525.w);
                        float _5010 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3581 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                        float _3582 = sqrt(_3568) * _3544.w;
                        float _3585 = 1.39999997615814208984375 / (_3582 + 1.39999997615814208984375);
                        float _3586 = _3585 * _3585;
                        float _3589 = ((1.0 - _3586) * _3575) + _3586;
                        float _3592 = _3582 * _3582;
                        float _3596 = ((isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0))) * _3581) / ((_3592 * 0.699999988079071044921875) + 1.0);
                        float _3600 = (-0.0) - _2179;
                        float _3601 = (-0.0) - _2180;
                        float _3602 = (-0.0) - _2181;
                        float _3606 = inversesqrt(dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602)));
                        float _3607 = _3606 * _3600;
                        float _3608 = _3606 * _3601;
                        float _3609 = _3606 * _3602;
                        float _3616 = exp2(log2(1.0 / ((_3592 * 3.5) + 5.0)) * 0.25);
                        float _3617 = 1.0 - _1088;
                        float _3624 = sqrt(1.0 - ((1.0 - (_3617 * _3617)) * (1.0 - (_3616 * _3616))));
                        float _3625 = _3624 * _3624;
                        float _3626 = _3625 * _3625;
                        float _3627 = _3607 + _3572;
                        float _3628 = _3608 + _3573;
                        float _3629 = _3609 + _3574;
                        float _3633 = inversesqrt(dot(vec3(_3627, _3628, _3629), vec3(_3627, _3628, _3629)));
                        float _3637 = dot(vec3(_1013, _1016, _1019), vec3(_3607, _3608, _3609));
                        float _5026 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                        float _3640 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                        float _3641 = dot(vec3(_1013, _1016, _1019), vec3(_3633 * _3627, _3633 * _3628, _3633 * _3629));
                        float _5037 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                        float _3644 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                        float _3648 = ((_3644 * _3644) * (_3626 + (-1.0))) + 1.0;
                        float _3649 = _3585 * _3625;
                        float _3650 = _3649 * _3649;
                        float _3653 = ((1.0 - _3650) * _3575) + _3650;
                        float _5048 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                        float _3654 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                        float _3655 = 1.0 - _3625;
                        float _3665 = (0.5 / (((_3654 * ((_3640 * _3655) + _3625)) + 9.9999999392252902907785028219223e-09) + (((_3654 * _3655) + _3625) * _3640))) * _3654;
                        float _5059 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                        float _3676 = (((_3626 * 3.1415927410125732421875) * (isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0)))) / ((_3648 * _3648) * ((_3592 * 2.1991131305694580078125) + 3.141590118408203125))) * _3581;
                        _3429 = (_3596 * _3544.x) + _3502;
                        _3430 = (_3596 * _3544.y) + _3503;
                        _3431 = (_3596 * _3544.z) + _3504;
                        _3426 = (_3676 * _3561.x) + _3499;
                        _3427 = (_3676 * _3561.y) + _3500;
                        _3428 = (_3676 * _3561.z) + _3501;
                        if (_3506 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3499 = _3426;
                            _3500 = _3427;
                            _3501 = _3428;
                            _3502 = _3429;
                            _3503 = _3430;
                            _3504 = _3431;
                            _3505 = _3506;
                        }
                    }
                    frontier_phi_71_pred = _3431;
                    frontier_phi_71_pred_1 = _3430;
                    frontier_phi_71_pred_2 = _3429;
                    frontier_phi_71_pred_3 = _3428;
                    frontier_phi_71_pred_4 = _3427;
                    frontier_phi_71_pred_5 = _3426;
                }
                _3212 = frontier_phi_71_pred;
                _3210 = frontier_phi_71_pred_1;
                _3208 = frontier_phi_71_pred_2;
                _3206 = frontier_phi_71_pred_3;
                _3204 = frontier_phi_71_pred_4;
                _3202 = frontier_phi_71_pred_5;
                uint _3361 = _3360 + 1u;
                if (_3361 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3354 = _3202;
                    _3355 = _3204;
                    _3356 = _3206;
                    _3357 = _3208;
                    _3358 = _3210;
                    _3359 = _3212;
                    _3360 = _3361;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3201 = _3202;
            _3203 = _3204;
            _3205 = _3206;
            _3207 = _3208;
            _3209 = _3210;
            _3211 = _3212;
        }
        uvec4 _3215 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3216 = _3215.z;
        uint _3218 = (_3216 >> 8u) & 15u;
        float _3322;
        float _3324;
        float _3326;
        float _3328;
        float _3330;
        float _3332;
        if (((4294967295u << _3218) & _3121) == 0u)
        {
            _3322 = _3201;
            _3324 = _3203;
            _3326 = _3205;
            _3328 = _3207;
            _3330 = _3209;
            _3332 = _3211;
        }
        else
        {
            float _3347 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
            float _3348 = _3347 * _2179;
            float _3349 = _3347 * _2180;
            float _3350 = _3347 * _2181;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3218 < ((_3216 >> 12u) & 15u))
            {
                float _3323;
                float _3325;
                float _3327;
                float _3329;
                float _3331;
                float _3333;
                float _3482 = _3201;
                float _3483 = _3203;
                float _3484 = _3205;
                float _3485 = _3207;
                float _3486 = _3209;
                float _3487 = _3211;
                uint _3488 = _3218;
                uint _3497;
                bool _3498;
                for (;;)
                {
                    _3497 = texelFetch(g_lightClassification, int((((_3115 << 5u) + (_3101 << 9u)) + (_3488 << 2u)) >> 2u)).x;
                    _3498 = _3497 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3498)
                    {
                        frontier_phi_82_pred = _3487;
                        frontier_phi_82_pred_1 = _3486;
                        frontier_phi_82_pred_2 = _3485;
                        frontier_phi_82_pred_3 = _3484;
                        frontier_phi_82_pred_4 = _3483;
                        frontier_phi_82_pred_5 = _3482;
                    }
                    else
                    {
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3984;
                        float _3985;
                        float _3986;
                        float _3987;
                        float _3988;
                        float _3989;
                        float _3703 = _3482;
                        float _3704 = _3483;
                        float _3705 = _3484;
                        float _3706 = _3485;
                        float _3707 = _3486;
                        float _3708 = _3487;
                        uint _3709 = _3497;
                        uint _3710;
                        vec4 _3735;
                        float _3736;
                        vec4 _3751;
                        vec3 _3763;
                        vec4 _3778;
                        vec4 _3793;
                        float _3840;
                        bool _3841;
                        for (;;)
                        {
                            uint _3720 = ((_3488 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3709));
                            _3710 = (_3709 + 4294967295u) & _3709;
                            uint _3722 = _3720 * 40u;
                            _3735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 3u)).x));
                            _3736 = _3735.w;
                            uint _3738 = (_3720 * 40u) + 4u;
                            _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            uint _3753 = (_3720 * 40u) + 8u;
                            _3763 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x));
                            uint _3765 = (_3720 * 40u) + 16u;
                            _3778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 3u)).x));
                            uint _3780 = (_3720 * 40u) + 20u;
                            _3793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 3u)).x));
                            uint _3796 = (_3720 * 40u) + 24u;
                            vec4 _3809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 3u)).x));
                            uint _3815 = (_3720 * 40u) + 28u;
                            vec4 _3828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 3u)).x));
                            _3840 = fma(_2181, _3828.z, fma(_2180, _3828.y, _3828.x * _2179)) + _3828.w;
                            _3841 = !((fma(_2181, _3809.z, fma(_2180, _3809.y, _3809.x * _2179)) + _3809.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3841)
                            {
                                float _3868 = _3735.x - _2179;
                                float _3869 = _3735.y - _2180;
                                float _3870 = _3735.z - _2181;
                                float _3871 = dot(vec3(_3868, _3869, _3870), vec3(_3868, _3869, _3870));
                                float _3874 = inversesqrt(_3871);
                                float _3875 = _3874 * _3868;
                                float _3876 = _3874 * _3869;
                                float _3877 = _3874 * _3870;
                                float _3881 = 1.0 - (_3871 / (_3736 * _3736));
                                float _5070 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3882 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                                float _3886 = sqrt(_3871) * _3751.w;
                                float _3888 = 1.39999997615814208984375 / (_3886 + 1.39999997615814208984375);
                                float _3889 = _3888 * _3888;
                                float _3892 = ((1.0 - _3889) * dot(vec3(_3875, _3876, _3877), vec3(_1013, _1016, _1019))) + _3889;
                                float _3895 = _3886 * _3886;
                                float _3899 = (fma(_2181, _3778.z, fma(_2180, _3778.y, _3778.x * _2179)) + _3778.w) / _3840;
                                float _3900 = (fma(_2181, _3793.z, fma(_2180, _3793.y, _3793.x * _2179)) + _3793.w) / _3840;
                                float _3904 = 1.0 - dot(vec2(_3899, _3900), vec2(_3899, _3900));
                                float _5086 = isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0));
                                float _3905 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
                                float _3906 = _3905 * (((isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0))) * _3882) / ((_3895 * 0.699999988079071044921875) + 1.0));
                                float _3918 = exp2(log2(1.0 / ((_3895 * 3.5) + 5.0)) * 0.25);
                                float _3919 = 1.0 - _1088;
                                float _3926 = sqrt(1.0 - ((1.0 - (_3919 * _3919)) * (1.0 - (_3918 * _3918))));
                                float _3927 = _3926 * _3926;
                                float _3928 = _3927 * _3927;
                                float _3929 = _3875 - _3348;
                                float _3930 = _3876 - _3349;
                                float _3931 = _3877 - _3350;
                                float _3935 = inversesqrt(dot(vec3(_3929, _3930, _3931), vec3(_3929, _3930, _3931)));
                                float _3939 = dot(vec3(_1013, _1016, _1019), vec3((-0.0) - _3348, (-0.0) - _3349, (-0.0) - _3350));
                                float _5097 = isnan(0.0) ? _3939 : (isnan(_3939) ? 0.0 : max(_3939, 0.0));
                                float _3942 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
                                float _3943 = dot(vec3(_1013, _1016, _1019), vec3(_3935 * _3929, _3935 * _3930, _3935 * _3931));
                                float _5108 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                                float _3946 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
                                float _3950 = ((_3946 * _3946) * (_3928 + (-1.0))) + 1.0;
                                float _3951 = _3888 * _3927;
                                float _3952 = _3951 * _3951;
                                float _3958 = ((1.0 - _3952) * dot(vec3(_1013, _1016, _1019), vec3(_3875, _3876, _3877))) + _3952;
                                float _5119 = isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0));
                                float _3959 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                                float _3960 = 1.0 - _3927;
                                float _3970 = (0.5 / (((_3959 * ((_3942 * _3960) + _3927)) + 9.9999999392252902907785028219223e-09) + (((_3959 * _3960) + _3927) * _3942))) * _3959;
                                float _5130 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3980 = (_3905 * _3882) * (((_3928 * 3.1415927410125732421875) * (isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0)))) / ((_3950 * _3950) * ((_3895 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3906 * _3751.z;
                                frontier_phi_88_pred_1 = _3906 * _3751.y;
                                frontier_phi_88_pred_2 = _3906 * _3751.x;
                                frontier_phi_88_pred_3 = _3980 * _3763.z;
                                frontier_phi_88_pred_4 = _3980 * _3763.y;
                                frontier_phi_88_pred_5 = _3980 * _3763.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3989 = frontier_phi_88_pred;
                            _3988 = frontier_phi_88_pred_1;
                            _3987 = frontier_phi_88_pred_2;
                            _3986 = frontier_phi_88_pred_3;
                            _3985 = frontier_phi_88_pred_4;
                            _3984 = frontier_phi_88_pred_5;
                            _3693 = _3987 + _3706;
                            _3694 = _3988 + _3707;
                            _3695 = _3989 + _3708;
                            _3690 = _3984 + _3703;
                            _3691 = _3985 + _3704;
                            _3692 = _3986 + _3705;
                            if (_3710 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3703 = _3690;
                                _3704 = _3691;
                                _3705 = _3692;
                                _3706 = _3693;
                                _3707 = _3694;
                                _3708 = _3695;
                                _3709 = _3710;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3695;
                        frontier_phi_82_pred_1 = _3694;
                        frontier_phi_82_pred_2 = _3693;
                        frontier_phi_82_pred_3 = _3692;
                        frontier_phi_82_pred_4 = _3691;
                        frontier_phi_82_pred_5 = _3690;
                    }
                    _3333 = frontier_phi_82_pred;
                    _3331 = frontier_phi_82_pred_1;
                    _3329 = frontier_phi_82_pred_2;
                    _3327 = frontier_phi_82_pred_3;
                    _3325 = frontier_phi_82_pred_4;
                    _3323 = frontier_phi_82_pred_5;
                    uint _3489 = _3488 + 1u;
                    if (_3489 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3482 = _3323;
                        _3483 = _3325;
                        _3484 = _3327;
                        _3485 = _3329;
                        _3486 = _3331;
                        _3487 = _3333;
                        _3488 = _3489;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3329;
                frontier_phi_63_64_ladder_1 = _3333;
                frontier_phi_63_64_ladder_2 = _3331;
                frontier_phi_63_64_ladder_3 = _3327;
                frontier_phi_63_64_ladder_4 = _3325;
                frontier_phi_63_64_ladder_5 = _3323;
            }
            else
            {
                frontier_phi_63_64_ladder = _3207;
                frontier_phi_63_64_ladder_1 = _3211;
                frontier_phi_63_64_ladder_2 = _3209;
                frontier_phi_63_64_ladder_3 = _3205;
                frontier_phi_63_64_ladder_4 = _3203;
                frontier_phi_63_64_ladder_5 = _3201;
            }
            _3322 = frontier_phi_63_64_ladder_5;
            _3324 = frontier_phi_63_64_ladder_4;
            _3326 = frontier_phi_63_64_ladder_3;
            _3328 = frontier_phi_63_64_ladder;
            _3330 = frontier_phi_63_64_ladder_2;
            _3332 = frontier_phi_63_64_ladder_1;
        }
        float _3337 = isnan(1.0) ? _1072 : (isnan(_1072) ? 1.0 : min(_1072, 1.0));
        _3134 = (_3337 * _3328) + _2646;
        _3136 = (_3337 * _3330) + _2648;
        _3138 = (_3337 * _3332) + _2650;
        _3140 = ((_3322 * _1057) * _3337) + _2984;
        _3142 = ((_3324 * _1059) * _3337) + _2986;
        _3144 = ((_3326 * _1060) * _3337) + _2988;
    }
    else
    {
        _3134 = _2646;
        _3136 = _2648;
        _3138 = _2650;
        _3140 = _2984;
        _3142 = _2986;
        _3144 = _2988;
    }
    float _5146 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _5157 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _5168 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _3161 = ((isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0))) * (_3134 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1072))) + ((_3140 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1913)) * cbPerFrame._m0[3u].x);
    float _3162 = ((isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0))) * (_3136 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1072))) + ((_3142 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1913)) * cbPerFrame._m0[3u].x);
    float _3163 = ((isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0))) * (_3138 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1072))) + ((_3144 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1913)) * cbPerFrame._m0[3u].x);
    uint _3164 = _1032 + 6u;
    float _3172 = _994 / cbSceneParam._m0[86u].x;
    float _3173 = _995 / cbSceneParam._m0[86u].y;
    vec4 _3187 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3172, _3173, (log2((isnan(cbSceneParam._m0[77u].w) ? _917 : (isnan(_917) ? cbSceneParam._m0[77u].w : min(_917, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3189 = _3187.x;
    float _3190 = _3187.y;
    float _3191 = _3187.z;
    float _3192 = _3187.w;
    float _3264;
    float _3266;
    float _3268;
    float _3270;
    if (_917 > cbSceneParam._m0[78u].w)
    {
        float _3226 = isnan(_917) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _917 : min(cbSceneParam._m0[80u].w, _917));
        float _3227 = _3226 / _917;
        float _3238 = _3227 * _967;
        float _3239 = _968 * _3227;
        float _3240 = (-0.0) - _3239;
        float _3242 = _3227 * _969;
        float _3244 = (cbSceneParam._m0[77u].w * _3240) / _3226;
        float _3245 = _3244 + cbSceneParam._m0[79u].w;
        float _3246 = cbSceneParam._m0[79u].w - _3239;
        float _3252 = sqrt(((_3238 * _3238) + (_3239 * _3239)) + (_3242 * _3242));
        float _3255 = (1.0 - (cbSceneParam._m0[77u].w / _3226)) * _3252;
        float _3260 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3262 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3439;
        if (abs((_3240 - _3244) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3439 = ((((_3245 > 0.0) ? exp2(_3260 * _3245) : (2.0 - exp2(_3262 * _3245))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3255;
        }
        else
        {
            float _3383 = 1.0 / cbSceneParam._m0[80u].x;
            float _3384 = isnan(_3246) ? _3245 : (isnan(_3245) ? _3246 : max(_3245, _3246));
            float _3385 = isnan(_3246) ? _3245 : (isnan(_3245) ? _3246 : min(_3245, _3246));
            float _3394 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : min(_3384, 0.0));
            float _3395 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : min(_3385, 0.0));
            _3439 = ((abs(_3252 / _3240) * cbSceneParam._m0[80u].y) * ((((_3394 - _3395) * 2.0) - ((exp2(_3260 * (isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0)))) - exp2(_3260 * (isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))))) * _3383)) - ((exp2(_3262 * _3394) - exp2(_3262 * _3395)) * _3383))) + (_3255 * cbSceneParam._m0[80u].z);
        }
        vec4 _3441 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3172, _3173, 1.0), 0.0);
        float _3450 = exp2((_3439 * (-1.44269502162933349609375)) * (1.0 - _3441.w));
        float _3451 = log2(_3450);
        float _3467 = log2(_3192);
        _3264 = (exp2(_3467 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3451 * cbSceneParam._m0[78u].x)) * _3441.x) / cbSceneParam._m0[78u].x)) + _3189;
        _3266 = (exp2(_3467 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3451 * cbSceneParam._m0[78u].y)) * _3441.y) / cbSceneParam._m0[78u].y)) + _3190;
        _3268 = (exp2(_3467 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3451 * cbSceneParam._m0[78u].z)) * _3441.z) / cbSceneParam._m0[78u].z)) + _3191;
        _3270 = _3450 * _3192;
    }
    else
    {
        _3264 = _3189;
        _3266 = _3190;
        _3268 = _3191;
        _3270 = _3192;
    }
    bool _3477;
    vec4 _3280;
    vec4 _3302;
    float _3304;
    float _3308;
    float _3309;
    float _3310;
    float _3311;
    bool _3321;
    for (;;)
    {
        _3280 = cbMatDynParam._m0[0u];
        float _3282 = roundEven(_3280.y);
        bool _3283 = _3282 == 3.0;
        float _3284 = log2(_3270);
        float _3291 = exp2(_3284 * cbSceneParam._m0[78u].x) * _3161;
        float _3292 = exp2(_3284 * cbSceneParam._m0[78u].y) * _3162;
        float _3293 = exp2(_3284 * cbSceneParam._m0[78u].z) * _3163;
        float _3300 = _983 + (-0.5);
        _3302 = cbMtdParam._m0[1u];
        _3304 = _3302.y * _3300;
        float _3307 = (_3282 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3308 = _3307 * (_3283 ? _3291 : (_3291 + (cbSceneParam._m0[72u].w * _3264)));
        _3309 = _3307 * (_3283 ? _3292 : (_3292 + (cbSceneParam._m0[72u].w * _3266)));
        _3310 = _3307 * (_3283 ? _3293 : (_3293 + (cbSceneParam._m0[72u].w * _3268)));
        _3311 = _3300 * 0.999000012874603271484375;
        _3321 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3321)
        {
            if ((cbInstanceData._m0[_1032 + 7u].x + _3311) < 0.5)
            {
                _3477 = true;
                break;
            }
        }
        uint _3418 = _1033 + uint(_3280.w);
        if ((cbInstanceData._m0[_3418].w < 1.0) && ((cbInstanceData._m0[_3418].w + _3311) < 0.5))
        {
            _3477 = true;
            break;
        }
        if ((_3304 + 1.0) < _3302.x)
        {
            _3477 = true;
            break;
        }
        _3477 = false;
        break;
    }
    float _3681;
    if (_3477)
    {
        discard_state = true;
        _3681 = 0.0;
    }
    else
    {
        _3681 = cbInstanceData._m0[_3164].w;
    }
    SV_Target.x = _3308;
    SV_Target.y = _3309;
    SV_Target.z = _3310;
    SV_Target.w = _3681;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3164].w;
    discard_exit();
}


