#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1483;
float _4147;
float _4148;
float _4149;
float _4150;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _276 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _282 = _276.x * cbMtdParam._m0[10u].x;
    float _283 = _276.y * cbMtdParam._m0[10u].y;
    float _284 = _276.z * cbMtdParam._m0[10u].z;
    vec4 _302 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _352 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _362 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _352)) + 1.0;
    float _4159 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _370 = (_363 * ((_302.x * cbMtdParam._m0[11u].x) - _282)) + _282;
    float _371 = (_363 * ((_302.y * cbMtdParam._m0[11u].y) - _283)) + _283;
    float _372 = (_363 * ((_302.z * cbMtdParam._m0[11u].z) - _284)) + _284;
    vec4 _390 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _421 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _352)) + 1.0;
    float _4170 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _429 = (_422 * ((_390.x * cbMtdParam._m0[12u].x) - _370)) + _370;
    float _430 = (_422 * ((_390.y * cbMtdParam._m0[12u].y) - _371)) + _371;
    float _431 = (_422 * ((_390.z * cbMtdParam._m0[12u].z) - _372)) + _372;
    vec4 _449 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _474 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _352)) + 1.0;
    float _4181 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    vec4 _503 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _511 = ((((_475 * ((_449.x * cbMtdParam._m0[13u].x) - _429)) + _429) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _503.x;
    float _514 = ((((_475 * ((_449.y * cbMtdParam._m0[13u].y) - _430)) + _430) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _503.y;
    float _517 = ((((_475 * ((_449.z * cbMtdParam._m0[13u].z) - _431)) + _431) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _503.z;
    vec4 _537 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _566 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _4192 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _574 = (_567 * ((_537.x * cbMtdParam._m0[14u].x) - _511)) + _511;
    float _575 = (_567 * ((_537.y * cbMtdParam._m0[14u].y) - _514)) + _514;
    float _576 = (_567 * ((_537.z * cbMtdParam._m0[14u].z) - _517)) + _517;
    vec4 _596 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _624 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _4203 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _632 = (_625 * ((_596.x * cbMtdParam._m0[15u].x) - _574)) + _574;
    float _633 = (_625 * ((_596.y * cbMtdParam._m0[15u].y) - _575)) + _575;
    float _634 = (_625 * ((_596.z * cbMtdParam._m0[15u].z) - _576)) + _576;
    vec4 _647 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _649 = _647.x;
    float _667 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _649) * _363) + _649;
    float _684 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _667) * _422) + _667;
    float _701 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _684) * _475) + _684;
    float _703 = _701 - (_701 * TEXCOORD_5.x);
    vec4 _719 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _741 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _743 = _741.x;
    float _744 = _741.y;
    float _747 = cbMtdParam._m0[18u].y * _741.z;
    vec4 _759 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _768 = (((cbMtdParam._m0[18u].x * _759.z) - _747) * _363) + _747;
    vec4 _781 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _792 = (((cbMtdParam._m0[17u].w * _781.z) - _768) * _422) + _768;
    vec4 _805 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _814 = (((cbMtdParam._m0[17u].z * _805.z) - _792) * _475) + _792;
    float _819 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_719.z * cbMtdParam._m0[18u].z) - _814)) + _814;
    vec4 _832 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _846 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_832.z * cbMtdParam._m0[19u].y) - _819)) + _819;
    float _851 = ((_759.x - _743) * _363) + _743;
    float _852 = ((_759.y - _744) * _363) + _744;
    float _857 = ((_781.x - _851) * _422) + _851;
    float _858 = ((_781.y - _852) * _422) + _852;
    float _867 = ((((_805.x - _857) * _475) + _857) * 2.0) + (-1.0);
    float _868 = ((((_805.y - _858) * _475) + _858) * 2.0) + (-1.0);
    float _869 = dot(vec2(_867, _868), vec2(_867, _868));
    float _4214 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _874 = sqrt(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))));
    float _887 = (((((_719.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _867) + ((((_832.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _888 = (((((_719.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _868) + ((((_832.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _891 = fma(_874, _246 * NORMAL.x, fma(_888, _253 * TANGENT.x, (_239 * _231) * _887));
    float _894 = fma(_874, _246 * NORMAL.y, fma(_888, _253 * TANGENT.y, (_239 * _232) * _887));
    float _897 = fma(_874, _246 * NORMAL.z, fma(_888, _253 * TANGENT.z, (_239 * _233) * _887));
    float _901 = inversesqrt(dot(vec3(_891, _894, _897), vec3(_891, _894, _897)));
    float _902 = _901 * _891;
    float _903 = _901 * _894;
    float _904 = _901 * _897;
    float _4225 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _905 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4247 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4258 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4269 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _909 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _925 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _975 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _965);
    float _976 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _965);
    float _977 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _965);
    float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
    float _982 = _975 * _981;
    float _983 = _976 * _981;
    float _984 = _977 * _981;
    vec4 _989 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _991 = _989.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1163 = sqrt(((_975 * _975) + (_976 * _976)) + (_977 * _977));
        float _1169 = (cbMatDynParam._m0[5u].x * _1163) + cbMatDynParam._m0[5u].y;
        float _4280 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1174 = (cbMatDynParam._m0[5u].z * _1163) + cbMatDynParam._m0[5u].w;
        float _4291 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) - _1170)) + _1170) < ((_991 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1002 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1003 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1021 = fma(_904, cbSceneParam._m0[5u].z, fma(_903, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _902));
    float _1024 = fma(_904, cbSceneParam._m0[6u].z, fma(_903, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _902));
    float _1027 = fma(_904, cbSceneParam._m0[7u].z, fma(_903, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _902));
    uint _1040 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1041 = _1040 + 9u;
    uint _1042 = _1041 + uint(cbMatDynParam._m0[0u].w);
    float _1048 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * cbInstanceData._m0[_1042].x;
    float _1049 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * cbInstanceData._m0[_1042].y;
    float _1050 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * cbInstanceData._m0[_1042].z;
    float _4302 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _4313 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _4324 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _1054 = 1.0 - _909;
    float _1055 = _1051 * _1054;
    float _1056 = _1052 * _1054;
    float _1057 = _1053 * _1054;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _909;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _909;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _909;
    float _1065 = _1062 + 0.039999999105930328369140625;
    float _1067 = _1063 + 0.039999999105930328369140625;
    float _1068 = _1064 + 0.039999999105930328369140625;
    vec4 _1077 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1002, cbSceneParam._m0[86u].y * _1003));
    float _1080 = _1077.x * TEXCOORD_5.w;
    float _1081 = dot(vec3(_902, _903, _904), vec3(_982, _983, _984));
    float _1084 = _1081 * 2.0;
    float _1088 = (_1084 * _902) - _982;
    float _1089 = (_1084 * _903) - _983;
    float _1090 = (_1084 * _904) - _984;
    float _1094 = abs(dot(vec3(_982, _983, _984), vec3(_902, _903, _904)));
    float _4335 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1096 = sqrt(_905);
    float _1109 = exp2((_1096 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1096 * 3.0));
    float _1115 = (1.0 - _1109) * ((_1096 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1116 = _1109 * _1096;
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1482;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1207 = fma(_1152, cbModelParam._m0[26u].z, fma(_1148, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1144));
        float _1211 = fma(_1152, cbModelParam._m0[27u].z, fma(_1148, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1144));
        float _1215 = fma(_1152, cbModelParam._m0[28u].z, fma(_1148, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1144));
        float _1240 = _1144 + _902;
        float _1241 = _1148 + _903;
        float _1242 = _1152 + _904;
        float _1252 = fma(_1242, cbModelParam._m0[26u].z, fma(_1241, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1240)) - _1207;
        float _1253 = fma(_1242, cbModelParam._m0[27u].z, fma(_1241, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1240)) - _1211;
        float _1254 = fma(_1242, cbModelParam._m0[28u].z, fma(_1241, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1240)) - _1215;
        float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
        float _1271 = ((_1258 * _1252) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1207 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1258 * _1253) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1211 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1258 * _1254) / cbModelParam._m0[34u].z) + ((((((_1215 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        float _1310 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1276.x + (-0.5));
        float _1312 = _1310 * (_1276.y + (-0.5));
        float _1313 = _1310 * (_1276.z + (-0.5));
        float _1320 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1283.x + (-0.5));
        float _1322 = _1320 * (_1283.y + (-0.5));
        float _1323 = _1320 * (_1283.z + (-0.5));
        float _1330 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1290.x + (-0.5));
        float _1332 = _1330 * (_1290.y + (-0.5));
        float _1333 = _1330 * (_1290.z + (-0.5));
        float _1340 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1297.x + (-0.5));
        float _1342 = _1340 * (_1297.y + (-0.5));
        float _1343 = _1340 * (_1297.z + (-0.5));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = _1311 * 0.5;
        float _1348 = _1321 * 0.5;
        float _1349 = _1331 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1364 = (dot(vec3(_902, _903, _904), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1374 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1376 + 1.0))) + _1381) * _1344;
        float _1391 = _1312 * 0.5;
        float _1392 = _1322 * 0.5;
        float _1393 = _1332 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_902, _903, _904), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4416 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1418 + 1.0))) + _1423) * _1345;
        float _1433 = _1313 * 0.5;
        float _1434 = _1323 * 0.5;
        float _1435 = _1333 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_902, _903, _904), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4449 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1460 + 1.0))) + _1465) * _1346;
        _1482 = _1313;
        _1484 = _1312;
        _1485 = _1311;
        _1486 = _1323;
        _1487 = _1322;
        _1488 = _1321;
        _1489 = _1333;
        _1490 = _1332;
        _1491 = _1331;
        _1492 = _1346;
        _1493 = _1345;
        _1494 = _1344;
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    }
    else
    {
        _1482 = _1483;
        _1484 = _1483;
        _1485 = _1483;
        _1486 = _1483;
        _1487 = _1483;
        _1488 = _1483;
        _1489 = _1483;
        _1490 = _1483;
        _1491 = _1483;
        _1492 = _1483;
        _1493 = _1483;
        _1494 = _1483;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1526 = fma(_1152, cbModelParam._m0[30u].z, fma(_1148, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1144));
        float _1530 = fma(_1152, cbModelParam._m0[31u].z, fma(_1148, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1144));
        float _1534 = fma(_1152, cbModelParam._m0[32u].z, fma(_1148, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1144));
        float _1557 = _1144 + _902;
        float _1558 = _1148 + _903;
        float _1559 = _1152 + _904;
        float _1569 = fma(_1559, cbModelParam._m0[30u].z, fma(_1558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1557)) - _1526;
        float _1570 = fma(_1559, cbModelParam._m0[31u].z, fma(_1558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1557)) - _1530;
        float _1571 = fma(_1559, cbModelParam._m0[32u].z, fma(_1558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1557)) - _1534;
        float _1575 = inversesqrt(dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571)));
        float _1588 = ((_1575 * _1569) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1526 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1575 * _1570) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1530 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1590 = ((_1575 * _1571) / cbModelParam._m0[35u].z) + ((((((_1534 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        float _1625 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1592.x + (-0.5));
        float _1627 = _1625 * (_1592.y + (-0.5));
        float _1628 = _1625 * (_1592.z + (-0.5));
        float _1635 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1599.x + (-0.5));
        float _1637 = _1635 * (_1599.y + (-0.5));
        float _1638 = _1635 * (_1599.z + (-0.5));
        float _1645 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1606.x + (-0.5));
        float _1647 = _1645 * (_1606.y + (-0.5));
        float _1648 = _1645 * (_1606.z + (-0.5));
        float _1655 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1613.x + (-0.5));
        float _1657 = _1655 * (_1613.y + (-0.5));
        float _1658 = _1655 * (_1613.z + (-0.5));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = _1626 * 0.5;
        float _1663 = _1636 * 0.5;
        float _1664 = _1646 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_902, _903, _904), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4490 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4501 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4512 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_1689 + 1.0))) + _1694) * _1659;
        float _1704 = _1627 * 0.5;
        float _1705 = _1637 * 0.5;
        float _1706 = _1647 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_902, _903, _904), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4523 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4534 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4545 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_1731 + 1.0))) + _1736) * _1660;
        float _1746 = _1628 * 0.5;
        float _1747 = _1638 * 0.5;
        float _1748 = _1648 * 0.5;
        float _1749 = dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748));
        float _1754 = (_1749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1749);
        float _1762 = (dot(vec3(_902, _903, _904), vec3(_1754 * _1746, _1754 * _1747, _1754 * _1748)) + 1.0) * 0.5;
        float _4556 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1771 = sqrt(((_1747 * _1747) + (_1746 * _1746)) + (_1748 * _1748)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4567 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _1773 = _1772 * 2.0;
        float _1777 = (1.0 - _1772) / (_1772 + 1.0);
        float _4578 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _1787 = ((((1.0 - _1778) * (_1773 + 2.0)) * exp2(log2(isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_1773 + 1.0))) + _1778) * _1661;
        _1795 = _1628;
        _1796 = _1627;
        _1797 = _1626;
        _1798 = _1638;
        _1799 = _1637;
        _1800 = _1636;
        _1801 = _1648;
        _1802 = _1647;
        _1803 = _1646;
        _1804 = _1661;
        _1805 = _1660;
        _1806 = _1659;
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)));
    }
    else
    {
        _1795 = _1483;
        _1796 = _1483;
        _1797 = _1483;
        _1798 = _1483;
        _1799 = _1483;
        _1800 = _1483;
        _1801 = _1483;
        _1802 = _1483;
        _1803 = _1483;
        _1804 = _1483;
        _1805 = _1483;
        _1806 = _1483;
        _1807 = 0.0;
        _1808 = 0.0;
        _1809 = 0.0;
    }
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1495)) + _1495;
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1496)) + _1496;
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1497)) + _1497;
    float _1842 = fma(_1821, cbSceneParam._m0[89u].z, fma(_1820, cbSceneParam._m0[89u].y, _1819 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1821, cbSceneParam._m0[90u].z, fma(_1820, cbSceneParam._m0[90u].y, _1819 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1821, cbSceneParam._m0[91u].z, fma(_1820, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1819));
    float _1863 = _1088 * 0.5;
    float _1864 = _1089 * 0.5;
    float _1865 = _1090 * 0.5;
    float _1866 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1869 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1872 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1906;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1879 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1482, _1486, _1489, _1492));
        float _1883 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1484, _1487, _1490, _1493));
        float _1887 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1485, _1488, _1491, _1494));
        float _1894 = dot(vec4(cbModelParam._m0[39u]), vec4(_1863, _1864, _1865, 1.0));
        _1906 = dot(vec3(isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1894) ? 0.0 : (isnan(0.0) ? _1894 : max(0.0, _1894))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1906 = 1.0;
    }
    float _1917;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1908 = dot(vec4(cbModelParam._m0[40u]), vec4(_1863, _1864, _1865, 1.0));
        _1917 = dot(vec3(isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1908) ? 0.0 : (isnan(0.0) ? _1908 : max(0.0, _1908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1917 = 1.0;
    }
    float _1921 = (_1917 * cbModelParam._m0[1u].x) + (_1906 * (1.0 - cbModelParam._m0[1u].x));
    float _1931 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _905);
    float _1932 = isnan(_1931) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1931 : min(cbModelParam._m0[25u].z, _1931));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1979 = fma(_1152, cbModelParam._m0[13u].z, fma(_1148, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1144)) + cbModelParam._m0[13u].w;
        float _1983 = fma(_1152, cbModelParam._m0[14u].z, fma(_1148, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1144)) + cbModelParam._m0[14u].w;
        float _1987 = fma(_1152, cbModelParam._m0[15u].z, fma(_1148, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1144)) + cbModelParam._m0[15u].w;
        float _1990 = fma(_1090, cbModelParam._m0[13u].z, fma(_1089, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1088));
        float _1993 = fma(_1090, cbModelParam._m0[14u].z, fma(_1089, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1088));
        float _1996 = fma(_1090, cbModelParam._m0[15u].z, fma(_1089, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1088));
        float _2024;
        if (_1990 > 0.0)
        {
            _2024 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2024 = frontier_phi_17_15_ladder;
        }
        float _2195;
        if (_1993 > 0.0)
        {
            _2195 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2195 = frontier_phi_26_22_ladder;
        }
        float _2490;
        if (_1996 > 0.0)
        {
            _2490 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2490 = frontier_phi_38_33_ladder;
        }
        float _2492 = isnan(_2195) ? _2024 : (isnan(_2024) ? _2195 : min(_2024, _2195));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1990) + _1979;
        float _2498 = (_2493 * _1993) + _1983;
        float _2499 = (_2493 * _1996) + _1987;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2502 = (-1.0) - _2500;
        float _2504 = _2500 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2499 > _2504) || ((_2499 < _2502) || ((_2498 > _2504) || ((_2498 < _2502) || ((_2497 < _2502) || (_2497 > _2504))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2644 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2499, cbModelParam._m0[9u].z, fma(_2498, cbModelParam._m0[9u].y, _2497 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2499, cbModelParam._m0[10u].z, fma(_2498, cbModelParam._m0[10u].y, _2497 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2499, cbModelParam._m0[11u].z, fma(_2498, cbModelParam._m0[11u].y, _2497 * cbModelParam._m0[11u].x))), _1932);
            frontier_phi_16_38_ladder = _2644.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2644.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2644.x * cbModelParam._m0[1u].y;
        }
        _2012 = frontier_phi_16_38_ladder_2;
        _2014 = frontier_phi_16_38_ladder_1;
        _2016 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2000 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1088, _1089, _1090), _1932);
        _2012 = _2000.x * cbModelParam._m0[1u].y;
        _2014 = _2000.y * cbModelParam._m0[1u].y;
        _2016 = _2000.z * cbModelParam._m0[1u].y;
    }
    float _2020 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _905);
    float _2021 = isnan(_2020) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2020 : min(cbModelParam._m0[25u].w, _2020));
    float _2110;
    float _2112;
    float _2114;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2074 = fma(_1152, cbModelParam._m0[21u].z, fma(_1148, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1144)) + cbModelParam._m0[21u].w;
        float _2078 = fma(_1152, cbModelParam._m0[22u].z, fma(_1148, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1144)) + cbModelParam._m0[22u].w;
        float _2082 = fma(_1152, cbModelParam._m0[23u].z, fma(_1148, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1144)) + cbModelParam._m0[23u].w;
        float _2085 = fma(_1090, cbModelParam._m0[21u].z, fma(_1089, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1088));
        float _2088 = fma(_1090, cbModelParam._m0[22u].z, fma(_1089, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1088));
        float _2091 = fma(_1090, cbModelParam._m0[23u].z, fma(_1089, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1088));
        float _2200;
        if (_2085 > 0.0)
        {
            _2200 = abs((1.0 - _2074) / _2085);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2074 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2200 = frontier_phi_28_24_ladder;
        }
        float _2517;
        if (_2088 > 0.0)
        {
            _2517 = abs((1.0 - _2078) / _2088);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2078 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2517 = frontier_phi_40_35_ladder;
        }
        float _2855;
        if (_2091 > 0.0)
        {
            _2855 = abs((1.0 - _2082) / _2091);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2082 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2855 = frontier_phi_50_47_ladder;
        }
        float _2857 = isnan(_2517) ? _2200 : (isnan(_2200) ? _2517 : min(_2200, _2517));
        float _2858 = isnan(_2855) ? _2857 : (isnan(_2857) ? _2855 : min(_2857, _2855));
        float _2862 = (_2858 * _2085) + _2074;
        float _2863 = (_2858 * _2088) + _2078;
        float _2864 = (_2858 * _2091) + _2082;
        float _2865 = _2858 * 9.9999997473787516355514526367188e-05;
        float _2866 = (-1.0) - _2865;
        float _2868 = _2865 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2864 > _2868) || ((_2864 < _2866) || ((_2863 > _2868) || ((_2863 < _2866) || ((_2862 < _2866) || (_2862 > _2868))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2986 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2864, cbModelParam._m0[17u].z, fma(_2863, cbModelParam._m0[17u].y, _2862 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2864, cbModelParam._m0[18u].z, fma(_2863, cbModelParam._m0[18u].y, _2862 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2864, cbModelParam._m0[19u].z, fma(_2863, cbModelParam._m0[19u].y, _2862 * cbModelParam._m0[19u].x))), _2021);
            frontier_phi_25_50_ladder = _2986.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2986.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2986.x * cbModelParam._m0[1u].z;
        }
        _2110 = frontier_phi_25_50_ladder_2;
        _2112 = frontier_phi_25_50_ladder_1;
        _2114 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2094 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1088, _1089, _1090), _2021);
        _2110 = _2094.x * cbModelParam._m0[1u].z;
        _2112 = _2094.y * cbModelParam._m0[1u].z;
        _2114 = _2094.z * cbModelParam._m0[1u].z;
    }
    float _2127 = (((_1115 * _1065) + _1116) * _1080) * ((cbModelParam._m0[1u].w * (_2110 - _2012)) + _2012);
    float _2129 = (((_1115 * _1067) + _1116) * _1080) * ((cbModelParam._m0[1u].w * (_2112 - _2014)) + _2014);
    float _2131 = (((_1115 * _1068) + _1116) * _1080) * ((cbModelParam._m0[1u].w * (_2114 - _2016)) + _2016);
    float _2134 = fma(_2131, cbSceneParam._m0[89u].z, fma(_2129, cbSceneParam._m0[89u].y, _2127 * cbSceneParam._m0[89u].x));
    float _2137 = fma(_2131, cbSceneParam._m0[90u].z, fma(_2129, cbSceneParam._m0[90u].y, _2127 * cbSceneParam._m0[90u].x));
    float _2140 = fma(_2131, cbSceneParam._m0[91u].z, fma(_2129, cbSceneParam._m0[91u].y, _2127 * cbSceneParam._m0[91u].x));
    float _2174 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2178 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2182 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2186 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2187 = _2174 / _2186;
    float _2188 = _2178 / _2186;
    float _2189 = _2182 / _2186;
    float _2336;
    float _2337;
    float _2338;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2216 = ((uint(_2189 > cbSceneParam._m0[59u].y) + uint(_2189 > cbSceneParam._m0[59u].x)) + uint(_2189 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2217 = _2216 + 43u;
        uint _2225 = _2216 + 44u;
        uint _2233 = _2216 + 45u;
        uint _2241 = _2216 + 46u;
        float _2252 = fma(_2186, cbSceneParam._m0[_2217].w, fma(_2182, cbSceneParam._m0[_2217].z, fma(_2178, cbSceneParam._m0[_2217].y, _2174 * cbSceneParam._m0[_2217].x)));
        float _2256 = fma(_2186, cbSceneParam._m0[_2225].w, fma(_2182, cbSceneParam._m0[_2225].z, fma(_2178, cbSceneParam._m0[_2225].y, _2174 * cbSceneParam._m0[_2225].x)));
        float _2264 = fma(_2186, cbSceneParam._m0[_2241].w, fma(_2182, cbSceneParam._m0[_2241].z, fma(_2178, cbSceneParam._m0[_2241].y, _2174 * cbSceneParam._m0[_2241].x)));
        float _2269 = cbSceneParam._m0[33u].z * _2264;
        float _2271 = cbSceneParam._m0[33u].w * _2264;
        float _2274 = fma(_2186, cbSceneParam._m0[_2233].w, fma(_2182, cbSceneParam._m0[_2233].z, fma(_2178, cbSceneParam._m0[_2233].y, _2174 * cbSceneParam._m0[_2233].x))) / _2264;
        float _2322 = (cbSceneParam._m0[33u].x - sqrt(((_2188 * _2188) + (_2187 * _2187)) + (_2189 * _2189))) * cbSceneParam._m0[33u].y;
        float _4704 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2329 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2269 + _2252) / _2264, (_2271 + _2256) / _2264), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2271 + _2252) / _2264, (_2256 - _2269) / _2264), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2252 - _2269) / _2264, (_2256 - _2271) / _2264), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2252 - _2271) / _2264, (_2269 + _2256) / _2264), _2274), 0.0)).x), vec4(0.25)));
        _2336 = 1.0 - (_2329 * cbSceneParam._m0[34u].x);
        _2337 = 1.0 - (_2329 * cbSceneParam._m0[34u].y);
        _2338 = 1.0 - (_2329 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2336 = 1.0;
        _2337 = 1.0;
        _2338 = 1.0;
    }
    float _2402;
    float _2404;
    float _2406;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2390 = fma(_2186, cbSceneParam._m0[63u].w, fma(_2182, cbSceneParam._m0[63u].z, fma(_2178, cbSceneParam._m0[63u].y, _2174 * cbSceneParam._m0[63u].x)));
        float _2391 = fma(_2186, cbSceneParam._m0[60u].w, fma(_2182, cbSceneParam._m0[60u].z, fma(_2178, cbSceneParam._m0[60u].y, _2174 * cbSceneParam._m0[60u].x))) / _2390;
        float _2392 = fma(_2186, cbSceneParam._m0[61u].w, fma(_2182, cbSceneParam._m0[61u].z, fma(_2178, cbSceneParam._m0[61u].y, _2174 * cbSceneParam._m0[61u].x))) / _2390;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2391 >= cbSceneParam._m0[64u].x) && (_2392 >= cbSceneParam._m0[64u].y)) && (_2391 <= cbSceneParam._m0[64u].z)) && (_2392 <= cbSceneParam._m0[64u].w))
        {
            float _2530 = fma(_2186, cbSceneParam._m0[62u].w, fma(_2182, cbSceneParam._m0[62u].z, fma(_2178, cbSceneParam._m0[62u].y, _2174 * cbSceneParam._m0[62u].x))) / _2390;
            float _2534 = isnan(cbSceneParam._m0[41u].w) ? _2530 : (isnan(_2530) ? cbSceneParam._m0[41u].w : max(_2530, cbSceneParam._m0[41u].w));
            float _2577 = (cbSceneParam._m0[33u].x - sqrt(((_2188 * _2188) + (_2187 * _2187)) + (_2189 * _2189))) * cbSceneParam._m0[33u].y;
            float _4720 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
            float _2584 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2391, cbSceneParam._m0[33u].w + _2392), _2534), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2391, _2392 - cbSceneParam._m0[33u].z), _2534), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2391 - cbSceneParam._m0[33u].z, _2392 - cbSceneParam._m0[33u].w), _2534), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2391 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2392), _2534), 0.0)).x), vec4(0.25)));
            float _2588 = 1.0 - (_2584 * cbSceneParam._m0[34u].x);
            float _2589 = 1.0 - (_2584 * cbSceneParam._m0[34u].y);
            float _2590 = 1.0 - (_2584 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2590) ? _2338 : (isnan(_2338) ? _2590 : min(_2338, _2590));
            frontier_phi_37_36_ladder_1 = isnan(_2589) ? _2337 : (isnan(_2337) ? _2589 : min(_2337, _2589));
            frontier_phi_37_36_ladder_2 = isnan(_2588) ? _2336 : (isnan(_2336) ? _2588 : min(_2336, _2588));
        }
        else
        {
            frontier_phi_37_36_ladder = _2338;
            frontier_phi_37_36_ladder_1 = _2337;
            frontier_phi_37_36_ladder_2 = _2336;
        }
        _2402 = frontier_phi_37_36_ladder_2;
        _2404 = frontier_phi_37_36_ladder_1;
        _2406 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2402 = _2336;
        _2404 = _2337;
        _2406 = _2338;
    }
    uvec4 _2411 = floatBitsToUint(cbInstanceData._m0[_1040 + 5u]);
    uint _2413 = _2411.x * 14u;
    uint _2414 = _2413 + 13u;
    float _2421 = _1080 + (-1.0);
    float _2426 = (cbLight._m0[_2414].x * _2421) + 1.0;
    float _2427 = (cbLight._m0[_2414].y * _2421) + 1.0;
    float _2428 = (cbLight._m0[_2414].z * _2421) + 1.0;
    float _2429 = (cbLight._m0[_2414].w * _2421) + 1.0;
    uint _2430 = _2413 + 5u;
    float _2436 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
    uint _2440 = _2413 + 4u;
    float _2449 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
    uint _2453 = _2413 | 1u;
    float _2464 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_902, _903, _904));
    float _2467 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_902, _903, _904));
    float _4756 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _4767 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2472 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * 0.3183098733425140380859375;
    float _2474 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * 0.3183098733425140380859375;
    float _2481 = ((cbLight._m0[_2430].x * _2436) * _2474) + (((cbLight._m0[_2440].x * _2402) * _2449) * _2472);
    float _2482 = ((_2436 * cbLight._m0[_2430].y) * _2474) + (((cbLight._m0[_2440].y * _2404) * _2449) * _2472);
    float _2483 = ((_2436 * cbLight._m0[_2430].z) * _2474) + (((cbLight._m0[_2440].z * _2406) * _2449) * _2472);
    uvec4 _2487 = floatBitsToUint(cbLight._m0[_2413 + 12u]);
    bool _2489 = _2487.x == 0u;
    float _2591;
    float _2593;
    float _2595;
    if (_2489)
    {
        _2591 = _2481;
        _2593 = _2482;
        _2595 = _2483;
    }
    else
    {
        uint _2599 = _2413 + 6u;
        float _2615 = (dot(vec3(cbLight._m0[_2413 + 2u].xyz), vec3(_902, _903, _904)) * 0.5) + 0.5;
        float _2616 = _2615 * _2615;
        float _4778 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2617 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2618 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
        _2591 = (((cbLight._m0[_2599].x * 0.3183098733425140380859375) * _2617) * _2618) + _2481;
        _2593 = (((cbLight._m0[_2599].y * 0.3183098733425140380859375) * _2617) * _2618) + _2482;
        _2595 = (((cbLight._m0[_2599].z * 0.3183098733425140380859375) * _2617) * _2618) + _2483;
    }
    bool _2598 = _2487.y == 0u;
    float _2653;
    float _2655;
    float _2657;
    if (_2598)
    {
        _2653 = _2591;
        _2655 = _2593;
        _2657 = _2595;
    }
    else
    {
        uint _2826 = _2413 + 7u;
        float _2842 = (dot(vec3(cbLight._m0[_2413 + 3u].xyz), vec3(_902, _903, _904)) * 0.5) + 0.5;
        float _2843 = _2842 * _2842;
        float _4794 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2844 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2845 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2653 = (((cbLight._m0[_2826].x * 0.3183098733425140380859375) * _2844) * _2845) + _2591;
        _2655 = (((cbLight._m0[_2826].y * 0.3183098733425140380859375) * _2844) * _2845) + _2593;
        _2657 = (((cbLight._m0[_2826].z * 0.3183098733425140380859375) * _2844) * _2845) + _2595;
    }
    uint _2660 = _2413 + 8u;
    float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _905) * 0.949999988079071044921875);
    float _2674 = _2673 * _2673;
    float _2675 = cbLight._m0[_2413].x + _982;
    float _2676 = cbLight._m0[_2413].y + _983;
    float _2677 = cbLight._m0[_2413].z + _984;
    float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
    float _2682 = _2681 * _2675;
    float _2683 = _2681 * _2676;
    float _2684 = _2681 * _2677;
    float _2685 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2413].xyz));
    float _4810 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2688 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
    float _4821 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _2689 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
    float _2690 = dot(vec3(_902, _903, _904), vec3(_2682, _2683, _2684));
    float _4832 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2693 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
    float _2694 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2682, _2683, _2684));
    float _4843 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2698 = _2674 * _2674;
    float _2702 = ((_2693 * _2693) * (_2698 + (-1.0))) + 1.0;
    float _2710 = exp2(log2(1.0 - (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) * 5.0);
    float _2711 = 0.959999978542327880859375 - _1062;
    float _2713 = 0.959999978542327880859375 - _1063;
    float _2714 = 0.959999978542327880859375 - _1064;
    float _2721 = 1.0 - _2674;
    float _2732 = (0.5 / (((_2689 * ((_2688 * _2721) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2689 * _2721) + _2674) * _2688))) * _2688;
    float _4854 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2734 = (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_2698 / ((_2702 * _2702) * 3.141590118408203125));
    uint _2748 = _2413 + 9u;
    float _2759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _905) * 0.949999988079071044921875);
    float _2760 = _2759 * _2759;
    float _2761 = cbLight._m0[_2453].x + _982;
    float _2762 = cbLight._m0[_2453].y + _983;
    float _2763 = cbLight._m0[_2453].z + _984;
    float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
    float _2768 = _2767 * _2761;
    float _2769 = _2767 * _2762;
    float _2770 = _2767 * _2763;
    float _2771 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2453].xyz));
    float _4865 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
    float _2774 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
    float _2775 = dot(vec3(_902, _903, _904), vec3(_2768, _2769, _2770));
    float _4876 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2778 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
    float _2779 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2768, _2769, _2770));
    float _4887 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
    float _2783 = _2760 * _2760;
    float _2787 = ((_2778 * _2778) * (_2783 + (-1.0))) + 1.0;
    float _2794 = exp2(log2(1.0 - (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)))) * 5.0);
    float _2801 = 1.0 - _2760;
    float _2811 = (0.5 / (((_2689 * ((_2774 * _2801) + _2760)) + 9.9999999392252902907785028219223e-09) + (((_2689 * _2801) + _2760) * _2774))) * _2774;
    float _4898 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
    float _2813 = (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2783 / ((_2787 * _2787) * 3.141590118408203125));
    float _2823 = (((((_2794 * _2711) + _1065) * cbLight._m0[_2748].x) * _2813) * _2436) + ((((cbLight._m0[_2660].x * _2402) * ((_2710 * _2711) + _1065)) * _2734) * _2449);
    float _2824 = (((((_2794 * _2713) + _1067) * cbLight._m0[_2748].y) * _2813) * _2436) + ((((cbLight._m0[_2660].y * _2404) * ((_2710 * _2713) + _1067)) * _2734) * _2449);
    float _2825 = (((((_2794 * _2714) + _1068) * cbLight._m0[_2748].z) * _2813) * _2436) + ((((cbLight._m0[_2660].z * _2406) * ((_2710 * _2714) + _1068)) * _2734) * _2449);
    float _2881;
    float _2883;
    float _2885;
    if (_2489)
    {
        _2881 = _2823;
        _2883 = _2824;
        _2885 = _2825;
    }
    else
    {
        uint _2887 = _2413 + 2u;
        uint _2891 = _2413 + 10u;
        float _2905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2887].w)) * _905) * 0.949999988079071044921875);
        float _2906 = _2905 * _2905;
        float _2907 = cbLight._m0[_2887].x + _982;
        float _2908 = cbLight._m0[_2887].y + _983;
        float _2909 = cbLight._m0[_2887].z + _984;
        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
        float _2914 = _2913 * _2907;
        float _2915 = _2913 * _2908;
        float _2916 = _2913 * _2909;
        float _2917 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2887].xyz));
        float _4909 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2920 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
        float _2921 = dot(vec3(_902, _903, _904), vec3(_2914, _2915, _2916));
        float _4920 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2924 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
        float _2925 = dot(vec3(cbLight._m0[_2887].xyz), vec3(_2914, _2915, _2916));
        float _4931 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2929 = _2906 * _2906;
        float _2933 = ((_2924 * _2924) * (_2929 + (-1.0))) + 1.0;
        float _2940 = exp2(log2(1.0 - (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0)))) * 5.0);
        float _2947 = 1.0 - _2906;
        float _2957 = (0.5 / (((_2689 * ((_2920 * _2947) + _2906)) + 9.9999999392252902907785028219223e-09) + (((_2689 * _2947) + _2906) * _2920))) * _2920;
        float _4942 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2959 = (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2929 / ((_2933 * _2933) * 3.141590118408203125));
        float _2960 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
        _2881 = (((((_2940 * _2711) + _1065) * cbLight._m0[_2891].x) * _2959) * _2960) + _2823;
        _2883 = (((((_2940 * _2713) + _1067) * cbLight._m0[_2891].y) * _2959) * _2960) + _2824;
        _2885 = (((((_2940 * _2714) + _1068) * cbLight._m0[_2891].z) * _2959) * _2960) + _2825;
    }
    float _2991;
    float _2993;
    float _2995;
    if (_2598)
    {
        _2991 = _2881;
        _2993 = _2883;
        _2995 = _2885;
    }
    else
    {
        uint _3002 = _2413 + 3u;
        uint _3006 = _2413 + 11u;
        float _3020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3002].w)) * _905) * 0.949999988079071044921875);
        float _3021 = _3020 * _3020;
        float _3022 = cbLight._m0[_3002].x + _982;
        float _3023 = cbLight._m0[_3002].y + _983;
        float _3024 = cbLight._m0[_3002].z + _984;
        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
        float _3029 = _3028 * _3022;
        float _3030 = _3028 * _3023;
        float _3031 = _3028 * _3024;
        float _3032 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_3002].xyz));
        float _4958 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3035 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
        float _3036 = dot(vec3(_902, _903, _904), vec3(_3029, _3030, _3031));
        float _4969 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
        float _3039 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
        float _3040 = dot(vec3(cbLight._m0[_3002].xyz), vec3(_3029, _3030, _3031));
        float _4980 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        float _3044 = _3021 * _3021;
        float _3048 = ((_3039 * _3039) * (_3044 + (-1.0))) + 1.0;
        float _3055 = exp2(log2(1.0 - (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0)))) * 5.0);
        float _3062 = 1.0 - _3021;
        float _3072 = (0.5 / (((_2689 * ((_3035 * _3062) + _3021)) + 9.9999999392252902907785028219223e-09) + (((_2689 * _3062) + _3021) * _3035))) * _3035;
        float _4991 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
        float _3074 = (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0))) * (_3044 / ((_3048 * _3048) * 3.141590118408203125));
        float _3075 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2991 = (((((_3055 * _2711) + _1065) * cbLight._m0[_3006].x) * _3074) * _3075) + _2881;
        _2993 = (((((_3055 * _2713) + _1067) * cbLight._m0[_3006].y) * _3074) * _3075) + _2883;
        _2995 = (((((_3055 * _2714) + _1068) * cbLight._m0[_3006].z) * _3074) * _3075) + _2885;
    }
    float _3141;
    float _3143;
    float _3145;
    float _3147;
    float _3149;
    float _3151;
    if (_2411.y == 0u)
    {
        uvec4 _3096 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3097 = _3096.x;
        uint _3108 = uint((float(_3096.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1003) / _3097))) + floor(float(uint(cbSceneParam._m0[85u].x * _1002) / _3097)));
        float _3118 = (log2(_2189 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3119 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
        uint _3122 = uint(isnan(14.0) ? _3119 : (isnan(_3119) ? 14.0 : min(_3119, 14.0)));
        uvec4 _3127 = texelFetch(g_lightClusterGridBuffer, int(((_3122 << 2u) + (_3108 << 6u)) >> 2u));
        uint _3128 = _3127.x;
        uint _3129 = _3096.z;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        if (((((1u << ((_3129 >> 4u) & 15u)) + 4294967295u) & _3128) == 0u) || ((_3129 & 240u) == 0u))
        {
            _3208 = 0.0;
            _3210 = 0.0;
            _3212 = 0.0;
            _3214 = 0.0;
            _3216 = 0.0;
            _3218 = 0.0;
        }
        else
        {
            float _3209;
            float _3211;
            float _3213;
            float _3215;
            float _3217;
            float _3219;
            float _3361 = 0.0;
            float _3362 = 0.0;
            float _3363 = 0.0;
            float _3364 = 0.0;
            float _3365 = 0.0;
            float _3366 = 0.0;
            uint _3367 = 0u;
            uint _3376;
            bool _3377;
            for (;;)
            {
                _3376 = texelFetch(g_lightClassification, int((((_3122 << 5u) + (_3108 << 9u)) + (_3367 << 2u)) >> 2u)).x;
                _3377 = _3376 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3377)
                {
                    frontier_phi_71_pred = _3366;
                    frontier_phi_71_pred_1 = _3365;
                    frontier_phi_71_pred_2 = _3364;
                    frontier_phi_71_pred_3 = _3363;
                    frontier_phi_71_pred_4 = _3362;
                    frontier_phi_71_pred_5 = _3361;
                }
                else
                {
                    float _3506;
                    float _3507;
                    float _3508;
                    float _3509;
                    float _3510;
                    float _3511;
                    uint _3512;
                    _3506 = _3361;
                    _3507 = _3362;
                    _3508 = _3363;
                    _3509 = _3364;
                    _3510 = _3365;
                    _3511 = _3366;
                    _3512 = _3376;
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    for (;;)
                    {
                        uint _3516 = uint(findLSB(_3512)) + (_3367 << 5u);
                        uint _3513 = (_3512 + 4294967295u) & _3512;
                        uint _3518 = _3516 * 48u;
                        vec4 _3532 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3518)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 3u)).x));
                        uint _3538 = (_3516 * 48u) + 4u;
                        vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3538)).x, texelFetch(g_PointLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3538 + 3u)).x));
                        uint _3557 = (_3516 * 48u) + 8u;
                        vec3 _3568 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3557)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 2u)).x));
                        float _3572 = _3532.x - _2187;
                        float _3573 = _3532.y - _2188;
                        float _3574 = _3532.z - _2189;
                        float _3575 = dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574));
                        float _3578 = inversesqrt(_3575);
                        float _3579 = _3578 * _3572;
                        float _3580 = _3578 * _3573;
                        float _3581 = _3578 * _3574;
                        float _3582 = dot(vec3(_1021, _1024, _1027), vec3(_3579, _3580, _3581));
                        float _3587 = 1.0 - (_3575 * _3532.w);
                        float _5017 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3588 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                        float _3589 = sqrt(_3575) * _3551.w;
                        float _3592 = 1.39999997615814208984375 / (_3589 + 1.39999997615814208984375);
                        float _3593 = _3592 * _3592;
                        float _3596 = ((1.0 - _3593) * _3582) + _3593;
                        float _3599 = _3589 * _3589;
                        float _3603 = ((isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0))) * _3588) / ((_3599 * 0.699999988079071044921875) + 1.0);
                        float _3607 = (-0.0) - _2187;
                        float _3608 = (-0.0) - _2188;
                        float _3609 = (-0.0) - _2189;
                        float _3613 = inversesqrt(dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609)));
                        float _3614 = _3613 * _3607;
                        float _3615 = _3613 * _3608;
                        float _3616 = _3613 * _3609;
                        float _3623 = exp2(log2(1.0 / ((_3599 * 3.5) + 5.0)) * 0.25);
                        float _3624 = 1.0 - _1096;
                        float _3631 = sqrt(1.0 - ((1.0 - (_3624 * _3624)) * (1.0 - (_3623 * _3623))));
                        float _3632 = _3631 * _3631;
                        float _3633 = _3632 * _3632;
                        float _3634 = _3614 + _3579;
                        float _3635 = _3615 + _3580;
                        float _3636 = _3616 + _3581;
                        float _3640 = inversesqrt(dot(vec3(_3634, _3635, _3636), vec3(_3634, _3635, _3636)));
                        float _3644 = dot(vec3(_1021, _1024, _1027), vec3(_3614, _3615, _3616));
                        float _5033 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                        float _3647 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                        float _3648 = dot(vec3(_1021, _1024, _1027), vec3(_3640 * _3634, _3640 * _3635, _3640 * _3636));
                        float _5044 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                        float _3651 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                        float _3655 = ((_3651 * _3651) * (_3633 + (-1.0))) + 1.0;
                        float _3656 = _3592 * _3632;
                        float _3657 = _3656 * _3656;
                        float _3660 = ((1.0 - _3657) * _3582) + _3657;
                        float _5055 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                        float _3661 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
                        float _3662 = 1.0 - _3632;
                        float _3672 = (0.5 / (((_3661 * ((_3647 * _3662) + _3632)) + 9.9999999392252902907785028219223e-09) + (((_3661 * _3662) + _3632) * _3647))) * _3661;
                        float _5066 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                        float _3683 = (((_3633 * 3.1415927410125732421875) * (isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0)))) / ((_3655 * _3655) * ((_3599 * 2.1991131305694580078125) + 3.141590118408203125))) * _3588;
                        _3436 = (_3603 * _3551.x) + _3509;
                        _3437 = (_3603 * _3551.y) + _3510;
                        _3438 = (_3603 * _3551.z) + _3511;
                        _3433 = (_3683 * _3568.x) + _3506;
                        _3434 = (_3683 * _3568.y) + _3507;
                        _3435 = (_3683 * _3568.z) + _3508;
                        if (_3513 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3506 = _3433;
                            _3507 = _3434;
                            _3508 = _3435;
                            _3509 = _3436;
                            _3510 = _3437;
                            _3511 = _3438;
                            _3512 = _3513;
                        }
                    }
                    frontier_phi_71_pred = _3438;
                    frontier_phi_71_pred_1 = _3437;
                    frontier_phi_71_pred_2 = _3436;
                    frontier_phi_71_pred_3 = _3435;
                    frontier_phi_71_pred_4 = _3434;
                    frontier_phi_71_pred_5 = _3433;
                }
                _3219 = frontier_phi_71_pred;
                _3217 = frontier_phi_71_pred_1;
                _3215 = frontier_phi_71_pred_2;
                _3213 = frontier_phi_71_pred_3;
                _3211 = frontier_phi_71_pred_4;
                _3209 = frontier_phi_71_pred_5;
                uint _3368 = _3367 + 1u;
                if (_3368 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3361 = _3209;
                    _3362 = _3211;
                    _3363 = _3213;
                    _3364 = _3215;
                    _3365 = _3217;
                    _3366 = _3219;
                    _3367 = _3368;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3208 = _3209;
            _3210 = _3211;
            _3212 = _3213;
            _3214 = _3215;
            _3216 = _3217;
            _3218 = _3219;
        }
        uvec4 _3222 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3223 = _3222.z;
        uint _3225 = (_3223 >> 8u) & 15u;
        float _3329;
        float _3331;
        float _3333;
        float _3335;
        float _3337;
        float _3339;
        if (((4294967295u << _3225) & _3128) == 0u)
        {
            _3329 = _3208;
            _3331 = _3210;
            _3333 = _3212;
            _3335 = _3214;
            _3337 = _3216;
            _3339 = _3218;
        }
        else
        {
            float _3354 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
            float _3355 = _3354 * _2187;
            float _3356 = _3354 * _2188;
            float _3357 = _3354 * _2189;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3225 < ((_3223 >> 12u) & 15u))
            {
                float _3330;
                float _3332;
                float _3334;
                float _3336;
                float _3338;
                float _3340;
                float _3489 = _3208;
                float _3490 = _3210;
                float _3491 = _3212;
                float _3492 = _3214;
                float _3493 = _3216;
                float _3494 = _3218;
                uint _3495 = _3225;
                uint _3504;
                bool _3505;
                for (;;)
                {
                    _3504 = texelFetch(g_lightClassification, int((((_3122 << 5u) + (_3108 << 9u)) + (_3495 << 2u)) >> 2u)).x;
                    _3505 = _3504 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3505)
                    {
                        frontier_phi_82_pred = _3494;
                        frontier_phi_82_pred_1 = _3493;
                        frontier_phi_82_pred_2 = _3492;
                        frontier_phi_82_pred_3 = _3491;
                        frontier_phi_82_pred_4 = _3490;
                        frontier_phi_82_pred_5 = _3489;
                    }
                    else
                    {
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3991;
                        float _3992;
                        float _3993;
                        float _3994;
                        float _3995;
                        float _3996;
                        float _3710 = _3489;
                        float _3711 = _3490;
                        float _3712 = _3491;
                        float _3713 = _3492;
                        float _3714 = _3493;
                        float _3715 = _3494;
                        uint _3716 = _3504;
                        uint _3717;
                        vec4 _3742;
                        float _3743;
                        vec4 _3758;
                        vec3 _3770;
                        vec4 _3785;
                        vec4 _3800;
                        float _3847;
                        bool _3848;
                        for (;;)
                        {
                            uint _3727 = ((_3495 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3716));
                            _3717 = (_3716 + 4294967295u) & _3716;
                            uint _3729 = _3727 * 40u;
                            _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            _3743 = _3742.w;
                            uint _3745 = (_3727 * 40u) + 4u;
                            _3758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 3u)).x));
                            uint _3760 = (_3727 * 40u) + 8u;
                            _3770 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 2u)).x));
                            uint _3772 = (_3727 * 40u) + 16u;
                            _3785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 3u)).x));
                            uint _3787 = (_3727 * 40u) + 20u;
                            _3800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 3u)).x));
                            uint _3803 = (_3727 * 40u) + 24u;
                            vec4 _3816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 3u)).x));
                            uint _3822 = (_3727 * 40u) + 28u;
                            vec4 _3835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 3u)).x));
                            _3847 = fma(_2189, _3835.z, fma(_2188, _3835.y, _3835.x * _2187)) + _3835.w;
                            _3848 = !((fma(_2189, _3816.z, fma(_2188, _3816.y, _3816.x * _2187)) + _3816.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3848)
                            {
                                float _3875 = _3742.x - _2187;
                                float _3876 = _3742.y - _2188;
                                float _3877 = _3742.z - _2189;
                                float _3878 = dot(vec3(_3875, _3876, _3877), vec3(_3875, _3876, _3877));
                                float _3881 = inversesqrt(_3878);
                                float _3882 = _3881 * _3875;
                                float _3883 = _3881 * _3876;
                                float _3884 = _3881 * _3877;
                                float _3888 = 1.0 - (_3878 / (_3743 * _3743));
                                float _5077 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3889 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
                                float _3893 = sqrt(_3878) * _3758.w;
                                float _3895 = 1.39999997615814208984375 / (_3893 + 1.39999997615814208984375);
                                float _3896 = _3895 * _3895;
                                float _3899 = ((1.0 - _3896) * dot(vec3(_3882, _3883, _3884), vec3(_1021, _1024, _1027))) + _3896;
                                float _3902 = _3893 * _3893;
                                float _3906 = (fma(_2189, _3785.z, fma(_2188, _3785.y, _3785.x * _2187)) + _3785.w) / _3847;
                                float _3907 = (fma(_2189, _3800.z, fma(_2188, _3800.y, _3800.x * _2187)) + _3800.w) / _3847;
                                float _3911 = 1.0 - dot(vec2(_3906, _3907), vec2(_3906, _3907));
                                float _5093 = isnan(0.0) ? _3911 : (isnan(_3911) ? 0.0 : max(_3911, 0.0));
                                float _3912 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
                                float _3913 = _3912 * (((isnan(0.0) ? _3899 : (isnan(_3899) ? 0.0 : max(_3899, 0.0))) * _3889) / ((_3902 * 0.699999988079071044921875) + 1.0));
                                float _3925 = exp2(log2(1.0 / ((_3902 * 3.5) + 5.0)) * 0.25);
                                float _3926 = 1.0 - _1096;
                                float _3933 = sqrt(1.0 - ((1.0 - (_3926 * _3926)) * (1.0 - (_3925 * _3925))));
                                float _3934 = _3933 * _3933;
                                float _3935 = _3934 * _3934;
                                float _3936 = _3882 - _3355;
                                float _3937 = _3883 - _3356;
                                float _3938 = _3884 - _3357;
                                float _3942 = inversesqrt(dot(vec3(_3936, _3937, _3938), vec3(_3936, _3937, _3938)));
                                float _3946 = dot(vec3(_1021, _1024, _1027), vec3((-0.0) - _3355, (-0.0) - _3356, (-0.0) - _3357));
                                float _5104 = isnan(0.0) ? _3946 : (isnan(_3946) ? 0.0 : max(_3946, 0.0));
                                float _3949 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
                                float _3950 = dot(vec3(_1021, _1024, _1027), vec3(_3942 * _3936, _3942 * _3937, _3942 * _3938));
                                float _5115 = isnan(0.0) ? _3950 : (isnan(_3950) ? 0.0 : max(_3950, 0.0));
                                float _3953 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
                                float _3957 = ((_3953 * _3953) * (_3935 + (-1.0))) + 1.0;
                                float _3958 = _3895 * _3934;
                                float _3959 = _3958 * _3958;
                                float _3965 = ((1.0 - _3959) * dot(vec3(_1021, _1024, _1027), vec3(_3882, _3883, _3884))) + _3959;
                                float _5126 = isnan(0.0) ? _3965 : (isnan(_3965) ? 0.0 : max(_3965, 0.0));
                                float _3966 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
                                float _3967 = 1.0 - _3934;
                                float _3977 = (0.5 / (((_3966 * ((_3949 * _3967) + _3934)) + 9.9999999392252902907785028219223e-09) + (((_3966 * _3967) + _3934) * _3949))) * _3966;
                                float _5137 = isnan(0.0) ? _3977 : (isnan(_3977) ? 0.0 : max(_3977, 0.0));
                                float _3987 = (_3912 * _3889) * (((_3935 * 3.1415927410125732421875) * (isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0)))) / ((_3957 * _3957) * ((_3902 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3913 * _3758.z;
                                frontier_phi_88_pred_1 = _3913 * _3758.y;
                                frontier_phi_88_pred_2 = _3913 * _3758.x;
                                frontier_phi_88_pred_3 = _3987 * _3770.z;
                                frontier_phi_88_pred_4 = _3987 * _3770.y;
                                frontier_phi_88_pred_5 = _3987 * _3770.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3996 = frontier_phi_88_pred;
                            _3995 = frontier_phi_88_pred_1;
                            _3994 = frontier_phi_88_pred_2;
                            _3993 = frontier_phi_88_pred_3;
                            _3992 = frontier_phi_88_pred_4;
                            _3991 = frontier_phi_88_pred_5;
                            _3700 = _3994 + _3713;
                            _3701 = _3995 + _3714;
                            _3702 = _3996 + _3715;
                            _3697 = _3991 + _3710;
                            _3698 = _3992 + _3711;
                            _3699 = _3993 + _3712;
                            if (_3717 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3710 = _3697;
                                _3711 = _3698;
                                _3712 = _3699;
                                _3713 = _3700;
                                _3714 = _3701;
                                _3715 = _3702;
                                _3716 = _3717;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3702;
                        frontier_phi_82_pred_1 = _3701;
                        frontier_phi_82_pred_2 = _3700;
                        frontier_phi_82_pred_3 = _3699;
                        frontier_phi_82_pred_4 = _3698;
                        frontier_phi_82_pred_5 = _3697;
                    }
                    _3340 = frontier_phi_82_pred;
                    _3338 = frontier_phi_82_pred_1;
                    _3336 = frontier_phi_82_pred_2;
                    _3334 = frontier_phi_82_pred_3;
                    _3332 = frontier_phi_82_pred_4;
                    _3330 = frontier_phi_82_pred_5;
                    uint _3496 = _3495 + 1u;
                    if (_3496 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3489 = _3330;
                        _3490 = _3332;
                        _3491 = _3334;
                        _3492 = _3336;
                        _3493 = _3338;
                        _3494 = _3340;
                        _3495 = _3496;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3336;
                frontier_phi_63_64_ladder_1 = _3340;
                frontier_phi_63_64_ladder_2 = _3338;
                frontier_phi_63_64_ladder_3 = _3334;
                frontier_phi_63_64_ladder_4 = _3332;
                frontier_phi_63_64_ladder_5 = _3330;
            }
            else
            {
                frontier_phi_63_64_ladder = _3214;
                frontier_phi_63_64_ladder_1 = _3218;
                frontier_phi_63_64_ladder_2 = _3216;
                frontier_phi_63_64_ladder_3 = _3212;
                frontier_phi_63_64_ladder_4 = _3210;
                frontier_phi_63_64_ladder_5 = _3208;
            }
            _3329 = frontier_phi_63_64_ladder_5;
            _3331 = frontier_phi_63_64_ladder_4;
            _3333 = frontier_phi_63_64_ladder_3;
            _3335 = frontier_phi_63_64_ladder;
            _3337 = frontier_phi_63_64_ladder_2;
            _3339 = frontier_phi_63_64_ladder_1;
        }
        float _3344 = isnan(1.0) ? _1080 : (isnan(_1080) ? 1.0 : min(_1080, 1.0));
        _3141 = (_3344 * _3335) + _2653;
        _3143 = (_3344 * _3337) + _2655;
        _3145 = (_3344 * _3339) + _2657;
        _3147 = ((_3329 * _1065) * _3344) + _2991;
        _3149 = ((_3331 * _1067) * _3344) + _2993;
        _3151 = ((_3333 * _1068) * _3344) + _2995;
    }
    else
    {
        _3141 = _2653;
        _3143 = _2655;
        _3145 = _2657;
        _3147 = _2991;
        _3149 = _2993;
        _3151 = _2995;
    }
    float _5153 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _5164 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _5175 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _3168 = ((isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0))) * (_3141 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1080))) + ((_3147 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1921)) * cbPerFrame._m0[3u].x);
    float _3169 = ((isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0))) * (_3143 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1080))) + ((_3149 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1921)) * cbPerFrame._m0[3u].x);
    float _3170 = ((isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0))) * (_3145 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1080))) + ((_3151 + ((isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0))) * _1921)) * cbPerFrame._m0[3u].x);
    uint _3171 = _1040 + 6u;
    float _3179 = _1002 / cbSceneParam._m0[86u].x;
    float _3180 = _1003 / cbSceneParam._m0[86u].y;
    vec4 _3194 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3179, _3180, (log2((isnan(cbSceneParam._m0[77u].w) ? _925 : (isnan(_925) ? cbSceneParam._m0[77u].w : min(_925, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3196 = _3194.x;
    float _3197 = _3194.y;
    float _3198 = _3194.z;
    float _3199 = _3194.w;
    float _3271;
    float _3273;
    float _3275;
    float _3277;
    if (_925 > cbSceneParam._m0[78u].w)
    {
        float _3233 = isnan(_925) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _925 : min(cbSceneParam._m0[80u].w, _925));
        float _3234 = _3233 / _925;
        float _3245 = _3234 * _975;
        float _3246 = _976 * _3234;
        float _3247 = (-0.0) - _3246;
        float _3249 = _3234 * _977;
        float _3251 = (cbSceneParam._m0[77u].w * _3247) / _3233;
        float _3252 = _3251 + cbSceneParam._m0[79u].w;
        float _3253 = cbSceneParam._m0[79u].w - _3246;
        float _3259 = sqrt(((_3245 * _3245) + (_3246 * _3246)) + (_3249 * _3249));
        float _3262 = (1.0 - (cbSceneParam._m0[77u].w / _3233)) * _3259;
        float _3267 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3269 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3446;
        if (abs((_3247 - _3251) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3446 = ((((_3252 > 0.0) ? exp2(_3267 * _3252) : (2.0 - exp2(_3269 * _3252))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3262;
        }
        else
        {
            float _3390 = 1.0 / cbSceneParam._m0[80u].x;
            float _3391 = isnan(_3253) ? _3252 : (isnan(_3252) ? _3253 : max(_3252, _3253));
            float _3392 = isnan(_3253) ? _3252 : (isnan(_3252) ? _3253 : min(_3252, _3253));
            float _3401 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : min(_3391, 0.0));
            float _3402 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : min(_3392, 0.0));
            _3446 = ((abs(_3259 / _3247) * cbSceneParam._m0[80u].y) * ((((_3401 - _3402) * 2.0) - ((exp2(_3267 * (isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0)))) - exp2(_3267 * (isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0))))) * _3390)) - ((exp2(_3269 * _3401) - exp2(_3269 * _3402)) * _3390))) + (_3262 * cbSceneParam._m0[80u].z);
        }
        vec4 _3448 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3179, _3180, 1.0), 0.0);
        float _3457 = exp2((_3446 * (-1.44269502162933349609375)) * (1.0 - _3448.w));
        float _3458 = log2(_3457);
        float _3474 = log2(_3199);
        _3271 = (exp2(_3474 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3458 * cbSceneParam._m0[78u].x)) * _3448.x) / cbSceneParam._m0[78u].x)) + _3196;
        _3273 = (exp2(_3474 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3458 * cbSceneParam._m0[78u].y)) * _3448.y) / cbSceneParam._m0[78u].y)) + _3197;
        _3275 = (exp2(_3474 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3458 * cbSceneParam._m0[78u].z)) * _3448.z) / cbSceneParam._m0[78u].z)) + _3198;
        _3277 = _3457 * _3199;
    }
    else
    {
        _3271 = _3196;
        _3273 = _3197;
        _3275 = _3198;
        _3277 = _3199;
    }
    bool _3484;
    vec4 _3287;
    vec4 _3309;
    float _3311;
    float _3315;
    float _3316;
    float _3317;
    float _3318;
    bool _3328;
    for (;;)
    {
        _3287 = cbMatDynParam._m0[0u];
        float _3289 = roundEven(_3287.y);
        bool _3290 = _3289 == 3.0;
        float _3291 = log2(_3277);
        float _3298 = exp2(_3291 * cbSceneParam._m0[78u].x) * _3168;
        float _3299 = exp2(_3291 * cbSceneParam._m0[78u].y) * _3169;
        float _3300 = exp2(_3291 * cbSceneParam._m0[78u].z) * _3170;
        float _3307 = _991 + (-0.5);
        _3309 = cbMtdParam._m0[1u];
        _3311 = _3309.y * _3307;
        float _3314 = (_3289 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3315 = _3314 * (_3290 ? _3298 : (_3298 + (cbSceneParam._m0[72u].w * _3271)));
        _3316 = _3314 * (_3290 ? _3299 : (_3299 + (cbSceneParam._m0[72u].w * _3273)));
        _3317 = _3314 * (_3290 ? _3300 : (_3300 + (cbSceneParam._m0[72u].w * _3275)));
        _3318 = _3307 * 0.999000012874603271484375;
        _3328 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3328)
        {
            if ((cbInstanceData._m0[_1040 + 7u].x + _3318) < 0.5)
            {
                _3484 = true;
                break;
            }
        }
        uint _3425 = _1041 + uint(_3287.w);
        if ((cbInstanceData._m0[_3425].w < 1.0) && ((cbInstanceData._m0[_3425].w + _3318) < 0.5))
        {
            _3484 = true;
            break;
        }
        if ((_3311 + 1.0) < _3309.x)
        {
            _3484 = true;
            break;
        }
        _3484 = false;
        break;
    }
    float _3688;
    if (_3484)
    {
        discard_state = true;
        _3688 = 0.0;
    }
    else
    {
        _3688 = cbInstanceData._m0[_3171].w;
    }
    SV_Target.x = _3315;
    SV_Target.y = _3316;
    SV_Target.z = _3317;
    SV_Target.w = _3688;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3171].w;
    discard_exit();
}


