#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1339;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _264.x * cbMtdParam._m0[10u].x;
    float _271 = _264.y * cbMtdParam._m0[10u].y;
    float _272 = _264.z * cbMtdParam._m0[10u].z;
    vec4 _290 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _340 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _350 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _340)) + 1.0;
    float _3950 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _358 = (_351 * ((_290.x * cbMtdParam._m0[11u].x) - _270)) + _270;
    float _359 = (_351 * ((_290.y * cbMtdParam._m0[11u].y) - _271)) + _271;
    float _360 = (_351 * ((_290.z * cbMtdParam._m0[11u].z) - _272)) + _272;
    vec4 _378 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _409 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _340)) + 1.0;
    float _3961 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _417 = (_410 * ((_378.x * cbMtdParam._m0[12u].x) - _358)) + _358;
    float _418 = (_410 * ((_378.y * cbMtdParam._m0[12u].y) - _359)) + _359;
    float _419 = (_410 * ((_378.z * cbMtdParam._m0[12u].z) - _360)) + _360;
    vec4 _437 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _462 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _340)) + 1.0;
    float _3972 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    vec4 _491 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _499 = ((((_463 * ((_437.x * cbMtdParam._m0[13u].x) - _417)) + _417) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _491.x;
    float _502 = ((((_463 * ((_437.y * cbMtdParam._m0[13u].y) - _418)) + _418) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _491.y;
    float _505 = ((((_463 * ((_437.z * cbMtdParam._m0[13u].z) - _419)) + _419) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _491.z;
    vec4 _525 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _554 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3983 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _562 = (_555 * ((_525.x * cbMtdParam._m0[14u].x) - _499)) + _499;
    float _563 = (_555 * ((_525.y * cbMtdParam._m0[14u].y) - _502)) + _502;
    float _564 = (_555 * ((_525.z * cbMtdParam._m0[14u].z) - _505)) + _505;
    vec4 _577 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _579 = _577.x;
    float _597 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _579) * _351) + _579;
    float _614 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _597) * _410) + _597;
    float _631 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _614) * _463) + _614;
    float _633 = _631 - (_631 * TEXCOORD_5.x);
    vec4 _649 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _671 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _673 = _671.x;
    float _674 = _671.y;
    float _677 = cbMtdParam._m0[18u].y * _671.z;
    vec4 _689 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _698 = (((cbMtdParam._m0[18u].x * _689.z) - _677) * _351) + _677;
    vec4 _711 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _722 = (((cbMtdParam._m0[17u].w * _711.z) - _698) * _410) + _698;
    vec4 _735 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _744 = (((cbMtdParam._m0[17u].z * _735.z) - _722) * _463) + _722;
    float _749 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_649.z * cbMtdParam._m0[18u].z) - _744)) + _744;
    float _754 = ((_689.x - _673) * _351) + _673;
    float _755 = ((_689.y - _674) * _351) + _674;
    float _760 = ((_711.x - _754) * _410) + _754;
    float _761 = ((_711.y - _755) * _410) + _755;
    float _770 = ((((_735.x - _760) * _463) + _760) * 2.0) + (-1.0);
    float _771 = ((((_735.y - _761) * _463) + _761) * 2.0) + (-1.0);
    float _772 = dot(vec2(_770, _771), vec2(_770, _771));
    float _3994 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _777 = sqrt(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))));
    float _783 = ((((_649.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _770;
    float _784 = ((((_649.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _771;
    float _787 = fma(_777, _234 * NORMAL.x, fma(_784, _241 * TANGENT.x, (_227 * _219) * _783));
    float _790 = fma(_777, _234 * NORMAL.y, fma(_784, _241 * TANGENT.y, (_227 * _220) * _783));
    float _793 = fma(_777, _234 * NORMAL.z, fma(_784, _241 * TANGENT.z, (_227 * _221) * _783));
    float _797 = inversesqrt(dot(vec3(_787, _790, _793), vec3(_787, _790, _793)));
    float _798 = _797 * _787;
    float _799 = _797 * _790;
    float _800 = _797 * _793;
    float _4005 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _801 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4027 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4038 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4049 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _805 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _821 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _871 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _861);
    float _872 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _861);
    float _873 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _861);
    float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
    float _878 = _871 * _877;
    float _879 = _872 * _877;
    float _880 = _873 * _877;
    float _886 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _887 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _905 = fma(_800, cbSceneParam._m0[5u].z, fma(_799, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _798));
    float _908 = fma(_800, cbSceneParam._m0[6u].z, fma(_799, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _798));
    float _911 = fma(_800, cbSceneParam._m0[7u].z, fma(_799, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _798));
    uint _924 = uint(roundEven(NORMAL.w)) * 13u;
    uint _926 = (_924 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _932 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_926].x;
    float _933 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_926].y;
    float _934 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_926].z;
    float _4060 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _938 = 1.0 - _805;
    float _939 = _935 * _938;
    float _940 = _936 * _938;
    float _941 = _937 * _938;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _805;
    float _947 = (_936 + (-0.039999999105930328369140625)) * _805;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _805;
    float _949 = _946 + 0.039999999105930328369140625;
    float _951 = _947 + 0.039999999105930328369140625;
    float _952 = _948 + 0.039999999105930328369140625;
    vec4 _961 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _886, cbSceneParam._m0[86u].y * _887));
    float _964 = _961.x * TEXCOORD_5.w;
    float _965 = dot(vec3(_798, _799, _800), vec3(_878, _879, _880));
    float _968 = _965 * 2.0;
    float _972 = (_968 * _798) - _878;
    float _973 = (_968 * _799) - _879;
    float _974 = (_968 * _800) - _880;
    float _978 = abs(dot(vec3(_878, _879, _880), vec3(_798, _799, _800)));
    float _4093 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _980 = sqrt(_801);
    float _993 = exp2((_980 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_980 * 3.0));
    float _999 = (1.0 - _993) * ((_980 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1000 = _993 * _980;
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1338;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1063 = fma(_1036, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028));
        float _1067 = fma(_1036, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028));
        float _1071 = fma(_1036, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028));
        float _1096 = _1028 + _798;
        float _1097 = _1032 + _799;
        float _1098 = _1036 + _800;
        float _1108 = fma(_1098, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1096)) - _1063;
        float _1109 = fma(_1098, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1096)) - _1067;
        float _1110 = fma(_1098, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1096)) - _1071;
        float _1114 = inversesqrt(dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110)));
        float _1127 = ((_1114 * _1108) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1063 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1114 * _1109) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1067 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1114 * _1110) / cbModelParam._m0[34u].z) + ((((((_1071 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        float _1166 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1132.x + (-0.5));
        float _1168 = _1166 * (_1132.y + (-0.5));
        float _1169 = _1166 * (_1132.z + (-0.5));
        float _1176 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1139.x + (-0.5));
        float _1178 = _1176 * (_1139.y + (-0.5));
        float _1179 = _1176 * (_1139.z + (-0.5));
        float _1186 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1146.x + (-0.5));
        float _1188 = _1186 * (_1146.y + (-0.5));
        float _1189 = _1186 * (_1146.z + (-0.5));
        float _1196 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1153.x + (-0.5));
        float _1198 = _1196 * (_1153.y + (-0.5));
        float _1199 = _1196 * (_1153.z + (-0.5));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = _1167 * 0.5;
        float _1204 = _1177 * 0.5;
        float _1205 = _1187 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1220 = (dot(vec3(_798, _799, _800), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1230 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _4141 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1232 + 1.0))) + _1237) * _1200;
        float _1247 = _1168 * 0.5;
        float _1248 = _1178 * 0.5;
        float _1249 = _1188 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_798, _799, _800), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4174 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1274 + 1.0))) + _1279) * _1201;
        float _1289 = _1169 * 0.5;
        float _1290 = _1179 * 0.5;
        float _1291 = _1189 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_798, _799, _800), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4207 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1316 + 1.0))) + _1321) * _1202;
        _1338 = _1169;
        _1340 = _1168;
        _1341 = _1167;
        _1342 = _1179;
        _1343 = _1178;
        _1344 = _1177;
        _1345 = _1189;
        _1346 = _1188;
        _1347 = _1187;
        _1348 = _1202;
        _1349 = _1201;
        _1350 = _1200;
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
    }
    else
    {
        _1338 = _1339;
        _1340 = _1339;
        _1341 = _1339;
        _1342 = _1339;
        _1343 = _1339;
        _1344 = _1339;
        _1345 = _1339;
        _1346 = _1339;
        _1347 = _1339;
        _1348 = _1339;
        _1349 = _1339;
        _1350 = _1339;
        _1351 = 0.0;
        _1352 = 0.0;
        _1353 = 0.0;
    }
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1379 = fma(_1036, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028));
        float _1383 = fma(_1036, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028));
        float _1387 = fma(_1036, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028));
        float _1410 = _1028 + _798;
        float _1411 = _1032 + _799;
        float _1412 = _1036 + _800;
        float _1422 = fma(_1412, cbModelParam._m0[30u].z, fma(_1411, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1410)) - _1379;
        float _1423 = fma(_1412, cbModelParam._m0[31u].z, fma(_1411, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1410)) - _1383;
        float _1424 = fma(_1412, cbModelParam._m0[32u].z, fma(_1411, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1410)) - _1387;
        float _1428 = inversesqrt(dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424)));
        float _1441 = ((_1428 * _1422) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1379 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1428 * _1423) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1383 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1428 * _1424) / cbModelParam._m0[35u].z) + ((((((_1387 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        float _1478 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1445.x + (-0.5));
        float _1480 = _1478 * (_1445.y + (-0.5));
        float _1481 = _1478 * (_1445.z + (-0.5));
        float _1488 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1452.x + (-0.5));
        float _1490 = _1488 * (_1452.y + (-0.5));
        float _1491 = _1488 * (_1452.z + (-0.5));
        float _1498 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1459.x + (-0.5));
        float _1500 = _1498 * (_1459.y + (-0.5));
        float _1501 = _1498 * (_1459.z + (-0.5));
        float _1508 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1466.x + (-0.5));
        float _1510 = _1508 * (_1466.y + (-0.5));
        float _1511 = _1508 * (_1466.z + (-0.5));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = _1479 * 0.5;
        float _1516 = _1489 * 0.5;
        float _1517 = _1499 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_798, _799, _800), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4270 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1542 + 1.0))) + _1547) * _1512;
        float _1557 = _1480 * 0.5;
        float _1558 = _1490 * 0.5;
        float _1559 = _1500 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_798, _799, _800), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4303 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1584 + 1.0))) + _1589) * _1513;
        float _1599 = _1481 * 0.5;
        float _1600 = _1491 * 0.5;
        float _1601 = _1501 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_798, _799, _800), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4336 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1626 + 1.0))) + _1631) * _1514;
        _1648 = _1481;
        _1649 = _1480;
        _1650 = _1479;
        _1651 = _1491;
        _1652 = _1490;
        _1653 = _1489;
        _1654 = _1501;
        _1655 = _1500;
        _1656 = _1499;
        _1657 = _1514;
        _1658 = _1513;
        _1659 = _1512;
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
    }
    else
    {
        _1648 = _1339;
        _1649 = _1339;
        _1650 = _1339;
        _1651 = _1339;
        _1652 = _1339;
        _1653 = _1339;
        _1654 = _1339;
        _1655 = _1339;
        _1656 = _1339;
        _1657 = _1339;
        _1658 = _1339;
        _1659 = _1339;
        _1660 = 0.0;
        _1661 = 0.0;
        _1662 = 0.0;
    }
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1351)) + _1351;
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1352)) + _1352;
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1353)) + _1353;
    float _1695 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1673, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1698 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1673, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1701 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1673, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1672));
    float _1716 = _972 * 0.5;
    float _1717 = _973 * 0.5;
    float _1718 = _974 * 0.5;
    float _1719 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1722 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1725 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1759;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1732 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1338, _1342, _1345, _1348));
        float _1736 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1340, _1343, _1346, _1349));
        float _1740 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1341, _1344, _1347, _1350));
        float _1747 = dot(vec4(cbModelParam._m0[39u]), vec4(_1716, _1717, _1718, 1.0));
        _1759 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1759 = 1.0;
    }
    float _1770;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1761 = dot(vec4(cbModelParam._m0[40u]), vec4(_1716, _1717, _1718, 1.0));
        _1770 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1770 = 1.0;
    }
    float _1774 = (_1770 * cbModelParam._m0[1u].x) + (_1759 * (1.0 - cbModelParam._m0[1u].x));
    float _1784 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _801);
    float _1785 = isnan(_1784) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1784 : min(cbModelParam._m0[25u].z, _1784));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1833 = fma(_1036, cbModelParam._m0[13u].z, fma(_1032, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028)) + cbModelParam._m0[13u].w;
        float _1837 = fma(_1036, cbModelParam._m0[14u].z, fma(_1032, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028)) + cbModelParam._m0[14u].w;
        float _1841 = fma(_1036, cbModelParam._m0[15u].z, fma(_1032, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028)) + cbModelParam._m0[15u].w;
        float _1844 = fma(_974, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _972));
        float _1847 = fma(_974, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _972));
        float _1850 = fma(_974, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _972));
        float _1878;
        if (_1844 > 0.0)
        {
            _1878 = abs((1.0 - _1833) / _1844);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1833 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1878 = frontier_phi_14_12_ladder;
        }
        float _2049;
        if (_1847 > 0.0)
        {
            _2049 = abs((1.0 - _1837) / _1847);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1837 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2049 = frontier_phi_23_19_ladder;
        }
        float _2344;
        if (_1850 > 0.0)
        {
            _2344 = abs((1.0 - _1841) / _1850);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1841 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2344 = frontier_phi_35_30_ladder;
        }
        float _2346 = isnan(_2049) ? _1878 : (isnan(_1878) ? _2049 : min(_1878, _2049));
        float _2347 = isnan(_2344) ? _2346 : (isnan(_2346) ? _2344 : min(_2346, _2344));
        float _2351 = (_2347 * _1844) + _1833;
        float _2352 = (_2347 * _1847) + _1837;
        float _2353 = (_2347 * _1850) + _1841;
        float _2354 = _2347 * 9.9999997473787516355514526367188e-05;
        float _2356 = (-1.0) - _2354;
        float _2358 = _2354 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2353 > _2358) || ((_2353 < _2356) || ((_2352 > _2358) || ((_2352 < _2356) || ((_2351 < _2356) || (_2351 > _2358))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2353, cbModelParam._m0[9u].z, fma(_2352, cbModelParam._m0[9u].y, _2351 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2353, cbModelParam._m0[10u].z, fma(_2352, cbModelParam._m0[10u].y, _2351 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2353, cbModelParam._m0[11u].z, fma(_2352, cbModelParam._m0[11u].y, _2351 * cbModelParam._m0[11u].x))), _1785);
            frontier_phi_13_35_ladder = _2498.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2498.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2498.x * cbModelParam._m0[1u].y;
        }
        _1866 = frontier_phi_13_35_ladder_2;
        _1868 = frontier_phi_13_35_ladder_1;
        _1870 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_972, _973, _974), _1785);
        _1866 = _1854.x * cbModelParam._m0[1u].y;
        _1868 = _1854.y * cbModelParam._m0[1u].y;
        _1870 = _1854.z * cbModelParam._m0[1u].y;
    }
    float _1874 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _801);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1874 : min(cbModelParam._m0[25u].w, _1874));
    float _1964;
    float _1966;
    float _1968;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1928 = fma(_1036, cbModelParam._m0[21u].z, fma(_1032, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028)) + cbModelParam._m0[21u].w;
        float _1932 = fma(_1036, cbModelParam._m0[22u].z, fma(_1032, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028)) + cbModelParam._m0[22u].w;
        float _1936 = fma(_1036, cbModelParam._m0[23u].z, fma(_1032, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028)) + cbModelParam._m0[23u].w;
        float _1939 = fma(_974, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _972));
        float _1942 = fma(_974, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _972));
        float _1945 = fma(_974, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _972));
        float _2054;
        if (_1939 > 0.0)
        {
            _2054 = abs((1.0 - _1928) / _1939);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1928 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2054 = frontier_phi_25_21_ladder;
        }
        float _2371;
        if (_1942 > 0.0)
        {
            _2371 = abs((1.0 - _1932) / _1942);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1932 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2371 = frontier_phi_37_32_ladder;
        }
        float _2709;
        if (_1945 > 0.0)
        {
            _2709 = abs((1.0 - _1936) / _1945);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1936 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2709 = frontier_phi_47_44_ladder;
        }
        float _2711 = isnan(_2371) ? _2054 : (isnan(_2054) ? _2371 : min(_2054, _2371));
        float _2712 = isnan(_2709) ? _2711 : (isnan(_2711) ? _2709 : min(_2711, _2709));
        float _2716 = (_2712 * _1939) + _1928;
        float _2717 = (_2712 * _1942) + _1932;
        float _2718 = (_2712 * _1945) + _1936;
        float _2719 = _2712 * 9.9999997473787516355514526367188e-05;
        float _2720 = (-1.0) - _2719;
        float _2722 = _2719 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2718 > _2722) || ((_2718 < _2720) || ((_2717 > _2722) || ((_2717 < _2720) || ((_2716 < _2720) || (_2716 > _2722))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2718, cbModelParam._m0[17u].z, fma(_2717, cbModelParam._m0[17u].y, _2716 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2718, cbModelParam._m0[18u].z, fma(_2717, cbModelParam._m0[18u].y, _2716 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2718, cbModelParam._m0[19u].z, fma(_2717, cbModelParam._m0[19u].y, _2716 * cbModelParam._m0[19u].x))), _1875);
            frontier_phi_22_47_ladder = _2840.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2840.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2840.x * cbModelParam._m0[1u].z;
        }
        _1964 = frontier_phi_22_47_ladder_2;
        _1966 = frontier_phi_22_47_ladder_1;
        _1968 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1948 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_972, _973, _974), _1875);
        _1964 = _1948.x * cbModelParam._m0[1u].z;
        _1966 = _1948.y * cbModelParam._m0[1u].z;
        _1968 = _1948.z * cbModelParam._m0[1u].z;
    }
    float _1981 = (((_999 * _949) + _1000) * _964) * ((cbModelParam._m0[1u].w * (_1964 - _1866)) + _1866);
    float _1983 = (((_999 * _951) + _1000) * _964) * ((cbModelParam._m0[1u].w * (_1966 - _1868)) + _1868);
    float _1985 = (((_999 * _952) + _1000) * _964) * ((cbModelParam._m0[1u].w * (_1968 - _1870)) + _1870);
    float _1988 = fma(_1985, cbSceneParam._m0[89u].z, fma(_1983, cbSceneParam._m0[89u].y, _1981 * cbSceneParam._m0[89u].x));
    float _1991 = fma(_1985, cbSceneParam._m0[90u].z, fma(_1983, cbSceneParam._m0[90u].y, _1981 * cbSceneParam._m0[90u].x));
    float _1994 = fma(_1985, cbSceneParam._m0[91u].z, fma(_1983, cbSceneParam._m0[91u].y, _1981 * cbSceneParam._m0[91u].x));
    float _2028 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2041 = _2028 / _2040;
    float _2042 = _2032 / _2040;
    float _2043 = _2036 / _2040;
    float _2190;
    float _2191;
    float _2192;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2070 = ((uint(_2043 > cbSceneParam._m0[59u].y) + uint(_2043 > cbSceneParam._m0[59u].x)) + uint(_2043 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2071 = _2070 + 43u;
        uint _2079 = _2070 + 44u;
        uint _2087 = _2070 + 45u;
        uint _2095 = _2070 + 46u;
        float _2106 = fma(_2040, cbSceneParam._m0[_2071].w, fma(_2036, cbSceneParam._m0[_2071].z, fma(_2032, cbSceneParam._m0[_2071].y, _2028 * cbSceneParam._m0[_2071].x)));
        float _2110 = fma(_2040, cbSceneParam._m0[_2079].w, fma(_2036, cbSceneParam._m0[_2079].z, fma(_2032, cbSceneParam._m0[_2079].y, _2028 * cbSceneParam._m0[_2079].x)));
        float _2118 = fma(_2040, cbSceneParam._m0[_2095].w, fma(_2036, cbSceneParam._m0[_2095].z, fma(_2032, cbSceneParam._m0[_2095].y, _2028 * cbSceneParam._m0[_2095].x)));
        float _2123 = cbSceneParam._m0[33u].z * _2118;
        float _2125 = cbSceneParam._m0[33u].w * _2118;
        float _2128 = fma(_2040, cbSceneParam._m0[_2087].w, fma(_2036, cbSceneParam._m0[_2087].z, fma(_2032, cbSceneParam._m0[_2087].y, _2028 * cbSceneParam._m0[_2087].x))) / _2118;
        float _2176 = (cbSceneParam._m0[33u].x - sqrt(((_2042 * _2042) + (_2041 * _2041)) + (_2043 * _2043))) * cbSceneParam._m0[33u].y;
        float _4462 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2183 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2123 + _2106) / _2118, (_2125 + _2110) / _2118), _2128), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2125 + _2106) / _2118, (_2110 - _2123) / _2118), _2128), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2106 - _2123) / _2118, (_2110 - _2125) / _2118), _2128), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2106 - _2125) / _2118, (_2123 + _2110) / _2118), _2128), 0.0)).x), vec4(0.25)));
        _2190 = 1.0 - (_2183 * cbSceneParam._m0[34u].x);
        _2191 = 1.0 - (_2183 * cbSceneParam._m0[34u].y);
        _2192 = 1.0 - (_2183 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2190 = 1.0;
        _2191 = 1.0;
        _2192 = 1.0;
    }
    float _2256;
    float _2258;
    float _2260;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2244 = fma(_2040, cbSceneParam._m0[63u].w, fma(_2036, cbSceneParam._m0[63u].z, fma(_2032, cbSceneParam._m0[63u].y, _2028 * cbSceneParam._m0[63u].x)));
        float _2245 = fma(_2040, cbSceneParam._m0[60u].w, fma(_2036, cbSceneParam._m0[60u].z, fma(_2032, cbSceneParam._m0[60u].y, _2028 * cbSceneParam._m0[60u].x))) / _2244;
        float _2246 = fma(_2040, cbSceneParam._m0[61u].w, fma(_2036, cbSceneParam._m0[61u].z, fma(_2032, cbSceneParam._m0[61u].y, _2028 * cbSceneParam._m0[61u].x))) / _2244;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2245 >= cbSceneParam._m0[64u].x) && (_2246 >= cbSceneParam._m0[64u].y)) && (_2245 <= cbSceneParam._m0[64u].z)) && (_2246 <= cbSceneParam._m0[64u].w))
        {
            float _2384 = fma(_2040, cbSceneParam._m0[62u].w, fma(_2036, cbSceneParam._m0[62u].z, fma(_2032, cbSceneParam._m0[62u].y, _2028 * cbSceneParam._m0[62u].x))) / _2244;
            float _2388 = isnan(cbSceneParam._m0[41u].w) ? _2384 : (isnan(_2384) ? cbSceneParam._m0[41u].w : max(_2384, cbSceneParam._m0[41u].w));
            float _2431 = (cbSceneParam._m0[33u].x - sqrt(((_2042 * _2042) + (_2041 * _2041)) + (_2043 * _2043))) * cbSceneParam._m0[33u].y;
            float _4478 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
            float _2438 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2245, cbSceneParam._m0[33u].w + _2246), _2388), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2245, _2246 - cbSceneParam._m0[33u].z), _2388), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2245 - cbSceneParam._m0[33u].z, _2246 - cbSceneParam._m0[33u].w), _2388), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2245 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2246), _2388), 0.0)).x), vec4(0.25)));
            float _2442 = 1.0 - (_2438 * cbSceneParam._m0[34u].x);
            float _2443 = 1.0 - (_2438 * cbSceneParam._m0[34u].y);
            float _2444 = 1.0 - (_2438 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2444) ? _2192 : (isnan(_2192) ? _2444 : min(_2192, _2444));
            frontier_phi_34_33_ladder_1 = isnan(_2443) ? _2191 : (isnan(_2191) ? _2443 : min(_2191, _2443));
            frontier_phi_34_33_ladder_2 = isnan(_2442) ? _2190 : (isnan(_2190) ? _2442 : min(_2190, _2442));
        }
        else
        {
            frontier_phi_34_33_ladder = _2192;
            frontier_phi_34_33_ladder_1 = _2191;
            frontier_phi_34_33_ladder_2 = _2190;
        }
        _2256 = frontier_phi_34_33_ladder_2;
        _2258 = frontier_phi_34_33_ladder_1;
        _2260 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2256 = _2190;
        _2258 = _2191;
        _2260 = _2192;
    }
    uvec4 _2265 = floatBitsToUint(cbInstanceData._m0[_924 + 5u]);
    uint _2267 = _2265.x * 14u;
    uint _2268 = _2267 + 13u;
    float _2275 = _964 + (-1.0);
    float _2280 = (cbLight._m0[_2268].x * _2275) + 1.0;
    float _2281 = (cbLight._m0[_2268].y * _2275) + 1.0;
    float _2282 = (cbLight._m0[_2268].z * _2275) + 1.0;
    float _2283 = (cbLight._m0[_2268].w * _2275) + 1.0;
    uint _2284 = _2267 + 5u;
    float _2290 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
    uint _2294 = _2267 + 4u;
    float _2303 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
    uint _2307 = _2267 | 1u;
    float _2318 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_798, _799, _800));
    float _2321 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_798, _799, _800));
    float _4514 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _4525 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2326 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * 0.3183098733425140380859375;
    float _2328 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * 0.3183098733425140380859375;
    float _2335 = ((cbLight._m0[_2284].x * _2290) * _2328) + (((cbLight._m0[_2294].x * _2256) * _2303) * _2326);
    float _2336 = ((_2290 * cbLight._m0[_2284].y) * _2328) + (((cbLight._m0[_2294].y * _2258) * _2303) * _2326);
    float _2337 = ((_2290 * cbLight._m0[_2284].z) * _2328) + (((cbLight._m0[_2294].z * _2260) * _2303) * _2326);
    uvec4 _2341 = floatBitsToUint(cbLight._m0[_2267 + 12u]);
    bool _2343 = _2341.x == 0u;
    float _2445;
    float _2447;
    float _2449;
    if (_2343)
    {
        _2445 = _2335;
        _2447 = _2336;
        _2449 = _2337;
    }
    else
    {
        uint _2453 = _2267 + 6u;
        float _2469 = (dot(vec3(cbLight._m0[_2267 + 2u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2470 = _2469 * _2469;
        float _4536 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2471 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2472 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2445 = (((cbLight._m0[_2453].x * 0.3183098733425140380859375) * _2471) * _2472) + _2335;
        _2447 = (((cbLight._m0[_2453].y * 0.3183098733425140380859375) * _2471) * _2472) + _2336;
        _2449 = (((cbLight._m0[_2453].z * 0.3183098733425140380859375) * _2471) * _2472) + _2337;
    }
    bool _2452 = _2341.y == 0u;
    float _2507;
    float _2509;
    float _2511;
    if (_2452)
    {
        _2507 = _2445;
        _2509 = _2447;
        _2511 = _2449;
    }
    else
    {
        uint _2680 = _2267 + 7u;
        float _2696 = (dot(vec3(cbLight._m0[_2267 + 3u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2697 = _2696 * _2696;
        float _4552 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2698 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2699 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2507 = (((cbLight._m0[_2680].x * 0.3183098733425140380859375) * _2698) * _2699) + _2445;
        _2509 = (((cbLight._m0[_2680].y * 0.3183098733425140380859375) * _2698) * _2699) + _2447;
        _2511 = (((cbLight._m0[_2680].z * 0.3183098733425140380859375) * _2698) * _2699) + _2449;
    }
    uint _2514 = _2267 + 8u;
    float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _801) * 0.949999988079071044921875);
    float _2528 = _2527 * _2527;
    float _2529 = cbLight._m0[_2267].x + _878;
    float _2530 = cbLight._m0[_2267].y + _879;
    float _2531 = cbLight._m0[_2267].z + _880;
    float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
    float _2536 = _2535 * _2529;
    float _2537 = _2535 * _2530;
    float _2538 = _2535 * _2531;
    float _2539 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2267].xyz));
    float _4568 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2542 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _4579 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _2543 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2544 = dot(vec3(_798, _799, _800), vec3(_2536, _2537, _2538));
    float _4590 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2548 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2536, _2537, _2538));
    float _4601 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2552 = _2528 * _2528;
    float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
    float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) * 5.0);
    float _2565 = 0.959999978542327880859375 - _946;
    float _2567 = 0.959999978542327880859375 - _947;
    float _2568 = 0.959999978542327880859375 - _948;
    float _2575 = 1.0 - _2528;
    float _2586 = (0.5 / (((_2543 * ((_2542 * _2575) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2543 * _2575) + _2528) * _2542))) * _2542;
    float _4612 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2588 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
    uint _2602 = _2267 + 9u;
    float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _801) * 0.949999988079071044921875);
    float _2614 = _2613 * _2613;
    float _2615 = cbLight._m0[_2307].x + _878;
    float _2616 = cbLight._m0[_2307].y + _879;
    float _2617 = cbLight._m0[_2307].z + _880;
    float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
    float _2622 = _2621 * _2615;
    float _2623 = _2621 * _2616;
    float _2624 = _2621 * _2617;
    float _2625 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2307].xyz));
    float _4623 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2628 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2629 = dot(vec3(_798, _799, _800), vec3(_2622, _2623, _2624));
    float _4634 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2632 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _2633 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2622, _2623, _2624));
    float _4645 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2637 = _2614 * _2614;
    float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
    float _2648 = exp2(log2(1.0 - (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) * 5.0);
    float _2655 = 1.0 - _2614;
    float _2665 = (0.5 / (((_2543 * ((_2628 * _2655) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2543 * _2655) + _2614) * _2628))) * _2628;
    float _4656 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2667 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
    float _2677 = (((((_2648 * _2565) + _949) * cbLight._m0[_2602].x) * _2667) * _2290) + ((((cbLight._m0[_2514].x * _2256) * ((_2564 * _2565) + _949)) * _2588) * _2303);
    float _2678 = (((((_2648 * _2567) + _951) * cbLight._m0[_2602].y) * _2667) * _2290) + ((((cbLight._m0[_2514].y * _2258) * ((_2564 * _2567) + _951)) * _2588) * _2303);
    float _2679 = (((((_2648 * _2568) + _952) * cbLight._m0[_2602].z) * _2667) * _2290) + ((((cbLight._m0[_2514].z * _2260) * ((_2564 * _2568) + _952)) * _2588) * _2303);
    float _2735;
    float _2737;
    float _2739;
    if (_2343)
    {
        _2735 = _2677;
        _2737 = _2678;
        _2739 = _2679;
    }
    else
    {
        uint _2741 = _2267 + 2u;
        uint _2745 = _2267 + 10u;
        float _2759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2741].w)) * _801) * 0.949999988079071044921875);
        float _2760 = _2759 * _2759;
        float _2761 = cbLight._m0[_2741].x + _878;
        float _2762 = cbLight._m0[_2741].y + _879;
        float _2763 = cbLight._m0[_2741].z + _880;
        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
        float _2768 = _2767 * _2761;
        float _2769 = _2767 * _2762;
        float _2770 = _2767 * _2763;
        float _2771 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2741].xyz));
        float _4667 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2775 = dot(vec3(_798, _799, _800), vec3(_2768, _2769, _2770));
        float _4678 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2778 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2779 = dot(vec3(cbLight._m0[_2741].xyz), vec3(_2768, _2769, _2770));
        float _4689 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2783 = _2760 * _2760;
        float _2787 = ((_2778 * _2778) * (_2783 + (-1.0))) + 1.0;
        float _2794 = exp2(log2(1.0 - (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) * 5.0);
        float _2801 = 1.0 - _2760;
        float _2811 = (0.5 / (((_2543 * ((_2774 * _2801) + _2760)) + 9.9999999392252902907785028219223e-09) + (((_2543 * _2801) + _2760) * _2774))) * _2774;
        float _4700 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2813 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2783 / ((_2787 * _2787) * 3.141590118408203125));
        float _2814 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2735 = (((((_2794 * _2565) + _949) * cbLight._m0[_2745].x) * _2813) * _2814) + _2677;
        _2737 = (((((_2794 * _2567) + _951) * cbLight._m0[_2745].y) * _2813) * _2814) + _2678;
        _2739 = (((((_2794 * _2568) + _952) * cbLight._m0[_2745].z) * _2813) * _2814) + _2679;
    }
    float _2845;
    float _2847;
    float _2849;
    if (_2452)
    {
        _2845 = _2735;
        _2847 = _2737;
        _2849 = _2739;
    }
    else
    {
        uint _2856 = _2267 + 3u;
        uint _2860 = _2267 + 11u;
        float _2874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2856].w)) * _801) * 0.949999988079071044921875);
        float _2875 = _2874 * _2874;
        float _2876 = cbLight._m0[_2856].x + _878;
        float _2877 = cbLight._m0[_2856].y + _879;
        float _2878 = cbLight._m0[_2856].z + _880;
        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
        float _2883 = _2882 * _2876;
        float _2884 = _2882 * _2877;
        float _2885 = _2882 * _2878;
        float _2886 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2856].xyz));
        float _4716 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2889 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2890 = dot(vec3(_798, _799, _800), vec3(_2883, _2884, _2885));
        float _4727 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2893 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _2894 = dot(vec3(cbLight._m0[_2856].xyz), vec3(_2883, _2884, _2885));
        float _4738 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2898 = _2875 * _2875;
        float _2902 = ((_2893 * _2893) * (_2898 + (-1.0))) + 1.0;
        float _2909 = exp2(log2(1.0 - (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) * 5.0);
        float _2916 = 1.0 - _2875;
        float _2926 = (0.5 / (((_2543 * ((_2889 * _2916) + _2875)) + 9.9999999392252902907785028219223e-09) + (((_2543 * _2916) + _2875) * _2889))) * _2889;
        float _4749 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2928 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2898 / ((_2902 * _2902) * 3.141590118408203125));
        float _2929 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2845 = (((((_2909 * _2565) + _949) * cbLight._m0[_2860].x) * _2928) * _2929) + _2735;
        _2847 = (((((_2909 * _2567) + _951) * cbLight._m0[_2860].y) * _2928) * _2929) + _2737;
        _2849 = (((((_2909 * _2568) + _952) * cbLight._m0[_2860].z) * _2928) * _2929) + _2739;
    }
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    if (_2265.y == 0u)
    {
        uvec4 _2950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2951 = _2950.x;
        uint _2962 = uint((float(_2950.y) * floor(float(uint(cbSceneParam._m0[85u].y * _887) / _2951))) + floor(float(uint(cbSceneParam._m0[85u].x * _886) / _2951)));
        float _2972 = (log2(_2043 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2973 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        uint _2976 = uint(isnan(14.0) ? _2973 : (isnan(_2973) ? 14.0 : min(_2973, 14.0)));
        uvec4 _2981 = texelFetch(g_lightClusterGridBuffer, int(((_2976 << 2u) + (_2962 << 6u)) >> 2u));
        uint _2982 = _2981.x;
        uint _2983 = _2950.z;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        if (((((1u << ((_2983 >> 4u) & 15u)) + 4294967295u) & _2982) == 0u) || ((_2983 & 240u) == 0u))
        {
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
        }
        else
        {
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3071;
            float _3073;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            uint _3213 = 0u;
            uint _3222;
            bool _3223;
            for (;;)
            {
                _3222 = texelFetch(g_lightClassification, int((((_2976 << 5u) + (_2962 << 9u)) + (_3213 << 2u)) >> 2u)).x;
                _3223 = _3222 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3223)
                {
                    frontier_phi_66_pred = _3212;
                    frontier_phi_66_pred_1 = _3211;
                    frontier_phi_66_pred_2 = _3210;
                    frontier_phi_66_pred_3 = _3209;
                    frontier_phi_66_pred_4 = _3208;
                    frontier_phi_66_pred_5 = _3207;
                }
                else
                {
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    uint _3337;
                    _3331 = _3207;
                    _3332 = _3208;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3211;
                    _3336 = _3212;
                    _3337 = _3222;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    for (;;)
                    {
                        uint _3341 = uint(findLSB(_3337)) + (_3213 << 5u);
                        uint _3338 = (_3337 + 4294967295u) & _3337;
                        uint _3343 = _3341 * 48u;
                        vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3343)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 3u)).x));
                        uint _3363 = (_3341 * 48u) + 4u;
                        vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3363)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 3u)).x));
                        uint _3382 = (_3341 * 48u) + 8u;
                        vec3 _3393 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3382)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 2u)).x));
                        float _3397 = _3357.x - _2041;
                        float _3398 = _3357.y - _2042;
                        float _3399 = _3357.z - _2043;
                        float _3400 = dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399));
                        float _3403 = inversesqrt(_3400);
                        float _3404 = _3403 * _3397;
                        float _3405 = _3403 * _3398;
                        float _3406 = _3403 * _3399;
                        float _3407 = dot(vec3(_905, _908, _911), vec3(_3404, _3405, _3406));
                        float _3412 = 1.0 - (_3400 * _3357.w);
                        float _4775 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3413 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3414 = sqrt(_3400) * _3376.w;
                        float _3417 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                        float _3418 = _3417 * _3417;
                        float _3421 = ((1.0 - _3418) * _3407) + _3418;
                        float _3424 = _3414 * _3414;
                        float _3428 = ((isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0))) * _3413) / ((_3424 * 0.699999988079071044921875) + 1.0);
                        float _3432 = (-0.0) - _2041;
                        float _3433 = (-0.0) - _2042;
                        float _3434 = (-0.0) - _2043;
                        float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                        float _3439 = _3438 * _3432;
                        float _3440 = _3438 * _3433;
                        float _3441 = _3438 * _3434;
                        float _3448 = exp2(log2(1.0 / ((_3424 * 3.5) + 5.0)) * 0.25);
                        float _3449 = 1.0 - _980;
                        float _3456 = sqrt(1.0 - ((1.0 - (_3449 * _3449)) * (1.0 - (_3448 * _3448))));
                        float _3457 = _3456 * _3456;
                        float _3458 = _3457 * _3457;
                        float _3459 = _3439 + _3404;
                        float _3460 = _3440 + _3405;
                        float _3461 = _3441 + _3406;
                        float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                        float _3469 = dot(vec3(_905, _908, _911), vec3(_3439, _3440, _3441));
                        float _4791 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3472 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3473 = dot(vec3(_905, _908, _911), vec3(_3465 * _3459, _3465 * _3460, _3465 * _3461));
                        float _4802 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3476 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3480 = ((_3476 * _3476) * (_3458 + (-1.0))) + 1.0;
                        float _3481 = _3417 * _3457;
                        float _3482 = _3481 * _3481;
                        float _3485 = ((1.0 - _3482) * _3407) + _3482;
                        float _4813 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3486 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3487 = 1.0 - _3457;
                        float _3497 = (0.5 / (((_3486 * ((_3472 * _3487) + _3457)) + 9.9999999392252902907785028219223e-09) + (((_3486 * _3487) + _3457) * _3472))) * _3486;
                        float _4824 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3508 = (((_3458 * 3.1415927410125732421875) * (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) / ((_3480 * _3480) * ((_3424 * 2.1991131305694580078125) + 3.141590118408203125))) * _3413;
                        _3266 = (_3428 * _3376.x) + _3334;
                        _3267 = (_3428 * _3376.y) + _3335;
                        _3268 = (_3428 * _3376.z) + _3336;
                        _3263 = (_3508 * _3393.x) + _3331;
                        _3264 = (_3508 * _3393.y) + _3332;
                        _3265 = (_3508 * _3393.z) + _3333;
                        if (_3338 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3331 = _3263;
                            _3332 = _3264;
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3267;
                            _3336 = _3268;
                            _3337 = _3338;
                        }
                    }
                    frontier_phi_66_pred = _3268;
                    frontier_phi_66_pred_1 = _3267;
                    frontier_phi_66_pred_2 = _3266;
                    frontier_phi_66_pred_3 = _3265;
                    frontier_phi_66_pred_4 = _3264;
                    frontier_phi_66_pred_5 = _3263;
                }
                _3073 = frontier_phi_66_pred;
                _3071 = frontier_phi_66_pred_1;
                _3069 = frontier_phi_66_pred_2;
                _3067 = frontier_phi_66_pred_3;
                _3065 = frontier_phi_66_pred_4;
                _3063 = frontier_phi_66_pred_5;
                uint _3214 = _3213 + 1u;
                if (_3214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3207 = _3063;
                    _3208 = _3065;
                    _3209 = _3067;
                    _3210 = _3069;
                    _3211 = _3071;
                    _3212 = _3073;
                    _3213 = _3214;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
        }
        uvec4 _3076 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3077 = _3076.z;
        uint _3079 = (_3077 >> 8u) & 15u;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        if (((4294967295u << _3079) & _2982) == 0u)
        {
            _3175 = _3062;
            _3177 = _3064;
            _3179 = _3066;
            _3181 = _3068;
            _3183 = _3070;
            _3185 = _3072;
        }
        else
        {
            float _3200 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
            float _3201 = _3200 * _2041;
            float _3202 = _3200 * _2042;
            float _3203 = _3200 * _2043;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3079 < ((_3077 >> 12u) & 15u))
            {
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3314 = _3062;
                float _3315 = _3064;
                float _3316 = _3066;
                float _3317 = _3068;
                float _3318 = _3070;
                float _3319 = _3072;
                uint _3320 = _3079;
                uint _3329;
                bool _3330;
                for (;;)
                {
                    _3329 = texelFetch(g_lightClassification, int((((_2976 << 5u) + (_2962 << 9u)) + (_3320 << 2u)) >> 2u)).x;
                    _3330 = _3329 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3330)
                    {
                        frontier_phi_72_pred = _3319;
                        frontier_phi_72_pred_1 = _3318;
                        frontier_phi_72_pred_2 = _3317;
                        frontier_phi_72_pred_3 = _3316;
                        frontier_phi_72_pred_4 = _3315;
                        frontier_phi_72_pred_5 = _3314;
                    }
                    else
                    {
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3526 = _3314;
                        float _3527 = _3315;
                        float _3528 = _3316;
                        float _3529 = _3317;
                        float _3530 = _3318;
                        float _3531 = _3319;
                        uint _3532 = _3329;
                        uint _3533;
                        vec4 _3558;
                        float _3559;
                        vec4 _3574;
                        vec3 _3586;
                        vec4 _3601;
                        vec4 _3616;
                        float _3663;
                        bool _3664;
                        for (;;)
                        {
                            uint _3543 = ((_3320 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3532));
                            _3533 = (_3532 + 4294967295u) & _3532;
                            uint _3545 = _3543 * 40u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            _3559 = _3558.w;
                            uint _3561 = (_3543 * 40u) + 4u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3543 * 40u) + 8u;
                            _3586 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x));
                            uint _3588 = (_3543 * 40u) + 16u;
                            _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3603 = (_3543 * 40u) + 20u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3619 = (_3543 * 40u) + 24u;
                            vec4 _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3638 = (_3543 * 40u) + 28u;
                            vec4 _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            _3663 = fma(_2043, _3651.z, fma(_2042, _3651.y, _3651.x * _2041)) + _3651.w;
                            _3664 = !((fma(_2043, _3632.z, fma(_2042, _3632.y, _3632.x * _2041)) + _3632.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3664)
                            {
                                float _3691 = _3558.x - _2041;
                                float _3692 = _3558.y - _2042;
                                float _3693 = _3558.z - _2043;
                                float _3694 = dot(vec3(_3691, _3692, _3693), vec3(_3691, _3692, _3693));
                                float _3697 = inversesqrt(_3694);
                                float _3698 = _3697 * _3691;
                                float _3699 = _3697 * _3692;
                                float _3700 = _3697 * _3693;
                                float _3704 = 1.0 - (_3694 / (_3559 * _3559));
                                float _4835 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3705 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3709 = sqrt(_3694) * _3574.w;
                                float _3711 = 1.39999997615814208984375 / (_3709 + 1.39999997615814208984375);
                                float _3712 = _3711 * _3711;
                                float _3715 = ((1.0 - _3712) * dot(vec3(_3698, _3699, _3700), vec3(_905, _908, _911))) + _3712;
                                float _3718 = _3709 * _3709;
                                float _3722 = (fma(_2043, _3601.z, fma(_2042, _3601.y, _3601.x * _2041)) + _3601.w) / _3663;
                                float _3723 = (fma(_2043, _3616.z, fma(_2042, _3616.y, _3616.x * _2041)) + _3616.w) / _3663;
                                float _3727 = 1.0 - dot(vec2(_3722, _3723), vec2(_3722, _3723));
                                float _4851 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3728 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3729 = _3728 * (((isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0))) * _3705) / ((_3718 * 0.699999988079071044921875) + 1.0));
                                float _3741 = exp2(log2(1.0 / ((_3718 * 3.5) + 5.0)) * 0.25);
                                float _3742 = 1.0 - _980;
                                float _3749 = sqrt(1.0 - ((1.0 - (_3742 * _3742)) * (1.0 - (_3741 * _3741))));
                                float _3750 = _3749 * _3749;
                                float _3751 = _3750 * _3750;
                                float _3752 = _3698 - _3201;
                                float _3753 = _3699 - _3202;
                                float _3754 = _3700 - _3203;
                                float _3758 = inversesqrt(dot(vec3(_3752, _3753, _3754), vec3(_3752, _3753, _3754)));
                                float _3762 = dot(vec3(_905, _908, _911), vec3((-0.0) - _3201, (-0.0) - _3202, (-0.0) - _3203));
                                float _4862 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3765 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3766 = dot(vec3(_905, _908, _911), vec3(_3758 * _3752, _3758 * _3753, _3758 * _3754));
                                float _4873 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3769 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3773 = ((_3769 * _3769) * (_3751 + (-1.0))) + 1.0;
                                float _3774 = _3711 * _3750;
                                float _3775 = _3774 * _3774;
                                float _3781 = ((1.0 - _3775) * dot(vec3(_905, _908, _911), vec3(_3698, _3699, _3700))) + _3775;
                                float _4884 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3783 = 1.0 - _3750;
                                float _3793 = (0.5 / (((_3782 * ((_3765 * _3783) + _3750)) + 9.9999999392252902907785028219223e-09) + (((_3782 * _3783) + _3750) * _3765))) * _3782;
                                float _4895 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3803 = (_3728 * _3705) * (((_3751 * 3.1415927410125732421875) * (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) / ((_3773 * _3773) * ((_3718 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3729 * _3574.y;
                                frontier_phi_78_pred_1 = _3729 * _3574.x;
                                frontier_phi_78_pred_2 = _3803 * _3586.z;
                                frontier_phi_78_pred_3 = _3803 * _3586.y;
                                frontier_phi_78_pred_4 = _3803 * _3586.x;
                                frontier_phi_78_pred_5 = _3729 * _3574.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3811 = frontier_phi_78_pred;
                            _3810 = frontier_phi_78_pred_1;
                            _3809 = frontier_phi_78_pred_2;
                            _3808 = frontier_phi_78_pred_3;
                            _3807 = frontier_phi_78_pred_4;
                            _3812 = frontier_phi_78_pred_5;
                            _3516 = _3810 + _3529;
                            _3517 = _3811 + _3530;
                            _3518 = _3812 + _3531;
                            _3513 = _3807 + _3526;
                            _3514 = _3808 + _3527;
                            _3515 = _3809 + _3528;
                            if (_3533 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3533;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3518;
                        frontier_phi_72_pred_1 = _3517;
                        frontier_phi_72_pred_2 = _3516;
                        frontier_phi_72_pred_3 = _3515;
                        frontier_phi_72_pred_4 = _3514;
                        frontier_phi_72_pred_5 = _3513;
                    }
                    _3186 = frontier_phi_72_pred;
                    _3184 = frontier_phi_72_pred_1;
                    _3182 = frontier_phi_72_pred_2;
                    _3180 = frontier_phi_72_pred_3;
                    _3178 = frontier_phi_72_pred_4;
                    _3176 = frontier_phi_72_pred_5;
                    uint _3321 = _3320 + 1u;
                    if (_3321 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3314 = _3176;
                        _3315 = _3178;
                        _3316 = _3180;
                        _3317 = _3182;
                        _3318 = _3184;
                        _3319 = _3186;
                        _3320 = _3321;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3186;
                frontier_phi_60_61_ladder_1 = _3184;
                frontier_phi_60_61_ladder_2 = _3180;
                frontier_phi_60_61_ladder_3 = _3178;
                frontier_phi_60_61_ladder_4 = _3176;
                frontier_phi_60_61_ladder_5 = _3182;
            }
            else
            {
                frontier_phi_60_61_ladder = _3072;
                frontier_phi_60_61_ladder_1 = _3070;
                frontier_phi_60_61_ladder_2 = _3066;
                frontier_phi_60_61_ladder_3 = _3064;
                frontier_phi_60_61_ladder_4 = _3062;
                frontier_phi_60_61_ladder_5 = _3068;
            }
            _3175 = frontier_phi_60_61_ladder_4;
            _3177 = frontier_phi_60_61_ladder_3;
            _3179 = frontier_phi_60_61_ladder_2;
            _3181 = frontier_phi_60_61_ladder_5;
            _3183 = frontier_phi_60_61_ladder_1;
            _3185 = frontier_phi_60_61_ladder;
        }
        float _3190 = isnan(1.0) ? _964 : (isnan(_964) ? 1.0 : min(_964, 1.0));
        _2995 = (_3190 * _3181) + _2507;
        _2997 = (_3190 * _3183) + _2509;
        _2999 = (_3190 * _3185) + _2511;
        _3001 = ((_3175 * _949) * _3190) + _2845;
        _3003 = ((_3177 * _951) * _3190) + _2847;
        _3005 = ((_3179 * _952) * _3190) + _2849;
    }
    else
    {
        _2995 = _2507;
        _2997 = _2509;
        _2999 = _2511;
        _3001 = _2845;
        _3003 = _2847;
        _3005 = _2849;
    }
    float _4911 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4922 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4933 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    uint _3025 = _924 + 6u;
    float _3033 = _886 / cbSceneParam._m0[86u].x;
    float _3034 = _887 / cbSceneParam._m0[86u].y;
    vec4 _3048 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3033, _3034, (log2((isnan(cbSceneParam._m0[77u].w) ? _821 : (isnan(_821) ? cbSceneParam._m0[77u].w : min(_821, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3050 = _3048.x;
    float _3051 = _3048.y;
    float _3052 = _3048.z;
    float _3053 = _3048.w;
    float _3125;
    float _3127;
    float _3129;
    float _3131;
    if (_821 > cbSceneParam._m0[78u].w)
    {
        float _3087 = isnan(_821) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _821 : min(cbSceneParam._m0[80u].w, _821));
        float _3088 = _3087 / _821;
        float _3099 = _3088 * _871;
        float _3100 = _872 * _3088;
        float _3101 = (-0.0) - _3100;
        float _3103 = _3088 * _873;
        float _3105 = (cbSceneParam._m0[77u].w * _3101) / _3087;
        float _3106 = _3105 + cbSceneParam._m0[79u].w;
        float _3107 = cbSceneParam._m0[79u].w - _3100;
        float _3113 = sqrt(((_3099 * _3099) + (_3100 * _3100)) + (_3103 * _3103));
        float _3116 = (1.0 - (cbSceneParam._m0[77u].w / _3087)) * _3113;
        float _3121 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3123 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3276;
        if (abs((_3101 - _3105) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3276 = ((((_3106 > 0.0) ? exp2(_3121 * _3106) : (2.0 - exp2(_3123 * _3106))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3116;
        }
        else
        {
            float _3236 = 1.0 / cbSceneParam._m0[80u].x;
            float _3237 = isnan(_3107) ? _3106 : (isnan(_3106) ? _3107 : max(_3106, _3107));
            float _3238 = isnan(_3107) ? _3106 : (isnan(_3106) ? _3107 : min(_3106, _3107));
            float _3247 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : min(_3237, 0.0));
            float _3248 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : min(_3238, 0.0));
            _3276 = ((abs(_3113 / _3101) * cbSceneParam._m0[80u].y) * ((((_3247 - _3248) * 2.0) - ((exp2(_3121 * (isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0)))) - exp2(_3121 * (isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0))))) * _3236)) - ((exp2(_3123 * _3247) - exp2(_3123 * _3248)) * _3236))) + (_3116 * cbSceneParam._m0[80u].z);
        }
        vec4 _3278 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3033, _3034, 1.0), 0.0);
        float _3287 = exp2((_3276 * (-1.44269502162933349609375)) * (1.0 - _3278.w));
        float _3288 = log2(_3287);
        float _3304 = log2(_3053);
        _3125 = (exp2(_3304 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].x)) * _3278.x) / cbSceneParam._m0[78u].x)) + _3050;
        _3127 = (exp2(_3304 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].y)) * _3278.y) / cbSceneParam._m0[78u].y)) + _3051;
        _3129 = (exp2(_3304 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].z)) * _3278.z) / cbSceneParam._m0[78u].z)) + _3052;
        _3131 = _3287 * _3053;
    }
    else
    {
        _3125 = _3050;
        _3127 = _3051;
        _3129 = _3052;
        _3131 = _3053;
    }
    float _3143 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3144 = _3143 == 3.0;
    float _3145 = log2(_3131);
    float _3152 = exp2(_3145 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2995 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _964))) + ((_3001 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1774)) * cbPerFrame._m0[3u].x));
    float _3153 = exp2(_3145 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2997 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _964))) + ((_3003 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1774)) * cbPerFrame._m0[3u].x));
    float _3154 = exp2(_3145 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2999 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _964))) + ((_3005 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1774)) * cbPerFrame._m0[3u].x));
    float _3163 = (_3143 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3163 * (_3144 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3125)));
    SV_Target.y = _3163 * (_3144 ? _3153 : (_3153 + (cbSceneParam._m0[72u].w * _3127)));
    SV_Target.z = _3163 * (_3144 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3129)));
    SV_Target.w = cbInstanceData._m0[_3025].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3025].w;
}


