#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1218;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _246 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _246.x * cbMtdParam._m0[10u].x;
    float _253 = _246.y * cbMtdParam._m0[10u].y;
    float _254 = _246.z * cbMtdParam._m0[10u].z;
    vec4 _272 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _322 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _332 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _322)) + 1.0;
    float _3548 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _333 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _340 = (_333 * ((_272.x * cbMtdParam._m0[11u].x) - _252)) + _252;
    float _341 = (_333 * ((_272.y * cbMtdParam._m0[11u].y) - _253)) + _253;
    float _342 = (_333 * ((_272.z * cbMtdParam._m0[11u].z) - _254)) + _254;
    vec4 _360 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _391 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _322)) + 1.0;
    float _3559 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _399 = (_392 * ((_360.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _400 = (_392 * ((_360.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _401 = (_392 * ((_360.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _419 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _444 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _322)) + 1.0;
    float _3570 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _452 = (_445 * ((_419.x * cbMtdParam._m0[13u].x) - _399)) + _399;
    float _453 = (_445 * ((_419.y * cbMtdParam._m0[13u].y) - _400)) + _400;
    float _454 = (_445 * ((_419.z * cbMtdParam._m0[13u].z) - _401)) + _401;
    vec4 _467 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _469 = _467.x;
    float _487 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _469) * _333) + _469;
    float _505 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _487) * _392) + _487;
    float _522 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _505) * _445) + _505;
    vec4 _534 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _543 = cbMtdParam._m0[18u].y * _534.z;
    vec4 _555 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _564 = (((cbMtdParam._m0[18u].x * _555.z) - _543) * _333) + _543;
    vec4 _577 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _588 = (((cbMtdParam._m0[17u].w * _577.z) - _564) * _392) + _564;
    vec4 _601 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _610 = (((cbMtdParam._m0[17u].z * _601.z) - _588) * _445) + _588;
    vec4 _623 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _636 = ((_555.x - _536) * _333) + _536;
    float _637 = ((_555.y - _537) * _333) + _537;
    float _642 = ((_577.x - _636) * _392) + _636;
    float _643 = ((_577.y - _637) * _392) + _637;
    float _652 = ((((_601.x - _642) * _445) + _642) * 2.0) + (-1.0);
    float _653 = ((((_601.y - _643) * _445) + _643) * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _3581 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _659 = sqrt(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))));
    float _662 = (((_623.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _652;
    float _663 = (((_623.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _653;
    float _666 = fma(_659, _216 * NORMAL.x, fma(_663, _223 * TANGENT.x, (_209 * _201) * _662));
    float _669 = fma(_659, _216 * NORMAL.y, fma(_663, _223 * TANGENT.y, (_209 * _202) * _662));
    float _672 = fma(_659, _216 * NORMAL.z, fma(_663, _223 * TANGENT.z, (_209 * _203) * _662));
    float _676 = inversesqrt(dot(vec3(_666, _669, _672), vec3(_666, _669, _672)));
    float _677 = _676 * _666;
    float _678 = _676 * _669;
    float _679 = _676 * _672;
    float _3592 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _680 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3614 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3625 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3636 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _684 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _700 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _750 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _740);
    float _751 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _740);
    float _752 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _740);
    float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
    float _757 = _750 * _756;
    float _758 = _751 * _756;
    float _759 = _752 * _756;
    float _765 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _766 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _784 = fma(_679, cbSceneParam._m0[5u].z, fma(_678, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _677));
    float _787 = fma(_679, cbSceneParam._m0[6u].z, fma(_678, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _677));
    float _790 = fma(_679, cbSceneParam._m0[7u].z, fma(_678, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _677));
    uint _803 = uint(roundEven(NORMAL.w)) * 13u;
    uint _805 = (_803 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _811 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_805].x;
    float _812 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_805].y;
    float _813 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_805].z;
    float _3647 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _817 = 1.0 - _684;
    float _818 = _814 * _817;
    float _819 = _815 * _817;
    float _820 = _816 * _817;
    float _825 = (_814 + (-0.039999999105930328369140625)) * _684;
    float _826 = (_815 + (-0.039999999105930328369140625)) * _684;
    float _827 = (_816 + (-0.039999999105930328369140625)) * _684;
    float _828 = _825 + 0.039999999105930328369140625;
    float _830 = _826 + 0.039999999105930328369140625;
    float _831 = _827 + 0.039999999105930328369140625;
    vec4 _840 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _765, cbSceneParam._m0[86u].y * _766));
    float _843 = _840.x * TEXCOORD_5.w;
    float _844 = dot(vec3(_677, _678, _679), vec3(_757, _758, _759));
    float _847 = _844 * 2.0;
    float _851 = (_847 * _677) - _757;
    float _852 = (_847 * _678) - _758;
    float _853 = (_847 * _679) - _759;
    float _857 = abs(dot(vec3(_757, _758, _759), vec3(_677, _678, _679)));
    float _3680 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _859 = sqrt(_680);
    float _872 = exp2((_859 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_859 * 3.0));
    float _878 = (1.0 - _872) * ((_859 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _879 = _872 * _859;
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1217;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _942 = fma(_915, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _907));
        float _946 = fma(_915, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _907));
        float _950 = fma(_915, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _907));
        float _975 = _907 + _677;
        float _976 = _911 + _678;
        float _977 = _915 + _679;
        float _987 = fma(_977, cbModelParam._m0[26u].z, fma(_976, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975)) - _942;
        float _988 = fma(_977, cbModelParam._m0[27u].z, fma(_976, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975)) - _946;
        float _989 = fma(_977, cbModelParam._m0[28u].z, fma(_976, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975)) - _950;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_942 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_946 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[34u].z) + ((((((_950 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1045 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1011.x + (-0.5));
        float _1047 = _1045 * (_1011.y + (-0.5));
        float _1048 = _1045 * (_1011.z + (-0.5));
        float _1055 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1018.x + (-0.5));
        float _1057 = _1055 * (_1018.y + (-0.5));
        float _1058 = _1055 * (_1018.z + (-0.5));
        float _1065 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1025.x + (-0.5));
        float _1067 = _1065 * (_1025.y + (-0.5));
        float _1068 = _1065 * (_1025.z + (-0.5));
        float _1075 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1032.x + (-0.5));
        float _1077 = _1075 * (_1032.y + (-0.5));
        float _1078 = _1075 * (_1032.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1099 = (dot(vec3(_677, _678, _679), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1109 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3728 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1111 + 1.0))) + _1116) * _1079;
        float _1126 = _1047 * 0.5;
        float _1127 = _1057 * 0.5;
        float _1128 = _1067 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_677, _678, _679), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3761 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1153 + 1.0))) + _1158) * _1080;
        float _1168 = _1048 * 0.5;
        float _1169 = _1058 * 0.5;
        float _1170 = _1068 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_677, _678, _679), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3794 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1195 + 1.0))) + _1200) * _1081;
        _1217 = _1048;
        _1219 = _1047;
        _1220 = _1046;
        _1221 = _1058;
        _1222 = _1057;
        _1223 = _1056;
        _1224 = _1068;
        _1225 = _1067;
        _1226 = _1066;
        _1227 = _1081;
        _1228 = _1080;
        _1229 = _1079;
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _1218;
        _1219 = _1218;
        _1220 = _1218;
        _1221 = _1218;
        _1222 = _1218;
        _1223 = _1218;
        _1224 = _1218;
        _1225 = _1218;
        _1226 = _1218;
        _1227 = _1218;
        _1228 = _1218;
        _1229 = _1218;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1258 = fma(_915, cbModelParam._m0[30u].z, fma(_911, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _907));
        float _1262 = fma(_915, cbModelParam._m0[31u].z, fma(_911, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _907));
        float _1266 = fma(_915, cbModelParam._m0[32u].z, fma(_911, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _907));
        float _1289 = _907 + _677;
        float _1290 = _911 + _678;
        float _1291 = _915 + _679;
        float _1301 = fma(_1291, cbModelParam._m0[30u].z, fma(_1290, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1289)) - _1258;
        float _1302 = fma(_1291, cbModelParam._m0[31u].z, fma(_1290, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1289)) - _1262;
        float _1303 = fma(_1291, cbModelParam._m0[32u].z, fma(_1290, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1289)) - _1266;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1258 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1262 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[35u].z) + ((((((_1266 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1357 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1324.x + (-0.5));
        float _1359 = _1357 * (_1324.y + (-0.5));
        float _1360 = _1357 * (_1324.z + (-0.5));
        float _1367 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1331.x + (-0.5));
        float _1369 = _1367 * (_1331.y + (-0.5));
        float _1370 = _1367 * (_1331.z + (-0.5));
        float _1377 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1338.x + (-0.5));
        float _1379 = _1377 * (_1338.y + (-0.5));
        float _1380 = _1377 * (_1338.z + (-0.5));
        float _1387 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1345.x + (-0.5));
        float _1389 = _1387 * (_1345.y + (-0.5));
        float _1390 = _1387 * (_1345.z + (-0.5));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = _1358 * 0.5;
        float _1395 = _1368 * 0.5;
        float _1396 = _1378 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_677, _678, _679), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _3857 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1421 + 1.0))) + _1426) * _1391;
        float _1436 = _1359 * 0.5;
        float _1437 = _1369 * 0.5;
        float _1438 = _1379 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_677, _678, _679), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _3890 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1463 + 1.0))) + _1468) * _1392;
        float _1478 = _1360 * 0.5;
        float _1479 = _1370 * 0.5;
        float _1480 = _1380 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_677, _678, _679), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _3923 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1505 + 1.0))) + _1510) * _1393;
        _1527 = _1360;
        _1528 = _1359;
        _1529 = _1358;
        _1530 = _1370;
        _1531 = _1369;
        _1532 = _1368;
        _1533 = _1380;
        _1534 = _1379;
        _1535 = _1378;
        _1536 = _1393;
        _1537 = _1392;
        _1538 = _1391;
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
    }
    else
    {
        _1527 = _1218;
        _1528 = _1218;
        _1529 = _1218;
        _1530 = _1218;
        _1531 = _1218;
        _1532 = _1218;
        _1533 = _1218;
        _1534 = _1218;
        _1535 = _1218;
        _1536 = _1218;
        _1537 = _1218;
        _1538 = _1218;
        _1539 = 0.0;
        _1540 = 0.0;
        _1541 = 0.0;
    }
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1230)) + _1230;
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1231)) + _1231;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1232)) + _1232;
    float _1574 = fma(_1553, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1551 * cbSceneParam._m0[89u].x));
    float _1577 = fma(_1553, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1551 * cbSceneParam._m0[90u].x));
    float _1580 = fma(_1553, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1551));
    float _1595 = _851 * 0.5;
    float _1596 = _852 * 0.5;
    float _1597 = _853 * 0.5;
    float _1598 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1601 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1604 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1638;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1611 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1217, _1221, _1224, _1227));
        float _1615 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1619 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1626 = dot(vec4(cbModelParam._m0[39u]), vec4(_1595, _1596, _1597, 1.0));
        _1638 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1638 = 1.0;
    }
    float _1649;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1640 = dot(vec4(cbModelParam._m0[40u]), vec4(_1595, _1596, _1597, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1640) ? 0.0 : (isnan(0.0) ? _1640 : max(0.0, _1640))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1653 = (_1649 * cbModelParam._m0[1u].x) + (_1638 * (1.0 - cbModelParam._m0[1u].x));
    float _1663 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _680);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1663 : min(cbModelParam._m0[25u].z, _1663));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1713 = fma(_915, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907)) + cbModelParam._m0[13u].w;
        float _1717 = fma(_915, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907)) + cbModelParam._m0[14u].w;
        float _1721 = fma(_915, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907)) + cbModelParam._m0[15u].w;
        float _1724 = fma(_853, cbModelParam._m0[13u].z, fma(_852, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _851));
        float _1727 = fma(_853, cbModelParam._m0[14u].z, fma(_852, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _851));
        float _1730 = fma(_853, cbModelParam._m0[15u].z, fma(_852, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _851));
        float _1758;
        if (_1724 > 0.0)
        {
            _1758 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1758 = frontier_phi_14_12_ladder;
        }
        float _1961;
        if (_1727 > 0.0)
        {
            _1961 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1961 = frontier_phi_23_19_ladder;
        }
        float _2215;
        if (_1730 > 0.0)
        {
            _2215 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2215 = frontier_phi_35_30_ladder;
        }
        float _2217 = isnan(_1961) ? _1758 : (isnan(_1758) ? _1961 : min(_1758, _1961));
        float _2218 = isnan(_2215) ? _2217 : (isnan(_2217) ? _2215 : min(_2217, _2215));
        float _2222 = (_2218 * _1724) + _1713;
        float _2223 = (_2218 * _1727) + _1717;
        float _2224 = (_2218 * _1730) + _1721;
        float _2225 = _2218 * 9.9999997473787516355514526367188e-05;
        float _2227 = (-1.0) - _2225;
        float _2229 = _2225 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2224 > _2229) || ((_2224 < _2227) || ((_2223 > _2229) || ((_2223 < _2227) || ((_2222 < _2227) || (_2222 > _2229))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2224, cbModelParam._m0[9u].z, fma(_2223, cbModelParam._m0[9u].y, _2222 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2224, cbModelParam._m0[10u].z, fma(_2223, cbModelParam._m0[10u].y, _2222 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2224, cbModelParam._m0[11u].z, fma(_2223, cbModelParam._m0[11u].y, _2222 * cbModelParam._m0[11u].x))), _1664);
            frontier_phi_13_35_ladder = _2352.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2352.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2352.x * cbModelParam._m0[1u].y;
        }
        _1746 = frontier_phi_13_35_ladder_2;
        _1748 = frontier_phi_13_35_ladder_1;
        _1750 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_851, _852, _853), _1664);
        _1746 = _1734.x * cbModelParam._m0[1u].y;
        _1748 = _1734.y * cbModelParam._m0[1u].y;
        _1750 = _1734.z * cbModelParam._m0[1u].y;
    }
    float _1754 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _680);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1754 : min(cbModelParam._m0[25u].w, _1754));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1808 = fma(_915, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907)) + cbModelParam._m0[21u].w;
        float _1812 = fma(_915, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907)) + cbModelParam._m0[22u].w;
        float _1816 = fma(_915, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907)) + cbModelParam._m0[23u].w;
        float _1819 = fma(_853, cbModelParam._m0[21u].z, fma(_852, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _851));
        float _1822 = fma(_853, cbModelParam._m0[22u].z, fma(_852, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _851));
        float _1825 = fma(_853, cbModelParam._m0[23u].z, fma(_852, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _851));
        float _1966;
        if (_1819 > 0.0)
        {
            _1966 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1966 = frontier_phi_25_21_ladder;
        }
        float _2242;
        if (_1822 > 0.0)
        {
            _2242 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2242 = frontier_phi_37_32_ladder;
        }
        float _2455;
        if (_1825 > 0.0)
        {
            _2455 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2455 = frontier_phi_46_43_ladder;
        }
        float _2457 = isnan(_2242) ? _1966 : (isnan(_1966) ? _2242 : min(_1966, _2242));
        float _2458 = isnan(_2455) ? _2457 : (isnan(_2457) ? _2455 : min(_2457, _2455));
        float _2462 = (_2458 * _1819) + _1808;
        float _2463 = (_2458 * _1822) + _1812;
        float _2464 = (_2458 * _1825) + _1816;
        float _2465 = _2458 * 9.9999997473787516355514526367188e-05;
        float _2466 = (-1.0) - _2465;
        float _2468 = _2465 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2464 > _2468) || ((_2464 < _2466) || ((_2463 > _2468) || ((_2463 < _2466) || ((_2462 < _2466) || (_2462 > _2468))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2464, cbModelParam._m0[17u].z, fma(_2463, cbModelParam._m0[17u].y, _2462 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2464, cbModelParam._m0[18u].z, fma(_2463, cbModelParam._m0[18u].y, _2462 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2464, cbModelParam._m0[19u].z, fma(_2463, cbModelParam._m0[19u].y, _2462 * cbModelParam._m0[19u].x))), _1755);
            frontier_phi_22_46_ladder = _2663.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2663.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2663.x * cbModelParam._m0[1u].z;
        }
        _1844 = frontier_phi_22_46_ladder_2;
        _1846 = frontier_phi_22_46_ladder_1;
        _1848 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1828 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_851, _852, _853), _1755);
        _1844 = _1828.x * cbModelParam._m0[1u].z;
        _1846 = _1828.y * cbModelParam._m0[1u].z;
        _1848 = _1828.z * cbModelParam._m0[1u].z;
    }
    float _1861 = (((_878 * _828) + _879) * _843) * ((cbModelParam._m0[1u].w * (_1844 - _1746)) + _1746);
    float _1863 = (((_878 * _830) + _879) * _843) * ((cbModelParam._m0[1u].w * (_1846 - _1748)) + _1748);
    float _1865 = (((_878 * _831) + _879) * _843) * ((cbModelParam._m0[1u].w * (_1848 - _1750)) + _1750);
    float _1868 = fma(_1865, cbSceneParam._m0[89u].z, fma(_1863, cbSceneParam._m0[89u].y, _1861 * cbSceneParam._m0[89u].x));
    float _1871 = fma(_1865, cbSceneParam._m0[90u].z, fma(_1863, cbSceneParam._m0[90u].y, _1861 * cbSceneParam._m0[90u].x));
    float _1874 = fma(_1865, cbSceneParam._m0[91u].z, fma(_1863, cbSceneParam._m0[91u].y, _1861 * cbSceneParam._m0[91u].x));
    uvec4 _1884 = floatBitsToUint(cbInstanceData._m0[_803 + 5u]);
    uint _1886 = _1884.x * 14u;
    uint _1887 = _1886 + 13u;
    float _1894 = _843 + (-1.0);
    float _1899 = (cbLight._m0[_1887].x * _1894) + 1.0;
    float _1900 = (cbLight._m0[_1887].y * _1894) + 1.0;
    float _1901 = (cbLight._m0[_1887].z * _1894) + 1.0;
    float _1902 = (cbLight._m0[_1887].w * _1894) + 1.0;
    uint _1903 = _1886 + 5u;
    float _1909 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
    uint _1913 = _1886 + 4u;
    float _1920 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
    uint _1924 = _1886 | 1u;
    float _1935 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_677, _678, _679));
    float _1938 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_677, _678, _679));
    float _4059 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _4070 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1943 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 0.3183098733425140380859375;
    float _1945 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 0.3183098733425140380859375;
    float _1952 = ((cbLight._m0[_1903].x * _1909) * _1945) + ((cbLight._m0[_1913].x * _1920) * _1943);
    float _1953 = ((_1909 * cbLight._m0[_1903].y) * _1945) + ((_1920 * cbLight._m0[_1913].y) * _1943);
    float _1954 = ((_1909 * cbLight._m0[_1903].z) * _1945) + ((_1920 * cbLight._m0[_1913].z) * _1943);
    uvec4 _1958 = floatBitsToUint(cbLight._m0[_1886 + 12u]);
    bool _1960 = _1958.x == 0u;
    float _1971;
    float _1973;
    float _1975;
    if (_1960)
    {
        _1971 = _1952;
        _1973 = _1953;
        _1975 = _1954;
    }
    else
    {
        uint _1979 = _1886 + 6u;
        float _1995 = (dot(vec3(cbLight._m0[_1886 + 2u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _1996 = _1995 * _1995;
        float _4081 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1997 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1998 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _1971 = (((cbLight._m0[_1979].x * 0.3183098733425140380859375) * _1997) * _1998) + _1952;
        _1973 = (((cbLight._m0[_1979].y * 0.3183098733425140380859375) * _1997) * _1998) + _1953;
        _1975 = (((cbLight._m0[_1979].z * 0.3183098733425140380859375) * _1997) * _1998) + _1954;
    }
    bool _1978 = _1958.y == 0u;
    float _2016;
    float _2018;
    float _2020;
    if (_1978)
    {
        _2016 = _1971;
        _2018 = _1973;
        _2020 = _1975;
    }
    else
    {
        uint _2186 = _1886 + 7u;
        float _2202 = (dot(vec3(cbLight._m0[_1886 + 3u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2203 = _2202 * _2202;
        float _4097 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2205 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2016 = (((cbLight._m0[_2186].x * 0.3183098733425140380859375) * _2204) * _2205) + _1971;
        _2018 = (((cbLight._m0[_2186].y * 0.3183098733425140380859375) * _2204) * _2205) + _1973;
        _2020 = (((cbLight._m0[_2186].z * 0.3183098733425140380859375) * _2204) * _2205) + _1975;
    }
    uint _2023 = _1886 + 8u;
    float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1886].w)) * _680) * 0.949999988079071044921875);
    float _2037 = _2036 * _2036;
    float _2038 = cbLight._m0[_1886].x + _757;
    float _2039 = cbLight._m0[_1886].y + _758;
    float _2040 = cbLight._m0[_1886].z + _759;
    float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
    float _2045 = _2044 * _2038;
    float _2046 = _2044 * _2039;
    float _2047 = _2044 * _2040;
    float _2048 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_1886].xyz));
    float _4113 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _2052 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _2053 = dot(vec3(_677, _678, _679), vec3(_2045, _2046, _2047));
    float _4135 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2057 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_2045, _2046, _2047));
    float _4146 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2061 = _2037 * _2037;
    float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
    float _2073 = exp2(log2(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * 5.0);
    float _2074 = 0.959999978542327880859375 - _825;
    float _2076 = 0.959999978542327880859375 - _826;
    float _2077 = 0.959999978542327880859375 - _827;
    float _2084 = 1.0 - _2037;
    float _2095 = (0.5 / (((_2052 * ((_2051 * _2084) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2084) + _2037) * _2051))) * _2051;
    float _4157 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2097 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
    uint _2108 = _1886 + 9u;
    float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _680) * 0.949999988079071044921875);
    float _2120 = _2119 * _2119;
    float _2121 = cbLight._m0[_1924].x + _757;
    float _2122 = cbLight._m0[_1924].y + _758;
    float _2123 = cbLight._m0[_1924].z + _759;
    float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
    float _2128 = _2127 * _2121;
    float _2129 = _2127 * _2122;
    float _2130 = _2127 * _2123;
    float _2131 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_1924].xyz));
    float _4168 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _2135 = dot(vec3(_677, _678, _679), vec3(_2128, _2129, _2130));
    float _4179 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _2139 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_2128, _2129, _2130));
    float _4190 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2143 = _2120 * _2120;
    float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
    float _2154 = exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0);
    float _2161 = 1.0 - _2120;
    float _2171 = (0.5 / (((_2052 * ((_2134 * _2161) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2161) + _2120) * _2134))) * _2134;
    float _4201 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2173 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
    float _2183 = (((((_2154 * _2074) + _828) * cbLight._m0[_2108].x) * _2173) * _1909) + (((((_2073 * _2074) + _828) * cbLight._m0[_2023].x) * _2097) * _1920);
    float _2184 = (((((_2154 * _2076) + _830) * cbLight._m0[_2108].y) * _2173) * _1909) + (((((_2073 * _2076) + _830) * cbLight._m0[_2023].y) * _2097) * _1920);
    float _2185 = (((((_2154 * _2077) + _831) * cbLight._m0[_2108].z) * _2173) * _1909) + (((((_2073 * _2077) + _831) * cbLight._m0[_2023].z) * _2097) * _1920);
    float _2247;
    float _2249;
    float _2251;
    if (_1960)
    {
        _2247 = _2183;
        _2249 = _2184;
        _2251 = _2185;
    }
    else
    {
        uint _2253 = _1886 + 2u;
        uint _2257 = _1886 + 10u;
        float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _680) * 0.949999988079071044921875);
        float _2272 = _2271 * _2271;
        float _2273 = cbLight._m0[_2253].x + _757;
        float _2274 = cbLight._m0[_2253].y + _758;
        float _2275 = cbLight._m0[_2253].z + _759;
        float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
        float _2280 = _2279 * _2273;
        float _2281 = _2279 * _2274;
        float _2282 = _2279 * _2275;
        float _2283 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2253].xyz));
        float _4212 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2287 = dot(vec3(_677, _678, _679), vec3(_2280, _2281, _2282));
        float _4223 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2291 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2280, _2281, _2282));
        float _4234 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2295 = _2272 * _2272;
        float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
        float _2306 = exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0);
        float _2313 = 1.0 - _2272;
        float _2323 = (0.5 / (((_2052 * ((_2286 * _2313) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2313) + _2272) * _2286))) * _2286;
        float _4245 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2325 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
        float _2326 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _2247 = (((((_2306 * _2074) + _828) * cbLight._m0[_2257].x) * _2325) * _2326) + _2183;
        _2249 = (((((_2306 * _2076) + _830) * cbLight._m0[_2257].y) * _2325) * _2326) + _2184;
        _2251 = (((((_2306 * _2077) + _831) * cbLight._m0[_2257].z) * _2325) * _2326) + _2185;
    }
    float _2361;
    float _2363;
    float _2365;
    if (_1978)
    {
        _2361 = _2247;
        _2363 = _2249;
        _2365 = _2251;
    }
    else
    {
        uint _2372 = _1886 + 3u;
        uint _2376 = _1886 + 11u;
        float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _680) * 0.949999988079071044921875);
        float _2391 = _2390 * _2390;
        float _2392 = cbLight._m0[_2372].x + _757;
        float _2393 = cbLight._m0[_2372].y + _758;
        float _2394 = cbLight._m0[_2372].z + _759;
        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
        float _2399 = _2398 * _2392;
        float _2400 = _2398 * _2393;
        float _2401 = _2398 * _2394;
        float _2402 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2372].xyz));
        float _4261 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2406 = dot(vec3(_677, _678, _679), vec3(_2399, _2400, _2401));
        float _4272 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2410 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2399, _2400, _2401));
        float _4283 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2414 = _2391 * _2391;
        float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
        float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0);
        float _2432 = 1.0 - _2391;
        float _2442 = (0.5 / (((_2052 * ((_2405 * _2432) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2432) + _2391) * _2405))) * _2405;
        float _4294 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2444 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
        float _2445 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2361 = (((((_2425 * _2074) + _828) * cbLight._m0[_2376].x) * _2444) * _2445) + _2247;
        _2363 = (((((_2425 * _2076) + _830) * cbLight._m0[_2376].y) * _2444) * _2445) + _2249;
        _2365 = (((((_2425 * _2077) + _831) * cbLight._m0[_2376].z) * _2444) * _2445) + _2251;
    }
    float _2580;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    float _2590;
    if (_1884.y == 0u)
    {
        float _2520 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2521 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2520;
        float _2522 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2520;
        float _2523 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2520;
        uvec4 _2535 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2536 = _2535.x;
        uint _2547 = uint((float(_2535.y) * floor(float(uint(cbSceneParam._m0[85u].y * _766) / _2536))) + floor(float(uint(cbSceneParam._m0[85u].x * _765) / _2536)));
        float _2557 = (log2(_2523 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2558 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        uint _2561 = uint(isnan(14.0) ? _2558 : (isnan(_2558) ? 14.0 : min(_2558, 14.0)));
        uvec4 _2566 = texelFetch(g_lightClusterGridBuffer, int(((_2561 << 2u) + (_2547 << 6u)) >> 2u));
        uint _2567 = _2566.x;
        uint _2568 = _2535.z;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        if (((((1u << ((_2568 >> 4u) & 15u)) + 4294967295u) & _2567) == 0u) || ((_2568 & 240u) == 0u))
        {
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
        }
        else
        {
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            uint _2819 = 0u;
            uint _2828;
            bool _2829;
            for (;;)
            {
                _2828 = texelFetch(g_lightClassification, int((((_2561 << 5u) + (_2547 << 9u)) + (_2819 << 2u)) >> 2u)).x;
                _2829 = _2828 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2829)
                {
                    frontier_phi_61_pred = _2813;
                    frontier_phi_61_pred_1 = _2818;
                    frontier_phi_61_pred_2 = _2817;
                    frontier_phi_61_pred_3 = _2816;
                    frontier_phi_61_pred_4 = _2815;
                    frontier_phi_61_pred_5 = _2814;
                }
                else
                {
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    uint _2943;
                    _2937 = _2813;
                    _2938 = _2814;
                    _2939 = _2815;
                    _2940 = _2816;
                    _2941 = _2817;
                    _2942 = _2818;
                    _2943 = _2828;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    for (;;)
                    {
                        uint _2947 = uint(findLSB(_2943)) + (_2819 << 5u);
                        uint _2944 = (_2943 + 4294967295u) & _2943;
                        uint _2949 = _2947 * 48u;
                        vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 3u)).x));
                        uint _2969 = (_2947 * 48u) + 4u;
                        vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 3u)).x));
                        uint _2988 = (_2947 * 48u) + 8u;
                        vec3 _2999 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x));
                        float _3003 = _2963.x - _2521;
                        float _3004 = _2963.y - _2522;
                        float _3005 = _2963.z - _2523;
                        float _3006 = dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005));
                        float _3009 = inversesqrt(_3006);
                        float _3010 = _3009 * _3003;
                        float _3011 = _3009 * _3004;
                        float _3012 = _3009 * _3005;
                        float _3013 = dot(vec3(_784, _787, _790), vec3(_3010, _3011, _3012));
                        float _3018 = 1.0 - (_3006 * _2963.w);
                        float _4320 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3019 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3020 = sqrt(_3006) * _2982.w;
                        float _3023 = 1.39999997615814208984375 / (_3020 + 1.39999997615814208984375);
                        float _3024 = _3023 * _3023;
                        float _3027 = ((1.0 - _3024) * _3013) + _3024;
                        float _3030 = _3020 * _3020;
                        float _3034 = ((isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0))) * _3019) / ((_3030 * 0.699999988079071044921875) + 1.0);
                        float _3038 = (-0.0) - _2521;
                        float _3039 = (-0.0) - _2522;
                        float _3040 = (-0.0) - _2523;
                        float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3055 = exp2(log2(1.0 / ((_3030 * 3.5) + 5.0)) * 0.25);
                        float _3056 = 1.0 - _859;
                        float _3063 = sqrt(1.0 - ((1.0 - (_3056 * _3056)) * (1.0 - (_3055 * _3055))));
                        float _3064 = _3063 * _3063;
                        float _3065 = _3064 * _3064;
                        float _3066 = _3045 + _3010;
                        float _3067 = _3046 + _3011;
                        float _3068 = _3047 + _3012;
                        float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
                        float _3076 = dot(vec3(_784, _787, _790), vec3(_3045, _3046, _3047));
                        float _4336 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3079 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3080 = dot(vec3(_784, _787, _790), vec3(_3072 * _3066, _3072 * _3067, _3072 * _3068));
                        float _4347 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3083 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3087 = ((_3083 * _3083) * (_3065 + (-1.0))) + 1.0;
                        float _3088 = _3023 * _3064;
                        float _3089 = _3088 * _3088;
                        float _3092 = ((1.0 - _3089) * _3013) + _3089;
                        float _4358 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3093 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3094 = 1.0 - _3064;
                        float _3104 = (0.5 / (((_3093 * ((_3079 * _3094) + _3064)) + 9.9999999392252902907785028219223e-09) + (((_3093 * _3094) + _3064) * _3079))) * _3093;
                        float _4369 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3115 = (((_3065 * 3.1415927410125732421875) * (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) / ((_3087 * _3087) * ((_3030 * 2.1991131305694580078125) + 3.141590118408203125))) * _3019;
                        _2872 = (_3034 * _2982.x) + _2940;
                        _2873 = (_3034 * _2982.y) + _2941;
                        _2874 = (_3034 * _2982.z) + _2942;
                        _2869 = (_3115 * _2999.x) + _2937;
                        _2870 = (_3115 * _2999.y) + _2938;
                        _2871 = (_3115 * _2999.z) + _2939;
                        if (_2944 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2937 = _2869;
                            _2938 = _2870;
                            _2939 = _2871;
                            _2940 = _2872;
                            _2941 = _2873;
                            _2942 = _2874;
                            _2943 = _2944;
                        }
                    }
                    frontier_phi_61_pred = _2869;
                    frontier_phi_61_pred_1 = _2874;
                    frontier_phi_61_pred_2 = _2873;
                    frontier_phi_61_pred_3 = _2872;
                    frontier_phi_61_pred_4 = _2871;
                    frontier_phi_61_pred_5 = _2870;
                }
                _2669 = frontier_phi_61_pred;
                _2679 = frontier_phi_61_pred_1;
                _2677 = frontier_phi_61_pred_2;
                _2675 = frontier_phi_61_pred_3;
                _2673 = frontier_phi_61_pred_4;
                _2671 = frontier_phi_61_pred_5;
                uint _2820 = _2819 + 1u;
                if (_2820 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2813 = _2669;
                    _2814 = _2671;
                    _2815 = _2673;
                    _2816 = _2675;
                    _2817 = _2677;
                    _2818 = _2679;
                    _2819 = _2820;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
        }
        uvec4 _2682 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2683 = _2682.z;
        uint _2685 = (_2683 >> 8u) & 15u;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        if (((4294967295u << _2685) & _2567) == 0u)
        {
            _2781 = _2668;
            _2783 = _2670;
            _2785 = _2672;
            _2787 = _2674;
            _2789 = _2676;
            _2791 = _2678;
        }
        else
        {
            float _2806 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
            float _2807 = _2806 * _2521;
            float _2808 = _2806 * _2522;
            float _2809 = _2806 * _2523;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2685 < ((_2683 >> 12u) & 15u))
            {
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2920 = _2668;
                float _2921 = _2670;
                float _2922 = _2672;
                float _2923 = _2674;
                float _2924 = _2676;
                float _2925 = _2678;
                uint _2926 = _2685;
                uint _2935;
                bool _2936;
                for (;;)
                {
                    _2935 = texelFetch(g_lightClassification, int((((_2561 << 5u) + (_2547 << 9u)) + (_2926 << 2u)) >> 2u)).x;
                    _2936 = _2935 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2936)
                    {
                        frontier_phi_67_pred = _2923;
                        frontier_phi_67_pred_1 = _2924;
                        frontier_phi_67_pred_2 = _2925;
                        frontier_phi_67_pred_3 = _2922;
                        frontier_phi_67_pred_4 = _2921;
                        frontier_phi_67_pred_5 = _2920;
                    }
                    else
                    {
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3133 = _2920;
                        float _3134 = _2921;
                        float _3135 = _2922;
                        float _3136 = _2923;
                        float _3137 = _2924;
                        float _3138 = _2925;
                        uint _3139 = _2935;
                        uint _3140;
                        vec4 _3165;
                        float _3166;
                        vec4 _3181;
                        vec3 _3193;
                        vec4 _3208;
                        vec4 _3223;
                        float _3270;
                        bool _3271;
                        for (;;)
                        {
                            uint _3150 = ((_2926 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3139));
                            _3140 = (_3139 + 4294967295u) & _3139;
                            uint _3152 = _3150 * 40u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            _3166 = _3165.w;
                            uint _3168 = (_3150 * 40u) + 4u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3183 = (_3150 * 40u) + 8u;
                            _3193 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x));
                            uint _3195 = (_3150 * 40u) + 16u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3210 = (_3150 * 40u) + 20u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3226 = (_3150 * 40u) + 24u;
                            vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            uint _3245 = (_3150 * 40u) + 28u;
                            vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            _3270 = fma(_2523, _3258.z, fma(_2522, _3258.y, _3258.x * _2521)) + _3258.w;
                            _3271 = !((fma(_2523, _3239.z, fma(_2522, _3239.y, _3239.x * _2521)) + _3239.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3271)
                            {
                                float _3298 = _3165.x - _2521;
                                float _3299 = _3165.y - _2522;
                                float _3300 = _3165.z - _2523;
                                float _3301 = dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300));
                                float _3304 = inversesqrt(_3301);
                                float _3305 = _3304 * _3298;
                                float _3306 = _3304 * _3299;
                                float _3307 = _3304 * _3300;
                                float _3311 = 1.0 - (_3301 / (_3166 * _3166));
                                float _4380 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3312 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3316 = sqrt(_3301) * _3181.w;
                                float _3318 = 1.39999997615814208984375 / (_3316 + 1.39999997615814208984375);
                                float _3319 = _3318 * _3318;
                                float _3322 = ((1.0 - _3319) * dot(vec3(_3305, _3306, _3307), vec3(_784, _787, _790))) + _3319;
                                float _3325 = _3316 * _3316;
                                float _3329 = (fma(_2523, _3208.z, fma(_2522, _3208.y, _3208.x * _2521)) + _3208.w) / _3270;
                                float _3330 = (fma(_2523, _3223.z, fma(_2522, _3223.y, _3223.x * _2521)) + _3223.w) / _3270;
                                float _3334 = 1.0 - dot(vec2(_3329, _3330), vec2(_3329, _3330));
                                float _4396 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3335 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3336 = _3335 * (((isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0))) * _3312) / ((_3325 * 0.699999988079071044921875) + 1.0));
                                float _3348 = exp2(log2(1.0 / ((_3325 * 3.5) + 5.0)) * 0.25);
                                float _3349 = 1.0 - _859;
                                float _3356 = sqrt(1.0 - ((1.0 - (_3349 * _3349)) * (1.0 - (_3348 * _3348))));
                                float _3357 = _3356 * _3356;
                                float _3358 = _3357 * _3357;
                                float _3359 = _3305 - _2807;
                                float _3360 = _3306 - _2808;
                                float _3361 = _3307 - _2809;
                                float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                                float _3369 = dot(vec3(_784, _787, _790), vec3((-0.0) - _2807, (-0.0) - _2808, (-0.0) - _2809));
                                float _4407 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3372 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3373 = dot(vec3(_784, _787, _790), vec3(_3365 * _3359, _3365 * _3360, _3365 * _3361));
                                float _4418 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3376 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3380 = ((_3376 * _3376) * (_3358 + (-1.0))) + 1.0;
                                float _3381 = _3318 * _3357;
                                float _3382 = _3381 * _3381;
                                float _3388 = ((1.0 - _3382) * dot(vec3(_784, _787, _790), vec3(_3305, _3306, _3307))) + _3382;
                                float _4429 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3390 = 1.0 - _3357;
                                float _3400 = (0.5 / (((_3389 * ((_3372 * _3390) + _3357)) + 9.9999999392252902907785028219223e-09) + (((_3389 * _3390) + _3357) * _3372))) * _3389;
                                float _4440 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3410 = (_3335 * _3312) * (((_3358 * 3.1415927410125732421875) * (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) / ((_3380 * _3380) * ((_3325 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3410 * _3193.x;
                                frontier_phi_73_pred_1 = _3410 * _3193.y;
                                frontier_phi_73_pred_2 = _3336 * _3181.z;
                                frontier_phi_73_pred_3 = _3336 * _3181.y;
                                frontier_phi_73_pred_4 = _3336 * _3181.x;
                                frontier_phi_73_pred_5 = _3410 * _3193.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3414 = frontier_phi_73_pred;
                            _3415 = frontier_phi_73_pred_1;
                            _3419 = frontier_phi_73_pred_2;
                            _3418 = frontier_phi_73_pred_3;
                            _3417 = frontier_phi_73_pred_4;
                            _3416 = frontier_phi_73_pred_5;
                            _3123 = _3417 + _3136;
                            _3124 = _3418 + _3137;
                            _3125 = _3419 + _3138;
                            _3120 = _3414 + _3133;
                            _3121 = _3415 + _3134;
                            _3122 = _3416 + _3135;
                            if (_3140 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3140;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3123;
                        frontier_phi_67_pred_1 = _3124;
                        frontier_phi_67_pred_2 = _3125;
                        frontier_phi_67_pred_3 = _3122;
                        frontier_phi_67_pred_4 = _3121;
                        frontier_phi_67_pred_5 = _3120;
                    }
                    _2788 = frontier_phi_67_pred;
                    _2790 = frontier_phi_67_pred_1;
                    _2792 = frontier_phi_67_pred_2;
                    _2786 = frontier_phi_67_pred_3;
                    _2784 = frontier_phi_67_pred_4;
                    _2782 = frontier_phi_67_pred_5;
                    uint _2927 = _2926 + 1u;
                    if (_2927 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2920 = _2782;
                        _2921 = _2784;
                        _2922 = _2786;
                        _2923 = _2788;
                        _2924 = _2790;
                        _2925 = _2792;
                        _2926 = _2927;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2790;
                frontier_phi_55_56_ladder_1 = _2792;
                frontier_phi_55_56_ladder_2 = _2788;
                frontier_phi_55_56_ladder_3 = _2786;
                frontier_phi_55_56_ladder_4 = _2784;
                frontier_phi_55_56_ladder_5 = _2782;
            }
            else
            {
                frontier_phi_55_56_ladder = _2676;
                frontier_phi_55_56_ladder_1 = _2678;
                frontier_phi_55_56_ladder_2 = _2674;
                frontier_phi_55_56_ladder_3 = _2672;
                frontier_phi_55_56_ladder_4 = _2670;
                frontier_phi_55_56_ladder_5 = _2668;
            }
            _2781 = frontier_phi_55_56_ladder_5;
            _2783 = frontier_phi_55_56_ladder_4;
            _2785 = frontier_phi_55_56_ladder_3;
            _2787 = frontier_phi_55_56_ladder_2;
            _2789 = frontier_phi_55_56_ladder;
            _2791 = frontier_phi_55_56_ladder_1;
        }
        float _2796 = isnan(1.0) ? _843 : (isnan(_843) ? 1.0 : min(_843, 1.0));
        _2580 = (_2796 * _2787) + _2016;
        _2582 = (_2796 * _2789) + _2018;
        _2584 = (_2796 * _2791) + _2020;
        _2586 = ((_2781 * _828) * _2796) + _2361;
        _2588 = ((_2783 * _830) * _2796) + _2363;
        _2590 = ((_2785 * _831) * _2796) + _2365;
    }
    else
    {
        _2580 = _2016;
        _2582 = _2018;
        _2584 = _2020;
        _2586 = _2361;
        _2588 = _2363;
        _2590 = _2365;
    }
    float _4456 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4467 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4478 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    uint _2610 = _803 + 6u;
    float _2618 = _765 / cbSceneParam._m0[86u].x;
    float _2619 = _766 / cbSceneParam._m0[86u].y;
    vec4 _2633 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2618, _2619, (log2((isnan(cbSceneParam._m0[77u].w) ? _700 : (isnan(_700) ? cbSceneParam._m0[77u].w : min(_700, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2635 = _2633.x;
    float _2636 = _2633.y;
    float _2637 = _2633.z;
    float _2638 = _2633.w;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    if (_700 > cbSceneParam._m0[78u].w)
    {
        float _2693 = isnan(_700) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _700 : min(cbSceneParam._m0[80u].w, _700));
        float _2694 = _2693 / _700;
        float _2705 = _2694 * _750;
        float _2706 = _751 * _2694;
        float _2707 = (-0.0) - _2706;
        float _2709 = _2694 * _752;
        float _2711 = (cbSceneParam._m0[77u].w * _2707) / _2693;
        float _2712 = _2711 + cbSceneParam._m0[79u].w;
        float _2713 = cbSceneParam._m0[79u].w - _2706;
        float _2719 = sqrt(((_2705 * _2705) + (_2706 * _2706)) + (_2709 * _2709));
        float _2722 = (1.0 - (cbSceneParam._m0[77u].w / _2693)) * _2719;
        float _2727 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2729 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2882;
        if (abs((_2707 - _2711) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2882 = ((((_2712 > 0.0) ? exp2(_2727 * _2712) : (2.0 - exp2(_2729 * _2712))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2722;
        }
        else
        {
            float _2842 = 1.0 / cbSceneParam._m0[80u].x;
            float _2843 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : max(_2712, _2713));
            float _2844 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : min(_2712, _2713));
            float _2853 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : min(_2843, 0.0));
            float _2854 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : min(_2844, 0.0));
            _2882 = ((abs(_2719 / _2707) * cbSceneParam._m0[80u].y) * ((((_2853 - _2854) * 2.0) - ((exp2(_2727 * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0)))) - exp2(_2727 * (isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0))))) * _2842)) - ((exp2(_2729 * _2853) - exp2(_2729 * _2854)) * _2842))) + (_2722 * cbSceneParam._m0[80u].z);
        }
        vec4 _2884 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2618, _2619, 1.0), 0.0);
        float _2893 = exp2((_2882 * (-1.44269502162933349609375)) * (1.0 - _2884.w));
        float _2894 = log2(_2893);
        float _2910 = log2(_2638);
        _2731 = (exp2(_2910 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2894 * cbSceneParam._m0[78u].x)) * _2884.x) / cbSceneParam._m0[78u].x)) + _2635;
        _2733 = (exp2(_2910 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2894 * cbSceneParam._m0[78u].y)) * _2884.y) / cbSceneParam._m0[78u].y)) + _2636;
        _2735 = (exp2(_2910 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2894 * cbSceneParam._m0[78u].z)) * _2884.z) / cbSceneParam._m0[78u].z)) + _2637;
        _2737 = _2893 * _2638;
    }
    else
    {
        _2731 = _2635;
        _2733 = _2636;
        _2735 = _2637;
        _2737 = _2638;
    }
    float _2749 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2750 = _2749 == 3.0;
    float _2751 = log2(_2737);
    float _2758 = exp2(_2751 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2580 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _843))) + ((_2586 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1653)) * cbPerFrame._m0[3u].x));
    float _2759 = exp2(_2751 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2582 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _843))) + ((_2588 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1653)) * cbPerFrame._m0[3u].x));
    float _2760 = exp2(_2751 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2584 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _843))) + ((_2590 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1653)) * cbPerFrame._m0[3u].x));
    float _2769 = (_2749 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2769 * (_2750 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2731)));
    SV_Target.y = _2769 * (_2750 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2733)));
    SV_Target.z = _2769 * (_2750 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2735)));
    SV_Target.w = cbInstanceData._m0[_2610].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2610].w;
}


