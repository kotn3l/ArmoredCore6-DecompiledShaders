#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1360;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _268 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _268.x * cbMtdParam._m0[10u].x;
    float _275 = _268.y * cbMtdParam._m0[10u].y;
    float _276 = _268.z * cbMtdParam._m0[10u].z;
    vec4 _294 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _344 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _354 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _344)) + 1.0;
    float _3971 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _355 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _362 = (_355 * ((_294.x * cbMtdParam._m0[11u].x) - _274)) + _274;
    float _363 = (_355 * ((_294.y * cbMtdParam._m0[11u].y) - _275)) + _275;
    float _364 = (_355 * ((_294.z * cbMtdParam._m0[11u].z) - _276)) + _276;
    vec4 _382 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _413 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _344)) + 1.0;
    float _3982 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _421 = (_414 * ((_382.x * cbMtdParam._m0[12u].x) - _362)) + _362;
    float _422 = (_414 * ((_382.y * cbMtdParam._m0[12u].y) - _363)) + _363;
    float _423 = (_414 * ((_382.z * cbMtdParam._m0[12u].z) - _364)) + _364;
    vec4 _441 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _466 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _344)) + 1.0;
    float _3993 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _474 = (_467 * ((_441.x * cbMtdParam._m0[13u].x) - _421)) + _421;
    float _475 = (_467 * ((_441.y * cbMtdParam._m0[13u].y) - _422)) + _422;
    float _476 = (_467 * ((_441.z * cbMtdParam._m0[13u].z) - _423)) + _423;
    vec4 _497 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _526 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _4004 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _534 = (_527 * ((_497.x * cbMtdParam._m0[15u].x) - _474)) + _474;
    float _535 = (_527 * ((_497.y * cbMtdParam._m0[15u].y) - _475)) + _475;
    float _536 = (_527 * ((_497.z * cbMtdParam._m0[15u].z) - _476)) + _476;
    vec4 _549 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _551 = _549.x;
    float _569 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _551) * _355) + _551;
    float _587 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _569) * _414) + _569;
    float _604 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _587) * _467) + _587;
    vec4 _616 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _636 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _638 = _636.x;
    float _639 = _636.y;
    float _645 = cbMtdParam._m0[18u].y * _636.z;
    vec4 _657 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _666 = (((cbMtdParam._m0[18u].x * _657.z) - _645) * _355) + _645;
    vec4 _679 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _690 = (((cbMtdParam._m0[17u].w * _679.z) - _666) * _414) + _666;
    vec4 _703 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _712 = (((cbMtdParam._m0[17u].z * _703.z) - _690) * _467) + _690;
    vec4 _725 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _739 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_725.z * cbMtdParam._m0[19u].y) - _712)) + _712;
    vec4 _752 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _764 = ((_657.x - _638) * _355) + _638;
    float _765 = ((_657.y - _639) * _355) + _639;
    float _770 = ((_679.x - _764) * _414) + _764;
    float _771 = ((_679.y - _765) * _414) + _765;
    float _780 = ((((_703.x - _770) * _467) + _770) * 2.0) + (-1.0);
    float _781 = ((((_703.y - _771) * _467) + _771) * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _4015 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _787 = sqrt(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))));
    float _804 = (((((_752.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _780) + ((((_616.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y)) + ((((_725.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _805 = (((((_752.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _781) + ((((_616.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y)) + ((((_725.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _808 = fma(_787, _238 * NORMAL.x, fma(_805, _245 * TANGENT.x, (_231 * _223) * _804));
    float _811 = fma(_787, _238 * NORMAL.y, fma(_805, _245 * TANGENT.y, (_231 * _224) * _804));
    float _814 = fma(_787, _238 * NORMAL.z, fma(_805, _245 * TANGENT.z, (_231 * _225) * _804));
    float _818 = inversesqrt(dot(vec3(_808, _811, _814), vec3(_808, _811, _814)));
    float _819 = _818 * _808;
    float _820 = _818 * _811;
    float _821 = _818 * _814;
    float _4026 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _822 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4048 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4059 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _4070 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _826 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _842 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _892 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _882);
    float _893 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _882);
    float _894 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _882);
    float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
    float _899 = _892 * _898;
    float _900 = _893 * _898;
    float _901 = _894 * _898;
    float _907 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _908 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _926 = fma(_821, cbSceneParam._m0[5u].z, fma(_820, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _819));
    float _929 = fma(_821, cbSceneParam._m0[6u].z, fma(_820, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _819));
    float _932 = fma(_821, cbSceneParam._m0[7u].z, fma(_820, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _819));
    uint _945 = uint(roundEven(NORMAL.w)) * 13u;
    uint _947 = (_945 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _953 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_947].x;
    float _954 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_947].y;
    float _955 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_947].z;
    float _4081 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _959 = 1.0 - _826;
    float _960 = _956 * _959;
    float _961 = _957 * _959;
    float _962 = _958 * _959;
    float _967 = (_956 + (-0.039999999105930328369140625)) * _826;
    float _968 = (_957 + (-0.039999999105930328369140625)) * _826;
    float _969 = (_958 + (-0.039999999105930328369140625)) * _826;
    float _970 = _967 + 0.039999999105930328369140625;
    float _972 = _968 + 0.039999999105930328369140625;
    float _973 = _969 + 0.039999999105930328369140625;
    vec4 _982 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _907, cbSceneParam._m0[86u].y * _908));
    float _985 = _982.x * TEXCOORD_5.w;
    float _986 = dot(vec3(_819, _820, _821), vec3(_899, _900, _901));
    float _989 = _986 * 2.0;
    float _993 = (_989 * _819) - _899;
    float _994 = (_989 * _820) - _900;
    float _995 = (_989 * _821) - _901;
    float _999 = abs(dot(vec3(_899, _900, _901), vec3(_819, _820, _821)));
    float _4114 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1001 = sqrt(_822);
    float _1014 = exp2((_1001 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1001 * 3.0));
    float _1020 = (1.0 - _1014) * ((_1001 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1021 = _1014 * _1001;
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1359;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1084 = fma(_1057, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1049));
        float _1088 = fma(_1057, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1049));
        float _1092 = fma(_1057, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1049));
        float _1117 = _1049 + _819;
        float _1118 = _1053 + _820;
        float _1119 = _1057 + _821;
        float _1129 = fma(_1119, cbModelParam._m0[26u].z, fma(_1118, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1117)) - _1084;
        float _1130 = fma(_1119, cbModelParam._m0[27u].z, fma(_1118, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1117)) - _1088;
        float _1131 = fma(_1119, cbModelParam._m0[28u].z, fma(_1118, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1117)) - _1092;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1084 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1088 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[34u].z) + ((((((_1092 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1187 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1153.x + (-0.5));
        float _1189 = _1187 * (_1153.y + (-0.5));
        float _1190 = _1187 * (_1153.z + (-0.5));
        float _1197 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1160.x + (-0.5));
        float _1199 = _1197 * (_1160.y + (-0.5));
        float _1200 = _1197 * (_1160.z + (-0.5));
        float _1207 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1167.x + (-0.5));
        float _1209 = _1207 * (_1167.y + (-0.5));
        float _1210 = _1207 * (_1167.z + (-0.5));
        float _1217 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1174.x + (-0.5));
        float _1219 = _1217 * (_1174.y + (-0.5));
        float _1220 = _1217 * (_1174.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1241 = (dot(vec3(_819, _820, _821), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1251 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4162 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1253 + 1.0))) + _1258) * _1221;
        float _1268 = _1189 * 0.5;
        float _1269 = _1199 * 0.5;
        float _1270 = _1209 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_819, _820, _821), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4195 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1295 + 1.0))) + _1300) * _1222;
        float _1310 = _1190 * 0.5;
        float _1311 = _1200 * 0.5;
        float _1312 = _1210 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_819, _820, _821), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4228 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1337 + 1.0))) + _1342) * _1223;
        _1359 = _1190;
        _1361 = _1189;
        _1362 = _1188;
        _1363 = _1200;
        _1364 = _1199;
        _1365 = _1198;
        _1366 = _1210;
        _1367 = _1209;
        _1368 = _1208;
        _1369 = _1223;
        _1370 = _1222;
        _1371 = _1221;
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1360;
        _1361 = _1360;
        _1362 = _1360;
        _1363 = _1360;
        _1364 = _1360;
        _1365 = _1360;
        _1366 = _1360;
        _1367 = _1360;
        _1368 = _1360;
        _1369 = _1360;
        _1370 = _1360;
        _1371 = _1360;
        _1372 = 0.0;
        _1373 = 0.0;
        _1374 = 0.0;
    }
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1400 = fma(_1057, cbModelParam._m0[30u].z, fma(_1053, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049));
        float _1404 = fma(_1057, cbModelParam._m0[31u].z, fma(_1053, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049));
        float _1408 = fma(_1057, cbModelParam._m0[32u].z, fma(_1053, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049));
        float _1431 = _1049 + _819;
        float _1432 = _1053 + _820;
        float _1433 = _1057 + _821;
        float _1443 = fma(_1433, cbModelParam._m0[30u].z, fma(_1432, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1431)) - _1400;
        float _1444 = fma(_1433, cbModelParam._m0[31u].z, fma(_1432, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1431)) - _1404;
        float _1445 = fma(_1433, cbModelParam._m0[32u].z, fma(_1432, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1431)) - _1408;
        float _1449 = inversesqrt(dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445)));
        float _1462 = ((_1449 * _1443) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1400 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1449 * _1444) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1404 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1449 * _1445) / cbModelParam._m0[35u].z) + ((((((_1408 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        float _1499 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1466.x + (-0.5));
        float _1501 = _1499 * (_1466.y + (-0.5));
        float _1502 = _1499 * (_1466.z + (-0.5));
        float _1509 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1473.x + (-0.5));
        float _1511 = _1509 * (_1473.y + (-0.5));
        float _1512 = _1509 * (_1473.z + (-0.5));
        float _1519 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1480.x + (-0.5));
        float _1521 = _1519 * (_1480.y + (-0.5));
        float _1522 = _1519 * (_1480.z + (-0.5));
        float _1529 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1487.x + (-0.5));
        float _1531 = _1529 * (_1487.y + (-0.5));
        float _1532 = _1529 * (_1487.z + (-0.5));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = _1500 * 0.5;
        float _1537 = _1510 * 0.5;
        float _1538 = _1520 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_819, _820, _821), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4291 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1563 + 1.0))) + _1568) * _1533;
        float _1578 = _1501 * 0.5;
        float _1579 = _1511 * 0.5;
        float _1580 = _1521 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_819, _820, _821), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4324 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1605 + 1.0))) + _1610) * _1534;
        float _1620 = _1502 * 0.5;
        float _1621 = _1512 * 0.5;
        float _1622 = _1522 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_819, _820, _821), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4357 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1647 + 1.0))) + _1652) * _1535;
        _1669 = _1502;
        _1670 = _1501;
        _1671 = _1500;
        _1672 = _1512;
        _1673 = _1511;
        _1674 = _1510;
        _1675 = _1522;
        _1676 = _1521;
        _1677 = _1520;
        _1678 = _1535;
        _1679 = _1534;
        _1680 = _1533;
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
    }
    else
    {
        _1669 = _1360;
        _1670 = _1360;
        _1671 = _1360;
        _1672 = _1360;
        _1673 = _1360;
        _1674 = _1360;
        _1675 = _1360;
        _1676 = _1360;
        _1677 = _1360;
        _1678 = _1360;
        _1679 = _1360;
        _1680 = _1360;
        _1681 = 0.0;
        _1682 = 0.0;
        _1683 = 0.0;
    }
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1372)) + _1372;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1373)) + _1373;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1374)) + _1374;
    float _1716 = fma(_1695, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1693 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1695, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1693 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1695, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1693));
    float _1737 = _993 * 0.5;
    float _1738 = _994 * 0.5;
    float _1739 = _995 * 0.5;
    float _1740 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1743 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1746 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1780;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1753 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1359, _1363, _1366, _1369));
        float _1757 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1761 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1362, _1365, _1368, _1371));
        float _1768 = dot(vec4(cbModelParam._m0[39u]), vec4(_1737, _1738, _1739, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1768) ? 0.0 : (isnan(0.0) ? _1768 : max(0.0, _1768))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1791;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1782 = dot(vec4(cbModelParam._m0[40u]), vec4(_1737, _1738, _1739, 1.0));
        _1791 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1791 = 1.0;
    }
    float _1795 = (_1791 * cbModelParam._m0[1u].x) + (_1780 * (1.0 - cbModelParam._m0[1u].x));
    float _1805 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1805 : min(cbModelParam._m0[25u].z, _1805));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1853 = fma(_1057, cbModelParam._m0[13u].z, fma(_1053, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1049)) + cbModelParam._m0[13u].w;
        float _1857 = fma(_1057, cbModelParam._m0[14u].z, fma(_1053, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1049)) + cbModelParam._m0[14u].w;
        float _1861 = fma(_1057, cbModelParam._m0[15u].z, fma(_1053, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1049)) + cbModelParam._m0[15u].w;
        float _1864 = fma(_995, cbModelParam._m0[13u].z, fma(_994, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993));
        float _1867 = fma(_995, cbModelParam._m0[14u].z, fma(_994, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993));
        float _1870 = fma(_995, cbModelParam._m0[15u].z, fma(_994, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993));
        float _1898;
        if (_1864 > 0.0)
        {
            _1898 = abs((1.0 - _1853) / _1864);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1853 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1898 = frontier_phi_14_12_ladder;
        }
        float _2069;
        if (_1867 > 0.0)
        {
            _2069 = abs((1.0 - _1857) / _1867);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1857 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2069 = frontier_phi_23_19_ladder;
        }
        float _2365;
        if (_1870 > 0.0)
        {
            _2365 = abs((1.0 - _1861) / _1870);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1861 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2365 = frontier_phi_35_30_ladder;
        }
        float _2367 = isnan(_2069) ? _1898 : (isnan(_1898) ? _2069 : min(_1898, _2069));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1864) + _1853;
        float _2373 = (_2368 * _1867) + _1857;
        float _2374 = (_2368 * _1870) + _1861;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2375;
        float _2379 = _2375 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 > _2379) || ((_2373 < _2377) || ((_2372 < _2377) || (_2372 > _2379))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2519 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2374, cbModelParam._m0[9u].z, fma(_2373, cbModelParam._m0[9u].y, _2372 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2374, cbModelParam._m0[10u].z, fma(_2373, cbModelParam._m0[10u].y, _2372 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2374, cbModelParam._m0[11u].z, fma(_2373, cbModelParam._m0[11u].y, _2372 * cbModelParam._m0[11u].x))), _1806);
            frontier_phi_13_35_ladder = _2519.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2519.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2519.x * cbModelParam._m0[1u].y;
        }
        _1886 = frontier_phi_13_35_ladder_2;
        _1888 = frontier_phi_13_35_ladder_1;
        _1890 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_993, _994, _995), _1806);
        _1886 = _1874.x * cbModelParam._m0[1u].y;
        _1888 = _1874.y * cbModelParam._m0[1u].y;
        _1890 = _1874.z * cbModelParam._m0[1u].y;
    }
    float _1894 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1894 : min(cbModelParam._m0[25u].w, _1894));
    float _1984;
    float _1986;
    float _1988;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1948 = fma(_1057, cbModelParam._m0[21u].z, fma(_1053, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1049)) + cbModelParam._m0[21u].w;
        float _1952 = fma(_1057, cbModelParam._m0[22u].z, fma(_1053, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1049)) + cbModelParam._m0[22u].w;
        float _1956 = fma(_1057, cbModelParam._m0[23u].z, fma(_1053, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1049)) + cbModelParam._m0[23u].w;
        float _1959 = fma(_995, cbModelParam._m0[21u].z, fma(_994, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993));
        float _1962 = fma(_995, cbModelParam._m0[22u].z, fma(_994, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993));
        float _1965 = fma(_995, cbModelParam._m0[23u].z, fma(_994, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993));
        float _2074;
        if (_1959 > 0.0)
        {
            _2074 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2074 = frontier_phi_25_21_ladder;
        }
        float _2392;
        if (_1962 > 0.0)
        {
            _2392 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2392 = frontier_phi_37_32_ladder;
        }
        float _2730;
        if (_1965 > 0.0)
        {
            _2730 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2730 = frontier_phi_47_44_ladder;
        }
        float _2732 = isnan(_2392) ? _2074 : (isnan(_2074) ? _2392 : min(_2074, _2392));
        float _2733 = isnan(_2730) ? _2732 : (isnan(_2732) ? _2730 : min(_2732, _2730));
        float _2737 = (_2733 * _1959) + _1948;
        float _2738 = (_2733 * _1962) + _1952;
        float _2739 = (_2733 * _1965) + _1956;
        float _2740 = _2733 * 9.9999997473787516355514526367188e-05;
        float _2741 = (-1.0) - _2740;
        float _2743 = _2740 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2739 > _2743) || ((_2739 < _2741) || ((_2738 > _2743) || ((_2738 < _2741) || ((_2737 < _2741) || (_2737 > _2743))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2861 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2739, cbModelParam._m0[17u].z, fma(_2738, cbModelParam._m0[17u].y, _2737 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2739, cbModelParam._m0[18u].z, fma(_2738, cbModelParam._m0[18u].y, _2737 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2739, cbModelParam._m0[19u].z, fma(_2738, cbModelParam._m0[19u].y, _2737 * cbModelParam._m0[19u].x))), _1895);
            frontier_phi_22_47_ladder = _2861.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2861.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2861.x * cbModelParam._m0[1u].z;
        }
        _1984 = frontier_phi_22_47_ladder_2;
        _1986 = frontier_phi_22_47_ladder_1;
        _1988 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_993, _994, _995), _1895);
        _1984 = _1968.x * cbModelParam._m0[1u].z;
        _1986 = _1968.y * cbModelParam._m0[1u].z;
        _1988 = _1968.z * cbModelParam._m0[1u].z;
    }
    float _2001 = (((_1020 * _970) + _1021) * _985) * ((cbModelParam._m0[1u].w * (_1984 - _1886)) + _1886);
    float _2003 = (((_1020 * _972) + _1021) * _985) * ((cbModelParam._m0[1u].w * (_1986 - _1888)) + _1888);
    float _2005 = (((_1020 * _973) + _1021) * _985) * ((cbModelParam._m0[1u].w * (_1988 - _1890)) + _1890);
    float _2008 = fma(_2005, cbSceneParam._m0[89u].z, fma(_2003, cbSceneParam._m0[89u].y, _2001 * cbSceneParam._m0[89u].x));
    float _2011 = fma(_2005, cbSceneParam._m0[90u].z, fma(_2003, cbSceneParam._m0[90u].y, _2001 * cbSceneParam._m0[90u].x));
    float _2014 = fma(_2005, cbSceneParam._m0[91u].z, fma(_2003, cbSceneParam._m0[91u].y, _2001 * cbSceneParam._m0[91u].x));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2052 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2056 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2060 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2061 = _2048 / _2060;
    float _2062 = _2052 / _2060;
    float _2063 = _2056 / _2060;
    float _2210;
    float _2211;
    float _2212;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2090 = ((uint(_2063 > cbSceneParam._m0[59u].y) + uint(_2063 > cbSceneParam._m0[59u].x)) + uint(_2063 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2091 = _2090 + 43u;
        uint _2099 = _2090 + 44u;
        uint _2107 = _2090 + 45u;
        uint _2115 = _2090 + 46u;
        float _2126 = fma(_2060, cbSceneParam._m0[_2091].w, fma(_2056, cbSceneParam._m0[_2091].z, fma(_2052, cbSceneParam._m0[_2091].y, _2048 * cbSceneParam._m0[_2091].x)));
        float _2130 = fma(_2060, cbSceneParam._m0[_2099].w, fma(_2056, cbSceneParam._m0[_2099].z, fma(_2052, cbSceneParam._m0[_2099].y, _2048 * cbSceneParam._m0[_2099].x)));
        float _2138 = fma(_2060, cbSceneParam._m0[_2115].w, fma(_2056, cbSceneParam._m0[_2115].z, fma(_2052, cbSceneParam._m0[_2115].y, _2048 * cbSceneParam._m0[_2115].x)));
        float _2143 = cbSceneParam._m0[33u].z * _2138;
        float _2145 = cbSceneParam._m0[33u].w * _2138;
        float _2148 = fma(_2060, cbSceneParam._m0[_2107].w, fma(_2056, cbSceneParam._m0[_2107].z, fma(_2052, cbSceneParam._m0[_2107].y, _2048 * cbSceneParam._m0[_2107].x))) / _2138;
        float _2196 = (cbSceneParam._m0[33u].x - sqrt(((_2062 * _2062) + (_2061 * _2061)) + (_2063 * _2063))) * cbSceneParam._m0[33u].y;
        float _4483 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2203 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2143 + _2126) / _2138, (_2145 + _2130) / _2138), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 + _2126) / _2138, (_2130 - _2143) / _2138), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2126 - _2143) / _2138, (_2130 - _2145) / _2138), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2126 - _2145) / _2138, (_2143 + _2130) / _2138), _2148), 0.0)).x), vec4(0.25)));
        _2210 = 1.0 - (_2203 * cbSceneParam._m0[34u].x);
        _2211 = 1.0 - (_2203 * cbSceneParam._m0[34u].y);
        _2212 = 1.0 - (_2203 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2210 = 1.0;
        _2211 = 1.0;
        _2212 = 1.0;
    }
    float _2276;
    float _2278;
    float _2280;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2264 = fma(_2060, cbSceneParam._m0[63u].w, fma(_2056, cbSceneParam._m0[63u].z, fma(_2052, cbSceneParam._m0[63u].y, _2048 * cbSceneParam._m0[63u].x)));
        float _2265 = fma(_2060, cbSceneParam._m0[60u].w, fma(_2056, cbSceneParam._m0[60u].z, fma(_2052, cbSceneParam._m0[60u].y, _2048 * cbSceneParam._m0[60u].x))) / _2264;
        float _2266 = fma(_2060, cbSceneParam._m0[61u].w, fma(_2056, cbSceneParam._m0[61u].z, fma(_2052, cbSceneParam._m0[61u].y, _2048 * cbSceneParam._m0[61u].x))) / _2264;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2265 >= cbSceneParam._m0[64u].x) && (_2266 >= cbSceneParam._m0[64u].y)) && (_2265 <= cbSceneParam._m0[64u].z)) && (_2266 <= cbSceneParam._m0[64u].w))
        {
            float _2405 = fma(_2060, cbSceneParam._m0[62u].w, fma(_2056, cbSceneParam._m0[62u].z, fma(_2052, cbSceneParam._m0[62u].y, _2048 * cbSceneParam._m0[62u].x))) / _2264;
            float _2409 = isnan(cbSceneParam._m0[41u].w) ? _2405 : (isnan(_2405) ? cbSceneParam._m0[41u].w : max(_2405, cbSceneParam._m0[41u].w));
            float _2452 = (cbSceneParam._m0[33u].x - sqrt(((_2062 * _2062) + (_2061 * _2061)) + (_2063 * _2063))) * cbSceneParam._m0[33u].y;
            float _4499 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
            float _2459 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2265, cbSceneParam._m0[33u].w + _2266), _2409), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2265, _2266 - cbSceneParam._m0[33u].z), _2409), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2265 - cbSceneParam._m0[33u].z, _2266 - cbSceneParam._m0[33u].w), _2409), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2265 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2266), _2409), 0.0)).x), vec4(0.25)));
            float _2463 = 1.0 - (_2459 * cbSceneParam._m0[34u].x);
            float _2464 = 1.0 - (_2459 * cbSceneParam._m0[34u].y);
            float _2465 = 1.0 - (_2459 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2465) ? _2212 : (isnan(_2212) ? _2465 : min(_2212, _2465));
            frontier_phi_34_33_ladder_1 = isnan(_2464) ? _2211 : (isnan(_2211) ? _2464 : min(_2211, _2464));
            frontier_phi_34_33_ladder_2 = isnan(_2463) ? _2210 : (isnan(_2210) ? _2463 : min(_2210, _2463));
        }
        else
        {
            frontier_phi_34_33_ladder = _2212;
            frontier_phi_34_33_ladder_1 = _2211;
            frontier_phi_34_33_ladder_2 = _2210;
        }
        _2276 = frontier_phi_34_33_ladder_2;
        _2278 = frontier_phi_34_33_ladder_1;
        _2280 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2276 = _2210;
        _2278 = _2211;
        _2280 = _2212;
    }
    uvec4 _2285 = floatBitsToUint(cbInstanceData._m0[_945 + 5u]);
    uint _2287 = _2285.x * 14u;
    uint _2288 = _2287 + 13u;
    float _2295 = _985 + (-1.0);
    float _2300 = (cbLight._m0[_2288].x * _2295) + 1.0;
    float _2301 = (cbLight._m0[_2288].y * _2295) + 1.0;
    float _2302 = (cbLight._m0[_2288].z * _2295) + 1.0;
    float _2303 = (cbLight._m0[_2288].w * _2295) + 1.0;
    uint _2304 = _2287 + 5u;
    float _2310 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
    uint _2314 = _2287 + 4u;
    float _2324 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
    uint _2328 = _2287 | 1u;
    float _2339 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_819, _820, _821));
    float _2342 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_819, _820, _821));
    float _4535 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _4546 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2347 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * 0.3183098733425140380859375;
    float _2349 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * 0.3183098733425140380859375;
    float _2356 = ((cbLight._m0[_2304].x * _2310) * _2349) + (((cbLight._m0[_2314].x * _2276) * _2324) * _2347);
    float _2357 = ((_2310 * cbLight._m0[_2304].y) * _2349) + (((cbLight._m0[_2314].y * _2278) * _2324) * _2347);
    float _2358 = ((_2310 * cbLight._m0[_2304].z) * _2349) + (((cbLight._m0[_2314].z * _2280) * _2324) * _2347);
    uvec4 _2362 = floatBitsToUint(cbLight._m0[_2287 + 12u]);
    bool _2364 = _2362.x == 0u;
    float _2466;
    float _2468;
    float _2470;
    if (_2364)
    {
        _2466 = _2356;
        _2468 = _2357;
        _2470 = _2358;
    }
    else
    {
        uint _2474 = _2287 + 6u;
        float _2490 = (dot(vec3(cbLight._m0[_2287 + 2u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2491 = _2490 * _2490;
        float _4557 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2492 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2493 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2466 = (((cbLight._m0[_2474].x * 0.3183098733425140380859375) * _2492) * _2493) + _2356;
        _2468 = (((cbLight._m0[_2474].y * 0.3183098733425140380859375) * _2492) * _2493) + _2357;
        _2470 = (((cbLight._m0[_2474].z * 0.3183098733425140380859375) * _2492) * _2493) + _2358;
    }
    bool _2473 = _2362.y == 0u;
    float _2528;
    float _2530;
    float _2532;
    if (_2473)
    {
        _2528 = _2466;
        _2530 = _2468;
        _2532 = _2470;
    }
    else
    {
        uint _2701 = _2287 + 7u;
        float _2717 = (dot(vec3(cbLight._m0[_2287 + 3u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2718 = _2717 * _2717;
        float _4573 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2719 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2720 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2528 = (((cbLight._m0[_2701].x * 0.3183098733425140380859375) * _2719) * _2720) + _2466;
        _2530 = (((cbLight._m0[_2701].y * 0.3183098733425140380859375) * _2719) * _2720) + _2468;
        _2532 = (((cbLight._m0[_2701].z * 0.3183098733425140380859375) * _2719) * _2720) + _2470;
    }
    uint _2535 = _2287 + 8u;
    float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _822) * 0.949999988079071044921875);
    float _2549 = _2548 * _2548;
    float _2550 = cbLight._m0[_2287].x + _899;
    float _2551 = cbLight._m0[_2287].y + _900;
    float _2552 = cbLight._m0[_2287].z + _901;
    float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
    float _2557 = _2556 * _2550;
    float _2558 = _2556 * _2551;
    float _2559 = _2556 * _2552;
    float _2560 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2287].xyz));
    float _4589 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _4600 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _2564 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2565 = dot(vec3(_819, _820, _821), vec3(_2557, _2558, _2559));
    float _4611 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2569 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2557, _2558, _2559));
    float _4622 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2573 = _2549 * _2549;
    float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
    float _2585 = exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0);
    float _2586 = 0.959999978542327880859375 - _967;
    float _2588 = 0.959999978542327880859375 - _968;
    float _2589 = 0.959999978542327880859375 - _969;
    float _2596 = 1.0 - _2549;
    float _2607 = (0.5 / (((_2564 * ((_2563 * _2596) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2596) + _2549) * _2563))) * _2563;
    float _4633 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2609 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
    uint _2623 = _2287 + 9u;
    float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _822) * 0.949999988079071044921875);
    float _2635 = _2634 * _2634;
    float _2636 = cbLight._m0[_2328].x + _899;
    float _2637 = cbLight._m0[_2328].y + _900;
    float _2638 = cbLight._m0[_2328].z + _901;
    float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
    float _2643 = _2642 * _2636;
    float _2644 = _2642 * _2637;
    float _2645 = _2642 * _2638;
    float _2646 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2328].xyz));
    float _4644 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2649 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2650 = dot(vec3(_819, _820, _821), vec3(_2643, _2644, _2645));
    float _4655 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2653 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2654 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2643, _2644, _2645));
    float _4666 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2658 = _2635 * _2635;
    float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
    float _2669 = exp2(log2(1.0 - (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * 5.0);
    float _2676 = 1.0 - _2635;
    float _2686 = (0.5 / (((_2564 * ((_2649 * _2676) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2676) + _2635) * _2649))) * _2649;
    float _4677 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2688 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
    float _2698 = (((((_2669 * _2586) + _970) * cbLight._m0[_2623].x) * _2688) * _2310) + ((((cbLight._m0[_2535].x * _2276) * ((_2585 * _2586) + _970)) * _2609) * _2324);
    float _2699 = (((((_2669 * _2588) + _972) * cbLight._m0[_2623].y) * _2688) * _2310) + ((((cbLight._m0[_2535].y * _2278) * ((_2585 * _2588) + _972)) * _2609) * _2324);
    float _2700 = (((((_2669 * _2589) + _973) * cbLight._m0[_2623].z) * _2688) * _2310) + ((((cbLight._m0[_2535].z * _2280) * ((_2585 * _2589) + _973)) * _2609) * _2324);
    float _2756;
    float _2758;
    float _2760;
    if (_2364)
    {
        _2756 = _2698;
        _2758 = _2699;
        _2760 = _2700;
    }
    else
    {
        uint _2762 = _2287 + 2u;
        uint _2766 = _2287 + 10u;
        float _2780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2762].w)) * _822) * 0.949999988079071044921875);
        float _2781 = _2780 * _2780;
        float _2782 = cbLight._m0[_2762].x + _899;
        float _2783 = cbLight._m0[_2762].y + _900;
        float _2784 = cbLight._m0[_2762].z + _901;
        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
        float _2789 = _2788 * _2782;
        float _2790 = _2788 * _2783;
        float _2791 = _2788 * _2784;
        float _2792 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2762].xyz));
        float _4688 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2795 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2796 = dot(vec3(_819, _820, _821), vec3(_2789, _2790, _2791));
        float _4699 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2800 = dot(vec3(cbLight._m0[_2762].xyz), vec3(_2789, _2790, _2791));
        float _4710 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2804 = _2781 * _2781;
        float _2808 = ((_2799 * _2799) * (_2804 + (-1.0))) + 1.0;
        float _2815 = exp2(log2(1.0 - (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) * 5.0);
        float _2822 = 1.0 - _2781;
        float _2832 = (0.5 / (((_2564 * ((_2795 * _2822) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2822) + _2781) * _2795))) * _2795;
        float _4721 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2834 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2804 / ((_2808 * _2808) * 3.141590118408203125));
        float _2835 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2756 = (((((_2815 * _2586) + _970) * cbLight._m0[_2766].x) * _2834) * _2835) + _2698;
        _2758 = (((((_2815 * _2588) + _972) * cbLight._m0[_2766].y) * _2834) * _2835) + _2699;
        _2760 = (((((_2815 * _2589) + _973) * cbLight._m0[_2766].z) * _2834) * _2835) + _2700;
    }
    float _2866;
    float _2868;
    float _2870;
    if (_2473)
    {
        _2866 = _2756;
        _2868 = _2758;
        _2870 = _2760;
    }
    else
    {
        uint _2877 = _2287 + 3u;
        uint _2881 = _2287 + 11u;
        float _2895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2877].w)) * _822) * 0.949999988079071044921875);
        float _2896 = _2895 * _2895;
        float _2897 = cbLight._m0[_2877].x + _899;
        float _2898 = cbLight._m0[_2877].y + _900;
        float _2899 = cbLight._m0[_2877].z + _901;
        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
        float _2904 = _2903 * _2897;
        float _2905 = _2903 * _2898;
        float _2906 = _2903 * _2899;
        float _2907 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2877].xyz));
        float _4737 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2910 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2911 = dot(vec3(_819, _820, _821), vec3(_2904, _2905, _2906));
        float _4748 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2914 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2915 = dot(vec3(cbLight._m0[_2877].xyz), vec3(_2904, _2905, _2906));
        float _4759 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2919 = _2896 * _2896;
        float _2923 = ((_2914 * _2914) * (_2919 + (-1.0))) + 1.0;
        float _2930 = exp2(log2(1.0 - (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) * 5.0);
        float _2937 = 1.0 - _2896;
        float _2947 = (0.5 / (((_2564 * ((_2910 * _2937) + _2896)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2937) + _2896) * _2910))) * _2910;
        float _4770 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2949 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2919 / ((_2923 * _2923) * 3.141590118408203125));
        float _2950 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2866 = (((((_2930 * _2586) + _970) * cbLight._m0[_2881].x) * _2949) * _2950) + _2756;
        _2868 = (((((_2930 * _2588) + _972) * cbLight._m0[_2881].y) * _2949) * _2950) + _2758;
        _2870 = (((((_2930 * _2589) + _973) * cbLight._m0[_2881].z) * _2949) * _2950) + _2760;
    }
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_2285.y == 0u)
    {
        uvec4 _2971 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2972 = _2971.x;
        uint _2983 = uint((float(_2971.y) * floor(float(uint(cbSceneParam._m0[85u].y * _908) / _2972))) + floor(float(uint(cbSceneParam._m0[85u].x * _907) / _2972)));
        float _2993 = (log2(_2063 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2994 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        uint _2997 = uint(isnan(14.0) ? _2994 : (isnan(_2994) ? 14.0 : min(_2994, 14.0)));
        uvec4 _3002 = texelFetch(g_lightClusterGridBuffer, int(((_2997 << 2u) + (_2983 << 6u)) >> 2u));
        uint _3003 = _3002.x;
        uint _3004 = _2971.z;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        if (((((1u << ((_3004 >> 4u) & 15u)) + 4294967295u) & _3003) == 0u) || ((_3004 & 240u) == 0u))
        {
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
        }
        else
        {
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            uint _3234 = 0u;
            uint _3243;
            bool _3244;
            for (;;)
            {
                _3243 = texelFetch(g_lightClassification, int((((_2997 << 5u) + (_2983 << 9u)) + (_3234 << 2u)) >> 2u)).x;
                _3244 = _3243 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3244)
                {
                    frontier_phi_66_pred = _3233;
                    frontier_phi_66_pred_1 = _3232;
                    frontier_phi_66_pred_2 = _3231;
                    frontier_phi_66_pred_3 = _3230;
                    frontier_phi_66_pred_4 = _3229;
                    frontier_phi_66_pred_5 = _3228;
                }
                else
                {
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    uint _3358;
                    _3352 = _3228;
                    _3353 = _3229;
                    _3354 = _3230;
                    _3355 = _3231;
                    _3356 = _3232;
                    _3357 = _3233;
                    _3358 = _3243;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    for (;;)
                    {
                        uint _3362 = uint(findLSB(_3358)) + (_3234 << 5u);
                        uint _3359 = (_3358 + 4294967295u) & _3358;
                        uint _3364 = _3362 * 48u;
                        vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3364)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 3u)).x));
                        uint _3384 = (_3362 * 48u) + 4u;
                        vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3384)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 3u)).x));
                        uint _3403 = (_3362 * 48u) + 8u;
                        vec3 _3414 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3403)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 2u)).x));
                        float _3418 = _3378.x - _2061;
                        float _3419 = _3378.y - _2062;
                        float _3420 = _3378.z - _2063;
                        float _3421 = dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420));
                        float _3424 = inversesqrt(_3421);
                        float _3425 = _3424 * _3418;
                        float _3426 = _3424 * _3419;
                        float _3427 = _3424 * _3420;
                        float _3428 = dot(vec3(_926, _929, _932), vec3(_3425, _3426, _3427));
                        float _3433 = 1.0 - (_3421 * _3378.w);
                        float _4796 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3434 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3435 = sqrt(_3421) * _3397.w;
                        float _3438 = 1.39999997615814208984375 / (_3435 + 1.39999997615814208984375);
                        float _3439 = _3438 * _3438;
                        float _3442 = ((1.0 - _3439) * _3428) + _3439;
                        float _3445 = _3435 * _3435;
                        float _3449 = ((isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0))) * _3434) / ((_3445 * 0.699999988079071044921875) + 1.0);
                        float _3453 = (-0.0) - _2061;
                        float _3454 = (-0.0) - _2062;
                        float _3455 = (-0.0) - _2063;
                        float _3459 = inversesqrt(dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455)));
                        float _3460 = _3459 * _3453;
                        float _3461 = _3459 * _3454;
                        float _3462 = _3459 * _3455;
                        float _3469 = exp2(log2(1.0 / ((_3445 * 3.5) + 5.0)) * 0.25);
                        float _3470 = 1.0 - _1001;
                        float _3477 = sqrt(1.0 - ((1.0 - (_3470 * _3470)) * (1.0 - (_3469 * _3469))));
                        float _3478 = _3477 * _3477;
                        float _3479 = _3478 * _3478;
                        float _3480 = _3460 + _3425;
                        float _3481 = _3461 + _3426;
                        float _3482 = _3462 + _3427;
                        float _3486 = inversesqrt(dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482)));
                        float _3490 = dot(vec3(_926, _929, _932), vec3(_3460, _3461, _3462));
                        float _4812 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3493 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                        float _3494 = dot(vec3(_926, _929, _932), vec3(_3486 * _3480, _3486 * _3481, _3486 * _3482));
                        float _4823 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3497 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3501 = ((_3497 * _3497) * (_3479 + (-1.0))) + 1.0;
                        float _3502 = _3438 * _3478;
                        float _3503 = _3502 * _3502;
                        float _3506 = ((1.0 - _3503) * _3428) + _3503;
                        float _4834 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3507 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                        float _3508 = 1.0 - _3478;
                        float _3518 = (0.5 / (((_3507 * ((_3493 * _3508) + _3478)) + 9.9999999392252902907785028219223e-09) + (((_3507 * _3508) + _3478) * _3493))) * _3507;
                        float _4845 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3529 = (((_3479 * 3.1415927410125732421875) * (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) / ((_3501 * _3501) * ((_3445 * 2.1991131305694580078125) + 3.141590118408203125))) * _3434;
                        _3287 = (_3449 * _3397.x) + _3355;
                        _3288 = (_3449 * _3397.y) + _3356;
                        _3289 = (_3449 * _3397.z) + _3357;
                        _3284 = (_3529 * _3414.x) + _3352;
                        _3285 = (_3529 * _3414.y) + _3353;
                        _3286 = (_3529 * _3414.z) + _3354;
                        if (_3359 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3352 = _3284;
                            _3353 = _3285;
                            _3354 = _3286;
                            _3355 = _3287;
                            _3356 = _3288;
                            _3357 = _3289;
                            _3358 = _3359;
                        }
                    }
                    frontier_phi_66_pred = _3289;
                    frontier_phi_66_pred_1 = _3288;
                    frontier_phi_66_pred_2 = _3287;
                    frontier_phi_66_pred_3 = _3286;
                    frontier_phi_66_pred_4 = _3285;
                    frontier_phi_66_pred_5 = _3284;
                }
                _3094 = frontier_phi_66_pred;
                _3092 = frontier_phi_66_pred_1;
                _3090 = frontier_phi_66_pred_2;
                _3088 = frontier_phi_66_pred_3;
                _3086 = frontier_phi_66_pred_4;
                _3084 = frontier_phi_66_pred_5;
                uint _3235 = _3234 + 1u;
                if (_3235 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3228 = _3084;
                    _3229 = _3086;
                    _3230 = _3088;
                    _3231 = _3090;
                    _3232 = _3092;
                    _3233 = _3094;
                    _3234 = _3235;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
        }
        uvec4 _3097 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3098 = _3097.z;
        uint _3100 = (_3098 >> 8u) & 15u;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        if (((4294967295u << _3100) & _3003) == 0u)
        {
            _3196 = _3083;
            _3198 = _3085;
            _3200 = _3087;
            _3202 = _3089;
            _3204 = _3091;
            _3206 = _3093;
        }
        else
        {
            float _3221 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
            float _3222 = _3221 * _2061;
            float _3223 = _3221 * _2062;
            float _3224 = _3221 * _2063;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3100 < ((_3098 >> 12u) & 15u))
            {
                float _3197;
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3335 = _3083;
                float _3336 = _3085;
                float _3337 = _3087;
                float _3338 = _3089;
                float _3339 = _3091;
                float _3340 = _3093;
                uint _3341 = _3100;
                uint _3350;
                bool _3351;
                for (;;)
                {
                    _3350 = texelFetch(g_lightClassification, int((((_2997 << 5u) + (_2983 << 9u)) + (_3341 << 2u)) >> 2u)).x;
                    _3351 = _3350 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3351)
                    {
                        frontier_phi_72_pred = _3340;
                        frontier_phi_72_pred_1 = _3339;
                        frontier_phi_72_pred_2 = _3338;
                        frontier_phi_72_pred_3 = _3337;
                        frontier_phi_72_pred_4 = _3336;
                        frontier_phi_72_pred_5 = _3335;
                    }
                    else
                    {
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3547 = _3335;
                        float _3548 = _3336;
                        float _3549 = _3337;
                        float _3550 = _3338;
                        float _3551 = _3339;
                        float _3552 = _3340;
                        uint _3553 = _3350;
                        uint _3554;
                        vec4 _3579;
                        float _3580;
                        vec4 _3595;
                        vec3 _3607;
                        vec4 _3622;
                        vec4 _3637;
                        float _3684;
                        bool _3685;
                        for (;;)
                        {
                            uint _3564 = ((_3341 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3553));
                            _3554 = (_3553 + 4294967295u) & _3553;
                            uint _3566 = _3564 * 40u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            _3580 = _3579.w;
                            uint _3582 = (_3564 * 40u) + 4u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3597 = (_3564 * 40u) + 8u;
                            _3607 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x));
                            uint _3609 = (_3564 * 40u) + 16u;
                            _3622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 3u)).x));
                            uint _3624 = (_3564 * 40u) + 20u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            uint _3640 = (_3564 * 40u) + 24u;
                            vec4 _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3659 = (_3564 * 40u) + 28u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3684 = fma(_2063, _3672.z, fma(_2062, _3672.y, _3672.x * _2061)) + _3672.w;
                            _3685 = !((fma(_2063, _3653.z, fma(_2062, _3653.y, _3653.x * _2061)) + _3653.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3685)
                            {
                                float _3712 = _3579.x - _2061;
                                float _3713 = _3579.y - _2062;
                                float _3714 = _3579.z - _2063;
                                float _3715 = dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714));
                                float _3718 = inversesqrt(_3715);
                                float _3719 = _3718 * _3712;
                                float _3720 = _3718 * _3713;
                                float _3721 = _3718 * _3714;
                                float _3725 = 1.0 - (_3715 / (_3580 * _3580));
                                float _4856 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3730 = sqrt(_3715) * _3595.w;
                                float _3732 = 1.39999997615814208984375 / (_3730 + 1.39999997615814208984375);
                                float _3733 = _3732 * _3732;
                                float _3736 = ((1.0 - _3733) * dot(vec3(_3719, _3720, _3721), vec3(_926, _929, _932))) + _3733;
                                float _3739 = _3730 * _3730;
                                float _3743 = (fma(_2063, _3622.z, fma(_2062, _3622.y, _3622.x * _2061)) + _3622.w) / _3684;
                                float _3744 = (fma(_2063, _3637.z, fma(_2062, _3637.y, _3637.x * _2061)) + _3637.w) / _3684;
                                float _3748 = 1.0 - dot(vec2(_3743, _3744), vec2(_3743, _3744));
                                float _4872 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3750 = _3749 * (((isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0))) * _3726) / ((_3739 * 0.699999988079071044921875) + 1.0));
                                float _3762 = exp2(log2(1.0 / ((_3739 * 3.5) + 5.0)) * 0.25);
                                float _3763 = 1.0 - _1001;
                                float _3770 = sqrt(1.0 - ((1.0 - (_3763 * _3763)) * (1.0 - (_3762 * _3762))));
                                float _3771 = _3770 * _3770;
                                float _3772 = _3771 * _3771;
                                float _3773 = _3719 - _3222;
                                float _3774 = _3720 - _3223;
                                float _3775 = _3721 - _3224;
                                float _3779 = inversesqrt(dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775)));
                                float _3783 = dot(vec3(_926, _929, _932), vec3((-0.0) - _3222, (-0.0) - _3223, (-0.0) - _3224));
                                float _4883 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3786 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3787 = dot(vec3(_926, _929, _932), vec3(_3779 * _3773, _3779 * _3774, _3779 * _3775));
                                float _4894 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3794 = ((_3790 * _3790) * (_3772 + (-1.0))) + 1.0;
                                float _3795 = _3732 * _3771;
                                float _3796 = _3795 * _3795;
                                float _3802 = ((1.0 - _3796) * dot(vec3(_926, _929, _932), vec3(_3719, _3720, _3721))) + _3796;
                                float _4905 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3804 = 1.0 - _3771;
                                float _3814 = (0.5 / (((_3803 * ((_3786 * _3804) + _3771)) + 9.9999999392252902907785028219223e-09) + (((_3803 * _3804) + _3771) * _3786))) * _3803;
                                float _4916 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3824 = (_3749 * _3726) * (((_3772 * 3.1415927410125732421875) * (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0)))) / ((_3794 * _3794) * ((_3739 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3750 * _3595.y;
                                frontier_phi_78_pred_1 = _3750 * _3595.x;
                                frontier_phi_78_pred_2 = _3824 * _3607.z;
                                frontier_phi_78_pred_3 = _3824 * _3607.y;
                                frontier_phi_78_pred_4 = _3824 * _3607.x;
                                frontier_phi_78_pred_5 = _3750 * _3595.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3832 = frontier_phi_78_pred;
                            _3831 = frontier_phi_78_pred_1;
                            _3830 = frontier_phi_78_pred_2;
                            _3829 = frontier_phi_78_pred_3;
                            _3828 = frontier_phi_78_pred_4;
                            _3833 = frontier_phi_78_pred_5;
                            _3537 = _3831 + _3550;
                            _3538 = _3832 + _3551;
                            _3539 = _3833 + _3552;
                            _3534 = _3828 + _3547;
                            _3535 = _3829 + _3548;
                            _3536 = _3830 + _3549;
                            if (_3554 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3554;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3539;
                        frontier_phi_72_pred_1 = _3538;
                        frontier_phi_72_pred_2 = _3537;
                        frontier_phi_72_pred_3 = _3536;
                        frontier_phi_72_pred_4 = _3535;
                        frontier_phi_72_pred_5 = _3534;
                    }
                    _3207 = frontier_phi_72_pred;
                    _3205 = frontier_phi_72_pred_1;
                    _3203 = frontier_phi_72_pred_2;
                    _3201 = frontier_phi_72_pred_3;
                    _3199 = frontier_phi_72_pred_4;
                    _3197 = frontier_phi_72_pred_5;
                    uint _3342 = _3341 + 1u;
                    if (_3342 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3335 = _3197;
                        _3336 = _3199;
                        _3337 = _3201;
                        _3338 = _3203;
                        _3339 = _3205;
                        _3340 = _3207;
                        _3341 = _3342;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3207;
                frontier_phi_60_61_ladder_1 = _3205;
                frontier_phi_60_61_ladder_2 = _3201;
                frontier_phi_60_61_ladder_3 = _3199;
                frontier_phi_60_61_ladder_4 = _3197;
                frontier_phi_60_61_ladder_5 = _3203;
            }
            else
            {
                frontier_phi_60_61_ladder = _3093;
                frontier_phi_60_61_ladder_1 = _3091;
                frontier_phi_60_61_ladder_2 = _3087;
                frontier_phi_60_61_ladder_3 = _3085;
                frontier_phi_60_61_ladder_4 = _3083;
                frontier_phi_60_61_ladder_5 = _3089;
            }
            _3196 = frontier_phi_60_61_ladder_4;
            _3198 = frontier_phi_60_61_ladder_3;
            _3200 = frontier_phi_60_61_ladder_2;
            _3202 = frontier_phi_60_61_ladder_5;
            _3204 = frontier_phi_60_61_ladder_1;
            _3206 = frontier_phi_60_61_ladder;
        }
        float _3211 = isnan(1.0) ? _985 : (isnan(_985) ? 1.0 : min(_985, 1.0));
        _3016 = (_3211 * _3202) + _2528;
        _3018 = (_3211 * _3204) + _2530;
        _3020 = (_3211 * _3206) + _2532;
        _3022 = ((_3196 * _970) * _3211) + _2866;
        _3024 = ((_3198 * _972) * _3211) + _2868;
        _3026 = ((_3200 * _973) * _3211) + _2870;
    }
    else
    {
        _3016 = _2528;
        _3018 = _2530;
        _3020 = _2532;
        _3022 = _2866;
        _3024 = _2868;
        _3026 = _2870;
    }
    float _4932 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _4943 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4954 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    uint _3046 = _945 + 6u;
    float _3054 = _907 / cbSceneParam._m0[86u].x;
    float _3055 = _908 / cbSceneParam._m0[86u].y;
    vec4 _3069 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3054, _3055, (log2((isnan(cbSceneParam._m0[77u].w) ? _842 : (isnan(_842) ? cbSceneParam._m0[77u].w : min(_842, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3071 = _3069.x;
    float _3072 = _3069.y;
    float _3073 = _3069.z;
    float _3074 = _3069.w;
    float _3146;
    float _3148;
    float _3150;
    float _3152;
    if (_842 > cbSceneParam._m0[78u].w)
    {
        float _3108 = isnan(_842) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _842 : min(cbSceneParam._m0[80u].w, _842));
        float _3109 = _3108 / _842;
        float _3120 = _3109 * _892;
        float _3121 = _893 * _3109;
        float _3122 = (-0.0) - _3121;
        float _3124 = _3109 * _894;
        float _3126 = (cbSceneParam._m0[77u].w * _3122) / _3108;
        float _3127 = _3126 + cbSceneParam._m0[79u].w;
        float _3128 = cbSceneParam._m0[79u].w - _3121;
        float _3134 = sqrt(((_3120 * _3120) + (_3121 * _3121)) + (_3124 * _3124));
        float _3137 = (1.0 - (cbSceneParam._m0[77u].w / _3108)) * _3134;
        float _3142 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3144 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3297;
        if (abs((_3122 - _3126) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3297 = ((((_3127 > 0.0) ? exp2(_3142 * _3127) : (2.0 - exp2(_3144 * _3127))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3137;
        }
        else
        {
            float _3257 = 1.0 / cbSceneParam._m0[80u].x;
            float _3258 = isnan(_3128) ? _3127 : (isnan(_3127) ? _3128 : max(_3127, _3128));
            float _3259 = isnan(_3128) ? _3127 : (isnan(_3127) ? _3128 : min(_3127, _3128));
            float _3268 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : min(_3258, 0.0));
            float _3269 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : min(_3259, 0.0));
            _3297 = ((abs(_3134 / _3122) * cbSceneParam._m0[80u].y) * ((((_3268 - _3269) * 2.0) - ((exp2(_3142 * (isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0)))) - exp2(_3142 * (isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))))) * _3257)) - ((exp2(_3144 * _3268) - exp2(_3144 * _3269)) * _3257))) + (_3137 * cbSceneParam._m0[80u].z);
        }
        vec4 _3299 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3054, _3055, 1.0), 0.0);
        float _3308 = exp2((_3297 * (-1.44269502162933349609375)) * (1.0 - _3299.w));
        float _3309 = log2(_3308);
        float _3325 = log2(_3074);
        _3146 = (exp2(_3325 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].x)) * _3299.x) / cbSceneParam._m0[78u].x)) + _3071;
        _3148 = (exp2(_3325 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].y)) * _3299.y) / cbSceneParam._m0[78u].y)) + _3072;
        _3150 = (exp2(_3325 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].z)) * _3299.z) / cbSceneParam._m0[78u].z)) + _3073;
        _3152 = _3308 * _3074;
    }
    else
    {
        _3146 = _3071;
        _3148 = _3072;
        _3150 = _3073;
        _3152 = _3074;
    }
    float _3164 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3165 = _3164 == 3.0;
    float _3166 = log2(_3152);
    float _3173 = exp2(_3166 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_3016 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _985))) + ((_3022 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1795)) * cbPerFrame._m0[3u].x));
    float _3174 = exp2(_3166 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_3018 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _985))) + ((_3024 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1795)) * cbPerFrame._m0[3u].x));
    float _3175 = exp2(_3166 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_3020 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _985))) + ((_3026 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1795)) * cbPerFrame._m0[3u].x));
    float _3184 = (_3164 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3184 * (_3165 ? _3173 : (_3173 + (cbSceneParam._m0[72u].w * _3146)));
    SV_Target.y = _3184 * (_3165 ? _3174 : (_3174 + (cbSceneParam._m0[72u].w * _3148)));
    SV_Target.z = _3184 * (_3165 ? _3175 : (_3175 + (cbSceneParam._m0[72u].w * _3150)));
    SV_Target.w = cbInstanceData._m0[_3046].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3046].w;
}


