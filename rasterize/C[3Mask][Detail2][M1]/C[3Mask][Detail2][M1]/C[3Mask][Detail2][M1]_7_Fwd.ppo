#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1192;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _244 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _244.x * cbMtdParam._m0[10u].x;
    float _251 = _244.y * cbMtdParam._m0[10u].y;
    float _252 = _244.z * cbMtdParam._m0[10u].z;
    vec4 _270 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _320 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _330 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _320)) + 1.0;
    float _3522 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _331 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _338 = (_331 * ((_270.x * cbMtdParam._m0[11u].x) - _250)) + _250;
    float _339 = (_331 * ((_270.y * cbMtdParam._m0[11u].y) - _251)) + _251;
    float _340 = (_331 * ((_270.z * cbMtdParam._m0[11u].z) - _252)) + _252;
    vec4 _358 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _389 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _320)) + 1.0;
    float _3533 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _397 = (_390 * ((_358.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _398 = (_390 * ((_358.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _399 = (_390 * ((_358.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _417 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _442 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _320)) + 1.0;
    float _3544 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _450 = (_443 * ((_417.x * cbMtdParam._m0[13u].x) - _397)) + _397;
    float _451 = (_443 * ((_417.y * cbMtdParam._m0[13u].y) - _398)) + _398;
    float _452 = (_443 * ((_417.z * cbMtdParam._m0[13u].z) - _399)) + _399;
    vec4 _465 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _467 = _465.x;
    float _485 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _467) * _331) + _467;
    float _503 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _485) * _390) + _485;
    float _520 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _503) * _443) + _503;
    vec4 _532 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _541 = cbMtdParam._m0[18u].y * _532.z;
    vec4 _553 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _562 = (((cbMtdParam._m0[18u].x * _553.z) - _541) * _331) + _541;
    vec4 _575 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _586 = (((cbMtdParam._m0[17u].w * _575.z) - _562) * _390) + _562;
    vec4 _599 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _608 = (((cbMtdParam._m0[17u].z * _599.z) - _586) * _443) + _586;
    float _613 = ((_553.x - _534) * _331) + _534;
    float _614 = ((_553.y - _535) * _331) + _535;
    float _619 = ((_575.x - _613) * _390) + _613;
    float _620 = ((_575.y - _614) * _390) + _614;
    float _629 = ((((_599.x - _619) * _443) + _619) * 2.0) + (-1.0);
    float _631 = ((((_599.y - _620) * _443) + _620) * 2.0) + (-1.0);
    float _632 = dot(vec2(_629, _631), vec2(_629, _631));
    float _3555 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _637 = sqrt(1.0 - (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))));
    float _640 = fma(_637, _214 * NORMAL.x, fma(_631, _221 * TANGENT.x, (_207 * _199) * _629));
    float _643 = fma(_637, _214 * NORMAL.y, fma(_631, _221 * TANGENT.y, (_207 * _200) * _629));
    float _646 = fma(_637, _214 * NORMAL.z, fma(_631, _221 * TANGENT.z, (_207 * _201) * _629));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    float _651 = _650 * _640;
    float _652 = _650 * _643;
    float _653 = _650 * _646;
    float _3566 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _654 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _3577 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3588 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3599 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3610 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _658 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _674 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _724 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _714);
    float _725 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _714);
    float _726 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _714);
    float _730 = inversesqrt(dot(vec3(_724, _725, _726), vec3(_724, _725, _726)));
    float _731 = _724 * _730;
    float _732 = _725 * _730;
    float _733 = _726 * _730;
    float _739 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _740 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _758 = fma(_653, cbSceneParam._m0[5u].z, fma(_652, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _651));
    float _761 = fma(_653, cbSceneParam._m0[6u].z, fma(_652, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _651));
    float _764 = fma(_653, cbSceneParam._m0[7u].z, fma(_652, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _651));
    uint _777 = uint(roundEven(NORMAL.w)) * 13u;
    uint _779 = (_777 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _785 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_779].x;
    float _786 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_779].y;
    float _787 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_779].z;
    float _3621 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _791 = 1.0 - _658;
    float _792 = _788 * _791;
    float _793 = _789 * _791;
    float _794 = _790 * _791;
    float _799 = (_788 + (-0.039999999105930328369140625)) * _658;
    float _800 = (_789 + (-0.039999999105930328369140625)) * _658;
    float _801 = (_790 + (-0.039999999105930328369140625)) * _658;
    float _802 = _799 + 0.039999999105930328369140625;
    float _804 = _800 + 0.039999999105930328369140625;
    float _805 = _801 + 0.039999999105930328369140625;
    vec4 _814 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _739, cbSceneParam._m0[86u].y * _740));
    float _817 = _814.x * TEXCOORD_5.w;
    float _818 = dot(vec3(_651, _652, _653), vec3(_731, _732, _733));
    float _821 = _818 * 2.0;
    float _825 = (_821 * _651) - _731;
    float _826 = (_821 * _652) - _732;
    float _827 = (_821 * _653) - _733;
    float _831 = abs(dot(vec3(_731, _732, _733), vec3(_651, _652, _653)));
    float _3654 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _833 = sqrt(_654);
    float _846 = exp2((_833 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_833 * 3.0));
    float _852 = (1.0 - _846) * ((_833 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _853 = _846 * _833;
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1191;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _916 = fma(_889, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881));
        float _920 = fma(_889, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881));
        float _924 = fma(_889, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881));
        float _949 = _881 + _651;
        float _950 = _885 + _652;
        float _951 = _889 + _653;
        float _961 = fma(_951, cbModelParam._m0[26u].z, fma(_950, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949)) - _916;
        float _962 = fma(_951, cbModelParam._m0[27u].z, fma(_950, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949)) - _920;
        float _963 = fma(_951, cbModelParam._m0[28u].z, fma(_950, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949)) - _924;
        float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
        float _980 = ((_967 * _961) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_916 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_967 * _962) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_920 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_967 * _963) / cbModelParam._m0[34u].z) + ((((((_924 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        float _1019 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_985.x + (-0.5));
        float _1021 = _1019 * (_985.y + (-0.5));
        float _1022 = _1019 * (_985.z + (-0.5));
        float _1029 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_992.x + (-0.5));
        float _1031 = _1029 * (_992.y + (-0.5));
        float _1032 = _1029 * (_992.z + (-0.5));
        float _1039 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_999.x + (-0.5));
        float _1041 = _1039 * (_999.y + (-0.5));
        float _1042 = _1039 * (_999.z + (-0.5));
        float _1049 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1006.x + (-0.5));
        float _1051 = _1049 * (_1006.y + (-0.5));
        float _1052 = _1049 * (_1006.z + (-0.5));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = _1020 * 0.5;
        float _1057 = _1030 * 0.5;
        float _1058 = _1040 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1073 = (dot(vec3(_651, _652, _653), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1083 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3702 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1085 + 1.0))) + _1090) * _1053;
        float _1100 = _1021 * 0.5;
        float _1101 = _1031 * 0.5;
        float _1102 = _1041 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_651, _652, _653), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3735 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1127 + 1.0))) + _1132) * _1054;
        float _1142 = _1022 * 0.5;
        float _1143 = _1032 * 0.5;
        float _1144 = _1042 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_651, _652, _653), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3768 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1169 + 1.0))) + _1174) * _1055;
        _1191 = _1022;
        _1193 = _1021;
        _1194 = _1020;
        _1195 = _1032;
        _1196 = _1031;
        _1197 = _1030;
        _1198 = _1042;
        _1199 = _1041;
        _1200 = _1040;
        _1201 = _1055;
        _1202 = _1054;
        _1203 = _1053;
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
    }
    else
    {
        _1191 = _1192;
        _1193 = _1192;
        _1194 = _1192;
        _1195 = _1192;
        _1196 = _1192;
        _1197 = _1192;
        _1198 = _1192;
        _1199 = _1192;
        _1200 = _1192;
        _1201 = _1192;
        _1202 = _1192;
        _1203 = _1192;
        _1204 = 0.0;
        _1205 = 0.0;
        _1206 = 0.0;
    }
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1232 = fma(_889, cbModelParam._m0[30u].z, fma(_885, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _881));
        float _1236 = fma(_889, cbModelParam._m0[31u].z, fma(_885, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _881));
        float _1240 = fma(_889, cbModelParam._m0[32u].z, fma(_885, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _881));
        float _1263 = _881 + _651;
        float _1264 = _885 + _652;
        float _1265 = _889 + _653;
        float _1275 = fma(_1265, cbModelParam._m0[30u].z, fma(_1264, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1263)) - _1232;
        float _1276 = fma(_1265, cbModelParam._m0[31u].z, fma(_1264, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1263)) - _1236;
        float _1277 = fma(_1265, cbModelParam._m0[32u].z, fma(_1264, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1263)) - _1240;
        float _1281 = inversesqrt(dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277)));
        float _1294 = ((_1281 * _1275) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1232 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1281 * _1276) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1236 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1281 * _1277) / cbModelParam._m0[35u].z) + ((((((_1240 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        float _1331 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1298.x + (-0.5));
        float _1333 = _1331 * (_1298.y + (-0.5));
        float _1334 = _1331 * (_1298.z + (-0.5));
        float _1341 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1305.x + (-0.5));
        float _1343 = _1341 * (_1305.y + (-0.5));
        float _1344 = _1341 * (_1305.z + (-0.5));
        float _1351 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1312.x + (-0.5));
        float _1353 = _1351 * (_1312.y + (-0.5));
        float _1354 = _1351 * (_1312.z + (-0.5));
        float _1361 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1319.x + (-0.5));
        float _1363 = _1361 * (_1319.y + (-0.5));
        float _1364 = _1361 * (_1319.z + (-0.5));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = _1332 * 0.5;
        float _1369 = _1342 * 0.5;
        float _1370 = _1352 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_651, _652, _653), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3831 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1395 + 1.0))) + _1400) * _1365;
        float _1410 = _1333 * 0.5;
        float _1411 = _1343 * 0.5;
        float _1412 = _1353 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_651, _652, _653), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3864 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1437 + 1.0))) + _1442) * _1366;
        float _1452 = _1334 * 0.5;
        float _1453 = _1344 * 0.5;
        float _1454 = _1354 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_651, _652, _653), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _3897 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1479 + 1.0))) + _1484) * _1367;
        _1501 = _1334;
        _1502 = _1333;
        _1503 = _1332;
        _1504 = _1344;
        _1505 = _1343;
        _1506 = _1342;
        _1507 = _1354;
        _1508 = _1353;
        _1509 = _1352;
        _1510 = _1367;
        _1511 = _1366;
        _1512 = _1365;
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
    }
    else
    {
        _1501 = _1192;
        _1502 = _1192;
        _1503 = _1192;
        _1504 = _1192;
        _1505 = _1192;
        _1506 = _1192;
        _1507 = _1192;
        _1508 = _1192;
        _1509 = _1192;
        _1510 = _1192;
        _1511 = _1192;
        _1512 = _1192;
        _1513 = 0.0;
        _1514 = 0.0;
        _1515 = 0.0;
    }
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1204)) + _1204;
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1205)) + _1205;
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1206)) + _1206;
    float _1548 = fma(_1527, cbSceneParam._m0[89u].z, fma(_1526, cbSceneParam._m0[89u].y, _1525 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1527, cbSceneParam._m0[90u].z, fma(_1526, cbSceneParam._m0[90u].y, _1525 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1527, cbSceneParam._m0[91u].z, fma(_1526, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1525));
    float _1569 = _825 * 0.5;
    float _1570 = _826 * 0.5;
    float _1571 = _827 * 0.5;
    float _1572 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1575 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1578 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1612;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1585 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1191, _1195, _1198, _1201));
        float _1589 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1193, _1196, _1199, _1202));
        float _1593 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1194, _1197, _1200, _1203));
        float _1600 = dot(vec4(cbModelParam._m0[39u]), vec4(_1569, _1570, _1571, 1.0));
        _1612 = dot(vec3(isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1600) ? 0.0 : (isnan(0.0) ? _1600 : max(0.0, _1600))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1612 = 1.0;
    }
    float _1623;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1614 = dot(vec4(cbModelParam._m0[40u]), vec4(_1569, _1570, _1571, 1.0));
        _1623 = dot(vec3(isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1623 = 1.0;
    }
    float _1627 = (_1623 * cbModelParam._m0[1u].x) + (_1612 * (1.0 - cbModelParam._m0[1u].x));
    float _1637 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _654);
    float _1638 = isnan(_1637) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1637 : min(cbModelParam._m0[25u].z, _1637));
    float _1720;
    float _1722;
    float _1724;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1687 = fma(_889, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881)) + cbModelParam._m0[13u].w;
        float _1691 = fma(_889, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881)) + cbModelParam._m0[14u].w;
        float _1695 = fma(_889, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881)) + cbModelParam._m0[15u].w;
        float _1698 = fma(_827, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825));
        float _1701 = fma(_827, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825));
        float _1704 = fma(_827, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825));
        float _1732;
        if (_1698 > 0.0)
        {
            _1732 = abs((1.0 - _1687) / _1698);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1687 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1732 = frontier_phi_14_12_ladder;
        }
        float _1935;
        if (_1701 > 0.0)
        {
            _1935 = abs((1.0 - _1691) / _1701);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1691 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1935 = frontier_phi_23_19_ladder;
        }
        float _2189;
        if (_1704 > 0.0)
        {
            _2189 = abs((1.0 - _1695) / _1704);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1695 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2189 = frontier_phi_35_30_ladder;
        }
        float _2191 = isnan(_1935) ? _1732 : (isnan(_1732) ? _1935 : min(_1732, _1935));
        float _2192 = isnan(_2189) ? _2191 : (isnan(_2191) ? _2189 : min(_2191, _2189));
        float _2196 = (_2192 * _1698) + _1687;
        float _2197 = (_2192 * _1701) + _1691;
        float _2198 = (_2192 * _1704) + _1695;
        float _2199 = _2192 * 9.9999997473787516355514526367188e-05;
        float _2201 = (-1.0) - _2199;
        float _2203 = _2199 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2198 > _2203) || ((_2198 < _2201) || ((_2197 > _2203) || ((_2197 < _2201) || ((_2196 < _2201) || (_2196 > _2203))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2326 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2198, cbModelParam._m0[9u].z, fma(_2197, cbModelParam._m0[9u].y, _2196 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2198, cbModelParam._m0[10u].z, fma(_2197, cbModelParam._m0[10u].y, _2196 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2198, cbModelParam._m0[11u].z, fma(_2197, cbModelParam._m0[11u].y, _2196 * cbModelParam._m0[11u].x))), _1638);
            frontier_phi_13_35_ladder = _2326.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2326.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2326.x * cbModelParam._m0[1u].y;
        }
        _1720 = frontier_phi_13_35_ladder_2;
        _1722 = frontier_phi_13_35_ladder_1;
        _1724 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1708 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_825, _826, _827), _1638);
        _1720 = _1708.x * cbModelParam._m0[1u].y;
        _1722 = _1708.y * cbModelParam._m0[1u].y;
        _1724 = _1708.z * cbModelParam._m0[1u].y;
    }
    float _1728 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _654);
    float _1729 = isnan(_1728) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1728 : min(cbModelParam._m0[25u].w, _1728));
    float _1818;
    float _1820;
    float _1822;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1782 = fma(_889, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881)) + cbModelParam._m0[21u].w;
        float _1786 = fma(_889, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881)) + cbModelParam._m0[22u].w;
        float _1790 = fma(_889, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881)) + cbModelParam._m0[23u].w;
        float _1793 = fma(_827, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825));
        float _1796 = fma(_827, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825));
        float _1799 = fma(_827, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825));
        float _1940;
        if (_1793 > 0.0)
        {
            _1940 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1940 = frontier_phi_25_21_ladder;
        }
        float _2216;
        if (_1796 > 0.0)
        {
            _2216 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2216 = frontier_phi_37_32_ladder;
        }
        float _2429;
        if (_1799 > 0.0)
        {
            _2429 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2429 = frontier_phi_46_43_ladder;
        }
        float _2431 = isnan(_2216) ? _1940 : (isnan(_1940) ? _2216 : min(_1940, _2216));
        float _2432 = isnan(_2429) ? _2431 : (isnan(_2431) ? _2429 : min(_2431, _2429));
        float _2436 = (_2432 * _1793) + _1782;
        float _2437 = (_2432 * _1796) + _1786;
        float _2438 = (_2432 * _1799) + _1790;
        float _2439 = _2432 * 9.9999997473787516355514526367188e-05;
        float _2440 = (-1.0) - _2439;
        float _2442 = _2439 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2438 > _2442) || ((_2438 < _2440) || ((_2437 > _2442) || ((_2437 < _2440) || ((_2436 < _2440) || (_2436 > _2442))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2637 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2438, cbModelParam._m0[17u].z, fma(_2437, cbModelParam._m0[17u].y, _2436 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2438, cbModelParam._m0[18u].z, fma(_2437, cbModelParam._m0[18u].y, _2436 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2438, cbModelParam._m0[19u].z, fma(_2437, cbModelParam._m0[19u].y, _2436 * cbModelParam._m0[19u].x))), _1729);
            frontier_phi_22_46_ladder = _2637.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2637.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2637.x * cbModelParam._m0[1u].z;
        }
        _1818 = frontier_phi_22_46_ladder_2;
        _1820 = frontier_phi_22_46_ladder_1;
        _1822 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1802 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_825, _826, _827), _1729);
        _1818 = _1802.x * cbModelParam._m0[1u].z;
        _1820 = _1802.y * cbModelParam._m0[1u].z;
        _1822 = _1802.z * cbModelParam._m0[1u].z;
    }
    float _1835 = (((_852 * _802) + _853) * _817) * ((cbModelParam._m0[1u].w * (_1818 - _1720)) + _1720);
    float _1837 = (((_852 * _804) + _853) * _817) * ((cbModelParam._m0[1u].w * (_1820 - _1722)) + _1722);
    float _1839 = (((_852 * _805) + _853) * _817) * ((cbModelParam._m0[1u].w * (_1822 - _1724)) + _1724);
    float _1842 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1837, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1837, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1837, cbSceneParam._m0[91u].y, _1835 * cbSceneParam._m0[91u].x));
    uvec4 _1858 = floatBitsToUint(cbInstanceData._m0[_777 + 5u]);
    uint _1860 = _1858.x * 14u;
    uint _1861 = _1860 + 13u;
    float _1868 = _817 + (-1.0);
    float _1873 = (cbLight._m0[_1861].x * _1868) + 1.0;
    float _1874 = (cbLight._m0[_1861].y * _1868) + 1.0;
    float _1875 = (cbLight._m0[_1861].z * _1868) + 1.0;
    float _1876 = (cbLight._m0[_1861].w * _1868) + 1.0;
    uint _1877 = _1860 + 5u;
    float _1883 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
    uint _1887 = _1860 + 4u;
    float _1894 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
    uint _1898 = _1860 | 1u;
    float _1909 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_651, _652, _653));
    float _1912 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_651, _652, _653));
    float _4033 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _4044 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1917 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 0.3183098733425140380859375;
    float _1919 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.3183098733425140380859375;
    float _1926 = ((cbLight._m0[_1877].x * _1883) * _1919) + ((cbLight._m0[_1887].x * _1894) * _1917);
    float _1927 = ((_1883 * cbLight._m0[_1877].y) * _1919) + ((_1894 * cbLight._m0[_1887].y) * _1917);
    float _1928 = ((_1883 * cbLight._m0[_1877].z) * _1919) + ((_1894 * cbLight._m0[_1887].z) * _1917);
    uvec4 _1932 = floatBitsToUint(cbLight._m0[_1860 + 12u]);
    bool _1934 = _1932.x == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1934)
    {
        _1945 = _1926;
        _1947 = _1927;
        _1949 = _1928;
    }
    else
    {
        uint _1953 = _1860 + 6u;
        float _1969 = (dot(vec3(cbLight._m0[_1860 + 2u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _1970 = _1969 * _1969;
        float _4055 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1972 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _1945 = (((cbLight._m0[_1953].x * 0.3183098733425140380859375) * _1971) * _1972) + _1926;
        _1947 = (((cbLight._m0[_1953].y * 0.3183098733425140380859375) * _1971) * _1972) + _1927;
        _1949 = (((cbLight._m0[_1953].z * 0.3183098733425140380859375) * _1971) * _1972) + _1928;
    }
    bool _1952 = _1932.y == 0u;
    float _1990;
    float _1992;
    float _1994;
    if (_1952)
    {
        _1990 = _1945;
        _1992 = _1947;
        _1994 = _1949;
    }
    else
    {
        uint _2160 = _1860 + 7u;
        float _2176 = (dot(vec3(cbLight._m0[_1860 + 3u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2177 = _2176 * _2176;
        float _4071 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2178 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _2179 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _1990 = (((cbLight._m0[_2160].x * 0.3183098733425140380859375) * _2178) * _2179) + _1945;
        _1992 = (((cbLight._m0[_2160].y * 0.3183098733425140380859375) * _2178) * _2179) + _1947;
        _1994 = (((cbLight._m0[_2160].z * 0.3183098733425140380859375) * _2178) * _2179) + _1949;
    }
    uint _1997 = _1860 + 8u;
    float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _654) * 0.949999988079071044921875);
    float _2011 = _2010 * _2010;
    float _2012 = cbLight._m0[_1860].x + _731;
    float _2013 = cbLight._m0[_1860].y + _732;
    float _2014 = cbLight._m0[_1860].z + _733;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2019 = _2018 * _2012;
    float _2020 = _2018 * _2013;
    float _2021 = _2018 * _2014;
    float _2022 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1860].xyz));
    float _4087 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _4098 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _2026 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _2027 = dot(vec3(_651, _652, _653), vec3(_2019, _2020, _2021));
    float _4109 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _2031 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2019, _2020, _2021));
    float _4120 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2035 = _2011 * _2011;
    float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
    float _2047 = exp2(log2(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * 5.0);
    float _2048 = 0.959999978542327880859375 - _799;
    float _2050 = 0.959999978542327880859375 - _800;
    float _2051 = 0.959999978542327880859375 - _801;
    float _2058 = 1.0 - _2011;
    float _2069 = (0.5 / (((_2026 * ((_2025 * _2058) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2058) + _2011) * _2025))) * _2025;
    float _4131 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2071 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
    uint _2082 = _1860 + 9u;
    float _2093 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _654) * 0.949999988079071044921875);
    float _2094 = _2093 * _2093;
    float _2095 = cbLight._m0[_1898].x + _731;
    float _2096 = cbLight._m0[_1898].y + _732;
    float _2097 = cbLight._m0[_1898].z + _733;
    float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
    float _2102 = _2101 * _2095;
    float _2103 = _2101 * _2096;
    float _2104 = _2101 * _2097;
    float _2105 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1898].xyz));
    float _4142 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2109 = dot(vec3(_651, _652, _653), vec3(_2102, _2103, _2104));
    float _4153 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2113 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_2102, _2103, _2104));
    float _4164 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2117 = _2094 * _2094;
    float _2121 = ((_2112 * _2112) * (_2117 + (-1.0))) + 1.0;
    float _2128 = exp2(log2(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) * 5.0);
    float _2135 = 1.0 - _2094;
    float _2145 = (0.5 / (((_2026 * ((_2108 * _2135) + _2094)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2135) + _2094) * _2108))) * _2108;
    float _4175 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2147 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2117 / ((_2121 * _2121) * 3.141590118408203125));
    float _2157 = (((((_2128 * _2048) + _802) * cbLight._m0[_2082].x) * _2147) * _1883) + (((((_2047 * _2048) + _802) * cbLight._m0[_1997].x) * _2071) * _1894);
    float _2158 = (((((_2128 * _2050) + _804) * cbLight._m0[_2082].y) * _2147) * _1883) + (((((_2047 * _2050) + _804) * cbLight._m0[_1997].y) * _2071) * _1894);
    float _2159 = (((((_2128 * _2051) + _805) * cbLight._m0[_2082].z) * _2147) * _1883) + (((((_2047 * _2051) + _805) * cbLight._m0[_1997].z) * _2071) * _1894);
    float _2221;
    float _2223;
    float _2225;
    if (_1934)
    {
        _2221 = _2157;
        _2223 = _2158;
        _2225 = _2159;
    }
    else
    {
        uint _2227 = _1860 + 2u;
        uint _2231 = _1860 + 10u;
        float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _654) * 0.949999988079071044921875);
        float _2246 = _2245 * _2245;
        float _2247 = cbLight._m0[_2227].x + _731;
        float _2248 = cbLight._m0[_2227].y + _732;
        float _2249 = cbLight._m0[_2227].z + _733;
        float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
        float _2254 = _2253 * _2247;
        float _2255 = _2253 * _2248;
        float _2256 = _2253 * _2249;
        float _2257 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2227].xyz));
        float _4186 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2261 = dot(vec3(_651, _652, _653), vec3(_2254, _2255, _2256));
        float _4197 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2265 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2254, _2255, _2256));
        float _4208 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2269 = _2246 * _2246;
        float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
        float _2280 = exp2(log2(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * 5.0);
        float _2287 = 1.0 - _2246;
        float _2297 = (0.5 / (((_2026 * ((_2260 * _2287) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2287) + _2246) * _2260))) * _2260;
        float _4219 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2299 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
        float _2300 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2221 = (((((_2280 * _2048) + _802) * cbLight._m0[_2231].x) * _2299) * _2300) + _2157;
        _2223 = (((((_2280 * _2050) + _804) * cbLight._m0[_2231].y) * _2299) * _2300) + _2158;
        _2225 = (((((_2280 * _2051) + _805) * cbLight._m0[_2231].z) * _2299) * _2300) + _2159;
    }
    float _2335;
    float _2337;
    float _2339;
    if (_1952)
    {
        _2335 = _2221;
        _2337 = _2223;
        _2339 = _2225;
    }
    else
    {
        uint _2346 = _1860 + 3u;
        uint _2350 = _1860 + 11u;
        float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _654) * 0.949999988079071044921875);
        float _2365 = _2364 * _2364;
        float _2366 = cbLight._m0[_2346].x + _731;
        float _2367 = cbLight._m0[_2346].y + _732;
        float _2368 = cbLight._m0[_2346].z + _733;
        float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
        float _2373 = _2372 * _2366;
        float _2374 = _2372 * _2367;
        float _2375 = _2372 * _2368;
        float _2376 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2346].xyz));
        float _4235 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2380 = dot(vec3(_651, _652, _653), vec3(_2373, _2374, _2375));
        float _4246 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2384 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2373, _2374, _2375));
        float _4257 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2388 = _2365 * _2365;
        float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
        float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * 5.0);
        float _2406 = 1.0 - _2365;
        float _2416 = (0.5 / (((_2026 * ((_2379 * _2406) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2406) + _2365) * _2379))) * _2379;
        float _4268 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2418 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
        float _2419 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2335 = (((((_2399 * _2048) + _802) * cbLight._m0[_2350].x) * _2418) * _2419) + _2221;
        _2337 = (((((_2399 * _2050) + _804) * cbLight._m0[_2350].y) * _2418) * _2419) + _2223;
        _2339 = (((((_2399 * _2051) + _805) * cbLight._m0[_2350].z) * _2418) * _2419) + _2225;
    }
    float _2554;
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_1858.y == 0u)
    {
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2495 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2494;
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2494;
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2494;
        uvec4 _2509 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2510 = _2509.x;
        uint _2521 = uint((float(_2509.y) * floor(float(uint(cbSceneParam._m0[85u].y * _740) / _2510))) + floor(float(uint(cbSceneParam._m0[85u].x * _739) / _2510)));
        float _2531 = (log2(_2497 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2532 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        uint _2535 = uint(isnan(14.0) ? _2532 : (isnan(_2532) ? 14.0 : min(_2532, 14.0)));
        uvec4 _2540 = texelFetch(g_lightClusterGridBuffer, int(((_2535 << 2u) + (_2521 << 6u)) >> 2u));
        uint _2541 = _2540.x;
        uint _2542 = _2509.z;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        if (((((1u << ((_2542 >> 4u) & 15u)) + 4294967295u) & _2541) == 0u) || ((_2542 & 240u) == 0u))
        {
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
        }
        else
        {
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            uint _2793 = 0u;
            uint _2802;
            bool _2803;
            for (;;)
            {
                _2802 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2793 << 2u)) >> 2u)).x;
                _2803 = _2802 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2803)
                {
                    frontier_phi_61_pred = _2787;
                    frontier_phi_61_pred_1 = _2792;
                    frontier_phi_61_pred_2 = _2791;
                    frontier_phi_61_pred_3 = _2790;
                    frontier_phi_61_pred_4 = _2789;
                    frontier_phi_61_pred_5 = _2788;
                }
                else
                {
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    uint _2917;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2802;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    for (;;)
                    {
                        uint _2921 = uint(findLSB(_2917)) + (_2793 << 5u);
                        uint _2918 = (_2917 + 4294967295u) & _2917;
                        uint _2923 = _2921 * 48u;
                        vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2943 = (_2921 * 48u) + 4u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 3u)).x));
                        uint _2962 = (_2921 * 48u) + 8u;
                        vec3 _2973 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x));
                        float _2977 = _2937.x - _2495;
                        float _2978 = _2937.y - _2496;
                        float _2979 = _2937.z - _2497;
                        float _2980 = dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979));
                        float _2983 = inversesqrt(_2980);
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2987 = dot(vec3(_758, _761, _764), vec3(_2984, _2985, _2986));
                        float _2992 = 1.0 - (_2980 * _2937.w);
                        float _4294 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _2994 = sqrt(_2980) * _2956.w;
                        float _2997 = 1.39999997615814208984375 / (_2994 + 1.39999997615814208984375);
                        float _2998 = _2997 * _2997;
                        float _3001 = ((1.0 - _2998) * _2987) + _2998;
                        float _3004 = _2994 * _2994;
                        float _3008 = ((isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))) * _2993) / ((_3004 * 0.699999988079071044921875) + 1.0);
                        float _3012 = (-0.0) - _2495;
                        float _3013 = (-0.0) - _2496;
                        float _3014 = (-0.0) - _2497;
                        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3029 = exp2(log2(1.0 / ((_3004 * 3.5) + 5.0)) * 0.25);
                        float _3030 = 1.0 - _833;
                        float _3037 = sqrt(1.0 - ((1.0 - (_3030 * _3030)) * (1.0 - (_3029 * _3029))));
                        float _3038 = _3037 * _3037;
                        float _3039 = _3038 * _3038;
                        float _3040 = _3019 + _2984;
                        float _3041 = _3020 + _2985;
                        float _3042 = _3021 + _2986;
                        float _3046 = inversesqrt(dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042)));
                        float _3050 = dot(vec3(_758, _761, _764), vec3(_3019, _3020, _3021));
                        float _4310 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3053 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _3054 = dot(vec3(_758, _761, _764), vec3(_3046 * _3040, _3046 * _3041, _3046 * _3042));
                        float _4321 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3057 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _3061 = ((_3057 * _3057) * (_3039 + (-1.0))) + 1.0;
                        float _3062 = _2997 * _3038;
                        float _3063 = _3062 * _3062;
                        float _3066 = ((1.0 - _3063) * _2987) + _3063;
                        float _4332 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3067 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3068 = 1.0 - _3038;
                        float _3078 = (0.5 / (((_3067 * ((_3053 * _3068) + _3038)) + 9.9999999392252902907785028219223e-09) + (((_3067 * _3068) + _3038) * _3053))) * _3067;
                        float _4343 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3089 = (((_3039 * 3.1415927410125732421875) * (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) / ((_3061 * _3061) * ((_3004 * 2.1991131305694580078125) + 3.141590118408203125))) * _2993;
                        _2846 = (_3008 * _2956.x) + _2914;
                        _2847 = (_3008 * _2956.y) + _2915;
                        _2848 = (_3008 * _2956.z) + _2916;
                        _2843 = (_3089 * _2973.x) + _2911;
                        _2844 = (_3089 * _2973.y) + _2912;
                        _2845 = (_3089 * _2973.z) + _2913;
                        if (_2918 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2918;
                        }
                    }
                    frontier_phi_61_pred = _2843;
                    frontier_phi_61_pred_1 = _2848;
                    frontier_phi_61_pred_2 = _2847;
                    frontier_phi_61_pred_3 = _2846;
                    frontier_phi_61_pred_4 = _2845;
                    frontier_phi_61_pred_5 = _2844;
                }
                _2643 = frontier_phi_61_pred;
                _2653 = frontier_phi_61_pred_1;
                _2651 = frontier_phi_61_pred_2;
                _2649 = frontier_phi_61_pred_3;
                _2647 = frontier_phi_61_pred_4;
                _2645 = frontier_phi_61_pred_5;
                uint _2794 = _2793 + 1u;
                if (_2794 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2787 = _2643;
                    _2788 = _2645;
                    _2789 = _2647;
                    _2790 = _2649;
                    _2791 = _2651;
                    _2792 = _2653;
                    _2793 = _2794;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
        }
        uvec4 _2656 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2657 = _2656.z;
        uint _2659 = (_2657 >> 8u) & 15u;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((4294967295u << _2659) & _2541) == 0u)
        {
            _2755 = _2642;
            _2757 = _2644;
            _2759 = _2646;
            _2761 = _2648;
            _2763 = _2650;
            _2765 = _2652;
        }
        else
        {
            float _2780 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
            float _2781 = _2780 * _2495;
            float _2782 = _2780 * _2496;
            float _2783 = _2780 * _2497;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2659 < ((_2657 >> 12u) & 15u))
            {
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2894 = _2642;
                float _2895 = _2644;
                float _2896 = _2646;
                float _2897 = _2648;
                float _2898 = _2650;
                float _2899 = _2652;
                uint _2900 = _2659;
                uint _2909;
                bool _2910;
                for (;;)
                {
                    _2909 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                    _2910 = _2909 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2910)
                    {
                        frontier_phi_67_pred = _2897;
                        frontier_phi_67_pred_1 = _2898;
                        frontier_phi_67_pred_2 = _2899;
                        frontier_phi_67_pred_3 = _2896;
                        frontier_phi_67_pred_4 = _2895;
                        frontier_phi_67_pred_5 = _2894;
                    }
                    else
                    {
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3107 = _2894;
                        float _3108 = _2895;
                        float _3109 = _2896;
                        float _3110 = _2897;
                        float _3111 = _2898;
                        float _3112 = _2899;
                        uint _3113 = _2909;
                        uint _3114;
                        vec4 _3139;
                        float _3140;
                        vec4 _3155;
                        vec3 _3167;
                        vec4 _3182;
                        vec4 _3197;
                        float _3244;
                        bool _3245;
                        for (;;)
                        {
                            uint _3124 = ((_2900 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3113));
                            _3114 = (_3113 + 4294967295u) & _3113;
                            uint _3126 = _3124 * 40u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            _3140 = _3139.w;
                            uint _3142 = (_3124 * 40u) + 4u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3157 = (_3124 * 40u) + 8u;
                            _3167 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x));
                            uint _3169 = (_3124 * 40u) + 16u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3184 = (_3124 * 40u) + 20u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3200 = (_3124 * 40u) + 24u;
                            vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3219 = (_3124 * 40u) + 28u;
                            vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            _3244 = fma(_2497, _3232.z, fma(_2496, _3232.y, _3232.x * _2495)) + _3232.w;
                            _3245 = !((fma(_2497, _3213.z, fma(_2496, _3213.y, _3213.x * _2495)) + _3213.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3245)
                            {
                                float _3272 = _3139.x - _2495;
                                float _3273 = _3139.y - _2496;
                                float _3274 = _3139.z - _2497;
                                float _3275 = dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274));
                                float _3278 = inversesqrt(_3275);
                                float _3279 = _3278 * _3272;
                                float _3280 = _3278 * _3273;
                                float _3281 = _3278 * _3274;
                                float _3285 = 1.0 - (_3275 / (_3140 * _3140));
                                float _4354 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3286 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3290 = sqrt(_3275) * _3155.w;
                                float _3292 = 1.39999997615814208984375 / (_3290 + 1.39999997615814208984375);
                                float _3293 = _3292 * _3292;
                                float _3296 = ((1.0 - _3293) * dot(vec3(_3279, _3280, _3281), vec3(_758, _761, _764))) + _3293;
                                float _3299 = _3290 * _3290;
                                float _3303 = (fma(_2497, _3182.z, fma(_2496, _3182.y, _3182.x * _2495)) + _3182.w) / _3244;
                                float _3304 = (fma(_2497, _3197.z, fma(_2496, _3197.y, _3197.x * _2495)) + _3197.w) / _3244;
                                float _3308 = 1.0 - dot(vec2(_3303, _3304), vec2(_3303, _3304));
                                float _4370 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3310 = _3309 * (((isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0))) * _3286) / ((_3299 * 0.699999988079071044921875) + 1.0));
                                float _3322 = exp2(log2(1.0 / ((_3299 * 3.5) + 5.0)) * 0.25);
                                float _3323 = 1.0 - _833;
                                float _3330 = sqrt(1.0 - ((1.0 - (_3323 * _3323)) * (1.0 - (_3322 * _3322))));
                                float _3331 = _3330 * _3330;
                                float _3332 = _3331 * _3331;
                                float _3333 = _3279 - _2781;
                                float _3334 = _3280 - _2782;
                                float _3335 = _3281 - _2783;
                                float _3339 = inversesqrt(dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335)));
                                float _3343 = dot(vec3(_758, _761, _764), vec3((-0.0) - _2781, (-0.0) - _2782, (-0.0) - _2783));
                                float _4381 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3346 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3347 = dot(vec3(_758, _761, _764), vec3(_3339 * _3333, _3339 * _3334, _3339 * _3335));
                                float _4392 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3350 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3354 = ((_3350 * _3350) * (_3332 + (-1.0))) + 1.0;
                                float _3355 = _3292 * _3331;
                                float _3356 = _3355 * _3355;
                                float _3362 = ((1.0 - _3356) * dot(vec3(_758, _761, _764), vec3(_3279, _3280, _3281))) + _3356;
                                float _4403 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3363 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3364 = 1.0 - _3331;
                                float _3374 = (0.5 / (((_3363 * ((_3346 * _3364) + _3331)) + 9.9999999392252902907785028219223e-09) + (((_3363 * _3364) + _3331) * _3346))) * _3363;
                                float _4414 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3384 = (_3309 * _3286) * (((_3332 * 3.1415927410125732421875) * (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) / ((_3354 * _3354) * ((_3299 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3384 * _3167.x;
                                frontier_phi_73_pred_1 = _3384 * _3167.y;
                                frontier_phi_73_pred_2 = _3310 * _3155.z;
                                frontier_phi_73_pred_3 = _3310 * _3155.y;
                                frontier_phi_73_pred_4 = _3310 * _3155.x;
                                frontier_phi_73_pred_5 = _3384 * _3167.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3388 = frontier_phi_73_pred;
                            _3389 = frontier_phi_73_pred_1;
                            _3393 = frontier_phi_73_pred_2;
                            _3392 = frontier_phi_73_pred_3;
                            _3391 = frontier_phi_73_pred_4;
                            _3390 = frontier_phi_73_pred_5;
                            _3097 = _3391 + _3110;
                            _3098 = _3392 + _3111;
                            _3099 = _3393 + _3112;
                            _3094 = _3388 + _3107;
                            _3095 = _3389 + _3108;
                            _3096 = _3390 + _3109;
                            if (_3114 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3114;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3097;
                        frontier_phi_67_pred_1 = _3098;
                        frontier_phi_67_pred_2 = _3099;
                        frontier_phi_67_pred_3 = _3096;
                        frontier_phi_67_pred_4 = _3095;
                        frontier_phi_67_pred_5 = _3094;
                    }
                    _2762 = frontier_phi_67_pred;
                    _2764 = frontier_phi_67_pred_1;
                    _2766 = frontier_phi_67_pred_2;
                    _2760 = frontier_phi_67_pred_3;
                    _2758 = frontier_phi_67_pred_4;
                    _2756 = frontier_phi_67_pred_5;
                    uint _2901 = _2900 + 1u;
                    if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2894 = _2756;
                        _2895 = _2758;
                        _2896 = _2760;
                        _2897 = _2762;
                        _2898 = _2764;
                        _2899 = _2766;
                        _2900 = _2901;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2764;
                frontier_phi_55_56_ladder_1 = _2766;
                frontier_phi_55_56_ladder_2 = _2762;
                frontier_phi_55_56_ladder_3 = _2760;
                frontier_phi_55_56_ladder_4 = _2758;
                frontier_phi_55_56_ladder_5 = _2756;
            }
            else
            {
                frontier_phi_55_56_ladder = _2650;
                frontier_phi_55_56_ladder_1 = _2652;
                frontier_phi_55_56_ladder_2 = _2648;
                frontier_phi_55_56_ladder_3 = _2646;
                frontier_phi_55_56_ladder_4 = _2644;
                frontier_phi_55_56_ladder_5 = _2642;
            }
            _2755 = frontier_phi_55_56_ladder_5;
            _2757 = frontier_phi_55_56_ladder_4;
            _2759 = frontier_phi_55_56_ladder_3;
            _2761 = frontier_phi_55_56_ladder_2;
            _2763 = frontier_phi_55_56_ladder;
            _2765 = frontier_phi_55_56_ladder_1;
        }
        float _2770 = isnan(1.0) ? _817 : (isnan(_817) ? 1.0 : min(_817, 1.0));
        _2554 = (_2770 * _2761) + _1990;
        _2556 = (_2770 * _2763) + _1992;
        _2558 = (_2770 * _2765) + _1994;
        _2560 = ((_2755 * _802) * _2770) + _2335;
        _2562 = ((_2757 * _804) * _2770) + _2337;
        _2564 = ((_2759 * _805) * _2770) + _2339;
    }
    else
    {
        _2554 = _1990;
        _2556 = _1992;
        _2558 = _1994;
        _2560 = _2335;
        _2562 = _2337;
        _2564 = _2339;
    }
    float _4430 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4441 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4452 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    uint _2584 = _777 + 6u;
    float _2592 = _739 / cbSceneParam._m0[86u].x;
    float _2593 = _740 / cbSceneParam._m0[86u].y;
    vec4 _2607 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2592, _2593, (log2((isnan(cbSceneParam._m0[77u].w) ? _674 : (isnan(_674) ? cbSceneParam._m0[77u].w : min(_674, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2609 = _2607.x;
    float _2610 = _2607.y;
    float _2611 = _2607.z;
    float _2612 = _2607.w;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_674 > cbSceneParam._m0[78u].w)
    {
        float _2667 = isnan(_674) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _674 : min(cbSceneParam._m0[80u].w, _674));
        float _2668 = _2667 / _674;
        float _2679 = _2668 * _724;
        float _2680 = _725 * _2668;
        float _2681 = (-0.0) - _2680;
        float _2683 = _2668 * _726;
        float _2685 = (cbSceneParam._m0[77u].w * _2681) / _2667;
        float _2686 = _2685 + cbSceneParam._m0[79u].w;
        float _2687 = cbSceneParam._m0[79u].w - _2680;
        float _2693 = sqrt(((_2679 * _2679) + (_2680 * _2680)) + (_2683 * _2683));
        float _2696 = (1.0 - (cbSceneParam._m0[77u].w / _2667)) * _2693;
        float _2701 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2703 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2856;
        if (abs((_2681 - _2685) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2856 = ((((_2686 > 0.0) ? exp2(_2701 * _2686) : (2.0 - exp2(_2703 * _2686))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2696;
        }
        else
        {
            float _2816 = 1.0 / cbSceneParam._m0[80u].x;
            float _2817 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : max(_2686, _2687));
            float _2818 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : min(_2686, _2687));
            float _2827 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : min(_2817, 0.0));
            float _2828 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : min(_2818, 0.0));
            _2856 = ((abs(_2693 / _2681) * cbSceneParam._m0[80u].y) * ((((_2827 - _2828) * 2.0) - ((exp2(_2701 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0)))) - exp2(_2701 * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))))) * _2816)) - ((exp2(_2703 * _2827) - exp2(_2703 * _2828)) * _2816))) + (_2696 * cbSceneParam._m0[80u].z);
        }
        vec4 _2858 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2592, _2593, 1.0), 0.0);
        float _2867 = exp2((_2856 * (-1.44269502162933349609375)) * (1.0 - _2858.w));
        float _2868 = log2(_2867);
        float _2884 = log2(_2612);
        _2705 = (exp2(_2884 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].x)) * _2858.x) / cbSceneParam._m0[78u].x)) + _2609;
        _2707 = (exp2(_2884 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].y)) * _2858.y) / cbSceneParam._m0[78u].y)) + _2610;
        _2709 = (exp2(_2884 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].z)) * _2858.z) / cbSceneParam._m0[78u].z)) + _2611;
        _2711 = _2867 * _2612;
    }
    else
    {
        _2705 = _2609;
        _2707 = _2610;
        _2709 = _2611;
        _2711 = _2612;
    }
    float _2723 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2724 = _2723 == 3.0;
    float _2725 = log2(_2711);
    float _2732 = exp2(_2725 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2554 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _817))) + ((_2560 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2733 = exp2(_2725 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2556 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _817))) + ((_2562 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2734 = exp2(_2725 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2558 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _817))) + ((_2564 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2743 = (_2723 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2743 * (_2724 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2705)));
    SV_Target.y = _2743 * (_2724 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.z = _2743 * (_2724 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.w = cbInstanceData._m0[_2584].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2584].w;
}


