#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1383;
float _4048;
float _4049;
float _4050;
float _4051;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _268 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _268.x * cbMtdParam._m0[10u].x;
    float _275 = _268.y * cbMtdParam._m0[10u].y;
    float _276 = _268.z * cbMtdParam._m0[10u].z;
    vec4 _294 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _344 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _354 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _344)) + 1.0;
    float _4060 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _355 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _362 = (_355 * ((_294.x * cbMtdParam._m0[11u].x) - _274)) + _274;
    float _363 = (_355 * ((_294.y * cbMtdParam._m0[11u].y) - _275)) + _275;
    float _364 = (_355 * ((_294.z * cbMtdParam._m0[11u].z) - _276)) + _276;
    vec4 _382 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _413 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _344)) + 1.0;
    float _4071 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _421 = (_414 * ((_382.x * cbMtdParam._m0[12u].x) - _362)) + _362;
    float _422 = (_414 * ((_382.y * cbMtdParam._m0[12u].y) - _363)) + _363;
    float _423 = (_414 * ((_382.z * cbMtdParam._m0[12u].z) - _364)) + _364;
    vec4 _441 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _466 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _344)) + 1.0;
    float _4082 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    vec4 _495 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _503 = ((((_467 * ((_441.x * cbMtdParam._m0[13u].x) - _421)) + _421) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _495.x;
    float _506 = ((((_467 * ((_441.y * cbMtdParam._m0[13u].y) - _422)) + _422) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _495.y;
    float _509 = ((((_467 * ((_441.z * cbMtdParam._m0[13u].z) - _423)) + _423) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _495.z;
    vec4 _529 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _558 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _4093 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _566 = (_559 * ((_529.x * cbMtdParam._m0[14u].x) - _503)) + _503;
    float _567 = (_559 * ((_529.y * cbMtdParam._m0[14u].y) - _506)) + _506;
    float _568 = (_559 * ((_529.z * cbMtdParam._m0[14u].z) - _509)) + _509;
    vec4 _581 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _583 = _581.x;
    float _601 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _583) * _355) + _583;
    float _618 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _601) * _414) + _601;
    float _635 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _618) * _467) + _618;
    float _637 = _635 - (_635 * TEXCOORD_5.x);
    vec4 _653 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _675 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _677 = _675.x;
    float _678 = _675.y;
    float _681 = cbMtdParam._m0[18u].y * _675.z;
    vec4 _693 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _702 = (((cbMtdParam._m0[18u].x * _693.z) - _681) * _355) + _681;
    vec4 _715 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _726 = (((cbMtdParam._m0[17u].w * _715.z) - _702) * _414) + _702;
    vec4 _739 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _748 = (((cbMtdParam._m0[17u].z * _739.z) - _726) * _467) + _726;
    float _753 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_653.z * cbMtdParam._m0[18u].z) - _748)) + _748;
    float _758 = ((_693.x - _677) * _355) + _677;
    float _759 = ((_693.y - _678) * _355) + _678;
    float _764 = ((_715.x - _758) * _414) + _758;
    float _765 = ((_715.y - _759) * _414) + _759;
    float _774 = ((((_739.x - _764) * _467) + _764) * 2.0) + (-1.0);
    float _775 = ((((_739.y - _765) * _467) + _765) * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _4104 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _781 = sqrt(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))));
    float _787 = ((((_653.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _774;
    float _788 = ((((_653.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _775;
    float _791 = fma(_781, _238 * NORMAL.x, fma(_788, _245 * TANGENT.x, (_231 * _223) * _787));
    float _794 = fma(_781, _238 * NORMAL.y, fma(_788, _245 * TANGENT.y, (_231 * _224) * _787));
    float _797 = fma(_781, _238 * NORMAL.z, fma(_788, _245 * TANGENT.z, (_231 * _225) * _787));
    float _801 = inversesqrt(dot(vec3(_791, _794, _797), vec3(_791, _794, _797)));
    float _802 = _801 * _791;
    float _803 = _801 * _794;
    float _804 = _801 * _797;
    float _4115 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _805 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4137 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4148 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4159 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _809 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _825 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _875 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _865);
    float _876 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _865);
    float _877 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _865);
    float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
    float _882 = _875 * _881;
    float _883 = _876 * _881;
    float _884 = _877 * _881;
    vec4 _889 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _891 = _889.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1063 = sqrt(((_875 * _875) + (_876 * _876)) + (_877 * _877));
        float _1069 = (cbMatDynParam._m0[5u].x * _1063) + cbMatDynParam._m0[5u].y;
        float _4170 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1074 = (cbMatDynParam._m0[5u].z * _1063) + cbMatDynParam._m0[5u].w;
        float _4181 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) - _1070)) + _1070) < ((_891 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _902 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _903 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _921 = fma(_804, cbSceneParam._m0[5u].z, fma(_803, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _802));
    float _924 = fma(_804, cbSceneParam._m0[6u].z, fma(_803, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _802));
    float _927 = fma(_804, cbSceneParam._m0[7u].z, fma(_803, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _802));
    uint _940 = uint(roundEven(NORMAL.w)) * 13u;
    uint _941 = _940 + 9u;
    uint _942 = _941 + uint(cbMatDynParam._m0[0u].w);
    float _948 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * cbInstanceData._m0[_942].x;
    float _949 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * cbInstanceData._m0[_942].y;
    float _950 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * cbInstanceData._m0[_942].z;
    float _4192 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _4203 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _4214 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _954 = 1.0 - _809;
    float _955 = _951 * _954;
    float _956 = _952 * _954;
    float _957 = _953 * _954;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _809;
    float _963 = (_952 + (-0.039999999105930328369140625)) * _809;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _809;
    float _965 = _962 + 0.039999999105930328369140625;
    float _967 = _963 + 0.039999999105930328369140625;
    float _968 = _964 + 0.039999999105930328369140625;
    vec4 _977 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _902, cbSceneParam._m0[86u].y * _903));
    float _980 = _977.x * TEXCOORD_5.w;
    float _981 = dot(vec3(_802, _803, _804), vec3(_882, _883, _884));
    float _984 = _981 * 2.0;
    float _988 = (_984 * _802) - _882;
    float _989 = (_984 * _803) - _883;
    float _990 = (_984 * _804) - _884;
    float _994 = abs(dot(vec3(_882, _883, _884), vec3(_802, _803, _804)));
    float _4225 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _996 = sqrt(_805);
    float _1009 = exp2((_996 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_996 * 3.0));
    float _1015 = (1.0 - _1009) * ((_996 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1016 = _1009 * _996;
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1382;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1107 = fma(_1052, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1044));
        float _1111 = fma(_1052, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1044));
        float _1115 = fma(_1052, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1044));
        float _1140 = _1044 + _802;
        float _1141 = _1048 + _803;
        float _1142 = _1052 + _804;
        float _1152 = fma(_1142, cbModelParam._m0[26u].z, fma(_1141, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1140)) - _1107;
        float _1153 = fma(_1142, cbModelParam._m0[27u].z, fma(_1141, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1140)) - _1111;
        float _1154 = fma(_1142, cbModelParam._m0[28u].z, fma(_1141, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1140)) - _1115;
        float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
        float _1171 = ((_1158 * _1152) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1107 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1158 * _1153) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1111 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1158 * _1154) / cbModelParam._m0[34u].z) + ((((((_1115 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        float _1210 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1176.x + (-0.5));
        float _1212 = _1210 * (_1176.y + (-0.5));
        float _1213 = _1210 * (_1176.z + (-0.5));
        float _1220 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1183.x + (-0.5));
        float _1222 = _1220 * (_1183.y + (-0.5));
        float _1223 = _1220 * (_1183.z + (-0.5));
        float _1230 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1190.x + (-0.5));
        float _1232 = _1230 * (_1190.y + (-0.5));
        float _1233 = _1230 * (_1190.z + (-0.5));
        float _1240 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1197.x + (-0.5));
        float _1242 = _1240 * (_1197.y + (-0.5));
        float _1243 = _1240 * (_1197.z + (-0.5));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = _1211 * 0.5;
        float _1248 = _1221 * 0.5;
        float _1249 = _1231 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1264 = (dot(vec3(_802, _803, _804), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1274 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4273 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1276 + 1.0))) + _1281) * _1244;
        float _1291 = _1212 * 0.5;
        float _1292 = _1222 * 0.5;
        float _1293 = _1232 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_802, _803, _804), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4306 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1318 + 1.0))) + _1323) * _1245;
        float _1333 = _1213 * 0.5;
        float _1334 = _1223 * 0.5;
        float _1335 = _1233 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_802, _803, _804), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4339 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1360 + 1.0))) + _1365) * _1246;
        _1382 = _1213;
        _1384 = _1212;
        _1385 = _1211;
        _1386 = _1223;
        _1387 = _1222;
        _1388 = _1221;
        _1389 = _1233;
        _1390 = _1232;
        _1391 = _1231;
        _1392 = _1246;
        _1393 = _1245;
        _1394 = _1244;
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
    }
    else
    {
        _1382 = _1383;
        _1384 = _1383;
        _1385 = _1383;
        _1386 = _1383;
        _1387 = _1383;
        _1388 = _1383;
        _1389 = _1383;
        _1390 = _1383;
        _1391 = _1383;
        _1392 = _1383;
        _1393 = _1383;
        _1394 = _1383;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1426 = fma(_1052, cbModelParam._m0[30u].z, fma(_1048, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1044));
        float _1430 = fma(_1052, cbModelParam._m0[31u].z, fma(_1048, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1044));
        float _1434 = fma(_1052, cbModelParam._m0[32u].z, fma(_1048, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1044));
        float _1457 = _1044 + _802;
        float _1458 = _1048 + _803;
        float _1459 = _1052 + _804;
        float _1469 = fma(_1459, cbModelParam._m0[30u].z, fma(_1458, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1457)) - _1426;
        float _1470 = fma(_1459, cbModelParam._m0[31u].z, fma(_1458, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1457)) - _1430;
        float _1471 = fma(_1459, cbModelParam._m0[32u].z, fma(_1458, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1457)) - _1434;
        float _1475 = inversesqrt(dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471)));
        float _1488 = ((_1475 * _1469) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1426 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1475 * _1470) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1430 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1475 * _1471) / cbModelParam._m0[35u].z) + ((((((_1434 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        float _1525 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1492.x + (-0.5));
        float _1527 = _1525 * (_1492.y + (-0.5));
        float _1528 = _1525 * (_1492.z + (-0.5));
        float _1535 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1499.x + (-0.5));
        float _1537 = _1535 * (_1499.y + (-0.5));
        float _1538 = _1535 * (_1499.z + (-0.5));
        float _1545 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1506.x + (-0.5));
        float _1547 = _1545 * (_1506.y + (-0.5));
        float _1548 = _1545 * (_1506.z + (-0.5));
        float _1555 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1513.x + (-0.5));
        float _1557 = _1555 * (_1513.y + (-0.5));
        float _1558 = _1555 * (_1513.z + (-0.5));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = _1526 * 0.5;
        float _1563 = _1536 * 0.5;
        float _1564 = _1546 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_802, _803, _804), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4380 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4391 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4402 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_1589 + 1.0))) + _1594) * _1559;
        float _1604 = _1527 * 0.5;
        float _1605 = _1537 * 0.5;
        float _1606 = _1547 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_802, _803, _804), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4413 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4424 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4435 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_1631 + 1.0))) + _1636) * _1560;
        float _1646 = _1528 * 0.5;
        float _1647 = _1538 * 0.5;
        float _1648 = _1548 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_802, _803, _804), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4446 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4457 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4468 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_1673 + 1.0))) + _1678) * _1561;
        _1695 = _1528;
        _1696 = _1527;
        _1697 = _1526;
        _1698 = _1538;
        _1699 = _1537;
        _1700 = _1536;
        _1701 = _1548;
        _1702 = _1547;
        _1703 = _1546;
        _1704 = _1561;
        _1705 = _1560;
        _1706 = _1559;
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
    }
    else
    {
        _1695 = _1383;
        _1696 = _1383;
        _1697 = _1383;
        _1698 = _1383;
        _1699 = _1383;
        _1700 = _1383;
        _1701 = _1383;
        _1702 = _1383;
        _1703 = _1383;
        _1704 = _1383;
        _1705 = _1383;
        _1706 = _1383;
        _1707 = 0.0;
        _1708 = 0.0;
        _1709 = 0.0;
    }
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1395)) + _1395;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1396)) + _1396;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1397)) + _1397;
    float _1742 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1719 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1719 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1719));
    float _1763 = _988 * 0.5;
    float _1764 = _989 * 0.5;
    float _1765 = _990 * 0.5;
    float _1766 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1769 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1772 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1806;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1779 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1382, _1386, _1389, _1392));
        float _1783 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1787 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1385, _1388, _1391, _1394));
        float _1794 = dot(vec4(cbModelParam._m0[39u]), vec4(_1763, _1764, _1765, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1817;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1808 = dot(vec4(cbModelParam._m0[40u]), vec4(_1763, _1764, _1765, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1821 = (_1817 * cbModelParam._m0[1u].x) + (_1806 * (1.0 - cbModelParam._m0[1u].x));
    float _1831 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _805);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1831 : min(cbModelParam._m0[25u].z, _1831));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1880 = fma(_1052, cbModelParam._m0[13u].z, fma(_1048, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044)) + cbModelParam._m0[13u].w;
        float _1884 = fma(_1052, cbModelParam._m0[14u].z, fma(_1048, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044)) + cbModelParam._m0[14u].w;
        float _1888 = fma(_1052, cbModelParam._m0[15u].z, fma(_1048, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044)) + cbModelParam._m0[15u].w;
        float _1891 = fma(_990, cbModelParam._m0[13u].z, fma(_989, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988));
        float _1894 = fma(_990, cbModelParam._m0[14u].z, fma(_989, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988));
        float _1897 = fma(_990, cbModelParam._m0[15u].z, fma(_989, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988));
        float _1925;
        if (_1891 > 0.0)
        {
            _1925 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1925 = frontier_phi_17_15_ladder;
        }
        float _2096;
        if (_1894 > 0.0)
        {
            _2096 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2096 = frontier_phi_26_22_ladder;
        }
        float _2391;
        if (_1897 > 0.0)
        {
            _2391 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2391 = frontier_phi_38_33_ladder;
        }
        float _2393 = isnan(_2096) ? _1925 : (isnan(_1925) ? _2096 : min(_1925, _2096));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1891) + _1880;
        float _2399 = (_2394 * _1894) + _1884;
        float _2400 = (_2394 * _1897) + _1888;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2403 = (-1.0) - _2401;
        float _2405 = _2401 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2400 > _2405) || ((_2400 < _2403) || ((_2399 > _2405) || ((_2399 < _2403) || ((_2398 < _2403) || (_2398 > _2405))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2545 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2400, cbModelParam._m0[9u].z, fma(_2399, cbModelParam._m0[9u].y, _2398 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2400, cbModelParam._m0[10u].z, fma(_2399, cbModelParam._m0[10u].y, _2398 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2400, cbModelParam._m0[11u].z, fma(_2399, cbModelParam._m0[11u].y, _2398 * cbModelParam._m0[11u].x))), _1832);
            frontier_phi_16_38_ladder = _2545.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2545.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2545.x * cbModelParam._m0[1u].y;
        }
        _1913 = frontier_phi_16_38_ladder_2;
        _1915 = frontier_phi_16_38_ladder_1;
        _1917 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1901 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_988, _989, _990), _1832);
        _1913 = _1901.x * cbModelParam._m0[1u].y;
        _1915 = _1901.y * cbModelParam._m0[1u].y;
        _1917 = _1901.z * cbModelParam._m0[1u].y;
    }
    float _1921 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _805);
    float _1922 = isnan(_1921) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1921 : min(cbModelParam._m0[25u].w, _1921));
    float _2011;
    float _2013;
    float _2015;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1975 = fma(_1052, cbModelParam._m0[21u].z, fma(_1048, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044)) + cbModelParam._m0[21u].w;
        float _1979 = fma(_1052, cbModelParam._m0[22u].z, fma(_1048, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044)) + cbModelParam._m0[22u].w;
        float _1983 = fma(_1052, cbModelParam._m0[23u].z, fma(_1048, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044)) + cbModelParam._m0[23u].w;
        float _1986 = fma(_990, cbModelParam._m0[21u].z, fma(_989, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988));
        float _1989 = fma(_990, cbModelParam._m0[22u].z, fma(_989, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988));
        float _1992 = fma(_990, cbModelParam._m0[23u].z, fma(_989, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988));
        float _2101;
        if (_1986 > 0.0)
        {
            _2101 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2101 = frontier_phi_28_24_ladder;
        }
        float _2418;
        if (_1989 > 0.0)
        {
            _2418 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2418 = frontier_phi_40_35_ladder;
        }
        float _2756;
        if (_1992 > 0.0)
        {
            _2756 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2756 = frontier_phi_50_47_ladder;
        }
        float _2758 = isnan(_2418) ? _2101 : (isnan(_2101) ? _2418 : min(_2101, _2418));
        float _2759 = isnan(_2756) ? _2758 : (isnan(_2758) ? _2756 : min(_2758, _2756));
        float _2763 = (_2759 * _1986) + _1975;
        float _2764 = (_2759 * _1989) + _1979;
        float _2765 = (_2759 * _1992) + _1983;
        float _2766 = _2759 * 9.9999997473787516355514526367188e-05;
        float _2767 = (-1.0) - _2766;
        float _2769 = _2766 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2765 > _2769) || ((_2765 < _2767) || ((_2764 > _2769) || ((_2764 < _2767) || ((_2763 < _2767) || (_2763 > _2769))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2765, cbModelParam._m0[17u].z, fma(_2764, cbModelParam._m0[17u].y, _2763 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2765, cbModelParam._m0[18u].z, fma(_2764, cbModelParam._m0[18u].y, _2763 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2765, cbModelParam._m0[19u].z, fma(_2764, cbModelParam._m0[19u].y, _2763 * cbModelParam._m0[19u].x))), _1922);
            frontier_phi_25_50_ladder = _2887.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2887.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2887.x * cbModelParam._m0[1u].z;
        }
        _2011 = frontier_phi_25_50_ladder_2;
        _2013 = frontier_phi_25_50_ladder_1;
        _2015 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_988, _989, _990), _1922);
        _2011 = _1995.x * cbModelParam._m0[1u].z;
        _2013 = _1995.y * cbModelParam._m0[1u].z;
        _2015 = _1995.z * cbModelParam._m0[1u].z;
    }
    float _2028 = (((_1015 * _965) + _1016) * _980) * ((cbModelParam._m0[1u].w * (_2011 - _1913)) + _1913);
    float _2030 = (((_1015 * _967) + _1016) * _980) * ((cbModelParam._m0[1u].w * (_2013 - _1915)) + _1915);
    float _2032 = (((_1015 * _968) + _1016) * _980) * ((cbModelParam._m0[1u].w * (_2015 - _1917)) + _1917);
    float _2035 = fma(_2032, cbSceneParam._m0[89u].z, fma(_2030, cbSceneParam._m0[89u].y, _2028 * cbSceneParam._m0[89u].x));
    float _2038 = fma(_2032, cbSceneParam._m0[90u].z, fma(_2030, cbSceneParam._m0[90u].y, _2028 * cbSceneParam._m0[90u].x));
    float _2041 = fma(_2032, cbSceneParam._m0[91u].z, fma(_2030, cbSceneParam._m0[91u].y, _2028 * cbSceneParam._m0[91u].x));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2083 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2087 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2088 = _2075 / _2087;
    float _2089 = _2079 / _2087;
    float _2090 = _2083 / _2087;
    float _2237;
    float _2238;
    float _2239;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2117 = ((uint(_2090 > cbSceneParam._m0[59u].y) + uint(_2090 > cbSceneParam._m0[59u].x)) + uint(_2090 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2118 = _2117 + 43u;
        uint _2126 = _2117 + 44u;
        uint _2134 = _2117 + 45u;
        uint _2142 = _2117 + 46u;
        float _2153 = fma(_2087, cbSceneParam._m0[_2118].w, fma(_2083, cbSceneParam._m0[_2118].z, fma(_2079, cbSceneParam._m0[_2118].y, _2075 * cbSceneParam._m0[_2118].x)));
        float _2157 = fma(_2087, cbSceneParam._m0[_2126].w, fma(_2083, cbSceneParam._m0[_2126].z, fma(_2079, cbSceneParam._m0[_2126].y, _2075 * cbSceneParam._m0[_2126].x)));
        float _2165 = fma(_2087, cbSceneParam._m0[_2142].w, fma(_2083, cbSceneParam._m0[_2142].z, fma(_2079, cbSceneParam._m0[_2142].y, _2075 * cbSceneParam._m0[_2142].x)));
        float _2170 = cbSceneParam._m0[33u].z * _2165;
        float _2172 = cbSceneParam._m0[33u].w * _2165;
        float _2175 = fma(_2087, cbSceneParam._m0[_2134].w, fma(_2083, cbSceneParam._m0[_2134].z, fma(_2079, cbSceneParam._m0[_2134].y, _2075 * cbSceneParam._m0[_2134].x))) / _2165;
        float _2223 = (cbSceneParam._m0[33u].x - sqrt(((_2089 * _2089) + (_2088 * _2088)) + (_2090 * _2090))) * cbSceneParam._m0[33u].y;
        float _4594 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2230 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 + _2153) / _2165, (_2172 + _2157) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2172 + _2153) / _2165, (_2157 - _2170) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 - _2170) / _2165, (_2157 - _2172) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 - _2172) / _2165, (_2170 + _2157) / _2165), _2175), 0.0)).x), vec4(0.25)));
        _2237 = 1.0 - (_2230 * cbSceneParam._m0[34u].x);
        _2238 = 1.0 - (_2230 * cbSceneParam._m0[34u].y);
        _2239 = 1.0 - (_2230 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2237 = 1.0;
        _2238 = 1.0;
        _2239 = 1.0;
    }
    float _2303;
    float _2305;
    float _2307;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2291 = fma(_2087, cbSceneParam._m0[63u].w, fma(_2083, cbSceneParam._m0[63u].z, fma(_2079, cbSceneParam._m0[63u].y, _2075 * cbSceneParam._m0[63u].x)));
        float _2292 = fma(_2087, cbSceneParam._m0[60u].w, fma(_2083, cbSceneParam._m0[60u].z, fma(_2079, cbSceneParam._m0[60u].y, _2075 * cbSceneParam._m0[60u].x))) / _2291;
        float _2293 = fma(_2087, cbSceneParam._m0[61u].w, fma(_2083, cbSceneParam._m0[61u].z, fma(_2079, cbSceneParam._m0[61u].y, _2075 * cbSceneParam._m0[61u].x))) / _2291;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2292 >= cbSceneParam._m0[64u].x) && (_2293 >= cbSceneParam._m0[64u].y)) && (_2292 <= cbSceneParam._m0[64u].z)) && (_2293 <= cbSceneParam._m0[64u].w))
        {
            float _2431 = fma(_2087, cbSceneParam._m0[62u].w, fma(_2083, cbSceneParam._m0[62u].z, fma(_2079, cbSceneParam._m0[62u].y, _2075 * cbSceneParam._m0[62u].x))) / _2291;
            float _2435 = isnan(cbSceneParam._m0[41u].w) ? _2431 : (isnan(_2431) ? cbSceneParam._m0[41u].w : max(_2431, cbSceneParam._m0[41u].w));
            float _2478 = (cbSceneParam._m0[33u].x - sqrt(((_2089 * _2089) + (_2088 * _2088)) + (_2090 * _2090))) * cbSceneParam._m0[33u].y;
            float _4610 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
            float _2485 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2292, cbSceneParam._m0[33u].w + _2293), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2292, _2293 - cbSceneParam._m0[33u].z), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2292 - cbSceneParam._m0[33u].z, _2293 - cbSceneParam._m0[33u].w), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2292 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2293), _2435), 0.0)).x), vec4(0.25)));
            float _2489 = 1.0 - (_2485 * cbSceneParam._m0[34u].x);
            float _2490 = 1.0 - (_2485 * cbSceneParam._m0[34u].y);
            float _2491 = 1.0 - (_2485 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2491) ? _2239 : (isnan(_2239) ? _2491 : min(_2239, _2491));
            frontier_phi_37_36_ladder_1 = isnan(_2490) ? _2238 : (isnan(_2238) ? _2490 : min(_2238, _2490));
            frontier_phi_37_36_ladder_2 = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
        }
        else
        {
            frontier_phi_37_36_ladder = _2239;
            frontier_phi_37_36_ladder_1 = _2238;
            frontier_phi_37_36_ladder_2 = _2237;
        }
        _2303 = frontier_phi_37_36_ladder_2;
        _2305 = frontier_phi_37_36_ladder_1;
        _2307 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2303 = _2237;
        _2305 = _2238;
        _2307 = _2239;
    }
    uvec4 _2312 = floatBitsToUint(cbInstanceData._m0[_940 + 5u]);
    uint _2314 = _2312.x * 14u;
    uint _2315 = _2314 + 13u;
    float _2322 = _980 + (-1.0);
    float _2327 = (cbLight._m0[_2315].x * _2322) + 1.0;
    float _2328 = (cbLight._m0[_2315].y * _2322) + 1.0;
    float _2329 = (cbLight._m0[_2315].z * _2322) + 1.0;
    float _2330 = (cbLight._m0[_2315].w * _2322) + 1.0;
    uint _2331 = _2314 + 5u;
    float _2337 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
    uint _2341 = _2314 + 4u;
    float _2350 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
    uint _2354 = _2314 | 1u;
    float _2365 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_802, _803, _804));
    float _2368 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_802, _803, _804));
    float _4646 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _4657 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2373 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * 0.3183098733425140380859375;
    float _2375 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * 0.3183098733425140380859375;
    float _2382 = ((cbLight._m0[_2331].x * _2337) * _2375) + (((cbLight._m0[_2341].x * _2303) * _2350) * _2373);
    float _2383 = ((_2337 * cbLight._m0[_2331].y) * _2375) + (((cbLight._m0[_2341].y * _2305) * _2350) * _2373);
    float _2384 = ((_2337 * cbLight._m0[_2331].z) * _2375) + (((cbLight._m0[_2341].z * _2307) * _2350) * _2373);
    uvec4 _2388 = floatBitsToUint(cbLight._m0[_2314 + 12u]);
    bool _2390 = _2388.x == 0u;
    float _2492;
    float _2494;
    float _2496;
    if (_2390)
    {
        _2492 = _2382;
        _2494 = _2383;
        _2496 = _2384;
    }
    else
    {
        uint _2500 = _2314 + 6u;
        float _2516 = (dot(vec3(cbLight._m0[_2314 + 2u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2517 = _2516 * _2516;
        float _4668 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2518 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2519 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2492 = (((cbLight._m0[_2500].x * 0.3183098733425140380859375) * _2518) * _2519) + _2382;
        _2494 = (((cbLight._m0[_2500].y * 0.3183098733425140380859375) * _2518) * _2519) + _2383;
        _2496 = (((cbLight._m0[_2500].z * 0.3183098733425140380859375) * _2518) * _2519) + _2384;
    }
    bool _2499 = _2388.y == 0u;
    float _2554;
    float _2556;
    float _2558;
    if (_2499)
    {
        _2554 = _2492;
        _2556 = _2494;
        _2558 = _2496;
    }
    else
    {
        uint _2727 = _2314 + 7u;
        float _2743 = (dot(vec3(cbLight._m0[_2314 + 3u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2744 = _2743 * _2743;
        float _4684 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2745 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2746 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2554 = (((cbLight._m0[_2727].x * 0.3183098733425140380859375) * _2745) * _2746) + _2492;
        _2556 = (((cbLight._m0[_2727].y * 0.3183098733425140380859375) * _2745) * _2746) + _2494;
        _2558 = (((cbLight._m0[_2727].z * 0.3183098733425140380859375) * _2745) * _2746) + _2496;
    }
    uint _2561 = _2314 + 8u;
    float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _805) * 0.949999988079071044921875);
    float _2575 = _2574 * _2574;
    float _2576 = cbLight._m0[_2314].x + _882;
    float _2577 = cbLight._m0[_2314].y + _883;
    float _2578 = cbLight._m0[_2314].z + _884;
    float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
    float _2583 = _2582 * _2576;
    float _2584 = _2582 * _2577;
    float _2585 = _2582 * _2578;
    float _2586 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2314].xyz));
    float _4700 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
    float _4711 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _2590 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
    float _2591 = dot(vec3(_802, _803, _804), vec3(_2583, _2584, _2585));
    float _4722 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2594 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
    float _2595 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2583, _2584, _2585));
    float _4733 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2599 = _2575 * _2575;
    float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
    float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) * 5.0);
    float _2612 = 0.959999978542327880859375 - _962;
    float _2614 = 0.959999978542327880859375 - _963;
    float _2615 = 0.959999978542327880859375 - _964;
    float _2622 = 1.0 - _2575;
    float _2633 = (0.5 / (((_2590 * ((_2589 * _2622) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2622) + _2575) * _2589))) * _2589;
    float _4744 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2635 = (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
    uint _2649 = _2314 + 9u;
    float _2660 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _805) * 0.949999988079071044921875);
    float _2661 = _2660 * _2660;
    float _2662 = cbLight._m0[_2354].x + _882;
    float _2663 = cbLight._m0[_2354].y + _883;
    float _2664 = cbLight._m0[_2354].z + _884;
    float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
    float _2669 = _2668 * _2662;
    float _2670 = _2668 * _2663;
    float _2671 = _2668 * _2664;
    float _2672 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2354].xyz));
    float _4755 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2675 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _2676 = dot(vec3(_802, _803, _804), vec3(_2669, _2670, _2671));
    float _4766 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2679 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
    float _2680 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2669, _2670, _2671));
    float _4777 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2684 = _2661 * _2661;
    float _2688 = ((_2679 * _2679) * (_2684 + (-1.0))) + 1.0;
    float _2695 = exp2(log2(1.0 - (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) * 5.0);
    float _2702 = 1.0 - _2661;
    float _2712 = (0.5 / (((_2590 * ((_2675 * _2702) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2702) + _2661) * _2675))) * _2675;
    float _4788 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2714 = (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2684 / ((_2688 * _2688) * 3.141590118408203125));
    float _2724 = (((((_2695 * _2612) + _965) * cbLight._m0[_2649].x) * _2714) * _2337) + ((((cbLight._m0[_2561].x * _2303) * ((_2611 * _2612) + _965)) * _2635) * _2350);
    float _2725 = (((((_2695 * _2614) + _967) * cbLight._m0[_2649].y) * _2714) * _2337) + ((((cbLight._m0[_2561].y * _2305) * ((_2611 * _2614) + _967)) * _2635) * _2350);
    float _2726 = (((((_2695 * _2615) + _968) * cbLight._m0[_2649].z) * _2714) * _2337) + ((((cbLight._m0[_2561].z * _2307) * ((_2611 * _2615) + _968)) * _2635) * _2350);
    float _2782;
    float _2784;
    float _2786;
    if (_2390)
    {
        _2782 = _2724;
        _2784 = _2725;
        _2786 = _2726;
    }
    else
    {
        uint _2788 = _2314 + 2u;
        uint _2792 = _2314 + 10u;
        float _2806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2788].w)) * _805) * 0.949999988079071044921875);
        float _2807 = _2806 * _2806;
        float _2808 = cbLight._m0[_2788].x + _882;
        float _2809 = cbLight._m0[_2788].y + _883;
        float _2810 = cbLight._m0[_2788].z + _884;
        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
        float _2815 = _2814 * _2808;
        float _2816 = _2814 * _2809;
        float _2817 = _2814 * _2810;
        float _2818 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2788].xyz));
        float _4799 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _2822 = dot(vec3(_802, _803, _804), vec3(_2815, _2816, _2817));
        float _4810 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2825 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
        float _2826 = dot(vec3(cbLight._m0[_2788].xyz), vec3(_2815, _2816, _2817));
        float _4821 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2830 = _2807 * _2807;
        float _2834 = ((_2825 * _2825) * (_2830 + (-1.0))) + 1.0;
        float _2841 = exp2(log2(1.0 - (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0)))) * 5.0);
        float _2848 = 1.0 - _2807;
        float _2858 = (0.5 / (((_2590 * ((_2821 * _2848) + _2807)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2848) + _2807) * _2821))) * _2821;
        float _4832 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2860 = (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0))) * (_2830 / ((_2834 * _2834) * 3.141590118408203125));
        float _2861 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2782 = (((((_2841 * _2612) + _965) * cbLight._m0[_2792].x) * _2860) * _2861) + _2724;
        _2784 = (((((_2841 * _2614) + _967) * cbLight._m0[_2792].y) * _2860) * _2861) + _2725;
        _2786 = (((((_2841 * _2615) + _968) * cbLight._m0[_2792].z) * _2860) * _2861) + _2726;
    }
    float _2892;
    float _2894;
    float _2896;
    if (_2499)
    {
        _2892 = _2782;
        _2894 = _2784;
        _2896 = _2786;
    }
    else
    {
        uint _2903 = _2314 + 3u;
        uint _2907 = _2314 + 11u;
        float _2921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2903].w)) * _805) * 0.949999988079071044921875);
        float _2922 = _2921 * _2921;
        float _2923 = cbLight._m0[_2903].x + _882;
        float _2924 = cbLight._m0[_2903].y + _883;
        float _2925 = cbLight._m0[_2903].z + _884;
        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
        float _2930 = _2929 * _2923;
        float _2931 = _2929 * _2924;
        float _2932 = _2929 * _2925;
        float _2933 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2903].xyz));
        float _4848 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
        float _2937 = dot(vec3(_802, _803, _804), vec3(_2930, _2931, _2932));
        float _4859 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2940 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
        float _2941 = dot(vec3(cbLight._m0[_2903].xyz), vec3(_2930, _2931, _2932));
        float _4870 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2945 = _2922 * _2922;
        float _2949 = ((_2940 * _2940) * (_2945 + (-1.0))) + 1.0;
        float _2956 = exp2(log2(1.0 - (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) * 5.0);
        float _2963 = 1.0 - _2922;
        float _2973 = (0.5 / (((_2590 * ((_2936 * _2963) + _2922)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2963) + _2922) * _2936))) * _2936;
        float _4881 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        float _2975 = (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2945 / ((_2949 * _2949) * 3.141590118408203125));
        float _2976 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2892 = (((((_2956 * _2612) + _965) * cbLight._m0[_2907].x) * _2975) * _2976) + _2782;
        _2894 = (((((_2956 * _2614) + _967) * cbLight._m0[_2907].y) * _2975) * _2976) + _2784;
        _2896 = (((((_2956 * _2615) + _968) * cbLight._m0[_2907].z) * _2975) * _2976) + _2786;
    }
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    if (_2312.y == 0u)
    {
        uvec4 _2997 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2998 = _2997.x;
        uint _3009 = uint((float(_2997.y) * floor(float(uint(cbSceneParam._m0[85u].y * _903) / _2998))) + floor(float(uint(cbSceneParam._m0[85u].x * _902) / _2998)));
        float _3019 = (log2(_2090 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3020 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        uint _3023 = uint(isnan(14.0) ? _3020 : (isnan(_3020) ? 14.0 : min(_3020, 14.0)));
        uvec4 _3028 = texelFetch(g_lightClusterGridBuffer, int(((_3023 << 2u) + (_3009 << 6u)) >> 2u));
        uint _3029 = _3028.x;
        uint _3030 = _2997.z;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        if (((((1u << ((_3030 >> 4u) & 15u)) + 4294967295u) & _3029) == 0u) || ((_3030 & 240u) == 0u))
        {
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
        }
        else
        {
            float _3110;
            float _3112;
            float _3114;
            float _3116;
            float _3118;
            float _3120;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            uint _3268 = 0u;
            uint _3277;
            bool _3278;
            for (;;)
            {
                _3277 = texelFetch(g_lightClassification, int((((_3023 << 5u) + (_3009 << 9u)) + (_3268 << 2u)) >> 2u)).x;
                _3278 = _3277 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3278)
                {
                    frontier_phi_71_pred = _3267;
                    frontier_phi_71_pred_1 = _3266;
                    frontier_phi_71_pred_2 = _3265;
                    frontier_phi_71_pred_3 = _3264;
                    frontier_phi_71_pred_4 = _3263;
                    frontier_phi_71_pred_5 = _3262;
                }
                else
                {
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    uint _3413;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3266;
                    _3412 = _3267;
                    _3413 = _3277;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    for (;;)
                    {
                        uint _3417 = uint(findLSB(_3413)) + (_3268 << 5u);
                        uint _3414 = (_3413 + 4294967295u) & _3413;
                        uint _3419 = _3417 * 48u;
                        vec4 _3433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3419)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 3u)).x));
                        uint _3439 = (_3417 * 48u) + 4u;
                        vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3439)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 3u)).x));
                        uint _3458 = (_3417 * 48u) + 8u;
                        vec3 _3469 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3458)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 2u)).x));
                        float _3473 = _3433.x - _2088;
                        float _3474 = _3433.y - _2089;
                        float _3475 = _3433.z - _2090;
                        float _3476 = dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475));
                        float _3479 = inversesqrt(_3476);
                        float _3480 = _3479 * _3473;
                        float _3481 = _3479 * _3474;
                        float _3482 = _3479 * _3475;
                        float _3483 = dot(vec3(_921, _924, _927), vec3(_3480, _3481, _3482));
                        float _3488 = 1.0 - (_3476 * _3433.w);
                        float _4907 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3489 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3490 = sqrt(_3476) * _3452.w;
                        float _3493 = 1.39999997615814208984375 / (_3490 + 1.39999997615814208984375);
                        float _3494 = _3493 * _3493;
                        float _3497 = ((1.0 - _3494) * _3483) + _3494;
                        float _3500 = _3490 * _3490;
                        float _3504 = ((isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0))) * _3489) / ((_3500 * 0.699999988079071044921875) + 1.0);
                        float _3508 = (-0.0) - _2088;
                        float _3509 = (-0.0) - _2089;
                        float _3510 = (-0.0) - _2090;
                        float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                        float _3515 = _3514 * _3508;
                        float _3516 = _3514 * _3509;
                        float _3517 = _3514 * _3510;
                        float _3524 = exp2(log2(1.0 / ((_3500 * 3.5) + 5.0)) * 0.25);
                        float _3525 = 1.0 - _996;
                        float _3532 = sqrt(1.0 - ((1.0 - (_3525 * _3525)) * (1.0 - (_3524 * _3524))));
                        float _3533 = _3532 * _3532;
                        float _3534 = _3533 * _3533;
                        float _3535 = _3515 + _3480;
                        float _3536 = _3516 + _3481;
                        float _3537 = _3517 + _3482;
                        float _3541 = inversesqrt(dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537)));
                        float _3545 = dot(vec3(_921, _924, _927), vec3(_3515, _3516, _3517));
                        float _4923 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                        float _3548 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                        float _3549 = dot(vec3(_921, _924, _927), vec3(_3541 * _3535, _3541 * _3536, _3541 * _3537));
                        float _4934 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3552 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                        float _3556 = ((_3552 * _3552) * (_3534 + (-1.0))) + 1.0;
                        float _3557 = _3493 * _3533;
                        float _3558 = _3557 * _3557;
                        float _3561 = ((1.0 - _3558) * _3483) + _3558;
                        float _4945 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3562 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                        float _3563 = 1.0 - _3533;
                        float _3573 = (0.5 / (((_3562 * ((_3548 * _3563) + _3533)) + 9.9999999392252902907785028219223e-09) + (((_3562 * _3563) + _3533) * _3548))) * _3562;
                        float _4956 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                        float _3584 = (((_3534 * 3.1415927410125732421875) * (isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0)))) / ((_3556 * _3556) * ((_3500 * 2.1991131305694580078125) + 3.141590118408203125))) * _3489;
                        _3337 = (_3504 * _3452.x) + _3410;
                        _3338 = (_3504 * _3452.y) + _3411;
                        _3339 = (_3504 * _3452.z) + _3412;
                        _3334 = (_3584 * _3469.x) + _3407;
                        _3335 = (_3584 * _3469.y) + _3408;
                        _3336 = (_3584 * _3469.z) + _3409;
                        if (_3414 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3338;
                            _3412 = _3339;
                            _3413 = _3414;
                        }
                    }
                    frontier_phi_71_pred = _3339;
                    frontier_phi_71_pred_1 = _3338;
                    frontier_phi_71_pred_2 = _3337;
                    frontier_phi_71_pred_3 = _3336;
                    frontier_phi_71_pred_4 = _3335;
                    frontier_phi_71_pred_5 = _3334;
                }
                _3120 = frontier_phi_71_pred;
                _3118 = frontier_phi_71_pred_1;
                _3116 = frontier_phi_71_pred_2;
                _3114 = frontier_phi_71_pred_3;
                _3112 = frontier_phi_71_pred_4;
                _3110 = frontier_phi_71_pred_5;
                uint _3269 = _3268 + 1u;
                if (_3269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3262 = _3110;
                    _3263 = _3112;
                    _3264 = _3114;
                    _3265 = _3116;
                    _3266 = _3118;
                    _3267 = _3120;
                    _3268 = _3269;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
        }
        uvec4 _3123 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3124 = _3123.z;
        uint _3126 = (_3124 >> 8u) & 15u;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        if (((4294967295u << _3126) & _3029) == 0u)
        {
            _3230 = _3109;
            _3232 = _3111;
            _3234 = _3113;
            _3236 = _3115;
            _3238 = _3117;
            _3240 = _3119;
        }
        else
        {
            float _3255 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
            float _3256 = _3255 * _2088;
            float _3257 = _3255 * _2089;
            float _3258 = _3255 * _2090;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3126 < ((_3124 >> 12u) & 15u))
            {
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3390 = _3109;
                float _3391 = _3111;
                float _3392 = _3113;
                float _3393 = _3115;
                float _3394 = _3117;
                float _3395 = _3119;
                uint _3396 = _3126;
                uint _3405;
                bool _3406;
                for (;;)
                {
                    _3405 = texelFetch(g_lightClassification, int((((_3023 << 5u) + (_3009 << 9u)) + (_3396 << 2u)) >> 2u)).x;
                    _3406 = _3405 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3406)
                    {
                        frontier_phi_82_pred = _3395;
                        frontier_phi_82_pred_1 = _3394;
                        frontier_phi_82_pred_2 = _3393;
                        frontier_phi_82_pred_3 = _3392;
                        frontier_phi_82_pred_4 = _3391;
                        frontier_phi_82_pred_5 = _3390;
                    }
                    else
                    {
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3611 = _3390;
                        float _3612 = _3391;
                        float _3613 = _3392;
                        float _3614 = _3393;
                        float _3615 = _3394;
                        float _3616 = _3395;
                        uint _3617 = _3405;
                        uint _3618;
                        vec4 _3643;
                        float _3644;
                        vec4 _3659;
                        vec3 _3671;
                        vec4 _3686;
                        vec4 _3701;
                        float _3748;
                        bool _3749;
                        for (;;)
                        {
                            uint _3628 = ((_3396 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3617));
                            _3618 = (_3617 + 4294967295u) & _3617;
                            uint _3630 = _3628 * 40u;
                            _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            _3644 = _3643.w;
                            uint _3646 = (_3628 * 40u) + 4u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3661 = (_3628 * 40u) + 8u;
                            _3671 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x));
                            uint _3673 = (_3628 * 40u) + 16u;
                            _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3688 = (_3628 * 40u) + 20u;
                            _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            uint _3704 = (_3628 * 40u) + 24u;
                            vec4 _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            uint _3723 = (_3628 * 40u) + 28u;
                            vec4 _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            _3748 = fma(_2090, _3736.z, fma(_2089, _3736.y, _3736.x * _2088)) + _3736.w;
                            _3749 = !((fma(_2090, _3717.z, fma(_2089, _3717.y, _3717.x * _2088)) + _3717.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3749)
                            {
                                float _3776 = _3643.x - _2088;
                                float _3777 = _3643.y - _2089;
                                float _3778 = _3643.z - _2090;
                                float _3779 = dot(vec3(_3776, _3777, _3778), vec3(_3776, _3777, _3778));
                                float _3782 = inversesqrt(_3779);
                                float _3783 = _3782 * _3776;
                                float _3784 = _3782 * _3777;
                                float _3785 = _3782 * _3778;
                                float _3789 = 1.0 - (_3779 / (_3644 * _3644));
                                float _4967 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3790 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3794 = sqrt(_3779) * _3659.w;
                                float _3796 = 1.39999997615814208984375 / (_3794 + 1.39999997615814208984375);
                                float _3797 = _3796 * _3796;
                                float _3800 = ((1.0 - _3797) * dot(vec3(_3783, _3784, _3785), vec3(_921, _924, _927))) + _3797;
                                float _3803 = _3794 * _3794;
                                float _3807 = (fma(_2090, _3686.z, fma(_2089, _3686.y, _3686.x * _2088)) + _3686.w) / _3748;
                                float _3808 = (fma(_2090, _3701.z, fma(_2089, _3701.y, _3701.x * _2088)) + _3701.w) / _3748;
                                float _3812 = 1.0 - dot(vec2(_3807, _3808), vec2(_3807, _3808));
                                float _4983 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3813 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3814 = _3813 * (((isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0))) * _3790) / ((_3803 * 0.699999988079071044921875) + 1.0));
                                float _3826 = exp2(log2(1.0 / ((_3803 * 3.5) + 5.0)) * 0.25);
                                float _3827 = 1.0 - _996;
                                float _3834 = sqrt(1.0 - ((1.0 - (_3827 * _3827)) * (1.0 - (_3826 * _3826))));
                                float _3835 = _3834 * _3834;
                                float _3836 = _3835 * _3835;
                                float _3837 = _3783 - _3256;
                                float _3838 = _3784 - _3257;
                                float _3839 = _3785 - _3258;
                                float _3843 = inversesqrt(dot(vec3(_3837, _3838, _3839), vec3(_3837, _3838, _3839)));
                                float _3847 = dot(vec3(_921, _924, _927), vec3((-0.0) - _3256, (-0.0) - _3257, (-0.0) - _3258));
                                float _4994 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3850 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                                float _3851 = dot(vec3(_921, _924, _927), vec3(_3843 * _3837, _3843 * _3838, _3843 * _3839));
                                float _5005 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3854 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
                                float _3858 = ((_3854 * _3854) * (_3836 + (-1.0))) + 1.0;
                                float _3859 = _3796 * _3835;
                                float _3860 = _3859 * _3859;
                                float _3866 = ((1.0 - _3860) * dot(vec3(_921, _924, _927), vec3(_3783, _3784, _3785))) + _3860;
                                float _5016 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3867 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
                                float _3868 = 1.0 - _3835;
                                float _3878 = (0.5 / (((_3867 * ((_3850 * _3868) + _3835)) + 9.9999999392252902907785028219223e-09) + (((_3867 * _3868) + _3835) * _3850))) * _3867;
                                float _5027 = isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0));
                                float _3888 = (_3813 * _3790) * (((_3836 * 3.1415927410125732421875) * (isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0)))) / ((_3858 * _3858) * ((_3803 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3814 * _3659.z;
                                frontier_phi_88_pred_1 = _3814 * _3659.y;
                                frontier_phi_88_pred_2 = _3814 * _3659.x;
                                frontier_phi_88_pred_3 = _3888 * _3671.z;
                                frontier_phi_88_pred_4 = _3888 * _3671.y;
                                frontier_phi_88_pred_5 = _3888 * _3671.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3897 = frontier_phi_88_pred;
                            _3896 = frontier_phi_88_pred_1;
                            _3895 = frontier_phi_88_pred_2;
                            _3894 = frontier_phi_88_pred_3;
                            _3893 = frontier_phi_88_pred_4;
                            _3892 = frontier_phi_88_pred_5;
                            _3601 = _3895 + _3614;
                            _3602 = _3896 + _3615;
                            _3603 = _3897 + _3616;
                            _3598 = _3892 + _3611;
                            _3599 = _3893 + _3612;
                            _3600 = _3894 + _3613;
                            if (_3618 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3618;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3603;
                        frontier_phi_82_pred_1 = _3602;
                        frontier_phi_82_pred_2 = _3601;
                        frontier_phi_82_pred_3 = _3600;
                        frontier_phi_82_pred_4 = _3599;
                        frontier_phi_82_pred_5 = _3598;
                    }
                    _3241 = frontier_phi_82_pred;
                    _3239 = frontier_phi_82_pred_1;
                    _3237 = frontier_phi_82_pred_2;
                    _3235 = frontier_phi_82_pred_3;
                    _3233 = frontier_phi_82_pred_4;
                    _3231 = frontier_phi_82_pred_5;
                    uint _3397 = _3396 + 1u;
                    if (_3397 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3390 = _3231;
                        _3391 = _3233;
                        _3392 = _3235;
                        _3393 = _3237;
                        _3394 = _3239;
                        _3395 = _3241;
                        _3396 = _3397;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3237;
                frontier_phi_63_64_ladder_1 = _3241;
                frontier_phi_63_64_ladder_2 = _3239;
                frontier_phi_63_64_ladder_3 = _3235;
                frontier_phi_63_64_ladder_4 = _3233;
                frontier_phi_63_64_ladder_5 = _3231;
            }
            else
            {
                frontier_phi_63_64_ladder = _3115;
                frontier_phi_63_64_ladder_1 = _3119;
                frontier_phi_63_64_ladder_2 = _3117;
                frontier_phi_63_64_ladder_3 = _3113;
                frontier_phi_63_64_ladder_4 = _3111;
                frontier_phi_63_64_ladder_5 = _3109;
            }
            _3230 = frontier_phi_63_64_ladder_5;
            _3232 = frontier_phi_63_64_ladder_4;
            _3234 = frontier_phi_63_64_ladder_3;
            _3236 = frontier_phi_63_64_ladder;
            _3238 = frontier_phi_63_64_ladder_2;
            _3240 = frontier_phi_63_64_ladder_1;
        }
        float _3245 = isnan(1.0) ? _980 : (isnan(_980) ? 1.0 : min(_980, 1.0));
        _3042 = (_3245 * _3236) + _2554;
        _3044 = (_3245 * _3238) + _2556;
        _3046 = (_3245 * _3240) + _2558;
        _3048 = ((_3230 * _965) * _3245) + _2892;
        _3050 = ((_3232 * _967) * _3245) + _2894;
        _3052 = ((_3234 * _968) * _3245) + _2896;
    }
    else
    {
        _3042 = _2554;
        _3044 = _2556;
        _3046 = _2558;
        _3048 = _2892;
        _3050 = _2894;
        _3052 = _2896;
    }
    float _5043 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _5054 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _5065 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _3069 = ((isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0))) * (_3042 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _980))) + ((_3048 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1821)) * cbPerFrame._m0[3u].x);
    float _3070 = ((isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0))) * (_3044 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _980))) + ((_3050 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1821)) * cbPerFrame._m0[3u].x);
    float _3071 = ((isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0))) * (_3046 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _980))) + ((_3052 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1821)) * cbPerFrame._m0[3u].x);
    uint _3072 = _940 + 6u;
    float _3080 = _902 / cbSceneParam._m0[86u].x;
    float _3081 = _903 / cbSceneParam._m0[86u].y;
    vec4 _3095 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3080, _3081, (log2((isnan(cbSceneParam._m0[77u].w) ? _825 : (isnan(_825) ? cbSceneParam._m0[77u].w : min(_825, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3097 = _3095.x;
    float _3098 = _3095.y;
    float _3099 = _3095.z;
    float _3100 = _3095.w;
    float _3172;
    float _3174;
    float _3176;
    float _3178;
    if (_825 > cbSceneParam._m0[78u].w)
    {
        float _3134 = isnan(_825) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _825 : min(cbSceneParam._m0[80u].w, _825));
        float _3135 = _3134 / _825;
        float _3146 = _3135 * _875;
        float _3147 = _876 * _3135;
        float _3148 = (-0.0) - _3147;
        float _3150 = _3135 * _877;
        float _3152 = (cbSceneParam._m0[77u].w * _3148) / _3134;
        float _3153 = _3152 + cbSceneParam._m0[79u].w;
        float _3154 = cbSceneParam._m0[79u].w - _3147;
        float _3160 = sqrt(((_3146 * _3146) + (_3147 * _3147)) + (_3150 * _3150));
        float _3163 = (1.0 - (cbSceneParam._m0[77u].w / _3134)) * _3160;
        float _3168 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3170 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3347;
        if (abs((_3148 - _3152) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3347 = ((((_3153 > 0.0) ? exp2(_3168 * _3153) : (2.0 - exp2(_3170 * _3153))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3163;
        }
        else
        {
            float _3291 = 1.0 / cbSceneParam._m0[80u].x;
            float _3292 = isnan(_3154) ? _3153 : (isnan(_3153) ? _3154 : max(_3153, _3154));
            float _3293 = isnan(_3154) ? _3153 : (isnan(_3153) ? _3154 : min(_3153, _3154));
            float _3302 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : min(_3292, 0.0));
            float _3303 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : min(_3293, 0.0));
            _3347 = ((abs(_3160 / _3148) * cbSceneParam._m0[80u].y) * ((((_3302 - _3303) * 2.0) - ((exp2(_3168 * (isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0)))) - exp2(_3168 * (isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))))) * _3291)) - ((exp2(_3170 * _3302) - exp2(_3170 * _3303)) * _3291))) + (_3163 * cbSceneParam._m0[80u].z);
        }
        vec4 _3349 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3080, _3081, 1.0), 0.0);
        float _3358 = exp2((_3347 * (-1.44269502162933349609375)) * (1.0 - _3349.w));
        float _3359 = log2(_3358);
        float _3375 = log2(_3100);
        _3172 = (exp2(_3375 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3359 * cbSceneParam._m0[78u].x)) * _3349.x) / cbSceneParam._m0[78u].x)) + _3097;
        _3174 = (exp2(_3375 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3359 * cbSceneParam._m0[78u].y)) * _3349.y) / cbSceneParam._m0[78u].y)) + _3098;
        _3176 = (exp2(_3375 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3359 * cbSceneParam._m0[78u].z)) * _3349.z) / cbSceneParam._m0[78u].z)) + _3099;
        _3178 = _3358 * _3100;
    }
    else
    {
        _3172 = _3097;
        _3174 = _3098;
        _3176 = _3099;
        _3178 = _3100;
    }
    bool _3385;
    vec4 _3188;
    vec4 _3210;
    float _3212;
    float _3216;
    float _3217;
    float _3218;
    float _3219;
    bool _3229;
    for (;;)
    {
        _3188 = cbMatDynParam._m0[0u];
        float _3190 = roundEven(_3188.y);
        bool _3191 = _3190 == 3.0;
        float _3192 = log2(_3178);
        float _3199 = exp2(_3192 * cbSceneParam._m0[78u].x) * _3069;
        float _3200 = exp2(_3192 * cbSceneParam._m0[78u].y) * _3070;
        float _3201 = exp2(_3192 * cbSceneParam._m0[78u].z) * _3071;
        float _3208 = _891 + (-0.5);
        _3210 = cbMtdParam._m0[1u];
        _3212 = _3210.y * _3208;
        float _3215 = (_3190 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3216 = _3215 * (_3191 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3172)));
        _3217 = _3215 * (_3191 ? _3200 : (_3200 + (cbSceneParam._m0[72u].w * _3174)));
        _3218 = _3215 * (_3191 ? _3201 : (_3201 + (cbSceneParam._m0[72u].w * _3176)));
        _3219 = _3208 * 0.999000012874603271484375;
        _3229 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3229)
        {
            if ((cbInstanceData._m0[_940 + 7u].x + _3219) < 0.5)
            {
                _3385 = true;
                break;
            }
        }
        uint _3326 = _941 + uint(_3188.w);
        if ((cbInstanceData._m0[_3326].w < 1.0) && ((cbInstanceData._m0[_3326].w + _3219) < 0.5))
        {
            _3385 = true;
            break;
        }
        if ((_3212 + 1.0) < _3210.x)
        {
            _3385 = true;
            break;
        }
        _3385 = false;
        break;
    }
    float _3589;
    if (_3385)
    {
        discard_state = true;
        _3589 = 0.0;
    }
    else
    {
        _3589 = cbInstanceData._m0[_3072].w;
    }
    SV_Target.x = _3216;
    SV_Target.y = _3217;
    SV_Target.z = _3218;
    SV_Target.w = _3589;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3072].w;
    discard_exit();
}


