#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1226;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _246 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _246.x * cbMtdParam._m0[10u].x;
    float _253 = _246.y * cbMtdParam._m0[10u].y;
    float _254 = _246.z * cbMtdParam._m0[10u].z;
    vec4 _272 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _322 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _332 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _322)) + 1.0;
    float _3555 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _333 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _340 = (_333 * ((_272.x * cbMtdParam._m0[11u].x) - _252)) + _252;
    float _341 = (_333 * ((_272.y * cbMtdParam._m0[11u].y) - _253)) + _253;
    float _342 = (_333 * ((_272.z * cbMtdParam._m0[11u].z) - _254)) + _254;
    vec4 _360 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _391 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _322)) + 1.0;
    float _3566 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _399 = (_392 * ((_360.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _400 = (_392 * ((_360.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _401 = (_392 * ((_360.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _419 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _444 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _322)) + 1.0;
    float _3577 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    vec4 _473 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _481 = ((((_445 * ((_419.x * cbMtdParam._m0[13u].x) - _399)) + _399) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _473.x;
    float _484 = ((((_445 * ((_419.y * cbMtdParam._m0[13u].y) - _400)) + _400) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _473.y;
    float _487 = ((((_445 * ((_419.z * cbMtdParam._m0[13u].z) - _401)) + _401) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _473.z;
    vec4 _500 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _502 = _500.x;
    float _520 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _502) * _333) + _502;
    float _537 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _520) * _392) + _520;
    float _554 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _537) * _445) + _537;
    vec4 _566 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _568 = _566.x;
    float _569 = _566.y;
    float _575 = cbMtdParam._m0[18u].y * _566.z;
    vec4 _587 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _596 = (((cbMtdParam._m0[18u].x * _587.z) - _575) * _333) + _575;
    vec4 _609 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _620 = (((cbMtdParam._m0[17u].w * _609.z) - _596) * _392) + _596;
    vec4 _633 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _642 = (((cbMtdParam._m0[17u].z * _633.z) - _620) * _445) + _620;
    float _647 = ((_587.x - _568) * _333) + _568;
    float _648 = ((_587.y - _569) * _333) + _569;
    float _653 = ((_609.x - _647) * _392) + _647;
    float _654 = ((_609.y - _648) * _392) + _648;
    float _663 = ((((_633.x - _653) * _445) + _653) * 2.0) + (-1.0);
    float _665 = ((((_633.y - _654) * _445) + _654) * 2.0) + (-1.0);
    float _666 = dot(vec2(_663, _665), vec2(_663, _665));
    float _3588 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _671 = sqrt(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))));
    float _674 = fma(_671, _216 * NORMAL.x, fma(_665, _223 * TANGENT.x, (_209 * _201) * _663));
    float _677 = fma(_671, _216 * NORMAL.y, fma(_665, _223 * TANGENT.y, (_209 * _202) * _663));
    float _680 = fma(_671, _216 * NORMAL.z, fma(_665, _223 * TANGENT.z, (_209 * _203) * _663));
    float _684 = inversesqrt(dot(vec3(_674, _677, _680), vec3(_674, _677, _680)));
    float _685 = _684 * _674;
    float _686 = _684 * _677;
    float _687 = _684 * _680;
    float _3599 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _688 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3621 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3632 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3643 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _692 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _708 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _758 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _748);
    float _759 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _748);
    float _760 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _748);
    float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
    float _765 = _758 * _764;
    float _766 = _759 * _764;
    float _767 = _760 * _764;
    float _773 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _774 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _792 = fma(_687, cbSceneParam._m0[5u].z, fma(_686, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _685));
    float _795 = fma(_687, cbSceneParam._m0[6u].z, fma(_686, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _685));
    float _798 = fma(_687, cbSceneParam._m0[7u].z, fma(_686, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _685));
    uint _811 = uint(roundEven(NORMAL.w)) * 13u;
    uint _813 = (_811 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _819 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_813].x;
    float _820 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_813].y;
    float _821 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_813].z;
    float _3654 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _825 = 1.0 - _692;
    float _826 = _822 * _825;
    float _827 = _823 * _825;
    float _828 = _824 * _825;
    float _833 = (_822 + (-0.039999999105930328369140625)) * _692;
    float _834 = (_823 + (-0.039999999105930328369140625)) * _692;
    float _835 = (_824 + (-0.039999999105930328369140625)) * _692;
    float _836 = _833 + 0.039999999105930328369140625;
    float _838 = _834 + 0.039999999105930328369140625;
    float _839 = _835 + 0.039999999105930328369140625;
    vec4 _848 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _773, cbSceneParam._m0[86u].y * _774));
    float _851 = _848.x * TEXCOORD_5.w;
    float _852 = dot(vec3(_685, _686, _687), vec3(_765, _766, _767));
    float _855 = _852 * 2.0;
    float _859 = (_855 * _685) - _765;
    float _860 = (_855 * _686) - _766;
    float _861 = (_855 * _687) - _767;
    float _865 = abs(dot(vec3(_765, _766, _767), vec3(_685, _686, _687)));
    float _3687 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _867 = sqrt(_688);
    float _880 = exp2((_867 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_867 * 3.0));
    float _886 = (1.0 - _880) * ((_867 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _887 = _880 * _867;
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1225;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _950 = fma(_923, cbModelParam._m0[26u].z, fma(_919, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _915));
        float _954 = fma(_923, cbModelParam._m0[27u].z, fma(_919, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _915));
        float _958 = fma(_923, cbModelParam._m0[28u].z, fma(_919, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _915));
        float _983 = _915 + _685;
        float _984 = _919 + _686;
        float _985 = _923 + _687;
        float _995 = fma(_985, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _983)) - _950;
        float _996 = fma(_985, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _983)) - _954;
        float _997 = fma(_985, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _983)) - _958;
        float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
        float _1014 = ((_1001 * _995) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_950 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1001 * _996) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_954 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1001 * _997) / cbModelParam._m0[34u].z) + ((((((_958 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        float _1053 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1019.x + (-0.5));
        float _1055 = _1053 * (_1019.y + (-0.5));
        float _1056 = _1053 * (_1019.z + (-0.5));
        float _1063 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1026.x + (-0.5));
        float _1065 = _1063 * (_1026.y + (-0.5));
        float _1066 = _1063 * (_1026.z + (-0.5));
        float _1073 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1033.x + (-0.5));
        float _1075 = _1073 * (_1033.y + (-0.5));
        float _1076 = _1073 * (_1033.z + (-0.5));
        float _1083 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1040.x + (-0.5));
        float _1085 = _1083 * (_1040.y + (-0.5));
        float _1086 = _1083 * (_1040.z + (-0.5));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = _1054 * 0.5;
        float _1091 = _1064 * 0.5;
        float _1092 = _1074 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1107 = (dot(vec3(_685, _686, _687), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1117 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3735 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1119 + 1.0))) + _1124) * _1087;
        float _1134 = _1055 * 0.5;
        float _1135 = _1065 * 0.5;
        float _1136 = _1075 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_685, _686, _687), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3768 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1161 + 1.0))) + _1166) * _1088;
        float _1176 = _1056 * 0.5;
        float _1177 = _1066 * 0.5;
        float _1178 = _1076 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_685, _686, _687), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3801 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1203 + 1.0))) + _1208) * _1089;
        _1225 = _1056;
        _1227 = _1055;
        _1228 = _1054;
        _1229 = _1066;
        _1230 = _1065;
        _1231 = _1064;
        _1232 = _1076;
        _1233 = _1075;
        _1234 = _1074;
        _1235 = _1089;
        _1236 = _1088;
        _1237 = _1087;
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
    }
    else
    {
        _1225 = _1226;
        _1227 = _1226;
        _1228 = _1226;
        _1229 = _1226;
        _1230 = _1226;
        _1231 = _1226;
        _1232 = _1226;
        _1233 = _1226;
        _1234 = _1226;
        _1235 = _1226;
        _1236 = _1226;
        _1237 = _1226;
        _1238 = 0.0;
        _1239 = 0.0;
        _1240 = 0.0;
    }
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1266 = fma(_923, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915));
        float _1270 = fma(_923, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915));
        float _1274 = fma(_923, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915));
        float _1297 = _915 + _685;
        float _1298 = _919 + _686;
        float _1299 = _923 + _687;
        float _1309 = fma(_1299, cbModelParam._m0[30u].z, fma(_1298, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1297)) - _1266;
        float _1310 = fma(_1299, cbModelParam._m0[31u].z, fma(_1298, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1297)) - _1270;
        float _1311 = fma(_1299, cbModelParam._m0[32u].z, fma(_1298, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1297)) - _1274;
        float _1315 = inversesqrt(dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311)));
        float _1328 = ((_1315 * _1309) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1266 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1315 * _1310) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1270 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1315 * _1311) / cbModelParam._m0[35u].z) + ((((((_1274 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        float _1365 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1332.x + (-0.5));
        float _1367 = _1365 * (_1332.y + (-0.5));
        float _1368 = _1365 * (_1332.z + (-0.5));
        float _1375 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1339.x + (-0.5));
        float _1377 = _1375 * (_1339.y + (-0.5));
        float _1378 = _1375 * (_1339.z + (-0.5));
        float _1385 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1346.x + (-0.5));
        float _1387 = _1385 * (_1346.y + (-0.5));
        float _1388 = _1385 * (_1346.z + (-0.5));
        float _1395 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1353.x + (-0.5));
        float _1397 = _1395 * (_1353.y + (-0.5));
        float _1398 = _1395 * (_1353.z + (-0.5));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = _1366 * 0.5;
        float _1403 = _1376 * 0.5;
        float _1404 = _1386 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_685, _686, _687), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _3864 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1429 + 1.0))) + _1434) * _1399;
        float _1444 = _1367 * 0.5;
        float _1445 = _1377 * 0.5;
        float _1446 = _1387 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_685, _686, _687), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _3897 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1471 + 1.0))) + _1476) * _1400;
        float _1486 = _1368 * 0.5;
        float _1487 = _1378 * 0.5;
        float _1488 = _1388 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_685, _686, _687), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _3930 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1513 + 1.0))) + _1518) * _1401;
        _1535 = _1368;
        _1536 = _1367;
        _1537 = _1366;
        _1538 = _1378;
        _1539 = _1377;
        _1540 = _1376;
        _1541 = _1388;
        _1542 = _1387;
        _1543 = _1386;
        _1544 = _1401;
        _1545 = _1400;
        _1546 = _1399;
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
    }
    else
    {
        _1535 = _1226;
        _1536 = _1226;
        _1537 = _1226;
        _1538 = _1226;
        _1539 = _1226;
        _1540 = _1226;
        _1541 = _1226;
        _1542 = _1226;
        _1543 = _1226;
        _1544 = _1226;
        _1545 = _1226;
        _1546 = _1226;
        _1547 = 0.0;
        _1548 = 0.0;
        _1549 = 0.0;
    }
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1238)) + _1238;
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1239)) + _1239;
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1240)) + _1240;
    float _1582 = fma(_1561, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1559 * cbSceneParam._m0[89u].x));
    float _1585 = fma(_1561, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1559 * cbSceneParam._m0[90u].x));
    float _1588 = fma(_1561, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1559));
    float _1603 = _859 * 0.5;
    float _1604 = _860 * 0.5;
    float _1605 = _861 * 0.5;
    float _1606 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1609 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1612 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1646;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1619 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1225, _1229, _1232, _1235));
        float _1623 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1227, _1230, _1233, _1236));
        float _1627 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1228, _1231, _1234, _1237));
        float _1634 = dot(vec4(cbModelParam._m0[39u]), vec4(_1603, _1604, _1605, 1.0));
        _1646 = dot(vec3(isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1634) ? 0.0 : (isnan(0.0) ? _1634 : max(0.0, _1634))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1646 = 1.0;
    }
    float _1657;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1648 = dot(vec4(cbModelParam._m0[40u]), vec4(_1603, _1604, _1605, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1648) ? 0.0 : (isnan(0.0) ? _1648 : max(0.0, _1648))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1661 = (_1657 * cbModelParam._m0[1u].x) + (_1646 * (1.0 - cbModelParam._m0[1u].x));
    float _1671 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _688);
    float _1672 = isnan(_1671) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1671 : min(cbModelParam._m0[25u].z, _1671));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1721 = fma(_923, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915)) + cbModelParam._m0[13u].w;
        float _1725 = fma(_923, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915)) + cbModelParam._m0[14u].w;
        float _1729 = fma(_923, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915)) + cbModelParam._m0[15u].w;
        float _1732 = fma(_861, cbModelParam._m0[13u].z, fma(_860, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859));
        float _1735 = fma(_861, cbModelParam._m0[14u].z, fma(_860, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859));
        float _1738 = fma(_861, cbModelParam._m0[15u].z, fma(_860, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859));
        float _1766;
        if (_1732 > 0.0)
        {
            _1766 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1766 = frontier_phi_14_12_ladder;
        }
        float _1968;
        if (_1735 > 0.0)
        {
            _1968 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1968 = frontier_phi_23_19_ladder;
        }
        float _2222;
        if (_1738 > 0.0)
        {
            _2222 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2222 = frontier_phi_35_30_ladder;
        }
        float _2224 = isnan(_1968) ? _1766 : (isnan(_1766) ? _1968 : min(_1766, _1968));
        float _2225 = isnan(_2222) ? _2224 : (isnan(_2224) ? _2222 : min(_2224, _2222));
        float _2229 = (_2225 * _1732) + _1721;
        float _2230 = (_2225 * _1735) + _1725;
        float _2231 = (_2225 * _1738) + _1729;
        float _2232 = _2225 * 9.9999997473787516355514526367188e-05;
        float _2234 = (-1.0) - _2232;
        float _2236 = _2232 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2231 > _2236) || ((_2231 < _2234) || ((_2230 > _2236) || ((_2230 < _2234) || ((_2229 < _2234) || (_2229 > _2236))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2359 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2231, cbModelParam._m0[9u].z, fma(_2230, cbModelParam._m0[9u].y, _2229 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2231, cbModelParam._m0[10u].z, fma(_2230, cbModelParam._m0[10u].y, _2229 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2231, cbModelParam._m0[11u].z, fma(_2230, cbModelParam._m0[11u].y, _2229 * cbModelParam._m0[11u].x))), _1672);
            frontier_phi_13_35_ladder = _2359.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2359.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2359.x * cbModelParam._m0[1u].y;
        }
        _1754 = frontier_phi_13_35_ladder_2;
        _1756 = frontier_phi_13_35_ladder_1;
        _1758 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_859, _860, _861), _1672);
        _1754 = _1742.x * cbModelParam._m0[1u].y;
        _1756 = _1742.y * cbModelParam._m0[1u].y;
        _1758 = _1742.z * cbModelParam._m0[1u].y;
    }
    float _1762 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _688);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1762 : min(cbModelParam._m0[25u].w, _1762));
    float _1852;
    float _1854;
    float _1856;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1816 = fma(_923, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915)) + cbModelParam._m0[21u].w;
        float _1820 = fma(_923, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915)) + cbModelParam._m0[22u].w;
        float _1824 = fma(_923, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915)) + cbModelParam._m0[23u].w;
        float _1827 = fma(_861, cbModelParam._m0[21u].z, fma(_860, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859));
        float _1830 = fma(_861, cbModelParam._m0[22u].z, fma(_860, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859));
        float _1833 = fma(_861, cbModelParam._m0[23u].z, fma(_860, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859));
        float _1973;
        if (_1827 > 0.0)
        {
            _1973 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1973 = frontier_phi_25_21_ladder;
        }
        float _2249;
        if (_1830 > 0.0)
        {
            _2249 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2249 = frontier_phi_37_32_ladder;
        }
        float _2462;
        if (_1833 > 0.0)
        {
            _2462 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2462 = frontier_phi_46_43_ladder;
        }
        float _2464 = isnan(_2249) ? _1973 : (isnan(_1973) ? _2249 : min(_1973, _2249));
        float _2465 = isnan(_2462) ? _2464 : (isnan(_2464) ? _2462 : min(_2464, _2462));
        float _2469 = (_2465 * _1827) + _1816;
        float _2470 = (_2465 * _1830) + _1820;
        float _2471 = (_2465 * _1833) + _1824;
        float _2472 = _2465 * 9.9999997473787516355514526367188e-05;
        float _2473 = (-1.0) - _2472;
        float _2475 = _2472 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2471 > _2475) || ((_2471 < _2473) || ((_2470 > _2475) || ((_2470 < _2473) || ((_2469 < _2473) || (_2469 > _2475))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2670 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2471, cbModelParam._m0[17u].z, fma(_2470, cbModelParam._m0[17u].y, _2469 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2471, cbModelParam._m0[18u].z, fma(_2470, cbModelParam._m0[18u].y, _2469 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2471, cbModelParam._m0[19u].z, fma(_2470, cbModelParam._m0[19u].y, _2469 * cbModelParam._m0[19u].x))), _1763);
            frontier_phi_22_46_ladder = _2670.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2670.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2670.x * cbModelParam._m0[1u].z;
        }
        _1852 = frontier_phi_22_46_ladder_2;
        _1854 = frontier_phi_22_46_ladder_1;
        _1856 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_859, _860, _861), _1763);
        _1852 = _1836.x * cbModelParam._m0[1u].z;
        _1854 = _1836.y * cbModelParam._m0[1u].z;
        _1856 = _1836.z * cbModelParam._m0[1u].z;
    }
    float _1869 = (((_886 * _836) + _887) * _851) * ((cbModelParam._m0[1u].w * (_1852 - _1754)) + _1754);
    float _1871 = (((_886 * _838) + _887) * _851) * ((cbModelParam._m0[1u].w * (_1854 - _1756)) + _1756);
    float _1873 = (((_886 * _839) + _887) * _851) * ((cbModelParam._m0[1u].w * (_1856 - _1758)) + _1758);
    float _1876 = fma(_1873, cbSceneParam._m0[89u].z, fma(_1871, cbSceneParam._m0[89u].y, _1869 * cbSceneParam._m0[89u].x));
    float _1879 = fma(_1873, cbSceneParam._m0[90u].z, fma(_1871, cbSceneParam._m0[90u].y, _1869 * cbSceneParam._m0[90u].x));
    float _1882 = fma(_1873, cbSceneParam._m0[91u].z, fma(_1871, cbSceneParam._m0[91u].y, _1869 * cbSceneParam._m0[91u].x));
    uvec4 _1892 = floatBitsToUint(cbInstanceData._m0[_811 + 5u]);
    uint _1894 = _1892.x * 14u;
    uint _1895 = _1894 + 13u;
    float _1902 = _851 + (-1.0);
    float _1907 = (cbLight._m0[_1895].x * _1902) + 1.0;
    float _1908 = (cbLight._m0[_1895].y * _1902) + 1.0;
    float _1909 = (cbLight._m0[_1895].z * _1902) + 1.0;
    float _1910 = (cbLight._m0[_1895].w * _1902) + 1.0;
    uint _1911 = _1894 + 5u;
    float _1917 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
    uint _1921 = _1894 + 4u;
    float _1927 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1931 = _1894 | 1u;
    float _1942 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_685, _686, _687));
    float _1945 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_685, _686, _687));
    float _4066 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _4077 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1950 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.3183098733425140380859375;
    float _1952 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.3183098733425140380859375;
    float _1959 = ((cbLight._m0[_1911].x * _1917) * _1952) + ((cbLight._m0[_1921].x * _1927) * _1950);
    float _1960 = ((_1917 * cbLight._m0[_1911].y) * _1952) + ((_1927 * cbLight._m0[_1921].y) * _1950);
    float _1961 = ((_1917 * cbLight._m0[_1911].z) * _1952) + ((_1927 * cbLight._m0[_1921].z) * _1950);
    uvec4 _1965 = floatBitsToUint(cbLight._m0[_1894 + 12u]);
    bool _1967 = _1965.x == 0u;
    float _1978;
    float _1980;
    float _1982;
    if (_1967)
    {
        _1978 = _1959;
        _1980 = _1960;
        _1982 = _1961;
    }
    else
    {
        uint _1986 = _1894 + 6u;
        float _2002 = (dot(vec3(cbLight._m0[_1894 + 2u].xyz), vec3(_685, _686, _687)) * 0.5) + 0.5;
        float _2003 = _2002 * _2002;
        float _4088 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2004 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2005 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _1978 = (((cbLight._m0[_1986].x * 0.3183098733425140380859375) * _2004) * _2005) + _1959;
        _1980 = (((cbLight._m0[_1986].y * 0.3183098733425140380859375) * _2004) * _2005) + _1960;
        _1982 = (((cbLight._m0[_1986].z * 0.3183098733425140380859375) * _2004) * _2005) + _1961;
    }
    bool _1985 = _1965.y == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1985)
    {
        _2023 = _1978;
        _2025 = _1980;
        _2027 = _1982;
    }
    else
    {
        uint _2193 = _1894 + 7u;
        float _2209 = (dot(vec3(cbLight._m0[_1894 + 3u].xyz), vec3(_685, _686, _687)) * 0.5) + 0.5;
        float _2210 = _2209 * _2209;
        float _4104 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2211 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2212 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2023 = (((cbLight._m0[_2193].x * 0.3183098733425140380859375) * _2211) * _2212) + _1978;
        _2025 = (((cbLight._m0[_2193].y * 0.3183098733425140380859375) * _2211) * _2212) + _1980;
        _2027 = (((cbLight._m0[_2193].z * 0.3183098733425140380859375) * _2211) * _2212) + _1982;
    }
    uint _2030 = _1894 + 8u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _688) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1894].x + _765;
    float _2046 = cbLight._m0[_1894].y + _766;
    float _2047 = cbLight._m0[_1894].z + _767;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_1894].xyz));
    float _4120 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _4131 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _2059 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2060 = dot(vec3(_685, _686, _687), vec3(_2052, _2053, _2054));
    float _4142 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2064 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_2052, _2053, _2054));
    float _4153 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2068 = _2044 * _2044;
    float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
    float _2080 = exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0);
    float _2081 = 0.959999978542327880859375 - _833;
    float _2083 = 0.959999978542327880859375 - _834;
    float _2084 = 0.959999978542327880859375 - _835;
    float _2091 = 1.0 - _2044;
    float _2102 = (0.5 / (((_2059 * ((_2058 * _2091) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2091) + _2044) * _2058))) * _2058;
    float _4164 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2104 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
    uint _2115 = _1894 + 9u;
    float _2126 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1931].w)) * _688) * 0.949999988079071044921875);
    float _2127 = _2126 * _2126;
    float _2128 = cbLight._m0[_1931].x + _765;
    float _2129 = cbLight._m0[_1931].y + _766;
    float _2130 = cbLight._m0[_1931].z + _767;
    float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
    float _2135 = _2134 * _2128;
    float _2136 = _2134 * _2129;
    float _2137 = _2134 * _2130;
    float _2138 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_1931].xyz));
    float _4175 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2142 = dot(vec3(_685, _686, _687), vec3(_2135, _2136, _2137));
    float _4186 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2146 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_2135, _2136, _2137));
    float _4197 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2150 = _2127 * _2127;
    float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
    float _2161 = exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0);
    float _2168 = 1.0 - _2127;
    float _2178 = (0.5 / (((_2059 * ((_2141 * _2168) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2168) + _2127) * _2141))) * _2141;
    float _4208 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2180 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
    float _2190 = (((((_2161 * _2081) + _836) * cbLight._m0[_2115].x) * _2180) * _1917) + (((((_2080 * _2081) + _836) * cbLight._m0[_2030].x) * _2104) * _1927);
    float _2191 = (((((_2161 * _2083) + _838) * cbLight._m0[_2115].y) * _2180) * _1917) + (((((_2080 * _2083) + _838) * cbLight._m0[_2030].y) * _2104) * _1927);
    float _2192 = (((((_2161 * _2084) + _839) * cbLight._m0[_2115].z) * _2180) * _1917) + (((((_2080 * _2084) + _839) * cbLight._m0[_2030].z) * _2104) * _1927);
    float _2254;
    float _2256;
    float _2258;
    if (_1967)
    {
        _2254 = _2190;
        _2256 = _2191;
        _2258 = _2192;
    }
    else
    {
        uint _2260 = _1894 + 2u;
        uint _2264 = _1894 + 10u;
        float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _688) * 0.949999988079071044921875);
        float _2279 = _2278 * _2278;
        float _2280 = cbLight._m0[_2260].x + _765;
        float _2281 = cbLight._m0[_2260].y + _766;
        float _2282 = cbLight._m0[_2260].z + _767;
        float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
        float _2287 = _2286 * _2280;
        float _2288 = _2286 * _2281;
        float _2289 = _2286 * _2282;
        float _2290 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_2260].xyz));
        float _4219 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2294 = dot(vec3(_685, _686, _687), vec3(_2287, _2288, _2289));
        float _4230 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2297 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2298 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2287, _2288, _2289));
        float _4241 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2302 = _2279 * _2279;
        float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
        float _2313 = exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0);
        float _2320 = 1.0 - _2279;
        float _2330 = (0.5 / (((_2059 * ((_2293 * _2320) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2320) + _2279) * _2293))) * _2293;
        float _4252 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2332 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
        float _2333 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2254 = (((((_2313 * _2081) + _836) * cbLight._m0[_2264].x) * _2332) * _2333) + _2190;
        _2256 = (((((_2313 * _2083) + _838) * cbLight._m0[_2264].y) * _2332) * _2333) + _2191;
        _2258 = (((((_2313 * _2084) + _839) * cbLight._m0[_2264].z) * _2332) * _2333) + _2192;
    }
    float _2368;
    float _2370;
    float _2372;
    if (_1985)
    {
        _2368 = _2254;
        _2370 = _2256;
        _2372 = _2258;
    }
    else
    {
        uint _2379 = _1894 + 3u;
        uint _2383 = _1894 + 11u;
        float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2379].w)) * _688) * 0.949999988079071044921875);
        float _2398 = _2397 * _2397;
        float _2399 = cbLight._m0[_2379].x + _765;
        float _2400 = cbLight._m0[_2379].y + _766;
        float _2401 = cbLight._m0[_2379].z + _767;
        float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
        float _2406 = _2405 * _2399;
        float _2407 = _2405 * _2400;
        float _2408 = _2405 * _2401;
        float _2409 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_2379].xyz));
        float _4268 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2413 = dot(vec3(_685, _686, _687), vec3(_2406, _2407, _2408));
        float _4279 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2417 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_2406, _2407, _2408));
        float _4290 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2421 = _2398 * _2398;
        float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
        float _2432 = exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0);
        float _2439 = 1.0 - _2398;
        float _2449 = (0.5 / (((_2059 * ((_2412 * _2439) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2439) + _2398) * _2412))) * _2412;
        float _4301 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2451 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
        float _2452 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2368 = (((((_2432 * _2081) + _836) * cbLight._m0[_2383].x) * _2451) * _2452) + _2254;
        _2370 = (((((_2432 * _2083) + _838) * cbLight._m0[_2383].y) * _2451) * _2452) + _2256;
        _2372 = (((((_2432 * _2084) + _839) * cbLight._m0[_2383].z) * _2451) * _2452) + _2258;
    }
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    if (_1892.y == 0u)
    {
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2528 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2527;
        float _2529 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2527;
        float _2530 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2527;
        uvec4 _2542 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2543 = _2542.x;
        uint _2554 = uint((float(_2542.y) * floor(float(uint(cbSceneParam._m0[85u].y * _774) / _2543))) + floor(float(uint(cbSceneParam._m0[85u].x * _773) / _2543)));
        float _2564 = (log2(_2530 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2565 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        uint _2568 = uint(isnan(14.0) ? _2565 : (isnan(_2565) ? 14.0 : min(_2565, 14.0)));
        uvec4 _2573 = texelFetch(g_lightClusterGridBuffer, int(((_2568 << 2u) + (_2554 << 6u)) >> 2u));
        uint _2574 = _2573.x;
        uint _2575 = _2542.z;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        if (((((1u << ((_2575 >> 4u) & 15u)) + 4294967295u) & _2574) == 0u) || ((_2575 & 240u) == 0u))
        {
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
        }
        else
        {
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            uint _2826 = 0u;
            uint _2835;
            bool _2836;
            for (;;)
            {
                _2835 = texelFetch(g_lightClassification, int((((_2568 << 5u) + (_2554 << 9u)) + (_2826 << 2u)) >> 2u)).x;
                _2836 = _2835 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2836)
                {
                    frontier_phi_61_pred = _2820;
                    frontier_phi_61_pred_1 = _2825;
                    frontier_phi_61_pred_2 = _2824;
                    frontier_phi_61_pred_3 = _2823;
                    frontier_phi_61_pred_4 = _2822;
                    frontier_phi_61_pred_5 = _2821;
                }
                else
                {
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    uint _2950;
                    _2944 = _2820;
                    _2945 = _2821;
                    _2946 = _2822;
                    _2947 = _2823;
                    _2948 = _2824;
                    _2949 = _2825;
                    _2950 = _2835;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    for (;;)
                    {
                        uint _2954 = uint(findLSB(_2950)) + (_2826 << 5u);
                        uint _2951 = (_2950 + 4294967295u) & _2950;
                        uint _2956 = _2954 * 48u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 3u)).x));
                        uint _2976 = (_2954 * 48u) + 4u;
                        vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 3u)).x));
                        uint _2995 = (_2954 * 48u) + 8u;
                        vec3 _3006 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x));
                        float _3010 = _2970.x - _2528;
                        float _3011 = _2970.y - _2529;
                        float _3012 = _2970.z - _2530;
                        float _3013 = dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012));
                        float _3016 = inversesqrt(_3013);
                        float _3017 = _3016 * _3010;
                        float _3018 = _3016 * _3011;
                        float _3019 = _3016 * _3012;
                        float _3020 = dot(vec3(_792, _795, _798), vec3(_3017, _3018, _3019));
                        float _3025 = 1.0 - (_3013 * _2970.w);
                        float _4327 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3026 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _3027 = sqrt(_3013) * _2989.w;
                        float _3030 = 1.39999997615814208984375 / (_3027 + 1.39999997615814208984375);
                        float _3031 = _3030 * _3030;
                        float _3034 = ((1.0 - _3031) * _3020) + _3031;
                        float _3037 = _3027 * _3027;
                        float _3041 = ((isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))) * _3026) / ((_3037 * 0.699999988079071044921875) + 1.0);
                        float _3045 = (-0.0) - _2528;
                        float _3046 = (-0.0) - _2529;
                        float _3047 = (-0.0) - _2530;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3062 = exp2(log2(1.0 / ((_3037 * 3.5) + 5.0)) * 0.25);
                        float _3063 = 1.0 - _867;
                        float _3070 = sqrt(1.0 - ((1.0 - (_3063 * _3063)) * (1.0 - (_3062 * _3062))));
                        float _3071 = _3070 * _3070;
                        float _3072 = _3071 * _3071;
                        float _3073 = _3052 + _3017;
                        float _3074 = _3053 + _3018;
                        float _3075 = _3054 + _3019;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3083 = dot(vec3(_792, _795, _798), vec3(_3052, _3053, _3054));
                        float _4343 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3086 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3087 = dot(vec3(_792, _795, _798), vec3(_3079 * _3073, _3079 * _3074, _3079 * _3075));
                        float _4354 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3090 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3094 = ((_3090 * _3090) * (_3072 + (-1.0))) + 1.0;
                        float _3095 = _3030 * _3071;
                        float _3096 = _3095 * _3095;
                        float _3099 = ((1.0 - _3096) * _3020) + _3096;
                        float _4365 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3100 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3101 = 1.0 - _3071;
                        float _3111 = (0.5 / (((_3100 * ((_3086 * _3101) + _3071)) + 9.9999999392252902907785028219223e-09) + (((_3100 * _3101) + _3071) * _3086))) * _3100;
                        float _4376 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3122 = (((_3072 * 3.1415927410125732421875) * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) / ((_3094 * _3094) * ((_3037 * 2.1991131305694580078125) + 3.141590118408203125))) * _3026;
                        _2879 = (_3041 * _2989.x) + _2947;
                        _2880 = (_3041 * _2989.y) + _2948;
                        _2881 = (_3041 * _2989.z) + _2949;
                        _2876 = (_3122 * _3006.x) + _2944;
                        _2877 = (_3122 * _3006.y) + _2945;
                        _2878 = (_3122 * _3006.z) + _2946;
                        if (_2951 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2944 = _2876;
                            _2945 = _2877;
                            _2946 = _2878;
                            _2947 = _2879;
                            _2948 = _2880;
                            _2949 = _2881;
                            _2950 = _2951;
                        }
                    }
                    frontier_phi_61_pred = _2876;
                    frontier_phi_61_pred_1 = _2881;
                    frontier_phi_61_pred_2 = _2880;
                    frontier_phi_61_pred_3 = _2879;
                    frontier_phi_61_pred_4 = _2878;
                    frontier_phi_61_pred_5 = _2877;
                }
                _2676 = frontier_phi_61_pred;
                _2686 = frontier_phi_61_pred_1;
                _2684 = frontier_phi_61_pred_2;
                _2682 = frontier_phi_61_pred_3;
                _2680 = frontier_phi_61_pred_4;
                _2678 = frontier_phi_61_pred_5;
                uint _2827 = _2826 + 1u;
                if (_2827 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2820 = _2676;
                    _2821 = _2678;
                    _2822 = _2680;
                    _2823 = _2682;
                    _2824 = _2684;
                    _2825 = _2686;
                    _2826 = _2827;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
        }
        uvec4 _2689 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2690 = _2689.z;
        uint _2692 = (_2690 >> 8u) & 15u;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        if (((4294967295u << _2692) & _2574) == 0u)
        {
            _2788 = _2675;
            _2790 = _2677;
            _2792 = _2679;
            _2794 = _2681;
            _2796 = _2683;
            _2798 = _2685;
        }
        else
        {
            float _2813 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
            float _2814 = _2813 * _2528;
            float _2815 = _2813 * _2529;
            float _2816 = _2813 * _2530;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2692 < ((_2690 >> 12u) & 15u))
            {
                float _2789;
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2927 = _2675;
                float _2928 = _2677;
                float _2929 = _2679;
                float _2930 = _2681;
                float _2931 = _2683;
                float _2932 = _2685;
                uint _2933 = _2692;
                uint _2942;
                bool _2943;
                for (;;)
                {
                    _2942 = texelFetch(g_lightClassification, int((((_2568 << 5u) + (_2554 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                    _2943 = _2942 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2943)
                    {
                        frontier_phi_67_pred = _2930;
                        frontier_phi_67_pred_1 = _2931;
                        frontier_phi_67_pred_2 = _2932;
                        frontier_phi_67_pred_3 = _2929;
                        frontier_phi_67_pred_4 = _2928;
                        frontier_phi_67_pred_5 = _2927;
                    }
                    else
                    {
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3140 = _2927;
                        float _3141 = _2928;
                        float _3142 = _2929;
                        float _3143 = _2930;
                        float _3144 = _2931;
                        float _3145 = _2932;
                        uint _3146 = _2942;
                        uint _3147;
                        vec4 _3172;
                        float _3173;
                        vec4 _3188;
                        vec3 _3200;
                        vec4 _3215;
                        vec4 _3230;
                        float _3277;
                        bool _3278;
                        for (;;)
                        {
                            uint _3157 = ((_2933 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3146));
                            _3147 = (_3146 + 4294967295u) & _3146;
                            uint _3159 = _3157 * 40u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            _3173 = _3172.w;
                            uint _3175 = (_3157 * 40u) + 4u;
                            _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3190 = (_3157 * 40u) + 8u;
                            _3200 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x));
                            uint _3202 = (_3157 * 40u) + 16u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3217 = (_3157 * 40u) + 20u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3233 = (_3157 * 40u) + 24u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3252 = (_3157 * 40u) + 28u;
                            vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            _3277 = fma(_2530, _3265.z, fma(_2529, _3265.y, _3265.x * _2528)) + _3265.w;
                            _3278 = !((fma(_2530, _3246.z, fma(_2529, _3246.y, _3246.x * _2528)) + _3246.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3278)
                            {
                                float _3305 = _3172.x - _2528;
                                float _3306 = _3172.y - _2529;
                                float _3307 = _3172.z - _2530;
                                float _3308 = dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307));
                                float _3311 = inversesqrt(_3308);
                                float _3312 = _3311 * _3305;
                                float _3313 = _3311 * _3306;
                                float _3314 = _3311 * _3307;
                                float _3318 = 1.0 - (_3308 / (_3173 * _3173));
                                float _4387 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3323 = sqrt(_3308) * _3188.w;
                                float _3325 = 1.39999997615814208984375 / (_3323 + 1.39999997615814208984375);
                                float _3326 = _3325 * _3325;
                                float _3329 = ((1.0 - _3326) * dot(vec3(_3312, _3313, _3314), vec3(_792, _795, _798))) + _3326;
                                float _3332 = _3323 * _3323;
                                float _3336 = (fma(_2530, _3215.z, fma(_2529, _3215.y, _3215.x * _2528)) + _3215.w) / _3277;
                                float _3337 = (fma(_2530, _3230.z, fma(_2529, _3230.y, _3230.x * _2528)) + _3230.w) / _3277;
                                float _3341 = 1.0 - dot(vec2(_3336, _3337), vec2(_3336, _3337));
                                float _4403 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3343 = _3342 * (((isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))) * _3319) / ((_3332 * 0.699999988079071044921875) + 1.0));
                                float _3355 = exp2(log2(1.0 / ((_3332 * 3.5) + 5.0)) * 0.25);
                                float _3356 = 1.0 - _867;
                                float _3363 = sqrt(1.0 - ((1.0 - (_3356 * _3356)) * (1.0 - (_3355 * _3355))));
                                float _3364 = _3363 * _3363;
                                float _3365 = _3364 * _3364;
                                float _3366 = _3312 - _2814;
                                float _3367 = _3313 - _2815;
                                float _3368 = _3314 - _2816;
                                float _3372 = inversesqrt(dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368)));
                                float _3376 = dot(vec3(_792, _795, _798), vec3((-0.0) - _2814, (-0.0) - _2815, (-0.0) - _2816));
                                float _4414 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3379 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3380 = dot(vec3(_792, _795, _798), vec3(_3372 * _3366, _3372 * _3367, _3372 * _3368));
                                float _4425 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3383 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3387 = ((_3383 * _3383) * (_3365 + (-1.0))) + 1.0;
                                float _3388 = _3325 * _3364;
                                float _3389 = _3388 * _3388;
                                float _3395 = ((1.0 - _3389) * dot(vec3(_792, _795, _798), vec3(_3312, _3313, _3314))) + _3389;
                                float _4436 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3397 = 1.0 - _3364;
                                float _3407 = (0.5 / (((_3396 * ((_3379 * _3397) + _3364)) + 9.9999999392252902907785028219223e-09) + (((_3396 * _3397) + _3364) * _3379))) * _3396;
                                float _4447 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3417 = (_3342 * _3319) * (((_3365 * 3.1415927410125732421875) * (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) / ((_3387 * _3387) * ((_3332 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3417 * _3200.x;
                                frontier_phi_73_pred_1 = _3417 * _3200.y;
                                frontier_phi_73_pred_2 = _3343 * _3188.z;
                                frontier_phi_73_pred_3 = _3343 * _3188.y;
                                frontier_phi_73_pred_4 = _3343 * _3188.x;
                                frontier_phi_73_pred_5 = _3417 * _3200.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3421 = frontier_phi_73_pred;
                            _3422 = frontier_phi_73_pred_1;
                            _3426 = frontier_phi_73_pred_2;
                            _3425 = frontier_phi_73_pred_3;
                            _3424 = frontier_phi_73_pred_4;
                            _3423 = frontier_phi_73_pred_5;
                            _3130 = _3424 + _3143;
                            _3131 = _3425 + _3144;
                            _3132 = _3426 + _3145;
                            _3127 = _3421 + _3140;
                            _3128 = _3422 + _3141;
                            _3129 = _3423 + _3142;
                            if (_3147 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3147;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3130;
                        frontier_phi_67_pred_1 = _3131;
                        frontier_phi_67_pred_2 = _3132;
                        frontier_phi_67_pred_3 = _3129;
                        frontier_phi_67_pred_4 = _3128;
                        frontier_phi_67_pred_5 = _3127;
                    }
                    _2795 = frontier_phi_67_pred;
                    _2797 = frontier_phi_67_pred_1;
                    _2799 = frontier_phi_67_pred_2;
                    _2793 = frontier_phi_67_pred_3;
                    _2791 = frontier_phi_67_pred_4;
                    _2789 = frontier_phi_67_pred_5;
                    uint _2934 = _2933 + 1u;
                    if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2927 = _2789;
                        _2928 = _2791;
                        _2929 = _2793;
                        _2930 = _2795;
                        _2931 = _2797;
                        _2932 = _2799;
                        _2933 = _2934;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2797;
                frontier_phi_55_56_ladder_1 = _2799;
                frontier_phi_55_56_ladder_2 = _2795;
                frontier_phi_55_56_ladder_3 = _2793;
                frontier_phi_55_56_ladder_4 = _2791;
                frontier_phi_55_56_ladder_5 = _2789;
            }
            else
            {
                frontier_phi_55_56_ladder = _2683;
                frontier_phi_55_56_ladder_1 = _2685;
                frontier_phi_55_56_ladder_2 = _2681;
                frontier_phi_55_56_ladder_3 = _2679;
                frontier_phi_55_56_ladder_4 = _2677;
                frontier_phi_55_56_ladder_5 = _2675;
            }
            _2788 = frontier_phi_55_56_ladder_5;
            _2790 = frontier_phi_55_56_ladder_4;
            _2792 = frontier_phi_55_56_ladder_3;
            _2794 = frontier_phi_55_56_ladder_2;
            _2796 = frontier_phi_55_56_ladder;
            _2798 = frontier_phi_55_56_ladder_1;
        }
        float _2803 = isnan(1.0) ? _851 : (isnan(_851) ? 1.0 : min(_851, 1.0));
        _2587 = (_2803 * _2794) + _2023;
        _2589 = (_2803 * _2796) + _2025;
        _2591 = (_2803 * _2798) + _2027;
        _2593 = ((_2788 * _836) * _2803) + _2368;
        _2595 = ((_2790 * _838) * _2803) + _2370;
        _2597 = ((_2792 * _839) * _2803) + _2372;
    }
    else
    {
        _2587 = _2023;
        _2589 = _2025;
        _2591 = _2027;
        _2593 = _2368;
        _2595 = _2370;
        _2597 = _2372;
    }
    float _4463 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4474 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4485 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    uint _2617 = _811 + 6u;
    float _2625 = _773 / cbSceneParam._m0[86u].x;
    float _2626 = _774 / cbSceneParam._m0[86u].y;
    vec4 _2640 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2625, _2626, (log2((isnan(cbSceneParam._m0[77u].w) ? _708 : (isnan(_708) ? cbSceneParam._m0[77u].w : min(_708, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2642 = _2640.x;
    float _2643 = _2640.y;
    float _2644 = _2640.z;
    float _2645 = _2640.w;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    if (_708 > cbSceneParam._m0[78u].w)
    {
        float _2700 = isnan(_708) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _708 : min(cbSceneParam._m0[80u].w, _708));
        float _2701 = _2700 / _708;
        float _2712 = _2701 * _758;
        float _2713 = _759 * _2701;
        float _2714 = (-0.0) - _2713;
        float _2716 = _2701 * _760;
        float _2718 = (cbSceneParam._m0[77u].w * _2714) / _2700;
        float _2719 = _2718 + cbSceneParam._m0[79u].w;
        float _2720 = cbSceneParam._m0[79u].w - _2713;
        float _2726 = sqrt(((_2712 * _2712) + (_2713 * _2713)) + (_2716 * _2716));
        float _2729 = (1.0 - (cbSceneParam._m0[77u].w / _2700)) * _2726;
        float _2734 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2736 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2889;
        if (abs((_2714 - _2718) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2889 = ((((_2719 > 0.0) ? exp2(_2734 * _2719) : (2.0 - exp2(_2736 * _2719))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2729;
        }
        else
        {
            float _2849 = 1.0 / cbSceneParam._m0[80u].x;
            float _2850 = isnan(_2720) ? _2719 : (isnan(_2719) ? _2720 : max(_2719, _2720));
            float _2851 = isnan(_2720) ? _2719 : (isnan(_2719) ? _2720 : min(_2719, _2720));
            float _2860 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : min(_2850, 0.0));
            float _2861 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : min(_2851, 0.0));
            _2889 = ((abs(_2726 / _2714) * cbSceneParam._m0[80u].y) * ((((_2860 - _2861) * 2.0) - ((exp2(_2734 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0)))) - exp2(_2734 * (isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0))))) * _2849)) - ((exp2(_2736 * _2860) - exp2(_2736 * _2861)) * _2849))) + (_2729 * cbSceneParam._m0[80u].z);
        }
        vec4 _2891 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2625, _2626, 1.0), 0.0);
        float _2900 = exp2((_2889 * (-1.44269502162933349609375)) * (1.0 - _2891.w));
        float _2901 = log2(_2900);
        float _2917 = log2(_2645);
        _2738 = (exp2(_2917 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].x)) * _2891.x) / cbSceneParam._m0[78u].x)) + _2642;
        _2740 = (exp2(_2917 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].y)) * _2891.y) / cbSceneParam._m0[78u].y)) + _2643;
        _2742 = (exp2(_2917 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].z)) * _2891.z) / cbSceneParam._m0[78u].z)) + _2644;
        _2744 = _2900 * _2645;
    }
    else
    {
        _2738 = _2642;
        _2740 = _2643;
        _2742 = _2644;
        _2744 = _2645;
    }
    float _2756 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2757 = _2756 == 3.0;
    float _2758 = log2(_2744);
    float _2765 = exp2(_2758 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2587 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _851))) + ((_2593 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1661)) * cbPerFrame._m0[3u].x));
    float _2766 = exp2(_2758 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2589 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _851))) + ((_2595 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1661)) * cbPerFrame._m0[3u].x));
    float _2767 = exp2(_2758 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2591 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _851))) + ((_2597 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1661)) * cbPerFrame._m0[3u].x));
    float _2776 = (_2756 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2776 * (_2757 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2738)));
    SV_Target.y = _2776 * (_2757 ? _2766 : (_2766 + (cbSceneParam._m0[72u].w * _2740)));
    SV_Target.z = _2776 * (_2757 ? _2767 : (_2767 + (cbSceneParam._m0[72u].w * _2742)));
    SV_Target.w = cbInstanceData._m0[_2617].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2617].w;
}


