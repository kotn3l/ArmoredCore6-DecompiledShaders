#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1196;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _248 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _248.x * cbMtdParam._m0[10u].x;
    float _255 = _248.y * cbMtdParam._m0[10u].y;
    float _256 = _248.z * cbMtdParam._m0[10u].z;
    vec4 _274 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _324 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _334 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _324)) + 1.0;
    float _3809 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _335 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _342 = (_335 * ((_274.x * cbMtdParam._m0[11u].x) - _254)) + _254;
    float _343 = (_335 * ((_274.y * cbMtdParam._m0[11u].y) - _255)) + _255;
    float _344 = (_335 * ((_274.z * cbMtdParam._m0[11u].z) - _256)) + _256;
    vec4 _362 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _393 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _324)) + 1.0;
    float _3820 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _401 = (_394 * ((_362.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _402 = (_394 * ((_362.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _403 = (_394 * ((_362.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _421 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _446 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _324)) + 1.0;
    float _3831 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _454 = (_447 * ((_421.x * cbMtdParam._m0[13u].x) - _401)) + _401;
    float _455 = (_447 * ((_421.y * cbMtdParam._m0[13u].y) - _402)) + _402;
    float _456 = (_447 * ((_421.z * cbMtdParam._m0[13u].z) - _403)) + _403;
    vec4 _469 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _471 = _469.x;
    float _489 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _471) * _335) + _471;
    float _507 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _489) * _394) + _489;
    float _524 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _507) * _447) + _507;
    vec4 _536 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _538 = _536.x;
    float _539 = _536.y;
    float _545 = cbMtdParam._m0[18u].y * _536.z;
    vec4 _557 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _566 = (((cbMtdParam._m0[18u].x * _557.z) - _545) * _335) + _545;
    vec4 _579 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _590 = (((cbMtdParam._m0[17u].w * _579.z) - _566) * _394) + _566;
    vec4 _603 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _612 = (((cbMtdParam._m0[17u].z * _603.z) - _590) * _447) + _590;
    float _617 = ((_557.x - _538) * _335) + _538;
    float _618 = ((_557.y - _539) * _335) + _539;
    float _623 = ((_579.x - _617) * _394) + _617;
    float _624 = ((_579.y - _618) * _394) + _618;
    float _633 = ((((_603.x - _623) * _447) + _623) * 2.0) + (-1.0);
    float _635 = ((((_603.y - _624) * _447) + _624) * 2.0) + (-1.0);
    float _636 = dot(vec2(_633, _635), vec2(_633, _635));
    float _3842 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _641 = sqrt(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))));
    float _644 = fma(_641, _218 * NORMAL.x, fma(_635, _225 * TANGENT.x, (_211 * _203) * _633));
    float _647 = fma(_641, _218 * NORMAL.y, fma(_635, _225 * TANGENT.y, (_211 * _204) * _633));
    float _650 = fma(_641, _218 * NORMAL.z, fma(_635, _225 * TANGENT.z, (_211 * _205) * _633));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _3853 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _658 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _3864 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3875 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3886 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3897 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _662 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _678 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _728 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _718);
    float _729 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _718);
    float _730 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _718);
    float _734 = inversesqrt(dot(vec3(_728, _729, _730), vec3(_728, _729, _730)));
    float _735 = _728 * _734;
    float _736 = _729 * _734;
    float _737 = _730 * _734;
    float _743 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _744 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _762 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _765 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _768 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    uint _781 = uint(roundEven(NORMAL.w)) * 13u;
    uint _783 = (_781 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _789 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_783].x;
    float _790 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * cbInstanceData._m0[_783].y;
    float _791 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_783].z;
    float _3908 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _795 = 1.0 - _662;
    float _796 = _792 * _795;
    float _797 = _793 * _795;
    float _798 = _794 * _795;
    float _803 = (_792 + (-0.039999999105930328369140625)) * _662;
    float _804 = (_793 + (-0.039999999105930328369140625)) * _662;
    float _805 = (_794 + (-0.039999999105930328369140625)) * _662;
    float _806 = _803 + 0.039999999105930328369140625;
    float _808 = _804 + 0.039999999105930328369140625;
    float _809 = _805 + 0.039999999105930328369140625;
    vec4 _818 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _743, cbSceneParam._m0[86u].y * _744));
    float _821 = _818.x * TEXCOORD_5.w;
    float _822 = dot(vec3(_655, _656, _657), vec3(_735, _736, _737));
    float _825 = _822 * 2.0;
    float _829 = (_825 * _655) - _735;
    float _830 = (_825 * _656) - _736;
    float _831 = (_825 * _657) - _737;
    float _835 = abs(dot(vec3(_735, _736, _737), vec3(_655, _656, _657)));
    float _3941 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _837 = sqrt(_658);
    float _850 = exp2((_837 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_837 * 3.0));
    float _856 = (1.0 - _850) * ((_837 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _857 = _850 * _837;
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1195;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _920 = fma(_893, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885));
        float _924 = fma(_893, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885));
        float _928 = fma(_893, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885));
        float _953 = _885 + _655;
        float _954 = _889 + _656;
        float _955 = _893 + _657;
        float _965 = fma(_955, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953)) - _920;
        float _966 = fma(_955, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953)) - _924;
        float _967 = fma(_955, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953)) - _928;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_920 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_924 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[34u].z) + ((((((_928 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1023 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_989.x + (-0.5));
        float _1025 = _1023 * (_989.y + (-0.5));
        float _1026 = _1023 * (_989.z + (-0.5));
        float _1033 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_996.x + (-0.5));
        float _1035 = _1033 * (_996.y + (-0.5));
        float _1036 = _1033 * (_996.z + (-0.5));
        float _1043 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1003.x + (-0.5));
        float _1045 = _1043 * (_1003.y + (-0.5));
        float _1046 = _1043 * (_1003.z + (-0.5));
        float _1053 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1010.x + (-0.5));
        float _1055 = _1053 * (_1010.y + (-0.5));
        float _1056 = _1053 * (_1010.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1077 = (dot(vec3(_655, _656, _657), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1087 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3989 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1089 + 1.0))) + _1094) * _1057;
        float _1104 = _1025 * 0.5;
        float _1105 = _1035 * 0.5;
        float _1106 = _1045 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_655, _656, _657), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _4022 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1131 + 1.0))) + _1136) * _1058;
        float _1146 = _1026 * 0.5;
        float _1147 = _1036 * 0.5;
        float _1148 = _1046 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_655, _656, _657), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _4055 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1173 + 1.0))) + _1178) * _1059;
        _1195 = _1026;
        _1197 = _1025;
        _1198 = _1024;
        _1199 = _1036;
        _1200 = _1035;
        _1201 = _1034;
        _1202 = _1046;
        _1203 = _1045;
        _1204 = _1044;
        _1205 = _1059;
        _1206 = _1058;
        _1207 = _1057;
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _1196;
        _1197 = _1196;
        _1198 = _1196;
        _1199 = _1196;
        _1200 = _1196;
        _1201 = _1196;
        _1202 = _1196;
        _1203 = _1196;
        _1204 = _1196;
        _1205 = _1196;
        _1206 = _1196;
        _1207 = _1196;
        _1208 = 0.0;
        _1209 = 0.0;
        _1210 = 0.0;
    }
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1236 = fma(_893, cbModelParam._m0[30u].z, fma(_889, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _885));
        float _1240 = fma(_893, cbModelParam._m0[31u].z, fma(_889, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _885));
        float _1244 = fma(_893, cbModelParam._m0[32u].z, fma(_889, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _885));
        float _1267 = _885 + _655;
        float _1268 = _889 + _656;
        float _1269 = _893 + _657;
        float _1279 = fma(_1269, cbModelParam._m0[30u].z, fma(_1268, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267)) - _1236;
        float _1280 = fma(_1269, cbModelParam._m0[31u].z, fma(_1268, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267)) - _1240;
        float _1281 = fma(_1269, cbModelParam._m0[32u].z, fma(_1268, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267)) - _1244;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1236 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1240 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[35u].z) + ((((((_1244 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1335 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1302.x + (-0.5));
        float _1337 = _1335 * (_1302.y + (-0.5));
        float _1338 = _1335 * (_1302.z + (-0.5));
        float _1345 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1309.x + (-0.5));
        float _1347 = _1345 * (_1309.y + (-0.5));
        float _1348 = _1345 * (_1309.z + (-0.5));
        float _1355 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1316.x + (-0.5));
        float _1357 = _1355 * (_1316.y + (-0.5));
        float _1358 = _1355 * (_1316.z + (-0.5));
        float _1365 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1323.x + (-0.5));
        float _1367 = _1365 * (_1323.y + (-0.5));
        float _1368 = _1365 * (_1323.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_655, _656, _657), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4118 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1399 + 1.0))) + _1404) * _1369;
        float _1414 = _1337 * 0.5;
        float _1415 = _1347 * 0.5;
        float _1416 = _1357 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_655, _656, _657), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4151 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1441 + 1.0))) + _1446) * _1370;
        float _1456 = _1338 * 0.5;
        float _1457 = _1348 * 0.5;
        float _1458 = _1358 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_655, _656, _657), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4184 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1483 + 1.0))) + _1488) * _1371;
        _1505 = _1338;
        _1506 = _1337;
        _1507 = _1336;
        _1508 = _1348;
        _1509 = _1347;
        _1510 = _1346;
        _1511 = _1358;
        _1512 = _1357;
        _1513 = _1356;
        _1514 = _1371;
        _1515 = _1370;
        _1516 = _1369;
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1196;
        _1506 = _1196;
        _1507 = _1196;
        _1508 = _1196;
        _1509 = _1196;
        _1510 = _1196;
        _1511 = _1196;
        _1512 = _1196;
        _1513 = _1196;
        _1514 = _1196;
        _1515 = _1196;
        _1516 = _1196;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1208)) + _1208;
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1209)) + _1209;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1210)) + _1210;
    float _1552 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1529));
    float _1573 = _829 * 0.5;
    float _1574 = _830 * 0.5;
    float _1575 = _831 * 0.5;
    float _1576 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1579 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1582 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1616;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1589 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1195, _1199, _1202, _1205));
        float _1593 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1597 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1604 = dot(vec4(cbModelParam._m0[39u]), vec4(_1573, _1574, _1575, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1604) ? 0.0 : (isnan(0.0) ? _1604 : max(0.0, _1604))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1627;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1618 = dot(vec4(cbModelParam._m0[40u]), vec4(_1573, _1574, _1575, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1631 = (_1627 * cbModelParam._m0[1u].x) + (_1616 * (1.0 - cbModelParam._m0[1u].x));
    float _1641 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _658);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1641 : min(cbModelParam._m0[25u].z, _1641));
    float _1724;
    float _1726;
    float _1728;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1691 = fma(_893, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885)) + cbModelParam._m0[13u].w;
        float _1695 = fma(_893, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885)) + cbModelParam._m0[14u].w;
        float _1699 = fma(_893, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885)) + cbModelParam._m0[15u].w;
        float _1702 = fma(_831, cbModelParam._m0[13u].z, fma(_830, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829));
        float _1705 = fma(_831, cbModelParam._m0[14u].z, fma(_830, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829));
        float _1708 = fma(_831, cbModelParam._m0[15u].z, fma(_830, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829));
        float _1736;
        if (_1702 > 0.0)
        {
            _1736 = abs((1.0 - _1691) / _1702);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1691 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1736 = frontier_phi_14_12_ladder;
        }
        float _1907;
        if (_1705 > 0.0)
        {
            _1907 = abs((1.0 - _1695) / _1705);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1695 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1907 = frontier_phi_23_19_ladder;
        }
        float _2203;
        if (_1708 > 0.0)
        {
            _2203 = abs((1.0 - _1699) / _1708);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1699 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2203 = frontier_phi_35_30_ladder;
        }
        float _2205 = isnan(_1907) ? _1736 : (isnan(_1736) ? _1907 : min(_1736, _1907));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1702) + _1691;
        float _2211 = (_2206 * _1705) + _1695;
        float _2212 = (_2206 * _1708) + _1699;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2213;
        float _2217 = _2213 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 > _2217) || ((_2211 < _2215) || ((_2210 < _2215) || (_2210 > _2217))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2357 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2212, cbModelParam._m0[9u].z, fma(_2211, cbModelParam._m0[9u].y, _2210 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2212, cbModelParam._m0[10u].z, fma(_2211, cbModelParam._m0[10u].y, _2210 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2212, cbModelParam._m0[11u].z, fma(_2211, cbModelParam._m0[11u].y, _2210 * cbModelParam._m0[11u].x))), _1642);
            frontier_phi_13_35_ladder = _2357.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2357.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2357.x * cbModelParam._m0[1u].y;
        }
        _1724 = frontier_phi_13_35_ladder_2;
        _1726 = frontier_phi_13_35_ladder_1;
        _1728 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1712 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_829, _830, _831), _1642);
        _1724 = _1712.x * cbModelParam._m0[1u].y;
        _1726 = _1712.y * cbModelParam._m0[1u].y;
        _1728 = _1712.z * cbModelParam._m0[1u].y;
    }
    float _1732 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _658);
    float _1733 = isnan(_1732) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1732 : min(cbModelParam._m0[25u].w, _1732));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1786 = fma(_893, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885)) + cbModelParam._m0[21u].w;
        float _1790 = fma(_893, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885)) + cbModelParam._m0[22u].w;
        float _1794 = fma(_893, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885)) + cbModelParam._m0[23u].w;
        float _1797 = fma(_831, cbModelParam._m0[21u].z, fma(_830, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829));
        float _1800 = fma(_831, cbModelParam._m0[22u].z, fma(_830, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829));
        float _1803 = fma(_831, cbModelParam._m0[23u].z, fma(_830, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829));
        float _1912;
        if (_1797 > 0.0)
        {
            _1912 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1912 = frontier_phi_25_21_ladder;
        }
        float _2230;
        if (_1800 > 0.0)
        {
            _2230 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2230 = frontier_phi_37_32_ladder;
        }
        float _2568;
        if (_1803 > 0.0)
        {
            _2568 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2568 = frontier_phi_47_44_ladder;
        }
        float _2570 = isnan(_2230) ? _1912 : (isnan(_1912) ? _2230 : min(_1912, _2230));
        float _2571 = isnan(_2568) ? _2570 : (isnan(_2570) ? _2568 : min(_2570, _2568));
        float _2575 = (_2571 * _1797) + _1786;
        float _2576 = (_2571 * _1800) + _1790;
        float _2577 = (_2571 * _1803) + _1794;
        float _2578 = _2571 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2578;
        float _2581 = _2578 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2577 > _2581) || ((_2577 < _2579) || ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 < _2579) || (_2575 > _2581))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2577, cbModelParam._m0[17u].z, fma(_2576, cbModelParam._m0[17u].y, _2575 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2577, cbModelParam._m0[18u].z, fma(_2576, cbModelParam._m0[18u].y, _2575 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2577, cbModelParam._m0[19u].z, fma(_2576, cbModelParam._m0[19u].y, _2575 * cbModelParam._m0[19u].x))), _1733);
            frontier_phi_22_47_ladder = _2699.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2699.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2699.x * cbModelParam._m0[1u].z;
        }
        _1822 = frontier_phi_22_47_ladder_2;
        _1824 = frontier_phi_22_47_ladder_1;
        _1826 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_829, _830, _831), _1733);
        _1822 = _1806.x * cbModelParam._m0[1u].z;
        _1824 = _1806.y * cbModelParam._m0[1u].z;
        _1826 = _1806.z * cbModelParam._m0[1u].z;
    }
    float _1839 = (((_856 * _806) + _857) * _821) * ((cbModelParam._m0[1u].w * (_1822 - _1724)) + _1724);
    float _1841 = (((_856 * _808) + _857) * _821) * ((cbModelParam._m0[1u].w * (_1824 - _1726)) + _1726);
    float _1843 = (((_856 * _809) + _857) * _821) * ((cbModelParam._m0[1u].w * (_1826 - _1728)) + _1728);
    float _1846 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, _1839 * cbSceneParam._m0[91u].x));
    float _1886 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1890 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1894 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1898 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1899 = _1886 / _1898;
    float _1900 = _1890 / _1898;
    float _1901 = _1894 / _1898;
    float _2048;
    float _2049;
    float _2050;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1928 = ((uint(_1901 > cbSceneParam._m0[59u].y) + uint(_1901 > cbSceneParam._m0[59u].x)) + uint(_1901 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1929 = _1928 + 43u;
        uint _1937 = _1928 + 44u;
        uint _1945 = _1928 + 45u;
        uint _1953 = _1928 + 46u;
        float _1964 = fma(_1898, cbSceneParam._m0[_1929].w, fma(_1894, cbSceneParam._m0[_1929].z, fma(_1890, cbSceneParam._m0[_1929].y, _1886 * cbSceneParam._m0[_1929].x)));
        float _1968 = fma(_1898, cbSceneParam._m0[_1937].w, fma(_1894, cbSceneParam._m0[_1937].z, fma(_1890, cbSceneParam._m0[_1937].y, _1886 * cbSceneParam._m0[_1937].x)));
        float _1976 = fma(_1898, cbSceneParam._m0[_1953].w, fma(_1894, cbSceneParam._m0[_1953].z, fma(_1890, cbSceneParam._m0[_1953].y, _1886 * cbSceneParam._m0[_1953].x)));
        float _1981 = cbSceneParam._m0[33u].z * _1976;
        float _1983 = cbSceneParam._m0[33u].w * _1976;
        float _1986 = fma(_1898, cbSceneParam._m0[_1945].w, fma(_1894, cbSceneParam._m0[_1945].z, fma(_1890, cbSceneParam._m0[_1945].y, _1886 * cbSceneParam._m0[_1945].x))) / _1976;
        float _2034 = (cbSceneParam._m0[33u].x - sqrt(((_1900 * _1900) + (_1899 * _1899)) + (_1901 * _1901))) * cbSceneParam._m0[33u].y;
        float _4310 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2041 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1981 + _1964) / _1976, (_1983 + _1968) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1983 + _1964) / _1976, (_1968 - _1981) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 - _1981) / _1976, (_1968 - _1983) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 - _1983) / _1976, (_1981 + _1968) / _1976), _1986), 0.0)).x), vec4(0.25)));
        _2048 = 1.0 - (_2041 * cbSceneParam._m0[34u].x);
        _2049 = 1.0 - (_2041 * cbSceneParam._m0[34u].y);
        _2050 = 1.0 - (_2041 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2048 = 1.0;
        _2049 = 1.0;
        _2050 = 1.0;
    }
    float _2114;
    float _2116;
    float _2118;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2102 = fma(_1898, cbSceneParam._m0[63u].w, fma(_1894, cbSceneParam._m0[63u].z, fma(_1890, cbSceneParam._m0[63u].y, _1886 * cbSceneParam._m0[63u].x)));
        float _2103 = fma(_1898, cbSceneParam._m0[60u].w, fma(_1894, cbSceneParam._m0[60u].z, fma(_1890, cbSceneParam._m0[60u].y, _1886 * cbSceneParam._m0[60u].x))) / _2102;
        float _2104 = fma(_1898, cbSceneParam._m0[61u].w, fma(_1894, cbSceneParam._m0[61u].z, fma(_1890, cbSceneParam._m0[61u].y, _1886 * cbSceneParam._m0[61u].x))) / _2102;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2103 >= cbSceneParam._m0[64u].x) && (_2104 >= cbSceneParam._m0[64u].y)) && (_2103 <= cbSceneParam._m0[64u].z)) && (_2104 <= cbSceneParam._m0[64u].w))
        {
            float _2243 = fma(_1898, cbSceneParam._m0[62u].w, fma(_1894, cbSceneParam._m0[62u].z, fma(_1890, cbSceneParam._m0[62u].y, _1886 * cbSceneParam._m0[62u].x))) / _2102;
            float _2247 = isnan(cbSceneParam._m0[41u].w) ? _2243 : (isnan(_2243) ? cbSceneParam._m0[41u].w : max(_2243, cbSceneParam._m0[41u].w));
            float _2290 = (cbSceneParam._m0[33u].x - sqrt(((_1900 * _1900) + (_1899 * _1899)) + (_1901 * _1901))) * cbSceneParam._m0[33u].y;
            float _4326 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
            float _2297 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2103, cbSceneParam._m0[33u].w + _2104), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2103, _2104 - cbSceneParam._m0[33u].z), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2103 - cbSceneParam._m0[33u].z, _2104 - cbSceneParam._m0[33u].w), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2103 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2104), _2247), 0.0)).x), vec4(0.25)));
            float _2301 = 1.0 - (_2297 * cbSceneParam._m0[34u].x);
            float _2302 = 1.0 - (_2297 * cbSceneParam._m0[34u].y);
            float _2303 = 1.0 - (_2297 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2303) ? _2050 : (isnan(_2050) ? _2303 : min(_2050, _2303));
            frontier_phi_34_33_ladder_1 = isnan(_2302) ? _2049 : (isnan(_2049) ? _2302 : min(_2049, _2302));
            frontier_phi_34_33_ladder_2 = isnan(_2301) ? _2048 : (isnan(_2048) ? _2301 : min(_2048, _2301));
        }
        else
        {
            frontier_phi_34_33_ladder = _2050;
            frontier_phi_34_33_ladder_1 = _2049;
            frontier_phi_34_33_ladder_2 = _2048;
        }
        _2114 = frontier_phi_34_33_ladder_2;
        _2116 = frontier_phi_34_33_ladder_1;
        _2118 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2114 = _2048;
        _2116 = _2049;
        _2118 = _2050;
    }
    uvec4 _2123 = floatBitsToUint(cbInstanceData._m0[_781 + 5u]);
    uint _2125 = _2123.x * 14u;
    uint _2126 = _2125 + 13u;
    float _2133 = _821 + (-1.0);
    float _2138 = (cbLight._m0[_2126].x * _2133) + 1.0;
    float _2139 = (cbLight._m0[_2126].y * _2133) + 1.0;
    float _2140 = (cbLight._m0[_2126].z * _2133) + 1.0;
    float _2141 = (cbLight._m0[_2126].w * _2133) + 1.0;
    uint _2142 = _2125 + 5u;
    float _2148 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
    uint _2152 = _2125 + 4u;
    float _2162 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
    uint _2166 = _2125 | 1u;
    float _2177 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_655, _656, _657));
    float _2180 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_655, _656, _657));
    float _4362 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _4373 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2185 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.3183098733425140380859375;
    float _2187 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * 0.3183098733425140380859375;
    float _2194 = ((cbLight._m0[_2142].x * _2148) * _2187) + (((cbLight._m0[_2152].x * _2114) * _2162) * _2185);
    float _2195 = ((_2148 * cbLight._m0[_2142].y) * _2187) + (((cbLight._m0[_2152].y * _2116) * _2162) * _2185);
    float _2196 = ((_2148 * cbLight._m0[_2142].z) * _2187) + (((cbLight._m0[_2152].z * _2118) * _2162) * _2185);
    uvec4 _2200 = floatBitsToUint(cbLight._m0[_2125 + 12u]);
    bool _2202 = _2200.x == 0u;
    float _2304;
    float _2306;
    float _2308;
    if (_2202)
    {
        _2304 = _2194;
        _2306 = _2195;
        _2308 = _2196;
    }
    else
    {
        uint _2312 = _2125 + 6u;
        float _2328 = (dot(vec3(cbLight._m0[_2125 + 2u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2329 = _2328 * _2328;
        float _4384 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2330 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2331 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2304 = (((cbLight._m0[_2312].x * 0.3183098733425140380859375) * _2330) * _2331) + _2194;
        _2306 = (((cbLight._m0[_2312].y * 0.3183098733425140380859375) * _2330) * _2331) + _2195;
        _2308 = (((cbLight._m0[_2312].z * 0.3183098733425140380859375) * _2330) * _2331) + _2196;
    }
    bool _2311 = _2200.y == 0u;
    float _2366;
    float _2368;
    float _2370;
    if (_2311)
    {
        _2366 = _2304;
        _2368 = _2306;
        _2370 = _2308;
    }
    else
    {
        uint _2539 = _2125 + 7u;
        float _2555 = (dot(vec3(cbLight._m0[_2125 + 3u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2556 = _2555 * _2555;
        float _4400 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2557 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2558 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2366 = (((cbLight._m0[_2539].x * 0.3183098733425140380859375) * _2557) * _2558) + _2304;
        _2368 = (((cbLight._m0[_2539].y * 0.3183098733425140380859375) * _2557) * _2558) + _2306;
        _2370 = (((cbLight._m0[_2539].z * 0.3183098733425140380859375) * _2557) * _2558) + _2308;
    }
    uint _2373 = _2125 + 8u;
    float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _658) * 0.949999988079071044921875);
    float _2387 = _2386 * _2386;
    float _2388 = cbLight._m0[_2125].x + _735;
    float _2389 = cbLight._m0[_2125].y + _736;
    float _2390 = cbLight._m0[_2125].z + _737;
    float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
    float _2395 = _2394 * _2388;
    float _2396 = _2394 * _2389;
    float _2397 = _2394 * _2390;
    float _2398 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2125].xyz));
    float _4416 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _4427 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _2402 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2403 = dot(vec3(_655, _656, _657), vec3(_2395, _2396, _2397));
    float _4438 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2407 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2395, _2396, _2397));
    float _4449 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2411 = _2387 * _2387;
    float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
    float _2423 = exp2(log2(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * 5.0);
    float _2424 = 0.959999978542327880859375 - _803;
    float _2426 = 0.959999978542327880859375 - _804;
    float _2427 = 0.959999978542327880859375 - _805;
    float _2434 = 1.0 - _2387;
    float _2445 = (0.5 / (((_2402 * ((_2401 * _2434) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2434) + _2387) * _2401))) * _2401;
    float _4460 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2447 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
    uint _2461 = _2125 + 9u;
    float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _658) * 0.949999988079071044921875);
    float _2473 = _2472 * _2472;
    float _2474 = cbLight._m0[_2166].x + _735;
    float _2475 = cbLight._m0[_2166].y + _736;
    float _2476 = cbLight._m0[_2166].z + _737;
    float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
    float _2481 = _2480 * _2474;
    float _2482 = _2480 * _2475;
    float _2483 = _2480 * _2476;
    float _2484 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2166].xyz));
    float _4471 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2488 = dot(vec3(_655, _656, _657), vec3(_2481, _2482, _2483));
    float _4482 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2491 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2492 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2481, _2482, _2483));
    float _4493 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2496 = _2473 * _2473;
    float _2500 = ((_2491 * _2491) * (_2496 + (-1.0))) + 1.0;
    float _2507 = exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0);
    float _2514 = 1.0 - _2473;
    float _2524 = (0.5 / (((_2402 * ((_2487 * _2514) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2514) + _2473) * _2487))) * _2487;
    float _4504 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2526 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2496 / ((_2500 * _2500) * 3.141590118408203125));
    float _2536 = (((((_2507 * _2424) + _806) * cbLight._m0[_2461].x) * _2526) * _2148) + ((((cbLight._m0[_2373].x * _2114) * ((_2423 * _2424) + _806)) * _2447) * _2162);
    float _2537 = (((((_2507 * _2426) + _808) * cbLight._m0[_2461].y) * _2526) * _2148) + ((((cbLight._m0[_2373].y * _2116) * ((_2423 * _2426) + _808)) * _2447) * _2162);
    float _2538 = (((((_2507 * _2427) + _809) * cbLight._m0[_2461].z) * _2526) * _2148) + ((((cbLight._m0[_2373].z * _2118) * ((_2423 * _2427) + _809)) * _2447) * _2162);
    float _2594;
    float _2596;
    float _2598;
    if (_2202)
    {
        _2594 = _2536;
        _2596 = _2537;
        _2598 = _2538;
    }
    else
    {
        uint _2600 = _2125 + 2u;
        uint _2604 = _2125 + 10u;
        float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2600].w)) * _658) * 0.949999988079071044921875);
        float _2619 = _2618 * _2618;
        float _2620 = cbLight._m0[_2600].x + _735;
        float _2621 = cbLight._m0[_2600].y + _736;
        float _2622 = cbLight._m0[_2600].z + _737;
        float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
        float _2627 = _2626 * _2620;
        float _2628 = _2626 * _2621;
        float _2629 = _2626 * _2622;
        float _2630 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2600].xyz));
        float _4515 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2634 = dot(vec3(_655, _656, _657), vec3(_2627, _2628, _2629));
        float _4526 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2638 = dot(vec3(cbLight._m0[_2600].xyz), vec3(_2627, _2628, _2629));
        float _4537 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2642 = _2619 * _2619;
        float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
        float _2653 = exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0);
        float _2660 = 1.0 - _2619;
        float _2670 = (0.5 / (((_2402 * ((_2633 * _2660) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2660) + _2619) * _2633))) * _2633;
        float _4548 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2672 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
        float _2673 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2594 = (((((_2653 * _2424) + _806) * cbLight._m0[_2604].x) * _2672) * _2673) + _2536;
        _2596 = (((((_2653 * _2426) + _808) * cbLight._m0[_2604].y) * _2672) * _2673) + _2537;
        _2598 = (((((_2653 * _2427) + _809) * cbLight._m0[_2604].z) * _2672) * _2673) + _2538;
    }
    float _2704;
    float _2706;
    float _2708;
    if (_2311)
    {
        _2704 = _2594;
        _2706 = _2596;
        _2708 = _2598;
    }
    else
    {
        uint _2715 = _2125 + 3u;
        uint _2719 = _2125 + 11u;
        float _2733 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2715].w)) * _658) * 0.949999988079071044921875);
        float _2734 = _2733 * _2733;
        float _2735 = cbLight._m0[_2715].x + _735;
        float _2736 = cbLight._m0[_2715].y + _736;
        float _2737 = cbLight._m0[_2715].z + _737;
        float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
        float _2742 = _2741 * _2735;
        float _2743 = _2741 * _2736;
        float _2744 = _2741 * _2737;
        float _2745 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2715].xyz));
        float _4564 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2748 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2749 = dot(vec3(_655, _656, _657), vec3(_2742, _2743, _2744));
        float _4575 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2752 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2753 = dot(vec3(cbLight._m0[_2715].xyz), vec3(_2742, _2743, _2744));
        float _4586 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2757 = _2734 * _2734;
        float _2761 = ((_2752 * _2752) * (_2757 + (-1.0))) + 1.0;
        float _2768 = exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0);
        float _2775 = 1.0 - _2734;
        float _2785 = (0.5 / (((_2402 * ((_2748 * _2775) + _2734)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2775) + _2734) * _2748))) * _2748;
        float _4597 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2787 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2757 / ((_2761 * _2761) * 3.141590118408203125));
        float _2788 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2704 = (((((_2768 * _2424) + _806) * cbLight._m0[_2719].x) * _2787) * _2788) + _2594;
        _2706 = (((((_2768 * _2426) + _808) * cbLight._m0[_2719].y) * _2787) * _2788) + _2596;
        _2708 = (((((_2768 * _2427) + _809) * cbLight._m0[_2719].z) * _2787) * _2788) + _2598;
    }
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    if (_2123.y == 0u)
    {
        uvec4 _2809 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2810 = _2809.x;
        uint _2821 = uint((float(_2809.y) * floor(float(uint(cbSceneParam._m0[85u].y * _744) / _2810))) + floor(float(uint(cbSceneParam._m0[85u].x * _743) / _2810)));
        float _2831 = (log2(_1901 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2832 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        uint _2835 = uint(isnan(14.0) ? _2832 : (isnan(_2832) ? 14.0 : min(_2832, 14.0)));
        uvec4 _2840 = texelFetch(g_lightClusterGridBuffer, int(((_2835 << 2u) + (_2821 << 6u)) >> 2u));
        uint _2841 = _2840.x;
        uint _2842 = _2809.z;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        if (((((1u << ((_2842 >> 4u) & 15u)) + 4294967295u) & _2841) == 0u) || ((_2842 & 240u) == 0u))
        {
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
        }
        else
        {
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            uint _3072 = 0u;
            uint _3081;
            bool _3082;
            for (;;)
            {
                _3081 = texelFetch(g_lightClassification, int((((_2835 << 5u) + (_2821 << 9u)) + (_3072 << 2u)) >> 2u)).x;
                _3082 = _3081 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3082)
                {
                    frontier_phi_66_pred = _3071;
                    frontier_phi_66_pred_1 = _3070;
                    frontier_phi_66_pred_2 = _3069;
                    frontier_phi_66_pred_3 = _3068;
                    frontier_phi_66_pred_4 = _3067;
                    frontier_phi_66_pred_5 = _3066;
                }
                else
                {
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    uint _3196;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3070;
                    _3195 = _3071;
                    _3196 = _3081;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    for (;;)
                    {
                        uint _3200 = uint(findLSB(_3196)) + (_3072 << 5u);
                        uint _3197 = (_3196 + 4294967295u) & _3196;
                        uint _3202 = _3200 * 48u;
                        vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 3u)).x));
                        uint _3222 = (_3200 * 48u) + 4u;
                        vec4 _3235 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3222)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 3u)).x));
                        uint _3241 = (_3200 * 48u) + 8u;
                        vec3 _3252 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x));
                        float _3256 = _3216.x - _1899;
                        float _3257 = _3216.y - _1900;
                        float _3258 = _3216.z - _1901;
                        float _3259 = dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258));
                        float _3262 = inversesqrt(_3259);
                        float _3263 = _3262 * _3256;
                        float _3264 = _3262 * _3257;
                        float _3265 = _3262 * _3258;
                        float _3266 = dot(vec3(_762, _765, _768), vec3(_3263, _3264, _3265));
                        float _3271 = 1.0 - (_3259 * _3216.w);
                        float _4623 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3272 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3273 = sqrt(_3259) * _3235.w;
                        float _3276 = 1.39999997615814208984375 / (_3273 + 1.39999997615814208984375);
                        float _3277 = _3276 * _3276;
                        float _3280 = ((1.0 - _3277) * _3266) + _3277;
                        float _3283 = _3273 * _3273;
                        float _3287 = ((isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))) * _3272) / ((_3283 * 0.699999988079071044921875) + 1.0);
                        float _3291 = (-0.0) - _1899;
                        float _3292 = (-0.0) - _1900;
                        float _3293 = (-0.0) - _1901;
                        float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                        float _3298 = _3297 * _3291;
                        float _3299 = _3297 * _3292;
                        float _3300 = _3297 * _3293;
                        float _3307 = exp2(log2(1.0 / ((_3283 * 3.5) + 5.0)) * 0.25);
                        float _3308 = 1.0 - _837;
                        float _3315 = sqrt(1.0 - ((1.0 - (_3308 * _3308)) * (1.0 - (_3307 * _3307))));
                        float _3316 = _3315 * _3315;
                        float _3317 = _3316 * _3316;
                        float _3318 = _3298 + _3263;
                        float _3319 = _3299 + _3264;
                        float _3320 = _3300 + _3265;
                        float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                        float _3328 = dot(vec3(_762, _765, _768), vec3(_3298, _3299, _3300));
                        float _4639 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3331 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3332 = dot(vec3(_762, _765, _768), vec3(_3324 * _3318, _3324 * _3319, _3324 * _3320));
                        float _4650 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3335 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3339 = ((_3335 * _3335) * (_3317 + (-1.0))) + 1.0;
                        float _3340 = _3276 * _3316;
                        float _3341 = _3340 * _3340;
                        float _3344 = ((1.0 - _3341) * _3266) + _3341;
                        float _4661 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3345 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                        float _3346 = 1.0 - _3316;
                        float _3356 = (0.5 / (((_3345 * ((_3331 * _3346) + _3316)) + 9.9999999392252902907785028219223e-09) + (((_3345 * _3346) + _3316) * _3331))) * _3345;
                        float _4672 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3367 = (((_3317 * 3.1415927410125732421875) * (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) / ((_3339 * _3339) * ((_3283 * 2.1991131305694580078125) + 3.141590118408203125))) * _3272;
                        _3125 = (_3287 * _3235.x) + _3193;
                        _3126 = (_3287 * _3235.y) + _3194;
                        _3127 = (_3287 * _3235.z) + _3195;
                        _3122 = (_3367 * _3252.x) + _3190;
                        _3123 = (_3367 * _3252.y) + _3191;
                        _3124 = (_3367 * _3252.z) + _3192;
                        if (_3197 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3126;
                            _3195 = _3127;
                            _3196 = _3197;
                        }
                    }
                    frontier_phi_66_pred = _3127;
                    frontier_phi_66_pred_1 = _3126;
                    frontier_phi_66_pred_2 = _3125;
                    frontier_phi_66_pred_3 = _3124;
                    frontier_phi_66_pred_4 = _3123;
                    frontier_phi_66_pred_5 = _3122;
                }
                _2932 = frontier_phi_66_pred;
                _2930 = frontier_phi_66_pred_1;
                _2928 = frontier_phi_66_pred_2;
                _2926 = frontier_phi_66_pred_3;
                _2924 = frontier_phi_66_pred_4;
                _2922 = frontier_phi_66_pred_5;
                uint _3073 = _3072 + 1u;
                if (_3073 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3066 = _2922;
                    _3067 = _2924;
                    _3068 = _2926;
                    _3069 = _2928;
                    _3070 = _2930;
                    _3071 = _2932;
                    _3072 = _3073;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
        }
        uvec4 _2935 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2936 = _2935.z;
        uint _2938 = (_2936 >> 8u) & 15u;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        if (((4294967295u << _2938) & _2841) == 0u)
        {
            _3034 = _2921;
            _3036 = _2923;
            _3038 = _2925;
            _3040 = _2927;
            _3042 = _2929;
            _3044 = _2931;
        }
        else
        {
            float _3059 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
            float _3060 = _3059 * _1899;
            float _3061 = _3059 * _1900;
            float _3062 = _3059 * _1901;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2938 < ((_2936 >> 12u) & 15u))
            {
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3173 = _2921;
                float _3174 = _2923;
                float _3175 = _2925;
                float _3176 = _2927;
                float _3177 = _2929;
                float _3178 = _2931;
                uint _3179 = _2938;
                uint _3188;
                bool _3189;
                for (;;)
                {
                    _3188 = texelFetch(g_lightClassification, int((((_2835 << 5u) + (_2821 << 9u)) + (_3179 << 2u)) >> 2u)).x;
                    _3189 = _3188 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3189)
                    {
                        frontier_phi_72_pred = _3178;
                        frontier_phi_72_pred_1 = _3177;
                        frontier_phi_72_pred_2 = _3176;
                        frontier_phi_72_pred_3 = _3175;
                        frontier_phi_72_pred_4 = _3174;
                        frontier_phi_72_pred_5 = _3173;
                    }
                    else
                    {
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3385 = _3173;
                        float _3386 = _3174;
                        float _3387 = _3175;
                        float _3388 = _3176;
                        float _3389 = _3177;
                        float _3390 = _3178;
                        uint _3391 = _3188;
                        uint _3392;
                        vec4 _3417;
                        float _3418;
                        vec4 _3433;
                        vec3 _3445;
                        vec4 _3460;
                        vec4 _3475;
                        float _3522;
                        bool _3523;
                        for (;;)
                        {
                            uint _3402 = ((_3179 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3391));
                            _3392 = (_3391 + 4294967295u) & _3391;
                            uint _3404 = _3402 * 40u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            _3418 = _3417.w;
                            uint _3420 = (_3402 * 40u) + 4u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3402 * 40u) + 8u;
                            _3445 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x));
                            uint _3447 = (_3402 * 40u) + 16u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3462 = (_3402 * 40u) + 20u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3478 = (_3402 * 40u) + 24u;
                            vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3497 = (_3402 * 40u) + 28u;
                            vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            _3522 = fma(_1901, _3510.z, fma(_1900, _3510.y, _3510.x * _1899)) + _3510.w;
                            _3523 = !((fma(_1901, _3491.z, fma(_1900, _3491.y, _3491.x * _1899)) + _3491.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3523)
                            {
                                float _3550 = _3417.x - _1899;
                                float _3551 = _3417.y - _1900;
                                float _3552 = _3417.z - _1901;
                                float _3553 = dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552));
                                float _3556 = inversesqrt(_3553);
                                float _3557 = _3556 * _3550;
                                float _3558 = _3556 * _3551;
                                float _3559 = _3556 * _3552;
                                float _3563 = 1.0 - (_3553 / (_3418 * _3418));
                                float _4683 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3568 = sqrt(_3553) * _3433.w;
                                float _3570 = 1.39999997615814208984375 / (_3568 + 1.39999997615814208984375);
                                float _3571 = _3570 * _3570;
                                float _3574 = ((1.0 - _3571) * dot(vec3(_3557, _3558, _3559), vec3(_762, _765, _768))) + _3571;
                                float _3577 = _3568 * _3568;
                                float _3581 = (fma(_1901, _3460.z, fma(_1900, _3460.y, _3460.x * _1899)) + _3460.w) / _3522;
                                float _3582 = (fma(_1901, _3475.z, fma(_1900, _3475.y, _3475.x * _1899)) + _3475.w) / _3522;
                                float _3586 = 1.0 - dot(vec2(_3581, _3582), vec2(_3581, _3582));
                                float _4699 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3588 = _3587 * (((isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0))) * _3564) / ((_3577 * 0.699999988079071044921875) + 1.0));
                                float _3600 = exp2(log2(1.0 / ((_3577 * 3.5) + 5.0)) * 0.25);
                                float _3601 = 1.0 - _837;
                                float _3608 = sqrt(1.0 - ((1.0 - (_3601 * _3601)) * (1.0 - (_3600 * _3600))));
                                float _3609 = _3608 * _3608;
                                float _3610 = _3609 * _3609;
                                float _3611 = _3557 - _3060;
                                float _3612 = _3558 - _3061;
                                float _3613 = _3559 - _3062;
                                float _3617 = inversesqrt(dot(vec3(_3611, _3612, _3613), vec3(_3611, _3612, _3613)));
                                float _3621 = dot(vec3(_762, _765, _768), vec3((-0.0) - _3060, (-0.0) - _3061, (-0.0) - _3062));
                                float _4710 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3624 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3625 = dot(vec3(_762, _765, _768), vec3(_3617 * _3611, _3617 * _3612, _3617 * _3613));
                                float _4721 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3628 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3632 = ((_3628 * _3628) * (_3610 + (-1.0))) + 1.0;
                                float _3633 = _3570 * _3609;
                                float _3634 = _3633 * _3633;
                                float _3640 = ((1.0 - _3634) * dot(vec3(_762, _765, _768), vec3(_3557, _3558, _3559))) + _3634;
                                float _4732 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3641 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3642 = 1.0 - _3609;
                                float _3652 = (0.5 / (((_3641 * ((_3624 * _3642) + _3609)) + 9.9999999392252902907785028219223e-09) + (((_3641 * _3642) + _3609) * _3624))) * _3641;
                                float _4743 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3662 = (_3587 * _3564) * (((_3610 * 3.1415927410125732421875) * (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) / ((_3632 * _3632) * ((_3577 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3588 * _3433.y;
                                frontier_phi_78_pred_1 = _3588 * _3433.x;
                                frontier_phi_78_pred_2 = _3662 * _3445.z;
                                frontier_phi_78_pred_3 = _3662 * _3445.y;
                                frontier_phi_78_pred_4 = _3662 * _3445.x;
                                frontier_phi_78_pred_5 = _3588 * _3433.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3670 = frontier_phi_78_pred;
                            _3669 = frontier_phi_78_pred_1;
                            _3668 = frontier_phi_78_pred_2;
                            _3667 = frontier_phi_78_pred_3;
                            _3666 = frontier_phi_78_pred_4;
                            _3671 = frontier_phi_78_pred_5;
                            _3375 = _3669 + _3388;
                            _3376 = _3670 + _3389;
                            _3377 = _3671 + _3390;
                            _3372 = _3666 + _3385;
                            _3373 = _3667 + _3386;
                            _3374 = _3668 + _3387;
                            if (_3392 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3392;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3377;
                        frontier_phi_72_pred_1 = _3376;
                        frontier_phi_72_pred_2 = _3375;
                        frontier_phi_72_pred_3 = _3374;
                        frontier_phi_72_pred_4 = _3373;
                        frontier_phi_72_pred_5 = _3372;
                    }
                    _3045 = frontier_phi_72_pred;
                    _3043 = frontier_phi_72_pred_1;
                    _3041 = frontier_phi_72_pred_2;
                    _3039 = frontier_phi_72_pred_3;
                    _3037 = frontier_phi_72_pred_4;
                    _3035 = frontier_phi_72_pred_5;
                    uint _3180 = _3179 + 1u;
                    if (_3180 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3173 = _3035;
                        _3174 = _3037;
                        _3175 = _3039;
                        _3176 = _3041;
                        _3177 = _3043;
                        _3178 = _3045;
                        _3179 = _3180;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3045;
                frontier_phi_60_61_ladder_1 = _3043;
                frontier_phi_60_61_ladder_2 = _3039;
                frontier_phi_60_61_ladder_3 = _3037;
                frontier_phi_60_61_ladder_4 = _3035;
                frontier_phi_60_61_ladder_5 = _3041;
            }
            else
            {
                frontier_phi_60_61_ladder = _2931;
                frontier_phi_60_61_ladder_1 = _2929;
                frontier_phi_60_61_ladder_2 = _2925;
                frontier_phi_60_61_ladder_3 = _2923;
                frontier_phi_60_61_ladder_4 = _2921;
                frontier_phi_60_61_ladder_5 = _2927;
            }
            _3034 = frontier_phi_60_61_ladder_4;
            _3036 = frontier_phi_60_61_ladder_3;
            _3038 = frontier_phi_60_61_ladder_2;
            _3040 = frontier_phi_60_61_ladder_5;
            _3042 = frontier_phi_60_61_ladder_1;
            _3044 = frontier_phi_60_61_ladder;
        }
        float _3049 = isnan(1.0) ? _821 : (isnan(_821) ? 1.0 : min(_821, 1.0));
        _2854 = (_3049 * _3040) + _2366;
        _2856 = (_3049 * _3042) + _2368;
        _2858 = (_3049 * _3044) + _2370;
        _2860 = ((_3034 * _806) * _3049) + _2704;
        _2862 = ((_3036 * _808) * _3049) + _2706;
        _2864 = ((_3038 * _809) * _3049) + _2708;
    }
    else
    {
        _2854 = _2366;
        _2856 = _2368;
        _2858 = _2370;
        _2860 = _2704;
        _2862 = _2706;
        _2864 = _2708;
    }
    float _4759 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4770 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4781 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    uint _2884 = _781 + 6u;
    float _2892 = _743 / cbSceneParam._m0[86u].x;
    float _2893 = _744 / cbSceneParam._m0[86u].y;
    vec4 _2907 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2892, _2893, (log2((isnan(cbSceneParam._m0[77u].w) ? _678 : (isnan(_678) ? cbSceneParam._m0[77u].w : min(_678, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2909 = _2907.x;
    float _2910 = _2907.y;
    float _2911 = _2907.z;
    float _2912 = _2907.w;
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    if (_678 > cbSceneParam._m0[78u].w)
    {
        float _2946 = isnan(_678) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _678 : min(cbSceneParam._m0[80u].w, _678));
        float _2947 = _2946 / _678;
        float _2958 = _2947 * _728;
        float _2959 = _729 * _2947;
        float _2960 = (-0.0) - _2959;
        float _2962 = _2947 * _730;
        float _2964 = (cbSceneParam._m0[77u].w * _2960) / _2946;
        float _2965 = _2964 + cbSceneParam._m0[79u].w;
        float _2966 = cbSceneParam._m0[79u].w - _2959;
        float _2972 = sqrt(((_2958 * _2958) + (_2959 * _2959)) + (_2962 * _2962));
        float _2975 = (1.0 - (cbSceneParam._m0[77u].w / _2946)) * _2972;
        float _2980 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2982 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3135;
        if (abs((_2960 - _2964) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3135 = ((((_2965 > 0.0) ? exp2(_2980 * _2965) : (2.0 - exp2(_2982 * _2965))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2975;
        }
        else
        {
            float _3095 = 1.0 / cbSceneParam._m0[80u].x;
            float _3096 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : max(_2965, _2966));
            float _3097 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : min(_2965, _2966));
            float _3106 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : min(_3096, 0.0));
            float _3107 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : min(_3097, 0.0));
            _3135 = ((abs(_2972 / _2960) * cbSceneParam._m0[80u].y) * ((((_3106 - _3107) * 2.0) - ((exp2(_2980 * (isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0)))) - exp2(_2980 * (isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))))) * _3095)) - ((exp2(_2982 * _3106) - exp2(_2982 * _3107)) * _3095))) + (_2975 * cbSceneParam._m0[80u].z);
        }
        vec4 _3137 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2892, _2893, 1.0), 0.0);
        float _3146 = exp2((_3135 * (-1.44269502162933349609375)) * (1.0 - _3137.w));
        float _3147 = log2(_3146);
        float _3163 = log2(_2912);
        _2984 = (exp2(_3163 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].x)) * _3137.x) / cbSceneParam._m0[78u].x)) + _2909;
        _2986 = (exp2(_3163 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].y)) * _3137.y) / cbSceneParam._m0[78u].y)) + _2910;
        _2988 = (exp2(_3163 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].z)) * _3137.z) / cbSceneParam._m0[78u].z)) + _2911;
        _2990 = _3146 * _2912;
    }
    else
    {
        _2984 = _2909;
        _2986 = _2910;
        _2988 = _2911;
        _2990 = _2912;
    }
    float _3002 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3003 = _3002 == 3.0;
    float _3004 = log2(_2990);
    float _3011 = exp2(_3004 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2854 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _821))) + ((_2860 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _3012 = exp2(_3004 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2856 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _821))) + ((_2862 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _3013 = exp2(_3004 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2858 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _821))) + ((_2864 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _3022 = (_3002 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3022 * (_3003 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2984)));
    SV_Target.y = _3022 * (_3003 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2986)));
    SV_Target.z = _3022 * (_3003 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2988)));
    SV_Target.w = cbInstanceData._m0[_2884].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2884].w;
}


