#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1401;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _266.x * cbMtdParam._m0[10u].x;
    float _273 = _266.y * cbMtdParam._m0[10u].y;
    float _274 = _266.z * cbMtdParam._m0[10u].z;
    vec4 _292 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _342 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _352 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _342)) + 1.0;
    float _3729 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _353 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _360 = (_353 * ((_292.x * cbMtdParam._m0[11u].x) - _272)) + _272;
    float _361 = (_353 * ((_292.y * cbMtdParam._m0[11u].y) - _273)) + _273;
    float _362 = (_353 * ((_292.z * cbMtdParam._m0[11u].z) - _274)) + _274;
    vec4 _380 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _411 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _342)) + 1.0;
    float _3740 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _419 = (_412 * ((_380.x * cbMtdParam._m0[12u].x) - _360)) + _360;
    float _420 = (_412 * ((_380.y * cbMtdParam._m0[12u].y) - _361)) + _361;
    float _421 = (_412 * ((_380.z * cbMtdParam._m0[12u].z) - _362)) + _362;
    vec4 _439 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _464 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _342)) + 1.0;
    float _3751 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _472 = (_465 * ((_439.x * cbMtdParam._m0[13u].x) - _419)) + _419;
    float _473 = (_465 * ((_439.y * cbMtdParam._m0[13u].y) - _420)) + _420;
    float _474 = (_465 * ((_439.z * cbMtdParam._m0[13u].z) - _421)) + _421;
    vec4 _494 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _523 = (TEXCOORD_5.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD.z) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD.w) + cbTextureTilingScale._m0[21u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].z + 1.0);
    float _3762 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _524 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _531 = (_524 * ((_494.x * cbMtdParam._m0[14u].x) - _472)) + _472;
    float _532 = (_524 * ((_494.y * cbMtdParam._m0[14u].y) - _473)) + _473;
    float _533 = (_524 * ((_494.z * cbMtdParam._m0[14u].z) - _474)) + _474;
    vec4 _553 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _581 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _3773 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _589 = (_582 * ((_553.x * cbMtdParam._m0[15u].x) - _531)) + _531;
    float _590 = (_582 * ((_553.y * cbMtdParam._m0[15u].y) - _532)) + _532;
    float _591 = (_582 * ((_553.z * cbMtdParam._m0[15u].z) - _533)) + _533;
    vec4 _604 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _606 = _604.x;
    float _624 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _606) * _353) + _606;
    float _642 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _624) * _412) + _624;
    float _659 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _642) * _465) + _642;
    float _661 = _659 - (_659 * TEXCOORD_5.x);
    vec4 _677 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _699 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _701 = _699.x;
    float _702 = _699.y;
    float _705 = cbMtdParam._m0[18u].y * _699.z;
    vec4 _717 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _726 = (((cbMtdParam._m0[18u].x * _717.z) - _705) * _353) + _705;
    vec4 _739 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _750 = (((cbMtdParam._m0[17u].w * _739.z) - _726) * _412) + _726;
    vec4 _763 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _772 = (((cbMtdParam._m0[17u].z * _763.z) - _750) * _465) + _750;
    float _777 = ((cbMtdParam._m0[17u].x * TEXCOORD_5.x) * ((_677.z * cbMtdParam._m0[18u].z) - _772)) + _772;
    vec4 _790 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _804 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_790.z * cbMtdParam._m0[19u].y) - _777)) + _777;
    float _809 = ((_717.x - _701) * _353) + _701;
    float _810 = ((_717.y - _702) * _353) + _702;
    float _815 = ((_739.x - _809) * _412) + _809;
    float _816 = ((_739.y - _810) * _412) + _810;
    float _825 = ((((_763.x - _815) * _465) + _815) * 2.0) + (-1.0);
    float _826 = ((((_763.y - _816) * _465) + _816) * 2.0) + (-1.0);
    float _827 = dot(vec2(_825, _826), vec2(_825, _826));
    float _3784 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _832 = sqrt(1.0 - (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))));
    float _845 = (((((_677.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y) + _825) + ((((_790.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _846 = (((((_677.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y) + _826) + ((((_790.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _849 = fma(_832, _236 * NORMAL.x, fma(_846, _243 * TANGENT.x, (_229 * _221) * _845));
    float _852 = fma(_832, _236 * NORMAL.y, fma(_846, _243 * TANGENT.y, (_229 * _222) * _845));
    float _855 = fma(_832, _236 * NORMAL.z, fma(_846, _243 * TANGENT.z, (_229 * _223) * _845));
    float _859 = inversesqrt(dot(vec3(_849, _852, _855), vec3(_849, _852, _855)));
    float _860 = _859 * _849;
    float _861 = _859 * _852;
    float _862 = _859 * _855;
    float _3795 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _863 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _3806 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _3817 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3828 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3839 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _867 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _883 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _933 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _923);
    float _934 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _923);
    float _935 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _923);
    float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
    float _940 = _933 * _939;
    float _941 = _934 * _939;
    float _942 = _935 * _939;
    float _948 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _949 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _967 = fma(_862, cbSceneParam._m0[5u].z, fma(_861, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _860));
    float _970 = fma(_862, cbSceneParam._m0[6u].z, fma(_861, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _860));
    float _973 = fma(_862, cbSceneParam._m0[7u].z, fma(_861, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _860));
    uint _986 = uint(roundEven(NORMAL.w)) * 13u;
    uint _988 = (_986 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _994 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * cbInstanceData._m0[_988].x;
    float _995 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * cbInstanceData._m0[_988].y;
    float _996 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * cbInstanceData._m0[_988].z;
    float _3850 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _1000 = 1.0 - _867;
    float _1001 = _997 * _1000;
    float _1002 = _998 * _1000;
    float _1003 = _999 * _1000;
    float _1008 = (_997 + (-0.039999999105930328369140625)) * _867;
    float _1009 = (_998 + (-0.039999999105930328369140625)) * _867;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _867;
    float _1011 = _1008 + 0.039999999105930328369140625;
    float _1013 = _1009 + 0.039999999105930328369140625;
    float _1014 = _1010 + 0.039999999105930328369140625;
    vec4 _1023 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _948, cbSceneParam._m0[86u].y * _949));
    float _1026 = _1023.x * TEXCOORD_5.w;
    float _1027 = dot(vec3(_860, _861, _862), vec3(_940, _941, _942));
    float _1030 = _1027 * 2.0;
    float _1034 = (_1030 * _860) - _940;
    float _1035 = (_1030 * _861) - _941;
    float _1036 = (_1030 * _862) - _942;
    float _1040 = abs(dot(vec3(_940, _941, _942), vec3(_860, _861, _862)));
    float _3883 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1042 = sqrt(_863);
    float _1055 = exp2((_1042 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1042 * 3.0));
    float _1061 = (1.0 - _1055) * ((_1042 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1062 = _1055 * _1042;
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1098 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1400;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1125 = fma(_1098, cbModelParam._m0[26u].z, fma(_1094, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1090));
        float _1129 = fma(_1098, cbModelParam._m0[27u].z, fma(_1094, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1090));
        float _1133 = fma(_1098, cbModelParam._m0[28u].z, fma(_1094, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1090));
        float _1158 = _1090 + _860;
        float _1159 = _1094 + _861;
        float _1160 = _1098 + _862;
        float _1170 = fma(_1160, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158)) - _1125;
        float _1171 = fma(_1160, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158)) - _1129;
        float _1172 = fma(_1160, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158)) - _1133;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1125 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1129 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[34u].z) + ((((((_1133 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1228 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1194.x + (-0.5));
        float _1230 = _1228 * (_1194.y + (-0.5));
        float _1231 = _1228 * (_1194.z + (-0.5));
        float _1238 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1201.x + (-0.5));
        float _1240 = _1238 * (_1201.y + (-0.5));
        float _1241 = _1238 * (_1201.z + (-0.5));
        float _1248 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1208.x + (-0.5));
        float _1250 = _1248 * (_1208.y + (-0.5));
        float _1251 = _1248 * (_1208.z + (-0.5));
        float _1258 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1215.x + (-0.5));
        float _1260 = _1258 * (_1215.y + (-0.5));
        float _1261 = _1258 * (_1215.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1282 = (dot(vec3(_860, _861, _862), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1292 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3931 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1294 + 1.0))) + _1299) * _1262;
        float _1309 = _1230 * 0.5;
        float _1310 = _1240 * 0.5;
        float _1311 = _1250 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_860, _861, _862), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3964 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1336 + 1.0))) + _1341) * _1263;
        float _1351 = _1231 * 0.5;
        float _1352 = _1241 * 0.5;
        float _1353 = _1251 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_860, _861, _862), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3997 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1378 + 1.0))) + _1383) * _1264;
        _1400 = _1231;
        _1402 = _1230;
        _1403 = _1229;
        _1404 = _1241;
        _1405 = _1240;
        _1406 = _1239;
        _1407 = _1251;
        _1408 = _1250;
        _1409 = _1249;
        _1410 = _1264;
        _1411 = _1263;
        _1412 = _1262;
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1401;
        _1402 = _1401;
        _1403 = _1401;
        _1404 = _1401;
        _1405 = _1401;
        _1406 = _1401;
        _1407 = _1401;
        _1408 = _1401;
        _1409 = _1401;
        _1410 = _1401;
        _1411 = _1401;
        _1412 = _1401;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1441 = fma(_1098, cbModelParam._m0[30u].z, fma(_1094, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1090));
        float _1445 = fma(_1098, cbModelParam._m0[31u].z, fma(_1094, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1090));
        float _1449 = fma(_1098, cbModelParam._m0[32u].z, fma(_1094, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1090));
        float _1472 = _1090 + _860;
        float _1473 = _1094 + _861;
        float _1474 = _1098 + _862;
        float _1484 = fma(_1474, cbModelParam._m0[30u].z, fma(_1473, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1472)) - _1441;
        float _1485 = fma(_1474, cbModelParam._m0[31u].z, fma(_1473, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1472)) - _1445;
        float _1486 = fma(_1474, cbModelParam._m0[32u].z, fma(_1473, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1472)) - _1449;
        float _1490 = inversesqrt(dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486)));
        float _1503 = ((_1490 * _1484) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1441 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1490 * _1485) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1445 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1505 = ((_1490 * _1486) / cbModelParam._m0[35u].z) + ((((((_1449 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1503, _1504, _1505), 0.0);
        float _1540 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1507.x + (-0.5));
        float _1542 = _1540 * (_1507.y + (-0.5));
        float _1543 = _1540 * (_1507.z + (-0.5));
        float _1550 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1514.x + (-0.5));
        float _1552 = _1550 * (_1514.y + (-0.5));
        float _1553 = _1550 * (_1514.z + (-0.5));
        float _1560 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1521.x + (-0.5));
        float _1562 = _1560 * (_1521.y + (-0.5));
        float _1563 = _1560 * (_1521.z + (-0.5));
        float _1570 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1528.x + (-0.5));
        float _1572 = _1570 * (_1528.y + (-0.5));
        float _1573 = _1570 * (_1528.z + (-0.5));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = _1541 * 0.5;
        float _1578 = _1551 * 0.5;
        float _1579 = _1561 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_860, _861, _862), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4060 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1604 + 1.0))) + _1609) * _1574;
        float _1619 = _1542 * 0.5;
        float _1620 = _1552 * 0.5;
        float _1621 = _1562 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_860, _861, _862), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4093 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1646 + 1.0))) + _1651) * _1575;
        float _1661 = _1543 * 0.5;
        float _1662 = _1553 * 0.5;
        float _1663 = _1563 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_860, _861, _862), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4126 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1688 + 1.0))) + _1693) * _1576;
        _1710 = _1543;
        _1711 = _1542;
        _1712 = _1541;
        _1713 = _1553;
        _1714 = _1552;
        _1715 = _1551;
        _1716 = _1563;
        _1717 = _1562;
        _1718 = _1561;
        _1719 = _1576;
        _1720 = _1575;
        _1721 = _1574;
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
    }
    else
    {
        _1710 = _1401;
        _1711 = _1401;
        _1712 = _1401;
        _1713 = _1401;
        _1714 = _1401;
        _1715 = _1401;
        _1716 = _1401;
        _1717 = _1401;
        _1718 = _1401;
        _1719 = _1401;
        _1720 = _1401;
        _1721 = _1401;
        _1722 = 0.0;
        _1723 = 0.0;
        _1724 = 0.0;
    }
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1413)) + _1413;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1414)) + _1414;
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1415)) + _1415;
    float _1757 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1735, cbSceneParam._m0[89u].y, _1734 * cbSceneParam._m0[89u].x));
    float _1760 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1735, cbSceneParam._m0[90u].y, _1734 * cbSceneParam._m0[90u].x));
    float _1763 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1735, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1734));
    float _1778 = _1034 * 0.5;
    float _1779 = _1035 * 0.5;
    float _1780 = _1036 * 0.5;
    float _1781 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1784 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1787 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1821;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1794 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1400, _1404, _1407, _1410));
        float _1798 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1802 = dot(vec4(_1778, _1779, _1780, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1809 = dot(vec4(cbModelParam._m0[39u]), vec4(_1778, _1779, _1780, 1.0));
        _1821 = dot(vec3(isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1809) ? 0.0 : (isnan(0.0) ? _1809 : max(0.0, _1809))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1821 = 1.0;
    }
    float _1832;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1823 = dot(vec4(cbModelParam._m0[40u]), vec4(_1778, _1779, _1780, 1.0));
        _1832 = dot(vec3(isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1823) ? 0.0 : (isnan(0.0) ? _1823 : max(0.0, _1823))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1832 = 1.0;
    }
    float _1836 = (_1832 * cbModelParam._m0[1u].x) + (_1821 * (1.0 - cbModelParam._m0[1u].x));
    float _1846 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _863);
    float _1847 = isnan(_1846) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1846 : min(cbModelParam._m0[25u].z, _1846));
    float _1927;
    float _1929;
    float _1931;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1894 = fma(_1098, cbModelParam._m0[13u].z, fma(_1094, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1090)) + cbModelParam._m0[13u].w;
        float _1898 = fma(_1098, cbModelParam._m0[14u].z, fma(_1094, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1090)) + cbModelParam._m0[14u].w;
        float _1902 = fma(_1098, cbModelParam._m0[15u].z, fma(_1094, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1090)) + cbModelParam._m0[15u].w;
        float _1905 = fma(_1036, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1034));
        float _1908 = fma(_1036, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1034));
        float _1911 = fma(_1036, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1034));
        float _1939;
        if (_1905 > 0.0)
        {
            _1939 = abs((1.0 - _1894) / _1905);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1894 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1939 = frontier_phi_14_12_ladder;
        }
        float _2142;
        if (_1908 > 0.0)
        {
            _2142 = abs((1.0 - _1898) / _1908);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1898 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2142 = frontier_phi_23_19_ladder;
        }
        float _2396;
        if (_1911 > 0.0)
        {
            _2396 = abs((1.0 - _1902) / _1911);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1902 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2396 = frontier_phi_35_30_ladder;
        }
        float _2398 = isnan(_2142) ? _1939 : (isnan(_1939) ? _2142 : min(_1939, _2142));
        float _2399 = isnan(_2396) ? _2398 : (isnan(_2398) ? _2396 : min(_2398, _2396));
        float _2403 = (_2399 * _1905) + _1894;
        float _2404 = (_2399 * _1908) + _1898;
        float _2405 = (_2399 * _1911) + _1902;
        float _2406 = _2399 * 9.9999997473787516355514526367188e-05;
        float _2408 = (-1.0) - _2406;
        float _2410 = _2406 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2405 > _2410) || ((_2405 < _2408) || ((_2404 > _2410) || ((_2404 < _2408) || ((_2403 < _2408) || (_2403 > _2410))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2405, cbModelParam._m0[9u].z, fma(_2404, cbModelParam._m0[9u].y, _2403 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2405, cbModelParam._m0[10u].z, fma(_2404, cbModelParam._m0[10u].y, _2403 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2405, cbModelParam._m0[11u].z, fma(_2404, cbModelParam._m0[11u].y, _2403 * cbModelParam._m0[11u].x))), _1847);
            frontier_phi_13_35_ladder = _2533.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2533.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2533.x * cbModelParam._m0[1u].y;
        }
        _1927 = frontier_phi_13_35_ladder_2;
        _1929 = frontier_phi_13_35_ladder_1;
        _1931 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1915 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1034, _1035, _1036), _1847);
        _1927 = _1915.x * cbModelParam._m0[1u].y;
        _1929 = _1915.y * cbModelParam._m0[1u].y;
        _1931 = _1915.z * cbModelParam._m0[1u].y;
    }
    float _1935 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _863);
    float _1936 = isnan(_1935) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1935 : min(cbModelParam._m0[25u].w, _1935));
    float _2025;
    float _2027;
    float _2029;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1989 = fma(_1098, cbModelParam._m0[21u].z, fma(_1094, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1090)) + cbModelParam._m0[21u].w;
        float _1993 = fma(_1098, cbModelParam._m0[22u].z, fma(_1094, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1090)) + cbModelParam._m0[22u].w;
        float _1997 = fma(_1098, cbModelParam._m0[23u].z, fma(_1094, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1090)) + cbModelParam._m0[23u].w;
        float _2000 = fma(_1036, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1034));
        float _2003 = fma(_1036, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1034));
        float _2006 = fma(_1036, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1034));
        float _2147;
        if (_2000 > 0.0)
        {
            _2147 = abs((1.0 - _1989) / _2000);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1989 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2147 = frontier_phi_25_21_ladder;
        }
        float _2423;
        if (_2003 > 0.0)
        {
            _2423 = abs((1.0 - _1993) / _2003);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1993 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2423 = frontier_phi_37_32_ladder;
        }
        float _2636;
        if (_2006 > 0.0)
        {
            _2636 = abs((1.0 - _1997) / _2006);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1997 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2636 = frontier_phi_46_43_ladder;
        }
        float _2638 = isnan(_2423) ? _2147 : (isnan(_2147) ? _2423 : min(_2147, _2423));
        float _2639 = isnan(_2636) ? _2638 : (isnan(_2638) ? _2636 : min(_2638, _2636));
        float _2643 = (_2639 * _2000) + _1989;
        float _2644 = (_2639 * _2003) + _1993;
        float _2645 = (_2639 * _2006) + _1997;
        float _2646 = _2639 * 9.9999997473787516355514526367188e-05;
        float _2647 = (-1.0) - _2646;
        float _2649 = _2646 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2645 > _2649) || ((_2645 < _2647) || ((_2644 > _2649) || ((_2644 < _2647) || ((_2643 < _2647) || (_2643 > _2649))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2844 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2645, cbModelParam._m0[17u].z, fma(_2644, cbModelParam._m0[17u].y, _2643 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2645, cbModelParam._m0[18u].z, fma(_2644, cbModelParam._m0[18u].y, _2643 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2645, cbModelParam._m0[19u].z, fma(_2644, cbModelParam._m0[19u].y, _2643 * cbModelParam._m0[19u].x))), _1936);
            frontier_phi_22_46_ladder = _2844.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2844.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2844.x * cbModelParam._m0[1u].z;
        }
        _2025 = frontier_phi_22_46_ladder_2;
        _2027 = frontier_phi_22_46_ladder_1;
        _2029 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2009 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1034, _1035, _1036), _1936);
        _2025 = _2009.x * cbModelParam._m0[1u].z;
        _2027 = _2009.y * cbModelParam._m0[1u].z;
        _2029 = _2009.z * cbModelParam._m0[1u].z;
    }
    float _2042 = (((_1061 * _1011) + _1062) * _1026) * ((cbModelParam._m0[1u].w * (_2025 - _1927)) + _1927);
    float _2044 = (((_1061 * _1013) + _1062) * _1026) * ((cbModelParam._m0[1u].w * (_2027 - _1929)) + _1929);
    float _2046 = (((_1061 * _1014) + _1062) * _1026) * ((cbModelParam._m0[1u].w * (_2029 - _1931)) + _1931);
    float _2049 = fma(_2046, cbSceneParam._m0[89u].z, fma(_2044, cbSceneParam._m0[89u].y, _2042 * cbSceneParam._m0[89u].x));
    float _2052 = fma(_2046, cbSceneParam._m0[90u].z, fma(_2044, cbSceneParam._m0[90u].y, _2042 * cbSceneParam._m0[90u].x));
    float _2055 = fma(_2046, cbSceneParam._m0[91u].z, fma(_2044, cbSceneParam._m0[91u].y, _2042 * cbSceneParam._m0[91u].x));
    uvec4 _2065 = floatBitsToUint(cbInstanceData._m0[_986 + 5u]);
    uint _2067 = _2065.x * 14u;
    uint _2068 = _2067 + 13u;
    float _2075 = _1026 + (-1.0);
    float _2080 = (cbLight._m0[_2068].x * _2075) + 1.0;
    float _2081 = (cbLight._m0[_2068].y * _2075) + 1.0;
    float _2082 = (cbLight._m0[_2068].z * _2075) + 1.0;
    float _2083 = (cbLight._m0[_2068].w * _2075) + 1.0;
    uint _2084 = _2067 + 5u;
    float _2090 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
    uint _2094 = _2067 + 4u;
    float _2101 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2105 = _2067 | 1u;
    float _2116 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_860, _861, _862));
    float _2119 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_860, _861, _862));
    float _4262 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _4273 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2124 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * 0.3183098733425140380859375;
    float _2126 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * 0.3183098733425140380859375;
    float _2133 = ((cbLight._m0[_2084].x * _2090) * _2126) + ((cbLight._m0[_2094].x * _2101) * _2124);
    float _2134 = ((_2090 * cbLight._m0[_2084].y) * _2126) + ((_2101 * cbLight._m0[_2094].y) * _2124);
    float _2135 = ((_2090 * cbLight._m0[_2084].z) * _2126) + ((_2101 * cbLight._m0[_2094].z) * _2124);
    uvec4 _2139 = floatBitsToUint(cbLight._m0[_2067 + 12u]);
    bool _2141 = _2139.x == 0u;
    float _2152;
    float _2154;
    float _2156;
    if (_2141)
    {
        _2152 = _2133;
        _2154 = _2134;
        _2156 = _2135;
    }
    else
    {
        uint _2160 = _2067 + 6u;
        float _2176 = (dot(vec3(cbLight._m0[_2067 + 2u].xyz), vec3(_860, _861, _862)) * 0.5) + 0.5;
        float _2177 = _2176 * _2176;
        float _4284 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2178 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2179 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2152 = (((cbLight._m0[_2160].x * 0.3183098733425140380859375) * _2178) * _2179) + _2133;
        _2154 = (((cbLight._m0[_2160].y * 0.3183098733425140380859375) * _2178) * _2179) + _2134;
        _2156 = (((cbLight._m0[_2160].z * 0.3183098733425140380859375) * _2178) * _2179) + _2135;
    }
    bool _2159 = _2139.y == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2159)
    {
        _2197 = _2152;
        _2199 = _2154;
        _2201 = _2156;
    }
    else
    {
        uint _2367 = _2067 + 7u;
        float _2383 = (dot(vec3(cbLight._m0[_2067 + 3u].xyz), vec3(_860, _861, _862)) * 0.5) + 0.5;
        float _2384 = _2383 * _2383;
        float _4300 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2385 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2386 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2197 = (((cbLight._m0[_2367].x * 0.3183098733425140380859375) * _2385) * _2386) + _2152;
        _2199 = (((cbLight._m0[_2367].y * 0.3183098733425140380859375) * _2385) * _2386) + _2154;
        _2201 = (((cbLight._m0[_2367].z * 0.3183098733425140380859375) * _2385) * _2386) + _2156;
    }
    uint _2204 = _2067 + 8u;
    float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _863) * 0.949999988079071044921875);
    float _2218 = _2217 * _2217;
    float _2219 = cbLight._m0[_2067].x + _940;
    float _2220 = cbLight._m0[_2067].y + _941;
    float _2221 = cbLight._m0[_2067].z + _942;
    float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
    float _2226 = _2225 * _2219;
    float _2227 = _2225 * _2220;
    float _2228 = _2225 * _2221;
    float _2229 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2067].xyz));
    float _4316 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _4327 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _2233 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2234 = dot(vec3(_860, _861, _862), vec3(_2226, _2227, _2228));
    float _4338 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2226, _2227, _2228));
    float _4349 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2218 * _2218;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2254 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
    float _2255 = 0.959999978542327880859375 - _1008;
    float _2257 = 0.959999978542327880859375 - _1009;
    float _2258 = 0.959999978542327880859375 - _1010;
    float _2265 = 1.0 - _2218;
    float _2276 = (0.5 / (((_2233 * ((_2232 * _2265) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2265) + _2218) * _2232))) * _2232;
    float _4360 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2278 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    uint _2289 = _2067 + 9u;
    float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2105].w)) * _863) * 0.949999988079071044921875);
    float _2301 = _2300 * _2300;
    float _2302 = cbLight._m0[_2105].x + _940;
    float _2303 = cbLight._m0[_2105].y + _941;
    float _2304 = cbLight._m0[_2105].z + _942;
    float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
    float _2309 = _2308 * _2302;
    float _2310 = _2308 * _2303;
    float _2311 = _2308 * _2304;
    float _2312 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2105].xyz));
    float _4371 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2316 = dot(vec3(_860, _861, _862), vec3(_2309, _2310, _2311));
    float _4382 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _2320 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_2309, _2310, _2311));
    float _4393 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2324 = _2301 * _2301;
    float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
    float _2335 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
    float _2342 = 1.0 - _2301;
    float _2352 = (0.5 / (((_2233 * ((_2315 * _2342) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2342) + _2301) * _2315))) * _2315;
    float _4404 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2354 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
    float _2364 = (((((_2335 * _2255) + _1011) * cbLight._m0[_2289].x) * _2354) * _2090) + (((((_2254 * _2255) + _1011) * cbLight._m0[_2204].x) * _2278) * _2101);
    float _2365 = (((((_2335 * _2257) + _1013) * cbLight._m0[_2289].y) * _2354) * _2090) + (((((_2254 * _2257) + _1013) * cbLight._m0[_2204].y) * _2278) * _2101);
    float _2366 = (((((_2335 * _2258) + _1014) * cbLight._m0[_2289].z) * _2354) * _2090) + (((((_2254 * _2258) + _1014) * cbLight._m0[_2204].z) * _2278) * _2101);
    float _2428;
    float _2430;
    float _2432;
    if (_2141)
    {
        _2428 = _2364;
        _2430 = _2365;
        _2432 = _2366;
    }
    else
    {
        uint _2434 = _2067 + 2u;
        uint _2438 = _2067 + 10u;
        float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _863) * 0.949999988079071044921875);
        float _2453 = _2452 * _2452;
        float _2454 = cbLight._m0[_2434].x + _940;
        float _2455 = cbLight._m0[_2434].y + _941;
        float _2456 = cbLight._m0[_2434].z + _942;
        float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
        float _2461 = _2460 * _2454;
        float _2462 = _2460 * _2455;
        float _2463 = _2460 * _2456;
        float _2464 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2434].xyz));
        float _4415 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2468 = dot(vec3(_860, _861, _862), vec3(_2461, _2462, _2463));
        float _4426 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2472 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2461, _2462, _2463));
        float _4437 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2476 = _2453 * _2453;
        float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
        float _2487 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
        float _2494 = 1.0 - _2453;
        float _2504 = (0.5 / (((_2233 * ((_2467 * _2494) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2494) + _2453) * _2467))) * _2467;
        float _4448 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2506 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
        float _2507 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2428 = (((((_2487 * _2255) + _1011) * cbLight._m0[_2438].x) * _2506) * _2507) + _2364;
        _2430 = (((((_2487 * _2257) + _1013) * cbLight._m0[_2438].y) * _2506) * _2507) + _2365;
        _2432 = (((((_2487 * _2258) + _1014) * cbLight._m0[_2438].z) * _2506) * _2507) + _2366;
    }
    float _2542;
    float _2544;
    float _2546;
    if (_2159)
    {
        _2542 = _2428;
        _2544 = _2430;
        _2546 = _2432;
    }
    else
    {
        uint _2553 = _2067 + 3u;
        uint _2557 = _2067 + 11u;
        float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2553].w)) * _863) * 0.949999988079071044921875);
        float _2572 = _2571 * _2571;
        float _2573 = cbLight._m0[_2553].x + _940;
        float _2574 = cbLight._m0[_2553].y + _941;
        float _2575 = cbLight._m0[_2553].z + _942;
        float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
        float _2580 = _2579 * _2573;
        float _2581 = _2579 * _2574;
        float _2582 = _2579 * _2575;
        float _2583 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2553].xyz));
        float _4464 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2587 = dot(vec3(_860, _861, _862), vec3(_2580, _2581, _2582));
        float _4475 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2591 = dot(vec3(cbLight._m0[_2553].xyz), vec3(_2580, _2581, _2582));
        float _4486 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2595 = _2572 * _2572;
        float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
        float _2606 = exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0);
        float _2613 = 1.0 - _2572;
        float _2623 = (0.5 / (((_2233 * ((_2586 * _2613) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2613) + _2572) * _2586))) * _2586;
        float _4497 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2625 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
        float _2626 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2542 = (((((_2606 * _2255) + _1011) * cbLight._m0[_2557].x) * _2625) * _2626) + _2428;
        _2544 = (((((_2606 * _2257) + _1013) * cbLight._m0[_2557].y) * _2625) * _2626) + _2430;
        _2546 = (((((_2606 * _2258) + _1014) * cbLight._m0[_2557].z) * _2625) * _2626) + _2432;
    }
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    if (_2065.y == 0u)
    {
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2701;
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2701;
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2701;
        uvec4 _2716 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2717 = _2716.x;
        uint _2728 = uint((float(_2716.y) * floor(float(uint(cbSceneParam._m0[85u].y * _949) / _2717))) + floor(float(uint(cbSceneParam._m0[85u].x * _948) / _2717)));
        float _2738 = (log2(_2704 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2739 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        uint _2742 = uint(isnan(14.0) ? _2739 : (isnan(_2739) ? 14.0 : min(_2739, 14.0)));
        uvec4 _2747 = texelFetch(g_lightClusterGridBuffer, int(((_2742 << 2u) + (_2728 << 6u)) >> 2u));
        uint _2748 = _2747.x;
        uint _2749 = _2716.z;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        if (((((1u << ((_2749 >> 4u) & 15u)) + 4294967295u) & _2748) == 0u) || ((_2749 & 240u) == 0u))
        {
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
        }
        else
        {
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            uint _3000 = 0u;
            uint _3009;
            bool _3010;
            for (;;)
            {
                _3009 = texelFetch(g_lightClassification, int((((_2742 << 5u) + (_2728 << 9u)) + (_3000 << 2u)) >> 2u)).x;
                _3010 = _3009 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3010)
                {
                    frontier_phi_61_pred = _2994;
                    frontier_phi_61_pred_1 = _2999;
                    frontier_phi_61_pred_2 = _2998;
                    frontier_phi_61_pred_3 = _2997;
                    frontier_phi_61_pred_4 = _2996;
                    frontier_phi_61_pred_5 = _2995;
                }
                else
                {
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    uint _3124;
                    _3118 = _2994;
                    _3119 = _2995;
                    _3120 = _2996;
                    _3121 = _2997;
                    _3122 = _2998;
                    _3123 = _2999;
                    _3124 = _3009;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    for (;;)
                    {
                        uint _3128 = uint(findLSB(_3124)) + (_3000 << 5u);
                        uint _3125 = (_3124 + 4294967295u) & _3124;
                        uint _3130 = _3128 * 48u;
                        vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3130)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 3u)).x));
                        uint _3150 = (_3128 * 48u) + 4u;
                        vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3150)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 3u)).x));
                        uint _3169 = (_3128 * 48u) + 8u;
                        vec3 _3180 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x));
                        float _3184 = _3144.x - _2702;
                        float _3185 = _3144.y - _2703;
                        float _3186 = _3144.z - _2704;
                        float _3187 = dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186));
                        float _3190 = inversesqrt(_3187);
                        float _3191 = _3190 * _3184;
                        float _3192 = _3190 * _3185;
                        float _3193 = _3190 * _3186;
                        float _3194 = dot(vec3(_967, _970, _973), vec3(_3191, _3192, _3193));
                        float _3199 = 1.0 - (_3187 * _3144.w);
                        float _4523 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3200 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3201 = sqrt(_3187) * _3163.w;
                        float _3204 = 1.39999997615814208984375 / (_3201 + 1.39999997615814208984375);
                        float _3205 = _3204 * _3204;
                        float _3208 = ((1.0 - _3205) * _3194) + _3205;
                        float _3211 = _3201 * _3201;
                        float _3215 = ((isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))) * _3200) / ((_3211 * 0.699999988079071044921875) + 1.0);
                        float _3219 = (-0.0) - _2702;
                        float _3220 = (-0.0) - _2703;
                        float _3221 = (-0.0) - _2704;
                        float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                        float _3226 = _3225 * _3219;
                        float _3227 = _3225 * _3220;
                        float _3228 = _3225 * _3221;
                        float _3236 = exp2(log2(1.0 / ((_3211 * 3.5) + 5.0)) * 0.25);
                        float _3237 = 1.0 - _1042;
                        float _3244 = sqrt(1.0 - ((1.0 - (_3237 * _3237)) * (1.0 - (_3236 * _3236))));
                        float _3245 = _3244 * _3244;
                        float _3246 = _3245 * _3245;
                        float _3247 = _3226 + _3191;
                        float _3248 = _3227 + _3192;
                        float _3249 = _3228 + _3193;
                        float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                        float _3257 = dot(vec3(_967, _970, _973), vec3(_3226, _3227, _3228));
                        float _4539 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3260 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3261 = dot(vec3(_967, _970, _973), vec3(_3253 * _3247, _3253 * _3248, _3253 * _3249));
                        float _4550 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3264 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3268 = ((_3264 * _3264) * (_3246 + (-1.0))) + 1.0;
                        float _3269 = _3204 * _3245;
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3194) + _3270;
                        float _4561 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3274 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3275 = 1.0 - _3245;
                        float _3285 = (0.5 / (((_3274 * ((_3260 * _3275) + _3245)) + 9.9999999392252902907785028219223e-09) + (((_3274 * _3275) + _3245) * _3260))) * _3274;
                        float _4572 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3296 = (((_3246 * 3.1415927410125732421875) * (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) / ((_3268 * _3268) * ((_3211 * 2.1991131305694580078125) + 3.141590118408203125))) * _3200;
                        _3053 = (_3215 * _3163.x) + _3121;
                        _3054 = (_3215 * _3163.y) + _3122;
                        _3055 = (_3215 * _3163.z) + _3123;
                        _3050 = (_3296 * _3180.x) + _3118;
                        _3051 = (_3296 * _3180.y) + _3119;
                        _3052 = (_3296 * _3180.z) + _3120;
                        if (_3125 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3118 = _3050;
                            _3119 = _3051;
                            _3120 = _3052;
                            _3121 = _3053;
                            _3122 = _3054;
                            _3123 = _3055;
                            _3124 = _3125;
                        }
                    }
                    frontier_phi_61_pred = _3050;
                    frontier_phi_61_pred_1 = _3055;
                    frontier_phi_61_pred_2 = _3054;
                    frontier_phi_61_pred_3 = _3053;
                    frontier_phi_61_pred_4 = _3052;
                    frontier_phi_61_pred_5 = _3051;
                }
                _2850 = frontier_phi_61_pred;
                _2860 = frontier_phi_61_pred_1;
                _2858 = frontier_phi_61_pred_2;
                _2856 = frontier_phi_61_pred_3;
                _2854 = frontier_phi_61_pred_4;
                _2852 = frontier_phi_61_pred_5;
                uint _3001 = _3000 + 1u;
                if (_3001 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2994 = _2850;
                    _2995 = _2852;
                    _2996 = _2854;
                    _2997 = _2856;
                    _2998 = _2858;
                    _2999 = _2860;
                    _3000 = _3001;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
        }
        uvec4 _2863 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2864 = _2863.z;
        uint _2866 = (_2864 >> 8u) & 15u;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        if (((4294967295u << _2866) & _2748) == 0u)
        {
            _2962 = _2849;
            _2964 = _2851;
            _2966 = _2853;
            _2968 = _2855;
            _2970 = _2857;
            _2972 = _2859;
        }
        else
        {
            float _2987 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
            float _2988 = _2987 * _2702;
            float _2989 = _2987 * _2703;
            float _2990 = _2987 * _2704;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2866 < ((_2864 >> 12u) & 15u))
            {
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _3101 = _2849;
                float _3102 = _2851;
                float _3103 = _2853;
                float _3104 = _2855;
                float _3105 = _2857;
                float _3106 = _2859;
                uint _3107 = _2866;
                uint _3116;
                bool _3117;
                for (;;)
                {
                    _3116 = texelFetch(g_lightClassification, int((((_2742 << 5u) + (_2728 << 9u)) + (_3107 << 2u)) >> 2u)).x;
                    _3117 = _3116 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3117)
                    {
                        frontier_phi_67_pred = _3104;
                        frontier_phi_67_pred_1 = _3105;
                        frontier_phi_67_pred_2 = _3106;
                        frontier_phi_67_pred_3 = _3103;
                        frontier_phi_67_pred_4 = _3102;
                        frontier_phi_67_pred_5 = _3101;
                    }
                    else
                    {
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3314 = _3101;
                        float _3315 = _3102;
                        float _3316 = _3103;
                        float _3317 = _3104;
                        float _3318 = _3105;
                        float _3319 = _3106;
                        uint _3320 = _3116;
                        uint _3321;
                        vec4 _3346;
                        float _3347;
                        vec4 _3362;
                        vec3 _3374;
                        vec4 _3389;
                        vec4 _3404;
                        float _3451;
                        bool _3452;
                        for (;;)
                        {
                            uint _3331 = ((_3107 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3320));
                            _3321 = (_3320 + 4294967295u) & _3320;
                            uint _3333 = _3331 * 40u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            _3347 = _3346.w;
                            uint _3349 = (_3331 * 40u) + 4u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3364 = (_3331 * 40u) + 8u;
                            _3374 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x));
                            uint _3376 = (_3331 * 40u) + 16u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3391 = (_3331 * 40u) + 20u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3407 = (_3331 * 40u) + 24u;
                            vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3426 = (_3331 * 40u) + 28u;
                            vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            _3451 = fma(_2704, _3439.z, fma(_2703, _3439.y, _3439.x * _2702)) + _3439.w;
                            _3452 = !((fma(_2704, _3420.z, fma(_2703, _3420.y, _3420.x * _2702)) + _3420.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3452)
                            {
                                float _3479 = _3346.x - _2702;
                                float _3480 = _3346.y - _2703;
                                float _3481 = _3346.z - _2704;
                                float _3482 = dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481));
                                float _3485 = inversesqrt(_3482);
                                float _3486 = _3485 * _3479;
                                float _3487 = _3485 * _3480;
                                float _3488 = _3485 * _3481;
                                float _3492 = 1.0 - (_3482 / (_3347 * _3347));
                                float _4583 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3497 = sqrt(_3482) * _3362.w;
                                float _3499 = 1.39999997615814208984375 / (_3497 + 1.39999997615814208984375);
                                float _3500 = _3499 * _3499;
                                float _3503 = ((1.0 - _3500) * dot(vec3(_3486, _3487, _3488), vec3(_967, _970, _973))) + _3500;
                                float _3506 = _3497 * _3497;
                                float _3510 = (fma(_2704, _3389.z, fma(_2703, _3389.y, _3389.x * _2702)) + _3389.w) / _3451;
                                float _3511 = (fma(_2704, _3404.z, fma(_2703, _3404.y, _3404.x * _2702)) + _3404.w) / _3451;
                                float _3515 = 1.0 - dot(vec2(_3510, _3511), vec2(_3510, _3511));
                                float _4599 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3517 = _3516 * (((isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0))) * _3493) / ((_3506 * 0.699999988079071044921875) + 1.0));
                                float _3529 = exp2(log2(1.0 / ((_3506 * 3.5) + 5.0)) * 0.25);
                                float _3530 = 1.0 - _1042;
                                float _3537 = sqrt(1.0 - ((1.0 - (_3530 * _3530)) * (1.0 - (_3529 * _3529))));
                                float _3538 = _3537 * _3537;
                                float _3539 = _3538 * _3538;
                                float _3540 = _3486 - _2988;
                                float _3541 = _3487 - _2989;
                                float _3542 = _3488 - _2990;
                                float _3546 = inversesqrt(dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542)));
                                float _3550 = dot(vec3(_967, _970, _973), vec3((-0.0) - _2988, (-0.0) - _2989, (-0.0) - _2990));
                                float _4610 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3553 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3554 = dot(vec3(_967, _970, _973), vec3(_3546 * _3540, _3546 * _3541, _3546 * _3542));
                                float _4621 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3557 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3561 = ((_3557 * _3557) * (_3539 + (-1.0))) + 1.0;
                                float _3562 = _3499 * _3538;
                                float _3563 = _3562 * _3562;
                                float _3569 = ((1.0 - _3563) * dot(vec3(_967, _970, _973), vec3(_3486, _3487, _3488))) + _3563;
                                float _4632 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3571 = 1.0 - _3538;
                                float _3581 = (0.5 / (((_3570 * ((_3553 * _3571) + _3538)) + 9.9999999392252902907785028219223e-09) + (((_3570 * _3571) + _3538) * _3553))) * _3570;
                                float _4643 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3591 = (_3516 * _3493) * (((_3539 * 3.1415927410125732421875) * (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) / ((_3561 * _3561) * ((_3506 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3591 * _3374.x;
                                frontier_phi_73_pred_1 = _3591 * _3374.y;
                                frontier_phi_73_pred_2 = _3517 * _3362.z;
                                frontier_phi_73_pred_3 = _3517 * _3362.y;
                                frontier_phi_73_pred_4 = _3517 * _3362.x;
                                frontier_phi_73_pred_5 = _3591 * _3374.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3595 = frontier_phi_73_pred;
                            _3596 = frontier_phi_73_pred_1;
                            _3600 = frontier_phi_73_pred_2;
                            _3599 = frontier_phi_73_pred_3;
                            _3598 = frontier_phi_73_pred_4;
                            _3597 = frontier_phi_73_pred_5;
                            _3304 = _3598 + _3317;
                            _3305 = _3599 + _3318;
                            _3306 = _3600 + _3319;
                            _3301 = _3595 + _3314;
                            _3302 = _3596 + _3315;
                            _3303 = _3597 + _3316;
                            if (_3321 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3321;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3304;
                        frontier_phi_67_pred_1 = _3305;
                        frontier_phi_67_pred_2 = _3306;
                        frontier_phi_67_pred_3 = _3303;
                        frontier_phi_67_pred_4 = _3302;
                        frontier_phi_67_pred_5 = _3301;
                    }
                    _2969 = frontier_phi_67_pred;
                    _2971 = frontier_phi_67_pred_1;
                    _2973 = frontier_phi_67_pred_2;
                    _2967 = frontier_phi_67_pred_3;
                    _2965 = frontier_phi_67_pred_4;
                    _2963 = frontier_phi_67_pred_5;
                    uint _3108 = _3107 + 1u;
                    if (_3108 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3101 = _2963;
                        _3102 = _2965;
                        _3103 = _2967;
                        _3104 = _2969;
                        _3105 = _2971;
                        _3106 = _2973;
                        _3107 = _3108;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2971;
                frontier_phi_55_56_ladder_1 = _2973;
                frontier_phi_55_56_ladder_2 = _2969;
                frontier_phi_55_56_ladder_3 = _2967;
                frontier_phi_55_56_ladder_4 = _2965;
                frontier_phi_55_56_ladder_5 = _2963;
            }
            else
            {
                frontier_phi_55_56_ladder = _2857;
                frontier_phi_55_56_ladder_1 = _2859;
                frontier_phi_55_56_ladder_2 = _2855;
                frontier_phi_55_56_ladder_3 = _2853;
                frontier_phi_55_56_ladder_4 = _2851;
                frontier_phi_55_56_ladder_5 = _2849;
            }
            _2962 = frontier_phi_55_56_ladder_5;
            _2964 = frontier_phi_55_56_ladder_4;
            _2966 = frontier_phi_55_56_ladder_3;
            _2968 = frontier_phi_55_56_ladder_2;
            _2970 = frontier_phi_55_56_ladder;
            _2972 = frontier_phi_55_56_ladder_1;
        }
        float _2977 = isnan(1.0) ? _1026 : (isnan(_1026) ? 1.0 : min(_1026, 1.0));
        _2761 = (_2977 * _2968) + _2197;
        _2763 = (_2977 * _2970) + _2199;
        _2765 = (_2977 * _2972) + _2201;
        _2767 = ((_2962 * _1011) * _2977) + _2542;
        _2769 = ((_2964 * _1013) * _2977) + _2544;
        _2771 = ((_2966 * _1014) * _2977) + _2546;
    }
    else
    {
        _2761 = _2197;
        _2763 = _2199;
        _2765 = _2201;
        _2767 = _2542;
        _2769 = _2544;
        _2771 = _2546;
    }
    float _4659 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4670 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _4681 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    uint _2791 = _986 + 6u;
    float _2799 = _948 / cbSceneParam._m0[86u].x;
    float _2800 = _949 / cbSceneParam._m0[86u].y;
    vec4 _2814 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2799, _2800, (log2((isnan(cbSceneParam._m0[77u].w) ? _883 : (isnan(_883) ? cbSceneParam._m0[77u].w : min(_883, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2816 = _2814.x;
    float _2817 = _2814.y;
    float _2818 = _2814.z;
    float _2819 = _2814.w;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    if (_883 > cbSceneParam._m0[78u].w)
    {
        float _2874 = isnan(_883) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _883 : min(cbSceneParam._m0[80u].w, _883));
        float _2875 = _2874 / _883;
        float _2886 = _2875 * _933;
        float _2887 = _934 * _2875;
        float _2888 = (-0.0) - _2887;
        float _2890 = _2875 * _935;
        float _2892 = (cbSceneParam._m0[77u].w * _2888) / _2874;
        float _2893 = _2892 + cbSceneParam._m0[79u].w;
        float _2894 = cbSceneParam._m0[79u].w - _2887;
        float _2900 = sqrt(((_2886 * _2886) + (_2887 * _2887)) + (_2890 * _2890));
        float _2903 = (1.0 - (cbSceneParam._m0[77u].w / _2874)) * _2900;
        float _2908 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2910 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3063;
        if (abs((_2888 - _2892) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3063 = ((((_2893 > 0.0) ? exp2(_2908 * _2893) : (2.0 - exp2(_2910 * _2893))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2903;
        }
        else
        {
            float _3023 = 1.0 / cbSceneParam._m0[80u].x;
            float _3024 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : max(_2893, _2894));
            float _3025 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : min(_2893, _2894));
            float _3034 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : min(_3024, 0.0));
            float _3035 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : min(_3025, 0.0));
            _3063 = ((abs(_2900 / _2888) * cbSceneParam._m0[80u].y) * ((((_3034 - _3035) * 2.0) - ((exp2(_2908 * (isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0)))) - exp2(_2908 * (isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))))) * _3023)) - ((exp2(_2910 * _3034) - exp2(_2910 * _3035)) * _3023))) + (_2903 * cbSceneParam._m0[80u].z);
        }
        vec4 _3065 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2799, _2800, 1.0), 0.0);
        float _3074 = exp2((_3063 * (-1.44269502162933349609375)) * (1.0 - _3065.w));
        float _3075 = log2(_3074);
        float _3091 = log2(_2819);
        _2912 = (exp2(_3091 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3075 * cbSceneParam._m0[78u].x)) * _3065.x) / cbSceneParam._m0[78u].x)) + _2816;
        _2914 = (exp2(_3091 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3075 * cbSceneParam._m0[78u].y)) * _3065.y) / cbSceneParam._m0[78u].y)) + _2817;
        _2916 = (exp2(_3091 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3075 * cbSceneParam._m0[78u].z)) * _3065.z) / cbSceneParam._m0[78u].z)) + _2818;
        _2918 = _3074 * _2819;
    }
    else
    {
        _2912 = _2816;
        _2914 = _2817;
        _2916 = _2818;
        _2918 = _2819;
    }
    float _2930 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2931 = _2930 == 3.0;
    float _2932 = log2(_2918);
    float _2939 = exp2(_2932 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2761 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1026))) + ((_2767 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1836)) * cbPerFrame._m0[3u].x));
    float _2940 = exp2(_2932 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2763 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1026))) + ((_2769 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1836)) * cbPerFrame._m0[3u].x));
    float _2941 = exp2(_2932 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2765 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1026))) + ((_2771 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1836)) * cbPerFrame._m0[3u].x));
    float _2950 = (_2930 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2950 * (_2931 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2912)));
    SV_Target.y = _2950 * (_2931 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2914)));
    SV_Target.z = _2950 * (_2931 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2916)));
    SV_Target.w = cbInstanceData._m0[_2791].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2791].w;
}


