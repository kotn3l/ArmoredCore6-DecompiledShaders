#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_21;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail2_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1402;
float _3808;
float _3809;
float _3810;
float _3811;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _270 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _270.x * cbMtdParam._m0[10u].x;
    float _277 = _270.y * cbMtdParam._m0[10u].y;
    float _278 = _270.z * cbMtdParam._m0[10u].z;
    vec4 _296 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _346 = cbMtdParam._m0[20u].z * texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _356 = ((cbMtdParam._m0[16u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].y * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].z * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _346)) + 1.0;
    float _3820 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _357 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _364 = (_357 * ((_296.x * cbMtdParam._m0[11u].x) - _276)) + _276;
    float _365 = (_357 * ((_296.y * cbMtdParam._m0[11u].y) - _277)) + _277;
    float _366 = (_357 * ((_296.z * cbMtdParam._m0[11u].z) - _278)) + _278;
    vec4 _384 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.x) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.y) + cbTextureTilingScale._m0[20u].w));
    float _415 = ((cbMtdParam._m0[19u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[21u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[22u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _346)) + 1.0;
    float _3831 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _423 = (_416 * ((_384.x * cbMtdParam._m0[12u].x) - _364)) + _364;
    float _424 = (_416 * ((_384.y * cbMtdParam._m0[12u].y) - _365)) + _365;
    float _425 = (_416 * ((_384.z * cbMtdParam._m0[12u].z) - _366)) + _366;
    vec4 _443 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _468 = ((cbMtdParam._m0[20u].y * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].w * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[21u].x * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _346)) + 1.0;
    float _3842 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _476 = (_469 * ((_443.x * cbMtdParam._m0[13u].x) - _423)) + _423;
    float _477 = (_469 * ((_443.y * cbMtdParam._m0[13u].y) - _424)) + _424;
    float _478 = (_469 * ((_443.z * cbMtdParam._m0[13u].z) - _425)) + _425;
    vec4 _499 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _528 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[19u].z + 1.0);
    float _3853 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _536 = (_529 * ((_499.x * cbMtdParam._m0[15u].x) - _476)) + _476;
    float _537 = (_529 * ((_499.y * cbMtdParam._m0[15u].y) - _477)) + _477;
    float _538 = (_529 * ((_499.z * cbMtdParam._m0[15u].z) - _478)) + _478;
    vec4 _551 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _553 = _551.x;
    float _571 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _553) * _357) + _553;
    float _589 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _571) * _416) + _571;
    float _606 = ((texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _589) * _469) + _589;
    vec4 _618 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _638 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _647 = cbMtdParam._m0[18u].y * _638.z;
    vec4 _659 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _668 = (((cbMtdParam._m0[18u].x * _659.z) - _647) * _357) + _647;
    vec4 _681 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _692 = (((cbMtdParam._m0[17u].w * _681.z) - _668) * _416) + _668;
    vec4 _705 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _714 = (((cbMtdParam._m0[17u].z * _705.z) - _692) * _469) + _692;
    vec4 _727 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_21, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _741 = ((cbMtdParam._m0[19u].x * TEXCOORD_8) * ((_727.z * cbMtdParam._m0[19u].y) - _714)) + _714;
    vec4 _754 = texture(sampler2D(C_3Mask_Detail2_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _766 = ((_659.x - _640) * _357) + _640;
    float _767 = ((_659.y - _641) * _357) + _641;
    float _772 = ((_681.x - _766) * _416) + _766;
    float _773 = ((_681.y - _767) * _416) + _767;
    float _782 = ((((_705.x - _772) * _469) + _772) * 2.0) + (-1.0);
    float _783 = ((((_705.y - _773) * _469) + _773) * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _3864 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))));
    float _806 = (((((_754.x * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _782) + ((((_618.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[16u].y)) + ((((_727.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[18u].w);
    float _807 = (((((_754.y * 2.0) + (-1.0)) * cbMtdParam._m0[17u].y) + _783) + ((((_618.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[16u].y)) + ((((_727.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[18u].w);
    float _810 = fma(_789, _240 * NORMAL.x, fma(_807, _247 * TANGENT.x, (_233 * _225) * _806));
    float _813 = fma(_789, _240 * NORMAL.y, fma(_807, _247 * TANGENT.y, (_233 * _226) * _806));
    float _816 = fma(_789, _240 * NORMAL.z, fma(_807, _247 * TANGENT.z, (_233 * _227) * _806));
    float _820 = inversesqrt(dot(vec3(_810, _813, _816), vec3(_810, _813, _816)));
    float _821 = _820 * _810;
    float _822 = _820 * _813;
    float _823 = _820 * _816;
    float _3875 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _824 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3897 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3908 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3919 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _828 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _844 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _894 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _884);
    float _895 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _884);
    float _896 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _884);
    float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
    float _901 = _894 * _900;
    float _902 = _895 * _900;
    float _903 = _896 * _900;
    vec4 _908 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _910 = _908.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1082 = sqrt(((_894 * _894) + (_895 * _895)) + (_896 * _896));
        float _1088 = (cbMatDynParam._m0[5u].x * _1082) + cbMatDynParam._m0[5u].y;
        float _3930 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1093 = (cbMatDynParam._m0[5u].z * _1082) + cbMatDynParam._m0[5u].w;
        float _3941 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) - _1089)) + _1089) < ((_910 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _921 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _922 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _940 = fma(_823, cbSceneParam._m0[5u].z, fma(_822, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _821));
    float _943 = fma(_823, cbSceneParam._m0[6u].z, fma(_822, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _821));
    float _946 = fma(_823, cbSceneParam._m0[7u].z, fma(_822, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _821));
    uint _959 = uint(roundEven(NORMAL.w)) * 13u;
    uint _960 = _959 + 9u;
    uint _961 = _960 + uint(cbMatDynParam._m0[0u].w);
    float _967 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_961].x;
    float _968 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_961].y;
    float _969 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * cbInstanceData._m0[_961].z;
    float _3952 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _973 = 1.0 - _828;
    float _974 = _970 * _973;
    float _975 = _971 * _973;
    float _976 = _972 * _973;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _828;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _828;
    float _983 = (_972 + (-0.039999999105930328369140625)) * _828;
    float _984 = _981 + 0.039999999105930328369140625;
    float _986 = _982 + 0.039999999105930328369140625;
    float _987 = _983 + 0.039999999105930328369140625;
    vec4 _996 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _921, cbSceneParam._m0[86u].y * _922));
    float _999 = _996.x * TEXCOORD_5.w;
    float _1000 = dot(vec3(_821, _822, _823), vec3(_901, _902, _903));
    float _1003 = _1000 * 2.0;
    float _1007 = (_1003 * _821) - _901;
    float _1008 = (_1003 * _822) - _902;
    float _1009 = (_1003 * _823) - _903;
    float _1013 = abs(dot(vec3(_901, _902, _903), vec3(_821, _822, _823)));
    float _3985 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1015 = sqrt(_824);
    float _1028 = exp2((_1015 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1015 * 3.0));
    float _1034 = (1.0 - _1028) * ((_1015 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1035 = _1028 * _1015;
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1401;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1126 = fma(_1071, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063));
        float _1130 = fma(_1071, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063));
        float _1134 = fma(_1071, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063));
        float _1159 = _1063 + _821;
        float _1160 = _1067 + _822;
        float _1161 = _1071 + _823;
        float _1171 = fma(_1161, cbModelParam._m0[26u].z, fma(_1160, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1159)) - _1126;
        float _1172 = fma(_1161, cbModelParam._m0[27u].z, fma(_1160, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1159)) - _1130;
        float _1173 = fma(_1161, cbModelParam._m0[28u].z, fma(_1160, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1159)) - _1134;
        float _1177 = inversesqrt(dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173)));
        float _1190 = ((_1177 * _1171) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1126 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1177 * _1172) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1130 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1177 * _1173) / cbModelParam._m0[34u].z) + ((((((_1134 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        float _1229 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1195.x + (-0.5));
        float _1231 = _1229 * (_1195.y + (-0.5));
        float _1232 = _1229 * (_1195.z + (-0.5));
        float _1239 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1202.x + (-0.5));
        float _1241 = _1239 * (_1202.y + (-0.5));
        float _1242 = _1239 * (_1202.z + (-0.5));
        float _1249 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1209.x + (-0.5));
        float _1251 = _1249 * (_1209.y + (-0.5));
        float _1252 = _1249 * (_1209.z + (-0.5));
        float _1259 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1216.x + (-0.5));
        float _1261 = _1259 * (_1216.y + (-0.5));
        float _1262 = _1259 * (_1216.z + (-0.5));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = _1230 * 0.5;
        float _1267 = _1240 * 0.5;
        float _1268 = _1250 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1283 = (dot(vec3(_821, _822, _823), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1293 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4033 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1295 + 1.0))) + _1300) * _1263;
        float _1310 = _1231 * 0.5;
        float _1311 = _1241 * 0.5;
        float _1312 = _1251 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_821, _822, _823), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4066 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1337 + 1.0))) + _1342) * _1264;
        float _1352 = _1232 * 0.5;
        float _1353 = _1242 * 0.5;
        float _1354 = _1252 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_821, _822, _823), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4099 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1379 + 1.0))) + _1384) * _1265;
        _1401 = _1232;
        _1403 = _1231;
        _1404 = _1230;
        _1405 = _1242;
        _1406 = _1241;
        _1407 = _1240;
        _1408 = _1252;
        _1409 = _1251;
        _1410 = _1250;
        _1411 = _1265;
        _1412 = _1264;
        _1413 = _1263;
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    }
    else
    {
        _1401 = _1402;
        _1403 = _1402;
        _1404 = _1402;
        _1405 = _1402;
        _1406 = _1402;
        _1407 = _1402;
        _1408 = _1402;
        _1409 = _1402;
        _1410 = _1402;
        _1411 = _1402;
        _1412 = _1402;
        _1413 = _1402;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1445 = fma(_1071, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063));
        float _1449 = fma(_1071, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063));
        float _1453 = fma(_1071, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063));
        float _1476 = _1063 + _821;
        float _1477 = _1067 + _822;
        float _1478 = _1071 + _823;
        float _1488 = fma(_1478, cbModelParam._m0[30u].z, fma(_1477, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1476)) - _1445;
        float _1489 = fma(_1478, cbModelParam._m0[31u].z, fma(_1477, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1476)) - _1449;
        float _1490 = fma(_1478, cbModelParam._m0[32u].z, fma(_1477, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1476)) - _1453;
        float _1494 = inversesqrt(dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490)));
        float _1507 = ((_1494 * _1488) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1445 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1494 * _1489) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1449 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1509 = ((_1494 * _1490) / cbModelParam._m0[35u].z) + ((((((_1453 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        float _1544 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1511.x + (-0.5));
        float _1546 = _1544 * (_1511.y + (-0.5));
        float _1547 = _1544 * (_1511.z + (-0.5));
        float _1554 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1518.x + (-0.5));
        float _1556 = _1554 * (_1518.y + (-0.5));
        float _1557 = _1554 * (_1518.z + (-0.5));
        float _1564 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1525.x + (-0.5));
        float _1566 = _1564 * (_1525.y + (-0.5));
        float _1567 = _1564 * (_1525.z + (-0.5));
        float _1574 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1532.x + (-0.5));
        float _1576 = _1574 * (_1532.y + (-0.5));
        float _1577 = _1574 * (_1532.z + (-0.5));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = _1545 * 0.5;
        float _1582 = _1555 * 0.5;
        float _1583 = _1565 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_821, _822, _823), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4162 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1608 + 1.0))) + _1613) * _1578;
        float _1623 = _1546 * 0.5;
        float _1624 = _1556 * 0.5;
        float _1625 = _1566 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_821, _822, _823), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4195 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1650 + 1.0))) + _1655) * _1579;
        float _1665 = _1547 * 0.5;
        float _1666 = _1557 * 0.5;
        float _1667 = _1567 * 0.5;
        float _1668 = dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667));
        float _1673 = (_1668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1668);
        float _1681 = (dot(vec3(_821, _822, _823), vec3(_1673 * _1665, _1673 * _1666, _1673 * _1667)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1690 = sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1692 = _1691 * 2.0;
        float _1696 = (1.0 - _1691) / (_1691 + 1.0);
        float _4228 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1706 = ((((1.0 - _1697) * (_1692 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1692 + 1.0))) + _1697) * _1580;
        _1714 = _1547;
        _1715 = _1546;
        _1716 = _1545;
        _1717 = _1557;
        _1718 = _1556;
        _1719 = _1555;
        _1720 = _1567;
        _1721 = _1566;
        _1722 = _1565;
        _1723 = _1580;
        _1724 = _1579;
        _1725 = _1578;
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)));
    }
    else
    {
        _1714 = _1402;
        _1715 = _1402;
        _1716 = _1402;
        _1717 = _1402;
        _1718 = _1402;
        _1719 = _1402;
        _1720 = _1402;
        _1721 = _1402;
        _1722 = _1402;
        _1723 = _1402;
        _1724 = _1402;
        _1725 = _1402;
        _1726 = 0.0;
        _1727 = 0.0;
        _1728 = 0.0;
    }
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1414)) + _1414;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1415)) + _1415;
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1416)) + _1416;
    float _1761 = fma(_1740, cbSceneParam._m0[89u].z, fma(_1739, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1764 = fma(_1740, cbSceneParam._m0[90u].z, fma(_1739, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1767 = fma(_1740, cbSceneParam._m0[91u].z, fma(_1739, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1738));
    float _1782 = _1007 * 0.5;
    float _1783 = _1008 * 0.5;
    float _1784 = _1009 * 0.5;
    float _1785 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1788 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1791 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1825;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1798 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1401, _1405, _1408, _1411));
        float _1802 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1806 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1404, _1407, _1410, _1413));
        float _1813 = dot(vec4(cbModelParam._m0[39u]), vec4(_1782, _1783, _1784, 1.0));
        _1825 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1825 = 1.0;
    }
    float _1836;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1827 = dot(vec4(cbModelParam._m0[40u]), vec4(_1782, _1783, _1784, 1.0));
        _1836 = dot(vec3(isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1827) ? 0.0 : (isnan(0.0) ? _1827 : max(0.0, _1827))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1836 = 1.0;
    }
    float _1840 = (_1836 * cbModelParam._m0[1u].x) + (_1825 * (1.0 - cbModelParam._m0[1u].x));
    float _1850 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _824);
    float _1851 = isnan(_1850) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1850 : min(cbModelParam._m0[25u].z, _1850));
    float _1931;
    float _1933;
    float _1935;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1898 = fma(_1071, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063)) + cbModelParam._m0[13u].w;
        float _1902 = fma(_1071, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063)) + cbModelParam._m0[14u].w;
        float _1906 = fma(_1071, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063)) + cbModelParam._m0[15u].w;
        float _1909 = fma(_1009, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007));
        float _1912 = fma(_1009, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007));
        float _1915 = fma(_1009, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007));
        float _1943;
        if (_1909 > 0.0)
        {
            _1943 = abs((1.0 - _1898) / _1909);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1898 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1943 = frontier_phi_17_15_ladder;
        }
        float _2167;
        if (_1912 > 0.0)
        {
            _2167 = abs((1.0 - _1902) / _1912);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1902 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2167 = frontier_phi_26_22_ladder;
        }
        float _2424;
        if (_1915 > 0.0)
        {
            _2424 = abs((1.0 - _1906) / _1915);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1906 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2424 = frontier_phi_38_33_ladder;
        }
        float _2426 = isnan(_2167) ? _1943 : (isnan(_1943) ? _2167 : min(_1943, _2167));
        float _2427 = isnan(_2424) ? _2426 : (isnan(_2426) ? _2424 : min(_2426, _2424));
        float _2431 = (_2427 * _1909) + _1898;
        float _2432 = (_2427 * _1912) + _1902;
        float _2433 = (_2427 * _1915) + _1906;
        float _2434 = _2427 * 9.9999997473787516355514526367188e-05;
        float _2436 = (-1.0) - _2434;
        float _2438 = _2434 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2433 > _2438) || ((_2433 < _2436) || ((_2432 > _2438) || ((_2432 < _2436) || ((_2431 < _2436) || (_2431 > _2438))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2433, cbModelParam._m0[9u].z, fma(_2432, cbModelParam._m0[9u].y, _2431 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2433, cbModelParam._m0[10u].z, fma(_2432, cbModelParam._m0[10u].y, _2431 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2433, cbModelParam._m0[11u].z, fma(_2432, cbModelParam._m0[11u].y, _2431 * cbModelParam._m0[11u].x))), _1851);
            frontier_phi_16_38_ladder = _2561.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2561.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2561.x * cbModelParam._m0[1u].y;
        }
        _1931 = frontier_phi_16_38_ladder_2;
        _1933 = frontier_phi_16_38_ladder_1;
        _1935 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1919 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1007, _1008, _1009), _1851);
        _1931 = _1919.x * cbModelParam._m0[1u].y;
        _1933 = _1919.y * cbModelParam._m0[1u].y;
        _1935 = _1919.z * cbModelParam._m0[1u].y;
    }
    float _1939 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _824);
    float _1940 = isnan(_1939) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1939 : min(cbModelParam._m0[25u].w, _1939));
    float _2029;
    float _2031;
    float _2033;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1993 = fma(_1071, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063)) + cbModelParam._m0[21u].w;
        float _1997 = fma(_1071, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063)) + cbModelParam._m0[22u].w;
        float _2001 = fma(_1071, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063)) + cbModelParam._m0[23u].w;
        float _2004 = fma(_1009, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007));
        float _2007 = fma(_1009, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007));
        float _2010 = fma(_1009, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007));
        float _2172;
        if (_2004 > 0.0)
        {
            _2172 = abs((1.0 - _1993) / _2004);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1993 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2172 = frontier_phi_28_24_ladder;
        }
        float _2451;
        if (_2007 > 0.0)
        {
            _2451 = abs((1.0 - _1997) / _2007);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1997 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2451 = frontier_phi_40_35_ladder;
        }
        float _2664;
        if (_2010 > 0.0)
        {
            _2664 = abs((1.0 - _2001) / _2010);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2001 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2664 = frontier_phi_49_46_ladder;
        }
        float _2666 = isnan(_2451) ? _2172 : (isnan(_2172) ? _2451 : min(_2172, _2451));
        float _2667 = isnan(_2664) ? _2666 : (isnan(_2666) ? _2664 : min(_2666, _2664));
        float _2671 = (_2667 * _2004) + _1993;
        float _2672 = (_2667 * _2007) + _1997;
        float _2673 = (_2667 * _2010) + _2001;
        float _2674 = _2667 * 9.9999997473787516355514526367188e-05;
        float _2675 = (-1.0) - _2674;
        float _2677 = _2674 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2673 > _2677) || ((_2673 < _2675) || ((_2672 > _2677) || ((_2672 < _2675) || ((_2671 < _2675) || (_2671 > _2677))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2673, cbModelParam._m0[17u].z, fma(_2672, cbModelParam._m0[17u].y, _2671 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2673, cbModelParam._m0[18u].z, fma(_2672, cbModelParam._m0[18u].y, _2671 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2673, cbModelParam._m0[19u].z, fma(_2672, cbModelParam._m0[19u].y, _2671 * cbModelParam._m0[19u].x))), _1940);
            frontier_phi_25_49_ladder = _2872.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2872.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2872.x * cbModelParam._m0[1u].z;
        }
        _2029 = frontier_phi_25_49_ladder_2;
        _2031 = frontier_phi_25_49_ladder_1;
        _2033 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2013 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1007, _1008, _1009), _1940);
        _2029 = _2013.x * cbModelParam._m0[1u].z;
        _2031 = _2013.y * cbModelParam._m0[1u].z;
        _2033 = _2013.z * cbModelParam._m0[1u].z;
    }
    float _2046 = (((_1034 * _984) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2029 - _1931)) + _1931);
    float _2048 = (((_1034 * _986) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2031 - _1933)) + _1933);
    float _2050 = (((_1034 * _987) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2033 - _1935)) + _1935);
    float _2053 = fma(_2050, cbSceneParam._m0[89u].z, fma(_2048, cbSceneParam._m0[89u].y, _2046 * cbSceneParam._m0[89u].x));
    float _2056 = fma(_2050, cbSceneParam._m0[90u].z, fma(_2048, cbSceneParam._m0[90u].y, _2046 * cbSceneParam._m0[90u].x));
    float _2059 = fma(_2050, cbSceneParam._m0[91u].z, fma(_2048, cbSceneParam._m0[91u].y, _2046 * cbSceneParam._m0[91u].x));
    vec4 _2067 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_921, _922));
    float _2069 = _2067.w;
    float _2081 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2069);
    float _2082 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2069);
    float _2083 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2069);
    uvec4 _2087 = floatBitsToUint(cbInstanceData._m0[_959 + 5u]);
    uint _2089 = _2087.x * 14u;
    uint _2090 = _2089 + 13u;
    float _2097 = _999 + (-1.0);
    float _2102 = (cbLight._m0[_2090].x * _2097) + 1.0;
    float _2103 = (cbLight._m0[_2090].y * _2097) + 1.0;
    float _2104 = (cbLight._m0[_2090].z * _2097) + 1.0;
    float _2105 = (cbLight._m0[_2090].w * _2097) + 1.0;
    uint _2106 = _2089 + 5u;
    float _2112 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2116 = _2089 + 4u;
    float _2126 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
    uint _2130 = _2089 | 1u;
    float _2141 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_821, _822, _823));
    float _2144 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_821, _822, _823));
    float _4364 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _4375 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2149 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * 0.3183098733425140380859375;
    float _2151 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * 0.3183098733425140380859375;
    float _2158 = ((cbLight._m0[_2106].x * _2112) * _2151) + (((cbLight._m0[_2116].x * _2081) * _2126) * _2149);
    float _2159 = ((_2112 * cbLight._m0[_2106].y) * _2151) + (((cbLight._m0[_2116].y * _2082) * _2126) * _2149);
    float _2160 = ((_2112 * cbLight._m0[_2106].z) * _2151) + (((cbLight._m0[_2116].z * _2083) * _2126) * _2149);
    uvec4 _2164 = floatBitsToUint(cbLight._m0[_2089 + 12u]);
    bool _2166 = _2164.x == 0u;
    float _2177;
    float _2179;
    float _2181;
    if (_2166)
    {
        _2177 = _2158;
        _2179 = _2159;
        _2181 = _2160;
    }
    else
    {
        uint _2185 = _2089 + 6u;
        float _2201 = (dot(vec3(cbLight._m0[_2089 + 2u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2202 = _2201 * _2201;
        float _4386 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2203 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2204 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2177 = (((cbLight._m0[_2185].x * 0.3183098733425140380859375) * _2203) * _2204) + _2158;
        _2179 = (((cbLight._m0[_2185].y * 0.3183098733425140380859375) * _2203) * _2204) + _2159;
        _2181 = (((cbLight._m0[_2185].z * 0.3183098733425140380859375) * _2203) * _2204) + _2160;
    }
    bool _2184 = _2164.y == 0u;
    float _2222;
    float _2224;
    float _2226;
    if (_2184)
    {
        _2222 = _2177;
        _2224 = _2179;
        _2226 = _2181;
    }
    else
    {
        uint _2395 = _2089 + 7u;
        float _2411 = (dot(vec3(cbLight._m0[_2089 + 3u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2412 = _2411 * _2411;
        float _4402 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2413 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2414 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2222 = (((cbLight._m0[_2395].x * 0.3183098733425140380859375) * _2413) * _2414) + _2177;
        _2224 = (((cbLight._m0[_2395].y * 0.3183098733425140380859375) * _2413) * _2414) + _2179;
        _2226 = (((cbLight._m0[_2395].z * 0.3183098733425140380859375) * _2413) * _2414) + _2181;
    }
    uint _2229 = _2089 + 8u;
    float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _824) * 0.949999988079071044921875);
    float _2243 = _2242 * _2242;
    float _2244 = cbLight._m0[_2089].x + _901;
    float _2245 = cbLight._m0[_2089].y + _902;
    float _2246 = cbLight._m0[_2089].z + _903;
    float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
    float _2251 = _2250 * _2244;
    float _2252 = _2250 * _2245;
    float _2253 = _2250 * _2246;
    float _2254 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2089].xyz));
    float _4418 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _4429 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _2258 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2259 = dot(vec3(_821, _822, _823), vec3(_2251, _2252, _2253));
    float _4440 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2263 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2251, _2252, _2253));
    float _4451 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2267 = _2243 * _2243;
    float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
    float _2279 = exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0);
    float _2280 = 0.959999978542327880859375 - _981;
    float _2282 = 0.959999978542327880859375 - _982;
    float _2283 = 0.959999978542327880859375 - _983;
    float _2290 = 1.0 - _2243;
    float _2301 = (0.5 / (((_2258 * ((_2257 * _2290) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2290) + _2243) * _2257))) * _2257;
    float _4462 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2303 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
    uint _2317 = _2089 + 9u;
    float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _824) * 0.949999988079071044921875);
    float _2329 = _2328 * _2328;
    float _2330 = cbLight._m0[_2130].x + _901;
    float _2331 = cbLight._m0[_2130].y + _902;
    float _2332 = cbLight._m0[_2130].z + _903;
    float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
    float _2337 = _2336 * _2330;
    float _2338 = _2336 * _2331;
    float _2339 = _2336 * _2332;
    float _2340 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2130].xyz));
    float _4473 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2344 = dot(vec3(_821, _822, _823), vec3(_2337, _2338, _2339));
    float _4484 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2348 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2337, _2338, _2339));
    float _4495 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2352 = _2329 * _2329;
    float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
    float _2363 = exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0);
    float _2370 = 1.0 - _2329;
    float _2380 = (0.5 / (((_2258 * ((_2343 * _2370) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2370) + _2329) * _2343))) * _2343;
    float _4506 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2382 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
    float _2392 = (((((_2363 * _2280) + _984) * cbLight._m0[_2317].x) * _2382) * _2112) + ((((cbLight._m0[_2229].x * _2081) * ((_2279 * _2280) + _984)) * _2303) * _2126);
    float _2393 = (((((_2363 * _2282) + _986) * cbLight._m0[_2317].y) * _2382) * _2112) + ((((cbLight._m0[_2229].y * _2082) * ((_2279 * _2282) + _986)) * _2303) * _2126);
    float _2394 = (((((_2363 * _2283) + _987) * cbLight._m0[_2317].z) * _2382) * _2112) + ((((cbLight._m0[_2229].z * _2083) * ((_2279 * _2283) + _987)) * _2303) * _2126);
    float _2456;
    float _2458;
    float _2460;
    if (_2166)
    {
        _2456 = _2392;
        _2458 = _2393;
        _2460 = _2394;
    }
    else
    {
        uint _2462 = _2089 + 2u;
        uint _2466 = _2089 + 10u;
        float _2480 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2462].w)) * _824) * 0.949999988079071044921875);
        float _2481 = _2480 * _2480;
        float _2482 = cbLight._m0[_2462].x + _901;
        float _2483 = cbLight._m0[_2462].y + _902;
        float _2484 = cbLight._m0[_2462].z + _903;
        float _2488 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
        float _2489 = _2488 * _2482;
        float _2490 = _2488 * _2483;
        float _2491 = _2488 * _2484;
        float _2492 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2462].xyz));
        float _4517 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2496 = dot(vec3(_821, _822, _823), vec3(_2489, _2490, _2491));
        float _4528 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2499 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2500 = dot(vec3(cbLight._m0[_2462].xyz), vec3(_2489, _2490, _2491));
        float _4539 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2504 = _2481 * _2481;
        float _2508 = ((_2499 * _2499) * (_2504 + (-1.0))) + 1.0;
        float _2515 = exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0);
        float _2522 = 1.0 - _2481;
        float _2532 = (0.5 / (((_2258 * ((_2495 * _2522) + _2481)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2522) + _2481) * _2495))) * _2495;
        float _4550 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2534 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2504 / ((_2508 * _2508) * 3.141590118408203125));
        float _2535 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2456 = (((((_2515 * _2280) + _984) * cbLight._m0[_2466].x) * _2534) * _2535) + _2392;
        _2458 = (((((_2515 * _2282) + _986) * cbLight._m0[_2466].y) * _2534) * _2535) + _2393;
        _2460 = (((((_2515 * _2283) + _987) * cbLight._m0[_2466].z) * _2534) * _2535) + _2394;
    }
    float _2570;
    float _2572;
    float _2574;
    if (_2184)
    {
        _2570 = _2456;
        _2572 = _2458;
        _2574 = _2460;
    }
    else
    {
        uint _2581 = _2089 + 3u;
        uint _2585 = _2089 + 11u;
        float _2599 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2581].w)) * _824) * 0.949999988079071044921875);
        float _2600 = _2599 * _2599;
        float _2601 = cbLight._m0[_2581].x + _901;
        float _2602 = cbLight._m0[_2581].y + _902;
        float _2603 = cbLight._m0[_2581].z + _903;
        float _2607 = inversesqrt(dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603)));
        float _2608 = _2607 * _2601;
        float _2609 = _2607 * _2602;
        float _2610 = _2607 * _2603;
        float _2611 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2581].xyz));
        float _4566 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2614 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2615 = dot(vec3(_821, _822, _823), vec3(_2608, _2609, _2610));
        float _4577 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2619 = dot(vec3(cbLight._m0[_2581].xyz), vec3(_2608, _2609, _2610));
        float _4588 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2623 = _2600 * _2600;
        float _2627 = ((_2618 * _2618) * (_2623 + (-1.0))) + 1.0;
        float _2634 = exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0);
        float _2641 = 1.0 - _2600;
        float _2651 = (0.5 / (((_2258 * ((_2614 * _2641) + _2600)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2641) + _2600) * _2614))) * _2614;
        float _4599 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2653 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2623 / ((_2627 * _2627) * 3.141590118408203125));
        float _2654 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2570 = (((((_2634 * _2280) + _984) * cbLight._m0[_2585].x) * _2653) * _2654) + _2456;
        _2572 = (((((_2634 * _2282) + _986) * cbLight._m0[_2585].y) * _2653) * _2654) + _2458;
        _2574 = (((((_2634 * _2283) + _987) * cbLight._m0[_2585].z) * _2653) * _2654) + _2460;
    }
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    if (_2087.y == 0u)
    {
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2729;
        float _2731 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2729;
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2729;
        uvec4 _2744 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2745 = _2744.x;
        uint _2756 = uint((float(_2744.y) * floor(float(uint(cbSceneParam._m0[85u].y * _922) / _2745))) + floor(float(uint(cbSceneParam._m0[85u].x * _921) / _2745)));
        float _2766 = (log2(_2732 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2767 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        uint _2770 = uint(isnan(14.0) ? _2767 : (isnan(_2767) ? 14.0 : min(_2767, 14.0)));
        uvec4 _2775 = texelFetch(g_lightClusterGridBuffer, int(((_2770 << 2u) + (_2756 << 6u)) >> 2u));
        uint _2776 = _2775.x;
        uint _2777 = _2744.z;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        if (((((1u << ((_2777 >> 4u) & 15u)) + 4294967295u) & _2776) == 0u) || ((_2777 & 240u) == 0u))
        {
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
        }
        else
        {
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            uint _3036 = 0u;
            uint _3045;
            bool _3046;
            for (;;)
            {
                _3045 = texelFetch(g_lightClassification, int((((_2770 << 5u) + (_2756 << 9u)) + (_3036 << 2u)) >> 2u)).x;
                _3046 = _3045 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3046)
                {
                    frontier_phi_66_pred = _3030;
                    frontier_phi_66_pred_1 = _3035;
                    frontier_phi_66_pred_2 = _3034;
                    frontier_phi_66_pred_3 = _3033;
                    frontier_phi_66_pred_4 = _3032;
                    frontier_phi_66_pred_5 = _3031;
                }
                else
                {
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    uint _3181;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3035;
                    _3181 = _3045;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    for (;;)
                    {
                        uint _3185 = uint(findLSB(_3181)) + (_3036 << 5u);
                        uint _3182 = (_3181 + 4294967295u) & _3181;
                        uint _3187 = _3185 * 48u;
                        vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 3u)).x));
                        uint _3207 = (_3185 * 48u) + 4u;
                        vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3207)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 3u)).x));
                        uint _3226 = (_3185 * 48u) + 8u;
                        vec3 _3237 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x));
                        float _3241 = _3201.x - _2730;
                        float _3242 = _3201.y - _2731;
                        float _3243 = _3201.z - _2732;
                        float _3244 = dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243));
                        float _3247 = inversesqrt(_3244);
                        float _3248 = _3247 * _3241;
                        float _3249 = _3247 * _3242;
                        float _3250 = _3247 * _3243;
                        float _3251 = dot(vec3(_940, _943, _946), vec3(_3248, _3249, _3250));
                        float _3256 = 1.0 - (_3244 * _3201.w);
                        float _4625 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3257 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3258 = sqrt(_3244) * _3220.w;
                        float _3261 = 1.39999997615814208984375 / (_3258 + 1.39999997615814208984375);
                        float _3262 = _3261 * _3261;
                        float _3265 = ((1.0 - _3262) * _3251) + _3262;
                        float _3268 = _3258 * _3258;
                        float _3272 = ((isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))) * _3257) / ((_3268 * 0.699999988079071044921875) + 1.0);
                        float _3276 = (-0.0) - _2730;
                        float _3277 = (-0.0) - _2731;
                        float _3278 = (-0.0) - _2732;
                        float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                        float _3283 = _3282 * _3276;
                        float _3284 = _3282 * _3277;
                        float _3285 = _3282 * _3278;
                        float _3293 = exp2(log2(1.0 / ((_3268 * 3.5) + 5.0)) * 0.25);
                        float _3294 = 1.0 - _1015;
                        float _3301 = sqrt(1.0 - ((1.0 - (_3294 * _3294)) * (1.0 - (_3293 * _3293))));
                        float _3302 = _3301 * _3301;
                        float _3303 = _3302 * _3302;
                        float _3304 = _3283 + _3248;
                        float _3305 = _3284 + _3249;
                        float _3306 = _3285 + _3250;
                        float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                        float _3314 = dot(vec3(_940, _943, _946), vec3(_3283, _3284, _3285));
                        float _4641 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3317 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3318 = dot(vec3(_940, _943, _946), vec3(_3310 * _3304, _3310 * _3305, _3310 * _3306));
                        float _4652 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3321 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3325 = ((_3321 * _3321) * (_3303 + (-1.0))) + 1.0;
                        float _3326 = _3261 * _3302;
                        float _3327 = _3326 * _3326;
                        float _3330 = ((1.0 - _3327) * _3251) + _3327;
                        float _4663 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3331 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3332 = 1.0 - _3302;
                        float _3342 = (0.5 / (((_3331 * ((_3317 * _3332) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_3331 * _3332) + _3302) * _3317))) * _3331;
                        float _4674 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3353 = (((_3303 * 3.1415927410125732421875) * (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) / ((_3325 * _3325) * ((_3268 * 2.1991131305694580078125) + 3.141590118408203125))) * _3257;
                        _3105 = (_3272 * _3220.x) + _3178;
                        _3106 = (_3272 * _3220.y) + _3179;
                        _3107 = (_3272 * _3220.z) + _3180;
                        _3102 = (_3353 * _3237.x) + _3175;
                        _3103 = (_3353 * _3237.y) + _3176;
                        _3104 = (_3353 * _3237.z) + _3177;
                        if (_3182 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3107;
                            _3181 = _3182;
                        }
                    }
                    frontier_phi_66_pred = _3102;
                    frontier_phi_66_pred_1 = _3107;
                    frontier_phi_66_pred_2 = _3106;
                    frontier_phi_66_pred_3 = _3105;
                    frontier_phi_66_pred_4 = _3104;
                    frontier_phi_66_pred_5 = _3103;
                }
                _2878 = frontier_phi_66_pred;
                _2888 = frontier_phi_66_pred_1;
                _2886 = frontier_phi_66_pred_2;
                _2884 = frontier_phi_66_pred_3;
                _2882 = frontier_phi_66_pred_4;
                _2880 = frontier_phi_66_pred_5;
                uint _3037 = _3036 + 1u;
                if (_3037 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3030 = _2878;
                    _3031 = _2880;
                    _3032 = _2882;
                    _3033 = _2884;
                    _3034 = _2886;
                    _3035 = _2888;
                    _3036 = _3037;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
        }
        uvec4 _2891 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2892 = _2891.z;
        uint _2894 = (_2892 >> 8u) & 15u;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        if (((4294967295u << _2894) & _2776) == 0u)
        {
            _2998 = _2877;
            _3000 = _2879;
            _3002 = _2881;
            _3004 = _2883;
            _3006 = _2885;
            _3008 = _2887;
        }
        else
        {
            float _3023 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
            float _3024 = _3023 * _2730;
            float _3025 = _3023 * _2731;
            float _3026 = _3023 * _2732;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2894 < ((_2892 >> 12u) & 15u))
            {
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3158 = _2877;
                float _3159 = _2879;
                float _3160 = _2881;
                float _3161 = _2883;
                float _3162 = _2885;
                float _3163 = _2887;
                uint _3164 = _2894;
                uint _3173;
                bool _3174;
                for (;;)
                {
                    _3173 = texelFetch(g_lightClassification, int((((_2770 << 5u) + (_2756 << 9u)) + (_3164 << 2u)) >> 2u)).x;
                    _3174 = _3173 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3174)
                    {
                        frontier_phi_77_pred = _3163;
                        frontier_phi_77_pred_1 = _3162;
                        frontier_phi_77_pred_2 = _3161;
                        frontier_phi_77_pred_3 = _3160;
                        frontier_phi_77_pred_4 = _3159;
                        frontier_phi_77_pred_5 = _3158;
                    }
                    else
                    {
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3380 = _3158;
                        float _3381 = _3159;
                        float _3382 = _3160;
                        float _3383 = _3161;
                        float _3384 = _3162;
                        float _3385 = _3163;
                        uint _3386 = _3173;
                        uint _3387;
                        vec4 _3412;
                        float _3413;
                        vec4 _3428;
                        vec3 _3440;
                        vec4 _3455;
                        vec4 _3470;
                        float _3517;
                        bool _3518;
                        for (;;)
                        {
                            uint _3397 = ((_3164 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3386));
                            _3387 = (_3386 + 4294967295u) & _3386;
                            uint _3399 = _3397 * 40u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            _3413 = _3412.w;
                            uint _3415 = (_3397 * 40u) + 4u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3430 = (_3397 * 40u) + 8u;
                            _3440 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x));
                            uint _3442 = (_3397 * 40u) + 16u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3457 = (_3397 * 40u) + 20u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3473 = (_3397 * 40u) + 24u;
                            vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3492 = (_3397 * 40u) + 28u;
                            vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            _3517 = fma(_2732, _3505.z, fma(_2731, _3505.y, _3505.x * _2730)) + _3505.w;
                            _3518 = !((fma(_2732, _3486.z, fma(_2731, _3486.y, _3486.x * _2730)) + _3486.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3518)
                            {
                                float _3545 = _3412.x - _2730;
                                float _3546 = _3412.y - _2731;
                                float _3547 = _3412.z - _2732;
                                float _3548 = dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547));
                                float _3551 = inversesqrt(_3548);
                                float _3552 = _3551 * _3545;
                                float _3553 = _3551 * _3546;
                                float _3554 = _3551 * _3547;
                                float _3558 = 1.0 - (_3548 / (_3413 * _3413));
                                float _4685 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3559 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3563 = sqrt(_3548) * _3428.w;
                                float _3565 = 1.39999997615814208984375 / (_3563 + 1.39999997615814208984375);
                                float _3566 = _3565 * _3565;
                                float _3569 = ((1.0 - _3566) * dot(vec3(_3552, _3553, _3554), vec3(_940, _943, _946))) + _3566;
                                float _3572 = _3563 * _3563;
                                float _3576 = (fma(_2732, _3455.z, fma(_2731, _3455.y, _3455.x * _2730)) + _3455.w) / _3517;
                                float _3577 = (fma(_2732, _3470.z, fma(_2731, _3470.y, _3470.x * _2730)) + _3470.w) / _3517;
                                float _3581 = 1.0 - dot(vec2(_3576, _3577), vec2(_3576, _3577));
                                float _4701 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3583 = _3582 * (((isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0))) * _3559) / ((_3572 * 0.699999988079071044921875) + 1.0));
                                float _3595 = exp2(log2(1.0 / ((_3572 * 3.5) + 5.0)) * 0.25);
                                float _3596 = 1.0 - _1015;
                                float _3603 = sqrt(1.0 - ((1.0 - (_3596 * _3596)) * (1.0 - (_3595 * _3595))));
                                float _3604 = _3603 * _3603;
                                float _3605 = _3604 * _3604;
                                float _3606 = _3552 - _3024;
                                float _3607 = _3553 - _3025;
                                float _3608 = _3554 - _3026;
                                float _3612 = inversesqrt(dot(vec3(_3606, _3607, _3608), vec3(_3606, _3607, _3608)));
                                float _3616 = dot(vec3(_940, _943, _946), vec3((-0.0) - _3024, (-0.0) - _3025, (-0.0) - _3026));
                                float _4712 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3619 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3620 = dot(vec3(_940, _943, _946), vec3(_3612 * _3606, _3612 * _3607, _3612 * _3608));
                                float _4723 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3623 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3627 = ((_3623 * _3623) * (_3605 + (-1.0))) + 1.0;
                                float _3628 = _3565 * _3604;
                                float _3629 = _3628 * _3628;
                                float _3635 = ((1.0 - _3629) * dot(vec3(_940, _943, _946), vec3(_3552, _3553, _3554))) + _3629;
                                float _4734 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3637 = 1.0 - _3604;
                                float _3647 = (0.5 / (((_3636 * ((_3619 * _3637) + _3604)) + 9.9999999392252902907785028219223e-09) + (((_3636 * _3637) + _3604) * _3619))) * _3636;
                                float _4745 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3657 = (_3582 * _3559) * (((_3605 * 3.1415927410125732421875) * (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) / ((_3627 * _3627) * ((_3572 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3583 * _3428.y;
                                frontier_phi_83_pred_1 = _3583 * _3428.x;
                                frontier_phi_83_pred_2 = _3657 * _3440.z;
                                frontier_phi_83_pred_3 = _3657 * _3440.y;
                                frontier_phi_83_pred_4 = _3657 * _3440.x;
                                frontier_phi_83_pred_5 = _3583 * _3428.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3665 = frontier_phi_83_pred;
                            _3664 = frontier_phi_83_pred_1;
                            _3663 = frontier_phi_83_pred_2;
                            _3662 = frontier_phi_83_pred_3;
                            _3661 = frontier_phi_83_pred_4;
                            _3666 = frontier_phi_83_pred_5;
                            _3370 = _3664 + _3383;
                            _3371 = _3665 + _3384;
                            _3372 = _3666 + _3385;
                            _3367 = _3661 + _3380;
                            _3368 = _3662 + _3381;
                            _3369 = _3663 + _3382;
                            if (_3387 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3387;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3372;
                        frontier_phi_77_pred_1 = _3371;
                        frontier_phi_77_pred_2 = _3370;
                        frontier_phi_77_pred_3 = _3369;
                        frontier_phi_77_pred_4 = _3368;
                        frontier_phi_77_pred_5 = _3367;
                    }
                    _3009 = frontier_phi_77_pred;
                    _3007 = frontier_phi_77_pred_1;
                    _3005 = frontier_phi_77_pred_2;
                    _3003 = frontier_phi_77_pred_3;
                    _3001 = frontier_phi_77_pred_4;
                    _2999 = frontier_phi_77_pred_5;
                    uint _3165 = _3164 + 1u;
                    if (_3165 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3158 = _2999;
                        _3159 = _3001;
                        _3160 = _3003;
                        _3161 = _3005;
                        _3162 = _3007;
                        _3163 = _3009;
                        _3164 = _3165;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3003;
                frontier_phi_58_59_ladder_1 = _3009;
                frontier_phi_58_59_ladder_2 = _3007;
                frontier_phi_58_59_ladder_3 = _3005;
                frontier_phi_58_59_ladder_4 = _3001;
                frontier_phi_58_59_ladder_5 = _2999;
            }
            else
            {
                frontier_phi_58_59_ladder = _2881;
                frontier_phi_58_59_ladder_1 = _2887;
                frontier_phi_58_59_ladder_2 = _2885;
                frontier_phi_58_59_ladder_3 = _2883;
                frontier_phi_58_59_ladder_4 = _2879;
                frontier_phi_58_59_ladder_5 = _2877;
            }
            _2998 = frontier_phi_58_59_ladder_5;
            _3000 = frontier_phi_58_59_ladder_4;
            _3002 = frontier_phi_58_59_ladder;
            _3004 = frontier_phi_58_59_ladder_3;
            _3006 = frontier_phi_58_59_ladder_2;
            _3008 = frontier_phi_58_59_ladder_1;
        }
        float _3013 = isnan(1.0) ? _999 : (isnan(_999) ? 1.0 : min(_999, 1.0));
        _2789 = (_3013 * _3004) + _2222;
        _2791 = (_3013 * _3006) + _2224;
        _2793 = (_3013 * _3008) + _2226;
        _2795 = ((_2998 * _984) * _3013) + _2570;
        _2797 = ((_3000 * _986) * _3013) + _2572;
        _2799 = ((_3002 * _987) * _3013) + _2574;
    }
    else
    {
        _2789 = _2222;
        _2791 = _2224;
        _2793 = _2226;
        _2795 = _2570;
        _2797 = _2572;
        _2799 = _2574;
    }
    float _4761 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4772 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _4783 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _2816 = ((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2789 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _999))) + ((_2795 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    float _2817 = ((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2791 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _999))) + ((_2797 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    float _2818 = ((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2793 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _999))) + ((_2799 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    uint _2819 = _959 + 6u;
    float _2827 = _921 / cbSceneParam._m0[86u].x;
    float _2828 = _922 / cbSceneParam._m0[86u].y;
    vec4 _2842 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, (log2((isnan(cbSceneParam._m0[77u].w) ? _844 : (isnan(_844) ? cbSceneParam._m0[77u].w : min(_844, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2844 = _2842.x;
    float _2845 = _2842.y;
    float _2846 = _2842.z;
    float _2847 = _2842.w;
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    if (_844 > cbSceneParam._m0[78u].w)
    {
        float _2902 = isnan(_844) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _844 : min(cbSceneParam._m0[80u].w, _844));
        float _2903 = _2902 / _844;
        float _2914 = _2903 * _894;
        float _2915 = _895 * _2903;
        float _2916 = (-0.0) - _2915;
        float _2918 = _2903 * _896;
        float _2920 = (cbSceneParam._m0[77u].w * _2916) / _2902;
        float _2921 = _2920 + cbSceneParam._m0[79u].w;
        float _2922 = cbSceneParam._m0[79u].w - _2915;
        float _2928 = sqrt(((_2914 * _2914) + (_2915 * _2915)) + (_2918 * _2918));
        float _2931 = (1.0 - (cbSceneParam._m0[77u].w / _2902)) * _2928;
        float _2936 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2938 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3115;
        if (abs((_2916 - _2920) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3115 = ((((_2921 > 0.0) ? exp2(_2936 * _2921) : (2.0 - exp2(_2938 * _2921))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2931;
        }
        else
        {
            float _3059 = 1.0 / cbSceneParam._m0[80u].x;
            float _3060 = isnan(_2922) ? _2921 : (isnan(_2921) ? _2922 : max(_2921, _2922));
            float _3061 = isnan(_2922) ? _2921 : (isnan(_2921) ? _2922 : min(_2921, _2922));
            float _3070 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : min(_3060, 0.0));
            float _3071 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : min(_3061, 0.0));
            _3115 = ((abs(_2928 / _2916) * cbSceneParam._m0[80u].y) * ((((_3070 - _3071) * 2.0) - ((exp2(_2936 * (isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0)))) - exp2(_2936 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))))) * _3059)) - ((exp2(_2938 * _3070) - exp2(_2938 * _3071)) * _3059))) + (_2931 * cbSceneParam._m0[80u].z);
        }
        vec4 _3117 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, 1.0), 0.0);
        float _3126 = exp2((_3115 * (-1.44269502162933349609375)) * (1.0 - _3117.w));
        float _3127 = log2(_3126);
        float _3143 = log2(_2847);
        _2940 = (exp2(_3143 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3127 * cbSceneParam._m0[78u].x)) * _3117.x) / cbSceneParam._m0[78u].x)) + _2844;
        _2942 = (exp2(_3143 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3127 * cbSceneParam._m0[78u].y)) * _3117.y) / cbSceneParam._m0[78u].y)) + _2845;
        _2944 = (exp2(_3143 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3127 * cbSceneParam._m0[78u].z)) * _3117.z) / cbSceneParam._m0[78u].z)) + _2846;
        _2946 = _3126 * _2847;
    }
    else
    {
        _2940 = _2844;
        _2942 = _2845;
        _2944 = _2846;
        _2946 = _2847;
    }
    bool _3153;
    vec4 _2956;
    vec4 _2978;
    float _2980;
    float _2984;
    float _2985;
    float _2986;
    float _2987;
    bool _2997;
    for (;;)
    {
        _2956 = cbMatDynParam._m0[0u];
        float _2958 = roundEven(_2956.y);
        bool _2959 = _2958 == 3.0;
        float _2960 = log2(_2946);
        float _2967 = exp2(_2960 * cbSceneParam._m0[78u].x) * _2816;
        float _2968 = exp2(_2960 * cbSceneParam._m0[78u].y) * _2817;
        float _2969 = exp2(_2960 * cbSceneParam._m0[78u].z) * _2818;
        float _2976 = _910 + (-0.5);
        _2978 = cbMtdParam._m0[1u];
        _2980 = _2978.y * _2976;
        float _2983 = (_2958 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2984 = _2983 * (_2959 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2940)));
        _2985 = _2983 * (_2959 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2942)));
        _2986 = _2983 * (_2959 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2944)));
        _2987 = _2976 * 0.999000012874603271484375;
        _2997 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2997)
        {
            if ((cbInstanceData._m0[_959 + 7u].x + _2987) < 0.5)
            {
                _3153 = true;
                break;
            }
        }
        uint _3094 = _960 + uint(_2956.w);
        if ((cbInstanceData._m0[_3094].w < 1.0) && ((cbInstanceData._m0[_3094].w + _2987) < 0.5))
        {
            _3153 = true;
            break;
        }
        if ((_2980 + 1.0) < _2978.x)
        {
            _3153 = true;
            break;
        }
        _3153 = false;
        break;
    }
    float _3358;
    if (_3153)
    {
        discard_state = true;
        _3358 = 0.0;
    }
    else
    {
        _3358 = cbInstanceData._m0[_2819].w;
    }
    SV_Target.x = _2984;
    SV_Target.y = _2985;
    SV_Target.z = _2986;
    SV_Target.w = _3358;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2819].w;
    discard_exit();
}


