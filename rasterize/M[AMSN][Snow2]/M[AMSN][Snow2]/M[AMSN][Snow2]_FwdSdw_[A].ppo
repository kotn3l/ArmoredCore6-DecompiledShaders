#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _981;
float _3654;
float _3655;
float _3656;
float _3657;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    vec4 _243 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _243.z;
    float _252 = (_243.x * 2.0) + (-1.0);
    float _254 = (_243.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3666 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))));
    float _264 = fma(_261, _221, fma(_254, _214, _252 * _200));
    float _267 = fma(_261, _222, fma(_254, _215, _252 * _201));
    float _270 = fma(_261, _223, fma(_254, _216, _252 * _202));
    float _274 = inversesqrt(dot(vec3(_264, _267, _270), vec3(_264, _267, _270)));
    float _282 = cbMtdParam._m0[9u].x + dot(vec4(_274 * _264, _274 * _267, _274 * _270, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _3677 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _283 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    vec4 _295 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _311 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _313 = _311.x;
    float _314 = _311.y;
    float _315 = _311.z;
    float _322 = ((_295.x - _313) * _283) + _313;
    float _323 = ((_295.y - _314) * _283) + _314;
    float _324 = ((_295.z - _315) * _283) + _315;
    vec4 _337 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _339 = _337.x;
    float _341 = _339 - (_339 * _283);
    vec4 _353 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _360 = (_353.x * 2.0) + (-1.0);
    float _361 = (_353.y * 2.0) + (-1.0);
    float _362 = dot(vec2(_360, _361), vec2(_360, _361));
    float _3688 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _370 = ((_353.z - _248) * _283) + _248;
    float _377 = ((_360 - _252) * _283) + _252;
    float _378 = ((_361 - _254) * _283) + _254;
    float _379 = ((sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) - _261) * _283) + _261;
    float _382 = fma(_379, _221, fma(_378, _214, _377 * _200));
    float _385 = fma(_379, _222, fma(_378, _215, _377 * _201));
    float _388 = fma(_379, _223, fma(_378, _216, _377 * _202));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    float _393 = _392 * _382;
    float _394 = _392 * _385;
    float _395 = _392 * _388;
    float _3699 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _396 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3721 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3732 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3743 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _400 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _416 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _458 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _468 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _458);
    float _469 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _458);
    float _470 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _458);
    float _474 = inversesqrt(dot(vec3(_468, _469, _470), vec3(_468, _469, _470)));
    float _475 = _468 * _474;
    float _476 = _469 * _474;
    float _477 = _470 * _474;
    vec4 _482 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _484 = _482.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _660 = sqrt(((_468 * _468) + (_469 * _469)) + (_470 * _470));
        float _666 = (cbMatDynParam._m0[5u].x * _660) + cbMatDynParam._m0[5u].y;
        float _3754 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _671 = (cbMatDynParam._m0[5u].z * _660) + cbMatDynParam._m0[5u].w;
        float _3765 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) - _667)) + _667) < ((_484 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _496 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _497 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _517 = fma(_395, cbSceneParam._m0[5u].z, fma(_394, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _393));
    float _520 = fma(_395, cbSceneParam._m0[6u].z, fma(_394, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _393));
    float _523 = fma(_395, cbSceneParam._m0[7u].z, fma(_394, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _393));
    uint _536 = uint(roundEven(NORMAL.w)) * 13u;
    uint _538 = _536 + 9u;
    uint _539 = _538 + uint(cbMatDynParam._m0[0u].w);
    float _545 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * cbInstanceData._m0[_539].x;
    float _546 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_539].y;
    float _547 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_539].z;
    float _3776 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _548 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _551 = 1.0 - _400;
    float _552 = _548 * _551;
    float _553 = _549 * _551;
    float _554 = _550 * _551;
    float _559 = (_548 + (-0.039999999105930328369140625)) * _400;
    float _560 = (_549 + (-0.039999999105930328369140625)) * _400;
    float _561 = (_550 + (-0.039999999105930328369140625)) * _400;
    float _562 = _559 + 0.039999999105930328369140625;
    float _564 = _560 + 0.039999999105930328369140625;
    float _565 = _561 + 0.039999999105930328369140625;
    vec4 _574 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _496, cbSceneParam._m0[86u].y * _497));
    float _577 = _574.x * TEXCOORD.z;
    float _578 = dot(vec3(_393, _394, _395), vec3(_475, _476, _477));
    float _581 = _578 * 2.0;
    float _585 = (_581 * _393) - _475;
    float _586 = (_581 * _394) - _476;
    float _587 = (_581 * _395) - _477;
    float _591 = abs(dot(vec3(_475, _476, _477), vec3(_393, _394, _395)));
    float _3809 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _593 = sqrt(_396);
    float _606 = exp2((_593 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_593 * 3.0));
    float _612 = (1.0 - _606) * ((_593 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _613 = _606 * _593;
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _980;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _705 = fma(_649, cbModelParam._m0[26u].z, fma(_645, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _641));
        float _709 = fma(_649, cbModelParam._m0[27u].z, fma(_645, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _641));
        float _713 = fma(_649, cbModelParam._m0[28u].z, fma(_645, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _641));
        float _738 = _641 + _393;
        float _739 = _645 + _394;
        float _740 = _649 + _395;
        float _750 = fma(_740, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _738)) - _705;
        float _751 = fma(_740, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _738)) - _709;
        float _752 = fma(_740, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _738)) - _713;
        float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
        float _769 = ((_756 * _750) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_705 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _770 = ((_756 * _751) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_709 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _771 = ((_756 * _752) / cbModelParam._m0[34u].z) + ((((((_713 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        float _808 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_774.x + (-0.5));
        float _810 = _808 * (_774.y + (-0.5));
        float _811 = _808 * (_774.z + (-0.5));
        float _818 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_781.x + (-0.5));
        float _820 = _818 * (_781.y + (-0.5));
        float _821 = _818 * (_781.z + (-0.5));
        float _828 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_788.x + (-0.5));
        float _830 = _828 * (_788.y + (-0.5));
        float _831 = _828 * (_788.z + (-0.5));
        float _838 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_795.x + (-0.5));
        float _840 = _838 * (_795.y + (-0.5));
        float _841 = _838 * (_795.z + (-0.5));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = _809 * 0.5;
        float _846 = _819 * 0.5;
        float _847 = _829 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _862 = (dot(vec3(_393, _394, _395), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _872 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3857 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_874 + 1.0))) + _879) * _842;
        float _889 = _810 * 0.5;
        float _890 = _820 * 0.5;
        float _891 = _830 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _905 = (dot(vec3(_393, _394, _395), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _914 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _916 = _915 * 2.0;
        float _920 = (1.0 - _915) / (_915 + 1.0);
        float _3890 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _930 = ((((1.0 - _921) * (_916 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_916 + 1.0))) + _921) * _843;
        float _931 = _811 * 0.5;
        float _932 = _821 * 0.5;
        float _933 = _831 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_393, _394, _395), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3923 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_958 + 1.0))) + _963) * _844;
        _980 = _811;
        _982 = _810;
        _983 = _809;
        _984 = _821;
        _985 = _820;
        _986 = _819;
        _987 = _831;
        _988 = _830;
        _989 = _829;
        _990 = _844;
        _991 = _843;
        _992 = _842;
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0)));
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
    }
    else
    {
        _980 = _981;
        _982 = _981;
        _983 = _981;
        _984 = _981;
        _985 = _981;
        _986 = _981;
        _987 = _981;
        _988 = _981;
        _989 = _981;
        _990 = _981;
        _991 = _981;
        _992 = _981;
        _993 = 0.0;
        _994 = 0.0;
        _995 = 0.0;
    }
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1024 = fma(_649, cbModelParam._m0[30u].z, fma(_645, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _641));
        float _1028 = fma(_649, cbModelParam._m0[31u].z, fma(_645, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _641));
        float _1032 = fma(_649, cbModelParam._m0[32u].z, fma(_645, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _641));
        float _1055 = _641 + _393;
        float _1056 = _645 + _394;
        float _1057 = _649 + _395;
        float _1067 = fma(_1057, cbModelParam._m0[30u].z, fma(_1056, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1055)) - _1024;
        float _1068 = fma(_1057, cbModelParam._m0[31u].z, fma(_1056, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1055)) - _1028;
        float _1069 = fma(_1057, cbModelParam._m0[32u].z, fma(_1056, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1055)) - _1032;
        float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
        float _1086 = ((_1073 * _1067) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1024 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1073 * _1068) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1028 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1073 * _1069) / cbModelParam._m0[35u].z) + ((((((_1032 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        float _1123 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1090.x + (-0.5));
        float _1125 = _1123 * (_1090.y + (-0.5));
        float _1126 = _1123 * (_1090.z + (-0.5));
        float _1133 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1097.x + (-0.5));
        float _1135 = _1133 * (_1097.y + (-0.5));
        float _1136 = _1133 * (_1097.z + (-0.5));
        float _1143 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1104.x + (-0.5));
        float _1145 = _1143 * (_1104.y + (-0.5));
        float _1146 = _1143 * (_1104.z + (-0.5));
        float _1153 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1111.x + (-0.5));
        float _1155 = _1153 * (_1111.y + (-0.5));
        float _1156 = _1153 * (_1111.z + (-0.5));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = _1124 * 0.5;
        float _1161 = _1134 * 0.5;
        float _1162 = _1144 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_393, _394, _395), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3986 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1187 + 1.0))) + _1192) * _1157;
        float _1202 = _1125 * 0.5;
        float _1203 = _1135 * 0.5;
        float _1204 = _1145 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_393, _394, _395), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4019 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1229 + 1.0))) + _1234) * _1158;
        float _1244 = _1126 * 0.5;
        float _1245 = _1136 * 0.5;
        float _1246 = _1146 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_393, _394, _395), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4052 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1271 + 1.0))) + _1276) * _1159;
        _1293 = _1126;
        _1294 = _1125;
        _1295 = _1124;
        _1296 = _1136;
        _1297 = _1135;
        _1298 = _1134;
        _1299 = _1146;
        _1300 = _1145;
        _1301 = _1144;
        _1302 = _1159;
        _1303 = _1158;
        _1304 = _1157;
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1306 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
    }
    else
    {
        _1293 = _981;
        _1294 = _981;
        _1295 = _981;
        _1296 = _981;
        _1297 = _981;
        _1298 = _981;
        _1299 = _981;
        _1300 = _981;
        _1301 = _981;
        _1302 = _981;
        _1303 = _981;
        _1304 = _981;
        _1305 = 0.0;
        _1306 = 0.0;
        _1307 = 0.0;
    }
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _993)) + _993;
    float _1318 = (cbModelParam._m0[1u].x * (_1306 - _994)) + _994;
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _995)) + _995;
    float _1340 = fma(_1319, cbSceneParam._m0[89u].z, fma(_1318, cbSceneParam._m0[89u].y, _1317 * cbSceneParam._m0[89u].x));
    float _1343 = fma(_1319, cbSceneParam._m0[90u].z, fma(_1318, cbSceneParam._m0[90u].y, _1317 * cbSceneParam._m0[90u].x));
    float _1346 = fma(_1319, cbSceneParam._m0[91u].z, fma(_1318, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1317));
    float _1361 = _585 * 0.5;
    float _1362 = _586 * 0.5;
    float _1363 = _587 * 0.5;
    float _1364 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1367 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1294, _1297, _1300, _1303));
    float _1370 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1404;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1377 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_980, _984, _987, _990));
        float _1381 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_982, _985, _988, _991));
        float _1385 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_983, _986, _989, _992));
        float _1392 = dot(vec4(cbModelParam._m0[39u]), vec4(_1361, _1362, _1363, 1.0));
        _1404 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1392) ? 0.0 : (isnan(0.0) ? _1392 : max(0.0, _1392))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1404 = 1.0;
    }
    float _1415;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1406 = dot(vec4(cbModelParam._m0[40u]), vec4(_1361, _1362, _1363, 1.0));
        _1415 = dot(vec3(isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1415 = 1.0;
    }
    float _1419 = (_1415 * cbModelParam._m0[1u].x) + (_1404 * (1.0 - cbModelParam._m0[1u].x));
    float _1429 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _396);
    float _1430 = isnan(_1429) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1429 : min(cbModelParam._m0[25u].z, _1429));
    float _1512;
    float _1514;
    float _1516;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1479 = fma(_649, cbModelParam._m0[13u].z, fma(_645, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _641)) + cbModelParam._m0[13u].w;
        float _1483 = fma(_649, cbModelParam._m0[14u].z, fma(_645, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _641)) + cbModelParam._m0[14u].w;
        float _1487 = fma(_649, cbModelParam._m0[15u].z, fma(_645, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _641)) + cbModelParam._m0[15u].w;
        float _1490 = fma(_587, cbModelParam._m0[13u].z, fma(_586, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _585));
        float _1493 = fma(_587, cbModelParam._m0[14u].z, fma(_586, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _585));
        float _1496 = fma(_587, cbModelParam._m0[15u].z, fma(_586, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _585));
        float _1524;
        if (_1490 > 0.0)
        {
            _1524 = abs((1.0 - _1479) / _1490);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1479 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1524 = frontier_phi_19_17_ladder;
        }
        float _1700;
        if (_1493 > 0.0)
        {
            _1700 = abs((1.0 - _1483) / _1493);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1483 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1700 = frontier_phi_28_24_ladder;
        }
        float _1995;
        if (_1496 > 0.0)
        {
            _1995 = abs((1.0 - _1487) / _1496);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1487 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1995 = frontier_phi_40_35_ladder;
        }
        float _1997 = isnan(_1700) ? _1524 : (isnan(_1524) ? _1700 : min(_1524, _1700));
        float _1998 = isnan(_1995) ? _1997 : (isnan(_1997) ? _1995 : min(_1997, _1995));
        float _2002 = (_1998 * _1490) + _1479;
        float _2003 = (_1998 * _1493) + _1483;
        float _2004 = (_1998 * _1496) + _1487;
        float _2005 = _1998 * 9.9999997473787516355514526367188e-05;
        float _2007 = (-1.0) - _2005;
        float _2009 = _2005 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2004 > _2009) || ((_2004 < _2007) || ((_2003 > _2009) || ((_2003 < _2007) || ((_2002 < _2007) || (_2002 > _2009))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2149 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2004, cbModelParam._m0[9u].z, fma(_2003, cbModelParam._m0[9u].y, _2002 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2004, cbModelParam._m0[10u].z, fma(_2003, cbModelParam._m0[10u].y, _2002 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2004, cbModelParam._m0[11u].z, fma(_2003, cbModelParam._m0[11u].y, _2002 * cbModelParam._m0[11u].x))), _1430);
            frontier_phi_18_40_ladder = _2149.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2149.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2149.x * cbModelParam._m0[1u].y;
        }
        _1512 = frontier_phi_18_40_ladder_2;
        _1514 = frontier_phi_18_40_ladder_1;
        _1516 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1500 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_585, _586, _587), _1430);
        _1512 = _1500.x * cbModelParam._m0[1u].y;
        _1514 = _1500.y * cbModelParam._m0[1u].y;
        _1516 = _1500.z * cbModelParam._m0[1u].y;
    }
    float _1520 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _396);
    float _1521 = isnan(_1520) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1520 : min(cbModelParam._m0[25u].w, _1520));
    float _1614;
    float _1616;
    float _1618;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1578 = fma(_649, cbModelParam._m0[21u].z, fma(_645, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _641)) + cbModelParam._m0[21u].w;
        float _1582 = fma(_649, cbModelParam._m0[22u].z, fma(_645, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _641)) + cbModelParam._m0[22u].w;
        float _1586 = fma(_649, cbModelParam._m0[23u].z, fma(_645, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _641)) + cbModelParam._m0[23u].w;
        float _1589 = fma(_587, cbModelParam._m0[21u].z, fma(_586, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _585));
        float _1592 = fma(_587, cbModelParam._m0[22u].z, fma(_586, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _585));
        float _1595 = fma(_587, cbModelParam._m0[23u].z, fma(_586, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _585));
        float _1705;
        if (_1589 > 0.0)
        {
            _1705 = abs((1.0 - _1578) / _1589);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1578 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1705 = frontier_phi_30_26_ladder;
        }
        float _2022;
        if (_1592 > 0.0)
        {
            _2022 = abs((1.0 - _1582) / _1592);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1582 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2022 = frontier_phi_42_37_ladder;
        }
        float _2360;
        if (_1595 > 0.0)
        {
            _2360 = abs((1.0 - _1586) / _1595);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1586 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2360 = frontier_phi_52_49_ladder;
        }
        float _2362 = isnan(_2022) ? _1705 : (isnan(_1705) ? _2022 : min(_1705, _2022));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1589) + _1578;
        float _2368 = (_2363 * _1592) + _1582;
        float _2369 = (_2363 * _1595) + _1586;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2371 = (-1.0) - _2370;
        float _2373 = _2370 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2369 > _2373) || ((_2369 < _2371) || ((_2368 > _2373) || ((_2368 < _2371) || ((_2367 < _2371) || (_2367 > _2373))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2491 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2369, cbModelParam._m0[17u].z, fma(_2368, cbModelParam._m0[17u].y, _2367 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2369, cbModelParam._m0[18u].z, fma(_2368, cbModelParam._m0[18u].y, _2367 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2369, cbModelParam._m0[19u].z, fma(_2368, cbModelParam._m0[19u].y, _2367 * cbModelParam._m0[19u].x))), _1521);
            frontier_phi_27_52_ladder = _2491.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2491.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2491.x * cbModelParam._m0[1u].z;
        }
        _1614 = frontier_phi_27_52_ladder_2;
        _1616 = frontier_phi_27_52_ladder_1;
        _1618 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1598 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_585, _586, _587), _1521);
        _1614 = _1598.x * cbModelParam._m0[1u].z;
        _1616 = _1598.y * cbModelParam._m0[1u].z;
        _1618 = _1598.z * cbModelParam._m0[1u].z;
    }
    float _1631 = (((_612 * _562) + _613) * _577) * ((cbModelParam._m0[1u].w * (_1614 - _1512)) + _1512);
    float _1633 = (((_612 * _564) + _613) * _577) * ((cbModelParam._m0[1u].w * (_1616 - _1514)) + _1514);
    float _1635 = (((_612 * _565) + _613) * _577) * ((cbModelParam._m0[1u].w * (_1618 - _1516)) + _1516);
    float _1638 = fma(_1635, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1631 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1635, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1631 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1635, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, _1631 * cbSceneParam._m0[91u].x));
    float _1679 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1683 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1687 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1691 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1692 = _1679 / _1691;
    float _1693 = _1683 / _1691;
    float _1694 = _1687 / _1691;
    float _1841;
    float _1842;
    float _1843;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1721 = ((uint(_1694 > cbSceneParam._m0[59u].y) + uint(_1694 > cbSceneParam._m0[59u].x)) + uint(_1694 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1722 = _1721 + 43u;
        uint _1730 = _1721 + 44u;
        uint _1738 = _1721 + 45u;
        uint _1746 = _1721 + 46u;
        float _1757 = fma(_1691, cbSceneParam._m0[_1722].w, fma(_1687, cbSceneParam._m0[_1722].z, fma(_1683, cbSceneParam._m0[_1722].y, _1679 * cbSceneParam._m0[_1722].x)));
        float _1761 = fma(_1691, cbSceneParam._m0[_1730].w, fma(_1687, cbSceneParam._m0[_1730].z, fma(_1683, cbSceneParam._m0[_1730].y, _1679 * cbSceneParam._m0[_1730].x)));
        float _1769 = fma(_1691, cbSceneParam._m0[_1746].w, fma(_1687, cbSceneParam._m0[_1746].z, fma(_1683, cbSceneParam._m0[_1746].y, _1679 * cbSceneParam._m0[_1746].x)));
        float _1774 = cbSceneParam._m0[33u].z * _1769;
        float _1776 = cbSceneParam._m0[33u].w * _1769;
        float _1779 = fma(_1691, cbSceneParam._m0[_1738].w, fma(_1687, cbSceneParam._m0[_1738].z, fma(_1683, cbSceneParam._m0[_1738].y, _1679 * cbSceneParam._m0[_1738].x))) / _1769;
        float _1827 = (cbSceneParam._m0[33u].x - sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694))) * cbSceneParam._m0[33u].y;
        float _4178 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1834 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1774 + _1757) / _1769, (_1776 + _1761) / _1769), _1779), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1776 + _1757) / _1769, (_1761 - _1774) / _1769), _1779), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1757 - _1774) / _1769, (_1761 - _1776) / _1769), _1779), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1757 - _1776) / _1769, (_1774 + _1761) / _1769), _1779), 0.0)).x), vec4(0.25)));
        _1841 = 1.0 - (_1834 * cbSceneParam._m0[34u].x);
        _1842 = 1.0 - (_1834 * cbSceneParam._m0[34u].y);
        _1843 = 1.0 - (_1834 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1841 = 1.0;
        _1842 = 1.0;
        _1843 = 1.0;
    }
    float _1907;
    float _1909;
    float _1911;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1895 = fma(_1691, cbSceneParam._m0[63u].w, fma(_1687, cbSceneParam._m0[63u].z, fma(_1683, cbSceneParam._m0[63u].y, _1679 * cbSceneParam._m0[63u].x)));
        float _1896 = fma(_1691, cbSceneParam._m0[60u].w, fma(_1687, cbSceneParam._m0[60u].z, fma(_1683, cbSceneParam._m0[60u].y, _1679 * cbSceneParam._m0[60u].x))) / _1895;
        float _1897 = fma(_1691, cbSceneParam._m0[61u].w, fma(_1687, cbSceneParam._m0[61u].z, fma(_1683, cbSceneParam._m0[61u].y, _1679 * cbSceneParam._m0[61u].x))) / _1895;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1896 >= cbSceneParam._m0[64u].x) && (_1897 >= cbSceneParam._m0[64u].y)) && (_1896 <= cbSceneParam._m0[64u].z)) && (_1897 <= cbSceneParam._m0[64u].w))
        {
            float _2035 = fma(_1691, cbSceneParam._m0[62u].w, fma(_1687, cbSceneParam._m0[62u].z, fma(_1683, cbSceneParam._m0[62u].y, _1679 * cbSceneParam._m0[62u].x))) / _1895;
            float _2039 = isnan(cbSceneParam._m0[41u].w) ? _2035 : (isnan(_2035) ? cbSceneParam._m0[41u].w : max(_2035, cbSceneParam._m0[41u].w));
            float _2082 = (cbSceneParam._m0[33u].x - sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694))) * cbSceneParam._m0[33u].y;
            float _4194 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
            float _2089 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1896, cbSceneParam._m0[33u].w + _1897), _2039), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1896, _1897 - cbSceneParam._m0[33u].z), _2039), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1896 - cbSceneParam._m0[33u].z, _1897 - cbSceneParam._m0[33u].w), _2039), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1896 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1897), _2039), 0.0)).x), vec4(0.25)));
            float _2093 = 1.0 - (_2089 * cbSceneParam._m0[34u].x);
            float _2094 = 1.0 - (_2089 * cbSceneParam._m0[34u].y);
            float _2095 = 1.0 - (_2089 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2094) ? _1842 : (isnan(_1842) ? _2094 : min(_1842, _2094));
            frontier_phi_39_38_ladder_1 = isnan(_2093) ? _1841 : (isnan(_1841) ? _2093 : min(_1841, _2093));
            frontier_phi_39_38_ladder_2 = isnan(_2095) ? _1843 : (isnan(_1843) ? _2095 : min(_1843, _2095));
        }
        else
        {
            frontier_phi_39_38_ladder = _1842;
            frontier_phi_39_38_ladder_1 = _1841;
            frontier_phi_39_38_ladder_2 = _1843;
        }
        _1907 = frontier_phi_39_38_ladder_1;
        _1909 = frontier_phi_39_38_ladder;
        _1911 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1907 = _1841;
        _1909 = _1842;
        _1911 = _1843;
    }
    uvec4 _1916 = floatBitsToUint(cbInstanceData._m0[_536 + 5u]);
    uint _1918 = _1916.x * 14u;
    uint _1919 = _1918 + 13u;
    float _1926 = _577 + (-1.0);
    float _1931 = (cbLight._m0[_1919].x * _1926) + 1.0;
    float _1932 = (cbLight._m0[_1919].y * _1926) + 1.0;
    float _1933 = (cbLight._m0[_1919].z * _1926) + 1.0;
    float _1934 = (cbLight._m0[_1919].w * _1926) + 1.0;
    uint _1935 = _1918 + 5u;
    float _1941 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1945 = _1918 + 4u;
    float _1954 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1958 = _1918 | 1u;
    float _1969 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_393, _394, _395));
    float _1972 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_393, _394, _395));
    float _4230 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _4241 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1977 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * 0.3183098733425140380859375;
    float _1979 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * 0.3183098733425140380859375;
    float _1986 = ((cbLight._m0[_1935].x * _1941) * _1979) + (((cbLight._m0[_1945].x * _1907) * _1954) * _1977);
    float _1987 = ((_1941 * cbLight._m0[_1935].y) * _1979) + (((cbLight._m0[_1945].y * _1909) * _1954) * _1977);
    float _1988 = ((_1941 * cbLight._m0[_1935].z) * _1979) + (((cbLight._m0[_1945].z * _1911) * _1954) * _1977);
    uvec4 _1992 = floatBitsToUint(cbLight._m0[_1918 + 12u]);
    bool _1994 = _1992.x == 0u;
    float _2096;
    float _2098;
    float _2100;
    if (_1994)
    {
        _2096 = _1986;
        _2098 = _1987;
        _2100 = _1988;
    }
    else
    {
        uint _2104 = _1918 + 6u;
        float _2120 = (dot(vec3(cbLight._m0[_1918 + 2u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _2121 = _2120 * _2120;
        float _4252 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2122 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2123 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2096 = (((cbLight._m0[_2104].x * 0.3183098733425140380859375) * _2122) * _2123) + _1986;
        _2098 = (((cbLight._m0[_2104].y * 0.3183098733425140380859375) * _2122) * _2123) + _1987;
        _2100 = (((cbLight._m0[_2104].z * 0.3183098733425140380859375) * _2122) * _2123) + _1988;
    }
    bool _2103 = _1992.y == 0u;
    float _2158;
    float _2160;
    float _2162;
    if (_2103)
    {
        _2158 = _2096;
        _2160 = _2098;
        _2162 = _2100;
    }
    else
    {
        uint _2331 = _1918 + 7u;
        float _2347 = (dot(vec3(cbLight._m0[_1918 + 3u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _2348 = _2347 * _2347;
        float _4268 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2349 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2350 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2158 = (((cbLight._m0[_2331].x * 0.3183098733425140380859375) * _2349) * _2350) + _2096;
        _2160 = (((cbLight._m0[_2331].y * 0.3183098733425140380859375) * _2349) * _2350) + _2098;
        _2162 = (((cbLight._m0[_2331].z * 0.3183098733425140380859375) * _2349) * _2350) + _2100;
    }
    uint _2165 = _1918 + 8u;
    float _2178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1918].w)) * _396) * 0.949999988079071044921875);
    float _2179 = _2178 * _2178;
    float _2180 = cbLight._m0[_1918].x + _475;
    float _2181 = cbLight._m0[_1918].y + _476;
    float _2182 = cbLight._m0[_1918].z + _477;
    float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
    float _2187 = _2186 * _2180;
    float _2188 = _2186 * _2181;
    float _2189 = _2186 * _2182;
    float _2190 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1918].xyz));
    float _4284 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _4295 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _2194 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2195 = dot(vec3(_393, _394, _395), vec3(_2187, _2188, _2189));
    float _4306 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2199 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_2187, _2188, _2189));
    float _4317 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2203 = _2179 * _2179;
    float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
    float _2215 = exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0);
    float _2216 = 0.959999978542327880859375 - _559;
    float _2218 = 0.959999978542327880859375 - _560;
    float _2219 = 0.959999978542327880859375 - _561;
    float _2226 = 1.0 - _2179;
    float _2237 = (0.5 / (((_2194 * ((_2193 * _2226) + _2179)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2226) + _2179) * _2193))) * _2193;
    float _4328 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2239 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
    uint _2253 = _1918 + 9u;
    float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _396) * 0.949999988079071044921875);
    float _2265 = _2264 * _2264;
    float _2266 = cbLight._m0[_1958].x + _475;
    float _2267 = cbLight._m0[_1958].y + _476;
    float _2268 = cbLight._m0[_1958].z + _477;
    float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
    float _2273 = _2272 * _2266;
    float _2274 = _2272 * _2267;
    float _2275 = _2272 * _2268;
    float _2276 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1958].xyz));
    float _4339 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _2280 = dot(vec3(_393, _394, _395), vec3(_2273, _2274, _2275));
    float _4350 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2284 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_2273, _2274, _2275));
    float _4361 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2288 = _2265 * _2265;
    float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
    float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0);
    float _2306 = 1.0 - _2265;
    float _2316 = (0.5 / (((_2194 * ((_2279 * _2306) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2306) + _2265) * _2279))) * _2279;
    float _4372 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2318 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
    float _2328 = (((((_2299 * _2216) + _562) * cbLight._m0[_2253].x) * _2318) * _1941) + ((((cbLight._m0[_2165].x * _1907) * ((_2215 * _2216) + _562)) * _2239) * _1954);
    float _2329 = (((((_2299 * _2218) + _564) * cbLight._m0[_2253].y) * _2318) * _1941) + ((((cbLight._m0[_2165].y * _1909) * ((_2215 * _2218) + _564)) * _2239) * _1954);
    float _2330 = (((((_2299 * _2219) + _565) * cbLight._m0[_2253].z) * _2318) * _1941) + ((((cbLight._m0[_2165].z * _1911) * ((_2215 * _2219) + _565)) * _2239) * _1954);
    float _2386;
    float _2388;
    float _2390;
    if (_1994)
    {
        _2386 = _2328;
        _2388 = _2329;
        _2390 = _2330;
    }
    else
    {
        uint _2392 = _1918 + 2u;
        uint _2396 = _1918 + 10u;
        float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _396) * 0.949999988079071044921875);
        float _2411 = _2410 * _2410;
        float _2412 = cbLight._m0[_2392].x + _475;
        float _2413 = cbLight._m0[_2392].y + _476;
        float _2414 = cbLight._m0[_2392].z + _477;
        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
        float _2419 = _2418 * _2412;
        float _2420 = _2418 * _2413;
        float _2421 = _2418 * _2414;
        float _2422 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2392].xyz));
        float _4383 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2426 = dot(vec3(_393, _394, _395), vec3(_2419, _2420, _2421));
        float _4394 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2430 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2419, _2420, _2421));
        float _4405 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2434 = _2411 * _2411;
        float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
        float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0);
        float _2452 = 1.0 - _2411;
        float _2462 = (0.5 / (((_2194 * ((_2425 * _2452) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2452) + _2411) * _2425))) * _2425;
        float _4416 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2464 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
        float _2465 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2386 = (((((_2445 * _2216) + _562) * cbLight._m0[_2396].x) * _2464) * _2465) + _2328;
        _2388 = (((((_2445 * _2218) + _564) * cbLight._m0[_2396].y) * _2464) * _2465) + _2329;
        _2390 = (((((_2445 * _2219) + _565) * cbLight._m0[_2396].z) * _2464) * _2465) + _2330;
    }
    float _2496;
    float _2498;
    float _2500;
    if (_2103)
    {
        _2496 = _2386;
        _2498 = _2388;
        _2500 = _2390;
    }
    else
    {
        uint _2507 = _1918 + 3u;
        uint _2511 = _1918 + 11u;
        float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2507].w)) * _396) * 0.949999988079071044921875);
        float _2526 = _2525 * _2525;
        float _2527 = cbLight._m0[_2507].x + _475;
        float _2528 = cbLight._m0[_2507].y + _476;
        float _2529 = cbLight._m0[_2507].z + _477;
        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
        float _2534 = _2533 * _2527;
        float _2535 = _2533 * _2528;
        float _2536 = _2533 * _2529;
        float _2537 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2507].xyz));
        float _4432 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2541 = dot(vec3(_393, _394, _395), vec3(_2534, _2535, _2536));
        float _4443 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2545 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_2534, _2535, _2536));
        float _4454 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2549 = _2526 * _2526;
        float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
        float _2560 = exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0);
        float _2567 = 1.0 - _2526;
        float _2577 = (0.5 / (((_2194 * ((_2540 * _2567) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2567) + _2526) * _2540))) * _2540;
        float _4465 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2579 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
        float _2580 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2496 = (((((_2560 * _2216) + _562) * cbLight._m0[_2511].x) * _2579) * _2580) + _2386;
        _2498 = (((((_2560 * _2218) + _564) * cbLight._m0[_2511].y) * _2579) * _2580) + _2388;
        _2500 = (((((_2560 * _2219) + _565) * cbLight._m0[_2511].z) * _2579) * _2580) + _2390;
    }
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    if (_1916.y == 0u)
    {
        uvec4 _2601 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2602 = _2601.x;
        uint _2613 = uint((float(_2601.y) * floor(float(uint(cbSceneParam._m0[85u].y * _497) / _2602))) + floor(float(uint(cbSceneParam._m0[85u].x * _496) / _2602)));
        float _2623 = (log2(_1694 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2624 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        uint _2627 = uint(isnan(14.0) ? _2624 : (isnan(_2624) ? 14.0 : min(_2624, 14.0)));
        uvec4 _2632 = texelFetch(g_lightClusterGridBuffer, int(((_2627 << 2u) + (_2613 << 6u)) >> 2u));
        uint _2633 = _2632.x;
        uint _2634 = _2601.z;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        if (((((1u << ((_2634 >> 4u) & 15u)) + 4294967295u) & _2633) == 0u) || ((_2634 & 240u) == 0u))
        {
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
        }
        else
        {
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            uint _2870 = 0u;
            uint _2879;
            bool _2880;
            for (;;)
            {
                _2879 = texelFetch(g_lightClassification, int((((_2627 << 5u) + (_2613 << 9u)) + (_2870 << 2u)) >> 2u)).x;
                _2880 = _2879 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2880)
                {
                    frontier_phi_73_pred = _2869;
                    frontier_phi_73_pred_1 = _2868;
                    frontier_phi_73_pred_2 = _2867;
                    frontier_phi_73_pred_3 = _2866;
                    frontier_phi_73_pred_4 = _2865;
                    frontier_phi_73_pred_5 = _2864;
                }
                else
                {
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    uint _3015;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2879;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    for (;;)
                    {
                        uint _3019 = uint(findLSB(_3015)) + (_2870 << 5u);
                        uint _3016 = (_3015 + 4294967295u) & _3015;
                        uint _3021 = _3019 * 48u;
                        vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 3u)).x));
                        uint _3041 = (_3019 * 48u) + 4u;
                        vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 3u)).x));
                        uint _3060 = (_3019 * 48u) + 8u;
                        vec3 _3071 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x));
                        float _3075 = _3035.x - _1692;
                        float _3076 = _3035.y - _1693;
                        float _3077 = _3035.z - _1694;
                        float _3078 = dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077));
                        float _3081 = inversesqrt(_3078);
                        float _3082 = _3081 * _3075;
                        float _3083 = _3081 * _3076;
                        float _3084 = _3081 * _3077;
                        float _3085 = dot(vec3(_517, _520, _523), vec3(_3082, _3083, _3084));
                        float _3090 = 1.0 - (_3078 * _3035.w);
                        float _4491 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3091 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3092 = sqrt(_3078) * _3054.w;
                        float _3095 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                        float _3096 = _3095 * _3095;
                        float _3099 = ((1.0 - _3096) * _3085) + _3096;
                        float _3102 = _3092 * _3092;
                        float _3106 = ((isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))) * _3091) / ((_3102 * 0.699999988079071044921875) + 1.0);
                        float _3110 = (-0.0) - _1692;
                        float _3111 = (-0.0) - _1693;
                        float _3112 = (-0.0) - _1694;
                        float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                        float _3117 = _3116 * _3110;
                        float _3118 = _3116 * _3111;
                        float _3119 = _3116 * _3112;
                        float _3126 = exp2(log2(1.0 / ((_3102 * 3.5) + 5.0)) * 0.25);
                        float _3127 = 1.0 - _593;
                        float _3134 = sqrt(1.0 - ((1.0 - (_3127 * _3127)) * (1.0 - (_3126 * _3126))));
                        float _3135 = _3134 * _3134;
                        float _3136 = _3135 * _3135;
                        float _3137 = _3117 + _3082;
                        float _3138 = _3118 + _3083;
                        float _3139 = _3119 + _3084;
                        float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                        float _3147 = dot(vec3(_517, _520, _523), vec3(_3117, _3118, _3119));
                        float _4507 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3150 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3151 = dot(vec3(_517, _520, _523), vec3(_3143 * _3137, _3143 * _3138, _3143 * _3139));
                        float _4518 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3154 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3158 = ((_3154 * _3154) * (_3136 + (-1.0))) + 1.0;
                        float _3159 = _3095 * _3135;
                        float _3160 = _3159 * _3159;
                        float _3163 = ((1.0 - _3160) * _3085) + _3160;
                        float _4529 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3164 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3165 = 1.0 - _3135;
                        float _3175 = (0.5 / (((_3164 * ((_3150 * _3165) + _3135)) + 9.9999999392252902907785028219223e-09) + (((_3164 * _3165) + _3135) * _3150))) * _3164;
                        float _4540 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3186 = (((_3136 * 3.1415927410125732421875) * (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) / ((_3158 * _3158) * ((_3102 * 2.1991131305694580078125) + 3.141590118408203125))) * _3091;
                        _2939 = (_3106 * _3054.x) + _3012;
                        _2940 = (_3106 * _3054.y) + _3013;
                        _2941 = (_3106 * _3054.z) + _3014;
                        _2936 = (_3186 * _3071.x) + _3009;
                        _2937 = (_3186 * _3071.y) + _3010;
                        _2938 = (_3186 * _3071.z) + _3011;
                        if (_3016 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _3016;
                        }
                    }
                    frontier_phi_73_pred = _2941;
                    frontier_phi_73_pred_1 = _2940;
                    frontier_phi_73_pred_2 = _2939;
                    frontier_phi_73_pred_3 = _2938;
                    frontier_phi_73_pred_4 = _2937;
                    frontier_phi_73_pred_5 = _2936;
                }
                _2723 = frontier_phi_73_pred;
                _2721 = frontier_phi_73_pred_1;
                _2719 = frontier_phi_73_pred_2;
                _2717 = frontier_phi_73_pred_3;
                _2715 = frontier_phi_73_pred_4;
                _2713 = frontier_phi_73_pred_5;
                uint _2871 = _2870 + 1u;
                if (_2871 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2864 = _2713;
                    _2865 = _2715;
                    _2866 = _2717;
                    _2867 = _2719;
                    _2868 = _2721;
                    _2869 = _2723;
                    _2870 = _2871;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
        }
        uvec4 _2726 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2727 = _2726.z;
        uint _2729 = (_2727 >> 8u) & 15u;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((4294967295u << _2729) & _2633) == 0u)
        {
            _2832 = _2712;
            _2834 = _2714;
            _2836 = _2716;
            _2838 = _2718;
            _2840 = _2720;
            _2842 = _2722;
        }
        else
        {
            float _2857 = inversesqrt(dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694)));
            float _2858 = _2857 * _1692;
            float _2859 = _2857 * _1693;
            float _2860 = _2857 * _1694;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2729 < ((_2727 >> 12u) & 15u))
            {
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2992 = _2712;
                float _2993 = _2714;
                float _2994 = _2716;
                float _2995 = _2718;
                float _2996 = _2720;
                float _2997 = _2722;
                uint _2998 = _2729;
                uint _3007;
                bool _3008;
                for (;;)
                {
                    _3007 = texelFetch(g_lightClassification, int((((_2627 << 5u) + (_2613 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                    _3008 = _3007 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3008)
                    {
                        frontier_phi_84_pred = _2996;
                        frontier_phi_84_pred_1 = _2995;
                        frontier_phi_84_pred_2 = _2994;
                        frontier_phi_84_pred_3 = _2993;
                        frontier_phi_84_pred_4 = _2992;
                        frontier_phi_84_pred_5 = _2997;
                    }
                    else
                    {
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3213 = _2992;
                        float _3214 = _2993;
                        float _3215 = _2994;
                        float _3216 = _2995;
                        float _3217 = _2996;
                        float _3218 = _2997;
                        uint _3219 = _3007;
                        uint _3220;
                        vec4 _3245;
                        float _3246;
                        vec4 _3261;
                        vec3 _3273;
                        vec4 _3289;
                        vec4 _3305;
                        float _3352;
                        bool _3353;
                        for (;;)
                        {
                            uint _3230 = ((_2998 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3219));
                            _3220 = (_3219 + 4294967295u) & _3219;
                            uint _3232 = _3230 * 40u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            _3246 = _3245.w;
                            uint _3248 = (_3230 * 40u) + 4u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3263 = (_3230 * 40u) + 8u;
                            _3273 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x));
                            uint _3276 = (_3230 * 40u) + 16u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3292 = (_3230 * 40u) + 20u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3308 = (_3230 * 40u) + 24u;
                            vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3327 = (_3230 * 40u) + 28u;
                            vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            _3352 = fma(_1694, _3340.z, fma(_1693, _3340.y, _3340.x * _1692)) + _3340.w;
                            _3353 = !((fma(_1694, _3321.z, fma(_1693, _3321.y, _3321.x * _1692)) + _3321.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3353)
                            {
                                float _3380 = _3245.x - _1692;
                                float _3381 = _3245.y - _1693;
                                float _3382 = _3245.z - _1694;
                                float _3383 = dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382));
                                float _3386 = inversesqrt(_3383);
                                float _3387 = _3386 * _3380;
                                float _3388 = _3386 * _3381;
                                float _3389 = _3386 * _3382;
                                float _3393 = 1.0 - (_3383 / (_3246 * _3246));
                                float _4551 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3398 = sqrt(_3383) * _3261.w;
                                float _3400 = 1.39999997615814208984375 / (_3398 + 1.39999997615814208984375);
                                float _3401 = _3400 * _3400;
                                float _3404 = ((1.0 - _3401) * dot(vec3(_3387, _3388, _3389), vec3(_517, _520, _523))) + _3401;
                                float _3407 = _3398 * _3398;
                                float _3411 = (fma(_1694, _3289.z, fma(_1693, _3289.y, _3289.x * _1692)) + _3289.w) / _3352;
                                float _3412 = (fma(_1694, _3305.z, fma(_1693, _3305.y, _3305.x * _1692)) + _3305.w) / _3352;
                                float _3416 = 1.0 - dot(vec2(_3411, _3412), vec2(_3411, _3412));
                                float _4567 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3417 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3418 = _3417 * (((isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))) * _3394) / ((_3407 * 0.699999988079071044921875) + 1.0));
                                float _3430 = exp2(log2(1.0 / ((_3407 * 3.5) + 5.0)) * 0.25);
                                float _3431 = 1.0 - _593;
                                float _3438 = sqrt(1.0 - ((1.0 - (_3431 * _3431)) * (1.0 - (_3430 * _3430))));
                                float _3439 = _3438 * _3438;
                                float _3440 = _3439 * _3439;
                                float _3441 = _3387 - _2858;
                                float _3442 = _3388 - _2859;
                                float _3443 = _3389 - _2860;
                                float _3447 = inversesqrt(dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443)));
                                float _3451 = dot(vec3(_517, _520, _523), vec3((-0.0) - _2858, (-0.0) - _2859, (-0.0) - _2860));
                                float _4578 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3454 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3455 = dot(vec3(_517, _520, _523), vec3(_3447 * _3441, _3447 * _3442, _3447 * _3443));
                                float _4589 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3458 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3462 = ((_3458 * _3458) * (_3440 + (-1.0))) + 1.0;
                                float _3463 = _3400 * _3439;
                                float _3464 = _3463 * _3463;
                                float _3470 = ((1.0 - _3464) * dot(vec3(_517, _520, _523), vec3(_3387, _3388, _3389))) + _3464;
                                float _4600 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3472 = 1.0 - _3439;
                                float _3482 = (0.5 / (((_3471 * ((_3454 * _3472) + _3439)) + 9.9999999392252902907785028219223e-09) + (((_3471 * _3472) + _3439) * _3454))) * _3471;
                                float _4611 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3492 = (_3417 * _3394) * (((_3440 * 3.1415927410125732421875) * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) / ((_3462 * _3462) * ((_3407 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3418 * _3261.y;
                                frontier_phi_90_pred_1 = _3418 * _3261.x;
                                frontier_phi_90_pred_2 = _3492 * _3273.z;
                                frontier_phi_90_pred_3 = _3492 * _3273.y;
                                frontier_phi_90_pred_4 = _3492 * _3273.x;
                                frontier_phi_90_pred_5 = _3418 * _3261.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3500 = frontier_phi_90_pred;
                            _3499 = frontier_phi_90_pred_1;
                            _3498 = frontier_phi_90_pred_2;
                            _3497 = frontier_phi_90_pred_3;
                            _3496 = frontier_phi_90_pred_4;
                            _3501 = frontier_phi_90_pred_5;
                            _3203 = _3499 + _3216;
                            _3204 = _3500 + _3217;
                            _3205 = _3501 + _3218;
                            _3200 = _3496 + _3213;
                            _3201 = _3497 + _3214;
                            _3202 = _3498 + _3215;
                            if (_3220 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3220;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3204;
                        frontier_phi_84_pred_1 = _3203;
                        frontier_phi_84_pred_2 = _3202;
                        frontier_phi_84_pred_3 = _3201;
                        frontier_phi_84_pred_4 = _3200;
                        frontier_phi_84_pred_5 = _3205;
                    }
                    _2841 = frontier_phi_84_pred;
                    _2839 = frontier_phi_84_pred_1;
                    _2837 = frontier_phi_84_pred_2;
                    _2835 = frontier_phi_84_pred_3;
                    _2833 = frontier_phi_84_pred_4;
                    _2843 = frontier_phi_84_pred_5;
                    uint _2999 = _2998 + 1u;
                    if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2992 = _2833;
                        _2993 = _2835;
                        _2994 = _2837;
                        _2995 = _2839;
                        _2996 = _2841;
                        _2997 = _2843;
                        _2998 = _2999;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2843;
                frontier_phi_65_66_ladder_1 = _2839;
                frontier_phi_65_66_ladder_2 = _2841;
                frontier_phi_65_66_ladder_3 = _2835;
                frontier_phi_65_66_ladder_4 = _2833;
                frontier_phi_65_66_ladder_5 = _2837;
            }
            else
            {
                frontier_phi_65_66_ladder = _2722;
                frontier_phi_65_66_ladder_1 = _2718;
                frontier_phi_65_66_ladder_2 = _2720;
                frontier_phi_65_66_ladder_3 = _2714;
                frontier_phi_65_66_ladder_4 = _2712;
                frontier_phi_65_66_ladder_5 = _2716;
            }
            _2832 = frontier_phi_65_66_ladder_4;
            _2834 = frontier_phi_65_66_ladder_3;
            _2836 = frontier_phi_65_66_ladder_5;
            _2838 = frontier_phi_65_66_ladder_1;
            _2840 = frontier_phi_65_66_ladder_2;
            _2842 = frontier_phi_65_66_ladder;
        }
        float _2847 = isnan(1.0) ? _577 : (isnan(_577) ? 1.0 : min(_577, 1.0));
        _2645 = (_2847 * _2838) + _2158;
        _2647 = (_2847 * _2840) + _2160;
        _2649 = (_2847 * _2842) + _2162;
        _2651 = ((_2832 * _562) * _2847) + _2496;
        _2653 = ((_2834 * _564) * _2847) + _2498;
        _2655 = ((_2836 * _565) * _2847) + _2500;
    }
    else
    {
        _2645 = _2158;
        _2647 = _2160;
        _2649 = _2162;
        _2651 = _2496;
        _2653 = _2498;
        _2655 = _2500;
    }
    float _4627 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _4638 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _4649 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _2672 = ((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2645 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _577))) + ((_2651 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1419)) * cbPerFrame._m0[3u].x);
    float _2673 = ((isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2647 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _577))) + ((_2653 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1419)) * cbPerFrame._m0[3u].x);
    float _2674 = ((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2649 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _577))) + ((_2655 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1419)) * cbPerFrame._m0[3u].x);
    uint _2675 = _536 + 6u;
    float _2683 = _496 / cbSceneParam._m0[86u].x;
    float _2684 = _497 / cbSceneParam._m0[86u].y;
    vec4 _2698 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2683, _2684, (log2((isnan(cbSceneParam._m0[77u].w) ? _416 : (isnan(_416) ? cbSceneParam._m0[77u].w : min(_416, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2700 = _2698.x;
    float _2701 = _2698.y;
    float _2702 = _2698.z;
    float _2703 = _2698.w;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    if (_416 > cbSceneParam._m0[78u].w)
    {
        float _2737 = isnan(_416) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _416 : min(cbSceneParam._m0[80u].w, _416));
        float _2738 = _2737 / _416;
        float _2749 = _2738 * _468;
        float _2750 = _469 * _2738;
        float _2751 = (-0.0) - _2750;
        float _2752 = _2738 * _470;
        float _2754 = (cbSceneParam._m0[77u].w * _2751) / _2737;
        float _2755 = _2754 + cbSceneParam._m0[79u].w;
        float _2756 = cbSceneParam._m0[79u].w - _2750;
        float _2762 = sqrt(((_2749 * _2749) + (_2750 * _2750)) + (_2752 * _2752));
        float _2765 = (1.0 - (cbSceneParam._m0[77u].w / _2737)) * _2762;
        float _2770 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2772 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2949;
        if (abs((_2751 - _2754) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2949 = ((((_2755 > 0.0) ? exp2(_2770 * _2755) : (2.0 - exp2(_2772 * _2755))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2765;
        }
        else
        {
            float _2893 = 1.0 / cbSceneParam._m0[80u].x;
            float _2894 = isnan(_2756) ? _2755 : (isnan(_2755) ? _2756 : max(_2755, _2756));
            float _2895 = isnan(_2756) ? _2755 : (isnan(_2755) ? _2756 : min(_2755, _2756));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            float _2905 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : min(_2895, 0.0));
            _2949 = ((abs(_2762 / _2751) * cbSceneParam._m0[80u].y) * ((((_2904 - _2905) * 2.0) - ((exp2(_2770 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0)))) - exp2(_2770 * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0))))) * _2893)) - ((exp2(_2772 * _2904) - exp2(_2772 * _2905)) * _2893))) + (_2765 * cbSceneParam._m0[80u].z);
        }
        vec4 _2951 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2683, _2684, 1.0), 0.0);
        float _2960 = exp2((_2949 * (-1.44269502162933349609375)) * (1.0 - _2951.w));
        float _2961 = log2(_2960);
        float _2977 = log2(_2703);
        _2774 = (exp2(_2977 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].x)) * _2951.x) / cbSceneParam._m0[78u].x)) + _2700;
        _2776 = (exp2(_2977 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].y)) * _2951.y) / cbSceneParam._m0[78u].y)) + _2701;
        _2778 = (exp2(_2977 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].z)) * _2951.z) / cbSceneParam._m0[78u].z)) + _2702;
        _2780 = _2960 * _2703;
    }
    else
    {
        _2774 = _2700;
        _2776 = _2701;
        _2778 = _2702;
        _2780 = _2703;
    }
    bool _2987;
    vec4 _2790;
    vec4 _2812;
    float _2814;
    float _2818;
    float _2819;
    float _2820;
    float _2821;
    bool _2831;
    for (;;)
    {
        _2790 = cbMatDynParam._m0[0u];
        float _2792 = roundEven(_2790.y);
        bool _2793 = _2792 == 3.0;
        float _2794 = log2(_2780);
        float _2801 = exp2(_2794 * cbSceneParam._m0[78u].x) * _2672;
        float _2802 = exp2(_2794 * cbSceneParam._m0[78u].y) * _2673;
        float _2803 = exp2(_2794 * cbSceneParam._m0[78u].z) * _2674;
        float _2810 = _484 + (-0.5);
        _2812 = cbMtdParam._m0[1u];
        _2814 = _2812.y * _2810;
        float _2817 = (_2792 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2818 = _2817 * (_2793 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2774)));
        _2819 = _2817 * (_2793 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2776)));
        _2820 = _2817 * (_2793 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2778)));
        _2821 = _2810 * 0.999000012874603271484375;
        _2831 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2831)
        {
            if ((cbInstanceData._m0[_536 + 7u].x + _2821) < 0.5)
            {
                _2987 = true;
                break;
            }
        }
        uint _2928 = _538 + uint(_2790.w);
        if ((cbInstanceData._m0[_2928].w < 1.0) && ((cbInstanceData._m0[_2928].w + _2821) < 0.5))
        {
            _2987 = true;
            break;
        }
        if ((_2814 + 1.0) < _2812.x)
        {
            _2987 = true;
            break;
        }
        _2987 = false;
        break;
    }
    float _3191;
    if (_2987)
    {
        discard_state = true;
        _3191 = 0.0;
    }
    else
    {
        _3191 = cbInstanceData._m0[_2675].w;
    }
    SV_Target.x = _2818;
    SV_Target.y = _2819;
    SV_Target.z = _2820;
    SV_Target.w = _3191;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2675].w;
    discard_exit();
}


