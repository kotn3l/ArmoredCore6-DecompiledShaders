#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _977;
float _3367;
float _3368;
float _3369;
float _3370;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _239 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _244 = _239.z;
    float _248 = (_239.x * 2.0) + (-1.0);
    float _250 = (_239.y * 2.0) + (-1.0);
    float _251 = dot(vec2(_248, _250), vec2(_248, _250));
    float _3379 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _257 = sqrt(1.0 - (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))));
    float _260 = fma(_257, _217, fma(_250, _210, _248 * _196));
    float _263 = fma(_257, _218, fma(_250, _211, _248 * _197));
    float _266 = fma(_257, _219, fma(_250, _212, _248 * _198));
    float _270 = inversesqrt(dot(vec3(_260, _263, _266), vec3(_260, _263, _266)));
    float _278 = cbMtdParam._m0[9u].x + dot(vec4(_270 * _260, _270 * _263, _270 * _266, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _3390 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _279 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    vec4 _291 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _307 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _309 = _307.x;
    float _310 = _307.y;
    float _311 = _307.z;
    float _318 = ((_291.x - _309) * _279) + _309;
    float _319 = ((_291.y - _310) * _279) + _310;
    float _320 = ((_291.z - _311) * _279) + _311;
    vec4 _333 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _335 = _333.x;
    float _337 = _335 - (_335 * _279);
    vec4 _349 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _356 = (_349.x * 2.0) + (-1.0);
    float _357 = (_349.y * 2.0) + (-1.0);
    float _358 = dot(vec2(_356, _357), vec2(_356, _357));
    float _3401 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _366 = ((_349.z - _244) * _279) + _244;
    float _373 = ((_356 - _248) * _279) + _248;
    float _374 = ((_357 - _250) * _279) + _250;
    float _375 = ((sqrt(1.0 - (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) - _257) * _279) + _257;
    float _378 = fma(_375, _217, fma(_374, _210, _373 * _196));
    float _381 = fma(_375, _218, fma(_374, _211, _373 * _197));
    float _384 = fma(_375, _219, fma(_374, _212, _373 * _198));
    float _388 = inversesqrt(dot(vec3(_378, _381, _384), vec3(_378, _381, _384)));
    float _389 = _388 * _378;
    float _390 = _388 * _381;
    float _391 = _388 * _384;
    float _3412 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _392 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3434 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3445 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3456 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _396 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _412 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _454 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _464 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _454);
    float _465 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _454);
    float _466 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _454);
    float _470 = inversesqrt(dot(vec3(_464, _465, _466), vec3(_464, _465, _466)));
    float _471 = _464 * _470;
    float _472 = _465 * _470;
    float _473 = _466 * _470;
    vec4 _478 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _480 = _478.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _656 = sqrt(((_464 * _464) + (_465 * _465)) + (_466 * _466));
        float _662 = (cbMatDynParam._m0[5u].x * _656) + cbMatDynParam._m0[5u].y;
        float _3467 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _667 = (cbMatDynParam._m0[5u].z * _656) + cbMatDynParam._m0[5u].w;
        float _3478 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) - _663)) + _663) < ((_480 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _492 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _493 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _513 = fma(_391, cbSceneParam._m0[5u].z, fma(_390, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _389));
    float _516 = fma(_391, cbSceneParam._m0[6u].z, fma(_390, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _389));
    float _519 = fma(_391, cbSceneParam._m0[7u].z, fma(_390, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _389));
    uint _532 = uint(roundEven(NORMAL.w)) * 13u;
    uint _534 = _532 + 9u;
    uint _535 = _534 + uint(cbMatDynParam._m0[0u].w);
    float _541 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) * cbInstanceData._m0[_535].x;
    float _542 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * cbInstanceData._m0[_535].y;
    float _543 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0)))) * cbInstanceData._m0[_535].z;
    float _3489 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _3500 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _547 = 1.0 - _396;
    float _548 = _544 * _547;
    float _549 = _545 * _547;
    float _550 = _546 * _547;
    float _555 = (_544 + (-0.039999999105930328369140625)) * _396;
    float _556 = (_545 + (-0.039999999105930328369140625)) * _396;
    float _557 = (_546 + (-0.039999999105930328369140625)) * _396;
    float _558 = _555 + 0.039999999105930328369140625;
    float _560 = _556 + 0.039999999105930328369140625;
    float _561 = _557 + 0.039999999105930328369140625;
    vec4 _570 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _492, cbSceneParam._m0[86u].y * _493));
    float _573 = _570.x * TEXCOORD.z;
    float _574 = dot(vec3(_389, _390, _391), vec3(_471, _472, _473));
    float _577 = _574 * 2.0;
    float _581 = (_577 * _389) - _471;
    float _582 = (_577 * _390) - _472;
    float _583 = (_577 * _391) - _473;
    float _587 = abs(dot(vec3(_471, _472, _473), vec3(_389, _390, _391)));
    float _3522 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _589 = sqrt(_392);
    float _602 = exp2((_589 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_589 * 3.0));
    float _608 = (1.0 - _602) * ((_589 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _609 = _602 * _589;
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _976;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _701 = fma(_645, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _637));
        float _705 = fma(_645, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _637));
        float _709 = fma(_645, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _637));
        float _734 = _637 + _389;
        float _735 = _641 + _390;
        float _736 = _645 + _391;
        float _746 = fma(_736, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734)) - _701;
        float _747 = fma(_736, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734)) - _705;
        float _748 = fma(_736, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734)) - _709;
        float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
        float _765 = ((_752 * _746) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_701 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _766 = ((_752 * _747) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_705 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _767 = ((_752 * _748) / cbModelParam._m0[34u].z) + ((((((_709 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        float _804 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_770.x + (-0.5));
        float _806 = _804 * (_770.y + (-0.5));
        float _807 = _804 * (_770.z + (-0.5));
        float _814 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_777.x + (-0.5));
        float _816 = _814 * (_777.y + (-0.5));
        float _817 = _814 * (_777.z + (-0.5));
        float _824 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_784.x + (-0.5));
        float _826 = _824 * (_784.y + (-0.5));
        float _827 = _824 * (_784.z + (-0.5));
        float _834 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_791.x + (-0.5));
        float _836 = _834 * (_791.y + (-0.5));
        float _837 = _834 * (_791.z + (-0.5));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = _805 * 0.5;
        float _842 = _815 * 0.5;
        float _843 = _825 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _858 = (dot(vec3(_389, _390, _391), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _868 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3570 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_870 + 1.0))) + _875) * _838;
        float _885 = _806 * 0.5;
        float _886 = _816 * 0.5;
        float _887 = _826 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _901 = (dot(vec3(_389, _390, _391), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _910 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_839 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _3603 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_912 + 1.0))) + _917) * _839;
        float _927 = _807 * 0.5;
        float _928 = _817 * 0.5;
        float _929 = _827 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _943 = (dot(vec3(_389, _390, _391), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _952 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3636 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_954 + 1.0))) + _959) * _840;
        _976 = _807;
        _978 = _806;
        _979 = _805;
        _980 = _817;
        _981 = _816;
        _982 = _815;
        _983 = _827;
        _984 = _826;
        _985 = _825;
        _986 = _840;
        _987 = _839;
        _988 = _838;
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
        _990 = cbModelParam._m0[36u].z * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
    }
    else
    {
        _976 = _977;
        _978 = _977;
        _979 = _977;
        _980 = _977;
        _981 = _977;
        _982 = _977;
        _983 = _977;
        _984 = _977;
        _985 = _977;
        _986 = _977;
        _987 = _977;
        _988 = _977;
        _989 = 0.0;
        _990 = 0.0;
        _991 = 0.0;
    }
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1020 = fma(_645, cbModelParam._m0[30u].z, fma(_641, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _637));
        float _1024 = fma(_645, cbModelParam._m0[31u].z, fma(_641, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _637));
        float _1028 = fma(_645, cbModelParam._m0[32u].z, fma(_641, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _637));
        float _1051 = _637 + _389;
        float _1052 = _641 + _390;
        float _1053 = _645 + _391;
        float _1063 = fma(_1053, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051)) - _1020;
        float _1064 = fma(_1053, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051)) - _1024;
        float _1065 = fma(_1053, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051)) - _1028;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1020 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1024 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[35u].z) + ((((((_1028 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1119 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1086.x + (-0.5));
        float _1121 = _1119 * (_1086.y + (-0.5));
        float _1122 = _1119 * (_1086.z + (-0.5));
        float _1129 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1093.x + (-0.5));
        float _1131 = _1129 * (_1093.y + (-0.5));
        float _1132 = _1129 * (_1093.z + (-0.5));
        float _1139 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1100.x + (-0.5));
        float _1141 = _1139 * (_1100.y + (-0.5));
        float _1142 = _1139 * (_1100.z + (-0.5));
        float _1149 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1107.x + (-0.5));
        float _1151 = _1149 * (_1107.y + (-0.5));
        float _1152 = _1149 * (_1107.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_389, _390, _391), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3699 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1183 + 1.0))) + _1188) * _1153;
        float _1198 = _1121 * 0.5;
        float _1199 = _1131 * 0.5;
        float _1200 = _1141 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_389, _390, _391), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3732 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1225 + 1.0))) + _1230) * _1154;
        float _1240 = _1122 * 0.5;
        float _1241 = _1132 * 0.5;
        float _1242 = _1142 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_389, _390, _391), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3765 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1267 + 1.0))) + _1272) * _1155;
        _1289 = _1122;
        _1290 = _1121;
        _1291 = _1120;
        _1292 = _1132;
        _1293 = _1131;
        _1294 = _1130;
        _1295 = _1142;
        _1296 = _1141;
        _1297 = _1140;
        _1298 = _1155;
        _1299 = _1154;
        _1300 = _1153;
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _977;
        _1290 = _977;
        _1291 = _977;
        _1292 = _977;
        _1293 = _977;
        _1294 = _977;
        _1295 = _977;
        _1296 = _977;
        _1297 = _977;
        _1298 = _977;
        _1299 = _977;
        _1300 = _977;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _989)) + _989;
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _990)) + _990;
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _991)) + _991;
    float _1336 = fma(_1315, cbSceneParam._m0[89u].z, fma(_1314, cbSceneParam._m0[89u].y, _1313 * cbSceneParam._m0[89u].x));
    float _1339 = fma(_1315, cbSceneParam._m0[90u].z, fma(_1314, cbSceneParam._m0[90u].y, _1313 * cbSceneParam._m0[90u].x));
    float _1342 = fma(_1315, cbSceneParam._m0[91u].z, fma(_1314, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1313));
    float _1357 = _581 * 0.5;
    float _1358 = _582 * 0.5;
    float _1359 = _583 * 0.5;
    float _1360 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1363 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1366 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1400;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1373 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_976, _980, _983, _986));
        float _1377 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_978, _981, _984, _987));
        float _1381 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_979, _982, _985, _988));
        float _1388 = dot(vec4(cbModelParam._m0[39u]), vec4(_1357, _1358, _1359, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1411;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1402 = dot(vec4(cbModelParam._m0[40u]), vec4(_1357, _1358, _1359, 1.0));
        _1411 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1411 = 1.0;
    }
    float _1415 = (_1411 * cbModelParam._m0[1u].x) + (_1400 * (1.0 - cbModelParam._m0[1u].x));
    float _1425 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _392);
    float _1426 = isnan(_1425) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1425 : min(cbModelParam._m0[25u].z, _1425));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1475 = fma(_645, cbModelParam._m0[13u].z, fma(_641, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637)) + cbModelParam._m0[13u].w;
        float _1479 = fma(_645, cbModelParam._m0[14u].z, fma(_641, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637)) + cbModelParam._m0[14u].w;
        float _1483 = fma(_645, cbModelParam._m0[15u].z, fma(_641, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637)) + cbModelParam._m0[15u].w;
        float _1486 = fma(_583, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _581));
        float _1489 = fma(_583, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _581));
        float _1492 = fma(_583, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _581));
        float _1520;
        if (_1486 > 0.0)
        {
            _1520 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1520 = frontier_phi_19_17_ladder;
        }
        float _1727;
        if (_1489 > 0.0)
        {
            _1727 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1727 = frontier_phi_28_24_ladder;
        }
        float _1981;
        if (_1492 > 0.0)
        {
            _1981 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1981 = frontier_phi_40_35_ladder;
        }
        float _1983 = isnan(_1727) ? _1520 : (isnan(_1520) ? _1727 : min(_1520, _1727));
        float _1984 = isnan(_1981) ? _1983 : (isnan(_1983) ? _1981 : min(_1983, _1981));
        float _1988 = (_1984 * _1486) + _1475;
        float _1989 = (_1984 * _1489) + _1479;
        float _1990 = (_1984 * _1492) + _1483;
        float _1991 = _1984 * 9.9999997473787516355514526367188e-05;
        float _1993 = (-1.0) - _1991;
        float _1995 = _1991 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1990 > _1995) || ((_1990 < _1993) || ((_1989 > _1995) || ((_1989 < _1993) || ((_1988 < _1993) || (_1988 > _1995))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2118 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1990, cbModelParam._m0[9u].z, fma(_1989, cbModelParam._m0[9u].y, _1988 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1990, cbModelParam._m0[10u].z, fma(_1989, cbModelParam._m0[10u].y, _1988 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1990, cbModelParam._m0[11u].z, fma(_1989, cbModelParam._m0[11u].y, _1988 * cbModelParam._m0[11u].x))), _1426);
            frontier_phi_18_40_ladder = _2118.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2118.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2118.x * cbModelParam._m0[1u].y;
        }
        _1508 = frontier_phi_18_40_ladder_2;
        _1510 = frontier_phi_18_40_ladder_1;
        _1512 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_581, _582, _583), _1426);
        _1508 = _1496.x * cbModelParam._m0[1u].y;
        _1510 = _1496.y * cbModelParam._m0[1u].y;
        _1512 = _1496.z * cbModelParam._m0[1u].y;
    }
    float _1516 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _392);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1516 : min(cbModelParam._m0[25u].w, _1516));
    float _1610;
    float _1612;
    float _1614;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1574 = fma(_645, cbModelParam._m0[21u].z, fma(_641, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637)) + cbModelParam._m0[21u].w;
        float _1578 = fma(_645, cbModelParam._m0[22u].z, fma(_641, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637)) + cbModelParam._m0[22u].w;
        float _1582 = fma(_645, cbModelParam._m0[23u].z, fma(_641, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637)) + cbModelParam._m0[23u].w;
        float _1585 = fma(_583, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _581));
        float _1588 = fma(_583, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _581));
        float _1591 = fma(_583, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _581));
        float _1732;
        if (_1585 > 0.0)
        {
            _1732 = abs((1.0 - _1574) / _1585);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1574 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1732 = frontier_phi_30_26_ladder;
        }
        float _2008;
        if (_1588 > 0.0)
        {
            _2008 = abs((1.0 - _1578) / _1588);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1578 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2008 = frontier_phi_42_37_ladder;
        }
        float _2221;
        if (_1591 > 0.0)
        {
            _2221 = abs((1.0 - _1582) / _1591);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1582 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2221 = frontier_phi_51_48_ladder;
        }
        float _2223 = isnan(_2008) ? _1732 : (isnan(_1732) ? _2008 : min(_1732, _2008));
        float _2224 = isnan(_2221) ? _2223 : (isnan(_2223) ? _2221 : min(_2223, _2221));
        float _2228 = (_2224 * _1585) + _1574;
        float _2229 = (_2224 * _1588) + _1578;
        float _2230 = (_2224 * _1591) + _1582;
        float _2231 = _2224 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2231;
        float _2234 = _2231 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2230 > _2234) || ((_2230 < _2232) || ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 < _2232) || (_2228 > _2234))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2428 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2230, cbModelParam._m0[17u].z, fma(_2229, cbModelParam._m0[17u].y, _2228 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2230, cbModelParam._m0[18u].z, fma(_2229, cbModelParam._m0[18u].y, _2228 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2230, cbModelParam._m0[19u].z, fma(_2229, cbModelParam._m0[19u].y, _2228 * cbModelParam._m0[19u].x))), _1517);
            frontier_phi_27_51_ladder = _2428.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2428.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2428.x * cbModelParam._m0[1u].z;
        }
        _1610 = frontier_phi_27_51_ladder_2;
        _1612 = frontier_phi_27_51_ladder_1;
        _1614 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1594 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_581, _582, _583), _1517);
        _1610 = _1594.x * cbModelParam._m0[1u].z;
        _1612 = _1594.y * cbModelParam._m0[1u].z;
        _1614 = _1594.z * cbModelParam._m0[1u].z;
    }
    float _1627 = (((_608 * _558) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1610 - _1508)) + _1508);
    float _1629 = (((_608 * _560) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1612 - _1510)) + _1510);
    float _1631 = (((_608 * _561) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1614 - _1512)) + _1512);
    float _1634 = fma(_1631, cbSceneParam._m0[89u].z, fma(_1629, cbSceneParam._m0[89u].y, _1627 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1631, cbSceneParam._m0[90u].z, fma(_1629, cbSceneParam._m0[90u].y, _1627 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1631, cbSceneParam._m0[91u].z, fma(_1629, cbSceneParam._m0[91u].y, _1627 * cbSceneParam._m0[91u].x));
    uvec4 _1650 = floatBitsToUint(cbInstanceData._m0[_532 + 5u]);
    uint _1652 = _1650.x * 14u;
    uint _1653 = _1652 + 13u;
    float _1660 = _573 + (-1.0);
    float _1665 = (cbLight._m0[_1653].x * _1660) + 1.0;
    float _1666 = (cbLight._m0[_1653].y * _1660) + 1.0;
    float _1667 = (cbLight._m0[_1653].z * _1660) + 1.0;
    float _1668 = (cbLight._m0[_1653].w * _1660) + 1.0;
    uint _1669 = _1652 + 5u;
    float _1675 = isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0));
    uint _1679 = _1652 + 4u;
    float _1685 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
    uint _1689 = _1652 | 1u;
    float _1700 = dot(vec3(cbLight._m0[_1652].xyz), vec3(_389, _390, _391));
    float _1703 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_389, _390, _391));
    float _3901 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _3912 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1708 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * 0.3183098733425140380859375;
    float _1710 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * 0.3183098733425140380859375;
    float _1717 = ((cbLight._m0[_1669].x * _1675) * _1710) + ((cbLight._m0[_1679].x * _1685) * _1708);
    float _1718 = ((_1675 * cbLight._m0[_1669].y) * _1710) + ((_1685 * cbLight._m0[_1679].y) * _1708);
    float _1719 = ((_1675 * cbLight._m0[_1669].z) * _1710) + ((_1685 * cbLight._m0[_1679].z) * _1708);
    uvec4 _1724 = floatBitsToUint(cbLight._m0[_1652 + 12u]);
    bool _1726 = _1724.x == 0u;
    float _1737;
    float _1739;
    float _1741;
    if (_1726)
    {
        _1737 = _1717;
        _1739 = _1718;
        _1741 = _1719;
    }
    else
    {
        uint _1745 = _1652 + 6u;
        float _1761 = (dot(vec3(cbLight._m0[_1652 + 2u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _1762 = _1761 * _1761;
        float _3923 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1764 = isnan(1.0) ? _1667 : (isnan(_1667) ? 1.0 : min(_1667, 1.0));
        _1737 = (((cbLight._m0[_1745].x * 0.3183098733425140380859375) * _1763) * _1764) + _1717;
        _1739 = (((cbLight._m0[_1745].y * 0.3183098733425140380859375) * _1763) * _1764) + _1718;
        _1741 = (((cbLight._m0[_1745].z * 0.3183098733425140380859375) * _1763) * _1764) + _1719;
    }
    bool _1744 = _1724.y == 0u;
    float _1782;
    float _1784;
    float _1786;
    if (_1744)
    {
        _1782 = _1737;
        _1784 = _1739;
        _1786 = _1741;
    }
    else
    {
        uint _1952 = _1652 + 7u;
        float _1968 = (dot(vec3(cbLight._m0[_1652 + 3u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _1969 = _1968 * _1968;
        float _3939 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1971 = isnan(1.0) ? _1668 : (isnan(_1668) ? 1.0 : min(_1668, 1.0));
        _1782 = (((cbLight._m0[_1952].x * 0.3183098733425140380859375) * _1970) * _1971) + _1737;
        _1784 = (((cbLight._m0[_1952].y * 0.3183098733425140380859375) * _1970) * _1971) + _1739;
        _1786 = (((cbLight._m0[_1952].z * 0.3183098733425140380859375) * _1970) * _1971) + _1741;
    }
    uint _1789 = _1652 + 8u;
    float _1802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1652].w)) * _392) * 0.949999988079071044921875);
    float _1803 = _1802 * _1802;
    float _1804 = cbLight._m0[_1652].x + _471;
    float _1805 = cbLight._m0[_1652].y + _472;
    float _1806 = cbLight._m0[_1652].z + _473;
    float _1810 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
    float _1811 = _1810 * _1804;
    float _1812 = _1810 * _1805;
    float _1813 = _1810 * _1806;
    float _1814 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1652].xyz));
    float _3955 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _1818 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _1819 = dot(vec3(_389, _390, _391), vec3(_1811, _1812, _1813));
    float _3977 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _1823 = dot(vec3(cbLight._m0[_1652].xyz), vec3(_1811, _1812, _1813));
    float _3988 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1827 = _1803 * _1803;
    float _1831 = ((_1822 * _1822) * (_1827 + (-1.0))) + 1.0;
    float _1839 = exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0);
    float _1840 = 0.959999978542327880859375 - _555;
    float _1842 = 0.959999978542327880859375 - _556;
    float _1843 = 0.959999978542327880859375 - _557;
    float _1850 = 1.0 - _1803;
    float _1861 = (0.5 / (((_1818 * ((_1817 * _1850) + _1803)) + 9.9999999392252902907785028219223e-09) + (((_1818 * _1850) + _1803) * _1817))) * _1817;
    float _3999 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1863 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1827 / ((_1831 * _1831) * 3.141590118408203125));
    uint _1874 = _1652 + 9u;
    float _1885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1689].w)) * _392) * 0.949999988079071044921875);
    float _1886 = _1885 * _1885;
    float _1887 = cbLight._m0[_1689].x + _471;
    float _1888 = cbLight._m0[_1689].y + _472;
    float _1889 = cbLight._m0[_1689].z + _473;
    float _1893 = inversesqrt(dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889)));
    float _1894 = _1893 * _1887;
    float _1895 = _1893 * _1888;
    float _1896 = _1893 * _1889;
    float _1897 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1689].xyz));
    float _4010 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1901 = dot(vec3(_389, _390, _391), vec3(_1894, _1895, _1896));
    float _4021 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_1894, _1895, _1896));
    float _4032 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1886 * _1886;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1920 = exp2(log2(1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * 5.0);
    float _1927 = 1.0 - _1886;
    float _1937 = (0.5 / (((_1818 * ((_1900 * _1927) + _1886)) + 9.9999999392252902907785028219223e-09) + (((_1818 * _1927) + _1886) * _1900))) * _1900;
    float _4043 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    float _1949 = (((((_1920 * _1840) + _558) * cbLight._m0[_1874].x) * _1939) * _1675) + (((((_1839 * _1840) + _558) * cbLight._m0[_1789].x) * _1863) * _1685);
    float _1950 = (((((_1920 * _1842) + _560) * cbLight._m0[_1874].y) * _1939) * _1675) + (((((_1839 * _1842) + _560) * cbLight._m0[_1789].y) * _1863) * _1685);
    float _1951 = (((((_1920 * _1843) + _561) * cbLight._m0[_1874].z) * _1939) * _1675) + (((((_1839 * _1843) + _561) * cbLight._m0[_1789].z) * _1863) * _1685);
    float _2013;
    float _2015;
    float _2017;
    if (_1726)
    {
        _2013 = _1949;
        _2015 = _1950;
        _2017 = _1951;
    }
    else
    {
        uint _2019 = _1652 + 2u;
        uint _2023 = _1652 + 10u;
        float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _392) * 0.949999988079071044921875);
        float _2038 = _2037 * _2037;
        float _2039 = cbLight._m0[_2019].x + _471;
        float _2040 = cbLight._m0[_2019].y + _472;
        float _2041 = cbLight._m0[_2019].z + _473;
        float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
        float _2046 = _2045 * _2039;
        float _2047 = _2045 * _2040;
        float _2048 = _2045 * _2041;
        float _2049 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2019].xyz));
        float _4054 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2053 = dot(vec3(_389, _390, _391), vec3(_2046, _2047, _2048));
        float _4065 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2057 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2046, _2047, _2048));
        float _4076 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2061 = _2038 * _2038;
        float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
        float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0);
        float _2079 = 1.0 - _2038;
        float _2089 = (0.5 / (((_1818 * ((_2052 * _2079) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1818 * _2079) + _2038) * _2052))) * _2052;
        float _4087 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2091 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
        float _2092 = isnan(1.0) ? _1667 : (isnan(_1667) ? 1.0 : min(_1667, 1.0));
        _2013 = (((((_2072 * _1840) + _558) * cbLight._m0[_2023].x) * _2091) * _2092) + _1949;
        _2015 = (((((_2072 * _1842) + _560) * cbLight._m0[_2023].y) * _2091) * _2092) + _1950;
        _2017 = (((((_2072 * _1843) + _561) * cbLight._m0[_2023].z) * _2091) * _2092) + _1951;
    }
    float _2127;
    float _2129;
    float _2131;
    if (_1744)
    {
        _2127 = _2013;
        _2129 = _2015;
        _2131 = _2017;
    }
    else
    {
        uint _2138 = _1652 + 3u;
        uint _2142 = _1652 + 11u;
        float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _392) * 0.949999988079071044921875);
        float _2157 = _2156 * _2156;
        float _2158 = cbLight._m0[_2138].x + _471;
        float _2159 = cbLight._m0[_2138].y + _472;
        float _2160 = cbLight._m0[_2138].z + _473;
        float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
        float _2165 = _2164 * _2158;
        float _2166 = _2164 * _2159;
        float _2167 = _2164 * _2160;
        float _2168 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2138].xyz));
        float _4103 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2172 = dot(vec3(_389, _390, _391), vec3(_2165, _2166, _2167));
        float _4114 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2176 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2165, _2166, _2167));
        float _4125 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2180 = _2157 * _2157;
        float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
        float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0);
        float _2198 = 1.0 - _2157;
        float _2208 = (0.5 / (((_1818 * ((_2171 * _2198) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_1818 * _2198) + _2157) * _2171))) * _2171;
        float _4136 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2210 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
        float _2211 = isnan(1.0) ? _1668 : (isnan(_1668) ? 1.0 : min(_1668, 1.0));
        _2127 = (((((_2191 * _1840) + _558) * cbLight._m0[_2142].x) * _2210) * _2211) + _2013;
        _2129 = (((((_2191 * _1842) + _560) * cbLight._m0[_2142].y) * _2210) * _2211) + _2015;
        _2131 = (((((_2191 * _1843) + _561) * cbLight._m0[_2142].z) * _2210) * _2211) + _2017;
    }
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    if (_1650.y == 0u)
    {
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2286;
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2286;
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2286;
        uvec4 _2301 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2302 = _2301.x;
        uint _2313 = uint((float(_2301.y) * floor(float(uint(cbSceneParam._m0[85u].y * _493) / _2302))) + floor(float(uint(cbSceneParam._m0[85u].x * _492) / _2302)));
        float _2323 = (log2(_2289 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2324 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        uint _2327 = uint(isnan(14.0) ? _2324 : (isnan(_2324) ? 14.0 : min(_2324, 14.0)));
        uvec4 _2332 = texelFetch(g_lightClusterGridBuffer, int(((_2327 << 2u) + (_2313 << 6u)) >> 2u));
        uint _2333 = _2332.x;
        uint _2334 = _2301.z;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        if (((((1u << ((_2334 >> 4u) & 15u)) + 4294967295u) & _2333) == 0u) || ((_2334 & 240u) == 0u))
        {
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
        }
        else
        {
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2444;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            uint _2591 = 0u;
            uint _2600;
            bool _2601;
            for (;;)
            {
                _2600 = texelFetch(g_lightClassification, int((((_2327 << 5u) + (_2313 << 9u)) + (_2591 << 2u)) >> 2u)).x;
                _2601 = _2600 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2601)
                {
                    frontier_phi_68_pred = _2587;
                    frontier_phi_68_pred_1 = _2590;
                    frontier_phi_68_pred_2 = _2589;
                    frontier_phi_68_pred_3 = _2588;
                    frontier_phi_68_pred_4 = _2586;
                    frontier_phi_68_pred_5 = _2585;
                }
                else
                {
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    uint _2736;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2600;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    for (;;)
                    {
                        uint _2740 = uint(findLSB(_2736)) + (_2591 << 5u);
                        uint _2737 = (_2736 + 4294967295u) & _2736;
                        uint _2742 = _2740 * 48u;
                        vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2742)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 3u)).x));
                        uint _2762 = (_2740 * 48u) + 4u;
                        vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2762)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 3u)).x));
                        uint _2781 = (_2740 * 48u) + 8u;
                        vec3 _2792 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x));
                        float _2796 = _2756.x - _2287;
                        float _2797 = _2756.y - _2288;
                        float _2798 = _2756.z - _2289;
                        float _2799 = dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798));
                        float _2802 = inversesqrt(_2799);
                        float _2803 = _2802 * _2796;
                        float _2804 = _2802 * _2797;
                        float _2805 = _2802 * _2798;
                        float _2806 = dot(vec3(_513, _516, _519), vec3(_2803, _2804, _2805));
                        float _2811 = 1.0 - (_2799 * _2756.w);
                        float _4162 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2812 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                        float _2813 = sqrt(_2799) * _2775.w;
                        float _2816 = 1.39999997615814208984375 / (_2813 + 1.39999997615814208984375);
                        float _2817 = _2816 * _2816;
                        float _2820 = ((1.0 - _2817) * _2806) + _2817;
                        float _2823 = _2813 * _2813;
                        float _2827 = ((isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))) * _2812) / ((_2823 * 0.699999988079071044921875) + 1.0);
                        float _2831 = (-0.0) - _2287;
                        float _2832 = (-0.0) - _2288;
                        float _2833 = (-0.0) - _2289;
                        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
                        float _2838 = _2837 * _2831;
                        float _2839 = _2837 * _2832;
                        float _2840 = _2837 * _2833;
                        float _2848 = exp2(log2(1.0 / ((_2823 * 3.5) + 5.0)) * 0.25);
                        float _2849 = 1.0 - _589;
                        float _2856 = sqrt(1.0 - ((1.0 - (_2849 * _2849)) * (1.0 - (_2848 * _2848))));
                        float _2857 = _2856 * _2856;
                        float _2858 = _2857 * _2857;
                        float _2859 = _2838 + _2803;
                        float _2860 = _2839 + _2804;
                        float _2861 = _2840 + _2805;
                        float _2865 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
                        float _2869 = dot(vec3(_513, _516, _519), vec3(_2838, _2839, _2840));
                        float _4178 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2872 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2873 = dot(vec3(_513, _516, _519), vec3(_2865 * _2859, _2865 * _2860, _2865 * _2861));
                        float _4189 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2876 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                        float _2880 = ((_2876 * _2876) * (_2858 + (-1.0))) + 1.0;
                        float _2881 = _2816 * _2857;
                        float _2882 = _2881 * _2881;
                        float _2885 = ((1.0 - _2882) * _2806) + _2882;
                        float _4200 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2886 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2887 = 1.0 - _2857;
                        float _2897 = (0.5 / (((_2886 * ((_2872 * _2887) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2886 * _2887) + _2857) * _2872))) * _2886;
                        float _4211 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2908 = (((_2858 * 3.1415927410125732421875) * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) / ((_2880 * _2880) * ((_2823 * 2.1991131305694580078125) + 3.141590118408203125))) * _2812;
                        _2660 = (_2827 * _2775.x) + _2733;
                        _2661 = (_2827 * _2775.y) + _2734;
                        _2662 = (_2827 * _2775.z) + _2735;
                        _2657 = (_2908 * _2792.x) + _2730;
                        _2658 = (_2908 * _2792.y) + _2731;
                        _2659 = (_2908 * _2792.z) + _2732;
                        if (_2737 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2660;
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2737;
                        }
                    }
                    frontier_phi_68_pred = _2659;
                    frontier_phi_68_pred_1 = _2662;
                    frontier_phi_68_pred_2 = _2661;
                    frontier_phi_68_pred_3 = _2660;
                    frontier_phi_68_pred_4 = _2658;
                    frontier_phi_68_pred_5 = _2657;
                }
                _2438 = frontier_phi_68_pred;
                _2444 = frontier_phi_68_pred_1;
                _2442 = frontier_phi_68_pred_2;
                _2440 = frontier_phi_68_pred_3;
                _2436 = frontier_phi_68_pred_4;
                _2434 = frontier_phi_68_pred_5;
                uint _2592 = _2591 + 1u;
                if (_2592 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2585 = _2434;
                    _2586 = _2436;
                    _2587 = _2438;
                    _2588 = _2440;
                    _2589 = _2442;
                    _2590 = _2444;
                    _2591 = _2592;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
        }
        uvec4 _2447 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2448 = _2447.z;
        uint _2450 = (_2448 >> 8u) & 15u;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((4294967295u << _2450) & _2333) == 0u)
        {
            _2553 = _2433;
            _2555 = _2435;
            _2557 = _2437;
            _2559 = _2439;
            _2561 = _2441;
            _2563 = _2443;
        }
        else
        {
            float _2578 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
            float _2579 = _2578 * _2287;
            float _2580 = _2578 * _2288;
            float _2581 = _2578 * _2289;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2450 < ((_2448 >> 12u) & 15u))
            {
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2713 = _2433;
                float _2714 = _2435;
                float _2715 = _2437;
                float _2716 = _2439;
                float _2717 = _2441;
                float _2718 = _2443;
                uint _2719 = _2450;
                uint _2728;
                bool _2729;
                for (;;)
                {
                    _2728 = texelFetch(g_lightClassification, int((((_2327 << 5u) + (_2313 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                    _2729 = _2728 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2729)
                    {
                        frontier_phi_79_pred = _2718;
                        frontier_phi_79_pred_1 = _2717;
                        frontier_phi_79_pred_2 = _2716;
                        frontier_phi_79_pred_3 = _2715;
                        frontier_phi_79_pred_4 = _2714;
                        frontier_phi_79_pred_5 = _2713;
                    }
                    else
                    {
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        float _2937 = _2715;
                        float _2938 = _2716;
                        float _2939 = _2717;
                        float _2940 = _2718;
                        uint _2941 = _2728;
                        uint _2942;
                        vec4 _2967;
                        float _2968;
                        vec4 _2983;
                        vec3 _2995;
                        vec4 _3011;
                        vec4 _3027;
                        float _3074;
                        bool _3075;
                        for (;;)
                        {
                            uint _2952 = ((_2719 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2941));
                            _2942 = (_2941 + 4294967295u) & _2941;
                            uint _2954 = _2952 * 40u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            _2968 = _2967.w;
                            uint _2970 = (_2952 * 40u) + 4u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2985 = (_2952 * 40u) + 8u;
                            _2995 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x));
                            uint _2998 = (_2952 * 40u) + 16u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3014 = (_2952 * 40u) + 20u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3030 = (_2952 * 40u) + 24u;
                            vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3049 = (_2952 * 40u) + 28u;
                            vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            _3074 = fma(_2289, _3062.z, fma(_2288, _3062.y, _3062.x * _2287)) + _3062.w;
                            _3075 = !((fma(_2289, _3043.z, fma(_2288, _3043.y, _3043.x * _2287)) + _3043.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3075)
                            {
                                float _3102 = _2967.x - _2287;
                                float _3103 = _2967.y - _2288;
                                float _3104 = _2967.z - _2289;
                                float _3105 = dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104));
                                float _3108 = inversesqrt(_3105);
                                float _3109 = _3108 * _3102;
                                float _3110 = _3108 * _3103;
                                float _3111 = _3108 * _3104;
                                float _3115 = 1.0 - (_3105 / (_2968 * _2968));
                                float _4222 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3120 = sqrt(_3105) * _2983.w;
                                float _3122 = 1.39999997615814208984375 / (_3120 + 1.39999997615814208984375);
                                float _3123 = _3122 * _3122;
                                float _3126 = ((1.0 - _3123) * dot(vec3(_3109, _3110, _3111), vec3(_513, _516, _519))) + _3123;
                                float _3129 = _3120 * _3120;
                                float _3133 = (fma(_2289, _3011.z, fma(_2288, _3011.y, _3011.x * _2287)) + _3011.w) / _3074;
                                float _3134 = (fma(_2289, _3027.z, fma(_2288, _3027.y, _3027.x * _2287)) + _3027.w) / _3074;
                                float _3138 = 1.0 - dot(vec2(_3133, _3134), vec2(_3133, _3134));
                                float _4238 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3140 = _3139 * (((isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * _3116) / ((_3129 * 0.699999988079071044921875) + 1.0));
                                float _3152 = exp2(log2(1.0 / ((_3129 * 3.5) + 5.0)) * 0.25);
                                float _3153 = 1.0 - _589;
                                float _3160 = sqrt(1.0 - ((1.0 - (_3153 * _3153)) * (1.0 - (_3152 * _3152))));
                                float _3161 = _3160 * _3160;
                                float _3162 = _3161 * _3161;
                                float _3163 = _3109 - _2579;
                                float _3164 = _3110 - _2580;
                                float _3165 = _3111 - _2581;
                                float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                                float _3173 = dot(vec3(_513, _516, _519), vec3((-0.0) - _2579, (-0.0) - _2580, (-0.0) - _2581));
                                float _4249 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3177 = dot(vec3(_513, _516, _519), vec3(_3169 * _3163, _3169 * _3164, _3169 * _3165));
                                float _4260 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3180 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3184 = ((_3180 * _3180) * (_3162 + (-1.0))) + 1.0;
                                float _3185 = _3122 * _3161;
                                float _3186 = _3185 * _3185;
                                float _3192 = ((1.0 - _3186) * dot(vec3(_513, _516, _519), vec3(_3109, _3110, _3111))) + _3186;
                                float _4271 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3194 = 1.0 - _3161;
                                float _3204 = (0.5 / (((_3193 * ((_3176 * _3194) + _3161)) + 9.9999999392252902907785028219223e-09) + (((_3193 * _3194) + _3161) * _3176))) * _3193;
                                float _4282 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3214 = (_3139 * _3116) * (((_3162 * 3.1415927410125732421875) * (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) / ((_3184 * _3184) * ((_3129 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3140 * _2983.z;
                                frontier_phi_85_pred_1 = _3140 * _2983.y;
                                frontier_phi_85_pred_2 = _3140 * _2983.x;
                                frontier_phi_85_pred_3 = _3214 * _2995.z;
                                frontier_phi_85_pred_4 = _3214 * _2995.y;
                                frontier_phi_85_pred_5 = _3214 * _2995.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3223 = frontier_phi_85_pred;
                            _3222 = frontier_phi_85_pred_1;
                            _3221 = frontier_phi_85_pred_2;
                            _3220 = frontier_phi_85_pred_3;
                            _3219 = frontier_phi_85_pred_4;
                            _3218 = frontier_phi_85_pred_5;
                            _2925 = _3221 + _2938;
                            _2926 = _3222 + _2939;
                            _2927 = _3223 + _2940;
                            _2922 = _3218 + _2935;
                            _2923 = _3219 + _2936;
                            _2924 = _3220 + _2937;
                            if (_2942 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2942;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2927;
                        frontier_phi_79_pred_1 = _2926;
                        frontier_phi_79_pred_2 = _2925;
                        frontier_phi_79_pred_3 = _2924;
                        frontier_phi_79_pred_4 = _2923;
                        frontier_phi_79_pred_5 = _2922;
                    }
                    _2564 = frontier_phi_79_pred;
                    _2562 = frontier_phi_79_pred_1;
                    _2560 = frontier_phi_79_pred_2;
                    _2558 = frontier_phi_79_pred_3;
                    _2556 = frontier_phi_79_pred_4;
                    _2554 = frontier_phi_79_pred_5;
                    uint _2720 = _2719 + 1u;
                    if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2713 = _2554;
                        _2714 = _2556;
                        _2715 = _2558;
                        _2716 = _2560;
                        _2717 = _2562;
                        _2718 = _2564;
                        _2719 = _2720;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2560;
                frontier_phi_60_61_ladder_1 = _2564;
                frontier_phi_60_61_ladder_2 = _2562;
                frontier_phi_60_61_ladder_3 = _2558;
                frontier_phi_60_61_ladder_4 = _2556;
                frontier_phi_60_61_ladder_5 = _2554;
            }
            else
            {
                frontier_phi_60_61_ladder = _2439;
                frontier_phi_60_61_ladder_1 = _2443;
                frontier_phi_60_61_ladder_2 = _2441;
                frontier_phi_60_61_ladder_3 = _2437;
                frontier_phi_60_61_ladder_4 = _2435;
                frontier_phi_60_61_ladder_5 = _2433;
            }
            _2553 = frontier_phi_60_61_ladder_5;
            _2555 = frontier_phi_60_61_ladder_4;
            _2557 = frontier_phi_60_61_ladder_3;
            _2559 = frontier_phi_60_61_ladder;
            _2561 = frontier_phi_60_61_ladder_2;
            _2563 = frontier_phi_60_61_ladder_1;
        }
        float _2568 = isnan(1.0) ? _573 : (isnan(_573) ? 1.0 : min(_573, 1.0));
        _2345 = (_2568 * _2559) + _1782;
        _2347 = (_2568 * _2561) + _1784;
        _2349 = (_2568 * _2563) + _1786;
        _2351 = ((_2553 * _558) * _2568) + _2127;
        _2353 = ((_2555 * _560) * _2568) + _2129;
        _2355 = ((_2557 * _561) * _2568) + _2131;
    }
    else
    {
        _2345 = _1782;
        _2347 = _1784;
        _2349 = _1786;
        _2351 = _2127;
        _2353 = _2129;
        _2355 = _2131;
    }
    float _4298 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4309 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4320 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _2372 = ((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2345 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _573))) + ((_2351 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    float _2373 = ((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2347 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _573))) + ((_2353 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    float _2374 = ((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2349 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _573))) + ((_2355 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    uint _2375 = _532 + 6u;
    float _2383 = _492 / cbSceneParam._m0[86u].x;
    float _2384 = _493 / cbSceneParam._m0[86u].y;
    vec4 _2398 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, (log2((isnan(cbSceneParam._m0[77u].w) ? _412 : (isnan(_412) ? cbSceneParam._m0[77u].w : min(_412, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2400 = _2398.x;
    float _2401 = _2398.y;
    float _2402 = _2398.z;
    float _2403 = _2398.w;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    if (_412 > cbSceneParam._m0[78u].w)
    {
        float _2458 = isnan(_412) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _412 : min(cbSceneParam._m0[80u].w, _412));
        float _2459 = _2458 / _412;
        float _2470 = _2459 * _464;
        float _2471 = _465 * _2459;
        float _2472 = (-0.0) - _2471;
        float _2473 = _2459 * _466;
        float _2475 = (cbSceneParam._m0[77u].w * _2472) / _2458;
        float _2476 = _2475 + cbSceneParam._m0[79u].w;
        float _2477 = cbSceneParam._m0[79u].w - _2471;
        float _2483 = sqrt(((_2470 * _2470) + (_2471 * _2471)) + (_2473 * _2473));
        float _2486 = (1.0 - (cbSceneParam._m0[77u].w / _2458)) * _2483;
        float _2491 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2493 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2670;
        if (abs((_2472 - _2475) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2670 = ((((_2476 > 0.0) ? exp2(_2491 * _2476) : (2.0 - exp2(_2493 * _2476))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2486;
        }
        else
        {
            float _2614 = 1.0 / cbSceneParam._m0[80u].x;
            float _2615 = isnan(_2477) ? _2476 : (isnan(_2476) ? _2477 : max(_2476, _2477));
            float _2616 = isnan(_2477) ? _2476 : (isnan(_2476) ? _2477 : min(_2476, _2477));
            float _2625 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : min(_2615, 0.0));
            float _2626 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : min(_2616, 0.0));
            _2670 = ((abs(_2483 / _2472) * cbSceneParam._m0[80u].y) * ((((_2625 - _2626) * 2.0) - ((exp2(_2491 * (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0)))) - exp2(_2491 * (isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0))))) * _2614)) - ((exp2(_2493 * _2625) - exp2(_2493 * _2626)) * _2614))) + (_2486 * cbSceneParam._m0[80u].z);
        }
        vec4 _2672 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, 1.0), 0.0);
        float _2681 = exp2((_2670 * (-1.44269502162933349609375)) * (1.0 - _2672.w));
        float _2682 = log2(_2681);
        float _2698 = log2(_2403);
        _2495 = (exp2(_2698 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].x)) * _2672.x) / cbSceneParam._m0[78u].x)) + _2400;
        _2497 = (exp2(_2698 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].y)) * _2672.y) / cbSceneParam._m0[78u].y)) + _2401;
        _2499 = (exp2(_2698 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].z)) * _2672.z) / cbSceneParam._m0[78u].z)) + _2402;
        _2501 = _2681 * _2403;
    }
    else
    {
        _2495 = _2400;
        _2497 = _2401;
        _2499 = _2402;
        _2501 = _2403;
    }
    bool _2708;
    vec4 _2511;
    vec4 _2533;
    float _2535;
    float _2539;
    float _2540;
    float _2541;
    float _2542;
    bool _2552;
    for (;;)
    {
        _2511 = cbMatDynParam._m0[0u];
        float _2513 = roundEven(_2511.y);
        bool _2514 = _2513 == 3.0;
        float _2515 = log2(_2501);
        float _2522 = exp2(_2515 * cbSceneParam._m0[78u].x) * _2372;
        float _2523 = exp2(_2515 * cbSceneParam._m0[78u].y) * _2373;
        float _2524 = exp2(_2515 * cbSceneParam._m0[78u].z) * _2374;
        float _2531 = _480 + (-0.5);
        _2533 = cbMtdParam._m0[1u];
        _2535 = _2533.y * _2531;
        float _2538 = (_2513 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2539 = _2538 * (_2514 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2495)));
        _2540 = _2538 * (_2514 ? _2523 : (_2523 + (cbSceneParam._m0[72u].w * _2497)));
        _2541 = _2538 * (_2514 ? _2524 : (_2524 + (cbSceneParam._m0[72u].w * _2499)));
        _2542 = _2531 * 0.999000012874603271484375;
        _2552 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2552)
        {
            if ((cbInstanceData._m0[_532 + 7u].x + _2542) < 0.5)
            {
                _2708 = true;
                break;
            }
        }
        uint _2649 = _534 + uint(_2511.w);
        if ((cbInstanceData._m0[_2649].w < 1.0) && ((cbInstanceData._m0[_2649].w + _2542) < 0.5))
        {
            _2708 = true;
            break;
        }
        if ((_2535 + 1.0) < _2533.x)
        {
            _2708 = true;
            break;
        }
        _2708 = false;
        break;
    }
    float _2913;
    if (_2708)
    {
        discard_state = true;
        _2913 = 0.0;
    }
    else
    {
        _2913 = cbInstanceData._m0[_2375].w;
    }
    SV_Target.x = _2539;
    SV_Target.y = _2540;
    SV_Target.z = _2541;
    SV_Target.w = _2913;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2375].w;
    discard_exit();
}


