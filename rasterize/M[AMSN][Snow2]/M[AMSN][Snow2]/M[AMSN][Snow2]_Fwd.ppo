#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _932;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _240 = _235.z;
    float _244 = (_235.x * 2.0) + (-1.0);
    float _246 = (_235.y * 2.0) + (-1.0);
    float _247 = dot(vec2(_244, _246), vec2(_244, _246));
    float _3268 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _253 = sqrt(1.0 - (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))));
    float _256 = fma(_253, _213, fma(_246, _206, _244 * _192));
    float _259 = fma(_253, _214, fma(_246, _207, _244 * _193));
    float _262 = fma(_253, _215, fma(_246, _208, _244 * _194));
    float _266 = inversesqrt(dot(vec3(_256, _259, _262), vec3(_256, _259, _262)));
    float _274 = cbMtdParam._m0[9u].x + dot(vec4(_266 * _256, _266 * _259, _266 * _262, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _3279 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _275 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    vec4 _287 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _303 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _305 = _303.x;
    float _306 = _303.y;
    float _307 = _303.z;
    float _314 = ((_287.x - _305) * _275) + _305;
    float _315 = ((_287.y - _306) * _275) + _306;
    float _316 = ((_287.z - _307) * _275) + _307;
    vec4 _329 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _331 = _329.x;
    float _333 = _331 - (_331 * _275);
    vec4 _345 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _352 = (_345.x * 2.0) + (-1.0);
    float _353 = (_345.y * 2.0) + (-1.0);
    float _354 = dot(vec2(_352, _353), vec2(_352, _353));
    float _3290 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _362 = ((_345.z - _240) * _275) + _240;
    float _369 = ((_352 - _244) * _275) + _244;
    float _370 = ((_353 - _246) * _275) + _246;
    float _371 = ((sqrt(1.0 - (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) - _253) * _275) + _253;
    float _374 = fma(_371, _213, fma(_370, _206, _369 * _192));
    float _377 = fma(_371, _214, fma(_370, _207, _369 * _193));
    float _380 = fma(_371, _215, fma(_370, _208, _369 * _194));
    float _384 = inversesqrt(dot(vec3(_374, _377, _380), vec3(_374, _377, _380)));
    float _385 = _384 * _374;
    float _386 = _384 * _377;
    float _387 = _384 * _380;
    float _3301 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _388 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _3312 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3323 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3334 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3345 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _392 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _408 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _450 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _460 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _450);
    float _461 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _450);
    float _462 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _450);
    float _466 = inversesqrt(dot(vec3(_460, _461, _462), vec3(_460, _461, _462)));
    float _467 = _460 * _466;
    float _468 = _461 * _466;
    float _469 = _462 * _466;
    float _475 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _476 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _497 = fma(_387, cbSceneParam._m0[5u].z, fma(_386, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _385));
    float _500 = fma(_387, cbSceneParam._m0[6u].z, fma(_386, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _385));
    float _503 = fma(_387, cbSceneParam._m0[7u].z, fma(_386, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _385));
    uint _516 = uint(roundEven(NORMAL.w)) * 13u;
    uint _519 = (_516 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _525 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)))) * cbInstanceData._m0[_519].x;
    float _526 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0)))) * cbInstanceData._m0[_519].y;
    float _527 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0)))) * cbInstanceData._m0[_519].z;
    float _3356 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _3367 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _3378 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _531 = 1.0 - _392;
    float _532 = _528 * _531;
    float _533 = _529 * _531;
    float _534 = _530 * _531;
    float _539 = (_528 + (-0.039999999105930328369140625)) * _392;
    float _540 = (_529 + (-0.039999999105930328369140625)) * _392;
    float _541 = (_530 + (-0.039999999105930328369140625)) * _392;
    float _542 = _539 + 0.039999999105930328369140625;
    float _544 = _540 + 0.039999999105930328369140625;
    float _545 = _541 + 0.039999999105930328369140625;
    vec4 _554 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _475, cbSceneParam._m0[86u].y * _476));
    float _557 = _554.x * TEXCOORD.z;
    float _558 = dot(vec3(_385, _386, _387), vec3(_467, _468, _469));
    float _561 = _558 * 2.0;
    float _565 = (_561 * _385) - _467;
    float _566 = (_561 * _386) - _468;
    float _567 = (_561 * _387) - _469;
    float _571 = abs(dot(vec3(_467, _468, _469), vec3(_385, _386, _387)));
    float _3389 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _573 = sqrt(_388);
    float _586 = exp2((_573 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_573 * 3.0));
    float _592 = (1.0 - _586) * ((_573 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _593 = _586 * _573;
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _931;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _656 = fma(_629, cbModelParam._m0[26u].z, fma(_625, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _621));
        float _660 = fma(_629, cbModelParam._m0[27u].z, fma(_625, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _621));
        float _664 = fma(_629, cbModelParam._m0[28u].z, fma(_625, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _621));
        float _689 = _621 + _385;
        float _690 = _625 + _386;
        float _691 = _629 + _387;
        float _701 = fma(_691, cbModelParam._m0[26u].z, fma(_690, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689)) - _656;
        float _702 = fma(_691, cbModelParam._m0[27u].z, fma(_690, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689)) - _660;
        float _703 = fma(_691, cbModelParam._m0[28u].z, fma(_690, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689)) - _664;
        float _707 = inversesqrt(dot(vec3(_701, _702, _703), vec3(_701, _702, _703)));
        float _720 = ((_707 * _701) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_656 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _721 = ((_707 * _702) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_660 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _722 = ((_707 * _703) / cbModelParam._m0[34u].z) + ((((((_664 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        float _759 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_725.x + (-0.5));
        float _761 = _759 * (_725.y + (-0.5));
        float _762 = _759 * (_725.z + (-0.5));
        float _769 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_732.x + (-0.5));
        float _771 = _769 * (_732.y + (-0.5));
        float _772 = _769 * (_732.z + (-0.5));
        float _779 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_739.x + (-0.5));
        float _781 = _779 * (_739.y + (-0.5));
        float _782 = _779 * (_739.z + (-0.5));
        float _789 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_746.x + (-0.5));
        float _791 = _789 * (_746.y + (-0.5));
        float _792 = _789 * (_746.z + (-0.5));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = _760 * 0.5;
        float _797 = _770 * 0.5;
        float _798 = _780 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _813 = (dot(vec3(_385, _386, _387), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _823 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3437 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_825 + 1.0))) + _830) * _793;
        float _840 = _761 * 0.5;
        float _841 = _771 * 0.5;
        float _842 = _781 * 0.5;
        float _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _856 = (dot(vec3(_385, _386, _387), vec3(_848 * _840, _848 * _841, _848 * _842)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _865 = sqrt(((_841 * _841) + (_840 * _840)) + (_842 * _842)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3470 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_867 + 1.0))) + _872) * _794;
        float _882 = _762 * 0.5;
        float _883 = _772 * 0.5;
        float _884 = _782 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_385, _386, _387), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3503 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_909 + 1.0))) + _914) * _795;
        _931 = _762;
        _933 = _761;
        _934 = _760;
        _935 = _772;
        _936 = _771;
        _937 = _770;
        _938 = _782;
        _939 = _781;
        _940 = _780;
        _941 = _795;
        _942 = _794;
        _943 = _793;
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
    }
    else
    {
        _931 = _932;
        _933 = _932;
        _934 = _932;
        _935 = _932;
        _936 = _932;
        _937 = _932;
        _938 = _932;
        _939 = _932;
        _940 = _932;
        _941 = _932;
        _942 = _932;
        _943 = _932;
        _944 = 0.0;
        _945 = 0.0;
        _946 = 0.0;
    }
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _972 = fma(_629, cbModelParam._m0[30u].z, fma(_625, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _621));
        float _976 = fma(_629, cbModelParam._m0[31u].z, fma(_625, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _621));
        float _980 = fma(_629, cbModelParam._m0[32u].z, fma(_625, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _621));
        float _1003 = _621 + _385;
        float _1004 = _625 + _386;
        float _1005 = _629 + _387;
        float _1015 = fma(_1005, cbModelParam._m0[30u].z, fma(_1004, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1003)) - _972;
        float _1016 = fma(_1005, cbModelParam._m0[31u].z, fma(_1004, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1003)) - _976;
        float _1017 = fma(_1005, cbModelParam._m0[32u].z, fma(_1004, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1003)) - _980;
        float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
        float _1034 = ((_1021 * _1015) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_972 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1021 * _1016) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_976 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1021 * _1017) / cbModelParam._m0[35u].z) + ((((((_980 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1071 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1038.x + (-0.5));
        float _1073 = _1071 * (_1038.y + (-0.5));
        float _1074 = _1071 * (_1038.z + (-0.5));
        float _1081 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1045.x + (-0.5));
        float _1083 = _1081 * (_1045.y + (-0.5));
        float _1084 = _1081 * (_1045.z + (-0.5));
        float _1091 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1052.x + (-0.5));
        float _1093 = _1091 * (_1052.y + (-0.5));
        float _1094 = _1091 * (_1052.z + (-0.5));
        float _1101 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1059.x + (-0.5));
        float _1103 = _1101 * (_1059.y + (-0.5));
        float _1104 = _1101 * (_1059.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_385, _386, _387), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3566 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_1135 + 1.0))) + _1140) * _1105;
        float _1150 = _1073 * 0.5;
        float _1151 = _1083 * 0.5;
        float _1152 = _1093 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_385, _386, _387), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3599 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1177 + 1.0))) + _1182) * _1106;
        float _1192 = _1074 * 0.5;
        float _1193 = _1084 * 0.5;
        float _1194 = _1094 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_385, _386, _387), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3632 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1219 + 1.0))) + _1224) * _1107;
        _1241 = _1074;
        _1242 = _1073;
        _1243 = _1072;
        _1244 = _1084;
        _1245 = _1083;
        _1246 = _1082;
        _1247 = _1094;
        _1248 = _1093;
        _1249 = _1092;
        _1250 = _1107;
        _1251 = _1106;
        _1252 = _1105;
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _932;
        _1242 = _932;
        _1243 = _932;
        _1244 = _932;
        _1245 = _932;
        _1246 = _932;
        _1247 = _932;
        _1248 = _932;
        _1249 = _932;
        _1250 = _932;
        _1251 = _932;
        _1252 = _932;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _944)) + _944;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _945)) + _945;
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _946)) + _946;
    float _1288 = fma(_1267, cbSceneParam._m0[89u].z, fma(_1266, cbSceneParam._m0[89u].y, _1265 * cbSceneParam._m0[89u].x));
    float _1291 = fma(_1267, cbSceneParam._m0[90u].z, fma(_1266, cbSceneParam._m0[90u].y, _1265 * cbSceneParam._m0[90u].x));
    float _1294 = fma(_1267, cbSceneParam._m0[91u].z, fma(_1266, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1265));
    float _1309 = _565 * 0.5;
    float _1310 = _566 * 0.5;
    float _1311 = _567 * 0.5;
    float _1312 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1315 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1318 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1352;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1325 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_931, _935, _938, _941));
        float _1329 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_933, _936, _939, _942));
        float _1333 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_934, _937, _940, _943));
        float _1340 = dot(vec4(cbModelParam._m0[39u]), vec4(_1309, _1310, _1311, 1.0));
        _1352 = dot(vec3(isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1340) ? 0.0 : (isnan(0.0) ? _1340 : max(0.0, _1340))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1352 = 1.0;
    }
    float _1363;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1354 = dot(vec4(cbModelParam._m0[40u]), vec4(_1309, _1310, _1311, 1.0));
        _1363 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1354) ? 0.0 : (isnan(0.0) ? _1354 : max(0.0, _1354))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1363 = 1.0;
    }
    float _1367 = (_1363 * cbModelParam._m0[1u].x) + (_1352 * (1.0 - cbModelParam._m0[1u].x));
    float _1377 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _388);
    float _1378 = isnan(_1377) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1377 : min(cbModelParam._m0[25u].z, _1377));
    float _1460;
    float _1462;
    float _1464;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1427 = fma(_629, cbModelParam._m0[13u].z, fma(_625, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _621)) + cbModelParam._m0[13u].w;
        float _1431 = fma(_629, cbModelParam._m0[14u].z, fma(_625, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _621)) + cbModelParam._m0[14u].w;
        float _1435 = fma(_629, cbModelParam._m0[15u].z, fma(_625, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _621)) + cbModelParam._m0[15u].w;
        float _1438 = fma(_567, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _565));
        float _1441 = fma(_567, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _565));
        float _1444 = fma(_567, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _565));
        float _1472;
        if (_1438 > 0.0)
        {
            _1472 = abs((1.0 - _1427) / _1438);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1427 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1472 = frontier_phi_16_14_ladder;
        }
        float _1679;
        if (_1441 > 0.0)
        {
            _1679 = abs((1.0 - _1431) / _1441);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1431 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1679 = frontier_phi_25_21_ladder;
        }
        float _1933;
        if (_1444 > 0.0)
        {
            _1933 = abs((1.0 - _1435) / _1444);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1435 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1933 = frontier_phi_37_32_ladder;
        }
        float _1935 = isnan(_1679) ? _1472 : (isnan(_1472) ? _1679 : min(_1472, _1679));
        float _1936 = isnan(_1933) ? _1935 : (isnan(_1935) ? _1933 : min(_1935, _1933));
        float _1940 = (_1936 * _1438) + _1427;
        float _1941 = (_1936 * _1441) + _1431;
        float _1942 = (_1936 * _1444) + _1435;
        float _1943 = _1936 * 9.9999997473787516355514526367188e-05;
        float _1945 = (-1.0) - _1943;
        float _1947 = _1943 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1942 > _1947) || ((_1942 < _1945) || ((_1941 > _1947) || ((_1941 < _1945) || ((_1940 < _1945) || (_1940 > _1947))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2070 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1942, cbModelParam._m0[9u].z, fma(_1941, cbModelParam._m0[9u].y, _1940 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1942, cbModelParam._m0[10u].z, fma(_1941, cbModelParam._m0[10u].y, _1940 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1942, cbModelParam._m0[11u].z, fma(_1941, cbModelParam._m0[11u].y, _1940 * cbModelParam._m0[11u].x))), _1378);
            frontier_phi_15_37_ladder = _2070.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2070.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2070.x * cbModelParam._m0[1u].y;
        }
        _1460 = frontier_phi_15_37_ladder_2;
        _1462 = frontier_phi_15_37_ladder_1;
        _1464 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_565, _566, _567), _1378);
        _1460 = _1448.x * cbModelParam._m0[1u].y;
        _1462 = _1448.y * cbModelParam._m0[1u].y;
        _1464 = _1448.z * cbModelParam._m0[1u].y;
    }
    float _1468 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _388);
    float _1469 = isnan(_1468) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1468 : min(cbModelParam._m0[25u].w, _1468));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1526 = fma(_629, cbModelParam._m0[21u].z, fma(_625, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _621)) + cbModelParam._m0[21u].w;
        float _1530 = fma(_629, cbModelParam._m0[22u].z, fma(_625, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _621)) + cbModelParam._m0[22u].w;
        float _1534 = fma(_629, cbModelParam._m0[23u].z, fma(_625, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _621)) + cbModelParam._m0[23u].w;
        float _1537 = fma(_567, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _565));
        float _1540 = fma(_567, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _565));
        float _1543 = fma(_567, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _565));
        float _1684;
        if (_1537 > 0.0)
        {
            _1684 = abs((1.0 - _1526) / _1537);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1526 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1684 = frontier_phi_27_23_ladder;
        }
        float _1960;
        if (_1540 > 0.0)
        {
            _1960 = abs((1.0 - _1530) / _1540);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1530 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1960 = frontier_phi_39_34_ladder;
        }
        float _2173;
        if (_1543 > 0.0)
        {
            _2173 = abs((1.0 - _1534) / _1543);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1534 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2173 = frontier_phi_48_45_ladder;
        }
        float _2175 = isnan(_1960) ? _1684 : (isnan(_1684) ? _1960 : min(_1684, _1960));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1537) + _1526;
        float _2181 = (_2176 * _1540) + _1530;
        float _2182 = (_2176 * _1543) + _1534;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2184 = (-1.0) - _2183;
        float _2186 = _2183 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2182 > _2186) || ((_2182 < _2184) || ((_2181 > _2186) || ((_2181 < _2184) || ((_2180 < _2184) || (_2180 > _2186))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2380 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2182, cbModelParam._m0[17u].z, fma(_2181, cbModelParam._m0[17u].y, _2180 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2182, cbModelParam._m0[18u].z, fma(_2181, cbModelParam._m0[18u].y, _2180 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2182, cbModelParam._m0[19u].z, fma(_2181, cbModelParam._m0[19u].y, _2180 * cbModelParam._m0[19u].x))), _1469);
            frontier_phi_24_48_ladder = _2380.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2380.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2380.x * cbModelParam._m0[1u].z;
        }
        _1562 = frontier_phi_24_48_ladder_2;
        _1564 = frontier_phi_24_48_ladder_1;
        _1566 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1546 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_565, _566, _567), _1469);
        _1562 = _1546.x * cbModelParam._m0[1u].z;
        _1564 = _1546.y * cbModelParam._m0[1u].z;
        _1566 = _1546.z * cbModelParam._m0[1u].z;
    }
    float _1579 = (((_592 * _542) + _593) * _557) * ((cbModelParam._m0[1u].w * (_1562 - _1460)) + _1460);
    float _1581 = (((_592 * _544) + _593) * _557) * ((cbModelParam._m0[1u].w * (_1564 - _1462)) + _1462);
    float _1583 = (((_592 * _545) + _593) * _557) * ((cbModelParam._m0[1u].w * (_1566 - _1464)) + _1464);
    float _1586 = fma(_1583, cbSceneParam._m0[89u].z, fma(_1581, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1589 = fma(_1583, cbSceneParam._m0[90u].z, fma(_1581, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1592 = fma(_1583, cbSceneParam._m0[91u].z, fma(_1581, cbSceneParam._m0[91u].y, _1579 * cbSceneParam._m0[91u].x));
    uvec4 _1602 = floatBitsToUint(cbInstanceData._m0[_516 + 5u]);
    uint _1604 = _1602.x * 14u;
    uint _1605 = _1604 + 13u;
    float _1612 = _557 + (-1.0);
    float _1617 = (cbLight._m0[_1605].x * _1612) + 1.0;
    float _1618 = (cbLight._m0[_1605].y * _1612) + 1.0;
    float _1619 = (cbLight._m0[_1605].z * _1612) + 1.0;
    float _1620 = (cbLight._m0[_1605].w * _1612) + 1.0;
    uint _1621 = _1604 + 5u;
    float _1627 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
    uint _1631 = _1604 + 4u;
    float _1637 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
    uint _1641 = _1604 | 1u;
    float _1652 = dot(vec3(cbLight._m0[_1604].xyz), vec3(_385, _386, _387));
    float _1655 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_385, _386, _387));
    float _3768 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
    float _3779 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1660 = (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 0.3183098733425140380859375;
    float _1662 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.3183098733425140380859375;
    float _1669 = ((cbLight._m0[_1621].x * _1627) * _1662) + ((cbLight._m0[_1631].x * _1637) * _1660);
    float _1670 = ((_1627 * cbLight._m0[_1621].y) * _1662) + ((_1637 * cbLight._m0[_1631].y) * _1660);
    float _1671 = ((_1627 * cbLight._m0[_1621].z) * _1662) + ((_1637 * cbLight._m0[_1631].z) * _1660);
    uvec4 _1676 = floatBitsToUint(cbLight._m0[_1604 + 12u]);
    bool _1678 = _1676.x == 0u;
    float _1689;
    float _1691;
    float _1693;
    if (_1678)
    {
        _1689 = _1669;
        _1691 = _1670;
        _1693 = _1671;
    }
    else
    {
        uint _1697 = _1604 + 6u;
        float _1713 = (dot(vec3(cbLight._m0[_1604 + 2u].xyz), vec3(_385, _386, _387)) * 0.5) + 0.5;
        float _1714 = _1713 * _1713;
        float _3790 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1716 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
        _1689 = (((cbLight._m0[_1697].x * 0.3183098733425140380859375) * _1715) * _1716) + _1669;
        _1691 = (((cbLight._m0[_1697].y * 0.3183098733425140380859375) * _1715) * _1716) + _1670;
        _1693 = (((cbLight._m0[_1697].z * 0.3183098733425140380859375) * _1715) * _1716) + _1671;
    }
    bool _1696 = _1676.y == 0u;
    float _1734;
    float _1736;
    float _1738;
    if (_1696)
    {
        _1734 = _1689;
        _1736 = _1691;
        _1738 = _1693;
    }
    else
    {
        uint _1904 = _1604 + 7u;
        float _1920 = (dot(vec3(cbLight._m0[_1604 + 3u].xyz), vec3(_385, _386, _387)) * 0.5) + 0.5;
        float _1921 = _1920 * _1920;
        float _3806 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1923 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1734 = (((cbLight._m0[_1904].x * 0.3183098733425140380859375) * _1922) * _1923) + _1689;
        _1736 = (((cbLight._m0[_1904].y * 0.3183098733425140380859375) * _1922) * _1923) + _1691;
        _1738 = (((cbLight._m0[_1904].z * 0.3183098733425140380859375) * _1922) * _1923) + _1693;
    }
    uint _1741 = _1604 + 8u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1604].w)) * _388) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1604].x + _467;
    float _1757 = cbLight._m0[_1604].y + _468;
    float _1758 = cbLight._m0[_1604].z + _469;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_1604].xyz));
    float _3822 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _1770 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1771 = dot(vec3(_385, _386, _387), vec3(_1763, _1764, _1765));
    float _3844 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1775 = dot(vec3(cbLight._m0[_1604].xyz), vec3(_1763, _1764, _1765));
    float _3855 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1779 = _1755 * _1755;
    float _1783 = ((_1774 * _1774) * (_1779 + (-1.0))) + 1.0;
    float _1791 = exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0);
    float _1792 = 0.959999978542327880859375 - _539;
    float _1794 = 0.959999978542327880859375 - _540;
    float _1795 = 0.959999978542327880859375 - _541;
    float _1802 = 1.0 - _1755;
    float _1813 = (0.5 / (((_1770 * ((_1769 * _1802) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1802) + _1755) * _1769))) * _1769;
    float _3866 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1815 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1779 / ((_1783 * _1783) * 3.141590118408203125));
    uint _1826 = _1604 + 9u;
    float _1837 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1641].w)) * _388) * 0.949999988079071044921875);
    float _1838 = _1837 * _1837;
    float _1839 = cbLight._m0[_1641].x + _467;
    float _1840 = cbLight._m0[_1641].y + _468;
    float _1841 = cbLight._m0[_1641].z + _469;
    float _1845 = inversesqrt(dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841)));
    float _1846 = _1845 * _1839;
    float _1847 = _1845 * _1840;
    float _1848 = _1845 * _1841;
    float _1849 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_1641].xyz));
    float _3877 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1852 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _1853 = dot(vec3(_385, _386, _387), vec3(_1846, _1847, _1848));
    float _3888 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _1857 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_1846, _1847, _1848));
    float _3899 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1861 = _1838 * _1838;
    float _1865 = ((_1856 * _1856) * (_1861 + (-1.0))) + 1.0;
    float _1872 = exp2(log2(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * 5.0);
    float _1879 = 1.0 - _1838;
    float _1889 = (0.5 / (((_1770 * ((_1852 * _1879) + _1838)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1879) + _1838) * _1852))) * _1852;
    float _3910 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1861 / ((_1865 * _1865) * 3.141590118408203125));
    float _1901 = (((((_1872 * _1792) + _542) * cbLight._m0[_1826].x) * _1891) * _1627) + (((((_1791 * _1792) + _542) * cbLight._m0[_1741].x) * _1815) * _1637);
    float _1902 = (((((_1872 * _1794) + _544) * cbLight._m0[_1826].y) * _1891) * _1627) + (((((_1791 * _1794) + _544) * cbLight._m0[_1741].y) * _1815) * _1637);
    float _1903 = (((((_1872 * _1795) + _545) * cbLight._m0[_1826].z) * _1891) * _1627) + (((((_1791 * _1795) + _545) * cbLight._m0[_1741].z) * _1815) * _1637);
    float _1965;
    float _1967;
    float _1969;
    if (_1678)
    {
        _1965 = _1901;
        _1967 = _1902;
        _1969 = _1903;
    }
    else
    {
        uint _1971 = _1604 + 2u;
        uint _1975 = _1604 + 10u;
        float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _388) * 0.949999988079071044921875);
        float _1990 = _1989 * _1989;
        float _1991 = cbLight._m0[_1971].x + _467;
        float _1992 = cbLight._m0[_1971].y + _468;
        float _1993 = cbLight._m0[_1971].z + _469;
        float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
        float _1998 = _1997 * _1991;
        float _1999 = _1997 * _1992;
        float _2000 = _1997 * _1993;
        float _2001 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_1971].xyz));
        float _3921 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2004 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _2005 = dot(vec3(_385, _386, _387), vec3(_1998, _1999, _2000));
        float _3932 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2008 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _2009 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_1998, _1999, _2000));
        float _3943 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2013 = _1990 * _1990;
        float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
        float _2024 = exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0);
        float _2031 = 1.0 - _1990;
        float _2041 = (0.5 / (((_1770 * ((_2004 * _2031) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2031) + _1990) * _2004))) * _2004;
        float _3954 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2043 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
        float _2044 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
        _1965 = (((((_2024 * _1792) + _542) * cbLight._m0[_1975].x) * _2043) * _2044) + _1901;
        _1967 = (((((_2024 * _1794) + _544) * cbLight._m0[_1975].y) * _2043) * _2044) + _1902;
        _1969 = (((((_2024 * _1795) + _545) * cbLight._m0[_1975].z) * _2043) * _2044) + _1903;
    }
    float _2079;
    float _2081;
    float _2083;
    if (_1696)
    {
        _2079 = _1965;
        _2081 = _1967;
        _2083 = _1969;
    }
    else
    {
        uint _2090 = _1604 + 3u;
        uint _2094 = _1604 + 11u;
        float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _388) * 0.949999988079071044921875);
        float _2109 = _2108 * _2108;
        float _2110 = cbLight._m0[_2090].x + _467;
        float _2111 = cbLight._m0[_2090].y + _468;
        float _2112 = cbLight._m0[_2090].z + _469;
        float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
        float _2117 = _2116 * _2110;
        float _2118 = _2116 * _2111;
        float _2119 = _2116 * _2112;
        float _2120 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_2090].xyz));
        float _3970 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _2124 = dot(vec3(_385, _386, _387), vec3(_2117, _2118, _2119));
        float _3981 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _2128 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2117, _2118, _2119));
        float _3992 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2132 = _2109 * _2109;
        float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
        float _2143 = exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0);
        float _2150 = 1.0 - _2109;
        float _2160 = (0.5 / (((_1770 * ((_2123 * _2150) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2150) + _2109) * _2123))) * _2123;
        float _4003 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2162 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
        float _2163 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _2079 = (((((_2143 * _1792) + _542) * cbLight._m0[_2094].x) * _2162) * _2163) + _1965;
        _2081 = (((((_2143 * _1794) + _544) * cbLight._m0[_2094].y) * _2162) * _2163) + _1967;
        _2083 = (((((_2143 * _1795) + _545) * cbLight._m0[_2094].z) * _2162) * _2163) + _1969;
    }
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    if (_1602.y == 0u)
    {
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2238;
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2238;
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2238;
        uvec4 _2253 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2254 = _2253.x;
        uint _2265 = uint((float(_2253.y) * floor(float(uint(cbSceneParam._m0[85u].y * _476) / _2254))) + floor(float(uint(cbSceneParam._m0[85u].x * _475) / _2254)));
        float _2275 = (log2(_2241 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2276 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        uint _2279 = uint(isnan(14.0) ? _2276 : (isnan(_2276) ? 14.0 : min(_2276, 14.0)));
        uvec4 _2284 = texelFetch(g_lightClusterGridBuffer, int(((_2279 << 2u) + (_2265 << 6u)) >> 2u));
        uint _2285 = _2284.x;
        uint _2286 = _2253.z;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        if (((((1u << ((_2286 >> 4u) & 15u)) + 4294967295u) & _2285) == 0u) || ((_2286 & 240u) == 0u))
        {
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
        }
        else
        {
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            uint _2535 = 0u;
            uint _2544;
            bool _2545;
            for (;;)
            {
                _2544 = texelFetch(g_lightClassification, int((((_2279 << 5u) + (_2265 << 9u)) + (_2535 << 2u)) >> 2u)).x;
                _2545 = _2544 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2545)
                {
                    frontier_phi_63_pred = _2534;
                    frontier_phi_63_pred_1 = _2533;
                    frontier_phi_63_pred_2 = _2532;
                    frontier_phi_63_pred_3 = _2531;
                    frontier_phi_63_pred_4 = _2530;
                    frontier_phi_63_pred_5 = _2529;
                }
                else
                {
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    uint _2659;
                    _2653 = _2529;
                    _2654 = _2530;
                    _2655 = _2531;
                    _2656 = _2532;
                    _2657 = _2533;
                    _2658 = _2534;
                    _2659 = _2544;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    for (;;)
                    {
                        uint _2663 = uint(findLSB(_2659)) + (_2535 << 5u);
                        uint _2660 = (_2659 + 4294967295u) & _2659;
                        uint _2665 = _2663 * 48u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2685 = (_2663 * 48u) + 4u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2704 = (_2663 * 48u) + 8u;
                        vec3 _2715 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x));
                        float _2719 = _2679.x - _2239;
                        float _2720 = _2679.y - _2240;
                        float _2721 = _2679.z - _2241;
                        float _2722 = dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721));
                        float _2725 = inversesqrt(_2722);
                        float _2726 = _2725 * _2719;
                        float _2727 = _2725 * _2720;
                        float _2728 = _2725 * _2721;
                        float _2729 = dot(vec3(_497, _500, _503), vec3(_2726, _2727, _2728));
                        float _2734 = 1.0 - (_2722 * _2679.w);
                        float _4029 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2735 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                        float _2736 = sqrt(_2722) * _2698.w;
                        float _2739 = 1.39999997615814208984375 / (_2736 + 1.39999997615814208984375);
                        float _2740 = _2739 * _2739;
                        float _2743 = ((1.0 - _2740) * _2729) + _2740;
                        float _2746 = _2736 * _2736;
                        float _2750 = ((isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))) * _2735) / ((_2746 * 0.699999988079071044921875) + 1.0);
                        float _2754 = (-0.0) - _2239;
                        float _2755 = (-0.0) - _2240;
                        float _2756 = (-0.0) - _2241;
                        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
                        float _2761 = _2760 * _2754;
                        float _2762 = _2760 * _2755;
                        float _2763 = _2760 * _2756;
                        float _2771 = exp2(log2(1.0 / ((_2746 * 3.5) + 5.0)) * 0.25);
                        float _2772 = 1.0 - _573;
                        float _2779 = sqrt(1.0 - ((1.0 - (_2772 * _2772)) * (1.0 - (_2771 * _2771))));
                        float _2780 = _2779 * _2779;
                        float _2781 = _2780 * _2780;
                        float _2782 = _2761 + _2726;
                        float _2783 = _2762 + _2727;
                        float _2784 = _2763 + _2728;
                        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
                        float _2792 = dot(vec3(_497, _500, _503), vec3(_2761, _2762, _2763));
                        float _4045 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2795 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                        float _2796 = dot(vec3(_497, _500, _503), vec3(_2788 * _2782, _2788 * _2783, _2788 * _2784));
                        float _4056 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2799 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2803 = ((_2799 * _2799) * (_2781 + (-1.0))) + 1.0;
                        float _2804 = _2739 * _2780;
                        float _2805 = _2804 * _2804;
                        float _2808 = ((1.0 - _2805) * _2729) + _2805;
                        float _4067 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2809 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                        float _2810 = 1.0 - _2780;
                        float _2820 = (0.5 / (((_2809 * ((_2795 * _2810) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2809 * _2810) + _2780) * _2795))) * _2809;
                        float _4078 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2831 = (((_2781 * 3.1415927410125732421875) * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) / ((_2803 * _2803) * ((_2746 * 2.1991131305694580078125) + 3.141590118408203125))) * _2735;
                        _2588 = (_2750 * _2698.x) + _2656;
                        _2589 = (_2750 * _2698.y) + _2657;
                        _2590 = (_2750 * _2698.z) + _2658;
                        _2585 = (_2831 * _2715.x) + _2653;
                        _2586 = (_2831 * _2715.y) + _2654;
                        _2587 = (_2831 * _2715.z) + _2655;
                        if (_2660 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2653 = _2585;
                            _2654 = _2586;
                            _2655 = _2587;
                            _2656 = _2588;
                            _2657 = _2589;
                            _2658 = _2590;
                            _2659 = _2660;
                        }
                    }
                    frontier_phi_63_pred = _2590;
                    frontier_phi_63_pred_1 = _2589;
                    frontier_phi_63_pred_2 = _2588;
                    frontier_phi_63_pred_3 = _2587;
                    frontier_phi_63_pred_4 = _2586;
                    frontier_phi_63_pred_5 = _2585;
                }
                _2396 = frontier_phi_63_pred;
                _2394 = frontier_phi_63_pred_1;
                _2392 = frontier_phi_63_pred_2;
                _2390 = frontier_phi_63_pred_3;
                _2388 = frontier_phi_63_pred_4;
                _2386 = frontier_phi_63_pred_5;
                uint _2536 = _2535 + 1u;
                if (_2536 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2529 = _2386;
                    _2530 = _2388;
                    _2531 = _2390;
                    _2532 = _2392;
                    _2533 = _2394;
                    _2534 = _2396;
                    _2535 = _2536;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
        }
        uvec4 _2399 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2400 = _2399.z;
        uint _2402 = (_2400 >> 8u) & 15u;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        if (((4294967295u << _2402) & _2285) == 0u)
        {
            _2497 = _2385;
            _2499 = _2387;
            _2501 = _2389;
            _2503 = _2391;
            _2505 = _2393;
            _2507 = _2395;
        }
        else
        {
            float _2522 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
            float _2523 = _2522 * _2239;
            float _2524 = _2522 * _2240;
            float _2525 = _2522 * _2241;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2402 < ((_2400 >> 12u) & 15u))
            {
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2636 = _2385;
                float _2637 = _2387;
                float _2638 = _2389;
                float _2639 = _2391;
                float _2640 = _2393;
                float _2641 = _2395;
                uint _2642 = _2402;
                uint _2651;
                bool _2652;
                for (;;)
                {
                    _2651 = texelFetch(g_lightClassification, int((((_2279 << 5u) + (_2265 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                    _2652 = _2651 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2652)
                    {
                        frontier_phi_69_pred = _2641;
                        frontier_phi_69_pred_1 = _2640;
                        frontier_phi_69_pred_2 = _2639;
                        frontier_phi_69_pred_3 = _2638;
                        frontier_phi_69_pred_4 = _2637;
                        frontier_phi_69_pred_5 = _2636;
                    }
                    else
                    {
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _2849 = _2636;
                        float _2850 = _2637;
                        float _2851 = _2638;
                        float _2852 = _2639;
                        float _2853 = _2640;
                        float _2854 = _2641;
                        uint _2855 = _2651;
                        uint _2856;
                        vec4 _2881;
                        float _2882;
                        vec4 _2897;
                        vec3 _2909;
                        vec4 _2925;
                        vec4 _2941;
                        float _2988;
                        bool _2989;
                        for (;;)
                        {
                            uint _2866 = ((_2642 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2855));
                            _2856 = (_2855 + 4294967295u) & _2855;
                            uint _2868 = _2866 * 40u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            _2882 = _2881.w;
                            uint _2884 = (_2866 * 40u) + 4u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2899 = (_2866 * 40u) + 8u;
                            _2909 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x));
                            uint _2912 = (_2866 * 40u) + 16u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2928 = (_2866 * 40u) + 20u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2944 = (_2866 * 40u) + 24u;
                            vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2963 = (_2866 * 40u) + 28u;
                            vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            _2988 = fma(_2241, _2976.z, fma(_2240, _2976.y, _2976.x * _2239)) + _2976.w;
                            _2989 = !((fma(_2241, _2957.z, fma(_2240, _2957.y, _2957.x * _2239)) + _2957.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2989)
                            {
                                float _3016 = _2881.x - _2239;
                                float _3017 = _2881.y - _2240;
                                float _3018 = _2881.z - _2241;
                                float _3019 = dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018));
                                float _3022 = inversesqrt(_3019);
                                float _3023 = _3022 * _3016;
                                float _3024 = _3022 * _3017;
                                float _3025 = _3022 * _3018;
                                float _3029 = 1.0 - (_3019 / (_2882 * _2882));
                                float _4089 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3034 = sqrt(_3019) * _2897.w;
                                float _3036 = 1.39999997615814208984375 / (_3034 + 1.39999997615814208984375);
                                float _3037 = _3036 * _3036;
                                float _3040 = ((1.0 - _3037) * dot(vec3(_3023, _3024, _3025), vec3(_497, _500, _503))) + _3037;
                                float _3043 = _3034 * _3034;
                                float _3047 = (fma(_2241, _2925.z, fma(_2240, _2925.y, _2925.x * _2239)) + _2925.w) / _2988;
                                float _3048 = (fma(_2241, _2941.z, fma(_2240, _2941.y, _2941.x * _2239)) + _2941.w) / _2988;
                                float _3052 = 1.0 - dot(vec2(_3047, _3048), vec2(_3047, _3048));
                                float _4105 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3054 = _3053 * (((isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))) * _3030) / ((_3043 * 0.699999988079071044921875) + 1.0));
                                float _3066 = exp2(log2(1.0 / ((_3043 * 3.5) + 5.0)) * 0.25);
                                float _3067 = 1.0 - _573;
                                float _3074 = sqrt(1.0 - ((1.0 - (_3067 * _3067)) * (1.0 - (_3066 * _3066))));
                                float _3075 = _3074 * _3074;
                                float _3076 = _3075 * _3075;
                                float _3077 = _3023 - _2523;
                                float _3078 = _3024 - _2524;
                                float _3079 = _3025 - _2525;
                                float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
                                float _3087 = dot(vec3(_497, _500, _503), vec3((-0.0) - _2523, (-0.0) - _2524, (-0.0) - _2525));
                                float _4116 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3090 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3091 = dot(vec3(_497, _500, _503), vec3(_3083 * _3077, _3083 * _3078, _3083 * _3079));
                                float _4127 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3094 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3098 = ((_3094 * _3094) * (_3076 + (-1.0))) + 1.0;
                                float _3099 = _3036 * _3075;
                                float _3100 = _3099 * _3099;
                                float _3106 = ((1.0 - _3100) * dot(vec3(_497, _500, _503), vec3(_3023, _3024, _3025))) + _3100;
                                float _4138 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3108 = 1.0 - _3075;
                                float _3118 = (0.5 / (((_3107 * ((_3090 * _3108) + _3075)) + 9.9999999392252902907785028219223e-09) + (((_3107 * _3108) + _3075) * _3090))) * _3107;
                                float _4149 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3128 = (_3053 * _3030) * (((_3076 * 3.1415927410125732421875) * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) / ((_3098 * _3098) * ((_3043 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3054 * _2897.z;
                                frontier_phi_75_pred_1 = _3054 * _2897.y;
                                frontier_phi_75_pred_2 = _3054 * _2897.x;
                                frontier_phi_75_pred_3 = _3128 * _2909.z;
                                frontier_phi_75_pred_4 = _3128 * _2909.y;
                                frontier_phi_75_pred_5 = _3128 * _2909.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3137 = frontier_phi_75_pred;
                            _3136 = frontier_phi_75_pred_1;
                            _3135 = frontier_phi_75_pred_2;
                            _3134 = frontier_phi_75_pred_3;
                            _3133 = frontier_phi_75_pred_4;
                            _3132 = frontier_phi_75_pred_5;
                            _2839 = _3135 + _2852;
                            _2840 = _3136 + _2853;
                            _2841 = _3137 + _2854;
                            _2836 = _3132 + _2849;
                            _2837 = _3133 + _2850;
                            _2838 = _3134 + _2851;
                            if (_2856 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2856;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2841;
                        frontier_phi_69_pred_1 = _2840;
                        frontier_phi_69_pred_2 = _2839;
                        frontier_phi_69_pred_3 = _2838;
                        frontier_phi_69_pred_4 = _2837;
                        frontier_phi_69_pred_5 = _2836;
                    }
                    _2508 = frontier_phi_69_pred;
                    _2506 = frontier_phi_69_pred_1;
                    _2504 = frontier_phi_69_pred_2;
                    _2502 = frontier_phi_69_pred_3;
                    _2500 = frontier_phi_69_pred_4;
                    _2498 = frontier_phi_69_pred_5;
                    uint _2643 = _2642 + 1u;
                    if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2636 = _2498;
                        _2637 = _2500;
                        _2638 = _2502;
                        _2639 = _2504;
                        _2640 = _2506;
                        _2641 = _2508;
                        _2642 = _2643;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2508;
                frontier_phi_57_58_ladder_1 = _2506;
                frontier_phi_57_58_ladder_2 = _2504;
                frontier_phi_57_58_ladder_3 = _2502;
                frontier_phi_57_58_ladder_4 = _2500;
                frontier_phi_57_58_ladder_5 = _2498;
            }
            else
            {
                frontier_phi_57_58_ladder = _2395;
                frontier_phi_57_58_ladder_1 = _2393;
                frontier_phi_57_58_ladder_2 = _2391;
                frontier_phi_57_58_ladder_3 = _2389;
                frontier_phi_57_58_ladder_4 = _2387;
                frontier_phi_57_58_ladder_5 = _2385;
            }
            _2497 = frontier_phi_57_58_ladder_5;
            _2499 = frontier_phi_57_58_ladder_4;
            _2501 = frontier_phi_57_58_ladder_3;
            _2503 = frontier_phi_57_58_ladder_2;
            _2505 = frontier_phi_57_58_ladder_1;
            _2507 = frontier_phi_57_58_ladder;
        }
        float _2512 = isnan(1.0) ? _557 : (isnan(_557) ? 1.0 : min(_557, 1.0));
        _2297 = (_2512 * _2503) + _1734;
        _2299 = (_2512 * _2505) + _1736;
        _2301 = (_2512 * _2507) + _1738;
        _2303 = ((_2497 * _542) * _2512) + _2079;
        _2305 = ((_2499 * _544) * _2512) + _2081;
        _2307 = ((_2501 * _545) * _2512) + _2083;
    }
    else
    {
        _2297 = _1734;
        _2299 = _1736;
        _2301 = _1738;
        _2303 = _2079;
        _2305 = _2081;
        _2307 = _2083;
    }
    float _4165 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _4176 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4187 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    uint _2327 = _516 + 6u;
    float _2335 = _475 / cbSceneParam._m0[86u].x;
    float _2336 = _476 / cbSceneParam._m0[86u].y;
    vec4 _2350 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, (log2((isnan(cbSceneParam._m0[77u].w) ? _408 : (isnan(_408) ? cbSceneParam._m0[77u].w : min(_408, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2352 = _2350.x;
    float _2353 = _2350.y;
    float _2354 = _2350.z;
    float _2355 = _2350.w;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    if (_408 > cbSceneParam._m0[78u].w)
    {
        float _2410 = isnan(_408) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _408 : min(cbSceneParam._m0[80u].w, _408));
        float _2411 = _2410 / _408;
        float _2422 = _2411 * _460;
        float _2423 = _461 * _2411;
        float _2424 = (-0.0) - _2423;
        float _2425 = _2411 * _462;
        float _2427 = (cbSceneParam._m0[77u].w * _2424) / _2410;
        float _2428 = _2427 + cbSceneParam._m0[79u].w;
        float _2429 = cbSceneParam._m0[79u].w - _2423;
        float _2435 = sqrt(((_2422 * _2422) + (_2423 * _2423)) + (_2425 * _2425));
        float _2438 = (1.0 - (cbSceneParam._m0[77u].w / _2410)) * _2435;
        float _2443 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2445 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2598;
        if (abs((_2424 - _2427) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2598 = ((((_2428 > 0.0) ? exp2(_2443 * _2428) : (2.0 - exp2(_2445 * _2428))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2438;
        }
        else
        {
            float _2558 = 1.0 / cbSceneParam._m0[80u].x;
            float _2559 = isnan(_2429) ? _2428 : (isnan(_2428) ? _2429 : max(_2428, _2429));
            float _2560 = isnan(_2429) ? _2428 : (isnan(_2428) ? _2429 : min(_2428, _2429));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            float _2570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : min(_2560, 0.0));
            _2598 = ((abs(_2435 / _2424) * cbSceneParam._m0[80u].y) * ((((_2569 - _2570) * 2.0) - ((exp2(_2443 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0)))) - exp2(_2443 * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0))))) * _2558)) - ((exp2(_2445 * _2569) - exp2(_2445 * _2570)) * _2558))) + (_2438 * cbSceneParam._m0[80u].z);
        }
        vec4 _2600 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, 1.0), 0.0);
        float _2609 = exp2((_2598 * (-1.44269502162933349609375)) * (1.0 - _2600.w));
        float _2610 = log2(_2609);
        float _2626 = log2(_2355);
        _2447 = (exp2(_2626 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].x)) * _2600.x) / cbSceneParam._m0[78u].x)) + _2352;
        _2449 = (exp2(_2626 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].y)) * _2600.y) / cbSceneParam._m0[78u].y)) + _2353;
        _2451 = (exp2(_2626 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].z)) * _2600.z) / cbSceneParam._m0[78u].z)) + _2354;
        _2453 = _2609 * _2355;
    }
    else
    {
        _2447 = _2352;
        _2449 = _2353;
        _2451 = _2354;
        _2453 = _2355;
    }
    float _2465 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2466 = _2465 == 3.0;
    float _2467 = log2(_2453);
    float _2474 = exp2(_2467 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2297 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _557))) + ((_2303 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _1367)) * cbPerFrame._m0[3u].x));
    float _2475 = exp2(_2467 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2299 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _557))) + ((_2305 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1367)) * cbPerFrame._m0[3u].x));
    float _2476 = exp2(_2467 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2301 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _557))) + ((_2307 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _1367)) * cbPerFrame._m0[3u].x));
    float _2485 = (_2465 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2485 * (_2466 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2447)));
    SV_Target.y = _2485 * (_2466 ? _2475 : (_2475 + (cbSceneParam._m0[72u].w * _2449)));
    SV_Target.z = _2485 * (_2466 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2451)));
    SV_Target.w = cbInstanceData._m0[_2327].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2327].w;
}


