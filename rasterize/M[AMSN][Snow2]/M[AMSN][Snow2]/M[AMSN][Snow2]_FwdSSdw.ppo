#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Snow2_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _934;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _237 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _242 = _237.z;
    float _246 = (_237.x * 2.0) + (-1.0);
    float _248 = (_237.y * 2.0) + (-1.0);
    float _249 = dot(vec2(_246, _248), vec2(_246, _248));
    float _3294 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _255 = sqrt(1.0 - (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))));
    float _258 = fma(_255, _215, fma(_248, _208, _246 * _194));
    float _261 = fma(_255, _216, fma(_248, _209, _246 * _195));
    float _264 = fma(_255, _217, fma(_248, _210, _246 * _196));
    float _268 = inversesqrt(dot(vec3(_258, _261, _264), vec3(_258, _261, _264)));
    float _276 = cbMtdParam._m0[9u].x + dot(vec4(_268 * _258, _268 * _261, _268 * _264, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _3305 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _277 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    vec4 _289 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _305 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _307 = _305.x;
    float _308 = _305.y;
    float _309 = _305.z;
    float _316 = ((_289.x - _307) * _277) + _307;
    float _317 = ((_289.y - _308) * _277) + _308;
    float _318 = ((_289.z - _309) * _277) + _309;
    vec4 _331 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _333 = _331.x;
    float _335 = _333 - (_333 * _277);
    vec4 _347 = texture(sampler2D(M_AMSN_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _354 = (_347.x * 2.0) + (-1.0);
    float _355 = (_347.y * 2.0) + (-1.0);
    float _356 = dot(vec2(_354, _355), vec2(_354, _355));
    float _3316 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _364 = ((_347.z - _242) * _277) + _242;
    float _371 = ((_354 - _246) * _277) + _246;
    float _372 = ((_355 - _248) * _277) + _248;
    float _373 = ((sqrt(1.0 - (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) - _255) * _277) + _255;
    float _376 = fma(_373, _215, fma(_372, _208, _371 * _194));
    float _379 = fma(_373, _216, fma(_372, _209, _371 * _195));
    float _382 = fma(_373, _217, fma(_372, _210, _371 * _196));
    float _386 = inversesqrt(dot(vec3(_376, _379, _382), vec3(_376, _379, _382)));
    float _387 = _386 * _376;
    float _388 = _386 * _379;
    float _389 = _386 * _382;
    float _3327 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _390 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    float _3338 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3349 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3360 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3371 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _394 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _410 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _452 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _462 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _452);
    float _463 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _452);
    float _464 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _452);
    float _468 = inversesqrt(dot(vec3(_462, _463, _464), vec3(_462, _463, _464)));
    float _469 = _462 * _468;
    float _470 = _463 * _468;
    float _471 = _464 * _468;
    float _477 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _478 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _499 = fma(_389, cbSceneParam._m0[5u].z, fma(_388, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _387));
    float _502 = fma(_389, cbSceneParam._m0[6u].z, fma(_388, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _387));
    float _505 = fma(_389, cbSceneParam._m0[7u].z, fma(_388, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _387));
    uint _518 = uint(roundEven(NORMAL.w)) * 13u;
    uint _521 = (_518 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _527 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_521].x;
    float _528 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_521].y;
    float _529 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_521].z;
    float _3382 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _533 = 1.0 - _394;
    float _534 = _530 * _533;
    float _535 = _531 * _533;
    float _536 = _532 * _533;
    float _541 = (_530 + (-0.039999999105930328369140625)) * _394;
    float _542 = (_531 + (-0.039999999105930328369140625)) * _394;
    float _543 = (_532 + (-0.039999999105930328369140625)) * _394;
    float _544 = _541 + 0.039999999105930328369140625;
    float _546 = _542 + 0.039999999105930328369140625;
    float _547 = _543 + 0.039999999105930328369140625;
    vec4 _556 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _477, cbSceneParam._m0[86u].y * _478));
    float _559 = _556.x * TEXCOORD.z;
    float _560 = dot(vec3(_387, _388, _389), vec3(_469, _470, _471));
    float _563 = _560 * 2.0;
    float _567 = (_563 * _387) - _469;
    float _568 = (_563 * _388) - _470;
    float _569 = (_563 * _389) - _471;
    float _573 = abs(dot(vec3(_469, _470, _471), vec3(_387, _388, _389)));
    float _3415 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _575 = sqrt(_390);
    float _588 = exp2((_575 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_575 * 3.0));
    float _594 = (1.0 - _588) * ((_575 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _595 = _588 * _575;
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _933;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _658 = fma(_631, cbModelParam._m0[26u].z, fma(_627, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _623));
        float _662 = fma(_631, cbModelParam._m0[27u].z, fma(_627, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _623));
        float _666 = fma(_631, cbModelParam._m0[28u].z, fma(_627, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _623));
        float _691 = _623 + _387;
        float _692 = _627 + _388;
        float _693 = _631 + _389;
        float _703 = fma(_693, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691)) - _658;
        float _704 = fma(_693, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691)) - _662;
        float _705 = fma(_693, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691)) - _666;
        float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
        float _722 = ((_709 * _703) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_658 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _723 = ((_709 * _704) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_662 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _724 = ((_709 * _705) / cbModelParam._m0[34u].z) + ((((((_666 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        float _761 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_727.x + (-0.5));
        float _763 = _761 * (_727.y + (-0.5));
        float _764 = _761 * (_727.z + (-0.5));
        float _771 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_734.x + (-0.5));
        float _773 = _771 * (_734.y + (-0.5));
        float _774 = _771 * (_734.z + (-0.5));
        float _781 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_741.x + (-0.5));
        float _783 = _781 * (_741.y + (-0.5));
        float _784 = _781 * (_741.z + (-0.5));
        float _791 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_748.x + (-0.5));
        float _793 = _791 * (_748.y + (-0.5));
        float _794 = _791 * (_748.z + (-0.5));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = _762 * 0.5;
        float _799 = _772 * 0.5;
        float _800 = _782 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _815 = (dot(vec3(_387, _388, _389), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _825 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3463 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_827 + 1.0))) + _832) * _795;
        float _842 = _763 * 0.5;
        float _843 = _773 * 0.5;
        float _844 = _783 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_387, _388, _389), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3496 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_869 + 1.0))) + _874) * _796;
        float _884 = _764 * 0.5;
        float _885 = _774 * 0.5;
        float _886 = _784 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _900 = (dot(vec3(_387, _388, _389), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _909 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3529 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_911 + 1.0))) + _916) * _797;
        _933 = _764;
        _935 = _763;
        _936 = _762;
        _937 = _774;
        _938 = _773;
        _939 = _772;
        _940 = _784;
        _941 = _783;
        _942 = _782;
        _943 = _797;
        _944 = _796;
        _945 = _795;
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
    }
    else
    {
        _933 = _934;
        _935 = _934;
        _936 = _934;
        _937 = _934;
        _938 = _934;
        _939 = _934;
        _940 = _934;
        _941 = _934;
        _942 = _934;
        _943 = _934;
        _944 = _934;
        _945 = _934;
        _946 = 0.0;
        _947 = 0.0;
        _948 = 0.0;
    }
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _974 = fma(_631, cbModelParam._m0[30u].z, fma(_627, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _623));
        float _978 = fma(_631, cbModelParam._m0[31u].z, fma(_627, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _623));
        float _982 = fma(_631, cbModelParam._m0[32u].z, fma(_627, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _623));
        float _1005 = _623 + _387;
        float _1006 = _627 + _388;
        float _1007 = _631 + _389;
        float _1017 = fma(_1007, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1005)) - _974;
        float _1018 = fma(_1007, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1005)) - _978;
        float _1019 = fma(_1007, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1005)) - _982;
        float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
        float _1036 = ((_1023 * _1017) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_974 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1023 * _1018) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_978 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1023 * _1019) / cbModelParam._m0[35u].z) + ((((((_982 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        float _1073 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1040.x + (-0.5));
        float _1075 = _1073 * (_1040.y + (-0.5));
        float _1076 = _1073 * (_1040.z + (-0.5));
        float _1083 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1047.x + (-0.5));
        float _1085 = _1083 * (_1047.y + (-0.5));
        float _1086 = _1083 * (_1047.z + (-0.5));
        float _1093 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1054.x + (-0.5));
        float _1095 = _1093 * (_1054.y + (-0.5));
        float _1096 = _1093 * (_1054.z + (-0.5));
        float _1103 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1061.x + (-0.5));
        float _1105 = _1103 * (_1061.y + (-0.5));
        float _1106 = _1103 * (_1061.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_387, _388, _389), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3592 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1137 + 1.0))) + _1142) * _1107;
        float _1152 = _1075 * 0.5;
        float _1153 = _1085 * 0.5;
        float _1154 = _1095 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_387, _388, _389), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3625 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1179 + 1.0))) + _1184) * _1108;
        float _1194 = _1076 * 0.5;
        float _1195 = _1086 * 0.5;
        float _1196 = _1096 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_387, _388, _389), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3658 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1221 + 1.0))) + _1226) * _1109;
        _1243 = _1076;
        _1244 = _1075;
        _1245 = _1074;
        _1246 = _1086;
        _1247 = _1085;
        _1248 = _1084;
        _1249 = _1096;
        _1250 = _1095;
        _1251 = _1094;
        _1252 = _1109;
        _1253 = _1108;
        _1254 = _1107;
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _934;
        _1244 = _934;
        _1245 = _934;
        _1246 = _934;
        _1247 = _934;
        _1248 = _934;
        _1249 = _934;
        _1250 = _934;
        _1251 = _934;
        _1252 = _934;
        _1253 = _934;
        _1254 = _934;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _946)) + _946;
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _947)) + _947;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _948)) + _948;
    float _1290 = fma(_1269, cbSceneParam._m0[89u].z, fma(_1268, cbSceneParam._m0[89u].y, _1267 * cbSceneParam._m0[89u].x));
    float _1293 = fma(_1269, cbSceneParam._m0[90u].z, fma(_1268, cbSceneParam._m0[90u].y, _1267 * cbSceneParam._m0[90u].x));
    float _1296 = fma(_1269, cbSceneParam._m0[91u].z, fma(_1268, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1267));
    float _1311 = _567 * 0.5;
    float _1312 = _568 * 0.5;
    float _1313 = _569 * 0.5;
    float _1314 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1317 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1320 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1354;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1327 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_933, _937, _940, _943));
        float _1331 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_935, _938, _941, _944));
        float _1335 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_936, _939, _942, _945));
        float _1342 = dot(vec4(cbModelParam._m0[39u]), vec4(_1311, _1312, _1313, 1.0));
        _1354 = dot(vec3(isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1342) ? 0.0 : (isnan(0.0) ? _1342 : max(0.0, _1342))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1354 = 1.0;
    }
    float _1365;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1356 = dot(vec4(cbModelParam._m0[40u]), vec4(_1311, _1312, _1313, 1.0));
        _1365 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1356) ? 0.0 : (isnan(0.0) ? _1356 : max(0.0, _1356))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1365 = 1.0;
    }
    float _1369 = (_1365 * cbModelParam._m0[1u].x) + (_1354 * (1.0 - cbModelParam._m0[1u].x));
    float _1379 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _390);
    float _1380 = isnan(_1379) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1379 : min(cbModelParam._m0[25u].z, _1379));
    float _1462;
    float _1464;
    float _1466;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1429 = fma(_631, cbModelParam._m0[13u].z, fma(_627, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623)) + cbModelParam._m0[13u].w;
        float _1433 = fma(_631, cbModelParam._m0[14u].z, fma(_627, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623)) + cbModelParam._m0[14u].w;
        float _1437 = fma(_631, cbModelParam._m0[15u].z, fma(_627, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623)) + cbModelParam._m0[15u].w;
        float _1440 = fma(_569, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _567));
        float _1443 = fma(_569, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _567));
        float _1446 = fma(_569, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _567));
        float _1474;
        if (_1440 > 0.0)
        {
            _1474 = abs((1.0 - _1429) / _1440);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1429 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1474 = frontier_phi_16_14_ladder;
        }
        float _1702;
        if (_1443 > 0.0)
        {
            _1702 = abs((1.0 - _1433) / _1443);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1433 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1702 = frontier_phi_25_21_ladder;
        }
        float _1959;
        if (_1446 > 0.0)
        {
            _1959 = abs((1.0 - _1437) / _1446);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1437 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1959 = frontier_phi_37_32_ladder;
        }
        float _1961 = isnan(_1702) ? _1474 : (isnan(_1474) ? _1702 : min(_1474, _1702));
        float _1962 = isnan(_1959) ? _1961 : (isnan(_1961) ? _1959 : min(_1961, _1959));
        float _1966 = (_1962 * _1440) + _1429;
        float _1967 = (_1962 * _1443) + _1433;
        float _1968 = (_1962 * _1446) + _1437;
        float _1969 = _1962 * 9.9999997473787516355514526367188e-05;
        float _1971 = (-1.0) - _1969;
        float _1973 = _1969 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1968 > _1973) || ((_1968 < _1971) || ((_1967 > _1973) || ((_1967 < _1971) || ((_1966 < _1971) || (_1966 > _1973))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2096 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1968, cbModelParam._m0[9u].z, fma(_1967, cbModelParam._m0[9u].y, _1966 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1968, cbModelParam._m0[10u].z, fma(_1967, cbModelParam._m0[10u].y, _1966 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1968, cbModelParam._m0[11u].z, fma(_1967, cbModelParam._m0[11u].y, _1966 * cbModelParam._m0[11u].x))), _1380);
            frontier_phi_15_37_ladder = _2096.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2096.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2096.x * cbModelParam._m0[1u].y;
        }
        _1462 = frontier_phi_15_37_ladder_2;
        _1464 = frontier_phi_15_37_ladder_1;
        _1466 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1450 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_567, _568, _569), _1380);
        _1462 = _1450.x * cbModelParam._m0[1u].y;
        _1464 = _1450.y * cbModelParam._m0[1u].y;
        _1466 = _1450.z * cbModelParam._m0[1u].y;
    }
    float _1470 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _390);
    float _1471 = isnan(_1470) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1470 : min(cbModelParam._m0[25u].w, _1470));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1528 = fma(_631, cbModelParam._m0[21u].z, fma(_627, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623)) + cbModelParam._m0[21u].w;
        float _1532 = fma(_631, cbModelParam._m0[22u].z, fma(_627, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623)) + cbModelParam._m0[22u].w;
        float _1536 = fma(_631, cbModelParam._m0[23u].z, fma(_627, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623)) + cbModelParam._m0[23u].w;
        float _1539 = fma(_569, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _567));
        float _1542 = fma(_569, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _567));
        float _1545 = fma(_569, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _567));
        float _1707;
        if (_1539 > 0.0)
        {
            _1707 = abs((1.0 - _1528) / _1539);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1528 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1707 = frontier_phi_27_23_ladder;
        }
        float _1986;
        if (_1542 > 0.0)
        {
            _1986 = abs((1.0 - _1532) / _1542);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1532 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1986 = frontier_phi_39_34_ladder;
        }
        float _2199;
        if (_1545 > 0.0)
        {
            _2199 = abs((1.0 - _1536) / _1545);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1536 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2199 = frontier_phi_48_45_ladder;
        }
        float _2201 = isnan(_1986) ? _1707 : (isnan(_1707) ? _1986 : min(_1707, _1986));
        float _2202 = isnan(_2199) ? _2201 : (isnan(_2201) ? _2199 : min(_2201, _2199));
        float _2206 = (_2202 * _1539) + _1528;
        float _2207 = (_2202 * _1542) + _1532;
        float _2208 = (_2202 * _1545) + _1536;
        float _2209 = _2202 * 9.9999997473787516355514526367188e-05;
        float _2210 = (-1.0) - _2209;
        float _2212 = _2209 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2208 > _2212) || ((_2208 < _2210) || ((_2207 > _2212) || ((_2207 < _2210) || ((_2206 < _2210) || (_2206 > _2212))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2208, cbModelParam._m0[17u].z, fma(_2207, cbModelParam._m0[17u].y, _2206 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2208, cbModelParam._m0[18u].z, fma(_2207, cbModelParam._m0[18u].y, _2206 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2208, cbModelParam._m0[19u].z, fma(_2207, cbModelParam._m0[19u].y, _2206 * cbModelParam._m0[19u].x))), _1471);
            frontier_phi_24_48_ladder = _2406.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2406.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2406.x * cbModelParam._m0[1u].z;
        }
        _1564 = frontier_phi_24_48_ladder_2;
        _1566 = frontier_phi_24_48_ladder_1;
        _1568 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1548 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_567, _568, _569), _1471);
        _1564 = _1548.x * cbModelParam._m0[1u].z;
        _1566 = _1548.y * cbModelParam._m0[1u].z;
        _1568 = _1548.z * cbModelParam._m0[1u].z;
    }
    float _1581 = (((_594 * _544) + _595) * _559) * ((cbModelParam._m0[1u].w * (_1564 - _1462)) + _1462);
    float _1583 = (((_594 * _546) + _595) * _559) * ((cbModelParam._m0[1u].w * (_1566 - _1464)) + _1464);
    float _1585 = (((_594 * _547) + _595) * _559) * ((cbModelParam._m0[1u].w * (_1568 - _1466)) + _1466);
    float _1588 = fma(_1585, cbSceneParam._m0[89u].z, fma(_1583, cbSceneParam._m0[89u].y, _1581 * cbSceneParam._m0[89u].x));
    float _1591 = fma(_1585, cbSceneParam._m0[90u].z, fma(_1583, cbSceneParam._m0[90u].y, _1581 * cbSceneParam._m0[90u].x));
    float _1594 = fma(_1585, cbSceneParam._m0[91u].z, fma(_1583, cbSceneParam._m0[91u].y, _1581 * cbSceneParam._m0[91u].x));
    vec4 _1602 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_477, _478));
    float _1604 = _1602.w;
    float _1616 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1604);
    float _1617 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1604);
    float _1618 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1604);
    uvec4 _1622 = floatBitsToUint(cbInstanceData._m0[_518 + 5u]);
    uint _1624 = _1622.x * 14u;
    uint _1625 = _1624 + 13u;
    float _1632 = _559 + (-1.0);
    float _1637 = (cbLight._m0[_1625].x * _1632) + 1.0;
    float _1638 = (cbLight._m0[_1625].y * _1632) + 1.0;
    float _1639 = (cbLight._m0[_1625].z * _1632) + 1.0;
    float _1640 = (cbLight._m0[_1625].w * _1632) + 1.0;
    uint _1641 = _1624 + 5u;
    float _1647 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
    uint _1651 = _1624 + 4u;
    float _1660 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
    uint _1664 = _1624 | 1u;
    float _1675 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_387, _388, _389));
    float _1678 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_387, _388, _389));
    float _3794 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _3805 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _1683 = (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.3183098733425140380859375;
    float _1685 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.3183098733425140380859375;
    float _1692 = ((cbLight._m0[_1641].x * _1647) * _1685) + (((cbLight._m0[_1651].x * _1616) * _1660) * _1683);
    float _1693 = ((_1647 * cbLight._m0[_1641].y) * _1685) + (((cbLight._m0[_1651].y * _1617) * _1660) * _1683);
    float _1694 = ((_1647 * cbLight._m0[_1641].z) * _1685) + (((cbLight._m0[_1651].z * _1618) * _1660) * _1683);
    uvec4 _1699 = floatBitsToUint(cbLight._m0[_1624 + 12u]);
    bool _1701 = _1699.x == 0u;
    float _1712;
    float _1714;
    float _1716;
    if (_1701)
    {
        _1712 = _1692;
        _1714 = _1693;
        _1716 = _1694;
    }
    else
    {
        uint _1720 = _1624 + 6u;
        float _1736 = (dot(vec3(cbLight._m0[_1624 + 2u].xyz), vec3(_387, _388, _389)) * 0.5) + 0.5;
        float _1737 = _1736 * _1736;
        float _3816 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1739 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
        _1712 = (((cbLight._m0[_1720].x * 0.3183098733425140380859375) * _1738) * _1739) + _1692;
        _1714 = (((cbLight._m0[_1720].y * 0.3183098733425140380859375) * _1738) * _1739) + _1693;
        _1716 = (((cbLight._m0[_1720].z * 0.3183098733425140380859375) * _1738) * _1739) + _1694;
    }
    bool _1719 = _1699.y == 0u;
    float _1757;
    float _1759;
    float _1761;
    if (_1719)
    {
        _1757 = _1712;
        _1759 = _1714;
        _1761 = _1716;
    }
    else
    {
        uint _1930 = _1624 + 7u;
        float _1946 = (dot(vec3(cbLight._m0[_1624 + 3u].xyz), vec3(_387, _388, _389)) * 0.5) + 0.5;
        float _1947 = _1946 * _1946;
        float _3832 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1948 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1949 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _1757 = (((cbLight._m0[_1930].x * 0.3183098733425140380859375) * _1948) * _1949) + _1712;
        _1759 = (((cbLight._m0[_1930].y * 0.3183098733425140380859375) * _1948) * _1949) + _1714;
        _1761 = (((cbLight._m0[_1930].z * 0.3183098733425140380859375) * _1948) * _1949) + _1716;
    }
    uint _1764 = _1624 + 8u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1624].w)) * _390) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1624].x + _469;
    float _1780 = cbLight._m0[_1624].y + _470;
    float _1781 = cbLight._m0[_1624].z + _471;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_1624].xyz));
    float _3848 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _1793 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _1794 = dot(vec3(_387, _388, _389), vec3(_1786, _1787, _1788));
    float _3870 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1798 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_1786, _1787, _1788));
    float _3881 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1802 = _1778 * _1778;
    float _1806 = ((_1797 * _1797) * (_1802 + (-1.0))) + 1.0;
    float _1814 = exp2(log2(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * 5.0);
    float _1815 = 0.959999978542327880859375 - _541;
    float _1817 = 0.959999978542327880859375 - _542;
    float _1818 = 0.959999978542327880859375 - _543;
    float _1825 = 1.0 - _1778;
    float _1836 = (0.5 / (((_1793 * ((_1792 * _1825) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1825) + _1778) * _1792))) * _1792;
    float _3892 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1838 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1802 / ((_1806 * _1806) * 3.141590118408203125));
    uint _1852 = _1624 + 9u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1664].w)) * _390) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1664].x + _469;
    float _1866 = cbLight._m0[_1664].y + _470;
    float _1867 = cbLight._m0[_1664].z + _471;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_1664].xyz));
    float _3903 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1879 = dot(vec3(_387, _388, _389), vec3(_1872, _1873, _1874));
    float _3914 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1883 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_1872, _1873, _1874));
    float _3925 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1887 = _1864 * _1864;
    float _1891 = ((_1882 * _1882) * (_1887 + (-1.0))) + 1.0;
    float _1898 = exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0);
    float _1905 = 1.0 - _1864;
    float _1915 = (0.5 / (((_1793 * ((_1878 * _1905) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1905) + _1864) * _1878))) * _1878;
    float _3936 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1887 / ((_1891 * _1891) * 3.141590118408203125));
    float _1927 = (((((_1898 * _1815) + _544) * cbLight._m0[_1852].x) * _1917) * _1647) + ((((cbLight._m0[_1764].x * _1616) * ((_1814 * _1815) + _544)) * _1838) * _1660);
    float _1928 = (((((_1898 * _1817) + _546) * cbLight._m0[_1852].y) * _1917) * _1647) + ((((cbLight._m0[_1764].y * _1617) * ((_1814 * _1817) + _546)) * _1838) * _1660);
    float _1929 = (((((_1898 * _1818) + _547) * cbLight._m0[_1852].z) * _1917) * _1647) + ((((cbLight._m0[_1764].z * _1618) * ((_1814 * _1818) + _547)) * _1838) * _1660);
    float _1991;
    float _1993;
    float _1995;
    if (_1701)
    {
        _1991 = _1927;
        _1993 = _1928;
        _1995 = _1929;
    }
    else
    {
        uint _1997 = _1624 + 2u;
        uint _2001 = _1624 + 10u;
        float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _390) * 0.949999988079071044921875);
        float _2016 = _2015 * _2015;
        float _2017 = cbLight._m0[_1997].x + _469;
        float _2018 = cbLight._m0[_1997].y + _470;
        float _2019 = cbLight._m0[_1997].z + _471;
        float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
        float _2024 = _2023 * _2017;
        float _2025 = _2023 * _2018;
        float _2026 = _2023 * _2019;
        float _2027 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_1997].xyz));
        float _3947 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2030 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _2031 = dot(vec3(_387, _388, _389), vec3(_2024, _2025, _2026));
        float _3958 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2034 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _2035 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2024, _2025, _2026));
        float _3969 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2039 = _2016 * _2016;
        float _2043 = ((_2034 * _2034) * (_2039 + (-1.0))) + 1.0;
        float _2050 = exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0);
        float _2057 = 1.0 - _2016;
        float _2067 = (0.5 / (((_1793 * ((_2030 * _2057) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2057) + _2016) * _2030))) * _2030;
        float _3980 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2069 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_2039 / ((_2043 * _2043) * 3.141590118408203125));
        float _2070 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
        _1991 = (((((_2050 * _1815) + _544) * cbLight._m0[_2001].x) * _2069) * _2070) + _1927;
        _1993 = (((((_2050 * _1817) + _546) * cbLight._m0[_2001].y) * _2069) * _2070) + _1928;
        _1995 = (((((_2050 * _1818) + _547) * cbLight._m0[_2001].z) * _2069) * _2070) + _1929;
    }
    float _2105;
    float _2107;
    float _2109;
    if (_1719)
    {
        _2105 = _1991;
        _2107 = _1993;
        _2109 = _1995;
    }
    else
    {
        uint _2116 = _1624 + 3u;
        uint _2120 = _1624 + 11u;
        float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _390) * 0.949999988079071044921875);
        float _2135 = _2134 * _2134;
        float _2136 = cbLight._m0[_2116].x + _469;
        float _2137 = cbLight._m0[_2116].y + _470;
        float _2138 = cbLight._m0[_2116].z + _471;
        float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
        float _2143 = _2142 * _2136;
        float _2144 = _2142 * _2137;
        float _2145 = _2142 * _2138;
        float _2146 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_2116].xyz));
        float _3996 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _2150 = dot(vec3(_387, _388, _389), vec3(_2143, _2144, _2145));
        float _4007 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2154 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2143, _2144, _2145));
        float _4018 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2158 = _2135 * _2135;
        float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
        float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0);
        float _2176 = 1.0 - _2135;
        float _2186 = (0.5 / (((_1793 * ((_2149 * _2176) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2176) + _2135) * _2149))) * _2149;
        float _4029 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2188 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
        float _2189 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _2105 = (((((_2169 * _1815) + _544) * cbLight._m0[_2120].x) * _2188) * _2189) + _1991;
        _2107 = (((((_2169 * _1817) + _546) * cbLight._m0[_2120].y) * _2188) * _2189) + _1993;
        _2109 = (((((_2169 * _1818) + _547) * cbLight._m0[_2120].z) * _2188) * _2189) + _1995;
    }
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    if (_1622.y == 0u)
    {
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2264;
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2264;
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2264;
        uvec4 _2279 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2280 = _2279.x;
        uint _2291 = uint((float(_2279.y) * floor(float(uint(cbSceneParam._m0[85u].y * _478) / _2280))) + floor(float(uint(cbSceneParam._m0[85u].x * _477) / _2280)));
        float _2301 = (log2(_2267 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2302 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        uint _2305 = uint(isnan(14.0) ? _2302 : (isnan(_2302) ? 14.0 : min(_2302, 14.0)));
        uvec4 _2310 = texelFetch(g_lightClusterGridBuffer, int(((_2305 << 2u) + (_2291 << 6u)) >> 2u));
        uint _2311 = _2310.x;
        uint _2312 = _2279.z;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        if (((((1u << ((_2312 >> 4u) & 15u)) + 4294967295u) & _2311) == 0u) || ((_2312 & 240u) == 0u))
        {
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
        }
        else
        {
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2555 = 0.0;
            float _2556 = 0.0;
            float _2557 = 0.0;
            float _2558 = 0.0;
            float _2559 = 0.0;
            float _2560 = 0.0;
            uint _2561 = 0u;
            uint _2570;
            bool _2571;
            for (;;)
            {
                _2570 = texelFetch(g_lightClassification, int((((_2305 << 5u) + (_2291 << 9u)) + (_2561 << 2u)) >> 2u)).x;
                _2571 = _2570 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2571)
                {
                    frontier_phi_63_pred = _2560;
                    frontier_phi_63_pred_1 = _2559;
                    frontier_phi_63_pred_2 = _2558;
                    frontier_phi_63_pred_3 = _2557;
                    frontier_phi_63_pred_4 = _2556;
                    frontier_phi_63_pred_5 = _2555;
                }
                else
                {
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    uint _2685;
                    _2679 = _2555;
                    _2680 = _2556;
                    _2681 = _2557;
                    _2682 = _2558;
                    _2683 = _2559;
                    _2684 = _2560;
                    _2685 = _2570;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    for (;;)
                    {
                        uint _2689 = uint(findLSB(_2685)) + (_2561 << 5u);
                        uint _2686 = (_2685 + 4294967295u) & _2685;
                        uint _2691 = _2689 * 48u;
                        vec4 _2705 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2691)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 3u)).x));
                        uint _2711 = (_2689 * 48u) + 4u;
                        vec4 _2724 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2711)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 3u)).x));
                        uint _2730 = (_2689 * 48u) + 8u;
                        vec3 _2741 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2730)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 2u)).x));
                        float _2745 = _2705.x - _2265;
                        float _2746 = _2705.y - _2266;
                        float _2747 = _2705.z - _2267;
                        float _2748 = dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747));
                        float _2751 = inversesqrt(_2748);
                        float _2752 = _2751 * _2745;
                        float _2753 = _2751 * _2746;
                        float _2754 = _2751 * _2747;
                        float _2755 = dot(vec3(_499, _502, _505), vec3(_2752, _2753, _2754));
                        float _2760 = 1.0 - (_2748 * _2705.w);
                        float _4055 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2761 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2762 = sqrt(_2748) * _2724.w;
                        float _2765 = 1.39999997615814208984375 / (_2762 + 1.39999997615814208984375);
                        float _2766 = _2765 * _2765;
                        float _2769 = ((1.0 - _2766) * _2755) + _2766;
                        float _2772 = _2762 * _2762;
                        float _2776 = ((isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0))) * _2761) / ((_2772 * 0.699999988079071044921875) + 1.0);
                        float _2780 = (-0.0) - _2265;
                        float _2781 = (-0.0) - _2266;
                        float _2782 = (-0.0) - _2267;
                        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
                        float _2787 = _2786 * _2780;
                        float _2788 = _2786 * _2781;
                        float _2789 = _2786 * _2782;
                        float _2797 = exp2(log2(1.0 / ((_2772 * 3.5) + 5.0)) * 0.25);
                        float _2798 = 1.0 - _575;
                        float _2805 = sqrt(1.0 - ((1.0 - (_2798 * _2798)) * (1.0 - (_2797 * _2797))));
                        float _2806 = _2805 * _2805;
                        float _2807 = _2806 * _2806;
                        float _2808 = _2787 + _2752;
                        float _2809 = _2788 + _2753;
                        float _2810 = _2789 + _2754;
                        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
                        float _2818 = dot(vec3(_499, _502, _505), vec3(_2787, _2788, _2789));
                        float _4071 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2821 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2822 = dot(vec3(_499, _502, _505), vec3(_2814 * _2808, _2814 * _2809, _2814 * _2810));
                        float _4082 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2825 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2829 = ((_2825 * _2825) * (_2807 + (-1.0))) + 1.0;
                        float _2830 = _2765 * _2806;
                        float _2831 = _2830 * _2830;
                        float _2834 = ((1.0 - _2831) * _2755) + _2831;
                        float _4093 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2835 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2836 = 1.0 - _2806;
                        float _2846 = (0.5 / (((_2835 * ((_2821 * _2836) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2835 * _2836) + _2806) * _2821))) * _2835;
                        float _4104 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2857 = (((_2807 * 3.1415927410125732421875) * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) / ((_2829 * _2829) * ((_2772 * 2.1991131305694580078125) + 3.141590118408203125))) * _2761;
                        _2614 = (_2776 * _2724.x) + _2682;
                        _2615 = (_2776 * _2724.y) + _2683;
                        _2616 = (_2776 * _2724.z) + _2684;
                        _2611 = (_2857 * _2741.x) + _2679;
                        _2612 = (_2857 * _2741.y) + _2680;
                        _2613 = (_2857 * _2741.z) + _2681;
                        if (_2686 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2679 = _2611;
                            _2680 = _2612;
                            _2681 = _2613;
                            _2682 = _2614;
                            _2683 = _2615;
                            _2684 = _2616;
                            _2685 = _2686;
                        }
                    }
                    frontier_phi_63_pred = _2616;
                    frontier_phi_63_pred_1 = _2615;
                    frontier_phi_63_pred_2 = _2614;
                    frontier_phi_63_pred_3 = _2613;
                    frontier_phi_63_pred_4 = _2612;
                    frontier_phi_63_pred_5 = _2611;
                }
                _2422 = frontier_phi_63_pred;
                _2420 = frontier_phi_63_pred_1;
                _2418 = frontier_phi_63_pred_2;
                _2416 = frontier_phi_63_pred_3;
                _2414 = frontier_phi_63_pred_4;
                _2412 = frontier_phi_63_pred_5;
                uint _2562 = _2561 + 1u;
                if (_2562 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2555 = _2412;
                    _2556 = _2414;
                    _2557 = _2416;
                    _2558 = _2418;
                    _2559 = _2420;
                    _2560 = _2422;
                    _2561 = _2562;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
        }
        uvec4 _2425 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2426 = _2425.z;
        uint _2428 = (_2426 >> 8u) & 15u;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        if (((4294967295u << _2428) & _2311) == 0u)
        {
            _2523 = _2411;
            _2525 = _2413;
            _2527 = _2415;
            _2529 = _2417;
            _2531 = _2419;
            _2533 = _2421;
        }
        else
        {
            float _2548 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
            float _2549 = _2548 * _2265;
            float _2550 = _2548 * _2266;
            float _2551 = _2548 * _2267;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2428 < ((_2426 >> 12u) & 15u))
            {
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2662 = _2411;
                float _2663 = _2413;
                float _2664 = _2415;
                float _2665 = _2417;
                float _2666 = _2419;
                float _2667 = _2421;
                uint _2668 = _2428;
                uint _2677;
                bool _2678;
                for (;;)
                {
                    _2677 = texelFetch(g_lightClassification, int((((_2305 << 5u) + (_2291 << 9u)) + (_2668 << 2u)) >> 2u)).x;
                    _2678 = _2677 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2678)
                    {
                        frontier_phi_69_pred = _2667;
                        frontier_phi_69_pred_1 = _2666;
                        frontier_phi_69_pred_2 = _2665;
                        frontier_phi_69_pred_3 = _2664;
                        frontier_phi_69_pred_4 = _2663;
                        frontier_phi_69_pred_5 = _2662;
                    }
                    else
                    {
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2867;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _2875 = _2662;
                        float _2876 = _2663;
                        float _2877 = _2664;
                        float _2878 = _2665;
                        float _2879 = _2666;
                        float _2880 = _2667;
                        uint _2881 = _2677;
                        uint _2882;
                        vec4 _2907;
                        float _2908;
                        vec4 _2923;
                        vec3 _2935;
                        vec4 _2951;
                        vec4 _2967;
                        float _3014;
                        bool _3015;
                        for (;;)
                        {
                            uint _2892 = ((_2668 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2881));
                            _2882 = (_2881 + 4294967295u) & _2881;
                            uint _2894 = _2892 * 40u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            _2908 = _2907.w;
                            uint _2910 = (_2892 * 40u) + 4u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2925 = (_2892 * 40u) + 8u;
                            _2935 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x));
                            uint _2938 = (_2892 * 40u) + 16u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2954 = (_2892 * 40u) + 20u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2970 = (_2892 * 40u) + 24u;
                            vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2989 = (_2892 * 40u) + 28u;
                            vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            _3014 = fma(_2267, _3002.z, fma(_2266, _3002.y, _3002.x * _2265)) + _3002.w;
                            _3015 = !((fma(_2267, _2983.z, fma(_2266, _2983.y, _2983.x * _2265)) + _2983.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3015)
                            {
                                float _3042 = _2907.x - _2265;
                                float _3043 = _2907.y - _2266;
                                float _3044 = _2907.z - _2267;
                                float _3045 = dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044));
                                float _3048 = inversesqrt(_3045);
                                float _3049 = _3048 * _3042;
                                float _3050 = _3048 * _3043;
                                float _3051 = _3048 * _3044;
                                float _3055 = 1.0 - (_3045 / (_2908 * _2908));
                                float _4115 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3056 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3060 = sqrt(_3045) * _2923.w;
                                float _3062 = 1.39999997615814208984375 / (_3060 + 1.39999997615814208984375);
                                float _3063 = _3062 * _3062;
                                float _3066 = ((1.0 - _3063) * dot(vec3(_3049, _3050, _3051), vec3(_499, _502, _505))) + _3063;
                                float _3069 = _3060 * _3060;
                                float _3073 = (fma(_2267, _2951.z, fma(_2266, _2951.y, _2951.x * _2265)) + _2951.w) / _3014;
                                float _3074 = (fma(_2267, _2967.z, fma(_2266, _2967.y, _2967.x * _2265)) + _2967.w) / _3014;
                                float _3078 = 1.0 - dot(vec2(_3073, _3074), vec2(_3073, _3074));
                                float _4131 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3079 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3080 = _3079 * (((isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))) * _3056) / ((_3069 * 0.699999988079071044921875) + 1.0));
                                float _3092 = exp2(log2(1.0 / ((_3069 * 3.5) + 5.0)) * 0.25);
                                float _3093 = 1.0 - _575;
                                float _3100 = sqrt(1.0 - ((1.0 - (_3093 * _3093)) * (1.0 - (_3092 * _3092))));
                                float _3101 = _3100 * _3100;
                                float _3102 = _3101 * _3101;
                                float _3103 = _3049 - _2549;
                                float _3104 = _3050 - _2550;
                                float _3105 = _3051 - _2551;
                                float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                                float _3113 = dot(vec3(_499, _502, _505), vec3((-0.0) - _2549, (-0.0) - _2550, (-0.0) - _2551));
                                float _4142 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3116 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3117 = dot(vec3(_499, _502, _505), vec3(_3109 * _3103, _3109 * _3104, _3109 * _3105));
                                float _4153 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3120 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3124 = ((_3120 * _3120) * (_3102 + (-1.0))) + 1.0;
                                float _3125 = _3062 * _3101;
                                float _3126 = _3125 * _3125;
                                float _3132 = ((1.0 - _3126) * dot(vec3(_499, _502, _505), vec3(_3049, _3050, _3051))) + _3126;
                                float _4164 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3133 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3134 = 1.0 - _3101;
                                float _3144 = (0.5 / (((_3133 * ((_3116 * _3134) + _3101)) + 9.9999999392252902907785028219223e-09) + (((_3133 * _3134) + _3101) * _3116))) * _3133;
                                float _4175 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3154 = (_3079 * _3056) * (((_3102 * 3.1415927410125732421875) * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) / ((_3124 * _3124) * ((_3069 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3080 * _2923.z;
                                frontier_phi_75_pred_1 = _3080 * _2923.y;
                                frontier_phi_75_pred_2 = _3080 * _2923.x;
                                frontier_phi_75_pred_3 = _3154 * _2935.z;
                                frontier_phi_75_pred_4 = _3154 * _2935.y;
                                frontier_phi_75_pred_5 = _3154 * _2935.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3163 = frontier_phi_75_pred;
                            _3162 = frontier_phi_75_pred_1;
                            _3161 = frontier_phi_75_pred_2;
                            _3160 = frontier_phi_75_pred_3;
                            _3159 = frontier_phi_75_pred_4;
                            _3158 = frontier_phi_75_pred_5;
                            _2865 = _3161 + _2878;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            _2862 = _3158 + _2875;
                            _2863 = _3159 + _2876;
                            _2864 = _3160 + _2877;
                            if (_2882 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2882;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2867;
                        frontier_phi_69_pred_1 = _2866;
                        frontier_phi_69_pred_2 = _2865;
                        frontier_phi_69_pred_3 = _2864;
                        frontier_phi_69_pred_4 = _2863;
                        frontier_phi_69_pred_5 = _2862;
                    }
                    _2534 = frontier_phi_69_pred;
                    _2532 = frontier_phi_69_pred_1;
                    _2530 = frontier_phi_69_pred_2;
                    _2528 = frontier_phi_69_pred_3;
                    _2526 = frontier_phi_69_pred_4;
                    _2524 = frontier_phi_69_pred_5;
                    uint _2669 = _2668 + 1u;
                    if (_2669 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2662 = _2524;
                        _2663 = _2526;
                        _2664 = _2528;
                        _2665 = _2530;
                        _2666 = _2532;
                        _2667 = _2534;
                        _2668 = _2669;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2534;
                frontier_phi_57_58_ladder_1 = _2532;
                frontier_phi_57_58_ladder_2 = _2530;
                frontier_phi_57_58_ladder_3 = _2528;
                frontier_phi_57_58_ladder_4 = _2526;
                frontier_phi_57_58_ladder_5 = _2524;
            }
            else
            {
                frontier_phi_57_58_ladder = _2421;
                frontier_phi_57_58_ladder_1 = _2419;
                frontier_phi_57_58_ladder_2 = _2417;
                frontier_phi_57_58_ladder_3 = _2415;
                frontier_phi_57_58_ladder_4 = _2413;
                frontier_phi_57_58_ladder_5 = _2411;
            }
            _2523 = frontier_phi_57_58_ladder_5;
            _2525 = frontier_phi_57_58_ladder_4;
            _2527 = frontier_phi_57_58_ladder_3;
            _2529 = frontier_phi_57_58_ladder_2;
            _2531 = frontier_phi_57_58_ladder_1;
            _2533 = frontier_phi_57_58_ladder;
        }
        float _2538 = isnan(1.0) ? _559 : (isnan(_559) ? 1.0 : min(_559, 1.0));
        _2323 = (_2538 * _2529) + _1757;
        _2325 = (_2538 * _2531) + _1759;
        _2327 = (_2538 * _2533) + _1761;
        _2329 = ((_2523 * _544) * _2538) + _2105;
        _2331 = ((_2525 * _546) * _2538) + _2107;
        _2333 = ((_2527 * _547) * _2538) + _2109;
    }
    else
    {
        _2323 = _1757;
        _2325 = _1759;
        _2327 = _1761;
        _2329 = _2105;
        _2331 = _2107;
        _2333 = _2109;
    }
    float _4191 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4202 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4213 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    uint _2353 = _518 + 6u;
    float _2361 = _477 / cbSceneParam._m0[86u].x;
    float _2362 = _478 / cbSceneParam._m0[86u].y;
    vec4 _2376 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2361, _2362, (log2((isnan(cbSceneParam._m0[77u].w) ? _410 : (isnan(_410) ? cbSceneParam._m0[77u].w : min(_410, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2378 = _2376.x;
    float _2379 = _2376.y;
    float _2380 = _2376.z;
    float _2381 = _2376.w;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    if (_410 > cbSceneParam._m0[78u].w)
    {
        float _2436 = isnan(_410) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _410 : min(cbSceneParam._m0[80u].w, _410));
        float _2437 = _2436 / _410;
        float _2448 = _2437 * _462;
        float _2449 = _463 * _2437;
        float _2450 = (-0.0) - _2449;
        float _2451 = _2437 * _464;
        float _2453 = (cbSceneParam._m0[77u].w * _2450) / _2436;
        float _2454 = _2453 + cbSceneParam._m0[79u].w;
        float _2455 = cbSceneParam._m0[79u].w - _2449;
        float _2461 = sqrt(((_2448 * _2448) + (_2449 * _2449)) + (_2451 * _2451));
        float _2464 = (1.0 - (cbSceneParam._m0[77u].w / _2436)) * _2461;
        float _2469 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2471 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2624;
        if (abs((_2450 - _2453) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2624 = ((((_2454 > 0.0) ? exp2(_2469 * _2454) : (2.0 - exp2(_2471 * _2454))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2464;
        }
        else
        {
            float _2584 = 1.0 / cbSceneParam._m0[80u].x;
            float _2585 = isnan(_2455) ? _2454 : (isnan(_2454) ? _2455 : max(_2454, _2455));
            float _2586 = isnan(_2455) ? _2454 : (isnan(_2454) ? _2455 : min(_2454, _2455));
            float _2595 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : min(_2585, 0.0));
            float _2596 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : min(_2586, 0.0));
            _2624 = ((abs(_2461 / _2450) * cbSceneParam._m0[80u].y) * ((((_2595 - _2596) * 2.0) - ((exp2(_2469 * (isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0)))) - exp2(_2469 * (isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0))))) * _2584)) - ((exp2(_2471 * _2595) - exp2(_2471 * _2596)) * _2584))) + (_2464 * cbSceneParam._m0[80u].z);
        }
        vec4 _2626 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2361, _2362, 1.0), 0.0);
        float _2635 = exp2((_2624 * (-1.44269502162933349609375)) * (1.0 - _2626.w));
        float _2636 = log2(_2635);
        float _2652 = log2(_2381);
        _2473 = (exp2(_2652 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2636 * cbSceneParam._m0[78u].x)) * _2626.x) / cbSceneParam._m0[78u].x)) + _2378;
        _2475 = (exp2(_2652 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2636 * cbSceneParam._m0[78u].y)) * _2626.y) / cbSceneParam._m0[78u].y)) + _2379;
        _2477 = (exp2(_2652 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2636 * cbSceneParam._m0[78u].z)) * _2626.z) / cbSceneParam._m0[78u].z)) + _2380;
        _2479 = _2635 * _2381;
    }
    else
    {
        _2473 = _2378;
        _2475 = _2379;
        _2477 = _2380;
        _2479 = _2381;
    }
    float _2491 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2492 = _2491 == 3.0;
    float _2493 = log2(_2479);
    float _2500 = exp2(_2493 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2323 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _559))) + ((_2329 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1369)) * cbPerFrame._m0[3u].x));
    float _2501 = exp2(_2493 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2325 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _559))) + ((_2331 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1369)) * cbPerFrame._m0[3u].x));
    float _2502 = exp2(_2493 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2327 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _559))) + ((_2333 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1369)) * cbPerFrame._m0[3u].x));
    float _2511 = (_2491 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2511 * (_2492 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2473)));
    SV_Target.y = _2511 * (_2492 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2475)));
    SV_Target.z = _2511 * (_2492 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2477)));
    SV_Target.w = cbInstanceData._m0[_2353].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2353].w;
}


