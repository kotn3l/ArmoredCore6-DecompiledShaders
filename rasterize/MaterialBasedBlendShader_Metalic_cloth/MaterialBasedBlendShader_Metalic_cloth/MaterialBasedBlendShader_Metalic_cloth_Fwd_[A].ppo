#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[25];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_12;
layout(set = 0, binding = 10) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1406;
float _3785;
float _3786;
float _3787;
float _3788;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248;
    float _249;
    float _250;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
    }
    else
    {
        _248 = _234;
        _249 = _235;
        _250 = _236;
    }
    vec4 _279 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _307 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _339 = _333.x * cbMatDynParam._m0[17u].x;
    float _340 = _333.y * cbMatDynParam._m0[17u].y;
    float _341 = _333.z * cbMatDynParam._m0[17u].z;
    vec4 _360 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _379 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _390 = (cbMatDynParam._m0[21u].y * TEXCOORD.w) + 1.0;
    float _392 = (0.5 - ((cbMatDynParam._m0[21u].x * 0.5) * (1.0099999904632568359375 - _379.x))) * _390;
    float _3797 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _400 = (_393 * ((_360.x * cbMatDynParam._m0[18u].x) - _339)) + _339;
    float _401 = (_393 * ((_360.y * cbMatDynParam._m0[18u].y) - _340)) + _340;
    float _402 = (_393 * ((_360.z * cbMatDynParam._m0[18u].z) - _341)) + _341;
    float _407 = (0.5 - ((cbMatDynParam._m0[23u].z * 0.5) * (1.0099999904632568359375 - _379.y))) * _390;
    float _3808 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _415 = (((_307.x * cbMatDynParam._m0[19u].x) - _400) * _408) + _400;
    float _416 = (((_307.y * cbMatDynParam._m0[19u].y) - _401) * _408) + _401;
    float _417 = (((_307.z * cbMatDynParam._m0[19u].z) - _402) * _408) + _402;
    float _422 = (0.5 - ((cbMatDynParam._m0[23u].w * 0.5) * (1.0099999904632568359375 - _379.z))) * _390;
    float _3819 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _430 = (((_279.x * cbMatDynParam._m0[20u].x) - _415) * _423) + _415;
    float _431 = (((_279.y * cbMatDynParam._m0[20u].y) - _416) * _423) + _416;
    float _432 = (((_279.z * cbMatDynParam._m0[20u].z) - _417) * _423) + _417;
    vec4 _444 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_12, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _447 = _444.x * _333.w;
    float _463 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_10, SS_SpecularMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x + cbMatDynParam._m0[23u].x;
    float _464 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _485 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_3, SS_SpecularMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w)).x + cbMatDynParam._m0[22u].w;
    float _486 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _503 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_4, SS_SpecularMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x + cbMatDynParam._m0[22u].y;
    float _504 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _505 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
    float _522 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_9, SS_SpecularMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[14u].w)).x + cbMatDynParam._m0[22u].z;
    float _523 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _527 = (_393 * ((isnan(1.0) ? _523 : (isnan(_523) ? 1.0 : min(_523, 1.0))) - _505)) + _505;
    float _530 = (((isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0))) - _527) * _408) + _527;
    float _533 = (((isnan(1.0) ? _464 : (isnan(_464) ? 1.0 : min(_464, 1.0))) - _530) * _423) + _530;
    vec4 _550 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _569 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _588 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[10u].w));
    float _590 = _588.x;
    float _591 = _588.y;
    float _593 = _588.z * cbMatDynParam._m0[22u].x;
    vec4 _607 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[11u].w));
    float _615 = (((_607.z * cbMatDynParam._m0[21u].w) - _593) * _393) + _593;
    float _618 = (((_569.z * cbMatDynParam._m0[21u].z) - _615) * _408) + _615;
    float _621 = (((_550.z * cbMatDynParam._m0[24u].x) - _618) * _423) + _618;
    vec4 _634 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[12u].w));
    float _648 = (_393 * (_607.x - _590)) + _590;
    float _649 = (_393 * (_607.y - _591)) + _591;
    float _654 = ((_569.x - _648) * _408) + _648;
    float _655 = ((_569.y - _649) * _408) + _649;
    float _664 = ((((_550.x - _654) * _423) + _654) * 2.0) + (-1.0);
    float _665 = ((((_550.y - _655) * _423) + _655) * 2.0) + (-1.0);
    float _666 = dot(vec2(_664, _665), vec2(_664, _665));
    float _3870 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _671 = sqrt(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))));
    float _675 = _664 + (cbMatDynParam._m0[23u].y * ((_634.x * 2.0) + (-1.0)));
    float _676 = _665 + (cbMatDynParam._m0[23u].y * ((_634.y * 2.0) + (-1.0)));
    float _679 = fma(_671, _248, fma(_676, _240 * TANGENT.x, (_226 * _218) * _675));
    float _682 = fma(_671, _249, fma(_676, _240 * TANGENT.y, (_226 * _219) * _675));
    float _685 = fma(_671, _250, fma(_676, _240 * TANGENT.z, (_226 * _220) * _675));
    float _689 = inversesqrt(dot(vec3(_679, _682, _685), vec3(_679, _682, _685)));
    float _690 = _689 * _679;
    float _691 = _689 * _682;
    float _692 = _689 * _685;
    float _3881 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _693 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _694 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _695 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _696 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _697 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _698 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _714 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _764 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _754);
    float _765 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _754);
    float _766 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _754);
    float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
    float _771 = _764 * _770;
    float _772 = _765 * _770;
    float _773 = _766 * _770;
    vec4 _778 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _780 = _778.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1086 = sqrt(((_764 * _764) + (_765 * _765)) + (_766 * _766));
        float _1092 = (cbMatDynParam._m0[5u].x * _1086) + cbMatDynParam._m0[5u].y;
        float _3947 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1097 = (cbMatDynParam._m0[5u].z * _1086) + cbMatDynParam._m0[5u].w;
        float _3958 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) - _1093)) + _1093) < ((_780 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _791 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _792 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _794 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _796 = _794.w;
    float _814 = fma(_692, cbSceneParam._m0[5u].z, fma(_691, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _690));
    float _817 = fma(_692, cbSceneParam._m0[6u].z, fma(_691, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _690));
    float _820 = fma(_692, cbSceneParam._m0[7u].z, fma(_691, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _690));
    vec4 _822 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _824 = _822.x;
    float _836 = (((_822.y - _694) + (_822.w * _694)) * cbMtdParam._m0[3u].x) + _694;
    vec4 _837 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _853 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_824 * _824)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _837.z;
    float _862 = (((cbMatDynParam._m0[15u].x - _698) * cbMatDynParam._m0[15u].w) * _853) + _698;
    float _871 = ((_853 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _836)) + _836;
    uint _895 = uint(roundEven(NORMAL.w)) * 13u;
    uint _896 = _895 + 9u;
    uint _897 = _896 + uint(cbMatDynParam._m0[0u].w);
    float _903 = (cbMtdParam._m0[0u].x * _695) * cbInstanceData._m0[_897].x;
    float _904 = (cbMtdParam._m0[0u].y * _696) * cbInstanceData._m0[_897].y;
    float _905 = (cbMtdParam._m0[0u].z * _697) * cbInstanceData._m0[_897].z;
    float _3969 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    vec4 _909 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _914 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _925 = (((_914.x - _862) + (_914.w * _862)) * cbMtdParam._m0[3u].x) + _862;
    float _938 = (cbMtdParam._m0[3u].x * (((_906 * _796) - _906) + _909.x)) + _906;
    float _939 = (cbMtdParam._m0[3u].x * (((_907 * _796) - _907) + _909.y)) + _907;
    float _940 = (cbMtdParam._m0[3u].x * (((_908 * _796) - _908) + _909.z)) + _908;
    float _954 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_862 * (_695 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_862 * (_696 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_862 * (_697 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w)).z;
    float _958 = _954 * cbMatDynParam._m0[13u].w;
    float _968 = (_958 * (cbMatDynParam._m0[13u].x - _938)) + _938;
    float _969 = (_958 * (cbMatDynParam._m0[13u].y - _939)) + _939;
    float _970 = (_958 * (cbMatDynParam._m0[13u].z - _940)) + _940;
    float _978 = ((_954 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _925)) + _925;
    float _979 = 1.0 - _978;
    float _980 = _979 * _968;
    float _981 = _979 * _969;
    float _982 = _979 * _970;
    float _986 = (_968 + (-0.039999999105930328369140625)) * _978;
    float _987 = (_969 + (-0.039999999105930328369140625)) * _978;
    float _988 = (_970 + (-0.039999999105930328369140625)) * _978;
    float _989 = _986 + 0.039999999105930328369140625;
    float _990 = _987 + 0.039999999105930328369140625;
    float _991 = _988 + 0.039999999105930328369140625;
    vec4 _1000 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _791, cbSceneParam._m0[86u].y * _792));
    float _1003 = _1000.x * TEXCOORD_8;
    float _1004 = dot(vec3(_690, _691, _692), vec3(_771, _772, _773));
    float _1007 = _1004 * 2.0;
    float _1011 = (_1007 * _690) - _771;
    float _1012 = (_1007 * _691) - _772;
    float _1013 = (_1007 * _692) - _773;
    float _1017 = abs(dot(vec3(_771, _772, _773), vec3(_690, _691, _692)));
    float _4002 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1019 = sqrt(_871);
    float _1032 = exp2((_1019 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1019 * 3.0));
    float _1038 = (1.0 - _1032) * ((_1019 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1039 = _1032 * _1019;
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1405;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1131 = fma(_1075, cbModelParam._m0[26u].z, fma(_1071, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1067));
        float _1135 = fma(_1075, cbModelParam._m0[27u].z, fma(_1071, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1067));
        float _1139 = fma(_1075, cbModelParam._m0[28u].z, fma(_1071, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1067));
        float _1163 = _1067 + _690;
        float _1164 = _1071 + _691;
        float _1165 = _1075 + _692;
        float _1175 = fma(_1165, cbModelParam._m0[26u].z, fma(_1164, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163)) - _1131;
        float _1176 = fma(_1165, cbModelParam._m0[27u].z, fma(_1164, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163)) - _1135;
        float _1177 = fma(_1165, cbModelParam._m0[28u].z, fma(_1164, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163)) - _1139;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1131 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1135 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[34u].z) + ((((((_1139 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1233 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1199.x + (-0.5));
        float _1235 = _1233 * (_1199.y + (-0.5));
        float _1236 = _1233 * (_1199.z + (-0.5));
        float _1243 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1206.x + (-0.5));
        float _1245 = _1243 * (_1206.y + (-0.5));
        float _1246 = _1243 * (_1206.z + (-0.5));
        float _1253 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1213.x + (-0.5));
        float _1255 = _1253 * (_1213.y + (-0.5));
        float _1256 = _1253 * (_1213.z + (-0.5));
        float _1263 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1220.x + (-0.5));
        float _1265 = _1263 * (_1220.y + (-0.5));
        float _1266 = _1263 * (_1220.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1287 = (dot(vec3(_690, _691, _692), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1297 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4050 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1299 + 1.0))) + _1304) * _1267;
        float _1314 = _1235 * 0.5;
        float _1315 = _1245 * 0.5;
        float _1316 = _1255 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_690, _691, _692), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4083 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1341 + 1.0))) + _1346) * _1268;
        float _1356 = _1236 * 0.5;
        float _1357 = _1246 * 0.5;
        float _1358 = _1256 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_690, _691, _692), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4116 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1383 + 1.0))) + _1388) * _1269;
        _1405 = _1236;
        _1407 = _1235;
        _1408 = _1234;
        _1409 = _1246;
        _1410 = _1245;
        _1411 = _1244;
        _1412 = _1256;
        _1413 = _1255;
        _1414 = _1254;
        _1415 = _1269;
        _1416 = _1268;
        _1417 = _1267;
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
    }
    else
    {
        _1405 = _1406;
        _1407 = _1406;
        _1408 = _1406;
        _1409 = _1406;
        _1410 = _1406;
        _1411 = _1406;
        _1412 = _1406;
        _1413 = _1406;
        _1414 = _1406;
        _1415 = _1406;
        _1416 = _1406;
        _1417 = _1406;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1449 = fma(_1075, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067));
        float _1453 = fma(_1075, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067));
        float _1457 = fma(_1075, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067));
        float _1480 = _1067 + _690;
        float _1481 = _1071 + _691;
        float _1482 = _1075 + _692;
        float _1492 = fma(_1482, cbModelParam._m0[30u].z, fma(_1481, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1480)) - _1449;
        float _1493 = fma(_1482, cbModelParam._m0[31u].z, fma(_1481, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1480)) - _1453;
        float _1494 = fma(_1482, cbModelParam._m0[32u].z, fma(_1481, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1480)) - _1457;
        float _1498 = inversesqrt(dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494)));
        float _1511 = ((_1498 * _1492) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1449 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1498 * _1493) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1453 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1498 * _1494) / cbModelParam._m0[35u].z) + ((((((_1457 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        float _1548 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1515.x + (-0.5));
        float _1550 = _1548 * (_1515.y + (-0.5));
        float _1551 = _1548 * (_1515.z + (-0.5));
        float _1558 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1522.x + (-0.5));
        float _1560 = _1558 * (_1522.y + (-0.5));
        float _1561 = _1558 * (_1522.z + (-0.5));
        float _1568 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1529.x + (-0.5));
        float _1570 = _1568 * (_1529.y + (-0.5));
        float _1571 = _1568 * (_1529.z + (-0.5));
        float _1578 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1536.x + (-0.5));
        float _1580 = _1578 * (_1536.y + (-0.5));
        float _1581 = _1578 * (_1536.z + (-0.5));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = _1549 * 0.5;
        float _1586 = _1559 * 0.5;
        float _1587 = _1569 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_690, _691, _692), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4179 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1612 + 1.0))) + _1617) * _1582;
        float _1627 = _1550 * 0.5;
        float _1628 = _1560 * 0.5;
        float _1629 = _1570 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_690, _691, _692), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4212 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1654 + 1.0))) + _1659) * _1583;
        float _1669 = _1551 * 0.5;
        float _1670 = _1561 * 0.5;
        float _1671 = _1571 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_690, _691, _692), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4245 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1696 + 1.0))) + _1701) * _1584;
        _1718 = _1551;
        _1719 = _1550;
        _1720 = _1549;
        _1721 = _1561;
        _1722 = _1560;
        _1723 = _1559;
        _1724 = _1571;
        _1725 = _1570;
        _1726 = _1569;
        _1727 = _1584;
        _1728 = _1583;
        _1729 = _1582;
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
    }
    else
    {
        _1718 = _1406;
        _1719 = _1406;
        _1720 = _1406;
        _1721 = _1406;
        _1722 = _1406;
        _1723 = _1406;
        _1724 = _1406;
        _1725 = _1406;
        _1726 = _1406;
        _1727 = _1406;
        _1728 = _1406;
        _1729 = _1406;
        _1730 = 0.0;
        _1731 = 0.0;
        _1732 = 0.0;
    }
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1418)) + _1418;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1419)) + _1419;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1420)) + _1420;
    float _1765 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1743, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1743, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1743, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1742));
    float _1786 = _1011 * 0.5;
    float _1787 = _1012 * 0.5;
    float _1788 = _1013 * 0.5;
    float _1789 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1792 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1795 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1826;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1802 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1405, _1409, _1412, _1415));
        float _1806 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1407, _1410, _1413, _1416));
        float _1810 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1817 = dot(vec4(cbModelParam._m0[39u]), vec4(_1786, _1787, _1788, 1.0));
        _1826 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1817) ? 0.0 : (isnan(0.0) ? _1817 : max(0.0, _1817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1826 = 1.0;
    }
    float _1837;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1828 = dot(vec4(cbModelParam._m0[40u]), vec4(_1786, _1787, _1788, 1.0));
        _1837 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1828) ? 0.0 : (isnan(0.0) ? _1828 : max(0.0, _1828))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1837 = 1.0;
    }
    float _1841 = (_1837 * cbModelParam._m0[1u].x) + (_1826 * (1.0 - cbModelParam._m0[1u].x));
    float _1851 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _871);
    float _1852 = isnan(_1851) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1851 : min(cbModelParam._m0[25u].z, _1851));
    float _1932;
    float _1934;
    float _1936;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1899 = fma(_1075, cbModelParam._m0[13u].z, fma(_1071, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067)) + cbModelParam._m0[13u].w;
        float _1903 = fma(_1075, cbModelParam._m0[14u].z, fma(_1071, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067)) + cbModelParam._m0[14u].w;
        float _1907 = fma(_1075, cbModelParam._m0[15u].z, fma(_1071, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067)) + cbModelParam._m0[15u].w;
        float _1910 = fma(_1013, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011));
        float _1913 = fma(_1013, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011));
        float _1916 = fma(_1013, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011));
        float _1944;
        if (_1910 > 0.0)
        {
            _1944 = abs((1.0 - _1899) / _1910);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1899 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1944 = frontier_phi_19_17_ladder;
        }
        float _2146;
        if (_1913 > 0.0)
        {
            _2146 = abs((1.0 - _1903) / _1913);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1903 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2146 = frontier_phi_28_24_ladder;
        }
        float _2400;
        if (_1916 > 0.0)
        {
            _2400 = abs((1.0 - _1907) / _1916);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1907 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2400 = frontier_phi_40_35_ladder;
        }
        float _2402 = isnan(_2146) ? _1944 : (isnan(_1944) ? _2146 : min(_1944, _2146));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1910) + _1899;
        float _2408 = (_2403 * _1913) + _1903;
        float _2409 = (_2403 * _1916) + _1907;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2412 = (-1.0) - _2410;
        float _2414 = _2410 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2409 > _2414) || ((_2409 < _2412) || ((_2408 > _2414) || ((_2408 < _2412) || ((_2407 < _2412) || (_2407 > _2414))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2409, cbModelParam._m0[9u].z, fma(_2408, cbModelParam._m0[9u].y, _2407 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2409, cbModelParam._m0[10u].z, fma(_2408, cbModelParam._m0[10u].y, _2407 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2409, cbModelParam._m0[11u].z, fma(_2408, cbModelParam._m0[11u].y, _2407 * cbModelParam._m0[11u].x))), _1852);
            frontier_phi_18_40_ladder = _2537.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2537.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2537.x * cbModelParam._m0[1u].y;
        }
        _1932 = frontier_phi_18_40_ladder_2;
        _1934 = frontier_phi_18_40_ladder_1;
        _1936 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1920 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1011, _1012, _1013), _1852);
        _1932 = _1920.x * cbModelParam._m0[1u].y;
        _1934 = _1920.y * cbModelParam._m0[1u].y;
        _1936 = _1920.z * cbModelParam._m0[1u].y;
    }
    float _1940 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _871);
    float _1941 = isnan(_1940) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1940 : min(cbModelParam._m0[25u].w, _1940));
    float _2030;
    float _2032;
    float _2034;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1994 = fma(_1075, cbModelParam._m0[21u].z, fma(_1071, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067)) + cbModelParam._m0[21u].w;
        float _1998 = fma(_1075, cbModelParam._m0[22u].z, fma(_1071, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067)) + cbModelParam._m0[22u].w;
        float _2002 = fma(_1075, cbModelParam._m0[23u].z, fma(_1071, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067)) + cbModelParam._m0[23u].w;
        float _2005 = fma(_1013, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011));
        float _2008 = fma(_1013, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011));
        float _2011 = fma(_1013, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011));
        float _2151;
        if (_2005 > 0.0)
        {
            _2151 = abs((1.0 - _1994) / _2005);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1994 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2151 = frontier_phi_30_26_ladder;
        }
        float _2427;
        if (_2008 > 0.0)
        {
            _2427 = abs((1.0 - _1998) / _2008);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1998 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2427 = frontier_phi_42_37_ladder;
        }
        float _2640;
        if (_2011 > 0.0)
        {
            _2640 = abs((1.0 - _2002) / _2011);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2002 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2640 = frontier_phi_51_48_ladder;
        }
        float _2642 = isnan(_2427) ? _2151 : (isnan(_2151) ? _2427 : min(_2151, _2427));
        float _2643 = isnan(_2640) ? _2642 : (isnan(_2642) ? _2640 : min(_2642, _2640));
        float _2647 = (_2643 * _2005) + _1994;
        float _2648 = (_2643 * _2008) + _1998;
        float _2649 = (_2643 * _2011) + _2002;
        float _2650 = _2643 * 9.9999997473787516355514526367188e-05;
        float _2651 = (-1.0) - _2650;
        float _2653 = _2650 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2649 > _2653) || ((_2649 < _2651) || ((_2648 > _2653) || ((_2648 < _2651) || ((_2647 < _2651) || (_2647 > _2653))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2649, cbModelParam._m0[17u].z, fma(_2648, cbModelParam._m0[17u].y, _2647 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2649, cbModelParam._m0[18u].z, fma(_2648, cbModelParam._m0[18u].y, _2647 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2649, cbModelParam._m0[19u].z, fma(_2648, cbModelParam._m0[19u].y, _2647 * cbModelParam._m0[19u].x))), _1941);
            frontier_phi_27_51_ladder = _2849.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2849.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2849.x * cbModelParam._m0[1u].z;
        }
        _2030 = frontier_phi_27_51_ladder_2;
        _2032 = frontier_phi_27_51_ladder_1;
        _2034 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2014 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1011, _1012, _1013), _1941);
        _2030 = _2014.x * cbModelParam._m0[1u].z;
        _2032 = _2014.y * cbModelParam._m0[1u].z;
        _2034 = _2014.z * cbModelParam._m0[1u].z;
    }
    float _2047 = (((_1038 * _989) + _1039) * _1003) * ((cbModelParam._m0[1u].w * (_2030 - _1932)) + _1932);
    float _2049 = (((_1038 * _990) + _1039) * _1003) * ((cbModelParam._m0[1u].w * (_2032 - _1934)) + _1934);
    float _2051 = (((_1038 * _991) + _1039) * _1003) * ((cbModelParam._m0[1u].w * (_2034 - _1936)) + _1936);
    float _2054 = fma(_2051, cbSceneParam._m0[89u].z, fma(_2049, cbSceneParam._m0[89u].y, _2047 * cbSceneParam._m0[89u].x));
    float _2057 = fma(_2051, cbSceneParam._m0[90u].z, fma(_2049, cbSceneParam._m0[90u].y, _2047 * cbSceneParam._m0[90u].x));
    float _2060 = fma(_2051, cbSceneParam._m0[91u].z, fma(_2049, cbSceneParam._m0[91u].y, _2047 * cbSceneParam._m0[91u].x));
    uvec4 _2070 = floatBitsToUint(cbInstanceData._m0[_895 + 5u]);
    uint _2072 = _2070.x * 14u;
    uint _2073 = _2072 + 13u;
    float _2080 = _1003 + (-1.0);
    float _2085 = (cbLight._m0[_2073].x * _2080) + 1.0;
    float _2086 = (cbLight._m0[_2073].y * _2080) + 1.0;
    float _2087 = (cbLight._m0[_2073].z * _2080) + 1.0;
    float _2088 = (cbLight._m0[_2073].w * _2080) + 1.0;
    uint _2089 = _2072 + 5u;
    float _2095 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
    uint _2099 = _2072 + 4u;
    float _2105 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
    uint _2109 = _2072 | 1u;
    float _2120 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_690, _691, _692));
    float _2123 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_690, _691, _692));
    float _4381 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _4392 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2128 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2130 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.3183098733425140380859375;
    float _2137 = ((cbLight._m0[_2089].x * _2095) * _2130) + ((cbLight._m0[_2099].x * _2105) * _2128);
    float _2138 = ((_2095 * cbLight._m0[_2089].y) * _2130) + ((_2105 * cbLight._m0[_2099].y) * _2128);
    float _2139 = ((_2095 * cbLight._m0[_2089].z) * _2130) + ((_2105 * cbLight._m0[_2099].z) * _2128);
    uvec4 _2143 = floatBitsToUint(cbLight._m0[_2072 + 12u]);
    bool _2145 = _2143.x == 0u;
    float _2156;
    float _2158;
    float _2160;
    if (_2145)
    {
        _2156 = _2137;
        _2158 = _2138;
        _2160 = _2139;
    }
    else
    {
        uint _2164 = _2072 + 6u;
        float _2180 = (dot(vec3(cbLight._m0[_2072 + 2u].xyz), vec3(_690, _691, _692)) * 0.5) + 0.5;
        float _2181 = _2180 * _2180;
        float _4403 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2182 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2183 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2156 = (((cbLight._m0[_2164].x * 0.3183098733425140380859375) * _2182) * _2183) + _2137;
        _2158 = (((cbLight._m0[_2164].y * 0.3183098733425140380859375) * _2182) * _2183) + _2138;
        _2160 = (((cbLight._m0[_2164].z * 0.3183098733425140380859375) * _2182) * _2183) + _2139;
    }
    bool _2163 = _2143.y == 0u;
    float _2201;
    float _2203;
    float _2205;
    if (_2163)
    {
        _2201 = _2156;
        _2203 = _2158;
        _2205 = _2160;
    }
    else
    {
        uint _2371 = _2072 + 7u;
        float _2387 = (dot(vec3(cbLight._m0[_2072 + 3u].xyz), vec3(_690, _691, _692)) * 0.5) + 0.5;
        float _2388 = _2387 * _2387;
        float _4419 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2389 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2390 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2201 = (((cbLight._m0[_2371].x * 0.3183098733425140380859375) * _2389) * _2390) + _2156;
        _2203 = (((cbLight._m0[_2371].y * 0.3183098733425140380859375) * _2389) * _2390) + _2158;
        _2205 = (((cbLight._m0[_2371].z * 0.3183098733425140380859375) * _2389) * _2390) + _2160;
    }
    uint _2208 = _2072 + 8u;
    float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _871) * 0.949999988079071044921875);
    float _2222 = _2221 * _2221;
    float _2223 = cbLight._m0[_2072].x + _771;
    float _2224 = cbLight._m0[_2072].y + _772;
    float _2225 = cbLight._m0[_2072].z + _773;
    float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
    float _2230 = _2229 * _2223;
    float _2231 = _2229 * _2224;
    float _2232 = _2229 * _2225;
    float _2233 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2072].xyz));
    float _4435 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _4446 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _2237 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2238 = dot(vec3(_690, _691, _692), vec3(_2230, _2231, _2232));
    float _4457 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2242 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2230, _2231, _2232));
    float _4468 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2246 = _2222 * _2222;
    float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
    float _2258 = exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0);
    float _2259 = 0.959999978542327880859375 - _986;
    float _2261 = 0.959999978542327880859375 - _987;
    float _2262 = 0.959999978542327880859375 - _988;
    float _2269 = 1.0 - _2222;
    float _2280 = (0.5 / (((_2237 * ((_2236 * _2269) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2269) + _2222) * _2236))) * _2236;
    float _4479 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2282 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
    uint _2293 = _2072 + 9u;
    float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _871) * 0.949999988079071044921875);
    float _2305 = _2304 * _2304;
    float _2306 = cbLight._m0[_2109].x + _771;
    float _2307 = cbLight._m0[_2109].y + _772;
    float _2308 = cbLight._m0[_2109].z + _773;
    float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
    float _2313 = _2312 * _2306;
    float _2314 = _2312 * _2307;
    float _2315 = _2312 * _2308;
    float _2316 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2109].xyz));
    float _4490 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2320 = dot(vec3(_690, _691, _692), vec3(_2313, _2314, _2315));
    float _4501 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2324 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2313, _2314, _2315));
    float _4512 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2328 = _2305 * _2305;
    float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
    float _2339 = exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0);
    float _2346 = 1.0 - _2305;
    float _2356 = (0.5 / (((_2237 * ((_2319 * _2346) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2346) + _2305) * _2319))) * _2319;
    float _4523 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2358 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
    float _2368 = (((((_2339 * _2259) + _989) * cbLight._m0[_2293].x) * _2358) * _2095) + (((((_2258 * _2259) + _989) * cbLight._m0[_2208].x) * _2282) * _2105);
    float _2369 = (((((_2339 * _2261) + _990) * cbLight._m0[_2293].y) * _2358) * _2095) + (((((_2258 * _2261) + _990) * cbLight._m0[_2208].y) * _2282) * _2105);
    float _2370 = (((((_2339 * _2262) + _991) * cbLight._m0[_2293].z) * _2358) * _2095) + (((((_2258 * _2262) + _991) * cbLight._m0[_2208].z) * _2282) * _2105);
    float _2432;
    float _2434;
    float _2436;
    if (_2145)
    {
        _2432 = _2368;
        _2434 = _2369;
        _2436 = _2370;
    }
    else
    {
        uint _2438 = _2072 + 2u;
        uint _2442 = _2072 + 10u;
        float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _871) * 0.949999988079071044921875);
        float _2457 = _2456 * _2456;
        float _2458 = cbLight._m0[_2438].x + _771;
        float _2459 = cbLight._m0[_2438].y + _772;
        float _2460 = cbLight._m0[_2438].z + _773;
        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
        float _2465 = _2464 * _2458;
        float _2466 = _2464 * _2459;
        float _2467 = _2464 * _2460;
        float _2468 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2438].xyz));
        float _4534 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2472 = dot(vec3(_690, _691, _692), vec3(_2465, _2466, _2467));
        float _4545 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2476 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2465, _2466, _2467));
        float _4556 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2480 = _2457 * _2457;
        float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
        float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) * 5.0);
        float _2498 = 1.0 - _2457;
        float _2508 = (0.5 / (((_2237 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2498) + _2457) * _2471))) * _2471;
        float _4567 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2432 = (((((_2491 * _2259) + _989) * cbLight._m0[_2442].x) * _2510) * _2511) + _2368;
        _2434 = (((((_2491 * _2261) + _990) * cbLight._m0[_2442].y) * _2510) * _2511) + _2369;
        _2436 = (((((_2491 * _2262) + _991) * cbLight._m0[_2442].z) * _2510) * _2511) + _2370;
    }
    float _2546;
    float _2548;
    float _2550;
    if (_2163)
    {
        _2546 = _2432;
        _2548 = _2434;
        _2550 = _2436;
    }
    else
    {
        uint _2557 = _2072 + 3u;
        uint _2561 = _2072 + 11u;
        float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2557].w)) * _871) * 0.949999988079071044921875);
        float _2576 = _2575 * _2575;
        float _2577 = cbLight._m0[_2557].x + _771;
        float _2578 = cbLight._m0[_2557].y + _772;
        float _2579 = cbLight._m0[_2557].z + _773;
        float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
        float _2584 = _2583 * _2577;
        float _2585 = _2583 * _2578;
        float _2586 = _2583 * _2579;
        float _2587 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2557].xyz));
        float _4583 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2591 = dot(vec3(_690, _691, _692), vec3(_2584, _2585, _2586));
        float _4594 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2595 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_2584, _2585, _2586));
        float _4605 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2599 = _2576 * _2576;
        float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
        float _2610 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
        float _2617 = 1.0 - _2576;
        float _2627 = (0.5 / (((_2237 * ((_2590 * _2617) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2617) + _2576) * _2590))) * _2590;
        float _4616 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2629 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
        float _2630 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2546 = (((((_2610 * _2259) + _989) * cbLight._m0[_2561].x) * _2629) * _2630) + _2432;
        _2548 = (((((_2610 * _2261) + _990) * cbLight._m0[_2561].y) * _2629) * _2630) + _2434;
        _2550 = (((((_2610 * _2262) + _991) * cbLight._m0[_2561].z) * _2629) * _2630) + _2436;
    }
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    if (_2070.y == 0u)
    {
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2705;
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2705;
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2705;
        uvec4 _2720 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2721 = _2720.x;
        uint _2732 = uint((float(_2720.y) * floor(float(uint(cbSceneParam._m0[85u].y * _792) / _2721))) + floor(float(uint(cbSceneParam._m0[85u].x * _791) / _2721)));
        float _2742 = (log2(_2708 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2743 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        uint _2746 = uint(isnan(14.0) ? _2743 : (isnan(_2743) ? 14.0 : min(_2743, 14.0)));
        uvec4 _2751 = texelFetch(g_lightClusterGridBuffer, int(((_2746 << 2u) + (_2732 << 6u)) >> 2u));
        uint _2752 = _2751.x;
        uint _2753 = _2720.z;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        if (((((1u << ((_2753 >> 4u) & 15u)) + 4294967295u) & _2752) == 0u) || ((_2753 & 240u) == 0u))
        {
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
        }
        else
        {
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            uint _3012 = 0u;
            uint _3021;
            bool _3022;
            for (;;)
            {
                _3021 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_3012 << 2u)) >> 2u)).x;
                _3022 = _3021 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3022)
                {
                    frontier_phi_68_pred = _3008;
                    frontier_phi_68_pred_1 = _3011;
                    frontier_phi_68_pred_2 = _3010;
                    frontier_phi_68_pred_3 = _3009;
                    frontier_phi_68_pred_4 = _3007;
                    frontier_phi_68_pred_5 = _3006;
                }
                else
                {
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    uint _3157;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3021;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    for (;;)
                    {
                        uint _3161 = uint(findLSB(_3157)) + (_3012 << 5u);
                        uint _3158 = (_3157 + 4294967295u) & _3157;
                        uint _3163 = _3161 * 48u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3183 = (_3161 * 48u) + 4u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 3u)).x));
                        uint _3202 = (_3161 * 48u) + 8u;
                        vec3 _3213 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x));
                        float _3217 = _3177.x - _2706;
                        float _3218 = _3177.y - _2707;
                        float _3219 = _3177.z - _2708;
                        float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                        float _3223 = inversesqrt(_3220);
                        float _3224 = _3223 * _3217;
                        float _3225 = _3223 * _3218;
                        float _3226 = _3223 * _3219;
                        float _3227 = dot(vec3(_814, _817, _820), vec3(_3224, _3225, _3226));
                        float _3232 = 1.0 - (_3220 * _3177.w);
                        float _4642 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3234 = sqrt(_3220) * _3196.w;
                        float _3237 = 1.39999997615814208984375 / (_3234 + 1.39999997615814208984375);
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3227) + _3238;
                        float _3244 = _3234 * _3234;
                        float _3248 = ((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3233) / ((_3244 * 0.699999988079071044921875) + 1.0);
                        float _3252 = (-0.0) - _2706;
                        float _3253 = (-0.0) - _2707;
                        float _3254 = (-0.0) - _2708;
                        float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                        float _3259 = _3258 * _3252;
                        float _3260 = _3258 * _3253;
                        float _3261 = _3258 * _3254;
                        float _3269 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                        float _3270 = 1.0 - _1019;
                        float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                        float _3278 = _3277 * _3277;
                        float _3279 = _3278 * _3278;
                        float _3280 = _3259 + _3224;
                        float _3281 = _3260 + _3225;
                        float _3282 = _3261 + _3226;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3290 = dot(vec3(_814, _817, _820), vec3(_3259, _3260, _3261));
                        float _4658 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3294 = dot(vec3(_814, _817, _820), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                        float _4669 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                        float _3302 = _3237 * _3278;
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3227) + _3303;
                        float _4680 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3308 = 1.0 - _3278;
                        float _3318 = (0.5 / (((_3307 * ((_3293 * _3308) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3278) * _3293))) * _3307;
                        float _4691 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3329 = (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) / ((_3301 * _3301) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125))) * _3233;
                        _3081 = (_3248 * _3196.x) + _3154;
                        _3082 = (_3248 * _3196.y) + _3155;
                        _3083 = (_3248 * _3196.z) + _3156;
                        _3078 = (_3329 * _3213.x) + _3151;
                        _3079 = (_3329 * _3213.y) + _3152;
                        _3080 = (_3329 * _3213.z) + _3153;
                        if (_3158 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3158;
                        }
                    }
                    frontier_phi_68_pred = _3080;
                    frontier_phi_68_pred_1 = _3083;
                    frontier_phi_68_pred_2 = _3082;
                    frontier_phi_68_pred_3 = _3081;
                    frontier_phi_68_pred_4 = _3079;
                    frontier_phi_68_pred_5 = _3078;
                }
                _2859 = frontier_phi_68_pred;
                _2865 = frontier_phi_68_pred_1;
                _2863 = frontier_phi_68_pred_2;
                _2861 = frontier_phi_68_pred_3;
                _2857 = frontier_phi_68_pred_4;
                _2855 = frontier_phi_68_pred_5;
                uint _3013 = _3012 + 1u;
                if (_3013 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3006 = _2855;
                    _3007 = _2857;
                    _3008 = _2859;
                    _3009 = _2861;
                    _3010 = _2863;
                    _3011 = _2865;
                    _3012 = _3013;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
        }
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.z;
        uint _2871 = (_2869 >> 8u) & 15u;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        if (((4294967295u << _2871) & _2752) == 0u)
        {
            _2974 = _2854;
            _2976 = _2856;
            _2978 = _2858;
            _2980 = _2860;
            _2982 = _2862;
            _2984 = _2864;
        }
        else
        {
            float _2999 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
            float _3000 = _2999 * _2706;
            float _3001 = _2999 * _2707;
            float _3002 = _2999 * _2708;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2871 < ((_2869 >> 12u) & 15u))
            {
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _3134 = _2854;
                float _3135 = _2856;
                float _3136 = _2858;
                float _3137 = _2860;
                float _3138 = _2862;
                float _3139 = _2864;
                uint _3140 = _2871;
                uint _3149;
                bool _3150;
                for (;;)
                {
                    _3149 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                    _3150 = _3149 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3150)
                    {
                        frontier_phi_79_pred = _3139;
                        frontier_phi_79_pred_1 = _3138;
                        frontier_phi_79_pred_2 = _3137;
                        frontier_phi_79_pred_3 = _3136;
                        frontier_phi_79_pred_4 = _3135;
                        frontier_phi_79_pred_5 = _3134;
                    }
                    else
                    {
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3356 = _3134;
                        float _3357 = _3135;
                        float _3358 = _3136;
                        float _3359 = _3137;
                        float _3360 = _3138;
                        float _3361 = _3139;
                        uint _3362 = _3149;
                        uint _3363;
                        vec4 _3388;
                        float _3389;
                        vec4 _3404;
                        vec3 _3416;
                        vec4 _3431;
                        vec4 _3446;
                        float _3492;
                        bool _3493;
                        for (;;)
                        {
                            uint _3373 = ((_3140 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3362));
                            _3363 = (_3362 + 4294967295u) & _3362;
                            uint _3375 = _3373 * 40u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            _3389 = _3388.w;
                            uint _3391 = (_3373 * 40u) + 4u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3373 * 40u) + 8u;
                            _3416 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x));
                            uint _3418 = (_3373 * 40u) + 16u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3373 * 40u) + 20u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3373 * 40u) + 24u;
                            vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3467 = (_3373 * 40u) + 28u;
                            vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            _3492 = fma(_2708, _3480.z, fma(_2707, _3480.y, _3480.x * _2706)) + _3480.w;
                            _3493 = !((fma(_2708, _3461.z, fma(_2707, _3461.y, _3461.x * _2706)) + _3461.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3493)
                            {
                                float _3520 = _3388.x - _2706;
                                float _3521 = _3388.y - _2707;
                                float _3522 = _3388.z - _2708;
                                float _3523 = dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522));
                                float _3526 = inversesqrt(_3523);
                                float _3527 = _3526 * _3520;
                                float _3528 = _3526 * _3521;
                                float _3529 = _3526 * _3522;
                                float _3533 = 1.0 - (_3523 / (_3389 * _3389));
                                float _4702 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3538 = sqrt(_3523) * _3404.w;
                                float _3540 = 1.39999997615814208984375 / (_3538 + 1.39999997615814208984375);
                                float _3541 = _3540 * _3540;
                                float _3544 = ((1.0 - _3541) * dot(vec3(_3527, _3528, _3529), vec3(_814, _817, _820))) + _3541;
                                float _3547 = _3538 * _3538;
                                float _3551 = (fma(_2708, _3431.z, fma(_2707, _3431.y, _3431.x * _2706)) + _3431.w) / _3492;
                                float _3552 = (fma(_2708, _3446.z, fma(_2707, _3446.y, _3446.x * _2706)) + _3446.w) / _3492;
                                float _3556 = 1.0 - dot(vec2(_3551, _3552), vec2(_3551, _3552));
                                float _4718 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3558 = _3557 * (((isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0))) * _3534) / ((_3547 * 0.699999988079071044921875) + 1.0));
                                float _3570 = exp2(log2(1.0 / ((_3547 * 3.5) + 5.0)) * 0.25);
                                float _3571 = 1.0 - _1019;
                                float _3578 = sqrt(1.0 - ((1.0 - (_3571 * _3571)) * (1.0 - (_3570 * _3570))));
                                float _3579 = _3578 * _3578;
                                float _3580 = _3579 * _3579;
                                float _3581 = _3527 - _3000;
                                float _3582 = _3528 - _3001;
                                float _3583 = _3529 - _3002;
                                float _3587 = inversesqrt(dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583)));
                                float _3591 = dot(vec3(_814, _817, _820), vec3((-0.0) - _3000, (-0.0) - _3001, (-0.0) - _3002));
                                float _4729 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3594 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3595 = dot(vec3(_814, _817, _820), vec3(_3587 * _3581, _3587 * _3582, _3587 * _3583));
                                float _4740 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3598 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3602 = ((_3598 * _3598) * (_3580 + (-1.0))) + 1.0;
                                float _3603 = _3540 * _3579;
                                float _3604 = _3603 * _3603;
                                float _3610 = ((1.0 - _3604) * dot(vec3(_814, _817, _820), vec3(_3527, _3528, _3529))) + _3604;
                                float _4751 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3612 = 1.0 - _3579;
                                float _3622 = (0.5 / (((_3611 * ((_3594 * _3612) + _3579)) + 9.9999999392252902907785028219223e-09) + (((_3611 * _3612) + _3579) * _3594))) * _3611;
                                float _4762 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3632 = (_3557 * _3534) * (((_3580 * 3.1415927410125732421875) * (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) / ((_3602 * _3602) * ((_3547 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3558 * _3404.z;
                                frontier_phi_85_pred_1 = _3558 * _3404.y;
                                frontier_phi_85_pred_2 = _3558 * _3404.x;
                                frontier_phi_85_pred_3 = _3632 * _3416.z;
                                frontier_phi_85_pred_4 = _3632 * _3416.y;
                                frontier_phi_85_pred_5 = _3632 * _3416.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3641 = frontier_phi_85_pred;
                            _3640 = frontier_phi_85_pred_1;
                            _3639 = frontier_phi_85_pred_2;
                            _3638 = frontier_phi_85_pred_3;
                            _3637 = frontier_phi_85_pred_4;
                            _3636 = frontier_phi_85_pred_5;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            if (_3363 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3363;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3348;
                        frontier_phi_79_pred_1 = _3347;
                        frontier_phi_79_pred_2 = _3346;
                        frontier_phi_79_pred_3 = _3345;
                        frontier_phi_79_pred_4 = _3344;
                        frontier_phi_79_pred_5 = _3343;
                    }
                    _2985 = frontier_phi_79_pred;
                    _2983 = frontier_phi_79_pred_1;
                    _2981 = frontier_phi_79_pred_2;
                    _2979 = frontier_phi_79_pred_3;
                    _2977 = frontier_phi_79_pred_4;
                    _2975 = frontier_phi_79_pred_5;
                    uint _3141 = _3140 + 1u;
                    if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3134 = _2975;
                        _3135 = _2977;
                        _3136 = _2979;
                        _3137 = _2981;
                        _3138 = _2983;
                        _3139 = _2985;
                        _3140 = _3141;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2981;
                frontier_phi_60_61_ladder_1 = _2985;
                frontier_phi_60_61_ladder_2 = _2983;
                frontier_phi_60_61_ladder_3 = _2979;
                frontier_phi_60_61_ladder_4 = _2977;
                frontier_phi_60_61_ladder_5 = _2975;
            }
            else
            {
                frontier_phi_60_61_ladder = _2860;
                frontier_phi_60_61_ladder_1 = _2864;
                frontier_phi_60_61_ladder_2 = _2862;
                frontier_phi_60_61_ladder_3 = _2858;
                frontier_phi_60_61_ladder_4 = _2856;
                frontier_phi_60_61_ladder_5 = _2854;
            }
            _2974 = frontier_phi_60_61_ladder_5;
            _2976 = frontier_phi_60_61_ladder_4;
            _2978 = frontier_phi_60_61_ladder_3;
            _2980 = frontier_phi_60_61_ladder;
            _2982 = frontier_phi_60_61_ladder_2;
            _2984 = frontier_phi_60_61_ladder_1;
        }
        float _2989 = isnan(1.0) ? _1003 : (isnan(_1003) ? 1.0 : min(_1003, 1.0));
        _2764 = (_2989 * _2980) + _2201;
        _2766 = (_2989 * _2982) + _2203;
        _2768 = (_2989 * _2984) + _2205;
        _2770 = ((_2974 * _989) * _2989) + _2546;
        _2772 = ((_2976 * _990) * _2989) + _2548;
        _2774 = ((_2978 * _991) * _2989) + _2550;
    }
    else
    {
        _2764 = _2201;
        _2766 = _2203;
        _2768 = _2205;
        _2770 = _2546;
        _2772 = _2548;
        _2774 = _2550;
    }
    float _4778 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4789 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4800 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4811 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _2792 = ((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2764 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1003))) + ((_2770 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1841)) * cbPerFrame._m0[3u].x);
    float _2793 = ((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2766 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1003))) + ((_2772 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1841)) * cbPerFrame._m0[3u].x);
    float _2794 = ((isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2768 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1003))) + ((_2774 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1841)) * cbPerFrame._m0[3u].x);
    float _2799 = cbInstanceData._m0[_895 + 6u].w * (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)));
    float _2804 = _791 / cbSceneParam._m0[86u].x;
    float _2805 = _792 / cbSceneParam._m0[86u].y;
    vec4 _2819 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, (log2((isnan(cbSceneParam._m0[77u].w) ? _714 : (isnan(_714) ? cbSceneParam._m0[77u].w : min(_714, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2821 = _2819.x;
    float _2822 = _2819.y;
    float _2823 = _2819.z;
    float _2824 = _2819.w;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    if (_714 > cbSceneParam._m0[78u].w)
    {
        float _2879 = isnan(_714) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _714 : min(cbSceneParam._m0[80u].w, _714));
        float _2880 = _2879 / _714;
        float _2891 = _2880 * _764;
        float _2892 = _765 * _2880;
        float _2893 = (-0.0) - _2892;
        float _2894 = _2880 * _766;
        float _2896 = (cbSceneParam._m0[77u].w * _2893) / _2879;
        float _2897 = _2896 + cbSceneParam._m0[79u].w;
        float _2898 = cbSceneParam._m0[79u].w - _2892;
        float _2904 = sqrt(((_2891 * _2891) + (_2892 * _2892)) + (_2894 * _2894));
        float _2907 = (1.0 - (cbSceneParam._m0[77u].w / _2879)) * _2904;
        float _2912 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2914 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3091;
        if (abs((_2893 - _2896) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3091 = ((((_2897 > 0.0) ? exp2(_2912 * _2897) : (2.0 - exp2(_2914 * _2897))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2907;
        }
        else
        {
            float _3035 = 1.0 / cbSceneParam._m0[80u].x;
            float _3036 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : max(_2897, _2898));
            float _3037 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : min(_2897, _2898));
            float _3046 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : min(_3036, 0.0));
            float _3047 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : min(_3037, 0.0));
            _3091 = ((abs(_2904 / _2893) * cbSceneParam._m0[80u].y) * ((((_3046 - _3047) * 2.0) - ((exp2(_2912 * (isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0)))) - exp2(_2912 * (isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0))))) * _3035)) - ((exp2(_2914 * _3046) - exp2(_2914 * _3047)) * _3035))) + (_2907 * cbSceneParam._m0[80u].z);
        }
        vec4 _3093 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, 1.0), 0.0);
        float _3102 = exp2((_3091 * (-1.44269502162933349609375)) * (1.0 - _3093.w));
        float _3103 = log2(_3102);
        float _3119 = log2(_2824);
        _2916 = (exp2(_3119 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].x)) * _3093.x) / cbSceneParam._m0[78u].x)) + _2821;
        _2918 = (exp2(_3119 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].y)) * _3093.y) / cbSceneParam._m0[78u].y)) + _2822;
        _2920 = (exp2(_3119 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].z)) * _3093.z) / cbSceneParam._m0[78u].z)) + _2823;
        _2922 = _3102 * _2824;
    }
    else
    {
        _2916 = _2821;
        _2918 = _2822;
        _2920 = _2823;
        _2922 = _2824;
    }
    bool _3129;
    vec4 _2932;
    vec4 _2954;
    float _2956;
    float _2960;
    float _2961;
    float _2962;
    float _2963;
    bool _2973;
    for (;;)
    {
        _2932 = cbMatDynParam._m0[0u];
        float _2934 = roundEven(_2932.y);
        bool _2935 = _2934 == 3.0;
        float _2936 = log2(_2922);
        float _2943 = exp2(_2936 * cbSceneParam._m0[78u].x) * _2792;
        float _2944 = exp2(_2936 * cbSceneParam._m0[78u].y) * _2793;
        float _2945 = exp2(_2936 * cbSceneParam._m0[78u].z) * _2794;
        float _2952 = _780 + (-0.5);
        _2954 = cbMtdParam._m0[1u];
        _2956 = _2954.y * _2952;
        float _2959 = (_2934 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2960 = _2959 * (_2935 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2916)));
        _2961 = _2959 * (_2935 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2918)));
        _2962 = _2959 * (_2935 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2920)));
        _2963 = _2952 * 0.999000012874603271484375;
        _2973 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2973)
        {
            if ((cbInstanceData._m0[_895 + 7u].x + _2963) < 0.5)
            {
                _3129 = true;
                break;
            }
        }
        uint _3070 = _896 + uint(_2932.w);
        if ((cbInstanceData._m0[_3070].w < 1.0) && ((cbInstanceData._m0[_3070].w + _2963) < 0.5))
        {
            _3129 = true;
            break;
        }
        if ((_2956 + _447) < _2954.x)
        {
            _3129 = true;
            break;
        }
        _3129 = false;
        break;
    }
    float _3334;
    if (_3129)
    {
        discard_state = true;
        _3334 = 0.0;
    }
    else
    {
        _3334 = _2799;
    }
    SV_Target.x = _2960;
    SV_Target.y = _2961;
    SV_Target.z = _2962;
    SV_Target.w = _3334;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2799;
    discard_exit();
}


