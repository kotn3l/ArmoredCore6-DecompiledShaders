#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[25];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_12;
layout(set = 0, binding = 10) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1361;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244;
    float _245;
    float _246;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
    }
    else
    {
        _244 = _230;
        _245 = _231;
        _246 = _232;
    }
    vec4 _275 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _303 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _335 = _329.x * cbMatDynParam._m0[17u].x;
    float _336 = _329.y * cbMatDynParam._m0[17u].y;
    float _337 = _329.z * cbMatDynParam._m0[17u].z;
    vec4 _356 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _375 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _386 = (cbMatDynParam._m0[21u].y * TEXCOORD.w) + 1.0;
    float _388 = (0.5 - ((cbMatDynParam._m0[21u].x * 0.5) * (1.0099999904632568359375 - _375.x))) * _386;
    float _3769 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _396 = (_389 * ((_356.x * cbMatDynParam._m0[18u].x) - _335)) + _335;
    float _397 = (_389 * ((_356.y * cbMatDynParam._m0[18u].y) - _336)) + _336;
    float _398 = (_389 * ((_356.z * cbMatDynParam._m0[18u].z) - _337)) + _337;
    float _403 = (0.5 - ((cbMatDynParam._m0[23u].z * 0.5) * (1.0099999904632568359375 - _375.y))) * _386;
    float _3780 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _411 = (((_303.x * cbMatDynParam._m0[19u].x) - _396) * _404) + _396;
    float _412 = (((_303.y * cbMatDynParam._m0[19u].y) - _397) * _404) + _397;
    float _413 = (((_303.z * cbMatDynParam._m0[19u].z) - _398) * _404) + _398;
    float _418 = (0.5 - ((cbMatDynParam._m0[23u].w * 0.5) * (1.0099999904632568359375 - _375.z))) * _386;
    float _3791 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _426 = (((_275.x * cbMatDynParam._m0[20u].x) - _411) * _419) + _411;
    float _427 = (((_275.y * cbMatDynParam._m0[20u].y) - _412) * _419) + _412;
    float _428 = (((_275.z * cbMatDynParam._m0[20u].z) - _413) * _419) + _413;
    vec4 _440 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_12, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _443 = _440.x * _329.w;
    float _459 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_10, SS_SpecularMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x + cbMatDynParam._m0[23u].x;
    float _460 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _481 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_3, SS_SpecularMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w)).x + cbMatDynParam._m0[22u].w;
    float _482 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _499 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_4, SS_SpecularMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x + cbMatDynParam._m0[22u].y;
    float _500 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _501 = isnan(1.0) ? _500 : (isnan(_500) ? 1.0 : min(_500, 1.0));
    float _518 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_9, SS_SpecularMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[14u].w)).x + cbMatDynParam._m0[22u].z;
    float _519 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _523 = (_389 * ((isnan(1.0) ? _519 : (isnan(_519) ? 1.0 : min(_519, 1.0))) - _501)) + _501;
    float _526 = (((isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0))) - _523) * _404) + _523;
    float _529 = (((isnan(1.0) ? _460 : (isnan(_460) ? 1.0 : min(_460, 1.0))) - _526) * _419) + _526;
    vec4 _546 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _565 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _584 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[10u].w));
    float _586 = _584.x;
    float _587 = _584.y;
    float _589 = _584.z * cbMatDynParam._m0[22u].x;
    vec4 _603 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[11u].w));
    float _611 = (((_603.z * cbMatDynParam._m0[21u].w) - _589) * _389) + _589;
    float _614 = (((_565.z * cbMatDynParam._m0[21u].z) - _611) * _404) + _611;
    float _617 = (((_546.z * cbMatDynParam._m0[24u].x) - _614) * _419) + _614;
    vec4 _630 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[12u].w));
    float _644 = (_389 * (_603.x - _586)) + _586;
    float _645 = (_389 * (_603.y - _587)) + _587;
    float _650 = ((_565.x - _644) * _404) + _644;
    float _651 = ((_565.y - _645) * _404) + _645;
    float _660 = ((((_546.x - _650) * _419) + _650) * 2.0) + (-1.0);
    float _661 = ((((_546.y - _651) * _419) + _651) * 2.0) + (-1.0);
    float _662 = dot(vec2(_660, _661), vec2(_660, _661));
    float _3842 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _667 = sqrt(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))));
    float _671 = _660 + (cbMatDynParam._m0[23u].y * ((_630.x * 2.0) + (-1.0)));
    float _672 = _661 + (cbMatDynParam._m0[23u].y * ((_630.y * 2.0) + (-1.0)));
    float _675 = fma(_667, _244, fma(_672, _236 * TANGENT.x, (_222 * _214) * _671));
    float _678 = fma(_667, _245, fma(_672, _236 * TANGENT.y, (_222 * _215) * _671));
    float _681 = fma(_667, _246, fma(_672, _236 * TANGENT.z, (_222 * _216) * _671));
    float _685 = inversesqrt(dot(vec3(_675, _678, _681), vec3(_675, _678, _681)));
    float _686 = _685 * _675;
    float _687 = _685 * _678;
    float _688 = _685 * _681;
    float _3853 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _689 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _3864 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _690 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _691 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _692 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _693 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _694 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _710 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _760 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _750);
    float _761 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _750);
    float _762 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _750);
    float _766 = inversesqrt(dot(vec3(_760, _761, _762), vec3(_760, _761, _762)));
    float _767 = _760 * _766;
    float _768 = _761 * _766;
    float _769 = _762 * _766;
    float _775 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _776 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _778 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _780 = _778.w;
    float _798 = fma(_688, cbSceneParam._m0[5u].z, fma(_687, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _686));
    float _801 = fma(_688, cbSceneParam._m0[6u].z, fma(_687, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _686));
    float _804 = fma(_688, cbSceneParam._m0[7u].z, fma(_687, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _686));
    vec4 _806 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _808 = _806.x;
    float _820 = (((_806.y - _690) + (_806.w * _690)) * cbMtdParam._m0[3u].x) + _690;
    vec4 _821 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _837 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_808 * _808)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _821.z;
    float _846 = (((cbMatDynParam._m0[15u].x - _694) * cbMatDynParam._m0[15u].w) * _837) + _694;
    float _855 = ((_837 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _820)) + _820;
    uint _879 = uint(roundEven(NORMAL.w)) * 13u;
    uint _881 = (_879 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _887 = (cbMtdParam._m0[0u].x * _691) * cbInstanceData._m0[_881].x;
    float _888 = (cbMtdParam._m0[0u].y * _692) * cbInstanceData._m0[_881].y;
    float _889 = (cbMtdParam._m0[0u].z * _693) * cbInstanceData._m0[_881].z;
    float _3919 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    vec4 _893 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _898 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _909 = (((_898.x - _846) + (_898.w * _846)) * cbMtdParam._m0[3u].x) + _846;
    float _922 = (cbMtdParam._m0[3u].x * (((_890 * _780) - _890) + _893.x)) + _890;
    float _923 = (cbMtdParam._m0[3u].x * (((_891 * _780) - _891) + _893.y)) + _891;
    float _924 = (cbMtdParam._m0[3u].x * (((_892 * _780) - _892) + _893.z)) + _892;
    float _938 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_846 * (_691 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_846 * (_692 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_846 * (_693 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w)).z;
    float _942 = _938 * cbMatDynParam._m0[13u].w;
    float _952 = (_942 * (cbMatDynParam._m0[13u].x - _922)) + _922;
    float _953 = (_942 * (cbMatDynParam._m0[13u].y - _923)) + _923;
    float _954 = (_942 * (cbMatDynParam._m0[13u].z - _924)) + _924;
    float _962 = ((_938 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _909)) + _909;
    float _963 = 1.0 - _962;
    float _970 = (_952 + (-0.039999999105930328369140625)) * _962;
    float _971 = (_953 + (-0.039999999105930328369140625)) * _962;
    float _972 = (_954 + (-0.039999999105930328369140625)) * _962;
    float _973 = _970 + 0.039999999105930328369140625;
    float _974 = _971 + 0.039999999105930328369140625;
    float _975 = _972 + 0.039999999105930328369140625;
    vec4 _984 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _775, cbSceneParam._m0[86u].y * _776));
    float _987 = _984.x * TEXCOORD_8;
    float _988 = dot(vec3(_686, _687, _688), vec3(_767, _768, _769));
    float _991 = _988 * 2.0;
    float _995 = (_991 * _686) - _767;
    float _996 = (_991 * _687) - _768;
    float _997 = (_991 * _688) - _769;
    float _1001 = abs(dot(vec3(_767, _768, _769), vec3(_686, _687, _688)));
    float _3952 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1003 = sqrt(_855);
    float _1016 = exp2((_1003 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1003 * 3.0));
    float _1022 = (1.0 - _1016) * ((_1003 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1023 = _1016 * _1003;
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1360;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1086 = fma(_1059, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1051));
        float _1090 = fma(_1059, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1051));
        float _1094 = fma(_1059, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1051));
        float _1118 = _1051 + _686;
        float _1119 = _1055 + _687;
        float _1120 = _1059 + _688;
        float _1130 = fma(_1120, cbModelParam._m0[26u].z, fma(_1119, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1118)) - _1086;
        float _1131 = fma(_1120, cbModelParam._m0[27u].z, fma(_1119, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1118)) - _1090;
        float _1132 = fma(_1120, cbModelParam._m0[28u].z, fma(_1119, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1118)) - _1094;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1086 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1090 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[34u].z) + ((((((_1094 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1188 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1154.x + (-0.5));
        float _1190 = _1188 * (_1154.y + (-0.5));
        float _1191 = _1188 * (_1154.z + (-0.5));
        float _1198 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1161.x + (-0.5));
        float _1200 = _1198 * (_1161.y + (-0.5));
        float _1201 = _1198 * (_1161.z + (-0.5));
        float _1208 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1168.x + (-0.5));
        float _1210 = _1208 * (_1168.y + (-0.5));
        float _1211 = _1208 * (_1168.z + (-0.5));
        float _1218 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1175.x + (-0.5));
        float _1220 = _1218 * (_1175.y + (-0.5));
        float _1221 = _1218 * (_1175.z + (-0.5));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = _1189 * 0.5;
        float _1226 = _1199 * 0.5;
        float _1227 = _1209 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1242 = (dot(vec3(_686, _687, _688), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1252 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4000 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1254 + 1.0))) + _1259) * _1222;
        float _1269 = _1190 * 0.5;
        float _1270 = _1200 * 0.5;
        float _1271 = _1210 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_686, _687, _688), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4033 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1296 + 1.0))) + _1301) * _1223;
        float _1311 = _1191 * 0.5;
        float _1312 = _1201 * 0.5;
        float _1313 = _1211 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_686, _687, _688), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _4066 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1338 + 1.0))) + _1343) * _1224;
        _1360 = _1191;
        _1362 = _1190;
        _1363 = _1189;
        _1364 = _1201;
        _1365 = _1200;
        _1366 = _1199;
        _1367 = _1211;
        _1368 = _1210;
        _1369 = _1209;
        _1370 = _1224;
        _1371 = _1223;
        _1372 = _1222;
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
    }
    else
    {
        _1360 = _1361;
        _1362 = _1361;
        _1363 = _1361;
        _1364 = _1361;
        _1365 = _1361;
        _1366 = _1361;
        _1367 = _1361;
        _1368 = _1361;
        _1369 = _1361;
        _1370 = _1361;
        _1371 = _1361;
        _1372 = _1361;
        _1373 = 0.0;
        _1374 = 0.0;
        _1375 = 0.0;
    }
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1401 = fma(_1059, cbModelParam._m0[30u].z, fma(_1055, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051));
        float _1405 = fma(_1059, cbModelParam._m0[31u].z, fma(_1055, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051));
        float _1409 = fma(_1059, cbModelParam._m0[32u].z, fma(_1055, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051));
        float _1432 = _1051 + _686;
        float _1433 = _1055 + _687;
        float _1434 = _1059 + _688;
        float _1444 = fma(_1434, cbModelParam._m0[30u].z, fma(_1433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1432)) - _1401;
        float _1445 = fma(_1434, cbModelParam._m0[31u].z, fma(_1433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1432)) - _1405;
        float _1446 = fma(_1434, cbModelParam._m0[32u].z, fma(_1433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1432)) - _1409;
        float _1450 = inversesqrt(dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446)));
        float _1463 = ((_1450 * _1444) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1401 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1450 * _1445) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1405 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1450 * _1446) / cbModelParam._m0[35u].z) + ((((((_1409 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        float _1500 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1467.x + (-0.5));
        float _1502 = _1500 * (_1467.y + (-0.5));
        float _1503 = _1500 * (_1467.z + (-0.5));
        float _1510 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1474.x + (-0.5));
        float _1512 = _1510 * (_1474.y + (-0.5));
        float _1513 = _1510 * (_1474.z + (-0.5));
        float _1520 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1481.x + (-0.5));
        float _1522 = _1520 * (_1481.y + (-0.5));
        float _1523 = _1520 * (_1481.z + (-0.5));
        float _1530 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1488.x + (-0.5));
        float _1532 = _1530 * (_1488.y + (-0.5));
        float _1533 = _1530 * (_1488.z + (-0.5));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = _1501 * 0.5;
        float _1538 = _1511 * 0.5;
        float _1539 = _1521 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_686, _687, _688), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4129 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1564 + 1.0))) + _1569) * _1534;
        float _1579 = _1502 * 0.5;
        float _1580 = _1512 * 0.5;
        float _1581 = _1522 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_686, _687, _688), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4162 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1606 + 1.0))) + _1611) * _1535;
        float _1621 = _1503 * 0.5;
        float _1622 = _1513 * 0.5;
        float _1623 = _1523 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_686, _687, _688), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4195 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1648 + 1.0))) + _1653) * _1536;
        _1670 = _1503;
        _1671 = _1502;
        _1672 = _1501;
        _1673 = _1513;
        _1674 = _1512;
        _1675 = _1511;
        _1676 = _1523;
        _1677 = _1522;
        _1678 = _1521;
        _1679 = _1536;
        _1680 = _1535;
        _1681 = _1534;
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
    }
    else
    {
        _1670 = _1361;
        _1671 = _1361;
        _1672 = _1361;
        _1673 = _1361;
        _1674 = _1361;
        _1675 = _1361;
        _1676 = _1361;
        _1677 = _1361;
        _1678 = _1361;
        _1679 = _1361;
        _1680 = _1361;
        _1681 = _1361;
        _1682 = 0.0;
        _1683 = 0.0;
        _1684 = 0.0;
    }
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1373)) + _1373;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1374)) + _1374;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1375)) + _1375;
    float _1717 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1694 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1694 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1694));
    float _1738 = _995 * 0.5;
    float _1739 = _996 * 0.5;
    float _1740 = _997 * 0.5;
    float _1741 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1744 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1747 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1778;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1754 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1360, _1364, _1367, _1370));
        float _1758 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1362, _1365, _1368, _1371));
        float _1762 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1363, _1366, _1369, _1372));
        float _1769 = dot(vec4(cbModelParam._m0[39u]), vec4(_1738, _1739, _1740, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1789;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1780 = dot(vec4(cbModelParam._m0[40u]), vec4(_1738, _1739, _1740, 1.0));
        _1789 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1789 = 1.0;
    }
    float _1793 = (_1789 * cbModelParam._m0[1u].x) + (_1778 * (1.0 - cbModelParam._m0[1u].x));
    float _1803 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _855);
    float _1804 = isnan(_1803) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1803 : min(cbModelParam._m0[25u].z, _1803));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1851 = fma(_1059, cbModelParam._m0[13u].z, fma(_1055, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1051)) + cbModelParam._m0[13u].w;
        float _1855 = fma(_1059, cbModelParam._m0[14u].z, fma(_1055, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1051)) + cbModelParam._m0[14u].w;
        float _1859 = fma(_1059, cbModelParam._m0[15u].z, fma(_1055, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1051)) + cbModelParam._m0[15u].w;
        float _1862 = fma(_997, cbModelParam._m0[13u].z, fma(_996, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _995));
        float _1865 = fma(_997, cbModelParam._m0[14u].z, fma(_996, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _995));
        float _1868 = fma(_997, cbModelParam._m0[15u].z, fma(_996, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _995));
        float _1896;
        if (_1862 > 0.0)
        {
            _1896 = abs((1.0 - _1851) / _1862);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1851 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1896 = frontier_phi_16_14_ladder;
        }
        float _2098;
        if (_1865 > 0.0)
        {
            _2098 = abs((1.0 - _1855) / _1865);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1855 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2098 = frontier_phi_25_21_ladder;
        }
        float _2352;
        if (_1868 > 0.0)
        {
            _2352 = abs((1.0 - _1859) / _1868);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1859 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2352 = frontier_phi_37_32_ladder;
        }
        float _2354 = isnan(_2098) ? _1896 : (isnan(_1896) ? _2098 : min(_1896, _2098));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1862) + _1851;
        float _2360 = (_2355 * _1865) + _1855;
        float _2361 = (_2355 * _1868) + _1859;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2362;
        float _2366 = _2362 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 > _2366) || ((_2360 < _2364) || ((_2359 < _2364) || (_2359 > _2366))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2489 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2361, cbModelParam._m0[9u].z, fma(_2360, cbModelParam._m0[9u].y, _2359 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2361, cbModelParam._m0[10u].z, fma(_2360, cbModelParam._m0[10u].y, _2359 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2361, cbModelParam._m0[11u].z, fma(_2360, cbModelParam._m0[11u].y, _2359 * cbModelParam._m0[11u].x))), _1804);
            frontier_phi_15_37_ladder = _2489.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2489.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2489.x * cbModelParam._m0[1u].y;
        }
        _1884 = frontier_phi_15_37_ladder_2;
        _1886 = frontier_phi_15_37_ladder_1;
        _1888 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_995, _996, _997), _1804);
        _1884 = _1872.x * cbModelParam._m0[1u].y;
        _1886 = _1872.y * cbModelParam._m0[1u].y;
        _1888 = _1872.z * cbModelParam._m0[1u].y;
    }
    float _1892 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _855);
    float _1893 = isnan(_1892) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1892 : min(cbModelParam._m0[25u].w, _1892));
    float _1982;
    float _1984;
    float _1986;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1946 = fma(_1059, cbModelParam._m0[21u].z, fma(_1055, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1051)) + cbModelParam._m0[21u].w;
        float _1950 = fma(_1059, cbModelParam._m0[22u].z, fma(_1055, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1051)) + cbModelParam._m0[22u].w;
        float _1954 = fma(_1059, cbModelParam._m0[23u].z, fma(_1055, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1051)) + cbModelParam._m0[23u].w;
        float _1957 = fma(_997, cbModelParam._m0[21u].z, fma(_996, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _995));
        float _1960 = fma(_997, cbModelParam._m0[22u].z, fma(_996, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _995));
        float _1963 = fma(_997, cbModelParam._m0[23u].z, fma(_996, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _995));
        float _2103;
        if (_1957 > 0.0)
        {
            _2103 = abs((1.0 - _1946) / _1957);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1946 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2103 = frontier_phi_27_23_ladder;
        }
        float _2379;
        if (_1960 > 0.0)
        {
            _2379 = abs((1.0 - _1950) / _1960);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1950 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2379 = frontier_phi_39_34_ladder;
        }
        float _2592;
        if (_1963 > 0.0)
        {
            _2592 = abs((1.0 - _1954) / _1963);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1954 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2592 = frontier_phi_48_45_ladder;
        }
        float _2594 = isnan(_2379) ? _2103 : (isnan(_2103) ? _2379 : min(_2103, _2379));
        float _2595 = isnan(_2592) ? _2594 : (isnan(_2594) ? _2592 : min(_2594, _2592));
        float _2599 = (_2595 * _1957) + _1946;
        float _2600 = (_2595 * _1960) + _1950;
        float _2601 = (_2595 * _1963) + _1954;
        float _2602 = _2595 * 9.9999997473787516355514526367188e-05;
        float _2603 = (-1.0) - _2602;
        float _2605 = _2602 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2601 > _2605) || ((_2601 < _2603) || ((_2600 > _2605) || ((_2600 < _2603) || ((_2599 < _2603) || (_2599 > _2605))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2601, cbModelParam._m0[17u].z, fma(_2600, cbModelParam._m0[17u].y, _2599 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2601, cbModelParam._m0[18u].z, fma(_2600, cbModelParam._m0[18u].y, _2599 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2601, cbModelParam._m0[19u].z, fma(_2600, cbModelParam._m0[19u].y, _2599 * cbModelParam._m0[19u].x))), _1893);
            frontier_phi_24_48_ladder = _2885.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2885.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2885.x * cbModelParam._m0[1u].z;
        }
        _1982 = frontier_phi_24_48_ladder_2;
        _1984 = frontier_phi_24_48_ladder_1;
        _1986 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1966 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_995, _996, _997), _1893);
        _1982 = _1966.x * cbModelParam._m0[1u].z;
        _1984 = _1966.y * cbModelParam._m0[1u].z;
        _1986 = _1966.z * cbModelParam._m0[1u].z;
    }
    float _1999 = (((_1022 * _973) + _1023) * _987) * ((cbModelParam._m0[1u].w * (_1982 - _1884)) + _1884);
    float _2001 = (((_1022 * _974) + _1023) * _987) * ((cbModelParam._m0[1u].w * (_1984 - _1886)) + _1886);
    float _2003 = (((_1022 * _975) + _1023) * _987) * ((cbModelParam._m0[1u].w * (_1986 - _1888)) + _1888);
    float _2006 = fma(_2003, cbSceneParam._m0[89u].z, fma(_2001, cbSceneParam._m0[89u].y, _1999 * cbSceneParam._m0[89u].x));
    float _2009 = fma(_2003, cbSceneParam._m0[90u].z, fma(_2001, cbSceneParam._m0[90u].y, _1999 * cbSceneParam._m0[90u].x));
    float _2012 = fma(_2003, cbSceneParam._m0[91u].z, fma(_2001, cbSceneParam._m0[91u].y, _1999 * cbSceneParam._m0[91u].x));
    uvec4 _2022 = floatBitsToUint(cbInstanceData._m0[_879 + 5u]);
    uint _2024 = _2022.x * 14u;
    uint _2025 = _2024 + 13u;
    float _2032 = _987 + (-1.0);
    float _2037 = (cbLight._m0[_2025].x * _2032) + 1.0;
    float _2038 = (cbLight._m0[_2025].y * _2032) + 1.0;
    float _2039 = (cbLight._m0[_2025].z * _2032) + 1.0;
    float _2040 = (cbLight._m0[_2025].w * _2032) + 1.0;
    uint _2041 = _2024 + 5u;
    float _2047 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
    uint _2051 = _2024 + 4u;
    float _2057 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
    uint _2061 = _2024 | 1u;
    float _2072 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_686, _687, _688));
    float _2075 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_686, _687, _688));
    float _4331 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _4342 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2080 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * 0.3183098733425140380859375;
    float _2082 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * 0.3183098733425140380859375;
    float _2089 = ((cbLight._m0[_2041].x * _2047) * _2082) + ((cbLight._m0[_2051].x * _2057) * _2080);
    float _2090 = ((_2047 * cbLight._m0[_2041].y) * _2082) + ((_2057 * cbLight._m0[_2051].y) * _2080);
    float _2091 = ((_2047 * cbLight._m0[_2041].z) * _2082) + ((_2057 * cbLight._m0[_2051].z) * _2080);
    uvec4 _2095 = floatBitsToUint(cbLight._m0[_2024 + 12u]);
    bool _2097 = _2095.x == 0u;
    float _2108;
    float _2110;
    float _2112;
    if (_2097)
    {
        _2108 = _2089;
        _2110 = _2090;
        _2112 = _2091;
    }
    else
    {
        uint _2116 = _2024 + 6u;
        float _2132 = (dot(vec3(cbLight._m0[_2024 + 2u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2133 = _2132 * _2132;
        float _4353 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2134 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2135 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2108 = (((cbLight._m0[_2116].x * 0.3183098733425140380859375) * _2134) * _2135) + _2089;
        _2110 = (((cbLight._m0[_2116].y * 0.3183098733425140380859375) * _2134) * _2135) + _2090;
        _2112 = (((cbLight._m0[_2116].z * 0.3183098733425140380859375) * _2134) * _2135) + _2091;
    }
    bool _2115 = _2095.y == 0u;
    float _2153;
    float _2155;
    float _2157;
    if (_2115)
    {
        _2153 = _2108;
        _2155 = _2110;
        _2157 = _2112;
    }
    else
    {
        uint _2323 = _2024 + 7u;
        float _2339 = (dot(vec3(cbLight._m0[_2024 + 3u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2340 = _2339 * _2339;
        float _4369 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2341 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2342 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2153 = (((cbLight._m0[_2323].x * 0.3183098733425140380859375) * _2341) * _2342) + _2108;
        _2155 = (((cbLight._m0[_2323].y * 0.3183098733425140380859375) * _2341) * _2342) + _2110;
        _2157 = (((cbLight._m0[_2323].z * 0.3183098733425140380859375) * _2341) * _2342) + _2112;
    }
    uint _2160 = _2024 + 8u;
    float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _855) * 0.949999988079071044921875);
    float _2174 = _2173 * _2173;
    float _2175 = cbLight._m0[_2024].x + _767;
    float _2176 = cbLight._m0[_2024].y + _768;
    float _2177 = cbLight._m0[_2024].z + _769;
    float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
    float _2182 = _2181 * _2175;
    float _2183 = _2181 * _2176;
    float _2184 = _2181 * _2177;
    float _2185 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2024].xyz));
    float _4385 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _4396 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _2189 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2190 = dot(vec3(_686, _687, _688), vec3(_2182, _2183, _2184));
    float _4407 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2182, _2183, _2184));
    float _4418 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2174 * _2174;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2210 = exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0);
    float _2211 = 0.959999978542327880859375 - _970;
    float _2213 = 0.959999978542327880859375 - _971;
    float _2214 = 0.959999978542327880859375 - _972;
    float _2221 = 1.0 - _2174;
    float _2232 = (0.5 / (((_2189 * ((_2188 * _2221) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_2189 * _2221) + _2174) * _2188))) * _2188;
    float _4429 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2234 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    uint _2245 = _2024 + 9u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _855) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_2061].x + _767;
    float _2259 = cbLight._m0[_2061].y + _768;
    float _2260 = cbLight._m0[_2061].z + _769;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2061].xyz));
    float _4440 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2272 = dot(vec3(_686, _687, _688), vec3(_2265, _2266, _2267));
    float _4451 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2276 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2265, _2266, _2267));
    float _4462 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2280 = _2257 * _2257;
    float _2284 = ((_2275 * _2275) * (_2280 + (-1.0))) + 1.0;
    float _2291 = exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0);
    float _2298 = 1.0 - _2257;
    float _2308 = (0.5 / (((_2189 * ((_2271 * _2298) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2189 * _2298) + _2257) * _2271))) * _2271;
    float _4473 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2310 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2280 / ((_2284 * _2284) * 3.141590118408203125));
    float _2320 = (((((_2291 * _2211) + _973) * cbLight._m0[_2245].x) * _2310) * _2047) + (((((_2210 * _2211) + _973) * cbLight._m0[_2160].x) * _2234) * _2057);
    float _2321 = (((((_2291 * _2213) + _974) * cbLight._m0[_2245].y) * _2310) * _2047) + (((((_2210 * _2213) + _974) * cbLight._m0[_2160].y) * _2234) * _2057);
    float _2322 = (((((_2291 * _2214) + _975) * cbLight._m0[_2245].z) * _2310) * _2047) + (((((_2210 * _2214) + _975) * cbLight._m0[_2160].z) * _2234) * _2057);
    float _2384;
    float _2386;
    float _2388;
    if (_2097)
    {
        _2384 = _2320;
        _2386 = _2321;
        _2388 = _2322;
    }
    else
    {
        uint _2390 = _2024 + 2u;
        uint _2394 = _2024 + 10u;
        float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2390].w)) * _855) * 0.949999988079071044921875);
        float _2409 = _2408 * _2408;
        float _2410 = cbLight._m0[_2390].x + _767;
        float _2411 = cbLight._m0[_2390].y + _768;
        float _2412 = cbLight._m0[_2390].z + _769;
        float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
        float _2417 = _2416 * _2410;
        float _2418 = _2416 * _2411;
        float _2419 = _2416 * _2412;
        float _2420 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2390].xyz));
        float _4484 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2424 = dot(vec3(_686, _687, _688), vec3(_2417, _2418, _2419));
        float _4495 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2428 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_2417, _2418, _2419));
        float _4506 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2432 = _2409 * _2409;
        float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
        float _2443 = exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0);
        float _2450 = 1.0 - _2409;
        float _2460 = (0.5 / (((_2189 * ((_2423 * _2450) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2189 * _2450) + _2409) * _2423))) * _2423;
        float _4517 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2462 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
        float _2463 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2384 = (((((_2443 * _2211) + _973) * cbLight._m0[_2394].x) * _2462) * _2463) + _2320;
        _2386 = (((((_2443 * _2213) + _974) * cbLight._m0[_2394].y) * _2462) * _2463) + _2321;
        _2388 = (((((_2443 * _2214) + _975) * cbLight._m0[_2394].z) * _2462) * _2463) + _2322;
    }
    float _2498;
    float _2500;
    float _2502;
    if (_2115)
    {
        _2498 = _2384;
        _2500 = _2386;
        _2502 = _2388;
    }
    else
    {
        uint _2509 = _2024 + 3u;
        uint _2513 = _2024 + 11u;
        float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2509].w)) * _855) * 0.949999988079071044921875);
        float _2528 = _2527 * _2527;
        float _2529 = cbLight._m0[_2509].x + _767;
        float _2530 = cbLight._m0[_2509].y + _768;
        float _2531 = cbLight._m0[_2509].z + _769;
        float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
        float _2536 = _2535 * _2529;
        float _2537 = _2535 * _2530;
        float _2538 = _2535 * _2531;
        float _2539 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2509].xyz));
        float _4533 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2543 = dot(vec3(_686, _687, _688), vec3(_2536, _2537, _2538));
        float _4544 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2547 = dot(vec3(cbLight._m0[_2509].xyz), vec3(_2536, _2537, _2538));
        float _4555 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2551 = _2528 * _2528;
        float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
        float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
        float _2569 = 1.0 - _2528;
        float _2579 = (0.5 / (((_2189 * ((_2542 * _2569) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2189 * _2569) + _2528) * _2542))) * _2542;
        float _4566 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2498 = (((((_2562 * _2211) + _973) * cbLight._m0[_2513].x) * _2581) * _2582) + _2384;
        _2500 = (((((_2562 * _2213) + _974) * cbLight._m0[_2513].y) * _2581) * _2582) + _2386;
        _2502 = (((((_2562 * _2214) + _975) * cbLight._m0[_2513].z) * _2581) * _2582) + _2388;
    }
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    if (_2022.y == 0u)
    {
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2657;
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2657;
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2657;
        uvec4 _2672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2673 = _2672.x;
        uint _2684 = uint((float(_2672.y) * floor(float(uint(cbSceneParam._m0[85u].y * _776) / _2673))) + floor(float(uint(cbSceneParam._m0[85u].x * _775) / _2673)));
        float _2694 = (log2(_2660 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2695 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        uint _2698 = uint(isnan(14.0) ? _2695 : (isnan(_2695) ? 14.0 : min(_2695, 14.0)));
        uvec4 _2703 = texelFetch(g_lightClusterGridBuffer, int(((_2698 << 2u) + (_2684 << 6u)) >> 2u));
        uint _2704 = _2703.x;
        uint _2705 = _2672.z;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        if (((((1u << ((_2705 >> 4u) & 15u)) + 4294967295u) & _2704) == 0u) || ((_2705 & 240u) == 0u))
        {
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
        }
        else
        {
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _2899;
            float _2901;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            uint _3040 = 0u;
            uint _3049;
            bool _3050;
            for (;;)
            {
                _3049 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_3040 << 2u)) >> 2u)).x;
                _3050 = _3049 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3050)
                {
                    frontier_phi_63_pred = _3039;
                    frontier_phi_63_pred_1 = _3038;
                    frontier_phi_63_pred_2 = _3037;
                    frontier_phi_63_pred_3 = _3036;
                    frontier_phi_63_pred_4 = _3035;
                    frontier_phi_63_pred_5 = _3034;
                }
                else
                {
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    uint _3164;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3036;
                    _3161 = _3037;
                    _3162 = _3038;
                    _3163 = _3039;
                    _3164 = _3049;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    for (;;)
                    {
                        uint _3168 = uint(findLSB(_3164)) + (_3040 << 5u);
                        uint _3165 = (_3164 + 4294967295u) & _3164;
                        uint _3170 = _3168 * 48u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 3u)).x));
                        uint _3190 = (_3168 * 48u) + 4u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 3u)).x));
                        uint _3209 = (_3168 * 48u) + 8u;
                        vec3 _3220 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x));
                        float _3224 = _3184.x - _2658;
                        float _3225 = _3184.y - _2659;
                        float _3226 = _3184.z - _2660;
                        float _3227 = dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226));
                        float _3230 = inversesqrt(_3227);
                        float _3231 = _3230 * _3224;
                        float _3232 = _3230 * _3225;
                        float _3233 = _3230 * _3226;
                        float _3234 = dot(vec3(_798, _801, _804), vec3(_3231, _3232, _3233));
                        float _3239 = 1.0 - (_3227 * _3184.w);
                        float _4592 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3240 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3241 = sqrt(_3227) * _3203.w;
                        float _3244 = 1.39999997615814208984375 / (_3241 + 1.39999997615814208984375);
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3234) + _3245;
                        float _3251 = _3241 * _3241;
                        float _3254 = ((isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))) * _3240) / ((_3251 * 0.699999988079071044921875) + 1.0);
                        float _3258 = (-0.0) - _2658;
                        float _3259 = (-0.0) - _2659;
                        float _3260 = (-0.0) - _2660;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3265 = _3264 * _3258;
                        float _3266 = _3264 * _3259;
                        float _3267 = _3264 * _3260;
                        float _3275 = exp2(log2(1.0 / ((_3251 * 3.5) + 5.0)) * 0.25);
                        float _3276 = 1.0 - _1003;
                        float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                        float _3284 = _3283 * _3283;
                        float _3285 = _3284 * _3284;
                        float _3286 = _3265 + _3231;
                        float _3287 = _3266 + _3232;
                        float _3288 = _3267 + _3233;
                        float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                        float _3296 = dot(vec3(_798, _801, _804), vec3(_3265, _3266, _3267));
                        float _4608 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3299 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3300 = dot(vec3(_798, _801, _804), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                        float _4619 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3303 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                        float _3308 = _3244 * _3284;
                        float _3309 = _3308 * _3308;
                        float _3312 = ((1.0 - _3309) * _3234) + _3309;
                        float _4630 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3313 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3314 = 1.0 - _3284;
                        float _3324 = (0.5 / (((_3313 * ((_3299 * _3314) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3313 * _3314) + _3284) * _3299))) * _3313;
                        float _4641 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3335 = (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) / ((_3307 * _3307) * ((_3251 * 2.1991131305694580078125) + 3.141590118408203125))) * _3240;
                        _3093 = (_3254 * _3203.x) + _3161;
                        _3094 = (_3254 * _3203.y) + _3162;
                        _3095 = (_3254 * _3203.z) + _3163;
                        _3090 = (_3335 * _3220.x) + _3158;
                        _3091 = (_3335 * _3220.y) + _3159;
                        _3092 = (_3335 * _3220.z) + _3160;
                        if (_3165 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3092;
                            _3161 = _3093;
                            _3162 = _3094;
                            _3163 = _3095;
                            _3164 = _3165;
                        }
                    }
                    frontier_phi_63_pred = _3095;
                    frontier_phi_63_pred_1 = _3094;
                    frontier_phi_63_pred_2 = _3093;
                    frontier_phi_63_pred_3 = _3092;
                    frontier_phi_63_pred_4 = _3091;
                    frontier_phi_63_pred_5 = _3090;
                }
                _2901 = frontier_phi_63_pred;
                _2899 = frontier_phi_63_pred_1;
                _2897 = frontier_phi_63_pred_2;
                _2895 = frontier_phi_63_pred_3;
                _2893 = frontier_phi_63_pred_4;
                _2891 = frontier_phi_63_pred_5;
                uint _3041 = _3040 + 1u;
                if (_3041 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3034 = _2891;
                    _3035 = _2893;
                    _3036 = _2895;
                    _3037 = _2897;
                    _3038 = _2899;
                    _3039 = _2901;
                    _3040 = _3041;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
        }
        uvec4 _2904 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2905 = _2904.z;
        uint _2907 = (_2905 >> 8u) & 15u;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        if (((4294967295u << _2907) & _2704) == 0u)
        {
            _3002 = _2890;
            _3004 = _2892;
            _3006 = _2894;
            _3008 = _2896;
            _3010 = _2898;
            _3012 = _2900;
        }
        else
        {
            float _3027 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
            float _3028 = _3027 * _2658;
            float _3029 = _3027 * _2659;
            float _3030 = _3027 * _2660;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2907 < ((_2905 >> 12u) & 15u))
            {
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3141 = _2890;
                float _3142 = _2892;
                float _3143 = _2894;
                float _3144 = _2896;
                float _3145 = _2898;
                float _3146 = _2900;
                uint _3147 = _2907;
                uint _3156;
                bool _3157;
                for (;;)
                {
                    _3156 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                    _3157 = _3156 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3157)
                    {
                        frontier_phi_69_pred = _3146;
                        frontier_phi_69_pred_1 = _3145;
                        frontier_phi_69_pred_2 = _3144;
                        frontier_phi_69_pred_3 = _3143;
                        frontier_phi_69_pred_4 = _3142;
                        frontier_phi_69_pred_5 = _3141;
                    }
                    else
                    {
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3353 = _3141;
                        float _3354 = _3142;
                        float _3355 = _3143;
                        float _3356 = _3144;
                        float _3357 = _3145;
                        float _3358 = _3146;
                        uint _3359 = _3156;
                        uint _3360;
                        vec4 _3385;
                        float _3386;
                        vec4 _3401;
                        vec3 _3413;
                        vec4 _3428;
                        vec4 _3443;
                        float _3489;
                        bool _3490;
                        for (;;)
                        {
                            uint _3370 = ((_3147 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3359));
                            _3360 = (_3359 + 4294967295u) & _3359;
                            uint _3372 = _3370 * 40u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            _3386 = _3385.w;
                            uint _3388 = (_3370 * 40u) + 4u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3403 = (_3370 * 40u) + 8u;
                            _3413 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x));
                            uint _3415 = (_3370 * 40u) + 16u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3430 = (_3370 * 40u) + 20u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3370 * 40u) + 24u;
                            vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3464 = (_3370 * 40u) + 28u;
                            vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            _3489 = fma(_2660, _3477.z, fma(_2659, _3477.y, _3477.x * _2658)) + _3477.w;
                            _3490 = !((fma(_2660, _3458.z, fma(_2659, _3458.y, _3458.x * _2658)) + _3458.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3490)
                            {
                                float _3517 = _3385.x - _2658;
                                float _3518 = _3385.y - _2659;
                                float _3519 = _3385.z - _2660;
                                float _3520 = dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519));
                                float _3523 = inversesqrt(_3520);
                                float _3524 = _3523 * _3517;
                                float _3525 = _3523 * _3518;
                                float _3526 = _3523 * _3519;
                                float _3530 = 1.0 - (_3520 / (_3386 * _3386));
                                float _4652 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3535 = sqrt(_3520) * _3401.w;
                                float _3537 = 1.39999997615814208984375 / (_3535 + 1.39999997615814208984375);
                                float _3538 = _3537 * _3537;
                                float _3541 = ((1.0 - _3538) * dot(vec3(_3524, _3525, _3526), vec3(_798, _801, _804))) + _3538;
                                float _3544 = _3535 * _3535;
                                float _3548 = (fma(_2660, _3428.z, fma(_2659, _3428.y, _3428.x * _2658)) + _3428.w) / _3489;
                                float _3549 = (fma(_2660, _3443.z, fma(_2659, _3443.y, _3443.x * _2658)) + _3443.w) / _3489;
                                float _3553 = 1.0 - dot(vec2(_3548, _3549), vec2(_3548, _3549));
                                float _4668 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3555 = _3554 * (((isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0))) * _3531) / ((_3544 * 0.699999988079071044921875) + 1.0));
                                float _3567 = exp2(log2(1.0 / ((_3544 * 3.5) + 5.0)) * 0.25);
                                float _3568 = 1.0 - _1003;
                                float _3575 = sqrt(1.0 - ((1.0 - (_3568 * _3568)) * (1.0 - (_3567 * _3567))));
                                float _3576 = _3575 * _3575;
                                float _3577 = _3576 * _3576;
                                float _3578 = _3524 - _3028;
                                float _3579 = _3525 - _3029;
                                float _3580 = _3526 - _3030;
                                float _3584 = inversesqrt(dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580)));
                                float _3588 = dot(vec3(_798, _801, _804), vec3((-0.0) - _3028, (-0.0) - _3029, (-0.0) - _3030));
                                float _4679 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3592 = dot(vec3(_798, _801, _804), vec3(_3584 * _3578, _3584 * _3579, _3584 * _3580));
                                float _4690 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3595 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3599 = ((_3595 * _3595) * (_3577 + (-1.0))) + 1.0;
                                float _3600 = _3537 * _3576;
                                float _3601 = _3600 * _3600;
                                float _3607 = ((1.0 - _3601) * dot(vec3(_798, _801, _804), vec3(_3524, _3525, _3526))) + _3601;
                                float _4701 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3609 = 1.0 - _3576;
                                float _3619 = (0.5 / (((_3608 * ((_3591 * _3609) + _3576)) + 9.9999999392252902907785028219223e-09) + (((_3608 * _3609) + _3576) * _3591))) * _3608;
                                float _4712 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3629 = (_3554 * _3531) * (((_3577 * 3.1415927410125732421875) * (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) / ((_3599 * _3599) * ((_3544 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3555 * _3401.z;
                                frontier_phi_75_pred_1 = _3555 * _3401.y;
                                frontier_phi_75_pred_2 = _3555 * _3401.x;
                                frontier_phi_75_pred_3 = _3629 * _3413.z;
                                frontier_phi_75_pred_4 = _3629 * _3413.y;
                                frontier_phi_75_pred_5 = _3629 * _3413.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3638 = frontier_phi_75_pred;
                            _3637 = frontier_phi_75_pred_1;
                            _3636 = frontier_phi_75_pred_2;
                            _3635 = frontier_phi_75_pred_3;
                            _3634 = frontier_phi_75_pred_4;
                            _3633 = frontier_phi_75_pred_5;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            if (_3360 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3360;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3345;
                        frontier_phi_69_pred_1 = _3344;
                        frontier_phi_69_pred_2 = _3343;
                        frontier_phi_69_pred_3 = _3342;
                        frontier_phi_69_pred_4 = _3341;
                        frontier_phi_69_pred_5 = _3340;
                    }
                    _3013 = frontier_phi_69_pred;
                    _3011 = frontier_phi_69_pred_1;
                    _3009 = frontier_phi_69_pred_2;
                    _3007 = frontier_phi_69_pred_3;
                    _3005 = frontier_phi_69_pred_4;
                    _3003 = frontier_phi_69_pred_5;
                    uint _3148 = _3147 + 1u;
                    if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3141 = _3003;
                        _3142 = _3005;
                        _3143 = _3007;
                        _3144 = _3009;
                        _3145 = _3011;
                        _3146 = _3013;
                        _3147 = _3148;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _3013;
                frontier_phi_57_58_ladder_1 = _3011;
                frontier_phi_57_58_ladder_2 = _3009;
                frontier_phi_57_58_ladder_3 = _3007;
                frontier_phi_57_58_ladder_4 = _3005;
                frontier_phi_57_58_ladder_5 = _3003;
            }
            else
            {
                frontier_phi_57_58_ladder = _2900;
                frontier_phi_57_58_ladder_1 = _2898;
                frontier_phi_57_58_ladder_2 = _2896;
                frontier_phi_57_58_ladder_3 = _2894;
                frontier_phi_57_58_ladder_4 = _2892;
                frontier_phi_57_58_ladder_5 = _2890;
            }
            _3002 = frontier_phi_57_58_ladder_5;
            _3004 = frontier_phi_57_58_ladder_4;
            _3006 = frontier_phi_57_58_ladder_3;
            _3008 = frontier_phi_57_58_ladder_2;
            _3010 = frontier_phi_57_58_ladder_1;
            _3012 = frontier_phi_57_58_ladder;
        }
        float _3017 = isnan(1.0) ? _987 : (isnan(_987) ? 1.0 : min(_987, 1.0));
        _2716 = (_3017 * _3008) + _2153;
        _2718 = (_3017 * _3010) + _2155;
        _2720 = (_3017 * _3012) + _2157;
        _2722 = ((_3002 * _973) * _3017) + _2498;
        _2724 = ((_3004 * _974) * _3017) + _2500;
        _2726 = ((_3006 * _975) * _3017) + _2502;
    }
    else
    {
        _2716 = _2153;
        _2718 = _2155;
        _2720 = _2157;
        _2722 = _2498;
        _2724 = _2500;
        _2726 = _2502;
    }
    float _2733 = (_963 * _952) * cbMatDynParam._m0[9u].x;
    float _2734 = (_963 * _953) * cbMatDynParam._m0[9u].y;
    float _2735 = (_963 * _954) * cbMatDynParam._m0[9u].z;
    float _2746 = dot(vec3(_686, _687, _688), vec3(0.0, -1.0, 0.0));
    float _4728 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2749 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _2753 = dot(vec3(_995, _996, _997), vec3(0.0, -1.0, 0.0));
    float _4739 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2759 = exp2(log2(isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * 4.0);
    float _4750 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _4761 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _4772 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _4783 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _2804 = abs(exp2(log2(_988) * cbMatDynParam._m0[12u].x));
    float _2805 = isnan(0.100000001490116119384765625) ? _2804 : (isnan(_2804) ? 0.100000001490116119384765625 : max(_2804, 0.100000001490116119384765625));
    float _2811 = ((isnan(0.699999988079071044921875) ? _2805 : (isnan(_2805) ? 0.699999988079071044921875 : min(_2805, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _2821 = ((((cbMatDynParam._m0[10u].x * cbPerFrame._m0[3u].x) * ((_2722 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1793)) + (_2759 * cbMatDynParam._m0[11u].x))) + ((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * ((_2716 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _987)) + (_2749 * cbMatDynParam._m0[11u].x)))) + cbMatDynParam._m0[7u].x) + (_2811 * (cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x));
    float _2824 = ((((cbMatDynParam._m0[10u].y * cbPerFrame._m0[3u].x) * ((_2724 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1793)) + (_2759 * cbMatDynParam._m0[11u].y))) + ((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * ((_2718 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _987)) + (_2749 * cbMatDynParam._m0[11u].y)))) + cbMatDynParam._m0[7u].y) + (_2811 * (cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y));
    float _2827 = ((((cbMatDynParam._m0[10u].z * cbPerFrame._m0[3u].x) * ((_2726 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1793)) + (_2759 * cbMatDynParam._m0[11u].z))) + ((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * ((_2720 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _987)) + (_2749 * cbMatDynParam._m0[11u].z)))) + cbMatDynParam._m0[7u].z) + (_2811 * (cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z));
    float _2835 = cbInstanceData._m0[_879 + 6u].w * (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)));
    float _2840 = _775 / cbSceneParam._m0[86u].x;
    float _2841 = _776 / cbSceneParam._m0[86u].y;
    vec4 _2855 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2840, _2841, (log2((isnan(cbSceneParam._m0[77u].w) ? _710 : (isnan(_710) ? cbSceneParam._m0[77u].w : min(_710, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2857 = _2855.x;
    float _2858 = _2855.y;
    float _2859 = _2855.z;
    float _2860 = _2855.w;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    if (_710 > cbSceneParam._m0[78u].w)
    {
        float _2915 = isnan(_710) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _710 : min(cbSceneParam._m0[80u].w, _710));
        float _2916 = _2915 / _710;
        float _2927 = _2916 * _760;
        float _2928 = _761 * _2916;
        float _2929 = (-0.0) - _2928;
        float _2930 = _2916 * _762;
        float _2932 = (cbSceneParam._m0[77u].w * _2929) / _2915;
        float _2933 = _2932 + cbSceneParam._m0[79u].w;
        float _2934 = cbSceneParam._m0[79u].w - _2928;
        float _2940 = sqrt(((_2927 * _2927) + (_2928 * _2928)) + (_2930 * _2930));
        float _2943 = (1.0 - (cbSceneParam._m0[77u].w / _2915)) * _2940;
        float _2948 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2950 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3103;
        if (abs((_2929 - _2932) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3103 = ((((_2933 > 0.0) ? exp2(_2948 * _2933) : (2.0 - exp2(_2950 * _2933))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2943;
        }
        else
        {
            float _3063 = 1.0 / cbSceneParam._m0[80u].x;
            float _3064 = isnan(_2934) ? _2933 : (isnan(_2933) ? _2934 : max(_2933, _2934));
            float _3065 = isnan(_2934) ? _2933 : (isnan(_2933) ? _2934 : min(_2933, _2934));
            float _3074 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : min(_3064, 0.0));
            float _3075 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : min(_3065, 0.0));
            _3103 = ((abs(_2940 / _2929) * cbSceneParam._m0[80u].y) * ((((_3074 - _3075) * 2.0) - ((exp2(_2948 * (isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0)))) - exp2(_2948 * (isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0))))) * _3063)) - ((exp2(_2950 * _3074) - exp2(_2950 * _3075)) * _3063))) + (_2943 * cbSceneParam._m0[80u].z);
        }
        vec4 _3105 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2840, _2841, 1.0), 0.0);
        float _3114 = exp2((_3103 * (-1.44269502162933349609375)) * (1.0 - _3105.w));
        float _3115 = log2(_3114);
        float _3131 = log2(_2860);
        _2952 = (exp2(_3131 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].x)) * _3105.x) / cbSceneParam._m0[78u].x)) + _2857;
        _2954 = (exp2(_3131 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].y)) * _3105.y) / cbSceneParam._m0[78u].y)) + _2858;
        _2956 = (exp2(_3131 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].z)) * _3105.z) / cbSceneParam._m0[78u].z)) + _2859;
        _2958 = _3114 * _2860;
    }
    else
    {
        _2952 = _2857;
        _2954 = _2858;
        _2956 = _2859;
        _2958 = _2860;
    }
    float _2970 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2971 = _2970 == 3.0;
    float _2972 = log2(_2958);
    float _2979 = exp2(_2972 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0)));
    float _2980 = exp2(_2972 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0)));
    float _2981 = exp2(_2972 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0)));
    float _2990 = (_2970 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2990 * (_2971 ? _2979 : (_2979 + (cbSceneParam._m0[72u].w * _2952)));
    SV_Target.y = _2990 * (_2971 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2954)));
    SV_Target.z = _2990 * (_2971 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2956)));
    SV_Target.w = _2835;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2835;
}


