#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[25];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_12;
layout(set = 0, binding = 10) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1410;
float _4155;
float _4156;
float _4157;
float _4158;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252;
    float _253;
    float _254;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
    }
    else
    {
        _252 = _238;
        _253 = _239;
        _254 = _240;
    }
    vec4 _283 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _311 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _343 = _337.x * cbMatDynParam._m0[17u].x;
    float _344 = _337.y * cbMatDynParam._m0[17u].y;
    float _345 = _337.z * cbMatDynParam._m0[17u].z;
    vec4 _364 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _383 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _394 = (cbMatDynParam._m0[21u].y * TEXCOORD.w) + 1.0;
    float _396 = (0.5 - ((cbMatDynParam._m0[21u].x * 0.5) * (1.0099999904632568359375 - _383.x))) * _394;
    float _4167 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _404 = (_397 * ((_364.x * cbMatDynParam._m0[18u].x) - _343)) + _343;
    float _405 = (_397 * ((_364.y * cbMatDynParam._m0[18u].y) - _344)) + _344;
    float _406 = (_397 * ((_364.z * cbMatDynParam._m0[18u].z) - _345)) + _345;
    float _411 = (0.5 - ((cbMatDynParam._m0[23u].z * 0.5) * (1.0099999904632568359375 - _383.y))) * _394;
    float _4178 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _419 = (((_311.x * cbMatDynParam._m0[19u].x) - _404) * _412) + _404;
    float _420 = (((_311.y * cbMatDynParam._m0[19u].y) - _405) * _412) + _405;
    float _421 = (((_311.z * cbMatDynParam._m0[19u].z) - _406) * _412) + _406;
    float _426 = (0.5 - ((cbMatDynParam._m0[23u].w * 0.5) * (1.0099999904632568359375 - _383.z))) * _394;
    float _4189 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _434 = (((_283.x * cbMatDynParam._m0[20u].x) - _419) * _427) + _419;
    float _435 = (((_283.y * cbMatDynParam._m0[20u].y) - _420) * _427) + _420;
    float _436 = (((_283.z * cbMatDynParam._m0[20u].z) - _421) * _427) + _421;
    vec4 _448 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_12, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _451 = _448.x * _337.w;
    float _467 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_10, SS_SpecularMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x + cbMatDynParam._m0[23u].x;
    float _468 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _489 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_3, SS_SpecularMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w)).x + cbMatDynParam._m0[22u].w;
    float _490 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _507 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_4, SS_SpecularMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x + cbMatDynParam._m0[22u].y;
    float _508 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _509 = isnan(1.0) ? _508 : (isnan(_508) ? 1.0 : min(_508, 1.0));
    float _526 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_9, SS_SpecularMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[14u].w)).x + cbMatDynParam._m0[22u].z;
    float _527 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _531 = (_397 * ((isnan(1.0) ? _527 : (isnan(_527) ? 1.0 : min(_527, 1.0))) - _509)) + _509;
    float _534 = (((isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0))) - _531) * _412) + _531;
    float _537 = (((isnan(1.0) ? _468 : (isnan(_468) ? 1.0 : min(_468, 1.0))) - _534) * _427) + _534;
    vec4 _554 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _573 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _592 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[10u].w));
    float _594 = _592.x;
    float _595 = _592.y;
    float _597 = _592.z * cbMatDynParam._m0[22u].x;
    vec4 _611 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[11u].w));
    float _619 = (((_611.z * cbMatDynParam._m0[21u].w) - _597) * _397) + _597;
    float _622 = (((_573.z * cbMatDynParam._m0[21u].z) - _619) * _412) + _619;
    float _625 = (((_554.z * cbMatDynParam._m0[24u].x) - _622) * _427) + _622;
    vec4 _638 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[12u].w));
    float _652 = (_397 * (_611.x - _594)) + _594;
    float _653 = (_397 * (_611.y - _595)) + _595;
    float _658 = ((_573.x - _652) * _412) + _652;
    float _659 = ((_573.y - _653) * _412) + _653;
    float _668 = ((((_554.x - _658) * _427) + _658) * 2.0) + (-1.0);
    float _669 = ((((_554.y - _659) * _427) + _659) * 2.0) + (-1.0);
    float _670 = dot(vec2(_668, _669), vec2(_668, _669));
    float _4240 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _675 = sqrt(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))));
    float _679 = _668 + (cbMatDynParam._m0[23u].y * ((_638.x * 2.0) + (-1.0)));
    float _680 = _669 + (cbMatDynParam._m0[23u].y * ((_638.y * 2.0) + (-1.0)));
    float _683 = fma(_675, _252, fma(_680, _244 * TANGENT.x, (_230 * _222) * _679));
    float _686 = fma(_675, _253, fma(_680, _244 * TANGENT.y, (_230 * _223) * _679));
    float _689 = fma(_675, _254, fma(_680, _244 * TANGENT.z, (_230 * _224) * _679));
    float _693 = inversesqrt(dot(vec3(_683, _686, _689), vec3(_683, _686, _689)));
    float _694 = _693 * _683;
    float _695 = _693 * _686;
    float _696 = _693 * _689;
    float _4251 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _697 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _698 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _4273 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _699 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _4284 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _700 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _4295 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _701 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _4306 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _702 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _718 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _768 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _758);
    float _769 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _758);
    float _770 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _758);
    float _774 = inversesqrt(dot(vec3(_768, _769, _770), vec3(_768, _769, _770)));
    float _775 = _768 * _774;
    float _776 = _769 * _774;
    float _777 = _770 * _774;
    vec4 _782 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _784 = _782.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1090 = sqrt(((_768 * _768) + (_769 * _769)) + (_770 * _770));
        float _1096 = (cbMatDynParam._m0[5u].x * _1090) + cbMatDynParam._m0[5u].y;
        float _4317 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1101 = (cbMatDynParam._m0[5u].z * _1090) + cbMatDynParam._m0[5u].w;
        float _4328 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) - _1097)) + _1097) < ((_784 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _795 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _796 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _798 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _800 = _798.w;
    float _818 = fma(_696, cbSceneParam._m0[5u].z, fma(_695, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _694));
    float _821 = fma(_696, cbSceneParam._m0[6u].z, fma(_695, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _694));
    float _824 = fma(_696, cbSceneParam._m0[7u].z, fma(_695, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _694));
    vec4 _826 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _828 = _826.x;
    float _840 = (((_826.y - _698) + (_826.w * _698)) * cbMtdParam._m0[3u].x) + _698;
    vec4 _841 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _857 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_828 * _828)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _841.z;
    float _866 = (((cbMatDynParam._m0[15u].x - _702) * cbMatDynParam._m0[15u].w) * _857) + _702;
    float _875 = ((_857 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _840)) + _840;
    uint _899 = uint(roundEven(NORMAL.w)) * 13u;
    uint _900 = _899 + 9u;
    uint _901 = _900 + uint(cbMatDynParam._m0[0u].w);
    float _907 = (cbMtdParam._m0[0u].x * _699) * cbInstanceData._m0[_901].x;
    float _908 = (cbMtdParam._m0[0u].y * _700) * cbInstanceData._m0[_901].y;
    float _909 = (cbMtdParam._m0[0u].z * _701) * cbInstanceData._m0[_901].z;
    float _4339 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _4350 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _4361 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    vec4 _913 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _918 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _929 = (((_918.x - _866) + (_918.w * _866)) * cbMtdParam._m0[3u].x) + _866;
    float _942 = (cbMtdParam._m0[3u].x * (((_910 * _800) - _910) + _913.x)) + _910;
    float _943 = (cbMtdParam._m0[3u].x * (((_911 * _800) - _911) + _913.y)) + _911;
    float _944 = (cbMtdParam._m0[3u].x * (((_912 * _800) - _912) + _913.z)) + _912;
    float _958 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_866 * (_699 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_866 * (_700 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_866 * (_701 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w)).z;
    float _962 = _958 * cbMatDynParam._m0[13u].w;
    float _972 = (_962 * (cbMatDynParam._m0[13u].x - _942)) + _942;
    float _973 = (_962 * (cbMatDynParam._m0[13u].y - _943)) + _943;
    float _974 = (_962 * (cbMatDynParam._m0[13u].z - _944)) + _944;
    float _982 = ((_958 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _929)) + _929;
    float _983 = 1.0 - _982;
    float _990 = (_972 + (-0.039999999105930328369140625)) * _982;
    float _991 = (_973 + (-0.039999999105930328369140625)) * _982;
    float _992 = (_974 + (-0.039999999105930328369140625)) * _982;
    float _993 = _990 + 0.039999999105930328369140625;
    float _994 = _991 + 0.039999999105930328369140625;
    float _995 = _992 + 0.039999999105930328369140625;
    vec4 _1004 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _795, cbSceneParam._m0[86u].y * _796));
    float _1007 = _1004.x * TEXCOORD_8;
    float _1008 = dot(vec3(_694, _695, _696), vec3(_775, _776, _777));
    float _1011 = _1008 * 2.0;
    float _1015 = (_1011 * _694) - _775;
    float _1016 = (_1011 * _695) - _776;
    float _1017 = (_1011 * _696) - _777;
    float _1021 = abs(dot(vec3(_775, _776, _777), vec3(_694, _695, _696)));
    float _4372 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1023 = sqrt(_875);
    float _1036 = exp2((_1023 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1023 * 3.0));
    float _1042 = (1.0 - _1036) * ((_1023 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1043 = _1036 * _1023;
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1409;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1135 = fma(_1079, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071));
        float _1139 = fma(_1079, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071));
        float _1143 = fma(_1079, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071));
        float _1167 = _1071 + _694;
        float _1168 = _1075 + _695;
        float _1169 = _1079 + _696;
        float _1179 = fma(_1169, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1167)) - _1135;
        float _1180 = fma(_1169, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1167)) - _1139;
        float _1181 = fma(_1169, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1167)) - _1143;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1135 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1139 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[34u].z) + ((((((_1143 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1237 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1203.x + (-0.5));
        float _1239 = _1237 * (_1203.y + (-0.5));
        float _1240 = _1237 * (_1203.z + (-0.5));
        float _1247 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1210.x + (-0.5));
        float _1249 = _1247 * (_1210.y + (-0.5));
        float _1250 = _1247 * (_1210.z + (-0.5));
        float _1257 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1217.x + (-0.5));
        float _1259 = _1257 * (_1217.y + (-0.5));
        float _1260 = _1257 * (_1217.z + (-0.5));
        float _1267 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1224.x + (-0.5));
        float _1269 = _1267 * (_1224.y + (-0.5));
        float _1270 = _1267 * (_1224.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1291 = (dot(vec3(_694, _695, _696), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1301 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4420 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1303 + 1.0))) + _1308) * _1271;
        float _1318 = _1239 * 0.5;
        float _1319 = _1249 * 0.5;
        float _1320 = _1259 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_694, _695, _696), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4453 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1345 + 1.0))) + _1350) * _1272;
        float _1360 = _1240 * 0.5;
        float _1361 = _1250 * 0.5;
        float _1362 = _1260 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_694, _695, _696), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4486 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1387 + 1.0))) + _1392) * _1273;
        _1409 = _1240;
        _1411 = _1239;
        _1412 = _1238;
        _1413 = _1250;
        _1414 = _1249;
        _1415 = _1248;
        _1416 = _1260;
        _1417 = _1259;
        _1418 = _1258;
        _1419 = _1273;
        _1420 = _1272;
        _1421 = _1271;
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1410;
        _1411 = _1410;
        _1412 = _1410;
        _1413 = _1410;
        _1414 = _1410;
        _1415 = _1410;
        _1416 = _1410;
        _1417 = _1410;
        _1418 = _1410;
        _1419 = _1410;
        _1420 = _1410;
        _1421 = _1410;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1453 = fma(_1079, cbModelParam._m0[30u].z, fma(_1075, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1071));
        float _1457 = fma(_1079, cbModelParam._m0[31u].z, fma(_1075, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1071));
        float _1461 = fma(_1079, cbModelParam._m0[32u].z, fma(_1075, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1071));
        float _1484 = _1071 + _694;
        float _1485 = _1075 + _695;
        float _1486 = _1079 + _696;
        float _1496 = fma(_1486, cbModelParam._m0[30u].z, fma(_1485, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1484)) - _1453;
        float _1497 = fma(_1486, cbModelParam._m0[31u].z, fma(_1485, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1484)) - _1457;
        float _1498 = fma(_1486, cbModelParam._m0[32u].z, fma(_1485, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1484)) - _1461;
        float _1502 = inversesqrt(dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498)));
        float _1515 = ((_1502 * _1496) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1453 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1502 * _1497) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1457 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1502 * _1498) / cbModelParam._m0[35u].z) + ((((((_1461 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        float _1552 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1519.x + (-0.5));
        float _1554 = _1552 * (_1519.y + (-0.5));
        float _1555 = _1552 * (_1519.z + (-0.5));
        float _1562 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1526.x + (-0.5));
        float _1564 = _1562 * (_1526.y + (-0.5));
        float _1565 = _1562 * (_1526.z + (-0.5));
        float _1572 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1533.x + (-0.5));
        float _1574 = _1572 * (_1533.y + (-0.5));
        float _1575 = _1572 * (_1533.z + (-0.5));
        float _1582 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1540.x + (-0.5));
        float _1584 = _1582 * (_1540.y + (-0.5));
        float _1585 = _1582 * (_1540.z + (-0.5));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = _1553 * 0.5;
        float _1590 = _1563 * 0.5;
        float _1591 = _1573 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_694, _695, _696), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4527 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4538 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4549 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_1616 + 1.0))) + _1621) * _1586;
        float _1631 = _1554 * 0.5;
        float _1632 = _1564 * 0.5;
        float _1633 = _1574 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_694, _695, _696), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4560 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4571 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4582 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_1658 + 1.0))) + _1663) * _1587;
        float _1673 = _1555 * 0.5;
        float _1674 = _1565 * 0.5;
        float _1675 = _1575 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_694, _695, _696), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4593 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4604 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4615 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_1700 + 1.0))) + _1705) * _1588;
        _1722 = _1555;
        _1723 = _1554;
        _1724 = _1553;
        _1725 = _1565;
        _1726 = _1564;
        _1727 = _1563;
        _1728 = _1575;
        _1729 = _1574;
        _1730 = _1573;
        _1731 = _1588;
        _1732 = _1587;
        _1733 = _1586;
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
    }
    else
    {
        _1722 = _1410;
        _1723 = _1410;
        _1724 = _1410;
        _1725 = _1410;
        _1726 = _1410;
        _1727 = _1410;
        _1728 = _1410;
        _1729 = _1410;
        _1730 = _1410;
        _1731 = _1410;
        _1732 = _1410;
        _1733 = _1410;
        _1734 = 0.0;
        _1735 = 0.0;
        _1736 = 0.0;
    }
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1422)) + _1422;
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1423)) + _1423;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1424)) + _1424;
    float _1769 = fma(_1748, cbSceneParam._m0[89u].z, fma(_1747, cbSceneParam._m0[89u].y, _1746 * cbSceneParam._m0[89u].x));
    float _1772 = fma(_1748, cbSceneParam._m0[90u].z, fma(_1747, cbSceneParam._m0[90u].y, _1746 * cbSceneParam._m0[90u].x));
    float _1775 = fma(_1748, cbSceneParam._m0[91u].z, fma(_1747, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1746));
    float _1790 = _1015 * 0.5;
    float _1791 = _1016 * 0.5;
    float _1792 = _1017 * 0.5;
    float _1793 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1796 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1799 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1830;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1806 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1409, _1413, _1416, _1419));
        float _1810 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1411, _1414, _1417, _1420));
        float _1814 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1821 = dot(vec4(cbModelParam._m0[39u]), vec4(_1790, _1791, _1792, 1.0));
        _1830 = dot(vec3(isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1821) ? 0.0 : (isnan(0.0) ? _1821 : max(0.0, _1821))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1830 = 1.0;
    }
    float _1841;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1832 = dot(vec4(cbModelParam._m0[40u]), vec4(_1790, _1791, _1792, 1.0));
        _1841 = dot(vec3(isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1841 = 1.0;
    }
    float _1845 = (_1841 * cbModelParam._m0[1u].x) + (_1830 * (1.0 - cbModelParam._m0[1u].x));
    float _1855 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _875);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1855 : min(cbModelParam._m0[25u].z, _1855));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1903 = fma(_1079, cbModelParam._m0[13u].z, fma(_1075, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071)) + cbModelParam._m0[13u].w;
        float _1907 = fma(_1079, cbModelParam._m0[14u].z, fma(_1075, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071)) + cbModelParam._m0[14u].w;
        float _1911 = fma(_1079, cbModelParam._m0[15u].z, fma(_1075, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071)) + cbModelParam._m0[15u].w;
        float _1914 = fma(_1017, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015));
        float _1917 = fma(_1017, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015));
        float _1920 = fma(_1017, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015));
        float _1948;
        if (_1914 > 0.0)
        {
            _1948 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1948 = frontier_phi_19_17_ladder;
        }
        float _2119;
        if (_1917 > 0.0)
        {
            _2119 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2119 = frontier_phi_28_24_ladder;
        }
        float _2414;
        if (_1920 > 0.0)
        {
            _2414 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2414 = frontier_phi_40_35_ladder;
        }
        float _2416 = isnan(_2119) ? _1948 : (isnan(_1948) ? _2119 : min(_1948, _2119));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1914) + _1903;
        float _2422 = (_2417 * _1917) + _1907;
        float _2423 = (_2417 * _1920) + _1911;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2424;
        float _2428 = _2424 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 > _2428) || ((_2422 < _2426) || ((_2421 < _2426) || (_2421 > _2428))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1856);
            frontier_phi_18_40_ladder = _2568.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2568.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2568.x * cbModelParam._m0[1u].y;
        }
        _1936 = frontier_phi_18_40_ladder_2;
        _1938 = frontier_phi_18_40_ladder_1;
        _1940 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1015, _1016, _1017), _1856);
        _1936 = _1924.x * cbModelParam._m0[1u].y;
        _1938 = _1924.y * cbModelParam._m0[1u].y;
        _1940 = _1924.z * cbModelParam._m0[1u].y;
    }
    float _1944 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _875);
    float _1945 = isnan(_1944) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1944 : min(cbModelParam._m0[25u].w, _1944));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1998 = fma(_1079, cbModelParam._m0[21u].z, fma(_1075, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071)) + cbModelParam._m0[21u].w;
        float _2002 = fma(_1079, cbModelParam._m0[22u].z, fma(_1075, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071)) + cbModelParam._m0[22u].w;
        float _2006 = fma(_1079, cbModelParam._m0[23u].z, fma(_1075, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071)) + cbModelParam._m0[23u].w;
        float _2009 = fma(_1017, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015));
        float _2012 = fma(_1017, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015));
        float _2015 = fma(_1017, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015));
        float _2124;
        if (_2009 > 0.0)
        {
            _2124 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2124 = frontier_phi_30_26_ladder;
        }
        float _2441;
        if (_2012 > 0.0)
        {
            _2441 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2441 = frontier_phi_42_37_ladder;
        }
        float _2779;
        if (_2015 > 0.0)
        {
            _2779 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2779 = frontier_phi_52_49_ladder;
        }
        float _2781 = isnan(_2441) ? _2124 : (isnan(_2124) ? _2441 : min(_2124, _2441));
        float _2782 = isnan(_2779) ? _2781 : (isnan(_2781) ? _2779 : min(_2781, _2779));
        float _2786 = (_2782 * _2009) + _1998;
        float _2787 = (_2782 * _2012) + _2002;
        float _2788 = (_2782 * _2015) + _2006;
        float _2789 = _2782 * 9.9999997473787516355514526367188e-05;
        float _2790 = (-1.0) - _2789;
        float _2792 = _2789 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2788 > _2792) || ((_2788 < _2790) || ((_2787 > _2792) || ((_2787 < _2790) || ((_2786 < _2790) || (_2786 > _2792))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2788, cbModelParam._m0[17u].z, fma(_2787, cbModelParam._m0[17u].y, _2786 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2788, cbModelParam._m0[18u].z, fma(_2787, cbModelParam._m0[18u].y, _2786 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2788, cbModelParam._m0[19u].z, fma(_2787, cbModelParam._m0[19u].y, _2786 * cbModelParam._m0[19u].x))), _1945);
            frontier_phi_27_52_ladder = _2910.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2910.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2910.x * cbModelParam._m0[1u].z;
        }
        _2034 = frontier_phi_27_52_ladder_2;
        _2036 = frontier_phi_27_52_ladder_1;
        _2038 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1015, _1016, _1017), _1945);
        _2034 = _2018.x * cbModelParam._m0[1u].z;
        _2036 = _2018.y * cbModelParam._m0[1u].z;
        _2038 = _2018.z * cbModelParam._m0[1u].z;
    }
    float _2051 = (((_1042 * _993) + _1043) * _1007) * ((cbModelParam._m0[1u].w * (_2034 - _1936)) + _1936);
    float _2053 = (((_1042 * _994) + _1043) * _1007) * ((cbModelParam._m0[1u].w * (_2036 - _1938)) + _1938);
    float _2055 = (((_1042 * _995) + _1043) * _1007) * ((cbModelParam._m0[1u].w * (_2038 - _1940)) + _1940);
    float _2058 = fma(_2055, cbSceneParam._m0[89u].z, fma(_2053, cbSceneParam._m0[89u].y, _2051 * cbSceneParam._m0[89u].x));
    float _2061 = fma(_2055, cbSceneParam._m0[90u].z, fma(_2053, cbSceneParam._m0[90u].y, _2051 * cbSceneParam._m0[90u].x));
    float _2064 = fma(_2055, cbSceneParam._m0[91u].z, fma(_2053, cbSceneParam._m0[91u].y, _2051 * cbSceneParam._m0[91u].x));
    float _2098 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2102 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2106 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2110 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2111 = _2098 / _2110;
    float _2112 = _2102 / _2110;
    float _2113 = _2106 / _2110;
    float _2260;
    float _2261;
    float _2262;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2140 = ((uint(_2113 > cbSceneParam._m0[59u].y) + uint(_2113 > cbSceneParam._m0[59u].x)) + uint(_2113 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2141 = _2140 + 43u;
        uint _2149 = _2140 + 44u;
        uint _2157 = _2140 + 45u;
        uint _2165 = _2140 + 46u;
        float _2176 = fma(_2110, cbSceneParam._m0[_2141].w, fma(_2106, cbSceneParam._m0[_2141].z, fma(_2102, cbSceneParam._m0[_2141].y, _2098 * cbSceneParam._m0[_2141].x)));
        float _2180 = fma(_2110, cbSceneParam._m0[_2149].w, fma(_2106, cbSceneParam._m0[_2149].z, fma(_2102, cbSceneParam._m0[_2149].y, _2098 * cbSceneParam._m0[_2149].x)));
        float _2188 = fma(_2110, cbSceneParam._m0[_2165].w, fma(_2106, cbSceneParam._m0[_2165].z, fma(_2102, cbSceneParam._m0[_2165].y, _2098 * cbSceneParam._m0[_2165].x)));
        float _2193 = cbSceneParam._m0[33u].z * _2188;
        float _2195 = cbSceneParam._m0[33u].w * _2188;
        float _2198 = fma(_2110, cbSceneParam._m0[_2157].w, fma(_2106, cbSceneParam._m0[_2157].z, fma(_2102, cbSceneParam._m0[_2157].y, _2098 * cbSceneParam._m0[_2157].x))) / _2188;
        float _2246 = (cbSceneParam._m0[33u].x - sqrt(((_2112 * _2112) + (_2111 * _2111)) + (_2113 * _2113))) * cbSceneParam._m0[33u].y;
        float _4741 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2253 = (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2193 + _2176) / _2188, (_2195 + _2180) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 + _2176) / _2188, (_2180 - _2193) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 - _2193) / _2188, (_2180 - _2195) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 - _2195) / _2188, (_2193 + _2180) / _2188), _2198), 0.0)).x), vec4(0.25)));
        _2260 = 1.0 - (_2253 * cbSceneParam._m0[34u].x);
        _2261 = 1.0 - (_2253 * cbSceneParam._m0[34u].y);
        _2262 = 1.0 - (_2253 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2260 = 1.0;
        _2261 = 1.0;
        _2262 = 1.0;
    }
    float _2326;
    float _2328;
    float _2330;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2314 = fma(_2110, cbSceneParam._m0[63u].w, fma(_2106, cbSceneParam._m0[63u].z, fma(_2102, cbSceneParam._m0[63u].y, _2098 * cbSceneParam._m0[63u].x)));
        float _2315 = fma(_2110, cbSceneParam._m0[60u].w, fma(_2106, cbSceneParam._m0[60u].z, fma(_2102, cbSceneParam._m0[60u].y, _2098 * cbSceneParam._m0[60u].x))) / _2314;
        float _2316 = fma(_2110, cbSceneParam._m0[61u].w, fma(_2106, cbSceneParam._m0[61u].z, fma(_2102, cbSceneParam._m0[61u].y, _2098 * cbSceneParam._m0[61u].x))) / _2314;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2315 >= cbSceneParam._m0[64u].x) && (_2316 >= cbSceneParam._m0[64u].y)) && (_2315 <= cbSceneParam._m0[64u].z)) && (_2316 <= cbSceneParam._m0[64u].w))
        {
            float _2454 = fma(_2110, cbSceneParam._m0[62u].w, fma(_2106, cbSceneParam._m0[62u].z, fma(_2102, cbSceneParam._m0[62u].y, _2098 * cbSceneParam._m0[62u].x))) / _2314;
            float _2458 = isnan(cbSceneParam._m0[41u].w) ? _2454 : (isnan(_2454) ? cbSceneParam._m0[41u].w : max(_2454, cbSceneParam._m0[41u].w));
            float _2501 = (cbSceneParam._m0[33u].x - sqrt(((_2112 * _2112) + (_2111 * _2111)) + (_2113 * _2113))) * cbSceneParam._m0[33u].y;
            float _4757 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
            float _2508 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2315, cbSceneParam._m0[33u].w + _2316), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2315, _2316 - cbSceneParam._m0[33u].z), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2315 - cbSceneParam._m0[33u].z, _2316 - cbSceneParam._m0[33u].w), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2315 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2316), _2458), 0.0)).x), vec4(0.25)));
            float _2512 = 1.0 - (_2508 * cbSceneParam._m0[34u].x);
            float _2513 = 1.0 - (_2508 * cbSceneParam._m0[34u].y);
            float _2514 = 1.0 - (_2508 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2513) ? _2261 : (isnan(_2261) ? _2513 : min(_2261, _2513));
            frontier_phi_39_38_ladder_1 = isnan(_2512) ? _2260 : (isnan(_2260) ? _2512 : min(_2260, _2512));
            frontier_phi_39_38_ladder_2 = isnan(_2514) ? _2262 : (isnan(_2262) ? _2514 : min(_2262, _2514));
        }
        else
        {
            frontier_phi_39_38_ladder = _2261;
            frontier_phi_39_38_ladder_1 = _2260;
            frontier_phi_39_38_ladder_2 = _2262;
        }
        _2326 = frontier_phi_39_38_ladder_1;
        _2328 = frontier_phi_39_38_ladder;
        _2330 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2326 = _2260;
        _2328 = _2261;
        _2330 = _2262;
    }
    uvec4 _2335 = floatBitsToUint(cbInstanceData._m0[_899 + 5u]);
    uint _2337 = _2335.x * 14u;
    uint _2338 = _2337 + 13u;
    float _2345 = _1007 + (-1.0);
    float _2350 = (cbLight._m0[_2338].x * _2345) + 1.0;
    float _2351 = (cbLight._m0[_2338].y * _2345) + 1.0;
    float _2352 = (cbLight._m0[_2338].z * _2345) + 1.0;
    float _2353 = (cbLight._m0[_2338].w * _2345) + 1.0;
    uint _2354 = _2337 + 5u;
    float _2360 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
    uint _2364 = _2337 + 4u;
    float _2373 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
    uint _2377 = _2337 | 1u;
    float _2388 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_694, _695, _696));
    float _2391 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_694, _695, _696));
    float _4793 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _4804 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2396 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * 0.3183098733425140380859375;
    float _2398 = (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * 0.3183098733425140380859375;
    float _2405 = ((cbLight._m0[_2354].x * _2360) * _2398) + (((cbLight._m0[_2364].x * _2326) * _2373) * _2396);
    float _2406 = ((_2360 * cbLight._m0[_2354].y) * _2398) + (((cbLight._m0[_2364].y * _2328) * _2373) * _2396);
    float _2407 = ((_2360 * cbLight._m0[_2354].z) * _2398) + (((cbLight._m0[_2364].z * _2330) * _2373) * _2396);
    uvec4 _2411 = floatBitsToUint(cbLight._m0[_2337 + 12u]);
    bool _2413 = _2411.x == 0u;
    float _2515;
    float _2517;
    float _2519;
    if (_2413)
    {
        _2515 = _2405;
        _2517 = _2406;
        _2519 = _2407;
    }
    else
    {
        uint _2523 = _2337 + 6u;
        float _2539 = (dot(vec3(cbLight._m0[_2337 + 2u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4815 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2542 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2515 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2405;
        _2517 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2406;
        _2519 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2407;
    }
    bool _2522 = _2411.y == 0u;
    float _2577;
    float _2579;
    float _2581;
    if (_2522)
    {
        _2577 = _2515;
        _2579 = _2517;
        _2581 = _2519;
    }
    else
    {
        uint _2750 = _2337 + 7u;
        float _2766 = (dot(vec3(cbLight._m0[_2337 + 3u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2767 = _2766 * _2766;
        float _4831 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2768 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2769 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2577 = (((cbLight._m0[_2750].x * 0.3183098733425140380859375) * _2768) * _2769) + _2515;
        _2579 = (((cbLight._m0[_2750].y * 0.3183098733425140380859375) * _2768) * _2769) + _2517;
        _2581 = (((cbLight._m0[_2750].z * 0.3183098733425140380859375) * _2768) * _2769) + _2519;
    }
    uint _2584 = _2337 + 8u;
    float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _875) * 0.949999988079071044921875);
    float _2598 = _2597 * _2597;
    float _2599 = cbLight._m0[_2337].x + _775;
    float _2600 = cbLight._m0[_2337].y + _776;
    float _2601 = cbLight._m0[_2337].z + _777;
    float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
    float _2606 = _2605 * _2599;
    float _2607 = _2605 * _2600;
    float _2608 = _2605 * _2601;
    float _2609 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2337].xyz));
    float _4847 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
    float _4858 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _2613 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
    float _2614 = dot(vec3(_694, _695, _696), vec3(_2606, _2607, _2608));
    float _4869 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
    float _2618 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2606, _2607, _2608));
    float _4880 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2622 = _2598 * _2598;
    float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
    float _2634 = exp2(log2(1.0 - (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) * 5.0);
    float _2635 = 0.959999978542327880859375 - _990;
    float _2637 = 0.959999978542327880859375 - _991;
    float _2638 = 0.959999978542327880859375 - _992;
    float _2645 = 1.0 - _2598;
    float _2656 = (0.5 / (((_2613 * ((_2612 * _2645) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2645) + _2598) * _2612))) * _2612;
    float _4891 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2658 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
    uint _2672 = _2337 + 9u;
    float _2683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _875) * 0.949999988079071044921875);
    float _2684 = _2683 * _2683;
    float _2685 = cbLight._m0[_2377].x + _775;
    float _2686 = cbLight._m0[_2377].y + _776;
    float _2687 = cbLight._m0[_2377].z + _777;
    float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
    float _2692 = _2691 * _2685;
    float _2693 = _2691 * _2686;
    float _2694 = _2691 * _2687;
    float _2695 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2377].xyz));
    float _4902 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2698 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
    float _2699 = dot(vec3(_694, _695, _696), vec3(_2692, _2693, _2694));
    float _4913 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2702 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
    float _2703 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2692, _2693, _2694));
    float _4924 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2707 = _2684 * _2684;
    float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
    float _2718 = exp2(log2(1.0 - (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) * 5.0);
    float _2725 = 1.0 - _2684;
    float _2735 = (0.5 / (((_2613 * ((_2698 * _2725) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2725) + _2684) * _2698))) * _2698;
    float _4935 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2737 = (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
    float _2747 = (((((_2718 * _2635) + _993) * cbLight._m0[_2672].x) * _2737) * _2360) + ((((cbLight._m0[_2584].x * _2326) * ((_2634 * _2635) + _993)) * _2658) * _2373);
    float _2748 = (((((_2718 * _2637) + _994) * cbLight._m0[_2672].y) * _2737) * _2360) + ((((cbLight._m0[_2584].y * _2328) * ((_2634 * _2637) + _994)) * _2658) * _2373);
    float _2749 = (((((_2718 * _2638) + _995) * cbLight._m0[_2672].z) * _2737) * _2360) + ((((cbLight._m0[_2584].z * _2330) * ((_2634 * _2638) + _995)) * _2658) * _2373);
    float _2805;
    float _2807;
    float _2809;
    if (_2413)
    {
        _2805 = _2747;
        _2807 = _2748;
        _2809 = _2749;
    }
    else
    {
        uint _2811 = _2337 + 2u;
        uint _2815 = _2337 + 10u;
        float _2829 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2811].w)) * _875) * 0.949999988079071044921875);
        float _2830 = _2829 * _2829;
        float _2831 = cbLight._m0[_2811].x + _775;
        float _2832 = cbLight._m0[_2811].y + _776;
        float _2833 = cbLight._m0[_2811].z + _777;
        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
        float _2838 = _2837 * _2831;
        float _2839 = _2837 * _2832;
        float _2840 = _2837 * _2833;
        float _2841 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2811].xyz));
        float _4946 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
        float _2845 = dot(vec3(_694, _695, _696), vec3(_2838, _2839, _2840));
        float _4957 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
        float _2849 = dot(vec3(cbLight._m0[_2811].xyz), vec3(_2838, _2839, _2840));
        float _4968 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2853 = _2830 * _2830;
        float _2857 = ((_2848 * _2848) * (_2853 + (-1.0))) + 1.0;
        float _2864 = exp2(log2(1.0 - (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)))) * 5.0);
        float _2871 = 1.0 - _2830;
        float _2881 = (0.5 / (((_2613 * ((_2844 * _2871) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2871) + _2830) * _2844))) * _2844;
        float _4979 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2883 = (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_2853 / ((_2857 * _2857) * 3.141590118408203125));
        float _2884 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2805 = (((((_2864 * _2635) + _993) * cbLight._m0[_2815].x) * _2883) * _2884) + _2747;
        _2807 = (((((_2864 * _2637) + _994) * cbLight._m0[_2815].y) * _2883) * _2884) + _2748;
        _2809 = (((((_2864 * _2638) + _995) * cbLight._m0[_2815].z) * _2883) * _2884) + _2749;
    }
    float _2915;
    float _2917;
    float _2919;
    if (_2522)
    {
        _2915 = _2805;
        _2917 = _2807;
        _2919 = _2809;
    }
    else
    {
        uint _2926 = _2337 + 3u;
        uint _2930 = _2337 + 11u;
        float _2944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2926].w)) * _875) * 0.949999988079071044921875);
        float _2945 = _2944 * _2944;
        float _2946 = cbLight._m0[_2926].x + _775;
        float _2947 = cbLight._m0[_2926].y + _776;
        float _2948 = cbLight._m0[_2926].z + _777;
        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
        float _2953 = _2952 * _2946;
        float _2954 = _2952 * _2947;
        float _2955 = _2952 * _2948;
        float _2956 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2926].xyz));
        float _4995 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2959 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
        float _2960 = dot(vec3(_694, _695, _696), vec3(_2953, _2954, _2955));
        float _5006 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2963 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
        float _2964 = dot(vec3(cbLight._m0[_2926].xyz), vec3(_2953, _2954, _2955));
        float _5017 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2968 = _2945 * _2945;
        float _2972 = ((_2963 * _2963) * (_2968 + (-1.0))) + 1.0;
        float _2979 = exp2(log2(1.0 - (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0)))) * 5.0);
        float _2986 = 1.0 - _2945;
        float _2996 = (0.5 / (((_2613 * ((_2959 * _2986) + _2945)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2986) + _2945) * _2959))) * _2959;
        float _5028 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2998 = (isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_2968 / ((_2972 * _2972) * 3.141590118408203125));
        float _2999 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2915 = (((((_2979 * _2635) + _993) * cbLight._m0[_2930].x) * _2998) * _2999) + _2805;
        _2917 = (((((_2979 * _2637) + _994) * cbLight._m0[_2930].y) * _2998) * _2999) + _2807;
        _2919 = (((((_2979 * _2638) + _995) * cbLight._m0[_2930].z) * _2998) * _2999) + _2809;
    }
    float _3064;
    float _3066;
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    if (_2335.y == 0u)
    {
        uvec4 _3020 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3021 = _3020.x;
        uint _3032 = uint((float(_3020.y) * floor(float(uint(cbSceneParam._m0[85u].y * _796) / _3021))) + floor(float(uint(cbSceneParam._m0[85u].x * _795) / _3021)));
        float _3042 = (log2(_2113 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3043 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        uint _3046 = uint(isnan(14.0) ? _3043 : (isnan(_3043) ? 14.0 : min(_3043, 14.0)));
        uvec4 _3051 = texelFetch(g_lightClusterGridBuffer, int(((_3046 << 2u) + (_3032 << 6u)) >> 2u));
        uint _3052 = _3051.x;
        uint _3053 = _3020.z;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        if (((((1u << ((_3053 >> 4u) & 15u)) + 4294967295u) & _3052) == 0u) || ((_3053 & 240u) == 0u))
        {
            _3217 = 0.0;
            _3219 = 0.0;
            _3221 = 0.0;
            _3223 = 0.0;
            _3225 = 0.0;
            _3227 = 0.0;
        }
        else
        {
            float _3218;
            float _3220;
            float _3222;
            float _3224;
            float _3226;
            float _3228;
            float _3369 = 0.0;
            float _3370 = 0.0;
            float _3371 = 0.0;
            float _3372 = 0.0;
            float _3373 = 0.0;
            float _3374 = 0.0;
            uint _3375 = 0u;
            uint _3384;
            bool _3385;
            for (;;)
            {
                _3384 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3375 << 2u)) >> 2u)).x;
                _3385 = _3384 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3385)
                {
                    frontier_phi_73_pred = _3374;
                    frontier_phi_73_pred_1 = _3373;
                    frontier_phi_73_pred_2 = _3372;
                    frontier_phi_73_pred_3 = _3371;
                    frontier_phi_73_pred_4 = _3370;
                    frontier_phi_73_pred_5 = _3369;
                }
                else
                {
                    float _3514;
                    float _3515;
                    float _3516;
                    float _3517;
                    float _3518;
                    float _3519;
                    uint _3520;
                    _3514 = _3369;
                    _3515 = _3370;
                    _3516 = _3371;
                    _3517 = _3372;
                    _3518 = _3373;
                    _3519 = _3374;
                    _3520 = _3384;
                    float _3441;
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    float _3446;
                    for (;;)
                    {
                        uint _3524 = uint(findLSB(_3520)) + (_3375 << 5u);
                        uint _3521 = (_3520 + 4294967295u) & _3520;
                        uint _3526 = _3524 * 48u;
                        vec4 _3540 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3526)).x, texelFetch(g_PointLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3526 + 3u)).x));
                        uint _3546 = (_3524 * 48u) + 4u;
                        vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3546)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 3u)).x));
                        uint _3565 = (_3524 * 48u) + 8u;
                        vec3 _3576 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3565)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 2u)).x));
                        float _3580 = _3540.x - _2111;
                        float _3581 = _3540.y - _2112;
                        float _3582 = _3540.z - _2113;
                        float _3583 = dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582));
                        float _3586 = inversesqrt(_3583);
                        float _3587 = _3586 * _3580;
                        float _3588 = _3586 * _3581;
                        float _3589 = _3586 * _3582;
                        float _3590 = dot(vec3(_818, _821, _824), vec3(_3587, _3588, _3589));
                        float _3595 = 1.0 - (_3583 * _3540.w);
                        float _5054 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3596 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
                        float _3597 = sqrt(_3583) * _3559.w;
                        float _3600 = 1.39999997615814208984375 / (_3597 + 1.39999997615814208984375);
                        float _3601 = _3600 * _3600;
                        float _3604 = ((1.0 - _3601) * _3590) + _3601;
                        float _3607 = _3597 * _3597;
                        float _3610 = ((isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0))) * _3596) / ((_3607 * 0.699999988079071044921875) + 1.0);
                        float _3614 = (-0.0) - _2111;
                        float _3615 = (-0.0) - _2112;
                        float _3616 = (-0.0) - _2113;
                        float _3620 = inversesqrt(dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616)));
                        float _3621 = _3620 * _3614;
                        float _3622 = _3620 * _3615;
                        float _3623 = _3620 * _3616;
                        float _3630 = exp2(log2(1.0 / ((_3607 * 3.5) + 5.0)) * 0.25);
                        float _3631 = 1.0 - _1023;
                        float _3638 = sqrt(1.0 - ((1.0 - (_3631 * _3631)) * (1.0 - (_3630 * _3630))));
                        float _3639 = _3638 * _3638;
                        float _3640 = _3639 * _3639;
                        float _3641 = _3621 + _3587;
                        float _3642 = _3622 + _3588;
                        float _3643 = _3623 + _3589;
                        float _3647 = inversesqrt(dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643)));
                        float _3651 = dot(vec3(_818, _821, _824), vec3(_3621, _3622, _3623));
                        float _5070 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                        float _3654 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                        float _3655 = dot(vec3(_818, _821, _824), vec3(_3647 * _3641, _3647 * _3642, _3647 * _3643));
                        float _5081 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                        float _3658 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                        float _3662 = ((_3658 * _3658) * (_3640 + (-1.0))) + 1.0;
                        float _3663 = _3600 * _3639;
                        float _3664 = _3663 * _3663;
                        float _3667 = ((1.0 - _3664) * _3590) + _3664;
                        float _5092 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                        float _3668 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
                        float _3669 = 1.0 - _3639;
                        float _3679 = (0.5 / (((_3668 * ((_3654 * _3669) + _3639)) + 9.9999999392252902907785028219223e-09) + (((_3668 * _3669) + _3639) * _3654))) * _3668;
                        float _5103 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                        float _3690 = (((_3640 * 3.1415927410125732421875) * (isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0)))) / ((_3662 * _3662) * ((_3607 * 2.1991131305694580078125) + 3.141590118408203125))) * _3596;
                        _3444 = (_3610 * _3559.x) + _3517;
                        _3445 = (_3610 * _3559.y) + _3518;
                        _3446 = (_3610 * _3559.z) + _3519;
                        _3441 = (_3690 * _3576.x) + _3514;
                        _3442 = (_3690 * _3576.y) + _3515;
                        _3443 = (_3690 * _3576.z) + _3516;
                        if (_3521 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3514 = _3441;
                            _3515 = _3442;
                            _3516 = _3443;
                            _3517 = _3444;
                            _3518 = _3445;
                            _3519 = _3446;
                            _3520 = _3521;
                        }
                    }
                    frontier_phi_73_pred = _3446;
                    frontier_phi_73_pred_1 = _3445;
                    frontier_phi_73_pred_2 = _3444;
                    frontier_phi_73_pred_3 = _3443;
                    frontier_phi_73_pred_4 = _3442;
                    frontier_phi_73_pred_5 = _3441;
                }
                _3228 = frontier_phi_73_pred;
                _3226 = frontier_phi_73_pred_1;
                _3224 = frontier_phi_73_pred_2;
                _3222 = frontier_phi_73_pred_3;
                _3220 = frontier_phi_73_pred_4;
                _3218 = frontier_phi_73_pred_5;
                uint _3376 = _3375 + 1u;
                if (_3376 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3369 = _3218;
                    _3370 = _3220;
                    _3371 = _3222;
                    _3372 = _3224;
                    _3373 = _3226;
                    _3374 = _3228;
                    _3375 = _3376;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3217 = _3218;
            _3219 = _3220;
            _3221 = _3222;
            _3223 = _3224;
            _3225 = _3226;
            _3227 = _3228;
        }
        uvec4 _3231 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3232 = _3231.z;
        uint _3234 = (_3232 >> 8u) & 15u;
        float _3337;
        float _3339;
        float _3341;
        float _3343;
        float _3345;
        float _3347;
        if (((4294967295u << _3234) & _3052) == 0u)
        {
            _3337 = _3217;
            _3339 = _3219;
            _3341 = _3221;
            _3343 = _3223;
            _3345 = _3225;
            _3347 = _3227;
        }
        else
        {
            float _3362 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
            float _3363 = _3362 * _2111;
            float _3364 = _3362 * _2112;
            float _3365 = _3362 * _2113;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3234 < ((_3232 >> 12u) & 15u))
            {
                float _3338;
                float _3340;
                float _3342;
                float _3344;
                float _3346;
                float _3348;
                float _3497 = _3217;
                float _3498 = _3219;
                float _3499 = _3221;
                float _3500 = _3223;
                float _3501 = _3225;
                float _3502 = _3227;
                uint _3503 = _3234;
                uint _3512;
                bool _3513;
                for (;;)
                {
                    _3512 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3503 << 2u)) >> 2u)).x;
                    _3513 = _3512 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3513)
                    {
                        frontier_phi_84_pred = _3501;
                        frontier_phi_84_pred_1 = _3500;
                        frontier_phi_84_pred_2 = _3499;
                        frontier_phi_84_pred_3 = _3498;
                        frontier_phi_84_pred_4 = _3497;
                        frontier_phi_84_pred_5 = _3502;
                    }
                    else
                    {
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3997;
                        float _3998;
                        float _3999;
                        float _4000;
                        float _4001;
                        float _4002;
                        float _3717 = _3497;
                        float _3718 = _3498;
                        float _3719 = _3499;
                        float _3720 = _3500;
                        float _3721 = _3501;
                        float _3722 = _3502;
                        uint _3723 = _3512;
                        uint _3724;
                        vec4 _3749;
                        float _3750;
                        vec4 _3765;
                        vec3 _3777;
                        vec4 _3792;
                        vec4 _3807;
                        float _3853;
                        bool _3854;
                        for (;;)
                        {
                            uint _3734 = ((_3503 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3723));
                            _3724 = (_3723 + 4294967295u) & _3723;
                            uint _3736 = _3734 * 40u;
                            _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            _3750 = _3749.w;
                            uint _3752 = (_3734 * 40u) + 4u;
                            _3765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 3u)).x));
                            uint _3767 = (_3734 * 40u) + 8u;
                            _3777 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 2u)).x));
                            uint _3779 = (_3734 * 40u) + 16u;
                            _3792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 3u)).x));
                            uint _3794 = (_3734 * 40u) + 20u;
                            _3807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 3u)).x));
                            uint _3809 = (_3734 * 40u) + 24u;
                            vec4 _3822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 3u)).x));
                            uint _3828 = (_3734 * 40u) + 28u;
                            vec4 _3841 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 3u)).x));
                            _3853 = fma(_2113, _3841.z, fma(_2112, _3841.y, _3841.x * _2111)) + _3841.w;
                            _3854 = !((fma(_2113, _3822.z, fma(_2112, _3822.y, _3822.x * _2111)) + _3822.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3854)
                            {
                                float _3881 = _3749.x - _2111;
                                float _3882 = _3749.y - _2112;
                                float _3883 = _3749.z - _2113;
                                float _3884 = dot(vec3(_3881, _3882, _3883), vec3(_3881, _3882, _3883));
                                float _3887 = inversesqrt(_3884);
                                float _3888 = _3887 * _3881;
                                float _3889 = _3887 * _3882;
                                float _3890 = _3887 * _3883;
                                float _3894 = 1.0 - (_3884 / (_3750 * _3750));
                                float _5114 = isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0));
                                float _3895 = isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0));
                                float _3899 = sqrt(_3884) * _3765.w;
                                float _3901 = 1.39999997615814208984375 / (_3899 + 1.39999997615814208984375);
                                float _3902 = _3901 * _3901;
                                float _3905 = ((1.0 - _3902) * dot(vec3(_3888, _3889, _3890), vec3(_818, _821, _824))) + _3902;
                                float _3908 = _3899 * _3899;
                                float _3912 = (fma(_2113, _3792.z, fma(_2112, _3792.y, _3792.x * _2111)) + _3792.w) / _3853;
                                float _3913 = (fma(_2113, _3807.z, fma(_2112, _3807.y, _3807.x * _2111)) + _3807.w) / _3853;
                                float _3917 = 1.0 - dot(vec2(_3912, _3913), vec2(_3912, _3913));
                                float _5130 = isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0));
                                float _3918 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
                                float _3919 = _3918 * (((isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0))) * _3895) / ((_3908 * 0.699999988079071044921875) + 1.0));
                                float _3931 = exp2(log2(1.0 / ((_3908 * 3.5) + 5.0)) * 0.25);
                                float _3932 = 1.0 - _1023;
                                float _3939 = sqrt(1.0 - ((1.0 - (_3932 * _3932)) * (1.0 - (_3931 * _3931))));
                                float _3940 = _3939 * _3939;
                                float _3941 = _3940 * _3940;
                                float _3942 = _3888 - _3363;
                                float _3943 = _3889 - _3364;
                                float _3944 = _3890 - _3365;
                                float _3948 = inversesqrt(dot(vec3(_3942, _3943, _3944), vec3(_3942, _3943, _3944)));
                                float _3952 = dot(vec3(_818, _821, _824), vec3((-0.0) - _3363, (-0.0) - _3364, (-0.0) - _3365));
                                float _5141 = isnan(0.0) ? _3952 : (isnan(_3952) ? 0.0 : max(_3952, 0.0));
                                float _3955 = isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0));
                                float _3956 = dot(vec3(_818, _821, _824), vec3(_3948 * _3942, _3948 * _3943, _3948 * _3944));
                                float _5152 = isnan(0.0) ? _3956 : (isnan(_3956) ? 0.0 : max(_3956, 0.0));
                                float _3959 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
                                float _3963 = ((_3959 * _3959) * (_3941 + (-1.0))) + 1.0;
                                float _3964 = _3901 * _3940;
                                float _3965 = _3964 * _3964;
                                float _3971 = ((1.0 - _3965) * dot(vec3(_818, _821, _824), vec3(_3888, _3889, _3890))) + _3965;
                                float _5163 = isnan(0.0) ? _3971 : (isnan(_3971) ? 0.0 : max(_3971, 0.0));
                                float _3972 = isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0));
                                float _3973 = 1.0 - _3940;
                                float _3983 = (0.5 / (((_3972 * ((_3955 * _3973) + _3940)) + 9.9999999392252902907785028219223e-09) + (((_3972 * _3973) + _3940) * _3955))) * _3972;
                                float _5174 = isnan(0.0) ? _3983 : (isnan(_3983) ? 0.0 : max(_3983, 0.0));
                                float _3993 = (_3918 * _3895) * (((_3941 * 3.1415927410125732421875) * (isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0)))) / ((_3963 * _3963) * ((_3908 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3919 * _3765.y;
                                frontier_phi_90_pred_1 = _3919 * _3765.x;
                                frontier_phi_90_pred_2 = _3993 * _3777.z;
                                frontier_phi_90_pred_3 = _3993 * _3777.y;
                                frontier_phi_90_pred_4 = _3993 * _3777.x;
                                frontier_phi_90_pred_5 = _3919 * _3765.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4001 = frontier_phi_90_pred;
                            _4000 = frontier_phi_90_pred_1;
                            _3999 = frontier_phi_90_pred_2;
                            _3998 = frontier_phi_90_pred_3;
                            _3997 = frontier_phi_90_pred_4;
                            _4002 = frontier_phi_90_pred_5;
                            _3707 = _4000 + _3720;
                            _3708 = _4001 + _3721;
                            _3709 = _4002 + _3722;
                            _3704 = _3997 + _3717;
                            _3705 = _3998 + _3718;
                            _3706 = _3999 + _3719;
                            if (_3724 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3717 = _3704;
                                _3718 = _3705;
                                _3719 = _3706;
                                _3720 = _3707;
                                _3721 = _3708;
                                _3722 = _3709;
                                _3723 = _3724;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3708;
                        frontier_phi_84_pred_1 = _3707;
                        frontier_phi_84_pred_2 = _3706;
                        frontier_phi_84_pred_3 = _3705;
                        frontier_phi_84_pred_4 = _3704;
                        frontier_phi_84_pred_5 = _3709;
                    }
                    _3346 = frontier_phi_84_pred;
                    _3344 = frontier_phi_84_pred_1;
                    _3342 = frontier_phi_84_pred_2;
                    _3340 = frontier_phi_84_pred_3;
                    _3338 = frontier_phi_84_pred_4;
                    _3348 = frontier_phi_84_pred_5;
                    uint _3504 = _3503 + 1u;
                    if (_3504 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3497 = _3338;
                        _3498 = _3340;
                        _3499 = _3342;
                        _3500 = _3344;
                        _3501 = _3346;
                        _3502 = _3348;
                        _3503 = _3504;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3348;
                frontier_phi_65_66_ladder_1 = _3344;
                frontier_phi_65_66_ladder_2 = _3346;
                frontier_phi_65_66_ladder_3 = _3340;
                frontier_phi_65_66_ladder_4 = _3338;
                frontier_phi_65_66_ladder_5 = _3342;
            }
            else
            {
                frontier_phi_65_66_ladder = _3227;
                frontier_phi_65_66_ladder_1 = _3223;
                frontier_phi_65_66_ladder_2 = _3225;
                frontier_phi_65_66_ladder_3 = _3219;
                frontier_phi_65_66_ladder_4 = _3217;
                frontier_phi_65_66_ladder_5 = _3221;
            }
            _3337 = frontier_phi_65_66_ladder_4;
            _3339 = frontier_phi_65_66_ladder_3;
            _3341 = frontier_phi_65_66_ladder_5;
            _3343 = frontier_phi_65_66_ladder_1;
            _3345 = frontier_phi_65_66_ladder_2;
            _3347 = frontier_phi_65_66_ladder;
        }
        float _3352 = isnan(1.0) ? _1007 : (isnan(_1007) ? 1.0 : min(_1007, 1.0));
        _3064 = (_3352 * _3343) + _2577;
        _3066 = (_3352 * _3345) + _2579;
        _3068 = (_3352 * _3347) + _2581;
        _3070 = ((_3337 * _993) * _3352) + _2915;
        _3072 = ((_3339 * _994) * _3352) + _2917;
        _3074 = ((_3341 * _995) * _3352) + _2919;
    }
    else
    {
        _3064 = _2577;
        _3066 = _2579;
        _3068 = _2581;
        _3070 = _2915;
        _3072 = _2917;
        _3074 = _2919;
    }
    float _3081 = (_983 * _972) * cbMatDynParam._m0[9u].x;
    float _3082 = (_983 * _973) * cbMatDynParam._m0[9u].y;
    float _3083 = (_983 * _974) * cbMatDynParam._m0[9u].z;
    float _3094 = dot(vec3(_694, _695, _696), vec3(0.0, -1.0, 0.0));
    float _5190 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
    float _3097 = isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0));
    float _3101 = dot(vec3(_1015, _1016, _1017), vec3(0.0, -1.0, 0.0));
    float _5201 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
    float _3107 = exp2(log2(isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0))) * 4.0);
    float _5212 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
    float _5223 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
    float _5234 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
    float _5245 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _3152 = abs(exp2(log2(_1008) * cbMatDynParam._m0[12u].x));
    float _3153 = isnan(0.100000001490116119384765625) ? _3152 : (isnan(_3152) ? 0.100000001490116119384765625 : max(_3152, 0.100000001490116119384765625));
    float _3159 = ((isnan(0.699999988079071044921875) ? _3153 : (isnan(_3153) ? 0.699999988079071044921875 : min(_3153, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _3169 = ((((cbMatDynParam._m0[10u].x * cbPerFrame._m0[3u].x) * ((_3070 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1845)) + (_3107 * cbMatDynParam._m0[11u].x))) + ((isnan(1.0) ? _5212 : (isnan(_5212) ? 1.0 : min(_5212, 1.0))) * ((_3064 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1007)) + (_3097 * cbMatDynParam._m0[11u].x)))) + cbMatDynParam._m0[7u].x) + (_3159 * (cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x));
    float _3172 = ((((cbMatDynParam._m0[10u].y * cbPerFrame._m0[3u].x) * ((_3072 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1845)) + (_3107 * cbMatDynParam._m0[11u].y))) + ((isnan(1.0) ? _5223 : (isnan(_5223) ? 1.0 : min(_5223, 1.0))) * ((_3066 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1007)) + (_3097 * cbMatDynParam._m0[11u].y)))) + cbMatDynParam._m0[7u].y) + (_3159 * (cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y));
    float _3175 = ((((cbMatDynParam._m0[10u].z * cbPerFrame._m0[3u].x) * ((_3074 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1845)) + (_3107 * cbMatDynParam._m0[11u].z))) + ((isnan(1.0) ? _5234 : (isnan(_5234) ? 1.0 : min(_5234, 1.0))) * ((_3068 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1007)) + (_3097 * cbMatDynParam._m0[11u].z)))) + cbMatDynParam._m0[7u].z) + (_3159 * (cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z));
    float _3176 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
    float _3177 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
    float _3178 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
    float _3183 = cbInstanceData._m0[_899 + 6u].w * (isnan(1.0) ? _5245 : (isnan(_5245) ? 1.0 : min(_5245, 1.0)));
    float _3188 = _795 / cbSceneParam._m0[86u].x;
    float _3189 = _796 / cbSceneParam._m0[86u].y;
    vec4 _3203 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3188, _3189, (log2((isnan(cbSceneParam._m0[77u].w) ? _718 : (isnan(_718) ? cbSceneParam._m0[77u].w : min(_718, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3205 = _3203.x;
    float _3206 = _3203.y;
    float _3207 = _3203.z;
    float _3208 = _3203.w;
    float _3279;
    float _3281;
    float _3283;
    float _3285;
    if (_718 > cbSceneParam._m0[78u].w)
    {
        float _3242 = isnan(_718) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _718 : min(cbSceneParam._m0[80u].w, _718));
        float _3243 = _3242 / _718;
        float _3254 = _3243 * _768;
        float _3255 = _769 * _3243;
        float _3256 = (-0.0) - _3255;
        float _3257 = _3243 * _770;
        float _3259 = (cbSceneParam._m0[77u].w * _3256) / _3242;
        float _3260 = _3259 + cbSceneParam._m0[79u].w;
        float _3261 = cbSceneParam._m0[79u].w - _3255;
        float _3267 = sqrt(((_3254 * _3254) + (_3255 * _3255)) + (_3257 * _3257));
        float _3270 = (1.0 - (cbSceneParam._m0[77u].w / _3242)) * _3267;
        float _3275 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3277 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3454;
        if (abs((_3256 - _3259) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3454 = ((((_3260 > 0.0) ? exp2(_3275 * _3260) : (2.0 - exp2(_3277 * _3260))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3270;
        }
        else
        {
            float _3398 = 1.0 / cbSceneParam._m0[80u].x;
            float _3399 = isnan(_3261) ? _3260 : (isnan(_3260) ? _3261 : max(_3260, _3261));
            float _3400 = isnan(_3261) ? _3260 : (isnan(_3260) ? _3261 : min(_3260, _3261));
            float _3409 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : min(_3399, 0.0));
            float _3410 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : min(_3400, 0.0));
            _3454 = ((abs(_3267 / _3256) * cbSceneParam._m0[80u].y) * ((((_3409 - _3410) * 2.0) - ((exp2(_3275 * (isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0)))) - exp2(_3275 * (isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))))) * _3398)) - ((exp2(_3277 * _3409) - exp2(_3277 * _3410)) * _3398))) + (_3270 * cbSceneParam._m0[80u].z);
        }
        vec4 _3456 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3188, _3189, 1.0), 0.0);
        float _3465 = exp2((_3454 * (-1.44269502162933349609375)) * (1.0 - _3456.w));
        float _3466 = log2(_3465);
        float _3482 = log2(_3208);
        _3279 = (exp2(_3482 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3466 * cbSceneParam._m0[78u].x)) * _3456.x) / cbSceneParam._m0[78u].x)) + _3205;
        _3281 = (exp2(_3482 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3466 * cbSceneParam._m0[78u].y)) * _3456.y) / cbSceneParam._m0[78u].y)) + _3206;
        _3283 = (exp2(_3482 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3466 * cbSceneParam._m0[78u].z)) * _3456.z) / cbSceneParam._m0[78u].z)) + _3207;
        _3285 = _3465 * _3208;
    }
    else
    {
        _3279 = _3205;
        _3281 = _3206;
        _3283 = _3207;
        _3285 = _3208;
    }
    bool _3492;
    vec4 _3295;
    vec4 _3317;
    float _3319;
    float _3323;
    float _3324;
    float _3325;
    float _3326;
    bool _3336;
    for (;;)
    {
        _3295 = cbMatDynParam._m0[0u];
        float _3297 = roundEven(_3295.y);
        bool _3298 = _3297 == 3.0;
        float _3299 = log2(_3285);
        float _3306 = exp2(_3299 * cbSceneParam._m0[78u].x) * _3176;
        float _3307 = exp2(_3299 * cbSceneParam._m0[78u].y) * _3177;
        float _3308 = exp2(_3299 * cbSceneParam._m0[78u].z) * _3178;
        float _3315 = _784 + (-0.5);
        _3317 = cbMtdParam._m0[1u];
        _3319 = _3317.y * _3315;
        float _3322 = (_3297 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3323 = _3322 * (_3298 ? _3306 : (_3306 + (cbSceneParam._m0[72u].w * _3279)));
        _3324 = _3322 * (_3298 ? _3307 : (_3307 + (cbSceneParam._m0[72u].w * _3281)));
        _3325 = _3322 * (_3298 ? _3308 : (_3308 + (cbSceneParam._m0[72u].w * _3283)));
        _3326 = _3315 * 0.999000012874603271484375;
        _3336 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3336)
        {
            if ((cbInstanceData._m0[_899 + 7u].x + _3326) < 0.5)
            {
                _3492 = true;
                break;
            }
        }
        uint _3433 = _900 + uint(_3295.w);
        if ((cbInstanceData._m0[_3433].w < 1.0) && ((cbInstanceData._m0[_3433].w + _3326) < 0.5))
        {
            _3492 = true;
            break;
        }
        if ((_3319 + _451) < _3317.x)
        {
            _3492 = true;
            break;
        }
        _3492 = false;
        break;
    }
    float _3695;
    if (_3492)
    {
        discard_state = true;
        _3695 = 0.0;
    }
    else
    {
        _3695 = _3183;
    }
    SV_Target.x = _3323;
    SV_Target.y = _3324;
    SV_Target.z = _3325;
    SV_Target.w = _3695;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3183;
    discard_exit();
}


