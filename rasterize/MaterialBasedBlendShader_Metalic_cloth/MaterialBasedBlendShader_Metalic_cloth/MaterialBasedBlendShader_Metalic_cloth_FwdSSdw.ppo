#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[25];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_12;
layout(set = 0, binding = 10) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1363;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246;
    float _247;
    float _248;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
    }
    else
    {
        _246 = _232;
        _247 = _233;
        _248 = _234;
    }
    vec4 _277 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _305 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _337 = _331.x * cbMatDynParam._m0[17u].x;
    float _338 = _331.y * cbMatDynParam._m0[17u].y;
    float _339 = _331.z * cbMatDynParam._m0[17u].z;
    vec4 _358 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _377 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _388 = (cbMatDynParam._m0[21u].y * TEXCOORD.w) + 1.0;
    float _390 = (0.5 - ((cbMatDynParam._m0[21u].x * 0.5) * (1.0099999904632568359375 - _377.x))) * _388;
    float _3712 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _398 = (_391 * ((_358.x * cbMatDynParam._m0[18u].x) - _337)) + _337;
    float _399 = (_391 * ((_358.y * cbMatDynParam._m0[18u].y) - _338)) + _338;
    float _400 = (_391 * ((_358.z * cbMatDynParam._m0[18u].z) - _339)) + _339;
    float _405 = (0.5 - ((cbMatDynParam._m0[23u].z * 0.5) * (1.0099999904632568359375 - _377.y))) * _388;
    float _3723 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _413 = (((_305.x * cbMatDynParam._m0[19u].x) - _398) * _406) + _398;
    float _414 = (((_305.y * cbMatDynParam._m0[19u].y) - _399) * _406) + _399;
    float _415 = (((_305.z * cbMatDynParam._m0[19u].z) - _400) * _406) + _400;
    float _420 = (0.5 - ((cbMatDynParam._m0[23u].w * 0.5) * (1.0099999904632568359375 - _377.z))) * _388;
    float _3734 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _428 = (((_277.x * cbMatDynParam._m0[20u].x) - _413) * _421) + _413;
    float _429 = (((_277.y * cbMatDynParam._m0[20u].y) - _414) * _421) + _414;
    float _430 = (((_277.z * cbMatDynParam._m0[20u].z) - _415) * _421) + _415;
    vec4 _442 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_12, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _445 = _442.x * _331.w;
    float _461 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_10, SS_SpecularMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x + cbMatDynParam._m0[23u].x;
    float _462 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _483 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_3, SS_SpecularMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w)).x + cbMatDynParam._m0[22u].w;
    float _484 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _501 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_4, SS_SpecularMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x + cbMatDynParam._m0[22u].y;
    float _502 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _503 = isnan(1.0) ? _502 : (isnan(_502) ? 1.0 : min(_502, 1.0));
    float _520 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_9, SS_SpecularMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[14u].w)).x + cbMatDynParam._m0[22u].z;
    float _521 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _525 = (_391 * ((isnan(1.0) ? _521 : (isnan(_521) ? 1.0 : min(_521, 1.0))) - _503)) + _503;
    float _528 = (((isnan(1.0) ? _484 : (isnan(_484) ? 1.0 : min(_484, 1.0))) - _525) * _406) + _525;
    float _531 = (((isnan(1.0) ? _462 : (isnan(_462) ? 1.0 : min(_462, 1.0))) - _528) * _421) + _528;
    vec4 _548 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _567 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _586 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[10u].w));
    float _588 = _586.x;
    float _589 = _586.y;
    float _591 = _586.z * cbMatDynParam._m0[22u].x;
    vec4 _605 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[11u].w));
    float _613 = (((_605.z * cbMatDynParam._m0[21u].w) - _591) * _391) + _591;
    float _616 = (((_567.z * cbMatDynParam._m0[21u].z) - _613) * _406) + _613;
    float _619 = (((_548.z * cbMatDynParam._m0[24u].x) - _616) * _421) + _616;
    vec4 _632 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[12u].w));
    float _646 = (_391 * (_605.x - _588)) + _588;
    float _647 = (_391 * (_605.y - _589)) + _589;
    float _652 = ((_567.x - _646) * _406) + _646;
    float _653 = ((_567.y - _647) * _406) + _647;
    float _662 = ((((_548.x - _652) * _421) + _652) * 2.0) + (-1.0);
    float _663 = ((((_548.y - _653) * _421) + _653) * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _3785 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _669 = sqrt(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))));
    float _673 = _662 + (cbMatDynParam._m0[23u].y * ((_632.x * 2.0) + (-1.0)));
    float _674 = _663 + (cbMatDynParam._m0[23u].y * ((_632.y * 2.0) + (-1.0)));
    float _677 = fma(_669, _246, fma(_674, _238 * TANGENT.x, (_224 * _216) * _673));
    float _680 = fma(_669, _247, fma(_674, _238 * TANGENT.y, (_224 * _217) * _673));
    float _683 = fma(_669, _248, fma(_674, _238 * TANGENT.z, (_224 * _218) * _673));
    float _687 = inversesqrt(dot(vec3(_677, _680, _683), vec3(_677, _680, _683)));
    float _688 = _687 * _677;
    float _689 = _687 * _680;
    float _690 = _687 * _683;
    float _3796 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _691 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _692 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _3818 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _693 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _694 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _695 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _696 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _712 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _762 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _752);
    float _763 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _752);
    float _764 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _752);
    float _768 = inversesqrt(dot(vec3(_762, _763, _764), vec3(_762, _763, _764)));
    float _769 = _762 * _768;
    float _770 = _763 * _768;
    float _771 = _764 * _768;
    float _777 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _778 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _780 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _782 = _780.w;
    float _800 = fma(_690, cbSceneParam._m0[5u].z, fma(_689, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _688));
    float _803 = fma(_690, cbSceneParam._m0[6u].z, fma(_689, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _688));
    float _806 = fma(_690, cbSceneParam._m0[7u].z, fma(_689, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _688));
    vec4 _808 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _810 = _808.x;
    float _822 = (((_808.y - _692) + (_808.w * _692)) * cbMtdParam._m0[3u].x) + _692;
    vec4 _823 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _839 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_810 * _810)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _823.z;
    float _848 = (((cbMatDynParam._m0[15u].x - _696) * cbMatDynParam._m0[15u].w) * _839) + _696;
    float _857 = ((_839 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _822)) + _822;
    uint _881 = uint(roundEven(NORMAL.w)) * 13u;
    uint _883 = (_881 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _889 = (cbMtdParam._m0[0u].x * _693) * cbInstanceData._m0[_883].x;
    float _890 = (cbMtdParam._m0[0u].y * _694) * cbInstanceData._m0[_883].y;
    float _891 = (cbMtdParam._m0[0u].z * _695) * cbInstanceData._m0[_883].z;
    float _3862 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _3873 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    vec4 _895 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _900 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _911 = (((_900.x - _848) + (_900.w * _848)) * cbMtdParam._m0[3u].x) + _848;
    float _924 = (cbMtdParam._m0[3u].x * (((_892 * _782) - _892) + _895.x)) + _892;
    float _925 = (cbMtdParam._m0[3u].x * (((_893 * _782) - _893) + _895.y)) + _893;
    float _926 = (cbMtdParam._m0[3u].x * (((_894 * _782) - _894) + _895.z)) + _894;
    float _940 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_848 * (_693 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_848 * (_694 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_848 * (_695 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w)).z;
    float _944 = _940 * cbMatDynParam._m0[13u].w;
    float _954 = (_944 * (cbMatDynParam._m0[13u].x - _924)) + _924;
    float _955 = (_944 * (cbMatDynParam._m0[13u].y - _925)) + _925;
    float _956 = (_944 * (cbMatDynParam._m0[13u].z - _926)) + _926;
    float _964 = ((_940 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _911)) + _911;
    float _965 = 1.0 - _964;
    float _966 = _965 * _954;
    float _967 = _965 * _955;
    float _968 = _965 * _956;
    float _972 = (_954 + (-0.039999999105930328369140625)) * _964;
    float _973 = (_955 + (-0.039999999105930328369140625)) * _964;
    float _974 = (_956 + (-0.039999999105930328369140625)) * _964;
    float _975 = _972 + 0.039999999105930328369140625;
    float _976 = _973 + 0.039999999105930328369140625;
    float _977 = _974 + 0.039999999105930328369140625;
    vec4 _986 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _777, cbSceneParam._m0[86u].y * _778));
    float _989 = _986.x * TEXCOORD_8;
    float _990 = dot(vec3(_688, _689, _690), vec3(_769, _770, _771));
    float _993 = _990 * 2.0;
    float _997 = (_993 * _688) - _769;
    float _998 = (_993 * _689) - _770;
    float _999 = (_993 * _690) - _771;
    float _1003 = abs(dot(vec3(_769, _770, _771), vec3(_688, _689, _690)));
    float _3895 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1005 = sqrt(_857);
    float _1018 = exp2((_1005 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1005 * 3.0));
    float _1024 = (1.0 - _1018) * ((_1005 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1025 = _1018 * _1005;
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1362;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1088 = fma(_1061, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1053));
        float _1092 = fma(_1061, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1053));
        float _1096 = fma(_1061, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1053));
        float _1120 = _1053 + _688;
        float _1121 = _1057 + _689;
        float _1122 = _1061 + _690;
        float _1132 = fma(_1122, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120)) - _1088;
        float _1133 = fma(_1122, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120)) - _1092;
        float _1134 = fma(_1122, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120)) - _1096;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1088 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1092 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[34u].z) + ((((((_1096 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1190 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1156.x + (-0.5));
        float _1192 = _1190 * (_1156.y + (-0.5));
        float _1193 = _1190 * (_1156.z + (-0.5));
        float _1200 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1163.x + (-0.5));
        float _1202 = _1200 * (_1163.y + (-0.5));
        float _1203 = _1200 * (_1163.z + (-0.5));
        float _1210 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1170.x + (-0.5));
        float _1212 = _1210 * (_1170.y + (-0.5));
        float _1213 = _1210 * (_1170.z + (-0.5));
        float _1220 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1177.x + (-0.5));
        float _1222 = _1220 * (_1177.y + (-0.5));
        float _1223 = _1220 * (_1177.z + (-0.5));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = _1191 * 0.5;
        float _1228 = _1201 * 0.5;
        float _1229 = _1211 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1244 = (dot(vec3(_688, _689, _690), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1254 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3943 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1256 + 1.0))) + _1261) * _1224;
        float _1271 = _1192 * 0.5;
        float _1272 = _1202 * 0.5;
        float _1273 = _1212 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_688, _689, _690), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3976 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1298 + 1.0))) + _1303) * _1225;
        float _1313 = _1193 * 0.5;
        float _1314 = _1203 * 0.5;
        float _1315 = _1213 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_688, _689, _690), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4009 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1340 + 1.0))) + _1345) * _1226;
        _1362 = _1193;
        _1364 = _1192;
        _1365 = _1191;
        _1366 = _1203;
        _1367 = _1202;
        _1368 = _1201;
        _1369 = _1213;
        _1370 = _1212;
        _1371 = _1211;
        _1372 = _1226;
        _1373 = _1225;
        _1374 = _1224;
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1363;
        _1364 = _1363;
        _1365 = _1363;
        _1366 = _1363;
        _1367 = _1363;
        _1368 = _1363;
        _1369 = _1363;
        _1370 = _1363;
        _1371 = _1363;
        _1372 = _1363;
        _1373 = _1363;
        _1374 = _1363;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1403 = fma(_1061, cbModelParam._m0[30u].z, fma(_1057, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1053));
        float _1407 = fma(_1061, cbModelParam._m0[31u].z, fma(_1057, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1053));
        float _1411 = fma(_1061, cbModelParam._m0[32u].z, fma(_1057, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1053));
        float _1434 = _1053 + _688;
        float _1435 = _1057 + _689;
        float _1436 = _1061 + _690;
        float _1446 = fma(_1436, cbModelParam._m0[30u].z, fma(_1435, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1434)) - _1403;
        float _1447 = fma(_1436, cbModelParam._m0[31u].z, fma(_1435, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1434)) - _1407;
        float _1448 = fma(_1436, cbModelParam._m0[32u].z, fma(_1435, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1434)) - _1411;
        float _1452 = inversesqrt(dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448)));
        float _1465 = ((_1452 * _1446) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1403 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1466 = ((_1452 * _1447) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1407 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1452 * _1448) / cbModelParam._m0[35u].z) + ((((((_1411 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        float _1502 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1469.x + (-0.5));
        float _1504 = _1502 * (_1469.y + (-0.5));
        float _1505 = _1502 * (_1469.z + (-0.5));
        float _1512 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1476.x + (-0.5));
        float _1514 = _1512 * (_1476.y + (-0.5));
        float _1515 = _1512 * (_1476.z + (-0.5));
        float _1522 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1483.x + (-0.5));
        float _1524 = _1522 * (_1483.y + (-0.5));
        float _1525 = _1522 * (_1483.z + (-0.5));
        float _1532 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1490.x + (-0.5));
        float _1534 = _1532 * (_1490.y + (-0.5));
        float _1535 = _1532 * (_1490.z + (-0.5));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = _1503 * 0.5;
        float _1540 = _1513 * 0.5;
        float _1541 = _1523 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_688, _689, _690), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4072 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1566 + 1.0))) + _1571) * _1536;
        float _1581 = _1504 * 0.5;
        float _1582 = _1514 * 0.5;
        float _1583 = _1524 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_688, _689, _690), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4105 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1608 + 1.0))) + _1613) * _1537;
        float _1623 = _1505 * 0.5;
        float _1624 = _1515 * 0.5;
        float _1625 = _1525 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_688, _689, _690), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4138 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1650 + 1.0))) + _1655) * _1538;
        _1672 = _1505;
        _1673 = _1504;
        _1674 = _1503;
        _1675 = _1515;
        _1676 = _1514;
        _1677 = _1513;
        _1678 = _1525;
        _1679 = _1524;
        _1680 = _1523;
        _1681 = _1538;
        _1682 = _1537;
        _1683 = _1536;
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
    }
    else
    {
        _1672 = _1363;
        _1673 = _1363;
        _1674 = _1363;
        _1675 = _1363;
        _1676 = _1363;
        _1677 = _1363;
        _1678 = _1363;
        _1679 = _1363;
        _1680 = _1363;
        _1681 = _1363;
        _1682 = _1363;
        _1683 = _1363;
        _1684 = 0.0;
        _1685 = 0.0;
        _1686 = 0.0;
    }
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1375)) + _1375;
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1376)) + _1376;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1377)) + _1377;
    float _1719 = fma(_1698, cbSceneParam._m0[89u].z, fma(_1697, cbSceneParam._m0[89u].y, _1696 * cbSceneParam._m0[89u].x));
    float _1722 = fma(_1698, cbSceneParam._m0[90u].z, fma(_1697, cbSceneParam._m0[90u].y, _1696 * cbSceneParam._m0[90u].x));
    float _1725 = fma(_1698, cbSceneParam._m0[91u].z, fma(_1697, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1696));
    float _1740 = _997 * 0.5;
    float _1741 = _998 * 0.5;
    float _1742 = _999 * 0.5;
    float _1743 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1746 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1749 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1780;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1756 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1362, _1366, _1369, _1372));
        float _1760 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1764 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1771 = dot(vec4(cbModelParam._m0[39u]), vec4(_1740, _1741, _1742, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1791;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1782 = dot(vec4(cbModelParam._m0[40u]), vec4(_1740, _1741, _1742, 1.0));
        _1791 = dot(vec3(isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1791 = 1.0;
    }
    float _1795 = (_1791 * cbModelParam._m0[1u].x) + (_1780 * (1.0 - cbModelParam._m0[1u].x));
    float _1805 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _857);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1805 : min(cbModelParam._m0[25u].z, _1805));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1853 = fma(_1061, cbModelParam._m0[13u].z, fma(_1057, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1053)) + cbModelParam._m0[13u].w;
        float _1857 = fma(_1061, cbModelParam._m0[14u].z, fma(_1057, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1053)) + cbModelParam._m0[14u].w;
        float _1861 = fma(_1061, cbModelParam._m0[15u].z, fma(_1057, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1053)) + cbModelParam._m0[15u].w;
        float _1864 = fma(_999, cbModelParam._m0[13u].z, fma(_998, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _997));
        float _1867 = fma(_999, cbModelParam._m0[14u].z, fma(_998, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _997));
        float _1870 = fma(_999, cbModelParam._m0[15u].z, fma(_998, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _997));
        float _1898;
        if (_1864 > 0.0)
        {
            _1898 = abs((1.0 - _1853) / _1864);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1853 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1898 = frontier_phi_16_14_ladder;
        }
        float _2121;
        if (_1867 > 0.0)
        {
            _2121 = abs((1.0 - _1857) / _1867);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1857 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2121 = frontier_phi_25_21_ladder;
        }
        float _2378;
        if (_1870 > 0.0)
        {
            _2378 = abs((1.0 - _1861) / _1870);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1861 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2378 = frontier_phi_37_32_ladder;
        }
        float _2380 = isnan(_2121) ? _1898 : (isnan(_1898) ? _2121 : min(_1898, _2121));
        float _2381 = isnan(_2378) ? _2380 : (isnan(_2380) ? _2378 : min(_2380, _2378));
        float _2385 = (_2381 * _1864) + _1853;
        float _2386 = (_2381 * _1867) + _1857;
        float _2387 = (_2381 * _1870) + _1861;
        float _2388 = _2381 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2388;
        float _2392 = _2388 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 > _2392) || ((_2386 < _2390) || ((_2385 < _2390) || (_2385 > _2392))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2387, cbModelParam._m0[9u].z, fma(_2386, cbModelParam._m0[9u].y, _2385 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2387, cbModelParam._m0[10u].z, fma(_2386, cbModelParam._m0[10u].y, _2385 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2387, cbModelParam._m0[11u].z, fma(_2386, cbModelParam._m0[11u].y, _2385 * cbModelParam._m0[11u].x))), _1806);
            frontier_phi_15_37_ladder = _2515.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2515.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2515.x * cbModelParam._m0[1u].y;
        }
        _1886 = frontier_phi_15_37_ladder_2;
        _1888 = frontier_phi_15_37_ladder_1;
        _1890 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_997, _998, _999), _1806);
        _1886 = _1874.x * cbModelParam._m0[1u].y;
        _1888 = _1874.y * cbModelParam._m0[1u].y;
        _1890 = _1874.z * cbModelParam._m0[1u].y;
    }
    float _1894 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _857);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1894 : min(cbModelParam._m0[25u].w, _1894));
    float _1984;
    float _1986;
    float _1988;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1948 = fma(_1061, cbModelParam._m0[21u].z, fma(_1057, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1053)) + cbModelParam._m0[21u].w;
        float _1952 = fma(_1061, cbModelParam._m0[22u].z, fma(_1057, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1053)) + cbModelParam._m0[22u].w;
        float _1956 = fma(_1061, cbModelParam._m0[23u].z, fma(_1057, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1053)) + cbModelParam._m0[23u].w;
        float _1959 = fma(_999, cbModelParam._m0[21u].z, fma(_998, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _997));
        float _1962 = fma(_999, cbModelParam._m0[22u].z, fma(_998, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _997));
        float _1965 = fma(_999, cbModelParam._m0[23u].z, fma(_998, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _997));
        float _2126;
        if (_1959 > 0.0)
        {
            _2126 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2126 = frontier_phi_27_23_ladder;
        }
        float _2405;
        if (_1962 > 0.0)
        {
            _2405 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2405 = frontier_phi_39_34_ladder;
        }
        float _2618;
        if (_1965 > 0.0)
        {
            _2618 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2618 = frontier_phi_48_45_ladder;
        }
        float _2620 = isnan(_2405) ? _2126 : (isnan(_2126) ? _2405 : min(_2126, _2405));
        float _2621 = isnan(_2618) ? _2620 : (isnan(_2620) ? _2618 : min(_2620, _2618));
        float _2625 = (_2621 * _1959) + _1948;
        float _2626 = (_2621 * _1962) + _1952;
        float _2627 = (_2621 * _1965) + _1956;
        float _2628 = _2621 * 9.9999997473787516355514526367188e-05;
        float _2629 = (-1.0) - _2628;
        float _2631 = _2628 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2627 > _2631) || ((_2627 < _2629) || ((_2626 > _2631) || ((_2626 < _2629) || ((_2625 < _2629) || (_2625 > _2631))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2627, cbModelParam._m0[17u].z, fma(_2626, cbModelParam._m0[17u].y, _2625 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2627, cbModelParam._m0[18u].z, fma(_2626, cbModelParam._m0[18u].y, _2625 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2627, cbModelParam._m0[19u].z, fma(_2626, cbModelParam._m0[19u].y, _2625 * cbModelParam._m0[19u].x))), _1895);
            frontier_phi_24_48_ladder = _2827.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2827.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2827.x * cbModelParam._m0[1u].z;
        }
        _1984 = frontier_phi_24_48_ladder_2;
        _1986 = frontier_phi_24_48_ladder_1;
        _1988 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_997, _998, _999), _1895);
        _1984 = _1968.x * cbModelParam._m0[1u].z;
        _1986 = _1968.y * cbModelParam._m0[1u].z;
        _1988 = _1968.z * cbModelParam._m0[1u].z;
    }
    float _2001 = (((_1024 * _975) + _1025) * _989) * ((cbModelParam._m0[1u].w * (_1984 - _1886)) + _1886);
    float _2003 = (((_1024 * _976) + _1025) * _989) * ((cbModelParam._m0[1u].w * (_1986 - _1888)) + _1888);
    float _2005 = (((_1024 * _977) + _1025) * _989) * ((cbModelParam._m0[1u].w * (_1988 - _1890)) + _1890);
    float _2008 = fma(_2005, cbSceneParam._m0[89u].z, fma(_2003, cbSceneParam._m0[89u].y, _2001 * cbSceneParam._m0[89u].x));
    float _2011 = fma(_2005, cbSceneParam._m0[90u].z, fma(_2003, cbSceneParam._m0[90u].y, _2001 * cbSceneParam._m0[90u].x));
    float _2014 = fma(_2005, cbSceneParam._m0[91u].z, fma(_2003, cbSceneParam._m0[91u].y, _2001 * cbSceneParam._m0[91u].x));
    vec4 _2022 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_777, _778));
    float _2024 = _2022.w;
    float _2036 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2024);
    float _2037 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2024);
    float _2038 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2024);
    uvec4 _2042 = floatBitsToUint(cbInstanceData._m0[_881 + 5u]);
    uint _2044 = _2042.x * 14u;
    uint _2045 = _2044 + 13u;
    float _2052 = _989 + (-1.0);
    float _2057 = (cbLight._m0[_2045].x * _2052) + 1.0;
    float _2058 = (cbLight._m0[_2045].y * _2052) + 1.0;
    float _2059 = (cbLight._m0[_2045].z * _2052) + 1.0;
    float _2060 = (cbLight._m0[_2045].w * _2052) + 1.0;
    uint _2061 = _2044 + 5u;
    float _2067 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2071 = _2044 + 4u;
    float _2080 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2084 = _2044 | 1u;
    float _2095 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_688, _689, _690));
    float _2098 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_688, _689, _690));
    float _4274 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _4285 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2103 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * 0.3183098733425140380859375;
    float _2105 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * 0.3183098733425140380859375;
    float _2112 = ((cbLight._m0[_2061].x * _2067) * _2105) + (((cbLight._m0[_2071].x * _2036) * _2080) * _2103);
    float _2113 = ((_2067 * cbLight._m0[_2061].y) * _2105) + (((cbLight._m0[_2071].y * _2037) * _2080) * _2103);
    float _2114 = ((_2067 * cbLight._m0[_2061].z) * _2105) + (((cbLight._m0[_2071].z * _2038) * _2080) * _2103);
    uvec4 _2118 = floatBitsToUint(cbLight._m0[_2044 + 12u]);
    bool _2120 = _2118.x == 0u;
    float _2131;
    float _2133;
    float _2135;
    if (_2120)
    {
        _2131 = _2112;
        _2133 = _2113;
        _2135 = _2114;
    }
    else
    {
        uint _2139 = _2044 + 6u;
        float _2155 = (dot(vec3(cbLight._m0[_2044 + 2u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2156 = _2155 * _2155;
        float _4296 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2157 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2158 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2131 = (((cbLight._m0[_2139].x * 0.3183098733425140380859375) * _2157) * _2158) + _2112;
        _2133 = (((cbLight._m0[_2139].y * 0.3183098733425140380859375) * _2157) * _2158) + _2113;
        _2135 = (((cbLight._m0[_2139].z * 0.3183098733425140380859375) * _2157) * _2158) + _2114;
    }
    bool _2138 = _2118.y == 0u;
    float _2176;
    float _2178;
    float _2180;
    if (_2138)
    {
        _2176 = _2131;
        _2178 = _2133;
        _2180 = _2135;
    }
    else
    {
        uint _2349 = _2044 + 7u;
        float _2365 = (dot(vec3(cbLight._m0[_2044 + 3u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2366 = _2365 * _2365;
        float _4312 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2367 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2368 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2176 = (((cbLight._m0[_2349].x * 0.3183098733425140380859375) * _2367) * _2368) + _2131;
        _2178 = (((cbLight._m0[_2349].y * 0.3183098733425140380859375) * _2367) * _2368) + _2133;
        _2180 = (((cbLight._m0[_2349].z * 0.3183098733425140380859375) * _2367) * _2368) + _2135;
    }
    uint _2183 = _2044 + 8u;
    float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _857) * 0.949999988079071044921875);
    float _2197 = _2196 * _2196;
    float _2198 = cbLight._m0[_2044].x + _769;
    float _2199 = cbLight._m0[_2044].y + _770;
    float _2200 = cbLight._m0[_2044].z + _771;
    float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
    float _2205 = _2204 * _2198;
    float _2206 = _2204 * _2199;
    float _2207 = _2204 * _2200;
    float _2208 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2044].xyz));
    float _4328 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _4339 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _2212 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _2213 = dot(vec3(_688, _689, _690), vec3(_2205, _2206, _2207));
    float _4350 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2217 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2205, _2206, _2207));
    float _4361 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2221 = _2197 * _2197;
    float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
    float _2233 = exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0);
    float _2234 = 0.959999978542327880859375 - _972;
    float _2236 = 0.959999978542327880859375 - _973;
    float _2237 = 0.959999978542327880859375 - _974;
    float _2244 = 1.0 - _2197;
    float _2255 = (0.5 / (((_2212 * ((_2211 * _2244) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2244) + _2197) * _2211))) * _2211;
    float _4372 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2257 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
    uint _2271 = _2044 + 9u;
    float _2282 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _857) * 0.949999988079071044921875);
    float _2283 = _2282 * _2282;
    float _2284 = cbLight._m0[_2084].x + _769;
    float _2285 = cbLight._m0[_2084].y + _770;
    float _2286 = cbLight._m0[_2084].z + _771;
    float _2290 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
    float _2291 = _2290 * _2284;
    float _2292 = _2290 * _2285;
    float _2293 = _2290 * _2286;
    float _2294 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2084].xyz));
    float _4383 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _2298 = dot(vec3(_688, _689, _690), vec3(_2291, _2292, _2293));
    float _4394 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2302 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2291, _2292, _2293));
    float _4405 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2306 = _2283 * _2283;
    float _2310 = ((_2301 * _2301) * (_2306 + (-1.0))) + 1.0;
    float _2317 = exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0);
    float _2324 = 1.0 - _2283;
    float _2334 = (0.5 / (((_2212 * ((_2297 * _2324) + _2283)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2324) + _2283) * _2297))) * _2297;
    float _4416 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2336 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2306 / ((_2310 * _2310) * 3.141590118408203125));
    float _2346 = (((((_2317 * _2234) + _975) * cbLight._m0[_2271].x) * _2336) * _2067) + ((((cbLight._m0[_2183].x * _2036) * ((_2233 * _2234) + _975)) * _2257) * _2080);
    float _2347 = (((((_2317 * _2236) + _976) * cbLight._m0[_2271].y) * _2336) * _2067) + ((((cbLight._m0[_2183].y * _2037) * ((_2233 * _2236) + _976)) * _2257) * _2080);
    float _2348 = (((((_2317 * _2237) + _977) * cbLight._m0[_2271].z) * _2336) * _2067) + ((((cbLight._m0[_2183].z * _2038) * ((_2233 * _2237) + _977)) * _2257) * _2080);
    float _2410;
    float _2412;
    float _2414;
    if (_2120)
    {
        _2410 = _2346;
        _2412 = _2347;
        _2414 = _2348;
    }
    else
    {
        uint _2416 = _2044 + 2u;
        uint _2420 = _2044 + 10u;
        float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _857) * 0.949999988079071044921875);
        float _2435 = _2434 * _2434;
        float _2436 = cbLight._m0[_2416].x + _769;
        float _2437 = cbLight._m0[_2416].y + _770;
        float _2438 = cbLight._m0[_2416].z + _771;
        float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
        float _2443 = _2442 * _2436;
        float _2444 = _2442 * _2437;
        float _2445 = _2442 * _2438;
        float _2446 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2416].xyz));
        float _4427 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2450 = dot(vec3(_688, _689, _690), vec3(_2443, _2444, _2445));
        float _4438 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2454 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2443, _2444, _2445));
        float _4449 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2458 = _2435 * _2435;
        float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
        float _2469 = exp2(log2(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * 5.0);
        float _2476 = 1.0 - _2435;
        float _2486 = (0.5 / (((_2212 * ((_2449 * _2476) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2476) + _2435) * _2449))) * _2449;
        float _4460 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2488 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
        float _2489 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2410 = (((((_2469 * _2234) + _975) * cbLight._m0[_2420].x) * _2488) * _2489) + _2346;
        _2412 = (((((_2469 * _2236) + _976) * cbLight._m0[_2420].y) * _2488) * _2489) + _2347;
        _2414 = (((((_2469 * _2237) + _977) * cbLight._m0[_2420].z) * _2488) * _2489) + _2348;
    }
    float _2524;
    float _2526;
    float _2528;
    if (_2138)
    {
        _2524 = _2410;
        _2526 = _2412;
        _2528 = _2414;
    }
    else
    {
        uint _2535 = _2044 + 3u;
        uint _2539 = _2044 + 11u;
        float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2535].w)) * _857) * 0.949999988079071044921875);
        float _2554 = _2553 * _2553;
        float _2555 = cbLight._m0[_2535].x + _769;
        float _2556 = cbLight._m0[_2535].y + _770;
        float _2557 = cbLight._m0[_2535].z + _771;
        float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
        float _2562 = _2561 * _2555;
        float _2563 = _2561 * _2556;
        float _2564 = _2561 * _2557;
        float _2565 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2535].xyz));
        float _4476 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _2569 = dot(vec3(_688, _689, _690), vec3(_2562, _2563, _2564));
        float _4487 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2573 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_2562, _2563, _2564));
        float _4498 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2577 = _2554 * _2554;
        float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
        float _2588 = exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0);
        float _2595 = 1.0 - _2554;
        float _2605 = (0.5 / (((_2212 * ((_2568 * _2595) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2595) + _2554) * _2568))) * _2568;
        float _4509 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2607 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
        float _2608 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2524 = (((((_2588 * _2234) + _975) * cbLight._m0[_2539].x) * _2607) * _2608) + _2410;
        _2526 = (((((_2588 * _2236) + _976) * cbLight._m0[_2539].y) * _2607) * _2608) + _2412;
        _2528 = (((((_2588 * _2237) + _977) * cbLight._m0[_2539].z) * _2607) * _2608) + _2414;
    }
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_2042.y == 0u)
    {
        float _2683 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2684 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2683;
        float _2685 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2683;
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2683;
        uvec4 _2698 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2699 = _2698.x;
        uint _2710 = uint((float(_2698.y) * floor(float(uint(cbSceneParam._m0[85u].y * _778) / _2699))) + floor(float(uint(cbSceneParam._m0[85u].x * _777) / _2699)));
        float _2720 = (log2(_2686 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2721 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        uint _2724 = uint(isnan(14.0) ? _2721 : (isnan(_2721) ? 14.0 : min(_2721, 14.0)));
        uvec4 _2729 = texelFetch(g_lightClusterGridBuffer, int(((_2724 << 2u) + (_2710 << 6u)) >> 2u));
        uint _2730 = _2729.x;
        uint _2731 = _2698.z;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((((1u << ((_2731 >> 4u) & 15u)) + 4294967295u) & _2730) == 0u) || ((_2731 & 240u) == 0u))
        {
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
        }
        else
        {
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            uint _2982 = 0u;
            uint _2991;
            bool _2992;
            for (;;)
            {
                _2991 = texelFetch(g_lightClassification, int((((_2724 << 5u) + (_2710 << 9u)) + (_2982 << 2u)) >> 2u)).x;
                _2992 = _2991 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2992)
                {
                    frontier_phi_63_pred = _2981;
                    frontier_phi_63_pred_1 = _2980;
                    frontier_phi_63_pred_2 = _2979;
                    frontier_phi_63_pred_3 = _2978;
                    frontier_phi_63_pred_4 = _2977;
                    frontier_phi_63_pred_5 = _2976;
                }
                else
                {
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    uint _3106;
                    _3100 = _2976;
                    _3101 = _2977;
                    _3102 = _2978;
                    _3103 = _2979;
                    _3104 = _2980;
                    _3105 = _2981;
                    _3106 = _2991;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    for (;;)
                    {
                        uint _3110 = uint(findLSB(_3106)) + (_2982 << 5u);
                        uint _3107 = (_3106 + 4294967295u) & _3106;
                        uint _3112 = _3110 * 48u;
                        vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3112)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 3u)).x));
                        uint _3132 = (_3110 * 48u) + 4u;
                        vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3132)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 3u)).x));
                        uint _3151 = (_3110 * 48u) + 8u;
                        vec3 _3162 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3151)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 2u)).x));
                        float _3166 = _3126.x - _2684;
                        float _3167 = _3126.y - _2685;
                        float _3168 = _3126.z - _2686;
                        float _3169 = dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168));
                        float _3172 = inversesqrt(_3169);
                        float _3173 = _3172 * _3166;
                        float _3174 = _3172 * _3167;
                        float _3175 = _3172 * _3168;
                        float _3176 = dot(vec3(_800, _803, _806), vec3(_3173, _3174, _3175));
                        float _3181 = 1.0 - (_3169 * _3126.w);
                        float _4535 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3182 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3183 = sqrt(_3169) * _3145.w;
                        float _3186 = 1.39999997615814208984375 / (_3183 + 1.39999997615814208984375);
                        float _3187 = _3186 * _3186;
                        float _3190 = ((1.0 - _3187) * _3176) + _3187;
                        float _3193 = _3183 * _3183;
                        float _3197 = ((isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0))) * _3182) / ((_3193 * 0.699999988079071044921875) + 1.0);
                        float _3201 = (-0.0) - _2684;
                        float _3202 = (-0.0) - _2685;
                        float _3203 = (-0.0) - _2686;
                        float _3207 = inversesqrt(dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203)));
                        float _3208 = _3207 * _3201;
                        float _3209 = _3207 * _3202;
                        float _3210 = _3207 * _3203;
                        float _3218 = exp2(log2(1.0 / ((_3193 * 3.5) + 5.0)) * 0.25);
                        float _3219 = 1.0 - _1005;
                        float _3226 = sqrt(1.0 - ((1.0 - (_3219 * _3219)) * (1.0 - (_3218 * _3218))));
                        float _3227 = _3226 * _3226;
                        float _3228 = _3227 * _3227;
                        float _3229 = _3208 + _3173;
                        float _3230 = _3209 + _3174;
                        float _3231 = _3210 + _3175;
                        float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                        float _3239 = dot(vec3(_800, _803, _806), vec3(_3208, _3209, _3210));
                        float _4551 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3242 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                        float _3243 = dot(vec3(_800, _803, _806), vec3(_3235 * _3229, _3235 * _3230, _3235 * _3231));
                        float _4562 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3246 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                        float _3250 = ((_3246 * _3246) * (_3228 + (-1.0))) + 1.0;
                        float _3251 = _3186 * _3227;
                        float _3252 = _3251 * _3251;
                        float _3255 = ((1.0 - _3252) * _3176) + _3252;
                        float _4573 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3256 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                        float _3257 = 1.0 - _3227;
                        float _3267 = (0.5 / (((_3256 * ((_3242 * _3257) + _3227)) + 9.9999999392252902907785028219223e-09) + (((_3256 * _3257) + _3227) * _3242))) * _3256;
                        float _4584 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3278 = (((_3228 * 3.1415927410125732421875) * (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) / ((_3250 * _3250) * ((_3193 * 2.1991131305694580078125) + 3.141590118408203125))) * _3182;
                        _3035 = (_3197 * _3145.x) + _3103;
                        _3036 = (_3197 * _3145.y) + _3104;
                        _3037 = (_3197 * _3145.z) + _3105;
                        _3032 = (_3278 * _3162.x) + _3100;
                        _3033 = (_3278 * _3162.y) + _3101;
                        _3034 = (_3278 * _3162.z) + _3102;
                        if (_3107 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3100 = _3032;
                            _3101 = _3033;
                            _3102 = _3034;
                            _3103 = _3035;
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3107;
                        }
                    }
                    frontier_phi_63_pred = _3037;
                    frontier_phi_63_pred_1 = _3036;
                    frontier_phi_63_pred_2 = _3035;
                    frontier_phi_63_pred_3 = _3034;
                    frontier_phi_63_pred_4 = _3033;
                    frontier_phi_63_pred_5 = _3032;
                }
                _2843 = frontier_phi_63_pred;
                _2841 = frontier_phi_63_pred_1;
                _2839 = frontier_phi_63_pred_2;
                _2837 = frontier_phi_63_pred_3;
                _2835 = frontier_phi_63_pred_4;
                _2833 = frontier_phi_63_pred_5;
                uint _2983 = _2982 + 1u;
                if (_2983 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2976 = _2833;
                    _2977 = _2835;
                    _2978 = _2837;
                    _2979 = _2839;
                    _2980 = _2841;
                    _2981 = _2843;
                    _2982 = _2983;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
        }
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.z;
        uint _2849 = (_2847 >> 8u) & 15u;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        if (((4294967295u << _2849) & _2730) == 0u)
        {
            _2944 = _2832;
            _2946 = _2834;
            _2948 = _2836;
            _2950 = _2838;
            _2952 = _2840;
            _2954 = _2842;
        }
        else
        {
            float _2969 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
            float _2970 = _2969 * _2684;
            float _2971 = _2969 * _2685;
            float _2972 = _2969 * _2686;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2849 < ((_2847 >> 12u) & 15u))
            {
                float _2945;
                float _2947;
                float _2949;
                float _2951;
                float _2953;
                float _2955;
                float _3083 = _2832;
                float _3084 = _2834;
                float _3085 = _2836;
                float _3086 = _2838;
                float _3087 = _2840;
                float _3088 = _2842;
                uint _3089 = _2849;
                uint _3098;
                bool _3099;
                for (;;)
                {
                    _3098 = texelFetch(g_lightClassification, int((((_2724 << 5u) + (_2710 << 9u)) + (_3089 << 2u)) >> 2u)).x;
                    _3099 = _3098 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3099)
                    {
                        frontier_phi_69_pred = _3088;
                        frontier_phi_69_pred_1 = _3087;
                        frontier_phi_69_pred_2 = _3086;
                        frontier_phi_69_pred_3 = _3085;
                        frontier_phi_69_pred_4 = _3084;
                        frontier_phi_69_pred_5 = _3083;
                    }
                    else
                    {
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3296 = _3083;
                        float _3297 = _3084;
                        float _3298 = _3085;
                        float _3299 = _3086;
                        float _3300 = _3087;
                        float _3301 = _3088;
                        uint _3302 = _3098;
                        uint _3303;
                        vec4 _3328;
                        float _3329;
                        vec4 _3344;
                        vec3 _3356;
                        vec4 _3371;
                        vec4 _3386;
                        float _3432;
                        bool _3433;
                        for (;;)
                        {
                            uint _3313 = ((_3089 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3302));
                            _3303 = (_3302 + 4294967295u) & _3302;
                            uint _3315 = _3313 * 40u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            _3329 = _3328.w;
                            uint _3331 = (_3313 * 40u) + 4u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3346 = (_3313 * 40u) + 8u;
                            _3356 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x));
                            uint _3358 = (_3313 * 40u) + 16u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3313 * 40u) + 20u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3388 = (_3313 * 40u) + 24u;
                            vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3407 = (_3313 * 40u) + 28u;
                            vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            _3432 = fma(_2686, _3420.z, fma(_2685, _3420.y, _3420.x * _2684)) + _3420.w;
                            _3433 = !((fma(_2686, _3401.z, fma(_2685, _3401.y, _3401.x * _2684)) + _3401.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3433)
                            {
                                float _3460 = _3328.x - _2684;
                                float _3461 = _3328.y - _2685;
                                float _3462 = _3328.z - _2686;
                                float _3463 = dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462));
                                float _3466 = inversesqrt(_3463);
                                float _3467 = _3466 * _3460;
                                float _3468 = _3466 * _3461;
                                float _3469 = _3466 * _3462;
                                float _3473 = 1.0 - (_3463 / (_3329 * _3329));
                                float _4595 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3478 = sqrt(_3463) * _3344.w;
                                float _3480 = 1.39999997615814208984375 / (_3478 + 1.39999997615814208984375);
                                float _3481 = _3480 * _3480;
                                float _3484 = ((1.0 - _3481) * dot(vec3(_3467, _3468, _3469), vec3(_800, _803, _806))) + _3481;
                                float _3487 = _3478 * _3478;
                                float _3491 = (fma(_2686, _3371.z, fma(_2685, _3371.y, _3371.x * _2684)) + _3371.w) / _3432;
                                float _3492 = (fma(_2686, _3386.z, fma(_2685, _3386.y, _3386.x * _2684)) + _3386.w) / _3432;
                                float _3496 = 1.0 - dot(vec2(_3491, _3492), vec2(_3491, _3492));
                                float _4611 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3497 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3498 = _3497 * (((isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0))) * _3474) / ((_3487 * 0.699999988079071044921875) + 1.0));
                                float _3510 = exp2(log2(1.0 / ((_3487 * 3.5) + 5.0)) * 0.25);
                                float _3511 = 1.0 - _1005;
                                float _3518 = sqrt(1.0 - ((1.0 - (_3511 * _3511)) * (1.0 - (_3510 * _3510))));
                                float _3519 = _3518 * _3518;
                                float _3520 = _3519 * _3519;
                                float _3521 = _3467 - _2970;
                                float _3522 = _3468 - _2971;
                                float _3523 = _3469 - _2972;
                                float _3527 = inversesqrt(dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523)));
                                float _3531 = dot(vec3(_800, _803, _806), vec3((-0.0) - _2970, (-0.0) - _2971, (-0.0) - _2972));
                                float _4622 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3534 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3535 = dot(vec3(_800, _803, _806), vec3(_3527 * _3521, _3527 * _3522, _3527 * _3523));
                                float _4633 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3538 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3542 = ((_3538 * _3538) * (_3520 + (-1.0))) + 1.0;
                                float _3543 = _3480 * _3519;
                                float _3544 = _3543 * _3543;
                                float _3550 = ((1.0 - _3544) * dot(vec3(_800, _803, _806), vec3(_3467, _3468, _3469))) + _3544;
                                float _4644 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3552 = 1.0 - _3519;
                                float _3562 = (0.5 / (((_3551 * ((_3534 * _3552) + _3519)) + 9.9999999392252902907785028219223e-09) + (((_3551 * _3552) + _3519) * _3534))) * _3551;
                                float _4655 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3572 = (_3497 * _3474) * (((_3520 * 3.1415927410125732421875) * (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) / ((_3542 * _3542) * ((_3487 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3498 * _3344.z;
                                frontier_phi_75_pred_1 = _3498 * _3344.y;
                                frontier_phi_75_pred_2 = _3498 * _3344.x;
                                frontier_phi_75_pred_3 = _3572 * _3356.z;
                                frontier_phi_75_pred_4 = _3572 * _3356.y;
                                frontier_phi_75_pred_5 = _3572 * _3356.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3581 = frontier_phi_75_pred;
                            _3580 = frontier_phi_75_pred_1;
                            _3579 = frontier_phi_75_pred_2;
                            _3578 = frontier_phi_75_pred_3;
                            _3577 = frontier_phi_75_pred_4;
                            _3576 = frontier_phi_75_pred_5;
                            _3286 = _3579 + _3299;
                            _3287 = _3580 + _3300;
                            _3288 = _3581 + _3301;
                            _3283 = _3576 + _3296;
                            _3284 = _3577 + _3297;
                            _3285 = _3578 + _3298;
                            if (_3303 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3303;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3288;
                        frontier_phi_69_pred_1 = _3287;
                        frontier_phi_69_pred_2 = _3286;
                        frontier_phi_69_pred_3 = _3285;
                        frontier_phi_69_pred_4 = _3284;
                        frontier_phi_69_pred_5 = _3283;
                    }
                    _2955 = frontier_phi_69_pred;
                    _2953 = frontier_phi_69_pred_1;
                    _2951 = frontier_phi_69_pred_2;
                    _2949 = frontier_phi_69_pred_3;
                    _2947 = frontier_phi_69_pred_4;
                    _2945 = frontier_phi_69_pred_5;
                    uint _3090 = _3089 + 1u;
                    if (_3090 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3083 = _2945;
                        _3084 = _2947;
                        _3085 = _2949;
                        _3086 = _2951;
                        _3087 = _2953;
                        _3088 = _2955;
                        _3089 = _3090;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2955;
                frontier_phi_57_58_ladder_1 = _2953;
                frontier_phi_57_58_ladder_2 = _2951;
                frontier_phi_57_58_ladder_3 = _2949;
                frontier_phi_57_58_ladder_4 = _2947;
                frontier_phi_57_58_ladder_5 = _2945;
            }
            else
            {
                frontier_phi_57_58_ladder = _2842;
                frontier_phi_57_58_ladder_1 = _2840;
                frontier_phi_57_58_ladder_2 = _2838;
                frontier_phi_57_58_ladder_3 = _2836;
                frontier_phi_57_58_ladder_4 = _2834;
                frontier_phi_57_58_ladder_5 = _2832;
            }
            _2944 = frontier_phi_57_58_ladder_5;
            _2946 = frontier_phi_57_58_ladder_4;
            _2948 = frontier_phi_57_58_ladder_3;
            _2950 = frontier_phi_57_58_ladder_2;
            _2952 = frontier_phi_57_58_ladder_1;
            _2954 = frontier_phi_57_58_ladder;
        }
        float _2959 = isnan(1.0) ? _989 : (isnan(_989) ? 1.0 : min(_989, 1.0));
        _2742 = (_2959 * _2950) + _2176;
        _2744 = (_2959 * _2952) + _2178;
        _2746 = (_2959 * _2954) + _2180;
        _2748 = ((_2944 * _975) * _2959) + _2524;
        _2750 = ((_2946 * _976) * _2959) + _2526;
        _2752 = ((_2948 * _977) * _2959) + _2528;
    }
    else
    {
        _2742 = _2176;
        _2744 = _2178;
        _2746 = _2180;
        _2748 = _2524;
        _2750 = _2526;
        _2752 = _2528;
    }
    float _4671 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4682 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4693 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4704 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _2777 = cbInstanceData._m0[_881 + 6u].w * (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)));
    float _2782 = _777 / cbSceneParam._m0[86u].x;
    float _2783 = _778 / cbSceneParam._m0[86u].y;
    vec4 _2797 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, (log2((isnan(cbSceneParam._m0[77u].w) ? _712 : (isnan(_712) ? cbSceneParam._m0[77u].w : min(_712, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2799 = _2797.x;
    float _2800 = _2797.y;
    float _2801 = _2797.z;
    float _2802 = _2797.w;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    if (_712 > cbSceneParam._m0[78u].w)
    {
        float _2857 = isnan(_712) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _712 : min(cbSceneParam._m0[80u].w, _712));
        float _2858 = _2857 / _712;
        float _2869 = _2858 * _762;
        float _2870 = _763 * _2858;
        float _2871 = (-0.0) - _2870;
        float _2872 = _2858 * _764;
        float _2874 = (cbSceneParam._m0[77u].w * _2871) / _2857;
        float _2875 = _2874 + cbSceneParam._m0[79u].w;
        float _2876 = cbSceneParam._m0[79u].w - _2870;
        float _2882 = sqrt(((_2869 * _2869) + (_2870 * _2870)) + (_2872 * _2872));
        float _2885 = (1.0 - (cbSceneParam._m0[77u].w / _2857)) * _2882;
        float _2890 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2892 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3045;
        if (abs((_2871 - _2874) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3045 = ((((_2875 > 0.0) ? exp2(_2890 * _2875) : (2.0 - exp2(_2892 * _2875))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2885;
        }
        else
        {
            float _3005 = 1.0 / cbSceneParam._m0[80u].x;
            float _3006 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : max(_2875, _2876));
            float _3007 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : min(_2875, _2876));
            float _3016 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : min(_3006, 0.0));
            float _3017 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : min(_3007, 0.0));
            _3045 = ((abs(_2882 / _2871) * cbSceneParam._m0[80u].y) * ((((_3016 - _3017) * 2.0) - ((exp2(_2890 * (isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0)))) - exp2(_2890 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0))))) * _3005)) - ((exp2(_2892 * _3016) - exp2(_2892 * _3017)) * _3005))) + (_2885 * cbSceneParam._m0[80u].z);
        }
        vec4 _3047 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, 1.0), 0.0);
        float _3056 = exp2((_3045 * (-1.44269502162933349609375)) * (1.0 - _3047.w));
        float _3057 = log2(_3056);
        float _3073 = log2(_2802);
        _2894 = (exp2(_3073 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].x)) * _3047.x) / cbSceneParam._m0[78u].x)) + _2799;
        _2896 = (exp2(_3073 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].y)) * _3047.y) / cbSceneParam._m0[78u].y)) + _2800;
        _2898 = (exp2(_3073 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].z)) * _3047.z) / cbSceneParam._m0[78u].z)) + _2801;
        _2900 = _3056 * _2802;
    }
    else
    {
        _2894 = _2799;
        _2896 = _2800;
        _2898 = _2801;
        _2900 = _2802;
    }
    float _2912 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2913 = _2912 == 3.0;
    float _2914 = log2(_2900);
    float _2921 = exp2(_2914 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2742 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _989))) + ((_2748 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1795)) * cbPerFrame._m0[3u].x));
    float _2922 = exp2(_2914 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2744 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _989))) + ((_2750 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1795)) * cbPerFrame._m0[3u].x));
    float _2923 = exp2(_2914 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2746 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _989))) + ((_2752 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1795)) * cbPerFrame._m0[3u].x));
    float _2932 = (_2912 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2932 * (_2913 ? _2921 : (_2921 + (cbSceneParam._m0[72u].w * _2894)));
    SV_Target.y = _2932 * (_2913 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2896)));
    SV_Target.z = _2932 * (_2913 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2898)));
    SV_Target.w = _2777;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2777;
}


