#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[25];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_12;
layout(set = 0, binding = 10) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D MaterialBasedBlendShader_Metalic_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1365;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248;
    float _249;
    float _250;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
    }
    else
    {
        _248 = _234;
        _249 = _235;
        _250 = _236;
    }
    vec4 _279 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _307 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _339 = _333.x * cbMatDynParam._m0[17u].x;
    float _340 = _333.y * cbMatDynParam._m0[17u].y;
    float _341 = _333.z * cbMatDynParam._m0[17u].z;
    vec4 _360 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _379 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _390 = (cbMatDynParam._m0[21u].y * TEXCOORD.w) + 1.0;
    float _392 = (0.5 - ((cbMatDynParam._m0[21u].x * 0.5) * (1.0099999904632568359375 - _379.x))) * _390;
    float _4056 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _400 = (_393 * ((_360.x * cbMatDynParam._m0[18u].x) - _339)) + _339;
    float _401 = (_393 * ((_360.y * cbMatDynParam._m0[18u].y) - _340)) + _340;
    float _402 = (_393 * ((_360.z * cbMatDynParam._m0[18u].z) - _341)) + _341;
    float _407 = (0.5 - ((cbMatDynParam._m0[23u].z * 0.5) * (1.0099999904632568359375 - _379.y))) * _390;
    float _4067 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _415 = (((_307.x * cbMatDynParam._m0[19u].x) - _400) * _408) + _400;
    float _416 = (((_307.y * cbMatDynParam._m0[19u].y) - _401) * _408) + _401;
    float _417 = (((_307.z * cbMatDynParam._m0[19u].z) - _402) * _408) + _402;
    float _422 = (0.5 - ((cbMatDynParam._m0[23u].w * 0.5) * (1.0099999904632568359375 - _379.z))) * _390;
    float _4078 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _430 = (((_279.x * cbMatDynParam._m0[20u].x) - _415) * _423) + _415;
    float _431 = (((_279.y * cbMatDynParam._m0[20u].y) - _416) * _423) + _416;
    float _432 = (((_279.z * cbMatDynParam._m0[20u].z) - _417) * _423) + _417;
    vec4 _444 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_12, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _447 = _444.x * _333.w;
    float _463 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_10, SS_SpecularMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x + cbMatDynParam._m0[23u].x;
    float _464 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _485 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_3, SS_SpecularMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w)).x + cbMatDynParam._m0[22u].w;
    float _486 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _503 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_4, SS_SpecularMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w)).x + cbMatDynParam._m0[22u].y;
    float _504 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _505 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
    float _522 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_9, SS_SpecularMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[14u].w)).x + cbMatDynParam._m0[22u].z;
    float _523 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _527 = (_393 * ((isnan(1.0) ? _523 : (isnan(_523) ? 1.0 : min(_523, 1.0))) - _505)) + _505;
    float _530 = (((isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0))) - _527) * _408) + _527;
    float _533 = (((isnan(1.0) ? _464 : (isnan(_464) ? 1.0 : min(_464, 1.0))) - _530) * _423) + _530;
    vec4 _550 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _569 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _588 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[10u].w));
    float _590 = _588.x;
    float _591 = _588.y;
    float _593 = _588.z * cbMatDynParam._m0[22u].x;
    vec4 _607 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[11u].w));
    float _615 = (((_607.z * cbMatDynParam._m0[21u].w) - _593) * _393) + _593;
    float _618 = (((_569.z * cbMatDynParam._m0[21u].z) - _615) * _408) + _615;
    float _621 = (((_550.z * cbMatDynParam._m0[24u].x) - _618) * _423) + _618;
    vec4 _634 = texture(sampler2D(MaterialBasedBlendShader_Metalic_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[12u].w));
    float _648 = (_393 * (_607.x - _590)) + _590;
    float _649 = (_393 * (_607.y - _591)) + _591;
    float _654 = ((_569.x - _648) * _408) + _648;
    float _655 = ((_569.y - _649) * _408) + _649;
    float _664 = ((((_550.x - _654) * _423) + _654) * 2.0) + (-1.0);
    float _665 = ((((_550.y - _655) * _423) + _655) * 2.0) + (-1.0);
    float _666 = dot(vec2(_664, _665), vec2(_664, _665));
    float _4129 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _671 = sqrt(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))));
    float _675 = _664 + (cbMatDynParam._m0[23u].y * ((_634.x * 2.0) + (-1.0)));
    float _676 = _665 + (cbMatDynParam._m0[23u].y * ((_634.y * 2.0) + (-1.0)));
    float _679 = fma(_671, _248, fma(_676, _240 * TANGENT.x, (_226 * _218) * _675));
    float _682 = fma(_671, _249, fma(_676, _240 * TANGENT.y, (_226 * _219) * _675));
    float _685 = fma(_671, _250, fma(_676, _240 * TANGENT.z, (_226 * _220) * _675));
    float _689 = inversesqrt(dot(vec3(_679, _682, _685), vec3(_679, _682, _685)));
    float _690 = _689 * _679;
    float _691 = _689 * _682;
    float _692 = _689 * _685;
    float _4140 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _693 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _694 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _4162 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _695 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _696 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _697 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _698 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _714 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _764 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _754);
    float _765 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _754);
    float _766 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _754);
    float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
    float _771 = _764 * _770;
    float _772 = _765 * _770;
    float _773 = _766 * _770;
    float _779 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _780 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _782 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _784 = _782.w;
    float _802 = fma(_692, cbSceneParam._m0[5u].z, fma(_691, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _690));
    float _805 = fma(_692, cbSceneParam._m0[6u].z, fma(_691, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _690));
    float _808 = fma(_692, cbSceneParam._m0[7u].z, fma(_691, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _690));
    vec4 _810 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _812 = _810.x;
    float _824 = (((_810.y - _694) + (_810.w * _694)) * cbMtdParam._m0[3u].x) + _694;
    vec4 _825 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _841 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_812 * _812)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _825.z;
    float _850 = (((cbMatDynParam._m0[15u].x - _698) * cbMatDynParam._m0[15u].w) * _841) + _698;
    float _859 = ((_841 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _824)) + _824;
    uint _883 = uint(roundEven(NORMAL.w)) * 13u;
    uint _885 = (_883 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _891 = (cbMtdParam._m0[0u].x * _695) * cbInstanceData._m0[_885].x;
    float _892 = (cbMtdParam._m0[0u].y * _696) * cbInstanceData._m0[_885].y;
    float _893 = (cbMtdParam._m0[0u].z * _697) * cbInstanceData._m0[_885].z;
    float _4206 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _4217 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _4228 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    vec4 _897 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _902 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _913 = (((_902.x - _850) + (_902.w * _850)) * cbMtdParam._m0[3u].x) + _850;
    float _926 = (cbMtdParam._m0[3u].x * (((_894 * _784) - _894) + _897.x)) + _894;
    float _927 = (cbMtdParam._m0[3u].x * (((_895 * _784) - _895) + _897.y)) + _895;
    float _928 = (cbMtdParam._m0[3u].x * (((_896 * _784) - _896) + _897.z)) + _896;
    float _942 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_850 * (_695 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_850 * (_696 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_850 * (_697 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w)).z;
    float _946 = _942 * cbMatDynParam._m0[13u].w;
    float _956 = (_946 * (cbMatDynParam._m0[13u].x - _926)) + _926;
    float _957 = (_946 * (cbMatDynParam._m0[13u].y - _927)) + _927;
    float _958 = (_946 * (cbMatDynParam._m0[13u].z - _928)) + _928;
    float _966 = ((_942 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _913)) + _913;
    float _967 = 1.0 - _966;
    float _974 = (_956 + (-0.039999999105930328369140625)) * _966;
    float _975 = (_957 + (-0.039999999105930328369140625)) * _966;
    float _976 = (_958 + (-0.039999999105930328369140625)) * _966;
    float _977 = _974 + 0.039999999105930328369140625;
    float _978 = _975 + 0.039999999105930328369140625;
    float _979 = _976 + 0.039999999105930328369140625;
    vec4 _988 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _779, cbSceneParam._m0[86u].y * _780));
    float _991 = _988.x * TEXCOORD_8;
    float _992 = dot(vec3(_690, _691, _692), vec3(_771, _772, _773));
    float _995 = _992 * 2.0;
    float _999 = (_995 * _690) - _771;
    float _1000 = (_995 * _691) - _772;
    float _1001 = (_995 * _692) - _773;
    float _1005 = abs(dot(vec3(_771, _772, _773), vec3(_690, _691, _692)));
    float _4239 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1007 = sqrt(_859);
    float _1020 = exp2((_1007 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1007 * 3.0));
    float _1026 = (1.0 - _1020) * ((_1007 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1027 = _1020 * _1007;
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1364;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1090 = fma(_1063, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1055));
        float _1094 = fma(_1063, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1055));
        float _1098 = fma(_1063, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1055));
        float _1122 = _1055 + _690;
        float _1123 = _1059 + _691;
        float _1124 = _1063 + _692;
        float _1134 = fma(_1124, cbModelParam._m0[26u].z, fma(_1123, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1122)) - _1090;
        float _1135 = fma(_1124, cbModelParam._m0[27u].z, fma(_1123, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1122)) - _1094;
        float _1136 = fma(_1124, cbModelParam._m0[28u].z, fma(_1123, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1122)) - _1098;
        float _1140 = inversesqrt(dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136)));
        float _1153 = ((_1140 * _1134) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1090 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1140 * _1135) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1094 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1140 * _1136) / cbModelParam._m0[34u].z) + ((((((_1098 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        float _1192 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1158.x + (-0.5));
        float _1194 = _1192 * (_1158.y + (-0.5));
        float _1195 = _1192 * (_1158.z + (-0.5));
        float _1202 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1165.x + (-0.5));
        float _1204 = _1202 * (_1165.y + (-0.5));
        float _1205 = _1202 * (_1165.z + (-0.5));
        float _1212 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1172.x + (-0.5));
        float _1214 = _1212 * (_1172.y + (-0.5));
        float _1215 = _1212 * (_1172.z + (-0.5));
        float _1222 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1179.x + (-0.5));
        float _1224 = _1222 * (_1179.y + (-0.5));
        float _1225 = _1222 * (_1179.z + (-0.5));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = _1193 * 0.5;
        float _1230 = _1203 * 0.5;
        float _1231 = _1213 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1246 = (dot(vec3(_690, _691, _692), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1256 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _4287 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1258 + 1.0))) + _1263) * _1226;
        float _1273 = _1194 * 0.5;
        float _1274 = _1204 * 0.5;
        float _1275 = _1214 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_690, _691, _692), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4320 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1300 + 1.0))) + _1305) * _1227;
        float _1315 = _1195 * 0.5;
        float _1316 = _1205 * 0.5;
        float _1317 = _1215 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_690, _691, _692), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4331 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4342 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4353 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_1342 + 1.0))) + _1347) * _1228;
        _1364 = _1195;
        _1366 = _1194;
        _1367 = _1193;
        _1368 = _1205;
        _1369 = _1204;
        _1370 = _1203;
        _1371 = _1215;
        _1372 = _1214;
        _1373 = _1213;
        _1374 = _1228;
        _1375 = _1227;
        _1376 = _1226;
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
    }
    else
    {
        _1364 = _1365;
        _1366 = _1365;
        _1367 = _1365;
        _1368 = _1365;
        _1369 = _1365;
        _1370 = _1365;
        _1371 = _1365;
        _1372 = _1365;
        _1373 = _1365;
        _1374 = _1365;
        _1375 = _1365;
        _1376 = _1365;
        _1377 = 0.0;
        _1378 = 0.0;
        _1379 = 0.0;
    }
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1405 = fma(_1063, cbModelParam._m0[30u].z, fma(_1059, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1055));
        float _1409 = fma(_1063, cbModelParam._m0[31u].z, fma(_1059, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1055));
        float _1413 = fma(_1063, cbModelParam._m0[32u].z, fma(_1059, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1055));
        float _1436 = _1055 + _690;
        float _1437 = _1059 + _691;
        float _1438 = _1063 + _692;
        float _1448 = fma(_1438, cbModelParam._m0[30u].z, fma(_1437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1436)) - _1405;
        float _1449 = fma(_1438, cbModelParam._m0[31u].z, fma(_1437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1436)) - _1409;
        float _1450 = fma(_1438, cbModelParam._m0[32u].z, fma(_1437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1436)) - _1413;
        float _1454 = inversesqrt(dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450)));
        float _1467 = ((_1454 * _1448) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1405 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1454 * _1449) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1409 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1454 * _1450) / cbModelParam._m0[35u].z) + ((((((_1413 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        float _1504 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1471.x + (-0.5));
        float _1506 = _1504 * (_1471.y + (-0.5));
        float _1507 = _1504 * (_1471.z + (-0.5));
        float _1514 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1478.x + (-0.5));
        float _1516 = _1514 * (_1478.y + (-0.5));
        float _1517 = _1514 * (_1478.z + (-0.5));
        float _1524 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1485.x + (-0.5));
        float _1526 = _1524 * (_1485.y + (-0.5));
        float _1527 = _1524 * (_1485.z + (-0.5));
        float _1534 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1492.x + (-0.5));
        float _1536 = _1534 * (_1492.y + (-0.5));
        float _1537 = _1534 * (_1492.z + (-0.5));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = _1505 * 0.5;
        float _1542 = _1515 * 0.5;
        float _1543 = _1525 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_690, _691, _692), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4416 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1568 + 1.0))) + _1573) * _1538;
        float _1583 = _1506 * 0.5;
        float _1584 = _1516 * 0.5;
        float _1585 = _1526 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_690, _691, _692), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4449 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1610 + 1.0))) + _1615) * _1539;
        float _1625 = _1507 * 0.5;
        float _1626 = _1517 * 0.5;
        float _1627 = _1527 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_690, _691, _692), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4460 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4471 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4482 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_1652 + 1.0))) + _1657) * _1540;
        _1674 = _1507;
        _1675 = _1506;
        _1676 = _1505;
        _1677 = _1517;
        _1678 = _1516;
        _1679 = _1515;
        _1680 = _1527;
        _1681 = _1526;
        _1682 = _1525;
        _1683 = _1540;
        _1684 = _1539;
        _1685 = _1538;
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
    }
    else
    {
        _1674 = _1365;
        _1675 = _1365;
        _1676 = _1365;
        _1677 = _1365;
        _1678 = _1365;
        _1679 = _1365;
        _1680 = _1365;
        _1681 = _1365;
        _1682 = _1365;
        _1683 = _1365;
        _1684 = _1365;
        _1685 = _1365;
        _1686 = 0.0;
        _1687 = 0.0;
        _1688 = 0.0;
    }
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1377)) + _1377;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1378)) + _1378;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1379)) + _1379;
    float _1721 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1698));
    float _1742 = _999 * 0.5;
    float _1743 = _1000 * 0.5;
    float _1744 = _1001 * 0.5;
    float _1745 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1748 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1751 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1782;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1758 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1364, _1368, _1371, _1374));
        float _1762 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1366, _1369, _1372, _1375));
        float _1766 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1773 = dot(vec4(cbModelParam._m0[39u]), vec4(_1742, _1743, _1744, 1.0));
        _1782 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1773) ? 0.0 : (isnan(0.0) ? _1773 : max(0.0, _1773))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1782 = 1.0;
    }
    float _1793;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1784 = dot(vec4(cbModelParam._m0[40u]), vec4(_1742, _1743, _1744, 1.0));
        _1793 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1793 = 1.0;
    }
    float _1797 = (_1793 * cbModelParam._m0[1u].x) + (_1782 * (1.0 - cbModelParam._m0[1u].x));
    float _1807 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _859);
    float _1808 = isnan(_1807) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1807 : min(cbModelParam._m0[25u].z, _1807));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1855 = fma(_1063, cbModelParam._m0[13u].z, fma(_1059, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1055)) + cbModelParam._m0[13u].w;
        float _1859 = fma(_1063, cbModelParam._m0[14u].z, fma(_1059, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1055)) + cbModelParam._m0[14u].w;
        float _1863 = fma(_1063, cbModelParam._m0[15u].z, fma(_1059, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1055)) + cbModelParam._m0[15u].w;
        float _1866 = fma(_1001, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _999));
        float _1869 = fma(_1001, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _999));
        float _1872 = fma(_1001, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _999));
        float _1900;
        if (_1866 > 0.0)
        {
            _1900 = abs((1.0 - _1855) / _1866);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1855 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1900 = frontier_phi_16_14_ladder;
        }
        float _2071;
        if (_1869 > 0.0)
        {
            _2071 = abs((1.0 - _1859) / _1869);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1859 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2071 = frontier_phi_25_21_ladder;
        }
        float _2366;
        if (_1872 > 0.0)
        {
            _2366 = abs((1.0 - _1863) / _1872);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1863 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2366 = frontier_phi_37_32_ladder;
        }
        float _2368 = isnan(_2071) ? _1900 : (isnan(_1900) ? _2071 : min(_1900, _2071));
        float _2369 = isnan(_2366) ? _2368 : (isnan(_2368) ? _2366 : min(_2368, _2366));
        float _2373 = (_2369 * _1866) + _1855;
        float _2374 = (_2369 * _1869) + _1859;
        float _2375 = (_2369 * _1872) + _1863;
        float _2376 = _2369 * 9.9999997473787516355514526367188e-05;
        float _2378 = (-1.0) - _2376;
        float _2380 = _2376 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2375 > _2380) || ((_2375 < _2378) || ((_2374 > _2380) || ((_2374 < _2378) || ((_2373 < _2378) || (_2373 > _2380))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2375, cbModelParam._m0[9u].z, fma(_2374, cbModelParam._m0[9u].y, _2373 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2375, cbModelParam._m0[10u].z, fma(_2374, cbModelParam._m0[10u].y, _2373 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2375, cbModelParam._m0[11u].z, fma(_2374, cbModelParam._m0[11u].y, _2373 * cbModelParam._m0[11u].x))), _1808);
            frontier_phi_15_37_ladder = _2520.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2520.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2520.z * cbModelParam._m0[1u].y;
        }
        _1888 = frontier_phi_15_37_ladder_1;
        _1890 = frontier_phi_15_37_ladder;
        _1892 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_999, _1000, _1001), _1808);
        _1888 = _1876.x * cbModelParam._m0[1u].y;
        _1890 = _1876.y * cbModelParam._m0[1u].y;
        _1892 = _1876.z * cbModelParam._m0[1u].y;
    }
    float _1896 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _859);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1896 : min(cbModelParam._m0[25u].w, _1896));
    float _1986;
    float _1988;
    float _1990;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1950 = fma(_1063, cbModelParam._m0[21u].z, fma(_1059, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1055)) + cbModelParam._m0[21u].w;
        float _1954 = fma(_1063, cbModelParam._m0[22u].z, fma(_1059, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1055)) + cbModelParam._m0[22u].w;
        float _1958 = fma(_1063, cbModelParam._m0[23u].z, fma(_1059, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1055)) + cbModelParam._m0[23u].w;
        float _1961 = fma(_1001, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _999));
        float _1964 = fma(_1001, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _999));
        float _1967 = fma(_1001, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _999));
        float _2076;
        if (_1961 > 0.0)
        {
            _2076 = abs((1.0 - _1950) / _1961);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1950 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2076 = frontier_phi_27_23_ladder;
        }
        float _2393;
        if (_1964 > 0.0)
        {
            _2393 = abs((1.0 - _1954) / _1964);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1954 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2393 = frontier_phi_39_34_ladder;
        }
        float _2731;
        if (_1967 > 0.0)
        {
            _2731 = abs((1.0 - _1958) / _1967);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1958 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2731 = frontier_phi_49_46_ladder;
        }
        float _2733 = isnan(_2393) ? _2076 : (isnan(_2076) ? _2393 : min(_2076, _2393));
        float _2734 = isnan(_2731) ? _2733 : (isnan(_2733) ? _2731 : min(_2733, _2731));
        float _2738 = (_2734 * _1961) + _1950;
        float _2739 = (_2734 * _1964) + _1954;
        float _2740 = (_2734 * _1967) + _1958;
        float _2741 = _2734 * 9.9999997473787516355514526367188e-05;
        float _2742 = (-1.0) - _2741;
        float _2744 = _2741 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2740 > _2744) || ((_2740 < _2742) || ((_2739 > _2744) || ((_2739 < _2742) || ((_2738 < _2742) || (_2738 > _2744))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2740, cbModelParam._m0[17u].z, fma(_2739, cbModelParam._m0[17u].y, _2738 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2740, cbModelParam._m0[18u].z, fma(_2739, cbModelParam._m0[18u].y, _2738 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2740, cbModelParam._m0[19u].z, fma(_2739, cbModelParam._m0[19u].y, _2738 * cbModelParam._m0[19u].x))), _1897);
            frontier_phi_24_49_ladder = _2862.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2862.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2862.x * cbModelParam._m0[1u].z;
        }
        _1986 = frontier_phi_24_49_ladder_2;
        _1988 = frontier_phi_24_49_ladder_1;
        _1990 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1970 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_999, _1000, _1001), _1897);
        _1986 = _1970.x * cbModelParam._m0[1u].z;
        _1988 = _1970.y * cbModelParam._m0[1u].z;
        _1990 = _1970.z * cbModelParam._m0[1u].z;
    }
    float _2003 = (((_1026 * _977) + _1027) * _991) * ((cbModelParam._m0[1u].w * (_1986 - _1888)) + _1888);
    float _2005 = (((_1026 * _978) + _1027) * _991) * ((cbModelParam._m0[1u].w * (_1988 - _1890)) + _1890);
    float _2007 = (((_1026 * _979) + _1027) * _991) * ((cbModelParam._m0[1u].w * (_1990 - _1892)) + _1892);
    float _2010 = fma(_2007, cbSceneParam._m0[89u].z, fma(_2005, cbSceneParam._m0[89u].y, _2003 * cbSceneParam._m0[89u].x));
    float _2013 = fma(_2007, cbSceneParam._m0[90u].z, fma(_2005, cbSceneParam._m0[90u].y, _2003 * cbSceneParam._m0[90u].x));
    float _2016 = fma(_2007, cbSceneParam._m0[91u].z, fma(_2005, cbSceneParam._m0[91u].y, _2003 * cbSceneParam._m0[91u].x));
    float _2050 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2063 = _2050 / _2062;
    float _2064 = _2054 / _2062;
    float _2065 = _2058 / _2062;
    float _2212;
    float _2213;
    float _2214;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2092 = ((uint(_2065 > cbSceneParam._m0[59u].y) + uint(_2065 > cbSceneParam._m0[59u].x)) + uint(_2065 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2093 = _2092 + 43u;
        uint _2101 = _2092 + 44u;
        uint _2109 = _2092 + 45u;
        uint _2117 = _2092 + 46u;
        float _2128 = fma(_2062, cbSceneParam._m0[_2093].w, fma(_2058, cbSceneParam._m0[_2093].z, fma(_2054, cbSceneParam._m0[_2093].y, _2050 * cbSceneParam._m0[_2093].x)));
        float _2132 = fma(_2062, cbSceneParam._m0[_2101].w, fma(_2058, cbSceneParam._m0[_2101].z, fma(_2054, cbSceneParam._m0[_2101].y, _2050 * cbSceneParam._m0[_2101].x)));
        float _2140 = fma(_2062, cbSceneParam._m0[_2117].w, fma(_2058, cbSceneParam._m0[_2117].z, fma(_2054, cbSceneParam._m0[_2117].y, _2050 * cbSceneParam._m0[_2117].x)));
        float _2145 = cbSceneParam._m0[33u].z * _2140;
        float _2147 = cbSceneParam._m0[33u].w * _2140;
        float _2150 = fma(_2062, cbSceneParam._m0[_2109].w, fma(_2058, cbSceneParam._m0[_2109].z, fma(_2054, cbSceneParam._m0[_2109].y, _2050 * cbSceneParam._m0[_2109].x))) / _2140;
        float _2198 = (cbSceneParam._m0[33u].x - sqrt(((_2064 * _2064) + (_2063 * _2063)) + (_2065 * _2065))) * cbSceneParam._m0[33u].y;
        float _4608 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2205 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 + _2128) / _2140, (_2147 + _2132) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2147 + _2128) / _2140, (_2132 - _2145) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 - _2145) / _2140, (_2132 - _2147) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 - _2147) / _2140, (_2145 + _2132) / _2140), _2150), 0.0)).x), vec4(0.25)));
        _2212 = 1.0 - (_2205 * cbSceneParam._m0[34u].x);
        _2213 = 1.0 - (_2205 * cbSceneParam._m0[34u].y);
        _2214 = 1.0 - (_2205 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2212 = 1.0;
        _2213 = 1.0;
        _2214 = 1.0;
    }
    float _2278;
    float _2280;
    float _2282;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2266 = fma(_2062, cbSceneParam._m0[63u].w, fma(_2058, cbSceneParam._m0[63u].z, fma(_2054, cbSceneParam._m0[63u].y, _2050 * cbSceneParam._m0[63u].x)));
        float _2267 = fma(_2062, cbSceneParam._m0[60u].w, fma(_2058, cbSceneParam._m0[60u].z, fma(_2054, cbSceneParam._m0[60u].y, _2050 * cbSceneParam._m0[60u].x))) / _2266;
        float _2268 = fma(_2062, cbSceneParam._m0[61u].w, fma(_2058, cbSceneParam._m0[61u].z, fma(_2054, cbSceneParam._m0[61u].y, _2050 * cbSceneParam._m0[61u].x))) / _2266;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2267 >= cbSceneParam._m0[64u].x) && (_2268 >= cbSceneParam._m0[64u].y)) && (_2267 <= cbSceneParam._m0[64u].z)) && (_2268 <= cbSceneParam._m0[64u].w))
        {
            float _2406 = fma(_2062, cbSceneParam._m0[62u].w, fma(_2058, cbSceneParam._m0[62u].z, fma(_2054, cbSceneParam._m0[62u].y, _2050 * cbSceneParam._m0[62u].x))) / _2266;
            float _2410 = isnan(cbSceneParam._m0[41u].w) ? _2406 : (isnan(_2406) ? cbSceneParam._m0[41u].w : max(_2406, cbSceneParam._m0[41u].w));
            float _2453 = (cbSceneParam._m0[33u].x - sqrt(((_2064 * _2064) + (_2063 * _2063)) + (_2065 * _2065))) * cbSceneParam._m0[33u].y;
            float _4624 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
            float _2460 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2267, cbSceneParam._m0[33u].w + _2268), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2267, _2268 - cbSceneParam._m0[33u].z), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2267 - cbSceneParam._m0[33u].z, _2268 - cbSceneParam._m0[33u].w), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2267 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2268), _2410), 0.0)).x), vec4(0.25)));
            float _2464 = 1.0 - (_2460 * cbSceneParam._m0[34u].x);
            float _2465 = 1.0 - (_2460 * cbSceneParam._m0[34u].y);
            float _2466 = 1.0 - (_2460 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2465) ? _2213 : (isnan(_2213) ? _2465 : min(_2213, _2465));
            frontier_phi_36_35_ladder_1 = isnan(_2466) ? _2214 : (isnan(_2214) ? _2466 : min(_2214, _2466));
            frontier_phi_36_35_ladder_2 = isnan(_2464) ? _2212 : (isnan(_2212) ? _2464 : min(_2212, _2464));
        }
        else
        {
            frontier_phi_36_35_ladder = _2213;
            frontier_phi_36_35_ladder_1 = _2214;
            frontier_phi_36_35_ladder_2 = _2212;
        }
        _2278 = frontier_phi_36_35_ladder_2;
        _2280 = frontier_phi_36_35_ladder;
        _2282 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2278 = _2212;
        _2280 = _2213;
        _2282 = _2214;
    }
    uvec4 _2287 = floatBitsToUint(cbInstanceData._m0[_883 + 5u]);
    uint _2289 = _2287.x * 14u;
    uint _2290 = _2289 + 13u;
    float _2297 = _991 + (-1.0);
    float _2302 = (cbLight._m0[_2290].x * _2297) + 1.0;
    float _2303 = (cbLight._m0[_2290].y * _2297) + 1.0;
    float _2304 = (cbLight._m0[_2290].z * _2297) + 1.0;
    float _2305 = (cbLight._m0[_2290].w * _2297) + 1.0;
    uint _2306 = _2289 + 5u;
    float _2312 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
    uint _2316 = _2289 + 4u;
    float _2325 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
    uint _2329 = _2289 | 1u;
    float _2340 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_690, _691, _692));
    float _2343 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_690, _691, _692));
    float _4660 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _4671 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2348 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * 0.3183098733425140380859375;
    float _2350 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * 0.3183098733425140380859375;
    float _2357 = ((cbLight._m0[_2306].x * _2312) * _2350) + (((cbLight._m0[_2316].x * _2278) * _2325) * _2348);
    float _2358 = ((_2312 * cbLight._m0[_2306].y) * _2350) + (((cbLight._m0[_2316].y * _2280) * _2325) * _2348);
    float _2359 = ((_2312 * cbLight._m0[_2306].z) * _2350) + (((cbLight._m0[_2316].z * _2282) * _2325) * _2348);
    uvec4 _2363 = floatBitsToUint(cbLight._m0[_2289 + 12u]);
    bool _2365 = _2363.x == 0u;
    float _2467;
    float _2469;
    float _2471;
    if (_2365)
    {
        _2467 = _2357;
        _2469 = _2358;
        _2471 = _2359;
    }
    else
    {
        uint _2475 = _2289 + 6u;
        float _2491 = (dot(vec3(cbLight._m0[_2289 + 2u].xyz), vec3(_690, _691, _692)) * 0.5) + 0.5;
        float _2492 = _2491 * _2491;
        float _4682 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2493 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2494 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2467 = (((cbLight._m0[_2475].x * 0.3183098733425140380859375) * _2493) * _2494) + _2357;
        _2469 = (((cbLight._m0[_2475].y * 0.3183098733425140380859375) * _2493) * _2494) + _2358;
        _2471 = (((cbLight._m0[_2475].z * 0.3183098733425140380859375) * _2493) * _2494) + _2359;
    }
    bool _2474 = _2363.y == 0u;
    float _2529;
    float _2531;
    float _2533;
    if (_2474)
    {
        _2529 = _2467;
        _2531 = _2469;
        _2533 = _2471;
    }
    else
    {
        uint _2702 = _2289 + 7u;
        float _2718 = (dot(vec3(cbLight._m0[_2289 + 3u].xyz), vec3(_690, _691, _692)) * 0.5) + 0.5;
        float _2719 = _2718 * _2718;
        float _4698 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2720 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2721 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2529 = (((cbLight._m0[_2702].x * 0.3183098733425140380859375) * _2720) * _2721) + _2467;
        _2531 = (((cbLight._m0[_2702].y * 0.3183098733425140380859375) * _2720) * _2721) + _2469;
        _2533 = (((cbLight._m0[_2702].z * 0.3183098733425140380859375) * _2720) * _2721) + _2471;
    }
    uint _2536 = _2289 + 8u;
    float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _859) * 0.949999988079071044921875);
    float _2550 = _2549 * _2549;
    float _2551 = cbLight._m0[_2289].x + _771;
    float _2552 = cbLight._m0[_2289].y + _772;
    float _2553 = cbLight._m0[_2289].z + _773;
    float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
    float _2558 = _2557 * _2551;
    float _2559 = _2557 * _2552;
    float _2560 = _2557 * _2553;
    float _2561 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2289].xyz));
    float _4714 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _4725 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _2565 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2566 = dot(vec3(_690, _691, _692), vec3(_2558, _2559, _2560));
    float _4736 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2569 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2570 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2558, _2559, _2560));
    float _4747 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2574 = _2550 * _2550;
    float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
    float _2586 = exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0);
    float _2587 = 0.959999978542327880859375 - _974;
    float _2589 = 0.959999978542327880859375 - _975;
    float _2590 = 0.959999978542327880859375 - _976;
    float _2597 = 1.0 - _2550;
    float _2608 = (0.5 / (((_2565 * ((_2564 * _2597) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2597) + _2550) * _2564))) * _2564;
    float _4758 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2610 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
    uint _2624 = _2289 + 9u;
    float _2635 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _859) * 0.949999988079071044921875);
    float _2636 = _2635 * _2635;
    float _2637 = cbLight._m0[_2329].x + _771;
    float _2638 = cbLight._m0[_2329].y + _772;
    float _2639 = cbLight._m0[_2329].z + _773;
    float _2643 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
    float _2644 = _2643 * _2637;
    float _2645 = _2643 * _2638;
    float _2646 = _2643 * _2639;
    float _2647 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2329].xyz));
    float _4769 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2650 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _2651 = dot(vec3(_690, _691, _692), vec3(_2644, _2645, _2646));
    float _4780 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2654 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2655 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2644, _2645, _2646));
    float _4791 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2659 = _2636 * _2636;
    float _2663 = ((_2654 * _2654) * (_2659 + (-1.0))) + 1.0;
    float _2670 = exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0);
    float _2677 = 1.0 - _2636;
    float _2687 = (0.5 / (((_2565 * ((_2650 * _2677) + _2636)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2677) + _2636) * _2650))) * _2650;
    float _4802 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2689 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2659 / ((_2663 * _2663) * 3.141590118408203125));
    float _2699 = (((((_2670 * _2587) + _977) * cbLight._m0[_2624].x) * _2689) * _2312) + ((((cbLight._m0[_2536].x * _2278) * ((_2586 * _2587) + _977)) * _2610) * _2325);
    float _2700 = (((((_2670 * _2589) + _978) * cbLight._m0[_2624].y) * _2689) * _2312) + ((((cbLight._m0[_2536].y * _2280) * ((_2586 * _2589) + _978)) * _2610) * _2325);
    float _2701 = (((((_2670 * _2590) + _979) * cbLight._m0[_2624].z) * _2689) * _2312) + ((((cbLight._m0[_2536].z * _2282) * ((_2586 * _2590) + _979)) * _2610) * _2325);
    float _2757;
    float _2759;
    float _2761;
    if (_2365)
    {
        _2757 = _2699;
        _2759 = _2700;
        _2761 = _2701;
    }
    else
    {
        uint _2763 = _2289 + 2u;
        uint _2767 = _2289 + 10u;
        float _2781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2763].w)) * _859) * 0.949999988079071044921875);
        float _2782 = _2781 * _2781;
        float _2783 = cbLight._m0[_2763].x + _771;
        float _2784 = cbLight._m0[_2763].y + _772;
        float _2785 = cbLight._m0[_2763].z + _773;
        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
        float _2790 = _2789 * _2783;
        float _2791 = _2789 * _2784;
        float _2792 = _2789 * _2785;
        float _2793 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2763].xyz));
        float _4813 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2797 = dot(vec3(_690, _691, _692), vec3(_2790, _2791, _2792));
        float _4824 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2800 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2801 = dot(vec3(cbLight._m0[_2763].xyz), vec3(_2790, _2791, _2792));
        float _4835 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2805 = _2782 * _2782;
        float _2809 = ((_2800 * _2800) * (_2805 + (-1.0))) + 1.0;
        float _2816 = exp2(log2(1.0 - (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) * 5.0);
        float _2823 = 1.0 - _2782;
        float _2833 = (0.5 / (((_2565 * ((_2796 * _2823) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2823) + _2782) * _2796))) * _2796;
        float _4846 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2835 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2805 / ((_2809 * _2809) * 3.141590118408203125));
        float _2836 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2757 = (((((_2816 * _2587) + _977) * cbLight._m0[_2767].x) * _2835) * _2836) + _2699;
        _2759 = (((((_2816 * _2589) + _978) * cbLight._m0[_2767].y) * _2835) * _2836) + _2700;
        _2761 = (((((_2816 * _2590) + _979) * cbLight._m0[_2767].z) * _2835) * _2836) + _2701;
    }
    float _2867;
    float _2869;
    float _2871;
    if (_2474)
    {
        _2867 = _2757;
        _2869 = _2759;
        _2871 = _2761;
    }
    else
    {
        uint _2878 = _2289 + 3u;
        uint _2882 = _2289 + 11u;
        float _2896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2878].w)) * _859) * 0.949999988079071044921875);
        float _2897 = _2896 * _2896;
        float _2898 = cbLight._m0[_2878].x + _771;
        float _2899 = cbLight._m0[_2878].y + _772;
        float _2900 = cbLight._m0[_2878].z + _773;
        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
        float _2905 = _2904 * _2898;
        float _2906 = _2904 * _2899;
        float _2907 = _2904 * _2900;
        float _2908 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2878].xyz));
        float _4862 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2911 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2912 = dot(vec3(_690, _691, _692), vec3(_2905, _2906, _2907));
        float _4873 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2915 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2916 = dot(vec3(cbLight._m0[_2878].xyz), vec3(_2905, _2906, _2907));
        float _4884 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2920 = _2897 * _2897;
        float _2924 = ((_2915 * _2915) * (_2920 + (-1.0))) + 1.0;
        float _2931 = exp2(log2(1.0 - (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) * 5.0);
        float _2938 = 1.0 - _2897;
        float _2948 = (0.5 / (((_2565 * ((_2911 * _2938) + _2897)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2938) + _2897) * _2911))) * _2911;
        float _4895 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2950 = (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2920 / ((_2924 * _2924) * 3.141590118408203125));
        float _2951 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2867 = (((((_2931 * _2587) + _977) * cbLight._m0[_2882].x) * _2950) * _2951) + _2757;
        _2869 = (((((_2931 * _2589) + _978) * cbLight._m0[_2882].y) * _2950) * _2951) + _2759;
        _2871 = (((((_2931 * _2590) + _979) * cbLight._m0[_2882].z) * _2950) * _2951) + _2761;
    }
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_2287.y == 0u)
    {
        uvec4 _2972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2973 = _2972.x;
        uint _2984 = uint((float(_2972.y) * floor(float(uint(cbSceneParam._m0[85u].y * _780) / _2973))) + floor(float(uint(cbSceneParam._m0[85u].x * _779) / _2973)));
        float _2994 = (log2(_2065 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2995 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        uint _2998 = uint(isnan(14.0) ? _2995 : (isnan(_2995) ? 14.0 : min(_2995, 14.0)));
        uvec4 _3003 = texelFetch(g_lightClusterGridBuffer, int(((_2998 << 2u) + (_2984 << 6u)) >> 2u));
        uint _3004 = _3003.x;
        uint _3005 = _2972.z;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        if (((((1u << ((_3005 >> 4u) & 15u)) + 4294967295u) & _3004) == 0u) || ((_3005 & 240u) == 0u))
        {
            _3169 = 0.0;
            _3171 = 0.0;
            _3173 = 0.0;
            _3175 = 0.0;
            _3177 = 0.0;
            _3179 = 0.0;
        }
        else
        {
            float _3170;
            float _3172;
            float _3174;
            float _3176;
            float _3178;
            float _3180;
            float _3313 = 0.0;
            float _3314 = 0.0;
            float _3315 = 0.0;
            float _3316 = 0.0;
            float _3317 = 0.0;
            float _3318 = 0.0;
            uint _3319 = 0u;
            uint _3328;
            bool _3329;
            for (;;)
            {
                _3328 = texelFetch(g_lightClassification, int((((_2998 << 5u) + (_2984 << 9u)) + (_3319 << 2u)) >> 2u)).x;
                _3329 = _3328 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3329)
                {
                    frontier_phi_68_pred = _3318;
                    frontier_phi_68_pred_1 = _3317;
                    frontier_phi_68_pred_2 = _3316;
                    frontier_phi_68_pred_3 = _3314;
                    frontier_phi_68_pred_4 = _3313;
                    frontier_phi_68_pred_5 = _3315;
                }
                else
                {
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    float _3442;
                    uint _3443;
                    _3437 = _3313;
                    _3438 = _3314;
                    _3439 = _3315;
                    _3440 = _3316;
                    _3441 = _3317;
                    _3442 = _3318;
                    _3443 = _3328;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    for (;;)
                    {
                        uint _3447 = uint(findLSB(_3443)) + (_3319 << 5u);
                        uint _3444 = (_3443 + 4294967295u) & _3443;
                        uint _3449 = _3447 * 48u;
                        vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3449)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 3u)).x));
                        uint _3469 = (_3447 * 48u) + 4u;
                        vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3469)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 3u)).x));
                        uint _3488 = (_3447 * 48u) + 8u;
                        vec3 _3499 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3488)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 2u)).x));
                        float _3503 = _3463.x - _2063;
                        float _3504 = _3463.y - _2064;
                        float _3505 = _3463.z - _2065;
                        float _3506 = dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505));
                        float _3509 = inversesqrt(_3506);
                        float _3510 = _3509 * _3503;
                        float _3511 = _3509 * _3504;
                        float _3512 = _3509 * _3505;
                        float _3513 = dot(vec3(_802, _805, _808), vec3(_3510, _3511, _3512));
                        float _3518 = 1.0 - (_3506 * _3463.w);
                        float _4921 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3519 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3520 = sqrt(_3506) * _3482.w;
                        float _3523 = 1.39999997615814208984375 / (_3520 + 1.39999997615814208984375);
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3513) + _3524;
                        float _3530 = _3520 * _3520;
                        float _3533 = ((isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0))) * _3519) / ((_3530 * 0.699999988079071044921875) + 1.0);
                        float _3537 = (-0.0) - _2063;
                        float _3538 = (-0.0) - _2064;
                        float _3539 = (-0.0) - _2065;
                        float _3543 = inversesqrt(dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539)));
                        float _3544 = _3543 * _3537;
                        float _3545 = _3543 * _3538;
                        float _3546 = _3543 * _3539;
                        float _3553 = exp2(log2(1.0 / ((_3530 * 3.5) + 5.0)) * 0.25);
                        float _3554 = 1.0 - _1007;
                        float _3561 = sqrt(1.0 - ((1.0 - (_3554 * _3554)) * (1.0 - (_3553 * _3553))));
                        float _3562 = _3561 * _3561;
                        float _3563 = _3562 * _3562;
                        float _3564 = _3544 + _3510;
                        float _3565 = _3545 + _3511;
                        float _3566 = _3546 + _3512;
                        float _3570 = inversesqrt(dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566)));
                        float _3574 = dot(vec3(_802, _805, _808), vec3(_3544, _3545, _3546));
                        float _4937 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3577 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                        float _3578 = dot(vec3(_802, _805, _808), vec3(_3570 * _3564, _3570 * _3565, _3570 * _3566));
                        float _4948 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3581 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3585 = ((_3581 * _3581) * (_3563 + (-1.0))) + 1.0;
                        float _3586 = _3523 * _3562;
                        float _3587 = _3586 * _3586;
                        float _3590 = ((1.0 - _3587) * _3513) + _3587;
                        float _4959 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3591 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3592 = 1.0 - _3562;
                        float _3602 = (0.5 / (((_3591 * ((_3577 * _3592) + _3562)) + 9.9999999392252902907785028219223e-09) + (((_3591 * _3592) + _3562) * _3577))) * _3591;
                        float _4970 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                        float _3613 = (((_3563 * 3.1415927410125732421875) * (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0)))) / ((_3585 * _3585) * ((_3530 * 2.1991131305694580078125) + 3.141590118408203125))) * _3519;
                        _3372 = (_3533 * _3482.x) + _3440;
                        _3373 = (_3533 * _3482.y) + _3441;
                        _3374 = (_3533 * _3482.z) + _3442;
                        _3369 = (_3613 * _3499.x) + _3437;
                        _3370 = (_3613 * _3499.y) + _3438;
                        _3371 = (_3613 * _3499.z) + _3439;
                        if (_3444 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3437 = _3369;
                            _3438 = _3370;
                            _3439 = _3371;
                            _3440 = _3372;
                            _3441 = _3373;
                            _3442 = _3374;
                            _3443 = _3444;
                        }
                    }
                    frontier_phi_68_pred = _3374;
                    frontier_phi_68_pred_1 = _3373;
                    frontier_phi_68_pred_2 = _3372;
                    frontier_phi_68_pred_3 = _3370;
                    frontier_phi_68_pred_4 = _3369;
                    frontier_phi_68_pred_5 = _3371;
                }
                _3180 = frontier_phi_68_pred;
                _3178 = frontier_phi_68_pred_1;
                _3176 = frontier_phi_68_pred_2;
                _3172 = frontier_phi_68_pred_3;
                _3170 = frontier_phi_68_pred_4;
                _3174 = frontier_phi_68_pred_5;
                uint _3320 = _3319 + 1u;
                if (_3320 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3313 = _3170;
                    _3314 = _3172;
                    _3315 = _3174;
                    _3316 = _3176;
                    _3317 = _3178;
                    _3318 = _3180;
                    _3319 = _3320;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3169 = _3170;
            _3171 = _3172;
            _3173 = _3174;
            _3175 = _3176;
            _3177 = _3178;
            _3179 = _3180;
        }
        uvec4 _3183 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3184 = _3183.z;
        uint _3186 = (_3184 >> 8u) & 15u;
        float _3281;
        float _3283;
        float _3285;
        float _3287;
        float _3289;
        float _3291;
        if (((4294967295u << _3186) & _3004) == 0u)
        {
            _3281 = _3169;
            _3283 = _3171;
            _3285 = _3173;
            _3287 = _3175;
            _3289 = _3177;
            _3291 = _3179;
        }
        else
        {
            float _3306 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
            float _3307 = _3306 * _2063;
            float _3308 = _3306 * _2064;
            float _3309 = _3306 * _2065;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3186 < ((_3184 >> 12u) & 15u))
            {
                float _3282;
                float _3284;
                float _3286;
                float _3288;
                float _3290;
                float _3292;
                float _3420 = _3169;
                float _3421 = _3171;
                float _3422 = _3173;
                float _3423 = _3175;
                float _3424 = _3177;
                float _3425 = _3179;
                uint _3426 = _3186;
                uint _3435;
                bool _3436;
                for (;;)
                {
                    _3435 = texelFetch(g_lightClassification, int((((_2998 << 5u) + (_2984 << 9u)) + (_3426 << 2u)) >> 2u)).x;
                    _3436 = _3435 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3436)
                    {
                        frontier_phi_74_pred = _3422;
                        frontier_phi_74_pred_1 = _3421;
                        frontier_phi_74_pred_2 = _3420;
                        frontier_phi_74_pred_3 = _3425;
                        frontier_phi_74_pred_4 = _3424;
                        frontier_phi_74_pred_5 = _3423;
                    }
                    else
                    {
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3911;
                        float _3912;
                        float _3913;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _3631 = _3420;
                        float _3632 = _3421;
                        float _3633 = _3422;
                        float _3634 = _3423;
                        float _3635 = _3424;
                        float _3636 = _3425;
                        uint _3637 = _3435;
                        uint _3638;
                        vec4 _3663;
                        float _3664;
                        vec4 _3679;
                        vec3 _3691;
                        vec4 _3706;
                        vec4 _3721;
                        float _3767;
                        bool _3768;
                        for (;;)
                        {
                            uint _3648 = ((_3426 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3637));
                            _3638 = (_3637 + 4294967295u) & _3637;
                            uint _3650 = _3648 * 40u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            _3664 = _3663.w;
                            uint _3666 = (_3648 * 40u) + 4u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3681 = (_3648 * 40u) + 8u;
                            _3691 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x));
                            uint _3693 = (_3648 * 40u) + 16u;
                            _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            uint _3708 = (_3648 * 40u) + 20u;
                            _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            uint _3723 = (_3648 * 40u) + 24u;
                            vec4 _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            uint _3742 = (_3648 * 40u) + 28u;
                            vec4 _3755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 3u)).x));
                            _3767 = fma(_2065, _3755.z, fma(_2064, _3755.y, _3755.x * _2063)) + _3755.w;
                            _3768 = !((fma(_2065, _3736.z, fma(_2064, _3736.y, _3736.x * _2063)) + _3736.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3768)
                            {
                                float _3795 = _3663.x - _2063;
                                float _3796 = _3663.y - _2064;
                                float _3797 = _3663.z - _2065;
                                float _3798 = dot(vec3(_3795, _3796, _3797), vec3(_3795, _3796, _3797));
                                float _3801 = inversesqrt(_3798);
                                float _3802 = _3801 * _3795;
                                float _3803 = _3801 * _3796;
                                float _3804 = _3801 * _3797;
                                float _3808 = 1.0 - (_3798 / (_3664 * _3664));
                                float _4981 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3813 = sqrt(_3798) * _3679.w;
                                float _3815 = 1.39999997615814208984375 / (_3813 + 1.39999997615814208984375);
                                float _3816 = _3815 * _3815;
                                float _3819 = ((1.0 - _3816) * dot(vec3(_3802, _3803, _3804), vec3(_802, _805, _808))) + _3816;
                                float _3822 = _3813 * _3813;
                                float _3826 = (fma(_2065, _3706.z, fma(_2064, _3706.y, _3706.x * _2063)) + _3706.w) / _3767;
                                float _3827 = (fma(_2065, _3721.z, fma(_2064, _3721.y, _3721.x * _2063)) + _3721.w) / _3767;
                                float _3831 = 1.0 - dot(vec2(_3826, _3827), vec2(_3826, _3827));
                                float _4997 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3832 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3833 = _3832 * (((isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0))) * _3809) / ((_3822 * 0.699999988079071044921875) + 1.0));
                                float _3845 = exp2(log2(1.0 / ((_3822 * 3.5) + 5.0)) * 0.25);
                                float _3846 = 1.0 - _1007;
                                float _3853 = sqrt(1.0 - ((1.0 - (_3846 * _3846)) * (1.0 - (_3845 * _3845))));
                                float _3854 = _3853 * _3853;
                                float _3855 = _3854 * _3854;
                                float _3856 = _3802 - _3307;
                                float _3857 = _3803 - _3308;
                                float _3858 = _3804 - _3309;
                                float _3862 = inversesqrt(dot(vec3(_3856, _3857, _3858), vec3(_3856, _3857, _3858)));
                                float _3866 = dot(vec3(_802, _805, _808), vec3((-0.0) - _3307, (-0.0) - _3308, (-0.0) - _3309));
                                float _5008 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3869 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3870 = dot(vec3(_802, _805, _808), vec3(_3862 * _3856, _3862 * _3857, _3862 * _3858));
                                float _5019 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3873 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3877 = ((_3873 * _3873) * (_3855 + (-1.0))) + 1.0;
                                float _3878 = _3815 * _3854;
                                float _3879 = _3878 * _3878;
                                float _3885 = ((1.0 - _3879) * dot(vec3(_802, _805, _808), vec3(_3802, _3803, _3804))) + _3879;
                                float _5030 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3886 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3887 = 1.0 - _3854;
                                float _3897 = (0.5 / (((_3886 * ((_3869 * _3887) + _3854)) + 9.9999999392252902907785028219223e-09) + (((_3886 * _3887) + _3854) * _3869))) * _3886;
                                float _5041 = isnan(0.0) ? _3897 : (isnan(_3897) ? 0.0 : max(_3897, 0.0));
                                float _3907 = (_3832 * _3809) * (((_3855 * 3.1415927410125732421875) * (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0)))) / ((_3877 * _3877) * ((_3822 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3907 * _3691.z;
                                frontier_phi_80_pred_1 = _3907 * _3691.y;
                                frontier_phi_80_pred_2 = _3907 * _3691.x;
                                frontier_phi_80_pred_3 = _3833 * _3679.z;
                                frontier_phi_80_pred_4 = _3833 * _3679.y;
                                frontier_phi_80_pred_5 = _3833 * _3679.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3913 = frontier_phi_80_pred;
                            _3912 = frontier_phi_80_pred_1;
                            _3911 = frontier_phi_80_pred_2;
                            _3916 = frontier_phi_80_pred_3;
                            _3915 = frontier_phi_80_pred_4;
                            _3914 = frontier_phi_80_pred_5;
                            _3621 = _3914 + _3634;
                            _3622 = _3915 + _3635;
                            _3623 = _3916 + _3636;
                            _3618 = _3911 + _3631;
                            _3619 = _3912 + _3632;
                            _3620 = _3913 + _3633;
                            if (_3638 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3631 = _3618;
                                _3632 = _3619;
                                _3633 = _3620;
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3638;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3620;
                        frontier_phi_74_pred_1 = _3619;
                        frontier_phi_74_pred_2 = _3618;
                        frontier_phi_74_pred_3 = _3623;
                        frontier_phi_74_pred_4 = _3622;
                        frontier_phi_74_pred_5 = _3621;
                    }
                    _3286 = frontier_phi_74_pred;
                    _3284 = frontier_phi_74_pred_1;
                    _3282 = frontier_phi_74_pred_2;
                    _3292 = frontier_phi_74_pred_3;
                    _3290 = frontier_phi_74_pred_4;
                    _3288 = frontier_phi_74_pred_5;
                    uint _3427 = _3426 + 1u;
                    if (_3427 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3420 = _3282;
                        _3421 = _3284;
                        _3422 = _3286;
                        _3423 = _3288;
                        _3424 = _3290;
                        _3425 = _3292;
                        _3426 = _3427;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3290;
                frontier_phi_62_63_ladder_1 = _3288;
                frontier_phi_62_63_ladder_2 = _3286;
                frontier_phi_62_63_ladder_3 = _3292;
                frontier_phi_62_63_ladder_4 = _3284;
                frontier_phi_62_63_ladder_5 = _3282;
            }
            else
            {
                frontier_phi_62_63_ladder = _3177;
                frontier_phi_62_63_ladder_1 = _3175;
                frontier_phi_62_63_ladder_2 = _3173;
                frontier_phi_62_63_ladder_3 = _3179;
                frontier_phi_62_63_ladder_4 = _3171;
                frontier_phi_62_63_ladder_5 = _3169;
            }
            _3281 = frontier_phi_62_63_ladder_5;
            _3283 = frontier_phi_62_63_ladder_4;
            _3285 = frontier_phi_62_63_ladder_2;
            _3287 = frontier_phi_62_63_ladder_1;
            _3289 = frontier_phi_62_63_ladder;
            _3291 = frontier_phi_62_63_ladder_3;
        }
        float _3296 = isnan(1.0) ? _991 : (isnan(_991) ? 1.0 : min(_991, 1.0));
        _3016 = (_3296 * _3287) + _2529;
        _3018 = (_3296 * _3289) + _2531;
        _3020 = (_3296 * _3291) + _2533;
        _3022 = ((_3281 * _977) * _3296) + _2867;
        _3024 = ((_3283 * _978) * _3296) + _2869;
        _3026 = ((_3285 * _979) * _3296) + _2871;
    }
    else
    {
        _3016 = _2529;
        _3018 = _2531;
        _3020 = _2533;
        _3022 = _2867;
        _3024 = _2869;
        _3026 = _2871;
    }
    float _3033 = (_967 * _956) * cbMatDynParam._m0[9u].x;
    float _3034 = (_967 * _957) * cbMatDynParam._m0[9u].y;
    float _3035 = (_967 * _958) * cbMatDynParam._m0[9u].z;
    float _3046 = dot(vec3(_690, _691, _692), vec3(0.0, -1.0, 0.0));
    float _5057 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
    float _3049 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
    float _3053 = dot(vec3(_999, _1000, _1001), vec3(0.0, -1.0, 0.0));
    float _5068 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
    float _3059 = exp2(log2(isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * 4.0);
    float _5079 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
    float _5090 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
    float _5101 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
    float _5112 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3104 = abs(exp2(log2(_992) * cbMatDynParam._m0[12u].x));
    float _3105 = isnan(0.100000001490116119384765625) ? _3104 : (isnan(_3104) ? 0.100000001490116119384765625 : max(_3104, 0.100000001490116119384765625));
    float _3111 = ((isnan(0.699999988079071044921875) ? _3105 : (isnan(_3105) ? 0.699999988079071044921875 : min(_3105, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _3121 = ((((cbMatDynParam._m0[10u].x * cbPerFrame._m0[3u].x) * ((_3022 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1797)) + (_3059 * cbMatDynParam._m0[11u].x))) + ((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * ((_3016 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _991)) + (_3049 * cbMatDynParam._m0[11u].x)))) + cbMatDynParam._m0[7u].x) + (_3111 * (cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x));
    float _3124 = ((((cbMatDynParam._m0[10u].y * cbPerFrame._m0[3u].x) * ((_3024 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1797)) + (_3059 * cbMatDynParam._m0[11u].y))) + ((isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * ((_3018 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _991)) + (_3049 * cbMatDynParam._m0[11u].y)))) + cbMatDynParam._m0[7u].y) + (_3111 * (cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y));
    float _3127 = ((((cbMatDynParam._m0[10u].z * cbPerFrame._m0[3u].x) * ((_3026 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1797)) + (_3059 * cbMatDynParam._m0[11u].z))) + ((isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0))) * ((_3020 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _991)) + (_3049 * cbMatDynParam._m0[11u].z)))) + cbMatDynParam._m0[7u].z) + (_3111 * (cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z));
    float _3135 = cbInstanceData._m0[_883 + 6u].w * (isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0)));
    float _3140 = _779 / cbSceneParam._m0[86u].x;
    float _3141 = _780 / cbSceneParam._m0[86u].y;
    vec4 _3155 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3140, _3141, (log2((isnan(cbSceneParam._m0[77u].w) ? _714 : (isnan(_714) ? cbSceneParam._m0[77u].w : min(_714, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3157 = _3155.x;
    float _3158 = _3155.y;
    float _3159 = _3155.z;
    float _3160 = _3155.w;
    float _3231;
    float _3233;
    float _3235;
    float _3237;
    if (_714 > cbSceneParam._m0[78u].w)
    {
        float _3194 = isnan(_714) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _714 : min(cbSceneParam._m0[80u].w, _714));
        float _3195 = _3194 / _714;
        float _3206 = _3195 * _764;
        float _3207 = _765 * _3195;
        float _3208 = (-0.0) - _3207;
        float _3209 = _3195 * _766;
        float _3211 = (cbSceneParam._m0[77u].w * _3208) / _3194;
        float _3212 = _3211 + cbSceneParam._m0[79u].w;
        float _3213 = cbSceneParam._m0[79u].w - _3207;
        float _3219 = sqrt(((_3206 * _3206) + (_3207 * _3207)) + (_3209 * _3209));
        float _3222 = (1.0 - (cbSceneParam._m0[77u].w / _3194)) * _3219;
        float _3227 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3229 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3382;
        if (abs((_3208 - _3211) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3382 = ((((_3212 > 0.0) ? exp2(_3227 * _3212) : (2.0 - exp2(_3229 * _3212))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3222;
        }
        else
        {
            float _3342 = 1.0 / cbSceneParam._m0[80u].x;
            float _3343 = isnan(_3213) ? _3212 : (isnan(_3212) ? _3213 : max(_3212, _3213));
            float _3344 = isnan(_3213) ? _3212 : (isnan(_3212) ? _3213 : min(_3212, _3213));
            float _3353 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : min(_3343, 0.0));
            float _3354 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : min(_3344, 0.0));
            _3382 = ((abs(_3219 / _3208) * cbSceneParam._m0[80u].y) * ((((_3353 - _3354) * 2.0) - ((exp2(_3227 * (isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0)))) - exp2(_3227 * (isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0))))) * _3342)) - ((exp2(_3229 * _3353) - exp2(_3229 * _3354)) * _3342))) + (_3222 * cbSceneParam._m0[80u].z);
        }
        vec4 _3384 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3140, _3141, 1.0), 0.0);
        float _3393 = exp2((_3382 * (-1.44269502162933349609375)) * (1.0 - _3384.w));
        float _3394 = log2(_3393);
        float _3410 = log2(_3160);
        _3231 = (exp2(_3410 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].x)) * _3384.x) / cbSceneParam._m0[78u].x)) + _3157;
        _3233 = (exp2(_3410 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].y)) * _3384.y) / cbSceneParam._m0[78u].y)) + _3158;
        _3235 = (exp2(_3410 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].z)) * _3384.z) / cbSceneParam._m0[78u].z)) + _3159;
        _3237 = _3393 * _3160;
    }
    else
    {
        _3231 = _3157;
        _3233 = _3158;
        _3235 = _3159;
        _3237 = _3160;
    }
    float _3249 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3250 = _3249 == 3.0;
    float _3251 = log2(_3237);
    float _3258 = exp2(_3251 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0)));
    float _3259 = exp2(_3251 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0)));
    float _3260 = exp2(_3251 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0)));
    float _3269 = (_3249 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3269 * (_3250 ? _3258 : (_3258 + (cbSceneParam._m0[72u].w * _3231)));
    SV_Target.y = _3269 * (_3250 ? _3259 : (_3259 + (cbSceneParam._m0[72u].w * _3233)));
    SV_Target.z = _3269 * (_3250 ? _3260 : (_3260 + (cbSceneParam._m0[72u].w * _3235)));
    SV_Target.w = _3135;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3135;
}


