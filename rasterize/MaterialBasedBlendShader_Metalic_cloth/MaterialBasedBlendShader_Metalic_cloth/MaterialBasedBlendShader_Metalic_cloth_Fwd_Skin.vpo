#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[25];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbvModelParamUBO
{
    vec4 _m0[10];
} cbvModelParam;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uint BINORMAL;
layout(location = 4) in uvec4 BLENDINDICES;
layout(location = 5) in vec4 BLENDWEIGHT;
layout(location = 6) in vec4 COLOR;
layout(location = 7) in vec4 COLOR_1;
layout(location = 8) in ivec4 TEXCOORD;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_1;
layout(location = 5) out vec4 TEXCOORD_4;
layout(location = 6) out float TEXCOORD_8;

void main()
{
    uint _82 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1.z = 0.0;
    TEXCOORD_1.w = 0.0;
    TEXCOORD_4.x = 0.0;
    TEXCOORD_4.y = 0.0;
    TEXCOORD_4.z = 0.0;
    TEXCOORD_4.w = 0.0;
    TEXCOORD_8 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _200 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _202 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _203 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _210 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _211 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _212 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _452;
    float _453;
    float _454;
    float _455;
    float _456;
    float _457;
    float _458;
    float _459;
    float _460;
    float _461;
    float _462;
    float _463;
    if (floatBitsToUint(cbMatDynParam._m0[1u]).x == 0u)
    {
        uint _236 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _82;
        precise float _240 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
        float _245 = isnan(_240) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _240 : max(0.001000000047497451305389404296875, _240));
        precise float _247 = BLENDWEIGHT.x / _245;
        precise float _248 = BLENDWEIGHT.y / _245;
        precise float _249 = BLENDWEIGHT.z / _245;
        precise float _250 = BLENDWEIGHT.w / _245;
        uvec4 _257 = floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_236)).x * 13u) + 4u]);
        uint _258 = _257.x;
        uint _260 = (_258 + uint(float(BLENDINDICES.x))) * 3u;
        uint _267 = _260 + 1u;
        uint _274 = _260 + 2u;
        precise float _281 = _247 * cbObjMatrix._m0[_260].x;
        precise float _282 = _247 * cbObjMatrix._m0[_267].x;
        precise float _283 = _247 * cbObjMatrix._m0[_274].x;
        precise float _284 = _247 * cbObjMatrix._m0[_260].y;
        precise float _285 = _247 * cbObjMatrix._m0[_267].y;
        precise float _286 = _247 * cbObjMatrix._m0[_274].y;
        precise float _287 = _247 * cbObjMatrix._m0[_260].z;
        precise float _288 = _247 * cbObjMatrix._m0[_267].z;
        precise float _289 = _247 * cbObjMatrix._m0[_274].z;
        precise float _290 = _247 * cbObjMatrix._m0[_260].w;
        precise float _291 = _247 * cbObjMatrix._m0[_267].w;
        precise float _292 = _247 * cbObjMatrix._m0[_274].w;
        uint _295 = (_258 + uint(float(BLENDINDICES.y))) * 3u;
        uint _302 = _295 + 1u;
        uint _309 = _295 + 2u;
        precise float _316 = _248 * cbObjMatrix._m0[_295].x;
        precise float _317 = _248 * cbObjMatrix._m0[_302].x;
        precise float _318 = _248 * cbObjMatrix._m0[_309].x;
        precise float _319 = _248 * cbObjMatrix._m0[_295].y;
        precise float _320 = _248 * cbObjMatrix._m0[_302].y;
        precise float _321 = _248 * cbObjMatrix._m0[_309].y;
        precise float _322 = _248 * cbObjMatrix._m0[_295].z;
        precise float _323 = _248 * cbObjMatrix._m0[_302].z;
        precise float _324 = _248 * cbObjMatrix._m0[_309].z;
        precise float _325 = _248 * cbObjMatrix._m0[_295].w;
        precise float _326 = _248 * cbObjMatrix._m0[_302].w;
        precise float _327 = _248 * cbObjMatrix._m0[_309].w;
        precise float _328 = _281 + _316;
        precise float _329 = _282 + _317;
        precise float _330 = _283 + _318;
        precise float _331 = _284 + _319;
        precise float _332 = _285 + _320;
        precise float _333 = _286 + _321;
        precise float _334 = _287 + _322;
        precise float _335 = _288 + _323;
        precise float _336 = _289 + _324;
        precise float _337 = _290 + _325;
        precise float _338 = _291 + _326;
        precise float _339 = _292 + _327;
        uint _342 = (_258 + uint(float(BLENDINDICES.z))) * 3u;
        uint _349 = _342 + 1u;
        uint _356 = _342 + 2u;
        precise float _363 = _249 * cbObjMatrix._m0[_342].x;
        precise float _364 = _249 * cbObjMatrix._m0[_349].x;
        precise float _365 = _249 * cbObjMatrix._m0[_356].x;
        precise float _366 = _249 * cbObjMatrix._m0[_342].y;
        precise float _367 = _249 * cbObjMatrix._m0[_349].y;
        precise float _368 = _249 * cbObjMatrix._m0[_356].y;
        precise float _369 = _249 * cbObjMatrix._m0[_342].z;
        precise float _370 = _249 * cbObjMatrix._m0[_349].z;
        precise float _371 = _249 * cbObjMatrix._m0[_356].z;
        precise float _372 = _249 * cbObjMatrix._m0[_342].w;
        precise float _373 = _249 * cbObjMatrix._m0[_349].w;
        precise float _374 = _249 * cbObjMatrix._m0[_356].w;
        precise float _375 = _328 + _363;
        precise float _376 = _329 + _364;
        precise float _377 = _330 + _365;
        precise float _378 = _331 + _366;
        precise float _379 = _332 + _367;
        precise float _380 = _333 + _368;
        precise float _381 = _334 + _369;
        precise float _382 = _335 + _370;
        precise float _383 = _336 + _371;
        precise float _384 = _337 + _372;
        precise float _385 = _338 + _373;
        precise float _386 = _339 + _374;
        uint _389 = (_258 + uint(float(BLENDINDICES.w))) * 3u;
        uint _396 = _389 + 1u;
        uint _403 = _389 + 2u;
        precise float _410 = _250 * cbObjMatrix._m0[_389].x;
        precise float _411 = _250 * cbObjMatrix._m0[_396].x;
        precise float _412 = _250 * cbObjMatrix._m0[_403].x;
        precise float _413 = _250 * cbObjMatrix._m0[_389].y;
        precise float _414 = _250 * cbObjMatrix._m0[_396].y;
        precise float _415 = _250 * cbObjMatrix._m0[_403].y;
        precise float _416 = _250 * cbObjMatrix._m0[_389].z;
        precise float _417 = _250 * cbObjMatrix._m0[_396].z;
        precise float _418 = _250 * cbObjMatrix._m0[_403].z;
        precise float _419 = _250 * cbObjMatrix._m0[_389].w;
        precise float _420 = _250 * cbObjMatrix._m0[_396].w;
        precise float _421 = _250 * cbObjMatrix._m0[_403].w;
        precise float _422 = _375 + _410;
        precise float _423 = _376 + _411;
        precise float _424 = _377 + _412;
        precise float _425 = _378 + _413;
        precise float _426 = _379 + _414;
        precise float _427 = _380 + _415;
        precise float _428 = _381 + _416;
        precise float _429 = _382 + _417;
        precise float _430 = _383 + _418;
        precise float _431 = _384 + _419;
        precise float _432 = _385 + _420;
        precise float _433 = _386 + _421;
        _452 = _422;
        _453 = _425;
        _454 = _428;
        _455 = _431;
        _456 = _423;
        _457 = _426;
        _458 = _429;
        _459 = _432;
        _460 = _424;
        _461 = _427;
        _462 = _430;
        _463 = _433;
    }
    else
    {
        _452 = cbvModelParam._m0[0u].x;
        _453 = cbvModelParam._m0[0u].y;
        _454 = cbvModelParam._m0[0u].z;
        _455 = cbvModelParam._m0[0u].w;
        _456 = cbvModelParam._m0[1u].x;
        _457 = cbvModelParam._m0[1u].y;
        _458 = cbvModelParam._m0[1u].z;
        _459 = cbvModelParam._m0[1u].w;
        _460 = cbvModelParam._m0[2u].x;
        _461 = cbvModelParam._m0[2u].y;
        _462 = cbvModelParam._m0[2u].z;
        _463 = cbvModelParam._m0[2u].w;
    }
    precise float _464 = POSITION.x * _452;
    precise float _465 = POSITION.y * _453;
    precise float _466 = _465 + _464;
    precise float _467 = POSITION.z * _454;
    precise float _468 = _467 + _466;
    precise float _469 = 1.0 * _455;
    precise float _470 = _469 + _468;
    precise float _471 = POSITION.x * _456;
    precise float _472 = POSITION.y * _457;
    precise float _473 = _472 + _471;
    precise float _474 = POSITION.z * _458;
    precise float _475 = _474 + _473;
    precise float _476 = 1.0 * _459;
    precise float _477 = _476 + _475;
    precise float _478 = POSITION.x * _460;
    precise float _479 = POSITION.y * _461;
    precise float _480 = _479 + _478;
    precise float _481 = POSITION.z * _462;
    precise float _482 = _481 + _480;
    precise float _483 = 1.0 * _463;
    precise float _484 = _483 + _482;
    uint _498 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _82;
    uvec4 _500 = texelFetch(g_InstanceIndexBuffer, int(_498));
    uint _501 = _500.x;
    precise float _517 = _470 - cbSceneParam._m0[3u].x;
    precise float _518 = _477 - cbSceneParam._m0[3u].y;
    precise float _519 = _484 - cbSceneParam._m0[3u].z;
    precise float _546 = _517 * cbSceneParam._m0[24u].x;
    precise float _547 = _518 * cbSceneParam._m0[24u].y;
    precise float _548 = _547 + _546;
    precise float _549 = _519 * cbSceneParam._m0[24u].z;
    precise float _550 = _549 + _548;
    precise float _551 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _552 = _551 + _550;
    precise float _553 = _517 * cbSceneParam._m0[25u].x;
    precise float _554 = _518 * cbSceneParam._m0[25u].y;
    precise float _555 = _554 + _553;
    precise float _556 = _519 * cbSceneParam._m0[25u].z;
    precise float _557 = _556 + _555;
    precise float _558 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _559 = _558 + _557;
    precise float _560 = _517 * cbSceneParam._m0[26u].x;
    precise float _561 = _518 * cbSceneParam._m0[26u].y;
    precise float _562 = _561 + _560;
    precise float _563 = _519 * cbSceneParam._m0[26u].z;
    precise float _564 = _563 + _562;
    precise float _565 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _566 = _565 + _564;
    precise float _567 = _517 * cbSceneParam._m0[27u].x;
    precise float _568 = _518 * cbSceneParam._m0[27u].y;
    precise float _569 = _568 + _567;
    precise float _570 = _519 * cbSceneParam._m0[27u].z;
    precise float _571 = _570 + _569;
    precise float _572 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _573 = _572 + _571;
    gl_Position.x = _552;
    gl_Position.y = _559;
    gl_Position.z = _566;
    gl_Position.w = _573;
    POSITION_1.x = _552;
    POSITION_1.y = _559;
    POSITION_1.z = _566;
    POSITION_1.w = _573;
    NORMAL_1.x = fma(_203, _454, fma(_202, _453, _452 * _200));
    NORMAL_1.y = fma(_203, _458, fma(_202, _457, _456 * _200));
    NORMAL_1.z = fma(_203, _462, fma(_202, _461, _460 * _200));
    NORMAL_1.w = float(_501);
    TANGENT_1.x = fma(_212, _454, fma(_211, _453, _452 * _210));
    TANGENT_1.y = fma(_212, _458, fma(_211, _457, _456 * _210));
    TANGENT_1.z = fma(_212, _462, fma(_211, _461, _460 * _210));
    TANGENT_1.w = (float(BINORMAL) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = COLOR.x;
    TEXCOORD_1.y = COLOR.y;
    TEXCOORD_1.z = COLOR.z;
    TEXCOORD_1.w = COLOR.w;
    TEXCOORD_4.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_4.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_4.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[2u].x) + cbTexScroll._m0[2u].z;
    TEXCOORD_4.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[2u].y) + cbTexScroll._m0[2u].w;
    TEXCOORD_8 = COLOR_1.x;
    gl_ClipDistance[0u] = dot(vec4(_552, _559, _566, _573), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_552, _559, _566, _573), vec4(cbInstanceData._m0[(_501 * 13u) + 3u]));
}


