#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _844;
float _3240;
float _3241;
float _3242;
float _3243;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = (cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _227.x;
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _244.z;
    float _252 = (_244.x * 2.0) + (-1.0);
    float _254 = (_244.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3252 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))));
    float _264 = fma(_261, _193 * NORMAL.x, fma(_254, _200 * TANGENT.x, (_186 * _178) * _252));
    float _267 = fma(_261, _193 * NORMAL.y, fma(_254, _200 * TANGENT.y, (_186 * _179) * _252));
    float _270 = fma(_261, _193 * NORMAL.z, fma(_254, _200 * TANGENT.z, (_186 * _180) * _252));
    float _274 = inversesqrt(dot(vec3(_264, _267, _270), vec3(_264, _267, _270)));
    float _275 = _274 * _264;
    float _276 = _274 * _267;
    float _277 = _274 * _270;
    float _3263 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _278 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _3274 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _279 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _3285 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3296 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3307 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _298 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _339 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _349 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _339);
    float _350 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _339);
    float _351 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _339);
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _349 * _355;
    float _357 = _350 * _355;
    float _358 = _351 * _355;
    vec4 _363 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _365 = _363.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _523 = sqrt(((_349 * _349) + (_350 * _350)) + (_351 * _351));
        float _529 = (cbMatDynParam._m0[5u].x * _523) + cbMatDynParam._m0[5u].y;
        float _3318 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
        float _530 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
        float _534 = (cbMatDynParam._m0[5u].z * _523) + cbMatDynParam._m0[5u].w;
        float _3329 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0))) - _530)) + _530) < ((_365 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _377 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _378 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _398 = fma(_277, cbSceneParam._m0[5u].z, fma(_276, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _275));
    float _401 = fma(_277, cbSceneParam._m0[6u].z, fma(_276, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _275));
    float _404 = fma(_277, cbSceneParam._m0[7u].z, fma(_276, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _275));
    uint _417 = uint(roundEven(NORMAL.w)) * 13u;
    uint _419 = _417 + 9u;
    uint _420 = _419 + uint(cbMatDynParam._m0[0u].w);
    float _426 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0)))) * cbInstanceData._m0[_420].x;
    float _427 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0)))) * cbInstanceData._m0[_420].y;
    float _428 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0)))) * cbInstanceData._m0[_420].z;
    float _3340 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    float _3351 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
    float _3362 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    vec4 _440 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _377, cbSceneParam._m0[86u].y * _378));
    float _443 = _440.x * TEXCOORD_1.w;
    float _444 = dot(vec3(_275, _276, _277), vec3(_356, _357, _358));
    float _447 = _444 * 2.0;
    float _451 = (_447 * _275) - _356;
    float _452 = (_447 * _276) - _357;
    float _453 = (_447 * _277) - _358;
    float _457 = abs(dot(vec3(_356, _357, _358), vec3(_275, _276, _277)));
    float _3373 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _459 = sqrt(_279);
    float _472 = exp2((_459 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_459 * 3.0));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _843;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _568 = fma(_512, cbModelParam._m0[26u].z, fma(_508, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _504));
        float _572 = fma(_512, cbModelParam._m0[27u].z, fma(_508, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _504));
        float _576 = fma(_512, cbModelParam._m0[28u].z, fma(_508, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _504));
        float _601 = _504 + _275;
        float _602 = _508 + _276;
        float _603 = _512 + _277;
        float _613 = fma(_603, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601)) - _568;
        float _614 = fma(_603, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601)) - _572;
        float _615 = fma(_603, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601)) - _576;
        float _619 = inversesqrt(dot(vec3(_613, _614, _615), vec3(_613, _614, _615)));
        float _632 = ((_619 * _613) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_568 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _633 = ((_619 * _614) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_572 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _634 = ((_619 * _615) / cbModelParam._m0[34u].z) + ((((((_576 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        float _671 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_637.x + (-0.5));
        float _673 = _671 * (_637.y + (-0.5));
        float _674 = _671 * (_637.z + (-0.5));
        float _681 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_644.x + (-0.5));
        float _683 = _681 * (_644.y + (-0.5));
        float _684 = _681 * (_644.z + (-0.5));
        float _691 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_651.x + (-0.5));
        float _693 = _691 * (_651.y + (-0.5));
        float _694 = _691 * (_651.z + (-0.5));
        float _701 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_658.x + (-0.5));
        float _703 = _701 * (_658.y + (-0.5));
        float _704 = _701 * (_658.z + (-0.5));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = _672 * 0.5;
        float _709 = _682 * 0.5;
        float _710 = _692 * 0.5;
        float _711 = dot(vec3(_708, _709, _710), vec3(_708, _709, _710));
        float _716 = (_711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_711);
        float _725 = (dot(vec3(_275, _276, _277), vec3(_716 * _708, _716 * _709, _716 * _710)) + 1.0) * 0.5;
        float _3399 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _735 = sqrt(((_709 * _709) + (_708 * _708)) + (_710 * _710)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3410 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _737 = _736 * 2.0;
        float _741 = (1.0 - _736) / (_736 + 1.0);
        float _3421 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _751 = ((((1.0 - _742) * (_737 + 2.0)) * exp2(log2(isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * (_737 + 1.0))) + _742) * _705;
        float _752 = _673 * 0.5;
        float _753 = _683 * 0.5;
        float _754 = _693 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _768 = (dot(vec3(_275, _276, _277), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3432 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _777 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3443 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _779 = _778 * 2.0;
        float _783 = (1.0 - _778) / (_778 + 1.0);
        float _3454 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _793 = ((((1.0 - _784) * (_779 + 2.0)) * exp2(log2(isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * (_779 + 1.0))) + _784) * _706;
        float _794 = _674 * 0.5;
        float _795 = _684 * 0.5;
        float _796 = _694 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _810 = (dot(vec3(_275, _276, _277), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3465 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _819 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3476 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3487 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * (_821 + 1.0))) + _826) * _707;
        _843 = _674;
        _845 = _673;
        _846 = _672;
        _847 = _684;
        _848 = _683;
        _849 = _682;
        _850 = _694;
        _851 = _693;
        _852 = _692;
        _853 = _707;
        _854 = _706;
        _855 = _705;
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0)));
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0)));
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
    }
    else
    {
        _843 = _844;
        _845 = _844;
        _846 = _844;
        _847 = _844;
        _848 = _844;
        _849 = _844;
        _850 = _844;
        _851 = _844;
        _852 = _844;
        _853 = _844;
        _854 = _844;
        _855 = _844;
        _856 = 0.0;
        _857 = 0.0;
        _858 = 0.0;
    }
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _887 = fma(_512, cbModelParam._m0[30u].z, fma(_508, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _504));
        float _891 = fma(_512, cbModelParam._m0[31u].z, fma(_508, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _504));
        float _895 = fma(_512, cbModelParam._m0[32u].z, fma(_508, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _504));
        float _918 = _504 + _275;
        float _919 = _508 + _276;
        float _920 = _512 + _277;
        float _930 = fma(_920, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918)) - _887;
        float _931 = fma(_920, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918)) - _891;
        float _932 = fma(_920, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918)) - _895;
        float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
        float _949 = ((_936 * _930) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_887 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_936 * _931) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_891 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_936 * _932) / cbModelParam._m0[35u].z) + ((((((_895 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        float _986 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_953.x + (-0.5));
        float _988 = _986 * (_953.y + (-0.5));
        float _989 = _986 * (_953.z + (-0.5));
        float _996 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_960.x + (-0.5));
        float _998 = _996 * (_960.y + (-0.5));
        float _999 = _996 * (_960.z + (-0.5));
        float _1006 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_967.x + (-0.5));
        float _1008 = _1006 * (_967.y + (-0.5));
        float _1009 = _1006 * (_967.z + (-0.5));
        float _1016 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_974.x + (-0.5));
        float _1018 = _1016 * (_974.y + (-0.5));
        float _1019 = _1016 * (_974.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_275, _276, _277), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3550 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_1050 + 1.0))) + _1055) * _1020;
        float _1065 = _988 * 0.5;
        float _1066 = _998 * 0.5;
        float _1067 = _1008 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_275, _276, _277), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3561 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3572 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3583 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * (_1092 + 1.0))) + _1097) * _1021;
        float _1107 = _989 * 0.5;
        float _1108 = _999 * 0.5;
        float _1109 = _1009 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_275, _276, _277), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3616 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_1134 + 1.0))) + _1139) * _1022;
        _1156 = _989;
        _1157 = _988;
        _1158 = _987;
        _1159 = _999;
        _1160 = _998;
        _1161 = _997;
        _1162 = _1009;
        _1163 = _1008;
        _1164 = _1007;
        _1165 = _1022;
        _1166 = _1021;
        _1167 = _1020;
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _844;
        _1157 = _844;
        _1158 = _844;
        _1159 = _844;
        _1160 = _844;
        _1161 = _844;
        _1162 = _844;
        _1163 = _844;
        _1164 = _844;
        _1165 = _844;
        _1166 = _844;
        _1167 = _844;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _856)) + _856;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _857)) + _857;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _858)) + _858;
    float _1203 = fma(_1182, cbSceneParam._m0[89u].z, fma(_1181, cbSceneParam._m0[89u].y, _1180 * cbSceneParam._m0[89u].x));
    float _1206 = fma(_1182, cbSceneParam._m0[90u].z, fma(_1181, cbSceneParam._m0[90u].y, _1180 * cbSceneParam._m0[90u].x));
    float _1209 = fma(_1182, cbSceneParam._m0[91u].z, fma(_1181, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1180));
    float _1224 = _451 * 0.5;
    float _1225 = _452 * 0.5;
    float _1226 = _453 * 0.5;
    float _1227 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1230 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1233 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1267;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1240 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_843, _847, _850, _853));
        float _1244 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_845, _848, _851, _854));
        float _1248 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_846, _849, _852, _855));
        float _1255 = dot(vec4(cbModelParam._m0[39u]), vec4(_1224, _1225, _1226, 1.0));
        _1267 = dot(vec3(isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1255) ? 0.0 : (isnan(0.0) ? _1255 : max(0.0, _1255))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1267 = 1.0;
    }
    float _1278;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1269 = dot(vec4(cbModelParam._m0[40u]), vec4(_1224, _1225, _1226, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1282 = (_1278 * cbModelParam._m0[1u].x) + (_1267 * (1.0 - cbModelParam._m0[1u].x));
    float _1292 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _279);
    float _1293 = isnan(_1292) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1292 : min(cbModelParam._m0[25u].z, _1292));
    float _1375;
    float _1377;
    float _1379;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1342 = fma(_512, cbModelParam._m0[13u].z, fma(_508, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504)) + cbModelParam._m0[13u].w;
        float _1346 = fma(_512, cbModelParam._m0[14u].z, fma(_508, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504)) + cbModelParam._m0[14u].w;
        float _1350 = fma(_512, cbModelParam._m0[15u].z, fma(_508, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504)) + cbModelParam._m0[15u].w;
        float _1353 = fma(_453, cbModelParam._m0[13u].z, fma(_452, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _451));
        float _1356 = fma(_453, cbModelParam._m0[14u].z, fma(_452, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _451));
        float _1359 = fma(_453, cbModelParam._m0[15u].z, fma(_452, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _451));
        float _1387;
        if (_1353 > 0.0)
        {
            _1387 = abs((1.0 - _1342) / _1353);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1342 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1387 = frontier_phi_17_15_ladder;
        }
        float _1614;
        if (_1356 > 0.0)
        {
            _1614 = abs((1.0 - _1346) / _1356);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1346 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1614 = frontier_phi_26_22_ladder;
        }
        float _1860;
        if (_1359 > 0.0)
        {
            _1860 = abs((1.0 - _1350) / _1359);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1350 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1860 = frontier_phi_38_33_ladder;
        }
        float _1862 = isnan(_1614) ? _1387 : (isnan(_1387) ? _1614 : min(_1387, _1614));
        float _1863 = isnan(_1860) ? _1862 : (isnan(_1862) ? _1860 : min(_1862, _1860));
        float _1867 = (_1863 * _1353) + _1342;
        float _1868 = (_1863 * _1356) + _1346;
        float _1869 = (_1863 * _1359) + _1350;
        float _1870 = _1863 * 9.9999997473787516355514526367188e-05;
        float _1872 = (-1.0) - _1870;
        float _1874 = _1870 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1869 > _1874) || ((_1869 < _1872) || ((_1868 > _1874) || ((_1868 < _1872) || ((_1867 < _1872) || (_1867 > _1874))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1993 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1869, cbModelParam._m0[9u].z, fma(_1868, cbModelParam._m0[9u].y, _1867 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1869, cbModelParam._m0[10u].z, fma(_1868, cbModelParam._m0[10u].y, _1867 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1869, cbModelParam._m0[11u].z, fma(_1868, cbModelParam._m0[11u].y, _1867 * cbModelParam._m0[11u].x))), _1293);
            frontier_phi_16_38_ladder = _1993.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1993.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1993.x * cbModelParam._m0[1u].y;
        }
        _1375 = frontier_phi_16_38_ladder_2;
        _1377 = frontier_phi_16_38_ladder_1;
        _1379 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_451, _452, _453), _1293);
        _1375 = _1363.x * cbModelParam._m0[1u].y;
        _1377 = _1363.y * cbModelParam._m0[1u].y;
        _1379 = _1363.z * cbModelParam._m0[1u].y;
    }
    float _1383 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _279);
    float _1384 = isnan(_1383) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1383 : min(cbModelParam._m0[25u].w, _1383));
    float _1477;
    float _1479;
    float _1481;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1441 = fma(_512, cbModelParam._m0[21u].z, fma(_508, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504)) + cbModelParam._m0[21u].w;
        float _1445 = fma(_512, cbModelParam._m0[22u].z, fma(_508, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504)) + cbModelParam._m0[22u].w;
        float _1449 = fma(_512, cbModelParam._m0[23u].z, fma(_508, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504)) + cbModelParam._m0[23u].w;
        float _1452 = fma(_453, cbModelParam._m0[21u].z, fma(_452, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _451));
        float _1455 = fma(_453, cbModelParam._m0[22u].z, fma(_452, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _451));
        float _1458 = fma(_453, cbModelParam._m0[23u].z, fma(_452, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _451));
        float _1619;
        if (_1452 > 0.0)
        {
            _1619 = abs((1.0 - _1441) / _1452);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1441 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1619 = frontier_phi_28_24_ladder;
        }
        float _1887;
        if (_1455 > 0.0)
        {
            _1887 = abs((1.0 - _1445) / _1455);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1445 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1887 = frontier_phi_40_35_ladder;
        }
        float _2092;
        if (_1458 > 0.0)
        {
            _2092 = abs((1.0 - _1449) / _1458);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1449 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2092 = frontier_phi_49_46_ladder;
        }
        float _2094 = isnan(_1887) ? _1619 : (isnan(_1619) ? _1887 : min(_1619, _1887));
        float _2095 = isnan(_2092) ? _2094 : (isnan(_2094) ? _2092 : min(_2094, _2092));
        float _2099 = (_2095 * _1452) + _1441;
        float _2100 = (_2095 * _1455) + _1445;
        float _2101 = (_2095 * _1458) + _1449;
        float _2102 = _2095 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2102;
        float _2105 = _2102 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2101 > _2105) || ((_2101 < _2103) || ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 < _2103) || (_2099 > _2105))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2302 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2101, cbModelParam._m0[17u].z, fma(_2100, cbModelParam._m0[17u].y, _2099 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2101, cbModelParam._m0[18u].z, fma(_2100, cbModelParam._m0[18u].y, _2099 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2101, cbModelParam._m0[19u].z, fma(_2100, cbModelParam._m0[19u].y, _2099 * cbModelParam._m0[19u].x))), _1384);
            frontier_phi_25_49_ladder = _2302.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2302.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2302.x * cbModelParam._m0[1u].z;
        }
        _1477 = frontier_phi_25_49_ladder_2;
        _1479 = frontier_phi_25_49_ladder_1;
        _1481 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1461 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_451, _452, _453), _1384);
        _1477 = _1461.x * cbModelParam._m0[1u].z;
        _1479 = _1461.y * cbModelParam._m0[1u].z;
        _1481 = _1461.z * cbModelParam._m0[1u].z;
    }
    float _1493 = ((((1.0 - _472) * ((_459 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_472 * _459)) * _443;
    float _1494 = _1493 * ((cbModelParam._m0[1u].w * (_1477 - _1375)) + _1375);
    float _1495 = _1493 * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1496 = _1493 * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1499 = fma(_1496, cbSceneParam._m0[89u].z, fma(_1495, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1502 = fma(_1496, cbSceneParam._m0[90u].z, fma(_1495, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1505 = fma(_1496, cbSceneParam._m0[91u].z, fma(_1495, cbSceneParam._m0[91u].y, _1494 * cbSceneParam._m0[91u].x));
    vec4 _1513 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_377, _378));
    float _1515 = _1513.w;
    float _1527 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1515);
    float _1528 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1515);
    float _1529 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1515);
    uvec4 _1533 = floatBitsToUint(cbInstanceData._m0[_417 + 5u]);
    uint _1535 = _1533.x * 14u;
    uint _1536 = _1535 + 13u;
    float _1543 = _443 + (-1.0);
    float _1548 = (cbLight._m0[_1536].x * _1543) + 1.0;
    float _1549 = (cbLight._m0[_1536].y * _1543) + 1.0;
    float _1550 = (cbLight._m0[_1536].z * _1543) + 1.0;
    float _1551 = (cbLight._m0[_1536].w * _1543) + 1.0;
    uint _1552 = _1535 + 5u;
    float _1558 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
    uint _1562 = _1535 + 4u;
    float _1572 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
    uint _1576 = _1535 | 1u;
    float _1587 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_275, _276, _277));
    float _1590 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_275, _276, _277));
    float _3752 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
    float _3763 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
    float _1595 = (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * 0.3183098733425140380859375;
    float _1597 = (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * 0.3183098733425140380859375;
    float _1604 = ((cbLight._m0[_1552].x * _1558) * _1597) + (((cbLight._m0[_1562].x * _1527) * _1572) * _1595);
    float _1605 = ((_1558 * cbLight._m0[_1552].y) * _1597) + (((cbLight._m0[_1562].y * _1528) * _1572) * _1595);
    float _1606 = ((_1558 * cbLight._m0[_1552].z) * _1597) + (((cbLight._m0[_1562].z * _1529) * _1572) * _1595);
    uvec4 _1611 = floatBitsToUint(cbLight._m0[_1535 + 12u]);
    bool _1613 = _1611.x == 0u;
    float _1624;
    float _1626;
    float _1628;
    if (_1613)
    {
        _1624 = _1604;
        _1626 = _1605;
        _1628 = _1606;
    }
    else
    {
        uint _1632 = _1535 + 6u;
        float _1648 = (dot(vec3(cbLight._m0[_1535 + 2u].xyz), vec3(_275, _276, _277)) * 0.5) + 0.5;
        float _1649 = _1648 * _1648;
        float _3774 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1651 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _1624 = (((cbLight._m0[_1632].x * 0.3183098733425140380859375) * _1650) * _1651) + _1604;
        _1626 = (((cbLight._m0[_1632].y * 0.3183098733425140380859375) * _1650) * _1651) + _1605;
        _1628 = (((cbLight._m0[_1632].z * 0.3183098733425140380859375) * _1650) * _1651) + _1606;
    }
    bool _1631 = _1611.y == 0u;
    float _1669;
    float _1671;
    float _1673;
    if (_1631)
    {
        _1669 = _1624;
        _1671 = _1626;
        _1673 = _1628;
    }
    else
    {
        uint _1831 = _1535 + 7u;
        float _1847 = (dot(vec3(cbLight._m0[_1535 + 3u].xyz), vec3(_275, _276, _277)) * 0.5) + 0.5;
        float _1848 = _1847 * _1847;
        float _3790 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1850 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1669 = (((cbLight._m0[_1831].x * 0.3183098733425140380859375) * _1849) * _1850) + _1624;
        _1671 = (((cbLight._m0[_1831].y * 0.3183098733425140380859375) * _1849) * _1850) + _1626;
        _1673 = (((cbLight._m0[_1831].z * 0.3183098733425140380859375) * _1849) * _1850) + _1628;
    }
    uint _1676 = _1535 + 8u;
    float _1689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1535].w)) * _279) * 0.949999988079071044921875);
    float _1690 = _1689 * _1689;
    float _1691 = cbLight._m0[_1535].x + _356;
    float _1692 = cbLight._m0[_1535].y + _357;
    float _1693 = cbLight._m0[_1535].z + _358;
    float _1697 = inversesqrt(dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693)));
    float _1698 = _1697 * _1691;
    float _1699 = _1697 * _1692;
    float _1700 = _1697 * _1693;
    float _1701 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1535].xyz));
    float _3806 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1704 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _1705 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _1706 = dot(vec3(_275, _276, _277), vec3(_1698, _1699, _1700));
    float _3828 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1709 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _1710 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_1698, _1699, _1700));
    float _3839 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1714 = _1690 * _1690;
    float _1718 = ((_1709 * _1709) * (_1714 + (-1.0))) + 1.0;
    float _1729 = (exp2(log2(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1730 = 1.0 - _1690;
    float _1741 = (0.5 / (((_1705 * ((_1704 * _1730) + _1690)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1730) + _1690) * _1704))) * _1704;
    float _3850 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1743 = (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1714 / ((_1718 * _1718) * 3.141590118408203125));
    uint _1757 = _1535 + 9u;
    float _1768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1576].w)) * _279) * 0.949999988079071044921875);
    float _1769 = _1768 * _1768;
    float _1770 = cbLight._m0[_1576].x + _356;
    float _1771 = cbLight._m0[_1576].y + _357;
    float _1772 = cbLight._m0[_1576].z + _358;
    float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
    float _1777 = _1776 * _1770;
    float _1778 = _1776 * _1771;
    float _1779 = _1776 * _1772;
    float _1780 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1576].xyz));
    float _3861 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _1784 = dot(vec3(_275, _276, _277), vec3(_1777, _1778, _1779));
    float _3872 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _1788 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_1777, _1778, _1779));
    float _3883 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1792 = _1769 * _1769;
    float _1796 = ((_1787 * _1787) * (_1792 + (-1.0))) + 1.0;
    float _1805 = (exp2(log2(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1806 = 1.0 - _1769;
    float _1816 = (0.5 / (((_1705 * ((_1783 * _1806) + _1769)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1806) + _1769) * _1783))) * _1783;
    float _3894 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1818 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1792 / ((_1796 * _1796) * 3.141590118408203125));
    float _1828 = (((_1805 * cbLight._m0[_1757].x) * _1818) * _1558) + ((((cbLight._m0[_1676].x * _1527) * _1729) * _1743) * _1572);
    float _1829 = (((_1805 * cbLight._m0[_1757].y) * _1818) * _1558) + ((((cbLight._m0[_1676].y * _1528) * _1729) * _1743) * _1572);
    float _1830 = (((_1805 * cbLight._m0[_1757].z) * _1818) * _1558) + ((((cbLight._m0[_1676].z * _1529) * _1729) * _1743) * _1572);
    float _1892;
    float _1894;
    float _1896;
    if (_1613)
    {
        _1892 = _1828;
        _1894 = _1829;
        _1896 = _1830;
    }
    else
    {
        uint _1898 = _1535 + 2u;
        uint _1902 = _1535 + 10u;
        float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _279) * 0.949999988079071044921875);
        float _1917 = _1916 * _1916;
        float _1918 = cbLight._m0[_1898].x + _356;
        float _1919 = cbLight._m0[_1898].y + _357;
        float _1920 = cbLight._m0[_1898].z + _358;
        float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
        float _1925 = _1924 * _1918;
        float _1926 = _1924 * _1919;
        float _1927 = _1924 * _1920;
        float _1928 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1898].xyz));
        float _3905 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1931 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1932 = dot(vec3(_275, _276, _277), vec3(_1925, _1926, _1927));
        float _3916 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1935 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1936 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_1925, _1926, _1927));
        float _3927 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1940 = _1917 * _1917;
        float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
        float _1953 = (exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1954 = 1.0 - _1917;
        float _1964 = (0.5 / (((_1705 * ((_1931 * _1954) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1954) + _1917) * _1931))) * _1931;
        float _3938 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1966 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
        float _1967 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _1892 = (((_1953 * cbLight._m0[_1902].x) * _1966) * _1967) + _1828;
        _1894 = (((_1953 * cbLight._m0[_1902].y) * _1966) * _1967) + _1829;
        _1896 = (((_1953 * cbLight._m0[_1902].z) * _1966) * _1967) + _1830;
    }
    float _2002;
    float _2004;
    float _2006;
    if (_1631)
    {
        _2002 = _1892;
        _2004 = _1894;
        _2006 = _1896;
    }
    else
    {
        uint _2013 = _1535 + 3u;
        uint _2017 = _1535 + 11u;
        float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _279) * 0.949999988079071044921875);
        float _2032 = _2031 * _2031;
        float _2033 = cbLight._m0[_2013].x + _356;
        float _2034 = cbLight._m0[_2013].y + _357;
        float _2035 = cbLight._m0[_2013].z + _358;
        float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
        float _2040 = _2039 * _2033;
        float _2041 = _2039 * _2034;
        float _2042 = _2039 * _2035;
        float _2043 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_2013].xyz));
        float _3954 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _2047 = dot(vec3(_275, _276, _277), vec3(_2040, _2041, _2042));
        float _3965 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _2051 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2040, _2041, _2042));
        float _3976 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2055 = _2032 * _2032;
        float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
        float _2068 = (exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2069 = 1.0 - _2032;
        float _2079 = (0.5 / (((_1705 * ((_2046 * _2069) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _2069) + _2032) * _2046))) * _2046;
        float _3987 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2081 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
        float _2082 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _2002 = (((_2068 * cbLight._m0[_2017].x) * _2081) * _2082) + _1892;
        _2004 = (((_2068 * cbLight._m0[_2017].y) * _2081) * _2082) + _1894;
        _2006 = (((_2068 * cbLight._m0[_2017].z) * _2081) * _2082) + _1896;
    }
    float _2217;
    float _2219;
    float _2221;
    float _2223;
    float _2225;
    float _2227;
    if (_1533.y == 0u)
    {
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2157;
        float _2159 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2157;
        float _2160 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2157;
        uvec4 _2172 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2173 = _2172.x;
        uint _2184 = uint((float(_2172.y) * floor(float(uint(cbSceneParam._m0[85u].y * _378) / _2173))) + floor(float(uint(cbSceneParam._m0[85u].x * _377) / _2173)));
        float _2194 = (log2(_2160 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2195 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        uint _2198 = uint(isnan(14.0) ? _2195 : (isnan(_2195) ? 14.0 : min(_2195, 14.0)));
        uvec4 _2203 = texelFetch(g_lightClusterGridBuffer, int(((_2198 << 2u) + (_2184 << 6u)) >> 2u));
        uint _2204 = _2203.x;
        uint _2205 = _2172.z;
        float _2307;
        float _2309;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        if (((((1u << ((_2205 >> 4u) & 15u)) + 4294967295u) & _2204) == 0u) || ((_2205 & 240u) == 0u))
        {
            _2307 = 0.0;
            _2309 = 0.0;
            _2311 = 0.0;
            _2313 = 0.0;
            _2315 = 0.0;
            _2317 = 0.0;
        }
        else
        {
            float _2308;
            float _2310;
            float _2312;
            float _2314;
            float _2316;
            float _2318;
            float _2460 = 0.0;
            float _2461 = 0.0;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            float _2465 = 0.0;
            uint _2466 = 0u;
            uint _2475;
            bool _2476;
            for (;;)
            {
                _2475 = texelFetch(g_lightClassification, int((((_2198 << 5u) + (_2184 << 9u)) + (_2466 << 2u)) >> 2u)).x;
                _2476 = _2475 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2476)
                {
                    frontier_phi_66_pred = _2460;
                    frontier_phi_66_pred_1 = _2465;
                    frontier_phi_66_pred_2 = _2464;
                    frontier_phi_66_pred_3 = _2463;
                    frontier_phi_66_pred_4 = _2462;
                    frontier_phi_66_pred_5 = _2461;
                }
                else
                {
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    uint _2611;
                    _2605 = _2460;
                    _2606 = _2461;
                    _2607 = _2462;
                    _2608 = _2463;
                    _2609 = _2464;
                    _2610 = _2465;
                    _2611 = _2475;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    for (;;)
                    {
                        uint _2615 = uint(findLSB(_2611)) + (_2466 << 5u);
                        uint _2612 = (_2611 + 4294967295u) & _2611;
                        uint _2617 = _2615 * 48u;
                        vec4 _2631 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2617)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 3u)).x));
                        uint _2637 = (_2615 * 48u) + 4u;
                        vec4 _2650 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2637)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 3u)).x));
                        uint _2656 = (_2615 * 48u) + 8u;
                        vec3 _2667 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2656)).x, texelFetch(g_PointLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2656 + 2u)).x));
                        float _2671 = _2631.x - _2158;
                        float _2672 = _2631.y - _2159;
                        float _2673 = _2631.z - _2160;
                        float _2674 = dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673));
                        float _2677 = inversesqrt(_2674);
                        float _2678 = _2677 * _2671;
                        float _2679 = _2677 * _2672;
                        float _2680 = _2677 * _2673;
                        float _2681 = dot(vec3(_398, _401, _404), vec3(_2678, _2679, _2680));
                        float _2686 = 1.0 - (_2674 * _2631.w);
                        float _4013 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                        float _2687 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2688 = sqrt(_2674) * _2650.w;
                        float _2691 = 1.39999997615814208984375 / (_2688 + 1.39999997615814208984375);
                        float _2692 = _2691 * _2691;
                        float _2695 = ((1.0 - _2692) * _2681) + _2692;
                        float _2698 = _2688 * _2688;
                        float _2702 = ((isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0))) * _2687) / ((_2698 * 0.699999988079071044921875) + 1.0);
                        float _2706 = (-0.0) - _2158;
                        float _2707 = (-0.0) - _2159;
                        float _2708 = (-0.0) - _2160;
                        float _2712 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
                        float _2713 = _2712 * _2706;
                        float _2714 = _2712 * _2707;
                        float _2715 = _2712 * _2708;
                        float _2723 = exp2(log2(1.0 / ((_2698 * 3.5) + 5.0)) * 0.25);
                        float _2724 = 1.0 - _459;
                        float _2731 = sqrt(1.0 - ((1.0 - (_2724 * _2724)) * (1.0 - (_2723 * _2723))));
                        float _2732 = _2731 * _2731;
                        float _2733 = _2732 * _2732;
                        float _2734 = _2713 + _2678;
                        float _2735 = _2714 + _2679;
                        float _2736 = _2715 + _2680;
                        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
                        float _2744 = dot(vec3(_398, _401, _404), vec3(_2713, _2714, _2715));
                        float _4029 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _2747 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                        float _2748 = dot(vec3(_398, _401, _404), vec3(_2740 * _2734, _2740 * _2735, _2740 * _2736));
                        float _4040 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2751 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                        float _2755 = ((_2751 * _2751) * (_2733 + (-1.0))) + 1.0;
                        float _2756 = _2691 * _2732;
                        float _2757 = _2756 * _2756;
                        float _2760 = ((1.0 - _2757) * _2681) + _2757;
                        float _4051 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2761 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                        float _2762 = 1.0 - _2732;
                        float _2772 = (0.5 / (((_2761 * ((_2747 * _2762) + _2732)) + 9.9999999392252902907785028219223e-09) + (((_2761 * _2762) + _2732) * _2747))) * _2761;
                        float _4062 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2783 = (((_2733 * 3.1415927410125732421875) * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) / ((_2755 * _2755) * ((_2698 * 2.1991131305694580078125) + 3.141590118408203125))) * _2687;
                        _2535 = (_2702 * _2650.x) + _2608;
                        _2536 = (_2702 * _2650.y) + _2609;
                        _2537 = (_2702 * _2650.z) + _2610;
                        _2532 = (_2783 * _2667.x) + _2605;
                        _2533 = (_2783 * _2667.y) + _2606;
                        _2534 = (_2783 * _2667.z) + _2607;
                        if (_2612 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2605 = _2532;
                            _2606 = _2533;
                            _2607 = _2534;
                            _2608 = _2535;
                            _2609 = _2536;
                            _2610 = _2537;
                            _2611 = _2612;
                        }
                    }
                    frontier_phi_66_pred = _2532;
                    frontier_phi_66_pred_1 = _2537;
                    frontier_phi_66_pred_2 = _2536;
                    frontier_phi_66_pred_3 = _2535;
                    frontier_phi_66_pred_4 = _2534;
                    frontier_phi_66_pred_5 = _2533;
                }
                _2308 = frontier_phi_66_pred;
                _2318 = frontier_phi_66_pred_1;
                _2316 = frontier_phi_66_pred_2;
                _2314 = frontier_phi_66_pred_3;
                _2312 = frontier_phi_66_pred_4;
                _2310 = frontier_phi_66_pred_5;
                uint _2467 = _2466 + 1u;
                if (_2467 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2460 = _2308;
                    _2461 = _2310;
                    _2462 = _2312;
                    _2463 = _2314;
                    _2464 = _2316;
                    _2465 = _2318;
                    _2466 = _2467;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2307 = _2308;
            _2309 = _2310;
            _2311 = _2312;
            _2313 = _2314;
            _2315 = _2316;
            _2317 = _2318;
        }
        uvec4 _2321 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2322 = _2321.z;
        uint _2324 = (_2322 >> 8u) & 15u;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        if (((4294967295u << _2324) & _2204) == 0u)
        {
            _2428 = _2307;
            _2430 = _2309;
            _2432 = _2311;
            _2434 = _2313;
            _2436 = _2315;
            _2438 = _2317;
        }
        else
        {
            float _2453 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
            float _2454 = _2453 * _2158;
            float _2455 = _2453 * _2159;
            float _2456 = _2453 * _2160;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2324 < ((_2322 >> 12u) & 15u))
            {
                float _2429;
                float _2431;
                float _2433;
                float _2435;
                float _2437;
                float _2439;
                float _2588 = _2307;
                float _2589 = _2309;
                float _2590 = _2311;
                float _2591 = _2313;
                float _2592 = _2315;
                float _2593 = _2317;
                uint _2594 = _2324;
                uint _2603;
                bool _2604;
                for (;;)
                {
                    _2603 = texelFetch(g_lightClassification, int((((_2198 << 5u) + (_2184 << 9u)) + (_2594 << 2u)) >> 2u)).x;
                    _2604 = _2603 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2604)
                    {
                        frontier_phi_77_pred = _2593;
                        frontier_phi_77_pred_1 = _2592;
                        frontier_phi_77_pred_2 = _2591;
                        frontier_phi_77_pred_3 = _2590;
                        frontier_phi_77_pred_4 = _2589;
                        frontier_phi_77_pred_5 = _2588;
                    }
                    else
                    {
                        float _2797;
                        float _2798;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _2810 = _2588;
                        float _2811 = _2589;
                        float _2812 = _2590;
                        float _2813 = _2591;
                        float _2814 = _2592;
                        float _2815 = _2593;
                        uint _2816 = _2603;
                        uint _2817;
                        vec4 _2842;
                        float _2843;
                        vec4 _2858;
                        vec3 _2870;
                        vec4 _2886;
                        vec4 _2902;
                        float _2949;
                        bool _2950;
                        for (;;)
                        {
                            uint _2827 = ((_2594 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2816));
                            _2817 = (_2816 + 4294967295u) & _2816;
                            uint _2829 = _2827 * 40u;
                            _2842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 3u)).x));
                            _2843 = _2842.w;
                            uint _2845 = (_2827 * 40u) + 4u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            uint _2860 = (_2827 * 40u) + 8u;
                            _2870 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x));
                            uint _2873 = (_2827 * 40u) + 16u;
                            _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            uint _2889 = (_2827 * 40u) + 20u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2905 = (_2827 * 40u) + 24u;
                            vec4 _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2924 = (_2827 * 40u) + 28u;
                            vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            _2949 = fma(_2160, _2937.z, fma(_2159, _2937.y, _2937.x * _2158)) + _2937.w;
                            _2950 = !((fma(_2160, _2918.z, fma(_2159, _2918.y, _2918.x * _2158)) + _2918.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2950)
                            {
                                float _2977 = _2842.x - _2158;
                                float _2978 = _2842.y - _2159;
                                float _2979 = _2842.z - _2160;
                                float _2980 = dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979));
                                float _2983 = inversesqrt(_2980);
                                float _2984 = _2983 * _2977;
                                float _2985 = _2983 * _2978;
                                float _2986 = _2983 * _2979;
                                float _2990 = 1.0 - (_2980 / (_2843 * _2843));
                                float _4073 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                                float _2991 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _2995 = sqrt(_2980) * _2858.w;
                                float _2997 = 1.39999997615814208984375 / (_2995 + 1.39999997615814208984375);
                                float _2998 = _2997 * _2997;
                                float _3001 = ((1.0 - _2998) * dot(vec3(_2984, _2985, _2986), vec3(_398, _401, _404))) + _2998;
                                float _3004 = _2995 * _2995;
                                float _3008 = (fma(_2160, _2886.z, fma(_2159, _2886.y, _2886.x * _2158)) + _2886.w) / _2949;
                                float _3009 = (fma(_2160, _2902.z, fma(_2159, _2902.y, _2902.x * _2158)) + _2902.w) / _2949;
                                float _3013 = 1.0 - dot(vec2(_3008, _3009), vec2(_3008, _3009));
                                float _4089 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3014 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3015 = _3014 * (((isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))) * _2991) / ((_3004 * 0.699999988079071044921875) + 1.0));
                                float _3027 = exp2(log2(1.0 / ((_3004 * 3.5) + 5.0)) * 0.25);
                                float _3028 = 1.0 - _459;
                                float _3035 = sqrt(1.0 - ((1.0 - (_3028 * _3028)) * (1.0 - (_3027 * _3027))));
                                float _3036 = _3035 * _3035;
                                float _3037 = _3036 * _3036;
                                float _3038 = _2984 - _2454;
                                float _3039 = _2985 - _2455;
                                float _3040 = _2986 - _2456;
                                float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
                                float _3048 = dot(vec3(_398, _401, _404), vec3((-0.0) - _2454, (-0.0) - _2455, (-0.0) - _2456));
                                float _4100 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3051 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3052 = dot(vec3(_398, _401, _404), vec3(_3044 * _3038, _3044 * _3039, _3044 * _3040));
                                float _4111 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3055 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3059 = ((_3055 * _3055) * (_3037 + (-1.0))) + 1.0;
                                float _3060 = _2997 * _3036;
                                float _3061 = _3060 * _3060;
                                float _3067 = ((1.0 - _3061) * dot(vec3(_398, _401, _404), vec3(_2984, _2985, _2986))) + _3061;
                                float _4122 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3068 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                                float _3069 = 1.0 - _3036;
                                float _3079 = (0.5 / (((_3068 * ((_3051 * _3069) + _3036)) + 9.9999999392252902907785028219223e-09) + (((_3068 * _3069) + _3036) * _3051))) * _3068;
                                float _4133 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3089 = (_3014 * _2991) * (((_3037 * 3.1415927410125732421875) * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) / ((_3059 * _3059) * ((_3004 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3015 * _2858.y;
                                frontier_phi_83_pred_1 = _3015 * _2858.x;
                                frontier_phi_83_pred_2 = _3089 * _2870.z;
                                frontier_phi_83_pred_3 = _3089 * _2870.y;
                                frontier_phi_83_pred_4 = _3089 * _2870.x;
                                frontier_phi_83_pred_5 = _3015 * _2858.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3097 = frontier_phi_83_pred;
                            _3096 = frontier_phi_83_pred_1;
                            _3095 = frontier_phi_83_pred_2;
                            _3094 = frontier_phi_83_pred_3;
                            _3093 = frontier_phi_83_pred_4;
                            _3098 = frontier_phi_83_pred_5;
                            _2800 = _3096 + _2813;
                            _2801 = _3097 + _2814;
                            _2802 = _3098 + _2815;
                            _2797 = _3093 + _2810;
                            _2798 = _3094 + _2811;
                            _2799 = _3095 + _2812;
                            if (_2817 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2817;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2802;
                        frontier_phi_77_pred_1 = _2801;
                        frontier_phi_77_pred_2 = _2800;
                        frontier_phi_77_pred_3 = _2799;
                        frontier_phi_77_pred_4 = _2798;
                        frontier_phi_77_pred_5 = _2797;
                    }
                    _2439 = frontier_phi_77_pred;
                    _2437 = frontier_phi_77_pred_1;
                    _2435 = frontier_phi_77_pred_2;
                    _2433 = frontier_phi_77_pred_3;
                    _2431 = frontier_phi_77_pred_4;
                    _2429 = frontier_phi_77_pred_5;
                    uint _2595 = _2594 + 1u;
                    if (_2595 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2588 = _2429;
                        _2589 = _2431;
                        _2590 = _2433;
                        _2591 = _2435;
                        _2592 = _2437;
                        _2593 = _2439;
                        _2594 = _2595;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2433;
                frontier_phi_58_59_ladder_1 = _2439;
                frontier_phi_58_59_ladder_2 = _2437;
                frontier_phi_58_59_ladder_3 = _2435;
                frontier_phi_58_59_ladder_4 = _2431;
                frontier_phi_58_59_ladder_5 = _2429;
            }
            else
            {
                frontier_phi_58_59_ladder = _2311;
                frontier_phi_58_59_ladder_1 = _2317;
                frontier_phi_58_59_ladder_2 = _2315;
                frontier_phi_58_59_ladder_3 = _2313;
                frontier_phi_58_59_ladder_4 = _2309;
                frontier_phi_58_59_ladder_5 = _2307;
            }
            _2428 = frontier_phi_58_59_ladder_5;
            _2430 = frontier_phi_58_59_ladder_4;
            _2432 = frontier_phi_58_59_ladder;
            _2434 = frontier_phi_58_59_ladder_3;
            _2436 = frontier_phi_58_59_ladder_2;
            _2438 = frontier_phi_58_59_ladder_1;
        }
        float _2443 = isnan(1.0) ? _443 : (isnan(_443) ? 1.0 : min(_443, 1.0));
        _2217 = (_2443 * _2434) + _1669;
        _2219 = (_2443 * _2436) + _1671;
        _2221 = (_2443 * _2438) + _1673;
        _2223 = ((_2428 * 0.039999999105930328369140625) * _2443) + _2002;
        _2225 = ((_2430 * 0.039999999105930328369140625) * _2443) + _2004;
        _2227 = ((_2432 * 0.039999999105930328369140625) * _2443) + _2006;
    }
    else
    {
        _2217 = _1669;
        _2219 = _1671;
        _2221 = _1673;
        _2223 = _2002;
        _2225 = _2004;
        _2227 = _2006;
    }
    float _4149 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _4160 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _4171 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _4182 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _2245 = ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2217 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _443))) + ((_2223 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _2246 = ((isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2219 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _443))) + ((_2225 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _2247 = ((isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2221 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _443))) + ((_2227 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _2252 = cbInstanceData._m0[_417 + 6u].w * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)));
    float _2257 = _377 / cbSceneParam._m0[86u].x;
    float _2258 = _378 / cbSceneParam._m0[86u].y;
    vec4 _2272 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2257, _2258, (log2((isnan(cbSceneParam._m0[77u].w) ? _298 : (isnan(_298) ? cbSceneParam._m0[77u].w : min(_298, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2274 = _2272.x;
    float _2275 = _2272.y;
    float _2276 = _2272.z;
    float _2277 = _2272.w;
    float _2370;
    float _2372;
    float _2374;
    float _2376;
    if (_298 > cbSceneParam._m0[78u].w)
    {
        float _2332 = isnan(_298) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _298 : min(cbSceneParam._m0[80u].w, _298));
        float _2333 = _2332 / _298;
        float _2344 = _2333 * _349;
        float _2345 = _350 * _2333;
        float _2346 = (-0.0) - _2345;
        float _2348 = _2333 * _351;
        float _2350 = (cbSceneParam._m0[77u].w * _2346) / _2332;
        float _2351 = _2350 + cbSceneParam._m0[79u].w;
        float _2352 = cbSceneParam._m0[79u].w - _2345;
        float _2358 = sqrt(((_2344 * _2344) + (_2345 * _2345)) + (_2348 * _2348));
        float _2361 = (1.0 - (cbSceneParam._m0[77u].w / _2332)) * _2358;
        float _2366 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2368 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2545;
        if (abs((_2346 - _2350) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2545 = ((((_2351 > 0.0) ? exp2(_2366 * _2351) : (2.0 - exp2(_2368 * _2351))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2361;
        }
        else
        {
            float _2489 = 1.0 / cbSceneParam._m0[80u].x;
            float _2490 = isnan(_2352) ? _2351 : (isnan(_2351) ? _2352 : max(_2351, _2352));
            float _2491 = isnan(_2352) ? _2351 : (isnan(_2351) ? _2352 : min(_2351, _2352));
            float _2500 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : min(_2490, 0.0));
            float _2501 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : min(_2491, 0.0));
            _2545 = ((abs(_2358 / _2346) * cbSceneParam._m0[80u].y) * ((((_2500 - _2501) * 2.0) - ((exp2(_2366 * (isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0)))) - exp2(_2366 * (isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0))))) * _2489)) - ((exp2(_2368 * _2500) - exp2(_2368 * _2501)) * _2489))) + (_2361 * cbSceneParam._m0[80u].z);
        }
        vec4 _2547 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2257, _2258, 1.0), 0.0);
        float _2556 = exp2((_2545 * (-1.44269502162933349609375)) * (1.0 - _2547.w));
        float _2557 = log2(_2556);
        float _2573 = log2(_2277);
        _2370 = (exp2(_2573 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2557 * cbSceneParam._m0[78u].x)) * _2547.x) / cbSceneParam._m0[78u].x)) + _2274;
        _2372 = (exp2(_2573 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2557 * cbSceneParam._m0[78u].y)) * _2547.y) / cbSceneParam._m0[78u].y)) + _2275;
        _2374 = (exp2(_2573 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2557 * cbSceneParam._m0[78u].z)) * _2547.z) / cbSceneParam._m0[78u].z)) + _2276;
        _2376 = _2556 * _2277;
    }
    else
    {
        _2370 = _2274;
        _2372 = _2275;
        _2374 = _2276;
        _2376 = _2277;
    }
    bool _2583;
    vec4 _2386;
    vec4 _2408;
    float _2410;
    float _2414;
    float _2415;
    float _2416;
    float _2417;
    bool _2427;
    for (;;)
    {
        _2386 = cbMatDynParam._m0[0u];
        float _2388 = roundEven(_2386.y);
        bool _2389 = _2388 == 3.0;
        float _2390 = log2(_2376);
        float _2397 = exp2(_2390 * cbSceneParam._m0[78u].x) * _2245;
        float _2398 = exp2(_2390 * cbSceneParam._m0[78u].y) * _2246;
        float _2399 = exp2(_2390 * cbSceneParam._m0[78u].z) * _2247;
        float _2406 = _365 + (-0.5);
        _2408 = cbMtdParam._m0[1u];
        _2410 = _2408.y * _2406;
        float _2413 = (_2388 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2414 = _2413 * (_2389 ? _2397 : (_2397 + (cbSceneParam._m0[72u].w * _2370)));
        _2415 = _2413 * (_2389 ? _2398 : (_2398 + (cbSceneParam._m0[72u].w * _2372)));
        _2416 = _2413 * (_2389 ? _2399 : (_2399 + (cbSceneParam._m0[72u].w * _2374)));
        _2417 = _2406 * 0.999000012874603271484375;
        _2427 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2427)
        {
            if ((cbInstanceData._m0[_417 + 7u].x + _2417) < 0.5)
            {
                _2583 = true;
                break;
            }
        }
        uint _2524 = _419 + uint(_2386.w);
        if ((cbInstanceData._m0[_2524].w < 1.0) && ((cbInstanceData._m0[_2524].w + _2417) < 0.5))
        {
            _2583 = true;
            break;
        }
        if ((_2410 + _232) < _2408.x)
        {
            _2583 = true;
            break;
        }
        _2583 = false;
        break;
    }
    float _2788;
    if (_2583)
    {
        discard_state = true;
        _2788 = 0.0;
    }
    else
    {
        _2788 = _2252;
    }
    SV_Target.x = _2414;
    SV_Target.y = _2415;
    SV_Target.z = _2416;
    SV_Target.w = _2788;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2252;
    discard_exit();
}


