#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _877;
float _3270;
float _3271;
float _3272;
float _3273;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = (cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _227.x;
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _246 = _244.x;
    vec4 _258 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _258.z;
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _3282 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))));
    float _278 = fma(_275, _193 * NORMAL.x, fma(_268, _200 * TANGENT.x, (_186 * _178) * _266));
    float _281 = fma(_275, _193 * NORMAL.y, fma(_268, _200 * TANGENT.y, (_186 * _179) * _266));
    float _284 = fma(_275, _193 * NORMAL.z, fma(_268, _200 * TANGENT.z, (_186 * _180) * _266));
    float _288 = inversesqrt(dot(vec3(_278, _281, _284), vec3(_278, _281, _284)));
    float _289 = _288 * _278;
    float _290 = _288 * _281;
    float _291 = _288 * _284;
    float _3293 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _292 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
    float _3304 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _293 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
    float _3315 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3326 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3337 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3348 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _297 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _313 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    vec4 _378 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _380 = _378.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _556 = sqrt(((_364 * _364) + (_365 * _365)) + (_366 * _366));
        float _562 = (cbMatDynParam._m0[5u].x * _556) + cbMatDynParam._m0[5u].y;
        float _3359 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
        float _563 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _567 = (cbMatDynParam._m0[5u].z * _556) + cbMatDynParam._m0[5u].w;
        float _3370 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) - _563)) + _563) < ((_380 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _392 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _393 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_291, cbSceneParam._m0[5u].z, fma(_290, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _289));
    float _416 = fma(_291, cbSceneParam._m0[6u].z, fma(_290, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _289));
    float _419 = fma(_291, cbSceneParam._m0[7u].z, fma(_290, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _289));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = _432 + 9u;
    uint _435 = _434 + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3381 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _3392 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    float _3403 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _447 = 1.0 - _297;
    float _448 = _444 * _447;
    float _449 = _445 * _447;
    float _450 = _446 * _447;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _297;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _297;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _297;
    float _458 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    vec4 _470 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _392, cbSceneParam._m0[86u].y * _393));
    float _473 = _470.x * TEXCOORD_1.w;
    float _474 = dot(vec3(_289, _290, _291), vec3(_371, _372, _373));
    float _477 = _474 * 2.0;
    float _481 = (_477 * _289) - _371;
    float _482 = (_477 * _290) - _372;
    float _483 = (_477 * _291) - _373;
    float _487 = abs(dot(vec3(_371, _372, _373), vec3(_289, _290, _291)));
    float _3414 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _489 = sqrt(_293);
    float _502 = exp2((_489 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_489 * 3.0));
    float _508 = (1.0 - _502) * ((_489 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _509 = _502 * _489;
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _876;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _601 = fma(_545, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537));
        float _605 = fma(_545, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537));
        float _609 = fma(_545, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537));
        float _634 = _537 + _289;
        float _635 = _541 + _290;
        float _636 = _545 + _291;
        float _646 = fma(_636, cbModelParam._m0[26u].z, fma(_635, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _634)) - _601;
        float _647 = fma(_636, cbModelParam._m0[27u].z, fma(_635, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _634)) - _605;
        float _648 = fma(_636, cbModelParam._m0[28u].z, fma(_635, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _634)) - _609;
        float _652 = inversesqrt(dot(vec3(_646, _647, _648), vec3(_646, _647, _648)));
        float _665 = ((_652 * _646) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_601 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _666 = ((_652 * _647) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_605 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _667 = ((_652 * _648) / cbModelParam._m0[34u].z) + ((((((_609 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        float _704 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_670.x + (-0.5));
        float _706 = _704 * (_670.y + (-0.5));
        float _707 = _704 * (_670.z + (-0.5));
        float _714 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_677.x + (-0.5));
        float _716 = _714 * (_677.y + (-0.5));
        float _717 = _714 * (_677.z + (-0.5));
        float _724 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_684.x + (-0.5));
        float _726 = _724 * (_684.y + (-0.5));
        float _727 = _724 * (_684.z + (-0.5));
        float _734 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_691.x + (-0.5));
        float _736 = _734 * (_691.y + (-0.5));
        float _737 = _734 * (_691.z + (-0.5));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = _705 * 0.5;
        float _742 = _715 * 0.5;
        float _743 = _725 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _758 = (dot(vec3(_289, _290, _291), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3440 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _768 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3451 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _770 = _769 * 2.0;
        float _774 = (1.0 - _769) / (_769 + 1.0);
        float _3462 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _784 = ((((1.0 - _775) * (_770 + 2.0)) * exp2(log2(isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * (_770 + 1.0))) + _775) * _738;
        float _785 = _706 * 0.5;
        float _786 = _716 * 0.5;
        float _787 = _726 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _801 = (dot(vec3(_289, _290, _291), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _810 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3495 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_812 + 1.0))) + _817) * _739;
        float _827 = _707 * 0.5;
        float _828 = _717 * 0.5;
        float _829 = _727 * 0.5;
        float _830 = dot(vec3(_827, _828, _829), vec3(_827, _828, _829));
        float _835 = (_830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_830);
        float _843 = (dot(vec3(_289, _290, _291), vec3(_835 * _827, _835 * _828, _835 * _829)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _852 = sqrt(((_828 * _828) + (_827 * _827)) + (_829 * _829)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3528 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_854 + 1.0))) + _859) * _740;
        _876 = _707;
        _878 = _706;
        _879 = _705;
        _880 = _717;
        _881 = _716;
        _882 = _715;
        _883 = _727;
        _884 = _726;
        _885 = _725;
        _886 = _740;
        _887 = _739;
        _888 = _738;
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
    }
    else
    {
        _876 = _877;
        _878 = _877;
        _879 = _877;
        _880 = _877;
        _881 = _877;
        _882 = _877;
        _883 = _877;
        _884 = _877;
        _885 = _877;
        _886 = _877;
        _887 = _877;
        _888 = _877;
        _889 = 0.0;
        _890 = 0.0;
        _891 = 0.0;
    }
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _920 = fma(_545, cbModelParam._m0[30u].z, fma(_541, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _537));
        float _924 = fma(_545, cbModelParam._m0[31u].z, fma(_541, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _537));
        float _928 = fma(_545, cbModelParam._m0[32u].z, fma(_541, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _537));
        float _951 = _537 + _289;
        float _952 = _541 + _290;
        float _953 = _545 + _291;
        float _963 = fma(_953, cbModelParam._m0[30u].z, fma(_952, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _951)) - _920;
        float _964 = fma(_953, cbModelParam._m0[31u].z, fma(_952, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _951)) - _924;
        float _965 = fma(_953, cbModelParam._m0[32u].z, fma(_952, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _951)) - _928;
        float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
        float _982 = ((_969 * _963) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_920 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_969 * _964) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_924 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_969 * _965) / cbModelParam._m0[35u].z) + ((((((_928 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        float _1019 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_986.x + (-0.5));
        float _1021 = _1019 * (_986.y + (-0.5));
        float _1022 = _1019 * (_986.z + (-0.5));
        float _1029 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_993.x + (-0.5));
        float _1031 = _1029 * (_993.y + (-0.5));
        float _1032 = _1029 * (_993.z + (-0.5));
        float _1039 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1000.x + (-0.5));
        float _1041 = _1039 * (_1000.y + (-0.5));
        float _1042 = _1039 * (_1000.z + (-0.5));
        float _1049 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1007.x + (-0.5));
        float _1051 = _1049 * (_1007.y + (-0.5));
        float _1052 = _1049 * (_1007.z + (-0.5));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = _1020 * 0.5;
        float _1057 = _1030 * 0.5;
        float _1058 = _1040 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_289, _290, _291), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3591 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_1083 + 1.0))) + _1088) * _1053;
        float _1098 = _1021 * 0.5;
        float _1099 = _1031 * 0.5;
        float _1100 = _1041 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_289, _290, _291), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3624 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1125 + 1.0))) + _1130) * _1054;
        float _1140 = _1022 * 0.5;
        float _1141 = _1032 * 0.5;
        float _1142 = _1042 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_289, _290, _291), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3657 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1167 + 1.0))) + _1172) * _1055;
        _1189 = _1022;
        _1190 = _1021;
        _1191 = _1020;
        _1192 = _1032;
        _1193 = _1031;
        _1194 = _1030;
        _1195 = _1042;
        _1196 = _1041;
        _1197 = _1040;
        _1198 = _1055;
        _1199 = _1054;
        _1200 = _1053;
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
    }
    else
    {
        _1189 = _877;
        _1190 = _877;
        _1191 = _877;
        _1192 = _877;
        _1193 = _877;
        _1194 = _877;
        _1195 = _877;
        _1196 = _877;
        _1197 = _877;
        _1198 = _877;
        _1199 = _877;
        _1200 = _877;
        _1201 = 0.0;
        _1202 = 0.0;
        _1203 = 0.0;
    }
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _889)) + _889;
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _890)) + _890;
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _891)) + _891;
    float _1236 = fma(_1215, cbSceneParam._m0[89u].z, fma(_1214, cbSceneParam._m0[89u].y, _1213 * cbSceneParam._m0[89u].x));
    float _1239 = fma(_1215, cbSceneParam._m0[90u].z, fma(_1214, cbSceneParam._m0[90u].y, _1213 * cbSceneParam._m0[90u].x));
    float _1242 = fma(_1215, cbSceneParam._m0[91u].z, fma(_1214, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1213));
    float _1257 = _481 * 0.5;
    float _1258 = _482 * 0.5;
    float _1259 = _483 * 0.5;
    float _1260 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1263 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1266 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1300;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1273 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_876, _880, _883, _886));
        float _1277 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_878, _881, _884, _887));
        float _1281 = dot(vec4(_1257, _1258, _1259, 1.0), vec4(_879, _882, _885, _888));
        float _1288 = dot(vec4(cbModelParam._m0[39u]), vec4(_1257, _1258, _1259, 1.0));
        _1300 = dot(vec3(isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1288) ? 0.0 : (isnan(0.0) ? _1288 : max(0.0, _1288))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1300 = 1.0;
    }
    float _1311;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1302 = dot(vec4(cbModelParam._m0[40u]), vec4(_1257, _1258, _1259, 1.0));
        _1311 = dot(vec3(isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1302) ? 0.0 : (isnan(0.0) ? _1302 : max(0.0, _1302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1311 = 1.0;
    }
    float _1315 = (_1311 * cbModelParam._m0[1u].x) + (_1300 * (1.0 - cbModelParam._m0[1u].x));
    float _1325 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _293);
    float _1326 = isnan(_1325) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1325 : min(cbModelParam._m0[25u].z, _1325));
    float _1408;
    float _1410;
    float _1412;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1375 = fma(_545, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537)) + cbModelParam._m0[13u].w;
        float _1379 = fma(_545, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537)) + cbModelParam._m0[14u].w;
        float _1383 = fma(_545, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537)) + cbModelParam._m0[15u].w;
        float _1386 = fma(_483, cbModelParam._m0[13u].z, fma(_482, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481));
        float _1389 = fma(_483, cbModelParam._m0[14u].z, fma(_482, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481));
        float _1392 = fma(_483, cbModelParam._m0[15u].z, fma(_482, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481));
        float _1420;
        if (_1386 > 0.0)
        {
            _1420 = abs((1.0 - _1375) / _1386);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1375 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1420 = frontier_phi_17_15_ladder;
        }
        float _1628;
        if (_1389 > 0.0)
        {
            _1628 = abs((1.0 - _1379) / _1389);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1379 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1628 = frontier_phi_26_22_ladder;
        }
        float _1882;
        if (_1392 > 0.0)
        {
            _1882 = abs((1.0 - _1383) / _1392);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1383 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1882 = frontier_phi_38_33_ladder;
        }
        float _1884 = isnan(_1628) ? _1420 : (isnan(_1420) ? _1628 : min(_1420, _1628));
        float _1885 = isnan(_1882) ? _1884 : (isnan(_1884) ? _1882 : min(_1884, _1882));
        float _1889 = (_1885 * _1386) + _1375;
        float _1890 = (_1885 * _1389) + _1379;
        float _1891 = (_1885 * _1392) + _1383;
        float _1892 = _1885 * 9.9999997473787516355514526367188e-05;
        float _1894 = (-1.0) - _1892;
        float _1896 = _1892 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1891 > _1896) || ((_1891 < _1894) || ((_1890 > _1896) || ((_1890 < _1894) || ((_1889 < _1894) || (_1889 > _1896))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1891, cbModelParam._m0[9u].z, fma(_1890, cbModelParam._m0[9u].y, _1889 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1891, cbModelParam._m0[10u].z, fma(_1890, cbModelParam._m0[10u].y, _1889 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1891, cbModelParam._m0[11u].z, fma(_1890, cbModelParam._m0[11u].y, _1889 * cbModelParam._m0[11u].x))), _1326);
            frontier_phi_16_38_ladder = _2019.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2019.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2019.x * cbModelParam._m0[1u].y;
        }
        _1408 = frontier_phi_16_38_ladder_2;
        _1410 = frontier_phi_16_38_ladder_1;
        _1412 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_481, _482, _483), _1326);
        _1408 = _1396.x * cbModelParam._m0[1u].y;
        _1410 = _1396.y * cbModelParam._m0[1u].y;
        _1412 = _1396.z * cbModelParam._m0[1u].y;
    }
    float _1416 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _293);
    float _1417 = isnan(_1416) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1416 : min(cbModelParam._m0[25u].w, _1416));
    float _1510;
    float _1512;
    float _1514;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1474 = fma(_545, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537)) + cbModelParam._m0[21u].w;
        float _1478 = fma(_545, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537)) + cbModelParam._m0[22u].w;
        float _1482 = fma(_545, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537)) + cbModelParam._m0[23u].w;
        float _1485 = fma(_483, cbModelParam._m0[21u].z, fma(_482, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481));
        float _1488 = fma(_483, cbModelParam._m0[22u].z, fma(_482, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481));
        float _1491 = fma(_483, cbModelParam._m0[23u].z, fma(_482, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481));
        float _1633;
        if (_1485 > 0.0)
        {
            _1633 = abs((1.0 - _1474) / _1485);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1474 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1633 = frontier_phi_28_24_ladder;
        }
        float _1909;
        if (_1488 > 0.0)
        {
            _1909 = abs((1.0 - _1478) / _1488);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1478 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1909 = frontier_phi_40_35_ladder;
        }
        float _2122;
        if (_1491 > 0.0)
        {
            _2122 = abs((1.0 - _1482) / _1491);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1482 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2122 = frontier_phi_49_46_ladder;
        }
        float _2124 = isnan(_1909) ? _1633 : (isnan(_1633) ? _1909 : min(_1633, _1909));
        float _2125 = isnan(_2122) ? _2124 : (isnan(_2124) ? _2122 : min(_2124, _2122));
        float _2129 = (_2125 * _1485) + _1474;
        float _2130 = (_2125 * _1488) + _1478;
        float _2131 = (_2125 * _1491) + _1482;
        float _2132 = _2125 * 9.9999997473787516355514526367188e-05;
        float _2133 = (-1.0) - _2132;
        float _2135 = _2132 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2131 > _2135) || ((_2131 < _2133) || ((_2130 > _2135) || ((_2130 < _2133) || ((_2129 < _2133) || (_2129 > _2135))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2332 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2131, cbModelParam._m0[17u].z, fma(_2130, cbModelParam._m0[17u].y, _2129 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2131, cbModelParam._m0[18u].z, fma(_2130, cbModelParam._m0[18u].y, _2129 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2131, cbModelParam._m0[19u].z, fma(_2130, cbModelParam._m0[19u].y, _2129 * cbModelParam._m0[19u].x))), _1417);
            frontier_phi_25_49_ladder = _2332.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2332.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2332.x * cbModelParam._m0[1u].z;
        }
        _1510 = frontier_phi_25_49_ladder_2;
        _1512 = frontier_phi_25_49_ladder_1;
        _1514 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1494 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_481, _482, _483), _1417);
        _1510 = _1494.x * cbModelParam._m0[1u].z;
        _1512 = _1494.y * cbModelParam._m0[1u].z;
        _1514 = _1494.z * cbModelParam._m0[1u].z;
    }
    float _1527 = (((_508 * _458) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1510 - _1408)) + _1408);
    float _1529 = (((_508 * _460) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1512 - _1410)) + _1410);
    float _1531 = (((_508 * _461) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1514 - _1412)) + _1412);
    float _1534 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1529, cbSceneParam._m0[89u].y, _1527 * cbSceneParam._m0[89u].x));
    float _1537 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1529, cbSceneParam._m0[90u].y, _1527 * cbSceneParam._m0[90u].x));
    float _1540 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1529, cbSceneParam._m0[91u].y, _1527 * cbSceneParam._m0[91u].x));
    uvec4 _1550 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1552 = _1550.x * 14u;
    uint _1553 = _1552 + 13u;
    float _1560 = _473 + (-1.0);
    float _1565 = (cbLight._m0[_1553].x * _1560) + 1.0;
    float _1566 = (cbLight._m0[_1553].y * _1560) + 1.0;
    float _1567 = (cbLight._m0[_1553].z * _1560) + 1.0;
    float _1568 = (cbLight._m0[_1553].w * _1560) + 1.0;
    uint _1569 = _1552 + 5u;
    float _1575 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
    uint _1579 = _1552 + 4u;
    float _1586 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
    uint _1590 = _1552 | 1u;
    float _1601 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_289, _290, _291));
    float _1604 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_289, _290, _291));
    float _3793 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
    float _3804 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _1609 = (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * 0.3183098733425140380859375;
    float _1611 = (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * 0.3183098733425140380859375;
    float _1618 = ((cbLight._m0[_1569].x * _1575) * _1611) + ((cbLight._m0[_1579].x * _1586) * _1609);
    float _1619 = ((_1575 * cbLight._m0[_1569].y) * _1611) + ((_1586 * cbLight._m0[_1579].y) * _1609);
    float _1620 = ((_1575 * cbLight._m0[_1569].z) * _1611) + ((_1586 * cbLight._m0[_1579].z) * _1609);
    uvec4 _1625 = floatBitsToUint(cbLight._m0[_1552 + 12u]);
    bool _1627 = _1625.x == 0u;
    float _1638;
    float _1640;
    float _1642;
    if (_1627)
    {
        _1638 = _1618;
        _1640 = _1619;
        _1642 = _1620;
    }
    else
    {
        uint _1646 = _1552 + 6u;
        float _1662 = (dot(vec3(cbLight._m0[_1552 + 2u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1663 = _1662 * _1662;
        float _3815 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1665 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1638 = (((cbLight._m0[_1646].x * 0.3183098733425140380859375) * _1664) * _1665) + _1618;
        _1640 = (((cbLight._m0[_1646].y * 0.3183098733425140380859375) * _1664) * _1665) + _1619;
        _1642 = (((cbLight._m0[_1646].z * 0.3183098733425140380859375) * _1664) * _1665) + _1620;
    }
    bool _1645 = _1625.y == 0u;
    float _1683;
    float _1685;
    float _1687;
    if (_1645)
    {
        _1683 = _1638;
        _1685 = _1640;
        _1687 = _1642;
    }
    else
    {
        uint _1853 = _1552 + 7u;
        float _1869 = (dot(vec3(cbLight._m0[_1552 + 3u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1870 = _1869 * _1869;
        float _3831 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1872 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1683 = (((cbLight._m0[_1853].x * 0.3183098733425140380859375) * _1871) * _1872) + _1638;
        _1685 = (((cbLight._m0[_1853].y * 0.3183098733425140380859375) * _1871) * _1872) + _1640;
        _1687 = (((cbLight._m0[_1853].z * 0.3183098733425140380859375) * _1871) * _1872) + _1642;
    }
    uint _1690 = _1552 + 8u;
    float _1703 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1552].w)) * _293) * 0.949999988079071044921875);
    float _1704 = _1703 * _1703;
    float _1705 = cbLight._m0[_1552].x + _371;
    float _1706 = cbLight._m0[_1552].y + _372;
    float _1707 = cbLight._m0[_1552].z + _373;
    float _1711 = inversesqrt(dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707)));
    float _1712 = _1711 * _1705;
    float _1713 = _1711 * _1706;
    float _1714 = _1711 * _1707;
    float _1715 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1552].xyz));
    float _3847 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1718 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _1719 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _1720 = dot(vec3(_289, _290, _291), vec3(_1712, _1713, _1714));
    float _3869 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1723 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _1724 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_1712, _1713, _1714));
    float _3880 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1728 = _1704 * _1704;
    float _1732 = ((_1723 * _1723) * (_1728 + (-1.0))) + 1.0;
    float _1740 = exp2(log2(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * 5.0);
    float _1741 = 0.959999978542327880859375 - _455;
    float _1743 = 0.959999978542327880859375 - _456;
    float _1744 = 0.959999978542327880859375 - _457;
    float _1751 = 1.0 - _1704;
    float _1762 = (0.5 / (((_1719 * ((_1718 * _1751) + _1704)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _1751) + _1704) * _1718))) * _1718;
    float _3891 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1764 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1728 / ((_1732 * _1732) * 3.141590118408203125));
    uint _1775 = _1552 + 9u;
    float _1786 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1590].w)) * _293) * 0.949999988079071044921875);
    float _1787 = _1786 * _1786;
    float _1788 = cbLight._m0[_1590].x + _371;
    float _1789 = cbLight._m0[_1590].y + _372;
    float _1790 = cbLight._m0[_1590].z + _373;
    float _1794 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
    float _1795 = _1794 * _1788;
    float _1796 = _1794 * _1789;
    float _1797 = _1794 * _1790;
    float _1798 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1590].xyz));
    float _3902 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _1802 = dot(vec3(_289, _290, _291), vec3(_1795, _1796, _1797));
    float _3913 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1805 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _1806 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_1795, _1796, _1797));
    float _3924 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1810 = _1787 * _1787;
    float _1814 = ((_1805 * _1805) * (_1810 + (-1.0))) + 1.0;
    float _1821 = exp2(log2(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * 5.0);
    float _1828 = 1.0 - _1787;
    float _1838 = (0.5 / (((_1719 * ((_1801 * _1828) + _1787)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _1828) + _1787) * _1801))) * _1801;
    float _3935 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1810 / ((_1814 * _1814) * 3.141590118408203125));
    float _1850 = (((((_1821 * _1741) + _458) * cbLight._m0[_1775].x) * _1840) * _1575) + (((((_1740 * _1741) + _458) * cbLight._m0[_1690].x) * _1764) * _1586);
    float _1851 = (((((_1821 * _1743) + _460) * cbLight._m0[_1775].y) * _1840) * _1575) + (((((_1740 * _1743) + _460) * cbLight._m0[_1690].y) * _1764) * _1586);
    float _1852 = (((((_1821 * _1744) + _461) * cbLight._m0[_1775].z) * _1840) * _1575) + (((((_1740 * _1744) + _461) * cbLight._m0[_1690].z) * _1764) * _1586);
    float _1914;
    float _1916;
    float _1918;
    if (_1627)
    {
        _1914 = _1850;
        _1916 = _1851;
        _1918 = _1852;
    }
    else
    {
        uint _1920 = _1552 + 2u;
        uint _1924 = _1552 + 10u;
        float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _293) * 0.949999988079071044921875);
        float _1939 = _1938 * _1938;
        float _1940 = cbLight._m0[_1920].x + _371;
        float _1941 = cbLight._m0[_1920].y + _372;
        float _1942 = cbLight._m0[_1920].z + _373;
        float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
        float _1947 = _1946 * _1940;
        float _1948 = _1946 * _1941;
        float _1949 = _1946 * _1942;
        float _1950 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1920].xyz));
        float _3946 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1953 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1954 = dot(vec3(_289, _290, _291), vec3(_1947, _1948, _1949));
        float _3957 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1957 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1958 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_1947, _1948, _1949));
        float _3968 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1962 = _1939 * _1939;
        float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
        float _1973 = exp2(log2(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * 5.0);
        float _1980 = 1.0 - _1939;
        float _1990 = (0.5 / (((_1719 * ((_1953 * _1980) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _1980) + _1939) * _1953))) * _1953;
        float _3979 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1992 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
        float _1993 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1914 = (((((_1973 * _1741) + _458) * cbLight._m0[_1924].x) * _1992) * _1993) + _1850;
        _1916 = (((((_1973 * _1743) + _460) * cbLight._m0[_1924].y) * _1992) * _1993) + _1851;
        _1918 = (((((_1973 * _1744) + _461) * cbLight._m0[_1924].z) * _1992) * _1993) + _1852;
    }
    float _2028;
    float _2030;
    float _2032;
    if (_1645)
    {
        _2028 = _1914;
        _2030 = _1916;
        _2032 = _1918;
    }
    else
    {
        uint _2039 = _1552 + 3u;
        uint _2043 = _1552 + 11u;
        float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _293) * 0.949999988079071044921875);
        float _2058 = _2057 * _2057;
        float _2059 = cbLight._m0[_2039].x + _371;
        float _2060 = cbLight._m0[_2039].y + _372;
        float _2061 = cbLight._m0[_2039].z + _373;
        float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
        float _2066 = _2065 * _2059;
        float _2067 = _2065 * _2060;
        float _2068 = _2065 * _2061;
        float _2069 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2039].xyz));
        float _3995 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _2073 = dot(vec3(_289, _290, _291), vec3(_2066, _2067, _2068));
        float _4006 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2077 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2066, _2067, _2068));
        float _4017 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2081 = _2058 * _2058;
        float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
        float _2092 = exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0);
        float _2099 = 1.0 - _2058;
        float _2109 = (0.5 / (((_1719 * ((_2072 * _2099) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _2099) + _2058) * _2072))) * _2072;
        float _4028 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2111 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
        float _2112 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _2028 = (((((_2092 * _1741) + _458) * cbLight._m0[_2043].x) * _2111) * _2112) + _1914;
        _2030 = (((((_2092 * _1743) + _460) * cbLight._m0[_2043].y) * _2111) * _2112) + _1916;
        _2032 = (((((_2092 * _1744) + _461) * cbLight._m0[_2043].z) * _2111) * _2112) + _1918;
    }
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    if (_1550.y == 0u)
    {
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2187;
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2187;
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2187;
        uvec4 _2202 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2203 = _2202.x;
        uint _2214 = uint((float(_2202.y) * floor(float(uint(cbSceneParam._m0[85u].y * _393) / _2203))) + floor(float(uint(cbSceneParam._m0[85u].x * _392) / _2203)));
        float _2224 = (log2(_2190 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2225 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        uint _2228 = uint(isnan(14.0) ? _2225 : (isnan(_2225) ? 14.0 : min(_2225, 14.0)));
        uvec4 _2233 = texelFetch(g_lightClusterGridBuffer, int(((_2228 << 2u) + (_2214 << 6u)) >> 2u));
        uint _2234 = _2233.x;
        uint _2235 = _2202.z;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        if (((((1u << ((_2235 >> 4u) & 15u)) + 4294967295u) & _2234) == 0u) || ((_2235 & 240u) == 0u))
        {
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
        }
        else
        {
            float _2338;
            float _2340;
            float _2342;
            float _2344;
            float _2346;
            float _2348;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            float _2494 = 0.0;
            float _2495 = 0.0;
            uint _2496 = 0u;
            uint _2505;
            bool _2506;
            for (;;)
            {
                _2505 = texelFetch(g_lightClassification, int((((_2228 << 5u) + (_2214 << 9u)) + (_2496 << 2u)) >> 2u)).x;
                _2506 = _2505 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2506)
                {
                    frontier_phi_66_pred = _2490;
                    frontier_phi_66_pred_1 = _2495;
                    frontier_phi_66_pred_2 = _2494;
                    frontier_phi_66_pred_3 = _2493;
                    frontier_phi_66_pred_4 = _2492;
                    frontier_phi_66_pred_5 = _2491;
                }
                else
                {
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    uint _2641;
                    _2635 = _2490;
                    _2636 = _2491;
                    _2637 = _2492;
                    _2638 = _2493;
                    _2639 = _2494;
                    _2640 = _2495;
                    _2641 = _2505;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    for (;;)
                    {
                        uint _2645 = uint(findLSB(_2641)) + (_2496 << 5u);
                        uint _2642 = (_2641 + 4294967295u) & _2641;
                        uint _2647 = _2645 * 48u;
                        vec4 _2661 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 3u)).x));
                        uint _2667 = (_2645 * 48u) + 4u;
                        vec4 _2680 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2667)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 3u)).x));
                        uint _2686 = (_2645 * 48u) + 8u;
                        vec3 _2697 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2686)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 2u)).x));
                        float _2701 = _2661.x - _2188;
                        float _2702 = _2661.y - _2189;
                        float _2703 = _2661.z - _2190;
                        float _2704 = dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703));
                        float _2707 = inversesqrt(_2704);
                        float _2708 = _2707 * _2701;
                        float _2709 = _2707 * _2702;
                        float _2710 = _2707 * _2703;
                        float _2711 = dot(vec3(_413, _416, _419), vec3(_2708, _2709, _2710));
                        float _2716 = 1.0 - (_2704 * _2661.w);
                        float _4054 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                        float _2717 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                        float _2718 = sqrt(_2704) * _2680.w;
                        float _2721 = 1.39999997615814208984375 / (_2718 + 1.39999997615814208984375);
                        float _2722 = _2721 * _2721;
                        float _2725 = ((1.0 - _2722) * _2711) + _2722;
                        float _2728 = _2718 * _2718;
                        float _2732 = ((isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0))) * _2717) / ((_2728 * 0.699999988079071044921875) + 1.0);
                        float _2736 = (-0.0) - _2188;
                        float _2737 = (-0.0) - _2189;
                        float _2738 = (-0.0) - _2190;
                        float _2742 = inversesqrt(dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738)));
                        float _2743 = _2742 * _2736;
                        float _2744 = _2742 * _2737;
                        float _2745 = _2742 * _2738;
                        float _2753 = exp2(log2(1.0 / ((_2728 * 3.5) + 5.0)) * 0.25);
                        float _2754 = 1.0 - _489;
                        float _2761 = sqrt(1.0 - ((1.0 - (_2754 * _2754)) * (1.0 - (_2753 * _2753))));
                        float _2762 = _2761 * _2761;
                        float _2763 = _2762 * _2762;
                        float _2764 = _2743 + _2708;
                        float _2765 = _2744 + _2709;
                        float _2766 = _2745 + _2710;
                        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
                        float _2774 = dot(vec3(_413, _416, _419), vec3(_2743, _2744, _2745));
                        float _4070 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2777 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2778 = dot(vec3(_413, _416, _419), vec3(_2770 * _2764, _2770 * _2765, _2770 * _2766));
                        float _4081 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2781 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2785 = ((_2781 * _2781) * (_2763 + (-1.0))) + 1.0;
                        float _2786 = _2721 * _2762;
                        float _2787 = _2786 * _2786;
                        float _2790 = ((1.0 - _2787) * _2711) + _2787;
                        float _4092 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2791 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2792 = 1.0 - _2762;
                        float _2802 = (0.5 / (((_2791 * ((_2777 * _2792) + _2762)) + 9.9999999392252902907785028219223e-09) + (((_2791 * _2792) + _2762) * _2777))) * _2791;
                        float _4103 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2813 = (((_2763 * 3.1415927410125732421875) * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) / ((_2785 * _2785) * ((_2728 * 2.1991131305694580078125) + 3.141590118408203125))) * _2717;
                        _2565 = (_2732 * _2680.x) + _2638;
                        _2566 = (_2732 * _2680.y) + _2639;
                        _2567 = (_2732 * _2680.z) + _2640;
                        _2562 = (_2813 * _2697.x) + _2635;
                        _2563 = (_2813 * _2697.y) + _2636;
                        _2564 = (_2813 * _2697.z) + _2637;
                        if (_2642 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2635 = _2562;
                            _2636 = _2563;
                            _2637 = _2564;
                            _2638 = _2565;
                            _2639 = _2566;
                            _2640 = _2567;
                            _2641 = _2642;
                        }
                    }
                    frontier_phi_66_pred = _2562;
                    frontier_phi_66_pred_1 = _2567;
                    frontier_phi_66_pred_2 = _2566;
                    frontier_phi_66_pred_3 = _2565;
                    frontier_phi_66_pred_4 = _2564;
                    frontier_phi_66_pred_5 = _2563;
                }
                _2338 = frontier_phi_66_pred;
                _2348 = frontier_phi_66_pred_1;
                _2346 = frontier_phi_66_pred_2;
                _2344 = frontier_phi_66_pred_3;
                _2342 = frontier_phi_66_pred_4;
                _2340 = frontier_phi_66_pred_5;
                uint _2497 = _2496 + 1u;
                if (_2497 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2490 = _2338;
                    _2491 = _2340;
                    _2492 = _2342;
                    _2493 = _2344;
                    _2494 = _2346;
                    _2495 = _2348;
                    _2496 = _2497;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
        }
        uvec4 _2351 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2352 = _2351.z;
        uint _2354 = (_2352 >> 8u) & 15u;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        if (((4294967295u << _2354) & _2234) == 0u)
        {
            _2458 = _2337;
            _2460 = _2339;
            _2462 = _2341;
            _2464 = _2343;
            _2466 = _2345;
            _2468 = _2347;
        }
        else
        {
            float _2483 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
            float _2484 = _2483 * _2188;
            float _2485 = _2483 * _2189;
            float _2486 = _2483 * _2190;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2354 < ((_2352 >> 12u) & 15u))
            {
                float _2459;
                float _2461;
                float _2463;
                float _2465;
                float _2467;
                float _2469;
                float _2618 = _2337;
                float _2619 = _2339;
                float _2620 = _2341;
                float _2621 = _2343;
                float _2622 = _2345;
                float _2623 = _2347;
                uint _2624 = _2354;
                uint _2633;
                bool _2634;
                for (;;)
                {
                    _2633 = texelFetch(g_lightClassification, int((((_2228 << 5u) + (_2214 << 9u)) + (_2624 << 2u)) >> 2u)).x;
                    _2634 = _2633 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2634)
                    {
                        frontier_phi_77_pred = _2623;
                        frontier_phi_77_pred_1 = _2622;
                        frontier_phi_77_pred_2 = _2621;
                        frontier_phi_77_pred_3 = _2620;
                        frontier_phi_77_pred_4 = _2619;
                        frontier_phi_77_pred_5 = _2618;
                    }
                    else
                    {
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _2840 = _2618;
                        float _2841 = _2619;
                        float _2842 = _2620;
                        float _2843 = _2621;
                        float _2844 = _2622;
                        float _2845 = _2623;
                        uint _2846 = _2633;
                        uint _2847;
                        vec4 _2872;
                        float _2873;
                        vec4 _2888;
                        vec3 _2900;
                        vec4 _2916;
                        vec4 _2932;
                        float _2979;
                        bool _2980;
                        for (;;)
                        {
                            uint _2857 = ((_2624 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2846));
                            _2847 = (_2846 + 4294967295u) & _2846;
                            uint _2859 = _2857 * 40u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            _2873 = _2872.w;
                            uint _2875 = (_2857 * 40u) + 4u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2890 = (_2857 * 40u) + 8u;
                            _2900 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x));
                            uint _2903 = (_2857 * 40u) + 16u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2919 = (_2857 * 40u) + 20u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2935 = (_2857 * 40u) + 24u;
                            vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            uint _2954 = (_2857 * 40u) + 28u;
                            vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            _2979 = fma(_2190, _2967.z, fma(_2189, _2967.y, _2967.x * _2188)) + _2967.w;
                            _2980 = !((fma(_2190, _2948.z, fma(_2189, _2948.y, _2948.x * _2188)) + _2948.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2980)
                            {
                                float _3007 = _2872.x - _2188;
                                float _3008 = _2872.y - _2189;
                                float _3009 = _2872.z - _2190;
                                float _3010 = dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009));
                                float _3013 = inversesqrt(_3010);
                                float _3014 = _3013 * _3007;
                                float _3015 = _3013 * _3008;
                                float _3016 = _3013 * _3009;
                                float _3020 = 1.0 - (_3010 / (_2873 * _2873));
                                float _4114 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3021 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                                float _3025 = sqrt(_3010) * _2888.w;
                                float _3027 = 1.39999997615814208984375 / (_3025 + 1.39999997615814208984375);
                                float _3028 = _3027 * _3027;
                                float _3031 = ((1.0 - _3028) * dot(vec3(_3014, _3015, _3016), vec3(_413, _416, _419))) + _3028;
                                float _3034 = _3025 * _3025;
                                float _3038 = (fma(_2190, _2916.z, fma(_2189, _2916.y, _2916.x * _2188)) + _2916.w) / _2979;
                                float _3039 = (fma(_2190, _2932.z, fma(_2189, _2932.y, _2932.x * _2188)) + _2932.w) / _2979;
                                float _3043 = 1.0 - dot(vec2(_3038, _3039), vec2(_3038, _3039));
                                float _4130 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3044 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                                float _3045 = _3044 * (((isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0))) * _3021) / ((_3034 * 0.699999988079071044921875) + 1.0));
                                float _3057 = exp2(log2(1.0 / ((_3034 * 3.5) + 5.0)) * 0.25);
                                float _3058 = 1.0 - _489;
                                float _3065 = sqrt(1.0 - ((1.0 - (_3058 * _3058)) * (1.0 - (_3057 * _3057))));
                                float _3066 = _3065 * _3065;
                                float _3067 = _3066 * _3066;
                                float _3068 = _3014 - _2484;
                                float _3069 = _3015 - _2485;
                                float _3070 = _3016 - _2486;
                                float _3074 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
                                float _3078 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2484, (-0.0) - _2485, (-0.0) - _2486));
                                float _4141 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3081 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3082 = dot(vec3(_413, _416, _419), vec3(_3074 * _3068, _3074 * _3069, _3074 * _3070));
                                float _4152 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3085 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3089 = ((_3085 * _3085) * (_3067 + (-1.0))) + 1.0;
                                float _3090 = _3027 * _3066;
                                float _3091 = _3090 * _3090;
                                float _3097 = ((1.0 - _3091) * dot(vec3(_413, _416, _419), vec3(_3014, _3015, _3016))) + _3091;
                                float _4163 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3098 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3099 = 1.0 - _3066;
                                float _3109 = (0.5 / (((_3098 * ((_3081 * _3099) + _3066)) + 9.9999999392252902907785028219223e-09) + (((_3098 * _3099) + _3066) * _3081))) * _3098;
                                float _4174 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3119 = (_3044 * _3021) * (((_3067 * 3.1415927410125732421875) * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) / ((_3089 * _3089) * ((_3034 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3045 * _2888.y;
                                frontier_phi_83_pred_1 = _3045 * _2888.x;
                                frontier_phi_83_pred_2 = _3119 * _2900.z;
                                frontier_phi_83_pred_3 = _3119 * _2900.y;
                                frontier_phi_83_pred_4 = _3119 * _2900.x;
                                frontier_phi_83_pred_5 = _3045 * _2888.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3127 = frontier_phi_83_pred;
                            _3126 = frontier_phi_83_pred_1;
                            _3125 = frontier_phi_83_pred_2;
                            _3124 = frontier_phi_83_pred_3;
                            _3123 = frontier_phi_83_pred_4;
                            _3128 = frontier_phi_83_pred_5;
                            _2830 = _3126 + _2843;
                            _2831 = _3127 + _2844;
                            _2832 = _3128 + _2845;
                            _2827 = _3123 + _2840;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            if (_2847 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2847;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2832;
                        frontier_phi_77_pred_1 = _2831;
                        frontier_phi_77_pred_2 = _2830;
                        frontier_phi_77_pred_3 = _2829;
                        frontier_phi_77_pred_4 = _2828;
                        frontier_phi_77_pred_5 = _2827;
                    }
                    _2469 = frontier_phi_77_pred;
                    _2467 = frontier_phi_77_pred_1;
                    _2465 = frontier_phi_77_pred_2;
                    _2463 = frontier_phi_77_pred_3;
                    _2461 = frontier_phi_77_pred_4;
                    _2459 = frontier_phi_77_pred_5;
                    uint _2625 = _2624 + 1u;
                    if (_2625 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2618 = _2459;
                        _2619 = _2461;
                        _2620 = _2463;
                        _2621 = _2465;
                        _2622 = _2467;
                        _2623 = _2469;
                        _2624 = _2625;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2463;
                frontier_phi_58_59_ladder_1 = _2469;
                frontier_phi_58_59_ladder_2 = _2467;
                frontier_phi_58_59_ladder_3 = _2465;
                frontier_phi_58_59_ladder_4 = _2461;
                frontier_phi_58_59_ladder_5 = _2459;
            }
            else
            {
                frontier_phi_58_59_ladder = _2341;
                frontier_phi_58_59_ladder_1 = _2347;
                frontier_phi_58_59_ladder_2 = _2345;
                frontier_phi_58_59_ladder_3 = _2343;
                frontier_phi_58_59_ladder_4 = _2339;
                frontier_phi_58_59_ladder_5 = _2337;
            }
            _2458 = frontier_phi_58_59_ladder_5;
            _2460 = frontier_phi_58_59_ladder_4;
            _2462 = frontier_phi_58_59_ladder;
            _2464 = frontier_phi_58_59_ladder_3;
            _2466 = frontier_phi_58_59_ladder_2;
            _2468 = frontier_phi_58_59_ladder_1;
        }
        float _2473 = isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0));
        _2247 = (_2473 * _2464) + _1683;
        _2249 = (_2473 * _2466) + _1685;
        _2251 = (_2473 * _2468) + _1687;
        _2253 = ((_2458 * _458) * _2473) + _2028;
        _2255 = ((_2460 * _460) * _2473) + _2030;
        _2257 = ((_2462 * _461) * _2473) + _2032;
    }
    else
    {
        _2247 = _1683;
        _2249 = _1685;
        _2251 = _1687;
        _2253 = _2028;
        _2255 = _2030;
        _2257 = _2032;
    }
    float _4190 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4201 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4212 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4223 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _2275 = ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2247 + ((isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))) * _473))) + ((_2253 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _1315)) * cbPerFrame._m0[3u].x);
    float _2276 = ((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2249 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _473))) + ((_2255 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1315)) * cbPerFrame._m0[3u].x);
    float _2277 = ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2251 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _473))) + ((_2257 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1315)) * cbPerFrame._m0[3u].x);
    float _2282 = cbInstanceData._m0[_432 + 6u].w * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)));
    float _2287 = _392 / cbSceneParam._m0[86u].x;
    float _2288 = _393 / cbSceneParam._m0[86u].y;
    vec4 _2302 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2287, _2288, (log2((isnan(cbSceneParam._m0[77u].w) ? _313 : (isnan(_313) ? cbSceneParam._m0[77u].w : min(_313, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2304 = _2302.x;
    float _2305 = _2302.y;
    float _2306 = _2302.z;
    float _2307 = _2302.w;
    float _2400;
    float _2402;
    float _2404;
    float _2406;
    if (_313 > cbSceneParam._m0[78u].w)
    {
        float _2362 = isnan(_313) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _313 : min(cbSceneParam._m0[80u].w, _313));
        float _2363 = _2362 / _313;
        float _2374 = _2363 * _364;
        float _2375 = _365 * _2363;
        float _2376 = (-0.0) - _2375;
        float _2378 = _2363 * _366;
        float _2380 = (cbSceneParam._m0[77u].w * _2376) / _2362;
        float _2381 = _2380 + cbSceneParam._m0[79u].w;
        float _2382 = cbSceneParam._m0[79u].w - _2375;
        float _2388 = sqrt(((_2374 * _2374) + (_2375 * _2375)) + (_2378 * _2378));
        float _2391 = (1.0 - (cbSceneParam._m0[77u].w / _2362)) * _2388;
        float _2396 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2398 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2575;
        if (abs((_2376 - _2380) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2575 = ((((_2381 > 0.0) ? exp2(_2396 * _2381) : (2.0 - exp2(_2398 * _2381))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2391;
        }
        else
        {
            float _2519 = 1.0 / cbSceneParam._m0[80u].x;
            float _2520 = isnan(_2382) ? _2381 : (isnan(_2381) ? _2382 : max(_2381, _2382));
            float _2521 = isnan(_2382) ? _2381 : (isnan(_2381) ? _2382 : min(_2381, _2382));
            float _2530 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : min(_2520, 0.0));
            float _2531 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : min(_2521, 0.0));
            _2575 = ((abs(_2388 / _2376) * cbSceneParam._m0[80u].y) * ((((_2530 - _2531) * 2.0) - ((exp2(_2396 * (isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0)))) - exp2(_2396 * (isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0))))) * _2519)) - ((exp2(_2398 * _2530) - exp2(_2398 * _2531)) * _2519))) + (_2391 * cbSceneParam._m0[80u].z);
        }
        vec4 _2577 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2287, _2288, 1.0), 0.0);
        float _2586 = exp2((_2575 * (-1.44269502162933349609375)) * (1.0 - _2577.w));
        float _2587 = log2(_2586);
        float _2603 = log2(_2307);
        _2400 = (exp2(_2603 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].x)) * _2577.x) / cbSceneParam._m0[78u].x)) + _2304;
        _2402 = (exp2(_2603 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].y)) * _2577.y) / cbSceneParam._m0[78u].y)) + _2305;
        _2404 = (exp2(_2603 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].z)) * _2577.z) / cbSceneParam._m0[78u].z)) + _2306;
        _2406 = _2586 * _2307;
    }
    else
    {
        _2400 = _2304;
        _2402 = _2305;
        _2404 = _2306;
        _2406 = _2307;
    }
    bool _2613;
    vec4 _2416;
    vec4 _2438;
    float _2440;
    float _2444;
    float _2445;
    float _2446;
    float _2447;
    bool _2457;
    for (;;)
    {
        _2416 = cbMatDynParam._m0[0u];
        float _2418 = roundEven(_2416.y);
        bool _2419 = _2418 == 3.0;
        float _2420 = log2(_2406);
        float _2427 = exp2(_2420 * cbSceneParam._m0[78u].x) * _2275;
        float _2428 = exp2(_2420 * cbSceneParam._m0[78u].y) * _2276;
        float _2429 = exp2(_2420 * cbSceneParam._m0[78u].z) * _2277;
        float _2436 = _380 + (-0.5);
        _2438 = cbMtdParam._m0[1u];
        _2440 = _2438.y * _2436;
        float _2443 = (_2418 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2444 = _2443 * (_2419 ? _2427 : (_2427 + (cbSceneParam._m0[72u].w * _2400)));
        _2445 = _2443 * (_2419 ? _2428 : (_2428 + (cbSceneParam._m0[72u].w * _2402)));
        _2446 = _2443 * (_2419 ? _2429 : (_2429 + (cbSceneParam._m0[72u].w * _2404)));
        _2447 = _2436 * 0.999000012874603271484375;
        _2457 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2457)
        {
            if ((cbInstanceData._m0[_432 + 7u].x + _2447) < 0.5)
            {
                _2613 = true;
                break;
            }
        }
        uint _2554 = _434 + uint(_2416.w);
        if ((cbInstanceData._m0[_2554].w < 1.0) && ((cbInstanceData._m0[_2554].w + _2447) < 0.5))
        {
            _2613 = true;
            break;
        }
        if ((_2440 + _232) < _2438.x)
        {
            _2613 = true;
            break;
        }
        _2613 = false;
        break;
    }
    float _2818;
    if (_2613)
    {
        discard_state = true;
        _2818 = 0.0;
    }
    else
    {
        _2818 = _2282;
    }
    SV_Target.x = _2444;
    SV_Target.y = _2445;
    SV_Target.z = _2446;
    SV_Target.w = _2818;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2282;
    discard_exit();
}


