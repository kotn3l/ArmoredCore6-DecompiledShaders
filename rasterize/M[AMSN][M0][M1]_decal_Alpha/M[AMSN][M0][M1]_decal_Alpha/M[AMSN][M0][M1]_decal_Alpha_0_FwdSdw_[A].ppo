#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _881;
float _3557;
float _3558;
float _3559;
float _3560;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = (cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _231.x;
    vec4 _248 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _250 = _248.x;
    vec4 _262 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3569 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))));
    float _282 = fma(_279, _197 * NORMAL.x, fma(_272, _204 * TANGENT.x, (_190 * _182) * _270));
    float _285 = fma(_279, _197 * NORMAL.y, fma(_272, _204 * TANGENT.y, (_190 * _183) * _270));
    float _288 = fma(_279, _197 * NORMAL.z, fma(_272, _204 * TANGENT.z, (_190 * _184) * _270));
    float _292 = inversesqrt(dot(vec3(_282, _285, _288), vec3(_282, _285, _288)));
    float _293 = _292 * _282;
    float _294 = _292 * _285;
    float _295 = _292 * _288;
    float _3580 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _296 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _3591 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _297 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3613 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3624 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3635 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _301 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _317 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _358 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _368 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _358);
    float _369 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _358);
    float _370 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _358);
    float _374 = inversesqrt(dot(vec3(_368, _369, _370), vec3(_368, _369, _370)));
    float _375 = _368 * _374;
    float _376 = _369 * _374;
    float _377 = _370 * _374;
    vec4 _382 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _384 = _382.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _560 = sqrt(((_368 * _368) + (_369 * _369)) + (_370 * _370));
        float _566 = (cbMatDynParam._m0[5u].x * _560) + cbMatDynParam._m0[5u].y;
        float _3646 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
        float _567 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _571 = (cbMatDynParam._m0[5u].z * _560) + cbMatDynParam._m0[5u].w;
        float _3657 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) - _567)) + _567) < ((_384 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _396 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _397 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _417 = fma(_295, cbSceneParam._m0[5u].z, fma(_294, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _293));
    float _420 = fma(_295, cbSceneParam._m0[6u].z, fma(_294, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _293));
    float _423 = fma(_295, cbSceneParam._m0[7u].z, fma(_294, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _293));
    uint _436 = uint(roundEven(NORMAL.w)) * 13u;
    uint _438 = _436 + 9u;
    uint _439 = _438 + uint(cbMatDynParam._m0[0u].w);
    float _445 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_439].x;
    float _446 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_439].y;
    float _447 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * cbInstanceData._m0[_439].z;
    float _3668 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _3679 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _451 = 1.0 - _301;
    float _452 = _448 * _451;
    float _453 = _449 * _451;
    float _454 = _450 * _451;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _301;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _301;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _301;
    float _462 = _459 + 0.039999999105930328369140625;
    float _464 = _460 + 0.039999999105930328369140625;
    float _465 = _461 + 0.039999999105930328369140625;
    vec4 _474 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _396, cbSceneParam._m0[86u].y * _397));
    float _477 = _474.x * TEXCOORD_1.w;
    float _478 = dot(vec3(_293, _294, _295), vec3(_375, _376, _377));
    float _481 = _478 * 2.0;
    float _485 = (_481 * _293) - _375;
    float _486 = (_481 * _294) - _376;
    float _487 = (_481 * _295) - _377;
    float _491 = abs(dot(vec3(_375, _376, _377), vec3(_293, _294, _295)));
    float _3701 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _493 = sqrt(_297);
    float _506 = exp2((_493 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_493 * 3.0));
    float _512 = (1.0 - _506) * ((_493 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _513 = _506 * _493;
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _880;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _605 = fma(_549, cbModelParam._m0[26u].z, fma(_545, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _541));
        float _609 = fma(_549, cbModelParam._m0[27u].z, fma(_545, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _541));
        float _613 = fma(_549, cbModelParam._m0[28u].z, fma(_545, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _541));
        float _638 = _541 + _293;
        float _639 = _545 + _294;
        float _640 = _549 + _295;
        float _650 = fma(_640, cbModelParam._m0[26u].z, fma(_639, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _638)) - _605;
        float _651 = fma(_640, cbModelParam._m0[27u].z, fma(_639, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _638)) - _609;
        float _652 = fma(_640, cbModelParam._m0[28u].z, fma(_639, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _638)) - _613;
        float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
        float _669 = ((_656 * _650) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_605 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _670 = ((_656 * _651) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_609 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_656 * _652) / cbModelParam._m0[34u].z) + ((((((_613 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        float _708 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_674.x + (-0.5));
        float _710 = _708 * (_674.y + (-0.5));
        float _711 = _708 * (_674.z + (-0.5));
        float _718 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_681.x + (-0.5));
        float _720 = _718 * (_681.y + (-0.5));
        float _721 = _718 * (_681.z + (-0.5));
        float _728 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_688.x + (-0.5));
        float _730 = _728 * (_688.y + (-0.5));
        float _731 = _728 * (_688.z + (-0.5));
        float _738 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_695.x + (-0.5));
        float _740 = _738 * (_695.y + (-0.5));
        float _741 = _738 * (_695.z + (-0.5));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = _709 * 0.5;
        float _746 = _719 * 0.5;
        float _747 = _729 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _762 = (dot(vec3(_293, _294, _295), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _772 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3749 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_774 + 1.0))) + _779) * _742;
        float _789 = _710 * 0.5;
        float _790 = _720 * 0.5;
        float _791 = _730 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _805 = (dot(vec3(_293, _294, _295), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _814 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3782 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_816 + 1.0))) + _821) * _743;
        float _831 = _711 * 0.5;
        float _832 = _721 * 0.5;
        float _833 = _731 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(_293, _294, _295), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3815 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_858 + 1.0))) + _863) * _744;
        _880 = _711;
        _882 = _710;
        _883 = _709;
        _884 = _721;
        _885 = _720;
        _886 = _719;
        _887 = _731;
        _888 = _730;
        _889 = _729;
        _890 = _744;
        _891 = _743;
        _892 = _742;
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
    }
    else
    {
        _880 = _881;
        _882 = _881;
        _883 = _881;
        _884 = _881;
        _885 = _881;
        _886 = _881;
        _887 = _881;
        _888 = _881;
        _889 = _881;
        _890 = _881;
        _891 = _881;
        _892 = _881;
        _893 = 0.0;
        _894 = 0.0;
        _895 = 0.0;
    }
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _924 = fma(_549, cbModelParam._m0[30u].z, fma(_545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _541));
        float _928 = fma(_549, cbModelParam._m0[31u].z, fma(_545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _541));
        float _932 = fma(_549, cbModelParam._m0[32u].z, fma(_545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _541));
        float _955 = _541 + _293;
        float _956 = _545 + _294;
        float _957 = _549 + _295;
        float _967 = fma(_957, cbModelParam._m0[30u].z, fma(_956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955)) - _924;
        float _968 = fma(_957, cbModelParam._m0[31u].z, fma(_956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955)) - _928;
        float _969 = fma(_957, cbModelParam._m0[32u].z, fma(_956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955)) - _932;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_924 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_928 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[35u].z) + ((((((_932 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1023 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_990.x + (-0.5));
        float _1025 = _1023 * (_990.y + (-0.5));
        float _1026 = _1023 * (_990.z + (-0.5));
        float _1033 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_997.x + (-0.5));
        float _1035 = _1033 * (_997.y + (-0.5));
        float _1036 = _1033 * (_997.z + (-0.5));
        float _1043 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1004.x + (-0.5));
        float _1045 = _1043 * (_1004.y + (-0.5));
        float _1046 = _1043 * (_1004.z + (-0.5));
        float _1053 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1011.x + (-0.5));
        float _1055 = _1053 * (_1011.y + (-0.5));
        float _1056 = _1053 * (_1011.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_293, _294, _295), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3878 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1087 + 1.0))) + _1092) * _1057;
        float _1102 = _1025 * 0.5;
        float _1103 = _1035 * 0.5;
        float _1104 = _1045 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_293, _294, _295), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3911 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1129 + 1.0))) + _1134) * _1058;
        float _1144 = _1026 * 0.5;
        float _1145 = _1036 * 0.5;
        float _1146 = _1046 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_293, _294, _295), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3944 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1171 + 1.0))) + _1176) * _1059;
        _1193 = _1026;
        _1194 = _1025;
        _1195 = _1024;
        _1196 = _1036;
        _1197 = _1035;
        _1198 = _1034;
        _1199 = _1046;
        _1200 = _1045;
        _1201 = _1044;
        _1202 = _1059;
        _1203 = _1058;
        _1204 = _1057;
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
    }
    else
    {
        _1193 = _881;
        _1194 = _881;
        _1195 = _881;
        _1196 = _881;
        _1197 = _881;
        _1198 = _881;
        _1199 = _881;
        _1200 = _881;
        _1201 = _881;
        _1202 = _881;
        _1203 = _881;
        _1204 = _881;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _893)) + _893;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _894)) + _894;
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _895)) + _895;
    float _1240 = fma(_1219, cbSceneParam._m0[89u].z, fma(_1218, cbSceneParam._m0[89u].y, _1217 * cbSceneParam._m0[89u].x));
    float _1243 = fma(_1219, cbSceneParam._m0[90u].z, fma(_1218, cbSceneParam._m0[90u].y, _1217 * cbSceneParam._m0[90u].x));
    float _1246 = fma(_1219, cbSceneParam._m0[91u].z, fma(_1218, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1217));
    float _1261 = _485 * 0.5;
    float _1262 = _486 * 0.5;
    float _1263 = _487 * 0.5;
    float _1264 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1267 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1270 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1304;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1277 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_880, _884, _887, _890));
        float _1281 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_882, _885, _888, _891));
        float _1285 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_883, _886, _889, _892));
        float _1292 = dot(vec4(cbModelParam._m0[39u]), vec4(_1261, _1262, _1263, 1.0));
        _1304 = dot(vec3(isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1292) ? 0.0 : (isnan(0.0) ? _1292 : max(0.0, _1292))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1304 = 1.0;
    }
    float _1315;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1306 = dot(vec4(cbModelParam._m0[40u]), vec4(_1261, _1262, _1263, 1.0));
        _1315 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1315 = 1.0;
    }
    float _1319 = (_1315 * cbModelParam._m0[1u].x) + (_1304 * (1.0 - cbModelParam._m0[1u].x));
    float _1329 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _297);
    float _1330 = isnan(_1329) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1329 : min(cbModelParam._m0[25u].z, _1329));
    float _1412;
    float _1414;
    float _1416;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1379 = fma(_549, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _541)) + cbModelParam._m0[13u].w;
        float _1383 = fma(_549, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _541)) + cbModelParam._m0[14u].w;
        float _1387 = fma(_549, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _541)) + cbModelParam._m0[15u].w;
        float _1390 = fma(_487, cbModelParam._m0[13u].z, fma(_486, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _485));
        float _1393 = fma(_487, cbModelParam._m0[14u].z, fma(_486, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _485));
        float _1396 = fma(_487, cbModelParam._m0[15u].z, fma(_486, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _485));
        float _1424;
        if (_1390 > 0.0)
        {
            _1424 = abs((1.0 - _1379) / _1390);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1379 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1424 = frontier_phi_17_15_ladder;
        }
        float _1600;
        if (_1393 > 0.0)
        {
            _1600 = abs((1.0 - _1383) / _1393);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1383 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1600 = frontier_phi_26_22_ladder;
        }
        float _1896;
        if (_1396 > 0.0)
        {
            _1896 = abs((1.0 - _1387) / _1396);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1387 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1896 = frontier_phi_38_33_ladder;
        }
        float _1898 = isnan(_1600) ? _1424 : (isnan(_1424) ? _1600 : min(_1424, _1600));
        float _1899 = isnan(_1896) ? _1898 : (isnan(_1898) ? _1896 : min(_1898, _1896));
        float _1903 = (_1899 * _1390) + _1379;
        float _1904 = (_1899 * _1393) + _1383;
        float _1905 = (_1899 * _1396) + _1387;
        float _1906 = _1899 * 9.9999997473787516355514526367188e-05;
        float _1908 = (-1.0) - _1906;
        float _1910 = _1906 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1905 > _1910) || ((_1905 < _1908) || ((_1904 > _1910) || ((_1904 < _1908) || ((_1903 < _1908) || (_1903 > _1910))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2050 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1905, cbModelParam._m0[9u].z, fma(_1904, cbModelParam._m0[9u].y, _1903 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1905, cbModelParam._m0[10u].z, fma(_1904, cbModelParam._m0[10u].y, _1903 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1905, cbModelParam._m0[11u].z, fma(_1904, cbModelParam._m0[11u].y, _1903 * cbModelParam._m0[11u].x))), _1330);
            frontier_phi_16_38_ladder = _2050.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2050.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2050.x * cbModelParam._m0[1u].y;
        }
        _1412 = frontier_phi_16_38_ladder_2;
        _1414 = frontier_phi_16_38_ladder_1;
        _1416 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_485, _486, _487), _1330);
        _1412 = _1400.x * cbModelParam._m0[1u].y;
        _1414 = _1400.y * cbModelParam._m0[1u].y;
        _1416 = _1400.z * cbModelParam._m0[1u].y;
    }
    float _1420 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _297);
    float _1421 = isnan(_1420) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1420 : min(cbModelParam._m0[25u].w, _1420));
    float _1514;
    float _1516;
    float _1518;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1478 = fma(_549, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _541)) + cbModelParam._m0[21u].w;
        float _1482 = fma(_549, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _541)) + cbModelParam._m0[22u].w;
        float _1486 = fma(_549, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _541)) + cbModelParam._m0[23u].w;
        float _1489 = fma(_487, cbModelParam._m0[21u].z, fma(_486, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _485));
        float _1492 = fma(_487, cbModelParam._m0[22u].z, fma(_486, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _485));
        float _1495 = fma(_487, cbModelParam._m0[23u].z, fma(_486, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _485));
        float _1605;
        if (_1489 > 0.0)
        {
            _1605 = abs((1.0 - _1478) / _1489);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1478 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1605 = frontier_phi_28_24_ladder;
        }
        float _1923;
        if (_1492 > 0.0)
        {
            _1923 = abs((1.0 - _1482) / _1492);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1482 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1923 = frontier_phi_40_35_ladder;
        }
        float _2261;
        if (_1495 > 0.0)
        {
            _2261 = abs((1.0 - _1486) / _1495);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1486 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2261 = frontier_phi_50_47_ladder;
        }
        float _2263 = isnan(_1923) ? _1605 : (isnan(_1605) ? _1923 : min(_1605, _1923));
        float _2264 = isnan(_2261) ? _2263 : (isnan(_2263) ? _2261 : min(_2263, _2261));
        float _2268 = (_2264 * _1489) + _1478;
        float _2269 = (_2264 * _1492) + _1482;
        float _2270 = (_2264 * _1495) + _1486;
        float _2271 = _2264 * 9.9999997473787516355514526367188e-05;
        float _2272 = (-1.0) - _2271;
        float _2274 = _2271 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2270 > _2274) || ((_2270 < _2272) || ((_2269 > _2274) || ((_2269 < _2272) || ((_2268 < _2272) || (_2268 > _2274))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2392 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2270, cbModelParam._m0[17u].z, fma(_2269, cbModelParam._m0[17u].y, _2268 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2270, cbModelParam._m0[18u].z, fma(_2269, cbModelParam._m0[18u].y, _2268 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2270, cbModelParam._m0[19u].z, fma(_2269, cbModelParam._m0[19u].y, _2268 * cbModelParam._m0[19u].x))), _1421);
            frontier_phi_25_50_ladder = _2392.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2392.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2392.x * cbModelParam._m0[1u].z;
        }
        _1514 = frontier_phi_25_50_ladder_2;
        _1516 = frontier_phi_25_50_ladder_1;
        _1518 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1498 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_485, _486, _487), _1421);
        _1514 = _1498.x * cbModelParam._m0[1u].z;
        _1516 = _1498.y * cbModelParam._m0[1u].z;
        _1518 = _1498.z * cbModelParam._m0[1u].z;
    }
    float _1531 = (((_512 * _462) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1514 - _1412)) + _1412);
    float _1533 = (((_512 * _464) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1516 - _1414)) + _1414);
    float _1535 = (((_512 * _465) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1518 - _1416)) + _1416);
    float _1538 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1533, cbSceneParam._m0[89u].y, _1531 * cbSceneParam._m0[89u].x));
    float _1541 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1533, cbSceneParam._m0[90u].y, _1531 * cbSceneParam._m0[90u].x));
    float _1544 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1533, cbSceneParam._m0[91u].y, _1531 * cbSceneParam._m0[91u].x));
    float _1579 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1583 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1587 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1591 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1592 = _1579 / _1591;
    float _1593 = _1583 / _1591;
    float _1594 = _1587 / _1591;
    float _1741;
    float _1742;
    float _1743;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1621 = ((uint(_1594 > cbSceneParam._m0[59u].y) + uint(_1594 > cbSceneParam._m0[59u].x)) + uint(_1594 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1622 = _1621 + 43u;
        uint _1630 = _1621 + 44u;
        uint _1638 = _1621 + 45u;
        uint _1646 = _1621 + 46u;
        float _1657 = fma(_1591, cbSceneParam._m0[_1622].w, fma(_1587, cbSceneParam._m0[_1622].z, fma(_1583, cbSceneParam._m0[_1622].y, _1579 * cbSceneParam._m0[_1622].x)));
        float _1661 = fma(_1591, cbSceneParam._m0[_1630].w, fma(_1587, cbSceneParam._m0[_1630].z, fma(_1583, cbSceneParam._m0[_1630].y, _1579 * cbSceneParam._m0[_1630].x)));
        float _1669 = fma(_1591, cbSceneParam._m0[_1646].w, fma(_1587, cbSceneParam._m0[_1646].z, fma(_1583, cbSceneParam._m0[_1646].y, _1579 * cbSceneParam._m0[_1646].x)));
        float _1674 = cbSceneParam._m0[33u].z * _1669;
        float _1676 = cbSceneParam._m0[33u].w * _1669;
        float _1679 = fma(_1591, cbSceneParam._m0[_1638].w, fma(_1587, cbSceneParam._m0[_1638].z, fma(_1583, cbSceneParam._m0[_1638].y, _1579 * cbSceneParam._m0[_1638].x))) / _1669;
        float _1727 = (cbSceneParam._m0[33u].x - sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594))) * cbSceneParam._m0[33u].y;
        float _4070 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1734 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1674 + _1657) / _1669, (_1676 + _1661) / _1669), _1679), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1676 + _1657) / _1669, (_1661 - _1674) / _1669), _1679), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1657 - _1674) / _1669, (_1661 - _1676) / _1669), _1679), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1657 - _1676) / _1669, (_1674 + _1661) / _1669), _1679), 0.0)).x), vec4(0.25)));
        _1741 = 1.0 - (_1734 * cbSceneParam._m0[34u].x);
        _1742 = 1.0 - (_1734 * cbSceneParam._m0[34u].y);
        _1743 = 1.0 - (_1734 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1741 = 1.0;
        _1742 = 1.0;
        _1743 = 1.0;
    }
    float _1807;
    float _1809;
    float _1811;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1795 = fma(_1591, cbSceneParam._m0[63u].w, fma(_1587, cbSceneParam._m0[63u].z, fma(_1583, cbSceneParam._m0[63u].y, _1579 * cbSceneParam._m0[63u].x)));
        float _1796 = fma(_1591, cbSceneParam._m0[60u].w, fma(_1587, cbSceneParam._m0[60u].z, fma(_1583, cbSceneParam._m0[60u].y, _1579 * cbSceneParam._m0[60u].x))) / _1795;
        float _1797 = fma(_1591, cbSceneParam._m0[61u].w, fma(_1587, cbSceneParam._m0[61u].z, fma(_1583, cbSceneParam._m0[61u].y, _1579 * cbSceneParam._m0[61u].x))) / _1795;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1796 >= cbSceneParam._m0[64u].x) && (_1797 >= cbSceneParam._m0[64u].y)) && (_1796 <= cbSceneParam._m0[64u].z)) && (_1797 <= cbSceneParam._m0[64u].w))
        {
            float _1936 = fma(_1591, cbSceneParam._m0[62u].w, fma(_1587, cbSceneParam._m0[62u].z, fma(_1583, cbSceneParam._m0[62u].y, _1579 * cbSceneParam._m0[62u].x))) / _1795;
            float _1940 = isnan(cbSceneParam._m0[41u].w) ? _1936 : (isnan(_1936) ? cbSceneParam._m0[41u].w : max(_1936, cbSceneParam._m0[41u].w));
            float _1983 = (cbSceneParam._m0[33u].x - sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594))) * cbSceneParam._m0[33u].y;
            float _4086 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
            float _1990 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1796, cbSceneParam._m0[33u].w + _1797), _1940), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1796, _1797 - cbSceneParam._m0[33u].z), _1940), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1796 - cbSceneParam._m0[33u].z, _1797 - cbSceneParam._m0[33u].w), _1940), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1796 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1797), _1940), 0.0)).x), vec4(0.25)));
            float _1994 = 1.0 - (_1990 * cbSceneParam._m0[34u].x);
            float _1995 = 1.0 - (_1990 * cbSceneParam._m0[34u].y);
            float _1996 = 1.0 - (_1990 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1996) ? _1743 : (isnan(_1743) ? _1996 : min(_1743, _1996));
            frontier_phi_37_36_ladder_1 = isnan(_1995) ? _1742 : (isnan(_1742) ? _1995 : min(_1742, _1995));
            frontier_phi_37_36_ladder_2 = isnan(_1994) ? _1741 : (isnan(_1741) ? _1994 : min(_1741, _1994));
        }
        else
        {
            frontier_phi_37_36_ladder = _1743;
            frontier_phi_37_36_ladder_1 = _1742;
            frontier_phi_37_36_ladder_2 = _1741;
        }
        _1807 = frontier_phi_37_36_ladder_2;
        _1809 = frontier_phi_37_36_ladder_1;
        _1811 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1807 = _1741;
        _1809 = _1742;
        _1811 = _1743;
    }
    uvec4 _1816 = floatBitsToUint(cbInstanceData._m0[_436 + 5u]);
    uint _1818 = _1816.x * 14u;
    uint _1819 = _1818 + 13u;
    float _1826 = _477 + (-1.0);
    float _1831 = (cbLight._m0[_1819].x * _1826) + 1.0;
    float _1832 = (cbLight._m0[_1819].y * _1826) + 1.0;
    float _1833 = (cbLight._m0[_1819].z * _1826) + 1.0;
    float _1834 = (cbLight._m0[_1819].w * _1826) + 1.0;
    uint _1835 = _1818 + 5u;
    float _1841 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
    uint _1845 = _1818 + 4u;
    float _1855 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
    uint _1859 = _1818 | 1u;
    float _1870 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_293, _294, _295));
    float _1873 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_293, _294, _295));
    float _4122 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _4133 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1878 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.3183098733425140380859375;
    float _1880 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * 0.3183098733425140380859375;
    float _1887 = ((cbLight._m0[_1835].x * _1841) * _1880) + (((cbLight._m0[_1845].x * _1807) * _1855) * _1878);
    float _1888 = ((_1841 * cbLight._m0[_1835].y) * _1880) + (((cbLight._m0[_1845].y * _1809) * _1855) * _1878);
    float _1889 = ((_1841 * cbLight._m0[_1835].z) * _1880) + (((cbLight._m0[_1845].z * _1811) * _1855) * _1878);
    uvec4 _1893 = floatBitsToUint(cbLight._m0[_1818 + 12u]);
    bool _1895 = _1893.x == 0u;
    float _1997;
    float _1999;
    float _2001;
    if (_1895)
    {
        _1997 = _1887;
        _1999 = _1888;
        _2001 = _1889;
    }
    else
    {
        uint _2005 = _1818 + 6u;
        float _2021 = (dot(vec3(cbLight._m0[_1818 + 2u].xyz), vec3(_293, _294, _295)) * 0.5) + 0.5;
        float _2022 = _2021 * _2021;
        float _4144 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2023 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2024 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _1997 = (((cbLight._m0[_2005].x * 0.3183098733425140380859375) * _2023) * _2024) + _1887;
        _1999 = (((cbLight._m0[_2005].y * 0.3183098733425140380859375) * _2023) * _2024) + _1888;
        _2001 = (((cbLight._m0[_2005].z * 0.3183098733425140380859375) * _2023) * _2024) + _1889;
    }
    bool _2004 = _1893.y == 0u;
    float _2059;
    float _2061;
    float _2063;
    if (_2004)
    {
        _2059 = _1997;
        _2061 = _1999;
        _2063 = _2001;
    }
    else
    {
        uint _2232 = _1818 + 7u;
        float _2248 = (dot(vec3(cbLight._m0[_1818 + 3u].xyz), vec3(_293, _294, _295)) * 0.5) + 0.5;
        float _2249 = _2248 * _2248;
        float _4160 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2250 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2251 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _2059 = (((cbLight._m0[_2232].x * 0.3183098733425140380859375) * _2250) * _2251) + _1997;
        _2061 = (((cbLight._m0[_2232].y * 0.3183098733425140380859375) * _2250) * _2251) + _1999;
        _2063 = (((cbLight._m0[_2232].z * 0.3183098733425140380859375) * _2250) * _2251) + _2001;
    }
    uint _2066 = _1818 + 8u;
    float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1818].w)) * _297) * 0.949999988079071044921875);
    float _2080 = _2079 * _2079;
    float _2081 = cbLight._m0[_1818].x + _375;
    float _2082 = cbLight._m0[_1818].y + _376;
    float _2083 = cbLight._m0[_1818].z + _377;
    float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
    float _2088 = _2087 * _2081;
    float _2089 = _2087 * _2082;
    float _2090 = _2087 * _2083;
    float _2091 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1818].xyz));
    float _4176 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _2095 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2096 = dot(vec3(_293, _294, _295), vec3(_2088, _2089, _2090));
    float _4198 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2100 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_2088, _2089, _2090));
    float _4209 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2104 = _2080 * _2080;
    float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
    float _2116 = exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0);
    float _2117 = 0.959999978542327880859375 - _459;
    float _2119 = 0.959999978542327880859375 - _460;
    float _2120 = 0.959999978542327880859375 - _461;
    float _2127 = 1.0 - _2080;
    float _2138 = (0.5 / (((_2095 * ((_2094 * _2127) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2127) + _2080) * _2094))) * _2094;
    float _4220 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2140 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
    uint _2154 = _1818 + 9u;
    float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1859].w)) * _297) * 0.949999988079071044921875);
    float _2166 = _2165 * _2165;
    float _2167 = cbLight._m0[_1859].x + _375;
    float _2168 = cbLight._m0[_1859].y + _376;
    float _2169 = cbLight._m0[_1859].z + _377;
    float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
    float _2174 = _2173 * _2167;
    float _2175 = _2173 * _2168;
    float _2176 = _2173 * _2169;
    float _2177 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1859].xyz));
    float _4231 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2181 = dot(vec3(_293, _294, _295), vec3(_2174, _2175, _2176));
    float _4242 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _2185 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_2174, _2175, _2176));
    float _4253 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2189 = _2166 * _2166;
    float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
    float _2200 = exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0);
    float _2207 = 1.0 - _2166;
    float _2217 = (0.5 / (((_2095 * ((_2180 * _2207) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2207) + _2166) * _2180))) * _2180;
    float _4264 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2219 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
    float _2229 = (((((_2200 * _2117) + _462) * cbLight._m0[_2154].x) * _2219) * _1841) + ((((cbLight._m0[_2066].x * _1807) * ((_2116 * _2117) + _462)) * _2140) * _1855);
    float _2230 = (((((_2200 * _2119) + _464) * cbLight._m0[_2154].y) * _2219) * _1841) + ((((cbLight._m0[_2066].y * _1809) * ((_2116 * _2119) + _464)) * _2140) * _1855);
    float _2231 = (((((_2200 * _2120) + _465) * cbLight._m0[_2154].z) * _2219) * _1841) + ((((cbLight._m0[_2066].z * _1811) * ((_2116 * _2120) + _465)) * _2140) * _1855);
    float _2287;
    float _2289;
    float _2291;
    if (_1895)
    {
        _2287 = _2229;
        _2289 = _2230;
        _2291 = _2231;
    }
    else
    {
        uint _2293 = _1818 + 2u;
        uint _2297 = _1818 + 10u;
        float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _297) * 0.949999988079071044921875);
        float _2312 = _2311 * _2311;
        float _2313 = cbLight._m0[_2293].x + _375;
        float _2314 = cbLight._m0[_2293].y + _376;
        float _2315 = cbLight._m0[_2293].z + _377;
        float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
        float _2320 = _2319 * _2313;
        float _2321 = _2319 * _2314;
        float _2322 = _2319 * _2315;
        float _2323 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_2293].xyz));
        float _4275 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2327 = dot(vec3(_293, _294, _295), vec3(_2320, _2321, _2322));
        float _4286 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2331 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2320, _2321, _2322));
        float _4297 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2335 = _2312 * _2312;
        float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
        float _2346 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
        float _2353 = 1.0 - _2312;
        float _2363 = (0.5 / (((_2095 * ((_2326 * _2353) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2353) + _2312) * _2326))) * _2326;
        float _4308 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2365 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
        float _2366 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _2287 = (((((_2346 * _2117) + _462) * cbLight._m0[_2297].x) * _2365) * _2366) + _2229;
        _2289 = (((((_2346 * _2119) + _464) * cbLight._m0[_2297].y) * _2365) * _2366) + _2230;
        _2291 = (((((_2346 * _2120) + _465) * cbLight._m0[_2297].z) * _2365) * _2366) + _2231;
    }
    float _2397;
    float _2399;
    float _2401;
    if (_2004)
    {
        _2397 = _2287;
        _2399 = _2289;
        _2401 = _2291;
    }
    else
    {
        uint _2408 = _1818 + 3u;
        uint _2412 = _1818 + 11u;
        float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2408].w)) * _297) * 0.949999988079071044921875);
        float _2427 = _2426 * _2426;
        float _2428 = cbLight._m0[_2408].x + _375;
        float _2429 = cbLight._m0[_2408].y + _376;
        float _2430 = cbLight._m0[_2408].z + _377;
        float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
        float _2435 = _2434 * _2428;
        float _2436 = _2434 * _2429;
        float _2437 = _2434 * _2430;
        float _2438 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_2408].xyz));
        float _4324 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2442 = dot(vec3(_293, _294, _295), vec3(_2435, _2436, _2437));
        float _4335 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2446 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_2435, _2436, _2437));
        float _4346 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2450 = _2427 * _2427;
        float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
        float _2461 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
        float _2468 = 1.0 - _2427;
        float _2478 = (0.5 / (((_2095 * ((_2441 * _2468) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2468) + _2427) * _2441))) * _2441;
        float _4357 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2480 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
        float _2481 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _2397 = (((((_2461 * _2117) + _462) * cbLight._m0[_2412].x) * _2480) * _2481) + _2287;
        _2399 = (((((_2461 * _2119) + _464) * cbLight._m0[_2412].y) * _2480) * _2481) + _2289;
        _2401 = (((((_2461 * _2120) + _465) * cbLight._m0[_2412].z) * _2480) * _2481) + _2291;
    }
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    if (_1816.y == 0u)
    {
        uvec4 _2502 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2503 = _2502.x;
        uint _2514 = uint((float(_2502.y) * floor(float(uint(cbSceneParam._m0[85u].y * _397) / _2503))) + floor(float(uint(cbSceneParam._m0[85u].x * _396) / _2503)));
        float _2524 = (log2(_1594 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2525 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        uint _2528 = uint(isnan(14.0) ? _2525 : (isnan(_2525) ? 14.0 : min(_2525, 14.0)));
        uvec4 _2533 = texelFetch(g_lightClusterGridBuffer, int(((_2528 << 2u) + (_2514 << 6u)) >> 2u));
        uint _2534 = _2533.x;
        uint _2535 = _2502.z;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        if (((((1u << ((_2535 >> 4u) & 15u)) + 4294967295u) & _2534) == 0u) || ((_2535 & 240u) == 0u))
        {
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
        }
        else
        {
            float _2617;
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            uint _2775 = 0u;
            uint _2784;
            bool _2785;
            for (;;)
            {
                _2784 = texelFetch(g_lightClassification, int((((_2528 << 5u) + (_2514 << 9u)) + (_2775 << 2u)) >> 2u)).x;
                _2785 = _2784 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2785)
                {
                    frontier_phi_71_pred = _2774;
                    frontier_phi_71_pred_1 = _2773;
                    frontier_phi_71_pred_2 = _2772;
                    frontier_phi_71_pred_3 = _2771;
                    frontier_phi_71_pred_4 = _2770;
                    frontier_phi_71_pred_5 = _2769;
                }
                else
                {
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    uint _2920;
                    _2914 = _2769;
                    _2915 = _2770;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2784;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    for (;;)
                    {
                        uint _2924 = uint(findLSB(_2920)) + (_2775 << 5u);
                        uint _2921 = (_2920 + 4294967295u) & _2920;
                        uint _2926 = _2924 * 48u;
                        vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 3u)).x));
                        uint _2946 = (_2924 * 48u) + 4u;
                        vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 3u)).x));
                        uint _2965 = (_2924 * 48u) + 8u;
                        vec3 _2976 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x));
                        float _2980 = _2940.x - _1592;
                        float _2981 = _2940.y - _1593;
                        float _2982 = _2940.z - _1594;
                        float _2983 = dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982));
                        float _2986 = inversesqrt(_2983);
                        float _2987 = _2986 * _2980;
                        float _2988 = _2986 * _2981;
                        float _2989 = _2986 * _2982;
                        float _2990 = dot(vec3(_417, _420, _423), vec3(_2987, _2988, _2989));
                        float _2995 = 1.0 - (_2983 * _2940.w);
                        float _4383 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2996 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _2997 = sqrt(_2983) * _2959.w;
                        float _3000 = 1.39999997615814208984375 / (_2997 + 1.39999997615814208984375);
                        float _3001 = _3000 * _3000;
                        float _3004 = ((1.0 - _3001) * _2990) + _3001;
                        float _3007 = _2997 * _2997;
                        float _3011 = ((isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))) * _2996) / ((_3007 * 0.699999988079071044921875) + 1.0);
                        float _3015 = (-0.0) - _1592;
                        float _3016 = (-0.0) - _1593;
                        float _3017 = (-0.0) - _1594;
                        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                        float _3022 = _3021 * _3015;
                        float _3023 = _3021 * _3016;
                        float _3024 = _3021 * _3017;
                        float _3031 = exp2(log2(1.0 / ((_3007 * 3.5) + 5.0)) * 0.25);
                        float _3032 = 1.0 - _493;
                        float _3039 = sqrt(1.0 - ((1.0 - (_3032 * _3032)) * (1.0 - (_3031 * _3031))));
                        float _3040 = _3039 * _3039;
                        float _3041 = _3040 * _3040;
                        float _3042 = _3022 + _2987;
                        float _3043 = _3023 + _2988;
                        float _3044 = _3024 + _2989;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3052 = dot(vec3(_417, _420, _423), vec3(_3022, _3023, _3024));
                        float _4399 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3055 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3056 = dot(vec3(_417, _420, _423), vec3(_3048 * _3042, _3048 * _3043, _3048 * _3044));
                        float _4410 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3063 = ((_3059 * _3059) * (_3041 + (-1.0))) + 1.0;
                        float _3064 = _3000 * _3040;
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _2990) + _3065;
                        float _4421 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3070 = 1.0 - _3040;
                        float _3080 = (0.5 / (((_3069 * ((_3055 * _3070) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_3069 * _3070) + _3040) * _3055))) * _3069;
                        float _4432 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3091 = (((_3041 * 3.1415927410125732421875) * (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) / ((_3063 * _3063) * ((_3007 * 2.1991131305694580078125) + 3.141590118408203125))) * _2996;
                        _2844 = (_3011 * _2959.x) + _2917;
                        _2845 = (_3011 * _2959.y) + _2918;
                        _2846 = (_3011 * _2959.z) + _2919;
                        _2841 = (_3091 * _2976.x) + _2914;
                        _2842 = (_3091 * _2976.y) + _2915;
                        _2843 = (_3091 * _2976.z) + _2916;
                        if (_2921 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2914 = _2841;
                            _2915 = _2842;
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2921;
                        }
                    }
                    frontier_phi_71_pred = _2846;
                    frontier_phi_71_pred_1 = _2845;
                    frontier_phi_71_pred_2 = _2844;
                    frontier_phi_71_pred_3 = _2843;
                    frontier_phi_71_pred_4 = _2842;
                    frontier_phi_71_pred_5 = _2841;
                }
                _2627 = frontier_phi_71_pred;
                _2625 = frontier_phi_71_pred_1;
                _2623 = frontier_phi_71_pred_2;
                _2621 = frontier_phi_71_pred_3;
                _2619 = frontier_phi_71_pred_4;
                _2617 = frontier_phi_71_pred_5;
                uint _2776 = _2775 + 1u;
                if (_2776 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2769 = _2617;
                    _2770 = _2619;
                    _2771 = _2621;
                    _2772 = _2623;
                    _2773 = _2625;
                    _2774 = _2627;
                    _2775 = _2776;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
        }
        uvec4 _2630 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2631 = _2630.z;
        uint _2633 = (_2631 >> 8u) & 15u;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        if (((4294967295u << _2633) & _2534) == 0u)
        {
            _2737 = _2616;
            _2739 = _2618;
            _2741 = _2620;
            _2743 = _2622;
            _2745 = _2624;
            _2747 = _2626;
        }
        else
        {
            float _2762 = inversesqrt(dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594)));
            float _2763 = _2762 * _1592;
            float _2764 = _2762 * _1593;
            float _2765 = _2762 * _1594;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2633 < ((_2631 >> 12u) & 15u))
            {
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2897 = _2616;
                float _2898 = _2618;
                float _2899 = _2620;
                float _2900 = _2622;
                float _2901 = _2624;
                float _2902 = _2626;
                uint _2903 = _2633;
                uint _2912;
                bool _2913;
                for (;;)
                {
                    _2912 = texelFetch(g_lightClassification, int((((_2528 << 5u) + (_2514 << 9u)) + (_2903 << 2u)) >> 2u)).x;
                    _2913 = _2912 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2913)
                    {
                        frontier_phi_82_pred = _2902;
                        frontier_phi_82_pred_1 = _2901;
                        frontier_phi_82_pred_2 = _2900;
                        frontier_phi_82_pred_3 = _2899;
                        frontier_phi_82_pred_4 = _2898;
                        frontier_phi_82_pred_5 = _2897;
                    }
                    else
                    {
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3118 = _2897;
                        float _3119 = _2898;
                        float _3120 = _2899;
                        float _3121 = _2900;
                        float _3122 = _2901;
                        float _3123 = _2902;
                        uint _3124 = _2912;
                        uint _3125;
                        vec4 _3150;
                        float _3151;
                        vec4 _3166;
                        vec3 _3178;
                        vec4 _3194;
                        vec4 _3210;
                        float _3257;
                        bool _3258;
                        for (;;)
                        {
                            uint _3135 = ((_2903 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3124));
                            _3125 = (_3124 + 4294967295u) & _3124;
                            uint _3137 = _3135 * 40u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            _3151 = _3150.w;
                            uint _3153 = (_3135 * 40u) + 4u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3168 = (_3135 * 40u) + 8u;
                            _3178 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x));
                            uint _3181 = (_3135 * 40u) + 16u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3197 = (_3135 * 40u) + 20u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3213 = (_3135 * 40u) + 24u;
                            vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3232 = (_3135 * 40u) + 28u;
                            vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            _3257 = fma(_1594, _3245.z, fma(_1593, _3245.y, _3245.x * _1592)) + _3245.w;
                            _3258 = !((fma(_1594, _3226.z, fma(_1593, _3226.y, _3226.x * _1592)) + _3226.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3258)
                            {
                                float _3285 = _3150.x - _1592;
                                float _3286 = _3150.y - _1593;
                                float _3287 = _3150.z - _1594;
                                float _3288 = dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287));
                                float _3291 = inversesqrt(_3288);
                                float _3292 = _3291 * _3285;
                                float _3293 = _3291 * _3286;
                                float _3294 = _3291 * _3287;
                                float _3298 = 1.0 - (_3288 / (_3151 * _3151));
                                float _4443 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3303 = sqrt(_3288) * _3166.w;
                                float _3305 = 1.39999997615814208984375 / (_3303 + 1.39999997615814208984375);
                                float _3306 = _3305 * _3305;
                                float _3309 = ((1.0 - _3306) * dot(vec3(_3292, _3293, _3294), vec3(_417, _420, _423))) + _3306;
                                float _3312 = _3303 * _3303;
                                float _3316 = (fma(_1594, _3194.z, fma(_1593, _3194.y, _3194.x * _1592)) + _3194.w) / _3257;
                                float _3317 = (fma(_1594, _3210.z, fma(_1593, _3210.y, _3210.x * _1592)) + _3210.w) / _3257;
                                float _3321 = 1.0 - dot(vec2(_3316, _3317), vec2(_3316, _3317));
                                float _4459 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3322 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3323 = _3322 * (((isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0))) * _3299) / ((_3312 * 0.699999988079071044921875) + 1.0));
                                float _3335 = exp2(log2(1.0 / ((_3312 * 3.5) + 5.0)) * 0.25);
                                float _3336 = 1.0 - _493;
                                float _3343 = sqrt(1.0 - ((1.0 - (_3336 * _3336)) * (1.0 - (_3335 * _3335))));
                                float _3344 = _3343 * _3343;
                                float _3345 = _3344 * _3344;
                                float _3346 = _3292 - _2763;
                                float _3347 = _3293 - _2764;
                                float _3348 = _3294 - _2765;
                                float _3352 = inversesqrt(dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348)));
                                float _3356 = dot(vec3(_417, _420, _423), vec3((-0.0) - _2763, (-0.0) - _2764, (-0.0) - _2765));
                                float _4470 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3359 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3360 = dot(vec3(_417, _420, _423), vec3(_3352 * _3346, _3352 * _3347, _3352 * _3348));
                                float _4481 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3363 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3367 = ((_3363 * _3363) * (_3345 + (-1.0))) + 1.0;
                                float _3368 = _3305 * _3344;
                                float _3369 = _3368 * _3368;
                                float _3375 = ((1.0 - _3369) * dot(vec3(_417, _420, _423), vec3(_3292, _3293, _3294))) + _3369;
                                float _4492 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3376 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3377 = 1.0 - _3344;
                                float _3387 = (0.5 / (((_3376 * ((_3359 * _3377) + _3344)) + 9.9999999392252902907785028219223e-09) + (((_3376 * _3377) + _3344) * _3359))) * _3376;
                                float _4503 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3397 = (_3322 * _3299) * (((_3345 * 3.1415927410125732421875) * (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) / ((_3367 * _3367) * ((_3312 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3323 * _3166.z;
                                frontier_phi_88_pred_1 = _3323 * _3166.y;
                                frontier_phi_88_pred_2 = _3323 * _3166.x;
                                frontier_phi_88_pred_3 = _3397 * _3178.z;
                                frontier_phi_88_pred_4 = _3397 * _3178.y;
                                frontier_phi_88_pred_5 = _3397 * _3178.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3406 = frontier_phi_88_pred;
                            _3405 = frontier_phi_88_pred_1;
                            _3404 = frontier_phi_88_pred_2;
                            _3403 = frontier_phi_88_pred_3;
                            _3402 = frontier_phi_88_pred_4;
                            _3401 = frontier_phi_88_pred_5;
                            _3108 = _3404 + _3121;
                            _3109 = _3405 + _3122;
                            _3110 = _3406 + _3123;
                            _3105 = _3401 + _3118;
                            _3106 = _3402 + _3119;
                            _3107 = _3403 + _3120;
                            if (_3125 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3125;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3110;
                        frontier_phi_82_pred_1 = _3109;
                        frontier_phi_82_pred_2 = _3108;
                        frontier_phi_82_pred_3 = _3107;
                        frontier_phi_82_pred_4 = _3106;
                        frontier_phi_82_pred_5 = _3105;
                    }
                    _2748 = frontier_phi_82_pred;
                    _2746 = frontier_phi_82_pred_1;
                    _2744 = frontier_phi_82_pred_2;
                    _2742 = frontier_phi_82_pred_3;
                    _2740 = frontier_phi_82_pred_4;
                    _2738 = frontier_phi_82_pred_5;
                    uint _2904 = _2903 + 1u;
                    if (_2904 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2897 = _2738;
                        _2898 = _2740;
                        _2899 = _2742;
                        _2900 = _2744;
                        _2901 = _2746;
                        _2902 = _2748;
                        _2903 = _2904;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2744;
                frontier_phi_63_64_ladder_1 = _2748;
                frontier_phi_63_64_ladder_2 = _2746;
                frontier_phi_63_64_ladder_3 = _2742;
                frontier_phi_63_64_ladder_4 = _2740;
                frontier_phi_63_64_ladder_5 = _2738;
            }
            else
            {
                frontier_phi_63_64_ladder = _2622;
                frontier_phi_63_64_ladder_1 = _2626;
                frontier_phi_63_64_ladder_2 = _2624;
                frontier_phi_63_64_ladder_3 = _2620;
                frontier_phi_63_64_ladder_4 = _2618;
                frontier_phi_63_64_ladder_5 = _2616;
            }
            _2737 = frontier_phi_63_64_ladder_5;
            _2739 = frontier_phi_63_64_ladder_4;
            _2741 = frontier_phi_63_64_ladder_3;
            _2743 = frontier_phi_63_64_ladder;
            _2745 = frontier_phi_63_64_ladder_2;
            _2747 = frontier_phi_63_64_ladder_1;
        }
        float _2752 = isnan(1.0) ? _477 : (isnan(_477) ? 1.0 : min(_477, 1.0));
        _2547 = (_2752 * _2743) + _2059;
        _2549 = (_2752 * _2745) + _2061;
        _2551 = (_2752 * _2747) + _2063;
        _2553 = ((_2737 * _462) * _2752) + _2397;
        _2555 = ((_2739 * _464) * _2752) + _2399;
        _2557 = ((_2741 * _465) * _2752) + _2401;
    }
    else
    {
        _2547 = _2059;
        _2549 = _2061;
        _2551 = _2063;
        _2553 = _2397;
        _2555 = _2399;
        _2557 = _2401;
    }
    float _4519 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4530 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4541 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4552 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _2575 = ((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2547 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _477))) + ((_2553 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    float _2576 = ((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2549 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _477))) + ((_2555 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    float _2577 = ((isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2551 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _477))) + ((_2557 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    float _2582 = cbInstanceData._m0[_436 + 6u].w * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)));
    float _2587 = _396 / cbSceneParam._m0[86u].x;
    float _2588 = _397 / cbSceneParam._m0[86u].y;
    vec4 _2602 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2587, _2588, (log2((isnan(cbSceneParam._m0[77u].w) ? _317 : (isnan(_317) ? cbSceneParam._m0[77u].w : min(_317, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2604 = _2602.x;
    float _2605 = _2602.y;
    float _2606 = _2602.z;
    float _2607 = _2602.w;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    if (_317 > cbSceneParam._m0[78u].w)
    {
        float _2641 = isnan(_317) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _317 : min(cbSceneParam._m0[80u].w, _317));
        float _2642 = _2641 / _317;
        float _2653 = _2642 * _368;
        float _2654 = _369 * _2642;
        float _2655 = (-0.0) - _2654;
        float _2657 = _2642 * _370;
        float _2659 = (cbSceneParam._m0[77u].w * _2655) / _2641;
        float _2660 = _2659 + cbSceneParam._m0[79u].w;
        float _2661 = cbSceneParam._m0[79u].w - _2654;
        float _2667 = sqrt(((_2653 * _2653) + (_2654 * _2654)) + (_2657 * _2657));
        float _2670 = (1.0 - (cbSceneParam._m0[77u].w / _2641)) * _2667;
        float _2675 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2677 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2854;
        if (abs((_2655 - _2659) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2854 = ((((_2660 > 0.0) ? exp2(_2675 * _2660) : (2.0 - exp2(_2677 * _2660))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2670;
        }
        else
        {
            float _2798 = 1.0 / cbSceneParam._m0[80u].x;
            float _2799 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : max(_2660, _2661));
            float _2800 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : min(_2660, _2661));
            float _2809 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : min(_2799, 0.0));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            _2854 = ((abs(_2667 / _2655) * cbSceneParam._m0[80u].y) * ((((_2809 - _2810) * 2.0) - ((exp2(_2675 * (isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0)))) - exp2(_2675 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0))))) * _2798)) - ((exp2(_2677 * _2809) - exp2(_2677 * _2810)) * _2798))) + (_2670 * cbSceneParam._m0[80u].z);
        }
        vec4 _2856 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2587, _2588, 1.0), 0.0);
        float _2865 = exp2((_2854 * (-1.44269502162933349609375)) * (1.0 - _2856.w));
        float _2866 = log2(_2865);
        float _2882 = log2(_2607);
        _2679 = (exp2(_2882 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].x)) * _2856.x) / cbSceneParam._m0[78u].x)) + _2604;
        _2681 = (exp2(_2882 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].y)) * _2856.y) / cbSceneParam._m0[78u].y)) + _2605;
        _2683 = (exp2(_2882 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].z)) * _2856.z) / cbSceneParam._m0[78u].z)) + _2606;
        _2685 = _2865 * _2607;
    }
    else
    {
        _2679 = _2604;
        _2681 = _2605;
        _2683 = _2606;
        _2685 = _2607;
    }
    bool _2892;
    vec4 _2695;
    vec4 _2717;
    float _2719;
    float _2723;
    float _2724;
    float _2725;
    float _2726;
    bool _2736;
    for (;;)
    {
        _2695 = cbMatDynParam._m0[0u];
        float _2697 = roundEven(_2695.y);
        bool _2698 = _2697 == 3.0;
        float _2699 = log2(_2685);
        float _2706 = exp2(_2699 * cbSceneParam._m0[78u].x) * _2575;
        float _2707 = exp2(_2699 * cbSceneParam._m0[78u].y) * _2576;
        float _2708 = exp2(_2699 * cbSceneParam._m0[78u].z) * _2577;
        float _2715 = _384 + (-0.5);
        _2717 = cbMtdParam._m0[1u];
        _2719 = _2717.y * _2715;
        float _2722 = (_2697 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2723 = _2722 * (_2698 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2679)));
        _2724 = _2722 * (_2698 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2681)));
        _2725 = _2722 * (_2698 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2683)));
        _2726 = _2715 * 0.999000012874603271484375;
        _2736 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2736)
        {
            if ((cbInstanceData._m0[_436 + 7u].x + _2726) < 0.5)
            {
                _2892 = true;
                break;
            }
        }
        uint _2833 = _438 + uint(_2695.w);
        if ((cbInstanceData._m0[_2833].w < 1.0) && ((cbInstanceData._m0[_2833].w + _2726) < 0.5))
        {
            _2892 = true;
            break;
        }
        if ((_2719 + _236) < _2717.x)
        {
            _2892 = true;
            break;
        }
        _2892 = false;
        break;
    }
    float _3096;
    if (_2892)
    {
        discard_state = true;
        _3096 = 0.0;
    }
    else
    {
        _3096 = _2582;
    }
    SV_Target.x = _2723;
    SV_Target.y = _2724;
    SV_Target.z = _2725;
    SV_Target.w = _3096;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2582;
    discard_exit();
}


