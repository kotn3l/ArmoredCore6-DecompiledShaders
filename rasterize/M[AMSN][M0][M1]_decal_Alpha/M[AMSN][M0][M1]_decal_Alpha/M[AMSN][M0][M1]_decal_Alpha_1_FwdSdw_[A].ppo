#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _846;
float _3501;
float _3502;
float _3503;
float _3504;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _229 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = (cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _229.x;
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _246.z;
    float _254 = (_246.x * 2.0) + (-1.0);
    float _256 = (_246.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3513 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))));
    float _266 = fma(_263, _195 * NORMAL.x, fma(_256, _202 * TANGENT.x, (_188 * _180) * _254));
    float _269 = fma(_263, _195 * NORMAL.y, fma(_256, _202 * TANGENT.y, (_188 * _181) * _254));
    float _272 = fma(_263, _195 * NORMAL.z, fma(_256, _202 * TANGENT.z, (_188 * _182) * _254));
    float _276 = inversesqrt(dot(vec3(_266, _269, _272), vec3(_266, _269, _272)));
    float _277 = _276 * _266;
    float _278 = _276 * _269;
    float _279 = _276 * _272;
    float _3524 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _280 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _281 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3557 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3568 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _300 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _341 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _351 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _341);
    float _352 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _341);
    float _353 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _341);
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _351 * _357;
    float _359 = _352 * _357;
    float _360 = _353 * _357;
    vec4 _365 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _367 = _365.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _525 = sqrt(((_351 * _351) + (_352 * _352)) + (_353 * _353));
        float _531 = (cbMatDynParam._m0[5u].x * _525) + cbMatDynParam._m0[5u].y;
        float _3579 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
        float _532 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _536 = (cbMatDynParam._m0[5u].z * _525) + cbMatDynParam._m0[5u].w;
        float _3590 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) - _532)) + _532) < ((_367 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _379 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _380 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _400 = fma(_279, cbSceneParam._m0[5u].z, fma(_278, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _277));
    float _403 = fma(_279, cbSceneParam._m0[6u].z, fma(_278, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _277));
    float _406 = fma(_279, cbSceneParam._m0[7u].z, fma(_278, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _277));
    uint _419 = uint(roundEven(NORMAL.w)) * 13u;
    uint _421 = _419 + 9u;
    uint _422 = _421 + uint(cbMatDynParam._m0[0u].w);
    float _428 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) * cbInstanceData._m0[_422].x;
    float _429 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * cbInstanceData._m0[_422].y;
    float _430 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * cbInstanceData._m0[_422].z;
    float _3601 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _3612 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _3623 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    vec4 _442 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _379, cbSceneParam._m0[86u].y * _380));
    float _445 = _442.x * TEXCOORD_1.w;
    float _446 = dot(vec3(_277, _278, _279), vec3(_358, _359, _360));
    float _449 = _446 * 2.0;
    float _453 = (_449 * _277) - _358;
    float _454 = (_449 * _278) - _359;
    float _455 = (_449 * _279) - _360;
    float _459 = abs(dot(vec3(_358, _359, _360), vec3(_277, _278, _279)));
    float _3634 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _461 = sqrt(_281);
    float _474 = exp2((_461 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_461 * 3.0));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _845;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _570 = fma(_514, cbModelParam._m0[26u].z, fma(_510, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _506));
        float _574 = fma(_514, cbModelParam._m0[27u].z, fma(_510, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _506));
        float _578 = fma(_514, cbModelParam._m0[28u].z, fma(_510, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _506));
        float _603 = _506 + _277;
        float _604 = _510 + _278;
        float _605 = _514 + _279;
        float _615 = fma(_605, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603)) - _570;
        float _616 = fma(_605, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603)) - _574;
        float _617 = fma(_605, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603)) - _578;
        float _621 = inversesqrt(dot(vec3(_615, _616, _617), vec3(_615, _616, _617)));
        float _634 = ((_621 * _615) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_570 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_621 * _616) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_574 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_621 * _617) / cbModelParam._m0[34u].z) + ((((((_578 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        float _673 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_639.x + (-0.5));
        float _675 = _673 * (_639.y + (-0.5));
        float _676 = _673 * (_639.z + (-0.5));
        float _683 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_646.x + (-0.5));
        float _685 = _683 * (_646.y + (-0.5));
        float _686 = _683 * (_646.z + (-0.5));
        float _693 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_653.x + (-0.5));
        float _695 = _693 * (_653.y + (-0.5));
        float _696 = _693 * (_653.z + (-0.5));
        float _703 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_660.x + (-0.5));
        float _705 = _703 * (_660.y + (-0.5));
        float _706 = _703 * (_660.z + (-0.5));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = _674 * 0.5;
        float _711 = _684 * 0.5;
        float _712 = _694 * 0.5;
        float _713 = dot(vec3(_710, _711, _712), vec3(_710, _711, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _727 = (dot(vec3(_277, _278, _279), vec3(_718 * _710, _718 * _711, _718 * _712)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _737 = sqrt(((_711 * _711) + (_710 * _710)) + (_712 * _712)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3682 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_739 + 1.0))) + _744) * _707;
        float _754 = _675 * 0.5;
        float _755 = _685 * 0.5;
        float _756 = _695 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_277, _278, _279), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3715 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_781 + 1.0))) + _786) * _708;
        float _796 = _676 * 0.5;
        float _797 = _686 * 0.5;
        float _798 = _696 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_277, _278, _279), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3748 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_823 + 1.0))) + _828) * _709;
        _845 = _676;
        _847 = _675;
        _848 = _674;
        _849 = _686;
        _850 = _685;
        _851 = _684;
        _852 = _696;
        _853 = _695;
        _854 = _694;
        _855 = _709;
        _856 = _708;
        _857 = _707;
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
    }
    else
    {
        _845 = _846;
        _847 = _846;
        _848 = _846;
        _849 = _846;
        _850 = _846;
        _851 = _846;
        _852 = _846;
        _853 = _846;
        _854 = _846;
        _855 = _846;
        _856 = _846;
        _857 = _846;
        _858 = 0.0;
        _859 = 0.0;
        _860 = 0.0;
    }
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _889 = fma(_514, cbModelParam._m0[30u].z, fma(_510, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _506));
        float _893 = fma(_514, cbModelParam._m0[31u].z, fma(_510, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _506));
        float _897 = fma(_514, cbModelParam._m0[32u].z, fma(_510, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _506));
        float _920 = _506 + _277;
        float _921 = _510 + _278;
        float _922 = _514 + _279;
        float _932 = fma(_922, cbModelParam._m0[30u].z, fma(_921, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920)) - _889;
        float _933 = fma(_922, cbModelParam._m0[31u].z, fma(_921, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920)) - _893;
        float _934 = fma(_922, cbModelParam._m0[32u].z, fma(_921, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920)) - _897;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_889 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_893 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[35u].z) + ((((((_897 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _988 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_955.x + (-0.5));
        float _990 = _988 * (_955.y + (-0.5));
        float _991 = _988 * (_955.z + (-0.5));
        float _998 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_962.x + (-0.5));
        float _1000 = _998 * (_962.y + (-0.5));
        float _1001 = _998 * (_962.z + (-0.5));
        float _1008 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_969.x + (-0.5));
        float _1010 = _1008 * (_969.y + (-0.5));
        float _1011 = _1008 * (_969.z + (-0.5));
        float _1018 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_976.x + (-0.5));
        float _1020 = _1018 * (_976.y + (-0.5));
        float _1021 = _1018 * (_976.z + (-0.5));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = _989 * 0.5;
        float _1026 = _999 * 0.5;
        float _1027 = _1009 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_277, _278, _279), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3811 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1052 + 1.0))) + _1057) * _1022;
        float _1067 = _990 * 0.5;
        float _1068 = _1000 * 0.5;
        float _1069 = _1010 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_277, _278, _279), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3844 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1094 + 1.0))) + _1099) * _1023;
        float _1109 = _991 * 0.5;
        float _1110 = _1001 * 0.5;
        float _1111 = _1011 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_277, _278, _279), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3877 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1136 + 1.0))) + _1141) * _1024;
        _1158 = _991;
        _1159 = _990;
        _1160 = _989;
        _1161 = _1001;
        _1162 = _1000;
        _1163 = _999;
        _1164 = _1011;
        _1165 = _1010;
        _1166 = _1009;
        _1167 = _1024;
        _1168 = _1023;
        _1169 = _1022;
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _846;
        _1159 = _846;
        _1160 = _846;
        _1161 = _846;
        _1162 = _846;
        _1163 = _846;
        _1164 = _846;
        _1165 = _846;
        _1166 = _846;
        _1167 = _846;
        _1168 = _846;
        _1169 = _846;
        _1170 = 0.0;
        _1171 = 0.0;
        _1172 = 0.0;
    }
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _858)) + _858;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _859)) + _859;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _860)) + _860;
    float _1205 = fma(_1184, cbSceneParam._m0[89u].z, fma(_1183, cbSceneParam._m0[89u].y, _1182 * cbSceneParam._m0[89u].x));
    float _1208 = fma(_1184, cbSceneParam._m0[90u].z, fma(_1183, cbSceneParam._m0[90u].y, _1182 * cbSceneParam._m0[90u].x));
    float _1211 = fma(_1184, cbSceneParam._m0[91u].z, fma(_1183, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1182));
    float _1226 = _453 * 0.5;
    float _1227 = _454 * 0.5;
    float _1228 = _455 * 0.5;
    float _1229 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1232 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1235 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1269;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1242 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_845, _849, _852, _855));
        float _1246 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_847, _850, _853, _856));
        float _1250 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_848, _851, _854, _857));
        float _1257 = dot(vec4(cbModelParam._m0[39u]), vec4(_1226, _1227, _1228, 1.0));
        _1269 = dot(vec3(isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1257) ? 0.0 : (isnan(0.0) ? _1257 : max(0.0, _1257))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1269 = 1.0;
    }
    float _1280;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1271 = dot(vec4(cbModelParam._m0[40u]), vec4(_1226, _1227, _1228, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1284 = (_1280 * cbModelParam._m0[1u].x) + (_1269 * (1.0 - cbModelParam._m0[1u].x));
    float _1294 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _281);
    float _1295 = isnan(_1294) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1294 : min(cbModelParam._m0[25u].z, _1294));
    float _1377;
    float _1379;
    float _1381;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1344 = fma(_514, cbModelParam._m0[13u].z, fma(_510, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _506)) + cbModelParam._m0[13u].w;
        float _1348 = fma(_514, cbModelParam._m0[14u].z, fma(_510, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _506)) + cbModelParam._m0[14u].w;
        float _1352 = fma(_514, cbModelParam._m0[15u].z, fma(_510, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _506)) + cbModelParam._m0[15u].w;
        float _1355 = fma(_455, cbModelParam._m0[13u].z, fma(_454, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _453));
        float _1358 = fma(_455, cbModelParam._m0[14u].z, fma(_454, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _453));
        float _1361 = fma(_455, cbModelParam._m0[15u].z, fma(_454, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _453));
        float _1389;
        if (_1355 > 0.0)
        {
            _1389 = abs((1.0 - _1344) / _1355);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1344 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1389 = frontier_phi_17_15_ladder;
        }
        float _1563;
        if (_1358 > 0.0)
        {
            _1563 = abs((1.0 - _1348) / _1358);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1348 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1563 = frontier_phi_26_22_ladder;
        }
        float _1859;
        if (_1361 > 0.0)
        {
            _1859 = abs((1.0 - _1352) / _1361);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1352 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1859 = frontier_phi_38_33_ladder;
        }
        float _1861 = isnan(_1563) ? _1389 : (isnan(_1389) ? _1563 : min(_1389, _1563));
        float _1862 = isnan(_1859) ? _1861 : (isnan(_1861) ? _1859 : min(_1861, _1859));
        float _1866 = (_1862 * _1355) + _1344;
        float _1867 = (_1862 * _1358) + _1348;
        float _1868 = (_1862 * _1361) + _1352;
        float _1869 = _1862 * 9.9999997473787516355514526367188e-05;
        float _1871 = (-1.0) - _1869;
        float _1873 = _1869 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1868 > _1873) || ((_1868 < _1871) || ((_1867 > _1873) || ((_1867 < _1871) || ((_1866 < _1871) || (_1866 > _1873))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2013 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1868, cbModelParam._m0[9u].z, fma(_1867, cbModelParam._m0[9u].y, _1866 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1868, cbModelParam._m0[10u].z, fma(_1867, cbModelParam._m0[10u].y, _1866 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1868, cbModelParam._m0[11u].z, fma(_1867, cbModelParam._m0[11u].y, _1866 * cbModelParam._m0[11u].x))), _1295);
            frontier_phi_16_38_ladder = _2013.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2013.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2013.x * cbModelParam._m0[1u].y;
        }
        _1377 = frontier_phi_16_38_ladder_2;
        _1379 = frontier_phi_16_38_ladder_1;
        _1381 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_453, _454, _455), _1295);
        _1377 = _1365.x * cbModelParam._m0[1u].y;
        _1379 = _1365.y * cbModelParam._m0[1u].y;
        _1381 = _1365.z * cbModelParam._m0[1u].y;
    }
    float _1385 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _281);
    float _1386 = isnan(_1385) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1385 : min(cbModelParam._m0[25u].w, _1385));
    float _1479;
    float _1481;
    float _1483;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1443 = fma(_514, cbModelParam._m0[21u].z, fma(_510, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _506)) + cbModelParam._m0[21u].w;
        float _1447 = fma(_514, cbModelParam._m0[22u].z, fma(_510, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _506)) + cbModelParam._m0[22u].w;
        float _1451 = fma(_514, cbModelParam._m0[23u].z, fma(_510, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _506)) + cbModelParam._m0[23u].w;
        float _1454 = fma(_455, cbModelParam._m0[21u].z, fma(_454, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _453));
        float _1457 = fma(_455, cbModelParam._m0[22u].z, fma(_454, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _453));
        float _1460 = fma(_455, cbModelParam._m0[23u].z, fma(_454, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _453));
        float _1568;
        if (_1454 > 0.0)
        {
            _1568 = abs((1.0 - _1443) / _1454);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1443 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1568 = frontier_phi_28_24_ladder;
        }
        float _1886;
        if (_1457 > 0.0)
        {
            _1886 = abs((1.0 - _1447) / _1457);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1447 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1886 = frontier_phi_40_35_ladder;
        }
        float _2213;
        if (_1460 > 0.0)
        {
            _2213 = abs((1.0 - _1451) / _1460);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1451 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2213 = frontier_phi_50_47_ladder;
        }
        float _2215 = isnan(_1886) ? _1568 : (isnan(_1568) ? _1886 : min(_1568, _1886));
        float _2216 = isnan(_2213) ? _2215 : (isnan(_2215) ? _2213 : min(_2215, _2213));
        float _2220 = (_2216 * _1454) + _1443;
        float _2221 = (_2216 * _1457) + _1447;
        float _2222 = (_2216 * _1460) + _1451;
        float _2223 = _2216 * 9.9999997473787516355514526367188e-05;
        float _2224 = (-1.0) - _2223;
        float _2226 = _2223 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2222 > _2226) || ((_2222 < _2224) || ((_2221 > _2226) || ((_2221 < _2224) || ((_2220 < _2224) || (_2220 > _2226))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2340 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2222, cbModelParam._m0[17u].z, fma(_2221, cbModelParam._m0[17u].y, _2220 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2222, cbModelParam._m0[18u].z, fma(_2221, cbModelParam._m0[18u].y, _2220 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2222, cbModelParam._m0[19u].z, fma(_2221, cbModelParam._m0[19u].y, _2220 * cbModelParam._m0[19u].x))), _1386);
            frontier_phi_25_50_ladder = _2340.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2340.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2340.x * cbModelParam._m0[1u].z;
        }
        _1479 = frontier_phi_25_50_ladder_2;
        _1481 = frontier_phi_25_50_ladder_1;
        _1483 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1463 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_453, _454, _455), _1386);
        _1479 = _1463.x * cbModelParam._m0[1u].z;
        _1481 = _1463.y * cbModelParam._m0[1u].z;
        _1483 = _1463.z * cbModelParam._m0[1u].z;
    }
    float _1495 = ((((1.0 - _474) * ((_461 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_474 * _461)) * _445;
    float _1496 = _1495 * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1497 = _1495 * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1498 = _1495 * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1501 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, _1496 * cbSceneParam._m0[91u].x));
    float _1542 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1546 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1550 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1554 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1555 = _1542 / _1554;
    float _1556 = _1546 / _1554;
    float _1557 = _1550 / _1554;
    float _1704;
    float _1705;
    float _1706;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1584 = ((uint(_1557 > cbSceneParam._m0[59u].y) + uint(_1557 > cbSceneParam._m0[59u].x)) + uint(_1557 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1585 = _1584 + 43u;
        uint _1593 = _1584 + 44u;
        uint _1601 = _1584 + 45u;
        uint _1609 = _1584 + 46u;
        float _1620 = fma(_1554, cbSceneParam._m0[_1585].w, fma(_1550, cbSceneParam._m0[_1585].z, fma(_1546, cbSceneParam._m0[_1585].y, _1542 * cbSceneParam._m0[_1585].x)));
        float _1624 = fma(_1554, cbSceneParam._m0[_1593].w, fma(_1550, cbSceneParam._m0[_1593].z, fma(_1546, cbSceneParam._m0[_1593].y, _1542 * cbSceneParam._m0[_1593].x)));
        float _1632 = fma(_1554, cbSceneParam._m0[_1609].w, fma(_1550, cbSceneParam._m0[_1609].z, fma(_1546, cbSceneParam._m0[_1609].y, _1542 * cbSceneParam._m0[_1609].x)));
        float _1637 = cbSceneParam._m0[33u].z * _1632;
        float _1639 = cbSceneParam._m0[33u].w * _1632;
        float _1642 = fma(_1554, cbSceneParam._m0[_1601].w, fma(_1550, cbSceneParam._m0[_1601].z, fma(_1546, cbSceneParam._m0[_1601].y, _1542 * cbSceneParam._m0[_1601].x))) / _1632;
        float _1690 = (cbSceneParam._m0[33u].x - sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557))) * cbSceneParam._m0[33u].y;
        float _4003 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1697 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1637 + _1620) / _1632, (_1639 + _1624) / _1632), _1642), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1639 + _1620) / _1632, (_1624 - _1637) / _1632), _1642), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1620 - _1637) / _1632, (_1624 - _1639) / _1632), _1642), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1620 - _1639) / _1632, (_1637 + _1624) / _1632), _1642), 0.0)).x), vec4(0.25)));
        _1704 = 1.0 - (_1697 * cbSceneParam._m0[34u].x);
        _1705 = 1.0 - (_1697 * cbSceneParam._m0[34u].y);
        _1706 = 1.0 - (_1697 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1704 = 1.0;
        _1705 = 1.0;
        _1706 = 1.0;
    }
    float _1770;
    float _1772;
    float _1774;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1758 = fma(_1554, cbSceneParam._m0[63u].w, fma(_1550, cbSceneParam._m0[63u].z, fma(_1546, cbSceneParam._m0[63u].y, _1542 * cbSceneParam._m0[63u].x)));
        float _1759 = fma(_1554, cbSceneParam._m0[60u].w, fma(_1550, cbSceneParam._m0[60u].z, fma(_1546, cbSceneParam._m0[60u].y, _1542 * cbSceneParam._m0[60u].x))) / _1758;
        float _1760 = fma(_1554, cbSceneParam._m0[61u].w, fma(_1550, cbSceneParam._m0[61u].z, fma(_1546, cbSceneParam._m0[61u].y, _1542 * cbSceneParam._m0[61u].x))) / _1758;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1759 >= cbSceneParam._m0[64u].x) && (_1760 >= cbSceneParam._m0[64u].y)) && (_1759 <= cbSceneParam._m0[64u].z)) && (_1760 <= cbSceneParam._m0[64u].w))
        {
            float _1899 = fma(_1554, cbSceneParam._m0[62u].w, fma(_1550, cbSceneParam._m0[62u].z, fma(_1546, cbSceneParam._m0[62u].y, _1542 * cbSceneParam._m0[62u].x))) / _1758;
            float _1903 = isnan(cbSceneParam._m0[41u].w) ? _1899 : (isnan(_1899) ? cbSceneParam._m0[41u].w : max(_1899, cbSceneParam._m0[41u].w));
            float _1946 = (cbSceneParam._m0[33u].x - sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557))) * cbSceneParam._m0[33u].y;
            float _4019 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
            float _1953 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1759, cbSceneParam._m0[33u].w + _1760), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1759, _1760 - cbSceneParam._m0[33u].z), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1759 - cbSceneParam._m0[33u].z, _1760 - cbSceneParam._m0[33u].w), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1759 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1760), _1903), 0.0)).x), vec4(0.25)));
            float _1957 = 1.0 - (_1953 * cbSceneParam._m0[34u].x);
            float _1958 = 1.0 - (_1953 * cbSceneParam._m0[34u].y);
            float _1959 = 1.0 - (_1953 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1959) ? _1706 : (isnan(_1706) ? _1959 : min(_1706, _1959));
            frontier_phi_37_36_ladder_1 = isnan(_1958) ? _1705 : (isnan(_1705) ? _1958 : min(_1705, _1958));
            frontier_phi_37_36_ladder_2 = isnan(_1957) ? _1704 : (isnan(_1704) ? _1957 : min(_1704, _1957));
        }
        else
        {
            frontier_phi_37_36_ladder = _1706;
            frontier_phi_37_36_ladder_1 = _1705;
            frontier_phi_37_36_ladder_2 = _1704;
        }
        _1770 = frontier_phi_37_36_ladder_2;
        _1772 = frontier_phi_37_36_ladder_1;
        _1774 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1770 = _1704;
        _1772 = _1705;
        _1774 = _1706;
    }
    uvec4 _1779 = floatBitsToUint(cbInstanceData._m0[_419 + 5u]);
    uint _1781 = _1779.x * 14u;
    uint _1782 = _1781 + 13u;
    float _1789 = _445 + (-1.0);
    float _1794 = (cbLight._m0[_1782].x * _1789) + 1.0;
    float _1795 = (cbLight._m0[_1782].y * _1789) + 1.0;
    float _1796 = (cbLight._m0[_1782].z * _1789) + 1.0;
    float _1797 = (cbLight._m0[_1782].w * _1789) + 1.0;
    uint _1798 = _1781 + 5u;
    float _1804 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1808 = _1781 + 4u;
    float _1818 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
    uint _1822 = _1781 | 1u;
    float _1833 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_277, _278, _279));
    float _1836 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_277, _278, _279));
    float _4055 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _4066 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1841 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 0.3183098733425140380859375;
    float _1843 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.3183098733425140380859375;
    float _1850 = ((cbLight._m0[_1798].x * _1804) * _1843) + (((cbLight._m0[_1808].x * _1770) * _1818) * _1841);
    float _1851 = ((_1804 * cbLight._m0[_1798].y) * _1843) + (((cbLight._m0[_1808].y * _1772) * _1818) * _1841);
    float _1852 = ((_1804 * cbLight._m0[_1798].z) * _1843) + (((cbLight._m0[_1808].z * _1774) * _1818) * _1841);
    uvec4 _1856 = floatBitsToUint(cbLight._m0[_1781 + 12u]);
    bool _1858 = _1856.x == 0u;
    float _1960;
    float _1962;
    float _1964;
    if (_1858)
    {
        _1960 = _1850;
        _1962 = _1851;
        _1964 = _1852;
    }
    else
    {
        uint _1968 = _1781 + 6u;
        float _1984 = (dot(vec3(cbLight._m0[_1781 + 2u].xyz), vec3(_277, _278, _279)) * 0.5) + 0.5;
        float _1985 = _1984 * _1984;
        float _4077 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1986 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1987 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _1960 = (((cbLight._m0[_1968].x * 0.3183098733425140380859375) * _1986) * _1987) + _1850;
        _1962 = (((cbLight._m0[_1968].y * 0.3183098733425140380859375) * _1986) * _1987) + _1851;
        _1964 = (((cbLight._m0[_1968].z * 0.3183098733425140380859375) * _1986) * _1987) + _1852;
    }
    bool _1967 = _1856.y == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_1967)
    {
        _2022 = _1960;
        _2024 = _1962;
        _2026 = _1964;
    }
    else
    {
        uint _2184 = _1781 + 7u;
        float _2200 = (dot(vec3(cbLight._m0[_1781 + 3u].xyz), vec3(_277, _278, _279)) * 0.5) + 0.5;
        float _2201 = _2200 * _2200;
        float _4093 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2202 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2203 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2022 = (((cbLight._m0[_2184].x * 0.3183098733425140380859375) * _2202) * _2203) + _1960;
        _2024 = (((cbLight._m0[_2184].y * 0.3183098733425140380859375) * _2202) * _2203) + _1962;
        _2026 = (((cbLight._m0[_2184].z * 0.3183098733425140380859375) * _2202) * _2203) + _1964;
    }
    uint _2029 = _1781 + 8u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _281) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1781].x + _358;
    float _2045 = cbLight._m0[_1781].y + _359;
    float _2046 = cbLight._m0[_1781].z + _360;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1781].xyz));
    float _4109 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _2058 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2059 = dot(vec3(_277, _278, _279), vec3(_2051, _2052, _2053));
    float _4131 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_2051, _2052, _2053));
    float _4142 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2043 * _2043;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2082 = (exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2083 = 1.0 - _2043;
    float _2094 = (0.5 / (((_2058 * ((_2057 * _2083) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2083) + _2043) * _2057))) * _2057;
    float _4153 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2096 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    uint _2110 = _1781 + 9u;
    float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1822].w)) * _281) * 0.949999988079071044921875);
    float _2122 = _2121 * _2121;
    float _2123 = cbLight._m0[_1822].x + _358;
    float _2124 = cbLight._m0[_1822].y + _359;
    float _2125 = cbLight._m0[_1822].z + _360;
    float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
    float _2130 = _2129 * _2123;
    float _2131 = _2129 * _2124;
    float _2132 = _2129 * _2125;
    float _2133 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1822].xyz));
    float _4164 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2137 = dot(vec3(_277, _278, _279), vec3(_2130, _2131, _2132));
    float _4175 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2141 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_2130, _2131, _2132));
    float _4186 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2145 = _2122 * _2122;
    float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
    float _2158 = (exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2159 = 1.0 - _2122;
    float _2169 = (0.5 / (((_2058 * ((_2136 * _2159) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2159) + _2122) * _2136))) * _2136;
    float _4197 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2171 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
    float _2181 = (((_2158 * cbLight._m0[_2110].x) * _2171) * _1804) + ((((cbLight._m0[_2029].x * _1770) * _2082) * _2096) * _1818);
    float _2182 = (((_2158 * cbLight._m0[_2110].y) * _2171) * _1804) + ((((cbLight._m0[_2029].y * _1772) * _2082) * _2096) * _1818);
    float _2183 = (((_2158 * cbLight._m0[_2110].z) * _2171) * _1804) + ((((cbLight._m0[_2029].z * _1774) * _2082) * _2096) * _1818);
    float _2239;
    float _2241;
    float _2243;
    if (_1858)
    {
        _2239 = _2181;
        _2241 = _2182;
        _2243 = _2183;
    }
    else
    {
        uint _2245 = _1781 + 2u;
        uint _2249 = _1781 + 10u;
        float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _281) * 0.949999988079071044921875);
        float _2264 = _2263 * _2263;
        float _2265 = cbLight._m0[_2245].x + _358;
        float _2266 = cbLight._m0[_2245].y + _359;
        float _2267 = cbLight._m0[_2245].z + _360;
        float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
        float _2272 = _2271 * _2265;
        float _2273 = _2271 * _2266;
        float _2274 = _2271 * _2267;
        float _2275 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_2245].xyz));
        float _4208 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2279 = dot(vec3(_277, _278, _279), vec3(_2272, _2273, _2274));
        float _4219 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2283 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2272, _2273, _2274));
        float _4230 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2287 = _2264 * _2264;
        float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
        float _2300 = (exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2301 = 1.0 - _2264;
        float _2311 = (0.5 / (((_2058 * ((_2278 * _2301) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2301) + _2264) * _2278))) * _2278;
        float _4241 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2313 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
        float _2314 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _2239 = (((_2300 * cbLight._m0[_2249].x) * _2313) * _2314) + _2181;
        _2241 = (((_2300 * cbLight._m0[_2249].y) * _2313) * _2314) + _2182;
        _2243 = (((_2300 * cbLight._m0[_2249].z) * _2313) * _2314) + _2183;
    }
    float _2345;
    float _2347;
    float _2349;
    if (_1967)
    {
        _2345 = _2239;
        _2347 = _2241;
        _2349 = _2243;
    }
    else
    {
        uint _2356 = _1781 + 3u;
        uint _2360 = _1781 + 11u;
        float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2356].w)) * _281) * 0.949999988079071044921875);
        float _2375 = _2374 * _2374;
        float _2376 = cbLight._m0[_2356].x + _358;
        float _2377 = cbLight._m0[_2356].y + _359;
        float _2378 = cbLight._m0[_2356].z + _360;
        float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
        float _2383 = _2382 * _2376;
        float _2384 = _2382 * _2377;
        float _2385 = _2382 * _2378;
        float _2386 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_2356].xyz));
        float _4257 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2390 = dot(vec3(_277, _278, _279), vec3(_2383, _2384, _2385));
        float _4268 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2394 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_2383, _2384, _2385));
        float _4279 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2398 = _2375 * _2375;
        float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
        float _2411 = (exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2412 = 1.0 - _2375;
        float _2422 = (0.5 / (((_2058 * ((_2389 * _2412) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2412) + _2375) * _2389))) * _2389;
        float _4290 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2424 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
        float _2425 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2345 = (((_2411 * cbLight._m0[_2360].x) * _2424) * _2425) + _2239;
        _2347 = (((_2411 * cbLight._m0[_2360].y) * _2424) * _2425) + _2241;
        _2349 = (((_2411 * cbLight._m0[_2360].z) * _2424) * _2425) + _2243;
    }
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    if (_1779.y == 0u)
    {
        uvec4 _2446 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2447 = _2446.x;
        uint _2458 = uint((float(_2446.y) * floor(float(uint(cbSceneParam._m0[85u].y * _380) / _2447))) + floor(float(uint(cbSceneParam._m0[85u].x * _379) / _2447)));
        float _2468 = (log2(_1557 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2469 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        uint _2472 = uint(isnan(14.0) ? _2469 : (isnan(_2469) ? 14.0 : min(_2469, 14.0)));
        uvec4 _2477 = texelFetch(g_lightClusterGridBuffer, int(((_2472 << 2u) + (_2458 << 6u)) >> 2u));
        uint _2478 = _2477.x;
        uint _2479 = _2446.z;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        if (((((1u << ((_2479 >> 4u) & 15u)) + 4294967295u) & _2478) == 0u) || ((_2479 & 240u) == 0u))
        {
            _2560 = 0.0;
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
        }
        else
        {
            float _2561;
            float _2563;
            float _2565;
            float _2567;
            float _2569;
            float _2571;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            uint _2719 = 0u;
            uint _2728;
            bool _2729;
            for (;;)
            {
                _2728 = texelFetch(g_lightClassification, int((((_2472 << 5u) + (_2458 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                _2729 = _2728 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2729)
                {
                    frontier_phi_71_pred = _2718;
                    frontier_phi_71_pred_1 = _2717;
                    frontier_phi_71_pred_2 = _2716;
                    frontier_phi_71_pred_3 = _2715;
                    frontier_phi_71_pred_4 = _2714;
                    frontier_phi_71_pred_5 = _2713;
                }
                else
                {
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    uint _2864;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2728;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    for (;;)
                    {
                        uint _2868 = uint(findLSB(_2864)) + (_2719 << 5u);
                        uint _2865 = (_2864 + 4294967295u) & _2864;
                        uint _2870 = _2868 * 48u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2890 = (_2868 * 48u) + 4u;
                        vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2909 = (_2868 * 48u) + 8u;
                        vec3 _2920 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x));
                        float _2924 = _2884.x - _1555;
                        float _2925 = _2884.y - _1556;
                        float _2926 = _2884.z - _1557;
                        float _2927 = dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926));
                        float _2930 = inversesqrt(_2927);
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2934 = dot(vec3(_400, _403, _406), vec3(_2931, _2932, _2933));
                        float _2939 = 1.0 - (_2927 * _2884.w);
                        float _4316 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2940 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _2941 = sqrt(_2927) * _2903.w;
                        float _2944 = 1.39999997615814208984375 / (_2941 + 1.39999997615814208984375);
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2934) + _2945;
                        float _2951 = _2941 * _2941;
                        float _2955 = ((isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))) * _2940) / ((_2951 * 0.699999988079071044921875) + 1.0);
                        float _2959 = (-0.0) - _1555;
                        float _2960 = (-0.0) - _1556;
                        float _2961 = (-0.0) - _1557;
                        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2975 = exp2(log2(1.0 / ((_2951 * 3.5) + 5.0)) * 0.25);
                        float _2976 = 1.0 - _461;
                        float _2983 = sqrt(1.0 - ((1.0 - (_2976 * _2976)) * (1.0 - (_2975 * _2975))));
                        float _2984 = _2983 * _2983;
                        float _2985 = _2984 * _2984;
                        float _2986 = _2966 + _2931;
                        float _2987 = _2967 + _2932;
                        float _2988 = _2968 + _2933;
                        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                        float _2996 = dot(vec3(_400, _403, _406), vec3(_2966, _2967, _2968));
                        float _4332 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2999 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3000 = dot(vec3(_400, _403, _406), vec3(_2992 * _2986, _2992 * _2987, _2992 * _2988));
                        float _4343 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3003 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3007 = ((_3003 * _3003) * (_2985 + (-1.0))) + 1.0;
                        float _3008 = _2944 * _2984;
                        float _3009 = _3008 * _3008;
                        float _3012 = ((1.0 - _3009) * _2934) + _3009;
                        float _4354 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3013 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3014 = 1.0 - _2984;
                        float _3024 = (0.5 / (((_3013 * ((_2999 * _3014) + _2984)) + 9.9999999392252902907785028219223e-09) + (((_3013 * _3014) + _2984) * _2999))) * _3013;
                        float _4365 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3035 = (((_2985 * 3.1415927410125732421875) * (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) / ((_3007 * _3007) * ((_2951 * 2.1991131305694580078125) + 3.141590118408203125))) * _2940;
                        _2788 = (_2955 * _2903.x) + _2861;
                        _2789 = (_2955 * _2903.y) + _2862;
                        _2790 = (_2955 * _2903.z) + _2863;
                        _2785 = (_3035 * _2920.x) + _2858;
                        _2786 = (_3035 * _2920.y) + _2859;
                        _2787 = (_3035 * _2920.z) + _2860;
                        if (_2865 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2858 = _2785;
                            _2859 = _2786;
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2865;
                        }
                    }
                    frontier_phi_71_pred = _2790;
                    frontier_phi_71_pred_1 = _2789;
                    frontier_phi_71_pred_2 = _2788;
                    frontier_phi_71_pred_3 = _2787;
                    frontier_phi_71_pred_4 = _2786;
                    frontier_phi_71_pred_5 = _2785;
                }
                _2571 = frontier_phi_71_pred;
                _2569 = frontier_phi_71_pred_1;
                _2567 = frontier_phi_71_pred_2;
                _2565 = frontier_phi_71_pred_3;
                _2563 = frontier_phi_71_pred_4;
                _2561 = frontier_phi_71_pred_5;
                uint _2720 = _2719 + 1u;
                if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2713 = _2561;
                    _2714 = _2563;
                    _2715 = _2565;
                    _2716 = _2567;
                    _2717 = _2569;
                    _2718 = _2571;
                    _2719 = _2720;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2560 = _2561;
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
        }
        uvec4 _2574 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2575 = _2574.z;
        uint _2577 = (_2575 >> 8u) & 15u;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((4294967295u << _2577) & _2478) == 0u)
        {
            _2681 = _2560;
            _2683 = _2562;
            _2685 = _2564;
            _2687 = _2566;
            _2689 = _2568;
            _2691 = _2570;
        }
        else
        {
            float _2706 = inversesqrt(dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557)));
            float _2707 = _2706 * _1555;
            float _2708 = _2706 * _1556;
            float _2709 = _2706 * _1557;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2577 < ((_2575 >> 12u) & 15u))
            {
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2841 = _2560;
                float _2842 = _2562;
                float _2843 = _2564;
                float _2844 = _2566;
                float _2845 = _2568;
                float _2846 = _2570;
                uint _2847 = _2577;
                uint _2856;
                bool _2857;
                for (;;)
                {
                    _2856 = texelFetch(g_lightClassification, int((((_2472 << 5u) + (_2458 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                    _2857 = _2856 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2857)
                    {
                        frontier_phi_82_pred = _2846;
                        frontier_phi_82_pred_1 = _2845;
                        frontier_phi_82_pred_2 = _2844;
                        frontier_phi_82_pred_3 = _2843;
                        frontier_phi_82_pred_4 = _2842;
                        frontier_phi_82_pred_5 = _2841;
                    }
                    else
                    {
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3062 = _2841;
                        float _3063 = _2842;
                        float _3064 = _2843;
                        float _3065 = _2844;
                        float _3066 = _2845;
                        float _3067 = _2846;
                        uint _3068 = _2856;
                        uint _3069;
                        vec4 _3094;
                        float _3095;
                        vec4 _3110;
                        vec3 _3122;
                        vec4 _3138;
                        vec4 _3154;
                        float _3201;
                        bool _3202;
                        for (;;)
                        {
                            uint _3079 = ((_2847 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3068));
                            _3069 = (_3068 + 4294967295u) & _3068;
                            uint _3081 = _3079 * 40u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            _3095 = _3094.w;
                            uint _3097 = (_3079 * 40u) + 4u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3112 = (_3079 * 40u) + 8u;
                            _3122 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x));
                            uint _3125 = (_3079 * 40u) + 16u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3141 = (_3079 * 40u) + 20u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3157 = (_3079 * 40u) + 24u;
                            vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3176 = (_3079 * 40u) + 28u;
                            vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            _3201 = fma(_1557, _3189.z, fma(_1556, _3189.y, _3189.x * _1555)) + _3189.w;
                            _3202 = !((fma(_1557, _3170.z, fma(_1556, _3170.y, _3170.x * _1555)) + _3170.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3202)
                            {
                                float _3229 = _3094.x - _1555;
                                float _3230 = _3094.y - _1556;
                                float _3231 = _3094.z - _1557;
                                float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                                float _3235 = inversesqrt(_3232);
                                float _3236 = _3235 * _3229;
                                float _3237 = _3235 * _3230;
                                float _3238 = _3235 * _3231;
                                float _3242 = 1.0 - (_3232 / (_3095 * _3095));
                                float _4376 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3247 = sqrt(_3232) * _3110.w;
                                float _3249 = 1.39999997615814208984375 / (_3247 + 1.39999997615814208984375);
                                float _3250 = _3249 * _3249;
                                float _3253 = ((1.0 - _3250) * dot(vec3(_3236, _3237, _3238), vec3(_400, _403, _406))) + _3250;
                                float _3256 = _3247 * _3247;
                                float _3260 = (fma(_1557, _3138.z, fma(_1556, _3138.y, _3138.x * _1555)) + _3138.w) / _3201;
                                float _3261 = (fma(_1557, _3154.z, fma(_1556, _3154.y, _3154.x * _1555)) + _3154.w) / _3201;
                                float _3265 = 1.0 - dot(vec2(_3260, _3261), vec2(_3260, _3261));
                                float _4392 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3267 = _3266 * (((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3243) / ((_3256 * 0.699999988079071044921875) + 1.0));
                                float _3279 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                                float _3280 = 1.0 - _461;
                                float _3287 = sqrt(1.0 - ((1.0 - (_3280 * _3280)) * (1.0 - (_3279 * _3279))));
                                float _3288 = _3287 * _3287;
                                float _3289 = _3288 * _3288;
                                float _3290 = _3236 - _2707;
                                float _3291 = _3237 - _2708;
                                float _3292 = _3238 - _2709;
                                float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                                float _3300 = dot(vec3(_400, _403, _406), vec3((-0.0) - _2707, (-0.0) - _2708, (-0.0) - _2709));
                                float _4403 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3304 = dot(vec3(_400, _403, _406), vec3(_3296 * _3290, _3296 * _3291, _3296 * _3292));
                                float _4414 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3307 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3311 = ((_3307 * _3307) * (_3289 + (-1.0))) + 1.0;
                                float _3312 = _3249 * _3288;
                                float _3313 = _3312 * _3312;
                                float _3319 = ((1.0 - _3313) * dot(vec3(_400, _403, _406), vec3(_3236, _3237, _3238))) + _3313;
                                float _4425 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3321 = 1.0 - _3288;
                                float _3331 = (0.5 / (((_3320 * ((_3303 * _3321) + _3288)) + 9.9999999392252902907785028219223e-09) + (((_3320 * _3321) + _3288) * _3303))) * _3320;
                                float _4436 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3341 = (_3266 * _3243) * (((_3289 * 3.1415927410125732421875) * (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) / ((_3311 * _3311) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3267 * _3110.z;
                                frontier_phi_88_pred_1 = _3267 * _3110.y;
                                frontier_phi_88_pred_2 = _3267 * _3110.x;
                                frontier_phi_88_pred_3 = _3341 * _3122.z;
                                frontier_phi_88_pred_4 = _3341 * _3122.y;
                                frontier_phi_88_pred_5 = _3341 * _3122.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3350 = frontier_phi_88_pred;
                            _3349 = frontier_phi_88_pred_1;
                            _3348 = frontier_phi_88_pred_2;
                            _3347 = frontier_phi_88_pred_3;
                            _3346 = frontier_phi_88_pred_4;
                            _3345 = frontier_phi_88_pred_5;
                            _3052 = _3348 + _3065;
                            _3053 = _3349 + _3066;
                            _3054 = _3350 + _3067;
                            _3049 = _3345 + _3062;
                            _3050 = _3346 + _3063;
                            _3051 = _3347 + _3064;
                            if (_3069 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3069;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3054;
                        frontier_phi_82_pred_1 = _3053;
                        frontier_phi_82_pred_2 = _3052;
                        frontier_phi_82_pred_3 = _3051;
                        frontier_phi_82_pred_4 = _3050;
                        frontier_phi_82_pred_5 = _3049;
                    }
                    _2692 = frontier_phi_82_pred;
                    _2690 = frontier_phi_82_pred_1;
                    _2688 = frontier_phi_82_pred_2;
                    _2686 = frontier_phi_82_pred_3;
                    _2684 = frontier_phi_82_pred_4;
                    _2682 = frontier_phi_82_pred_5;
                    uint _2848 = _2847 + 1u;
                    if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2841 = _2682;
                        _2842 = _2684;
                        _2843 = _2686;
                        _2844 = _2688;
                        _2845 = _2690;
                        _2846 = _2692;
                        _2847 = _2848;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2688;
                frontier_phi_63_64_ladder_1 = _2692;
                frontier_phi_63_64_ladder_2 = _2690;
                frontier_phi_63_64_ladder_3 = _2686;
                frontier_phi_63_64_ladder_4 = _2684;
                frontier_phi_63_64_ladder_5 = _2682;
            }
            else
            {
                frontier_phi_63_64_ladder = _2566;
                frontier_phi_63_64_ladder_1 = _2570;
                frontier_phi_63_64_ladder_2 = _2568;
                frontier_phi_63_64_ladder_3 = _2564;
                frontier_phi_63_64_ladder_4 = _2562;
                frontier_phi_63_64_ladder_5 = _2560;
            }
            _2681 = frontier_phi_63_64_ladder_5;
            _2683 = frontier_phi_63_64_ladder_4;
            _2685 = frontier_phi_63_64_ladder_3;
            _2687 = frontier_phi_63_64_ladder;
            _2689 = frontier_phi_63_64_ladder_2;
            _2691 = frontier_phi_63_64_ladder_1;
        }
        float _2696 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
        _2491 = (_2696 * _2687) + _2022;
        _2493 = (_2696 * _2689) + _2024;
        _2495 = (_2696 * _2691) + _2026;
        _2497 = ((_2681 * 0.039999999105930328369140625) * _2696) + _2345;
        _2499 = ((_2683 * 0.039999999105930328369140625) * _2696) + _2347;
        _2501 = ((_2685 * 0.039999999105930328369140625) * _2696) + _2349;
    }
    else
    {
        _2491 = _2022;
        _2493 = _2024;
        _2495 = _2026;
        _2497 = _2345;
        _2499 = _2347;
        _2501 = _2349;
    }
    float _4452 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _4463 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _4474 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4485 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _2519 = ((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2491 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _445))) + ((_2497 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1284)) * cbPerFrame._m0[3u].x);
    float _2520 = ((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2493 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _445))) + ((_2499 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1284)) * cbPerFrame._m0[3u].x);
    float _2521 = ((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2495 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _445))) + ((_2501 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1284)) * cbPerFrame._m0[3u].x);
    float _2526 = cbInstanceData._m0[_419 + 6u].w * (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)));
    float _2531 = _379 / cbSceneParam._m0[86u].x;
    float _2532 = _380 / cbSceneParam._m0[86u].y;
    vec4 _2546 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, (log2((isnan(cbSceneParam._m0[77u].w) ? _300 : (isnan(_300) ? cbSceneParam._m0[77u].w : min(_300, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2548 = _2546.x;
    float _2549 = _2546.y;
    float _2550 = _2546.z;
    float _2551 = _2546.w;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_300 > cbSceneParam._m0[78u].w)
    {
        float _2585 = isnan(_300) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _300 : min(cbSceneParam._m0[80u].w, _300));
        float _2586 = _2585 / _300;
        float _2597 = _2586 * _351;
        float _2598 = _352 * _2586;
        float _2599 = (-0.0) - _2598;
        float _2601 = _2586 * _353;
        float _2603 = (cbSceneParam._m0[77u].w * _2599) / _2585;
        float _2604 = _2603 + cbSceneParam._m0[79u].w;
        float _2605 = cbSceneParam._m0[79u].w - _2598;
        float _2611 = sqrt(((_2597 * _2597) + (_2598 * _2598)) + (_2601 * _2601));
        float _2614 = (1.0 - (cbSceneParam._m0[77u].w / _2585)) * _2611;
        float _2619 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2621 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2798;
        if (abs((_2599 - _2603) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2798 = ((((_2604 > 0.0) ? exp2(_2619 * _2604) : (2.0 - exp2(_2621 * _2604))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2614;
        }
        else
        {
            float _2742 = 1.0 / cbSceneParam._m0[80u].x;
            float _2743 = isnan(_2605) ? _2604 : (isnan(_2604) ? _2605 : max(_2604, _2605));
            float _2744 = isnan(_2605) ? _2604 : (isnan(_2604) ? _2605 : min(_2604, _2605));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            float _2754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : min(_2744, 0.0));
            _2798 = ((abs(_2611 / _2599) * cbSceneParam._m0[80u].y) * ((((_2753 - _2754) * 2.0) - ((exp2(_2619 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0)))) - exp2(_2619 * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))))) * _2742)) - ((exp2(_2621 * _2753) - exp2(_2621 * _2754)) * _2742))) + (_2614 * cbSceneParam._m0[80u].z);
        }
        vec4 _2800 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, 1.0), 0.0);
        float _2809 = exp2((_2798 * (-1.44269502162933349609375)) * (1.0 - _2800.w));
        float _2810 = log2(_2809);
        float _2826 = log2(_2551);
        _2623 = (exp2(_2826 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].x)) * _2800.x) / cbSceneParam._m0[78u].x)) + _2548;
        _2625 = (exp2(_2826 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].y)) * _2800.y) / cbSceneParam._m0[78u].y)) + _2549;
        _2627 = (exp2(_2826 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].z)) * _2800.z) / cbSceneParam._m0[78u].z)) + _2550;
        _2629 = _2809 * _2551;
    }
    else
    {
        _2623 = _2548;
        _2625 = _2549;
        _2627 = _2550;
        _2629 = _2551;
    }
    bool _2836;
    vec4 _2639;
    vec4 _2661;
    float _2663;
    float _2667;
    float _2668;
    float _2669;
    float _2670;
    bool _2680;
    for (;;)
    {
        _2639 = cbMatDynParam._m0[0u];
        float _2641 = roundEven(_2639.y);
        bool _2642 = _2641 == 3.0;
        float _2643 = log2(_2629);
        float _2650 = exp2(_2643 * cbSceneParam._m0[78u].x) * _2519;
        float _2651 = exp2(_2643 * cbSceneParam._m0[78u].y) * _2520;
        float _2652 = exp2(_2643 * cbSceneParam._m0[78u].z) * _2521;
        float _2659 = _367 + (-0.5);
        _2661 = cbMtdParam._m0[1u];
        _2663 = _2661.y * _2659;
        float _2666 = (_2641 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2667 = _2666 * (_2642 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2623)));
        _2668 = _2666 * (_2642 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2625)));
        _2669 = _2666 * (_2642 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2627)));
        _2670 = _2659 * 0.999000012874603271484375;
        _2680 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2680)
        {
            if ((cbInstanceData._m0[_419 + 7u].x + _2670) < 0.5)
            {
                _2836 = true;
                break;
            }
        }
        uint _2777 = _421 + uint(_2639.w);
        if ((cbInstanceData._m0[_2777].w < 1.0) && ((cbInstanceData._m0[_2777].w + _2670) < 0.5))
        {
            _2836 = true;
            break;
        }
        if ((_2663 + _234) < _2661.x)
        {
            _2836 = true;
            break;
        }
        _2836 = false;
        break;
    }
    float _3040;
    if (_2836)
    {
        discard_state = true;
        _3040 = 0.0;
    }
    else
    {
        _3040 = _2526;
    }
    SV_Target.x = _2667;
    SV_Target.y = _2668;
    SV_Target.z = _2669;
    SV_Target.w = _3040;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2526;
    discard_exit();
}


