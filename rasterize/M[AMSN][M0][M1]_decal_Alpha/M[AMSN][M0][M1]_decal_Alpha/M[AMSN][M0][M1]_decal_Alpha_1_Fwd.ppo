#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _797;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _173 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _174 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _180 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _187 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _221 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _226 = (cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _221.x;
    vec4 _238 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _242 = _238.z;
    float _246 = (_238.x * 2.0) + (-1.0);
    float _248 = (_238.y * 2.0) + (-1.0);
    float _249 = dot(vec2(_246, _248), vec2(_246, _248));
    float _3115 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _255 = sqrt(1.0 - (isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0))));
    float _258 = fma(_255, _187 * NORMAL.x, fma(_248, _194 * TANGENT.x, (_180 * _172) * _246));
    float _261 = fma(_255, _187 * NORMAL.y, fma(_248, _194 * TANGENT.y, (_180 * _173) * _246));
    float _264 = fma(_255, _187 * NORMAL.z, fma(_248, _194 * TANGENT.z, (_180 * _174) * _246));
    float _268 = inversesqrt(dot(vec3(_258, _261, _264), vec3(_258, _261, _264)));
    float _269 = _268 * _258;
    float _270 = _268 * _261;
    float _271 = _268 * _264;
    float _3126 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _272 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
    float _3137 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _273 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
    float _3148 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3159 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3170 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _292 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _333 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _343 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _333);
    float _344 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _333);
    float _345 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _333);
    float _349 = inversesqrt(dot(vec3(_343, _344, _345), vec3(_343, _344, _345)));
    float _350 = _343 * _349;
    float _351 = _344 * _349;
    float _352 = _345 * _349;
    float _358 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _359 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _380 = fma(_271, cbSceneParam._m0[5u].z, fma(_270, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _269));
    float _383 = fma(_271, cbSceneParam._m0[6u].z, fma(_270, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _269));
    float _386 = fma(_271, cbSceneParam._m0[7u].z, fma(_270, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _269));
    uint _399 = uint(roundEven(NORMAL.w)) * 13u;
    uint _402 = (_399 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _408 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0)))) * cbInstanceData._m0[_402].x;
    float _409 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0)))) * cbInstanceData._m0[_402].y;
    float _410 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0)))) * cbInstanceData._m0[_402].z;
    float _3181 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _411 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
    float _3192 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _412 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
    float _3203 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _413 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
    vec4 _422 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _358, cbSceneParam._m0[86u].y * _359));
    float _425 = _422.x * TEXCOORD_1.w;
    float _426 = dot(vec3(_269, _270, _271), vec3(_350, _351, _352));
    float _429 = _426 * 2.0;
    float _433 = (_429 * _269) - _350;
    float _434 = (_429 * _270) - _351;
    float _435 = (_429 * _271) - _352;
    float _439 = abs(dot(vec3(_350, _351, _352), vec3(_269, _270, _271)));
    float _3214 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _441 = sqrt(_273);
    float _454 = exp2((_441 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_441 * 3.0));
    float _486 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _796;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _521 = fma(_494, cbModelParam._m0[26u].z, fma(_490, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _486));
        float _525 = fma(_494, cbModelParam._m0[27u].z, fma(_490, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _486));
        float _529 = fma(_494, cbModelParam._m0[28u].z, fma(_490, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _486));
        float _554 = _486 + _269;
        float _555 = _490 + _270;
        float _556 = _494 + _271;
        float _566 = fma(_556, cbModelParam._m0[26u].z, fma(_555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554)) - _521;
        float _567 = fma(_556, cbModelParam._m0[27u].z, fma(_555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554)) - _525;
        float _568 = fma(_556, cbModelParam._m0[28u].z, fma(_555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554)) - _529;
        float _572 = inversesqrt(dot(vec3(_566, _567, _568), vec3(_566, _567, _568)));
        float _585 = ((_572 * _566) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_521 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _586 = ((_572 * _567) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_525 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _587 = ((_572 * _568) / cbModelParam._m0[34u].z) + ((((((_529 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _590 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_585, _586, _587), 0.0);
        float _624 = exp2((_590.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_590.x + (-0.5));
        float _626 = _624 * (_590.y + (-0.5));
        float _627 = _624 * (_590.z + (-0.5));
        float _634 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_597.x + (-0.5));
        float _636 = _634 * (_597.y + (-0.5));
        float _637 = _634 * (_597.z + (-0.5));
        float _644 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _645 = _644 * (_604.x + (-0.5));
        float _646 = _644 * (_604.y + (-0.5));
        float _647 = _644 * (_604.z + (-0.5));
        float _654 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _655 = _654 * (_611.x + (-0.5));
        float _656 = _654 * (_611.y + (-0.5));
        float _657 = _654 * (_611.z + (-0.5));
        float _658 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _659 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = _625 * 0.5;
        float _662 = _635 * 0.5;
        float _663 = _645 * 0.5;
        float _664 = dot(vec3(_661, _662, _663), vec3(_661, _662, _663));
        float _669 = (_664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_664);
        float _678 = (dot(vec3(_269, _270, _271), vec3(_669 * _661, _669 * _662, _669 * _663)) + 1.0) * 0.5;
        float _3240 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _688 = sqrt(((_662 * _662) + (_661 * _661)) + (_663 * _663)) / (_658 + 9.9999997473787516355514526367188e-06);
        float _3251 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _690 = _689 * 2.0;
        float _694 = (1.0 - _689) / (_689 + 1.0);
        float _3262 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _704 = ((((1.0 - _695) * (_690 + 2.0)) * exp2(log2(isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))) * (_690 + 1.0))) + _695) * _658;
        float _705 = _626 * 0.5;
        float _706 = _636 * 0.5;
        float _707 = _646 * 0.5;
        float _708 = dot(vec3(_705, _706, _707), vec3(_705, _706, _707));
        float _713 = (_708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_708);
        float _721 = (dot(vec3(_269, _270, _271), vec3(_713 * _705, _713 * _706, _713 * _707)) + 1.0) * 0.5;
        float _3273 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _730 = sqrt(((_706 * _706) + (_705 * _705)) + (_707 * _707)) / (_659 + 9.9999997473787516355514526367188e-06);
        float _3284 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
        float _732 = _731 * 2.0;
        float _736 = (1.0 - _731) / (_731 + 1.0);
        float _3295 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _746 = ((((1.0 - _737) * (_732 + 2.0)) * exp2(log2(isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0))) * (_732 + 1.0))) + _737) * _659;
        float _747 = _627 * 0.5;
        float _748 = _637 * 0.5;
        float _749 = _647 * 0.5;
        float _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
        float _755 = (_750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_750);
        float _763 = (dot(vec3(_269, _270, _271), vec3(_755 * _747, _755 * _748, _755 * _749)) + 1.0) * 0.5;
        float _3306 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _772 = sqrt(((_748 * _748) + (_747 * _747)) + (_749 * _749)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _3317 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3328 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0))) * (_774 + 1.0))) + _779) * _660;
        _796 = _627;
        _798 = _626;
        _799 = _625;
        _800 = _637;
        _801 = _636;
        _802 = _635;
        _803 = _647;
        _804 = _646;
        _805 = _645;
        _806 = _660;
        _807 = _659;
        _808 = _658;
        _809 = cbModelParam._m0[36u].z * (isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0)));
        _810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0)));
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
    }
    else
    {
        _796 = _797;
        _798 = _797;
        _799 = _797;
        _800 = _797;
        _801 = _797;
        _802 = _797;
        _803 = _797;
        _804 = _797;
        _805 = _797;
        _806 = _797;
        _807 = _797;
        _808 = _797;
        _809 = 0.0;
        _810 = 0.0;
        _811 = 0.0;
    }
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _837 = fma(_494, cbModelParam._m0[30u].z, fma(_490, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _486));
        float _841 = fma(_494, cbModelParam._m0[31u].z, fma(_490, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _486));
        float _845 = fma(_494, cbModelParam._m0[32u].z, fma(_490, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _486));
        float _868 = _486 + _269;
        float _869 = _490 + _270;
        float _870 = _494 + _271;
        float _880 = fma(_870, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _868)) - _837;
        float _881 = fma(_870, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _868)) - _841;
        float _882 = fma(_870, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _868)) - _845;
        float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
        float _899 = ((_886 * _880) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_837 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_886 * _881) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_841 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_886 * _882) / cbModelParam._m0[35u].z) + ((((((_845 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        float _936 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_903.x + (-0.5));
        float _938 = _936 * (_903.y + (-0.5));
        float _939 = _936 * (_903.z + (-0.5));
        float _946 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_910.x + (-0.5));
        float _948 = _946 * (_910.y + (-0.5));
        float _949 = _946 * (_910.z + (-0.5));
        float _956 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_917.x + (-0.5));
        float _958 = _956 * (_917.y + (-0.5));
        float _959 = _956 * (_917.z + (-0.5));
        float _966 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_924.x + (-0.5));
        float _968 = _966 * (_924.y + (-0.5));
        float _969 = _966 * (_924.z + (-0.5));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = _937 * 0.5;
        float _974 = _947 * 0.5;
        float _975 = _957 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_269, _270, _271), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3369 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3380 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3391 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))) * (_1000 + 1.0))) + _1005) * _970;
        float _1015 = _938 * 0.5;
        float _1016 = _948 * 0.5;
        float _1017 = _958 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_269, _270, _271), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3402 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3413 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3424 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) * (_1042 + 1.0))) + _1047) * _971;
        float _1057 = _939 * 0.5;
        float _1058 = _949 * 0.5;
        float _1059 = _959 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_269, _270, _271), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3435 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3446 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3457 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * (_1084 + 1.0))) + _1089) * _972;
        _1106 = _939;
        _1107 = _938;
        _1108 = _937;
        _1109 = _949;
        _1110 = _948;
        _1111 = _947;
        _1112 = _959;
        _1113 = _958;
        _1114 = _957;
        _1115 = _972;
        _1116 = _971;
        _1117 = _970;
        _1118 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
    }
    else
    {
        _1106 = _797;
        _1107 = _797;
        _1108 = _797;
        _1109 = _797;
        _1110 = _797;
        _1111 = _797;
        _1112 = _797;
        _1113 = _797;
        _1114 = _797;
        _1115 = _797;
        _1116 = _797;
        _1117 = _797;
        _1118 = 0.0;
        _1119 = 0.0;
        _1120 = 0.0;
    }
    float _1130 = (cbModelParam._m0[1u].x * (_1118 - _809)) + _809;
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _810)) + _810;
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _811)) + _811;
    float _1153 = fma(_1132, cbSceneParam._m0[89u].z, fma(_1131, cbSceneParam._m0[89u].y, _1130 * cbSceneParam._m0[89u].x));
    float _1156 = fma(_1132, cbSceneParam._m0[90u].z, fma(_1131, cbSceneParam._m0[90u].y, _1130 * cbSceneParam._m0[90u].x));
    float _1159 = fma(_1132, cbSceneParam._m0[91u].z, fma(_1131, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1130));
    float _1174 = _433 * 0.5;
    float _1175 = _434 * 0.5;
    float _1176 = _435 * 0.5;
    float _1177 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1180 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1183 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_1106, _1109, _1112, _1115));
    float _1217;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1190 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_796, _800, _803, _806));
        float _1194 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_798, _801, _804, _807));
        float _1198 = dot(vec4(_1174, _1175, _1176, 1.0), vec4(_799, _802, _805, _808));
        float _1205 = dot(vec4(cbModelParam._m0[39u]), vec4(_1174, _1175, _1176, 1.0));
        _1217 = dot(vec3(isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)), isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1205) ? 0.0 : (isnan(0.0) ? _1205 : max(0.0, _1205))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1217 = 1.0;
    }
    float _1228;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1219 = dot(vec4(cbModelParam._m0[40u]), vec4(_1174, _1175, _1176, 1.0));
        _1228 = dot(vec3(isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1219) ? 0.0 : (isnan(0.0) ? _1219 : max(0.0, _1219))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1228 = 1.0;
    }
    float _1232 = (_1228 * cbModelParam._m0[1u].x) + (_1217 * (1.0 - cbModelParam._m0[1u].x));
    float _1242 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _273);
    float _1243 = isnan(_1242) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1242 : min(cbModelParam._m0[25u].z, _1242));
    float _1325;
    float _1327;
    float _1329;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1292 = fma(_494, cbModelParam._m0[13u].z, fma(_490, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _486)) + cbModelParam._m0[13u].w;
        float _1296 = fma(_494, cbModelParam._m0[14u].z, fma(_490, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _486)) + cbModelParam._m0[14u].w;
        float _1300 = fma(_494, cbModelParam._m0[15u].z, fma(_490, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _486)) + cbModelParam._m0[15u].w;
        float _1303 = fma(_435, cbModelParam._m0[13u].z, fma(_434, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _433));
        float _1306 = fma(_435, cbModelParam._m0[14u].z, fma(_434, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _433));
        float _1309 = fma(_435, cbModelParam._m0[15u].z, fma(_434, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _433));
        float _1337;
        if (_1303 > 0.0)
        {
            _1337 = abs((1.0 - _1292) / _1303);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1292 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1337 = frontier_phi_14_12_ladder;
        }
        float _1543;
        if (_1306 > 0.0)
        {
            _1543 = abs((1.0 - _1296) / _1306);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1296 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1543 = frontier_phi_23_19_ladder;
        }
        float _1786;
        if (_1309 > 0.0)
        {
            _1786 = abs((1.0 - _1300) / _1309);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1300 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1786 = frontier_phi_35_30_ladder;
        }
        float _1788 = isnan(_1543) ? _1337 : (isnan(_1337) ? _1543 : min(_1337, _1543));
        float _1789 = isnan(_1786) ? _1788 : (isnan(_1788) ? _1786 : min(_1788, _1786));
        float _1793 = (_1789 * _1303) + _1292;
        float _1794 = (_1789 * _1306) + _1296;
        float _1795 = (_1789 * _1309) + _1300;
        float _1796 = _1789 * 9.9999997473787516355514526367188e-05;
        float _1798 = (-1.0) - _1796;
        float _1800 = _1796 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1795 > _1800) || ((_1795 < _1798) || ((_1794 > _1800) || ((_1794 < _1798) || ((_1793 < _1798) || (_1793 > _1800))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1919 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1795, cbModelParam._m0[9u].z, fma(_1794, cbModelParam._m0[9u].y, _1793 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1795, cbModelParam._m0[10u].z, fma(_1794, cbModelParam._m0[10u].y, _1793 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1795, cbModelParam._m0[11u].z, fma(_1794, cbModelParam._m0[11u].y, _1793 * cbModelParam._m0[11u].x))), _1243);
            frontier_phi_13_35_ladder = _1919.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1919.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1919.x * cbModelParam._m0[1u].y;
        }
        _1325 = frontier_phi_13_35_ladder_2;
        _1327 = frontier_phi_13_35_ladder_1;
        _1329 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1313 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_433, _434, _435), _1243);
        _1325 = _1313.x * cbModelParam._m0[1u].y;
        _1327 = _1313.y * cbModelParam._m0[1u].y;
        _1329 = _1313.z * cbModelParam._m0[1u].y;
    }
    float _1333 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _273);
    float _1334 = isnan(_1333) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1333 : min(cbModelParam._m0[25u].w, _1333));
    float _1427;
    float _1429;
    float _1431;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1391 = fma(_494, cbModelParam._m0[21u].z, fma(_490, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _486)) + cbModelParam._m0[21u].w;
        float _1395 = fma(_494, cbModelParam._m0[22u].z, fma(_490, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _486)) + cbModelParam._m0[22u].w;
        float _1399 = fma(_494, cbModelParam._m0[23u].z, fma(_490, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _486)) + cbModelParam._m0[23u].w;
        float _1402 = fma(_435, cbModelParam._m0[21u].z, fma(_434, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _433));
        float _1405 = fma(_435, cbModelParam._m0[22u].z, fma(_434, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _433));
        float _1408 = fma(_435, cbModelParam._m0[23u].z, fma(_434, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _433));
        float _1548;
        if (_1402 > 0.0)
        {
            _1548 = abs((1.0 - _1391) / _1402);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1391 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1548 = frontier_phi_25_21_ladder;
        }
        float _1813;
        if (_1405 > 0.0)
        {
            _1813 = abs((1.0 - _1395) / _1405);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1395 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1813 = frontier_phi_37_32_ladder;
        }
        float _2018;
        if (_1408 > 0.0)
        {
            _2018 = abs((1.0 - _1399) / _1408);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1399 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2018 = frontier_phi_46_43_ladder;
        }
        float _2020 = isnan(_1813) ? _1548 : (isnan(_1548) ? _1813 : min(_1548, _1813));
        float _2021 = isnan(_2018) ? _2020 : (isnan(_2020) ? _2018 : min(_2020, _2018));
        float _2025 = (_2021 * _1402) + _1391;
        float _2026 = (_2021 * _1405) + _1395;
        float _2027 = (_2021 * _1408) + _1399;
        float _2028 = _2021 * 9.9999997473787516355514526367188e-05;
        float _2029 = (-1.0) - _2028;
        float _2031 = _2028 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2027 > _2031) || ((_2027 < _2029) || ((_2026 > _2031) || ((_2026 < _2029) || ((_2025 < _2029) || (_2025 > _2031))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2228 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2027, cbModelParam._m0[17u].z, fma(_2026, cbModelParam._m0[17u].y, _2025 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2027, cbModelParam._m0[18u].z, fma(_2026, cbModelParam._m0[18u].y, _2025 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2027, cbModelParam._m0[19u].z, fma(_2026, cbModelParam._m0[19u].y, _2025 * cbModelParam._m0[19u].x))), _1334);
            frontier_phi_22_46_ladder = _2228.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2228.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2228.x * cbModelParam._m0[1u].z;
        }
        _1427 = frontier_phi_22_46_ladder_2;
        _1429 = frontier_phi_22_46_ladder_1;
        _1431 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1411 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_433, _434, _435), _1334);
        _1427 = _1411.x * cbModelParam._m0[1u].z;
        _1429 = _1411.y * cbModelParam._m0[1u].z;
        _1431 = _1411.z * cbModelParam._m0[1u].z;
    }
    float _1443 = ((((1.0 - _454) * ((_441 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_454 * _441)) * _425;
    float _1444 = _1443 * ((cbModelParam._m0[1u].w * (_1427 - _1325)) + _1325);
    float _1445 = _1443 * ((cbModelParam._m0[1u].w * (_1429 - _1327)) + _1327);
    float _1446 = _1443 * ((cbModelParam._m0[1u].w * (_1431 - _1329)) + _1329);
    float _1449 = fma(_1446, cbSceneParam._m0[89u].z, fma(_1445, cbSceneParam._m0[89u].y, _1444 * cbSceneParam._m0[89u].x));
    float _1452 = fma(_1446, cbSceneParam._m0[90u].z, fma(_1445, cbSceneParam._m0[90u].y, _1444 * cbSceneParam._m0[90u].x));
    float _1455 = fma(_1446, cbSceneParam._m0[91u].z, fma(_1445, cbSceneParam._m0[91u].y, _1444 * cbSceneParam._m0[91u].x));
    uvec4 _1465 = floatBitsToUint(cbInstanceData._m0[_399 + 5u]);
    uint _1467 = _1465.x * 14u;
    uint _1468 = _1467 + 13u;
    float _1475 = _425 + (-1.0);
    float _1480 = (cbLight._m0[_1468].x * _1475) + 1.0;
    float _1481 = (cbLight._m0[_1468].y * _1475) + 1.0;
    float _1482 = (cbLight._m0[_1468].z * _1475) + 1.0;
    float _1483 = (cbLight._m0[_1468].w * _1475) + 1.0;
    uint _1484 = _1467 + 5u;
    float _1490 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
    uint _1494 = _1467 + 4u;
    float _1501 = isnan(1.0) ? _1480 : (isnan(_1480) ? 1.0 : min(_1480, 1.0));
    uint _1505 = _1467 | 1u;
    float _1516 = dot(vec3(cbLight._m0[_1467].xyz), vec3(_269, _270, _271));
    float _1519 = dot(vec3(cbLight._m0[_1505].xyz), vec3(_269, _270, _271));
    float _3593 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
    float _3604 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
    float _1524 = (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * 0.3183098733425140380859375;
    float _1526 = (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * 0.3183098733425140380859375;
    float _1533 = ((cbLight._m0[_1484].x * _1490) * _1526) + ((cbLight._m0[_1494].x * _1501) * _1524);
    float _1534 = ((_1490 * cbLight._m0[_1484].y) * _1526) + ((_1501 * cbLight._m0[_1494].y) * _1524);
    float _1535 = ((_1490 * cbLight._m0[_1484].z) * _1526) + ((_1501 * cbLight._m0[_1494].z) * _1524);
    uvec4 _1540 = floatBitsToUint(cbLight._m0[_1467 + 12u]);
    bool _1542 = _1540.x == 0u;
    float _1553;
    float _1555;
    float _1557;
    if (_1542)
    {
        _1553 = _1533;
        _1555 = _1534;
        _1557 = _1535;
    }
    else
    {
        uint _1561 = _1467 + 6u;
        float _1577 = (dot(vec3(cbLight._m0[_1467 + 2u].xyz), vec3(_269, _270, _271)) * 0.5) + 0.5;
        float _1578 = _1577 * _1577;
        float _3615 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1580 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
        _1553 = (((cbLight._m0[_1561].x * 0.3183098733425140380859375) * _1579) * _1580) + _1533;
        _1555 = (((cbLight._m0[_1561].y * 0.3183098733425140380859375) * _1579) * _1580) + _1534;
        _1557 = (((cbLight._m0[_1561].z * 0.3183098733425140380859375) * _1579) * _1580) + _1535;
    }
    bool _1560 = _1540.y == 0u;
    float _1598;
    float _1600;
    float _1602;
    if (_1560)
    {
        _1598 = _1553;
        _1600 = _1555;
        _1602 = _1557;
    }
    else
    {
        uint _1757 = _1467 + 7u;
        float _1773 = (dot(vec3(cbLight._m0[_1467 + 3u].xyz), vec3(_269, _270, _271)) * 0.5) + 0.5;
        float _1774 = _1773 * _1773;
        float _3631 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1776 = isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0));
        _1598 = (((cbLight._m0[_1757].x * 0.3183098733425140380859375) * _1775) * _1776) + _1553;
        _1600 = (((cbLight._m0[_1757].y * 0.3183098733425140380859375) * _1775) * _1776) + _1555;
        _1602 = (((cbLight._m0[_1757].z * 0.3183098733425140380859375) * _1775) * _1776) + _1557;
    }
    uint _1605 = _1467 + 8u;
    float _1618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1467].w)) * _273) * 0.949999988079071044921875);
    float _1619 = _1618 * _1618;
    float _1620 = cbLight._m0[_1467].x + _350;
    float _1621 = cbLight._m0[_1467].y + _351;
    float _1622 = cbLight._m0[_1467].z + _352;
    float _1626 = inversesqrt(dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622)));
    float _1627 = _1626 * _1620;
    float _1628 = _1626 * _1621;
    float _1629 = _1626 * _1622;
    float _1630 = dot(vec3(_269, _270, _271), vec3(cbLight._m0[_1467].xyz));
    float _3647 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
    float _1633 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _1634 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _1635 = dot(vec3(_269, _270, _271), vec3(_1627, _1628, _1629));
    float _3669 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _1638 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _1639 = dot(vec3(cbLight._m0[_1467].xyz), vec3(_1627, _1628, _1629));
    float _3680 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _1643 = _1619 * _1619;
    float _1647 = ((_1638 * _1638) * (_1643 + (-1.0))) + 1.0;
    float _1658 = (exp2(log2(1.0 - (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1659 = 1.0 - _1619;
    float _1670 = (0.5 / (((_1634 * ((_1633 * _1659) + _1619)) + 9.9999999392252902907785028219223e-09) + (((_1634 * _1659) + _1619) * _1633))) * _1633;
    float _3691 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1672 = (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1643 / ((_1647 * _1647) * 3.141590118408203125));
    uint _1683 = _1467 + 9u;
    float _1694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1505].w)) * _273) * 0.949999988079071044921875);
    float _1695 = _1694 * _1694;
    float _1696 = cbLight._m0[_1505].x + _350;
    float _1697 = cbLight._m0[_1505].y + _351;
    float _1698 = cbLight._m0[_1505].z + _352;
    float _1702 = inversesqrt(dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698)));
    float _1703 = _1702 * _1696;
    float _1704 = _1702 * _1697;
    float _1705 = _1702 * _1698;
    float _1706 = dot(vec3(_269, _270, _271), vec3(cbLight._m0[_1505].xyz));
    float _3702 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1709 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _1710 = dot(vec3(_269, _270, _271), vec3(_1703, _1704, _1705));
    float _3713 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1713 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _1714 = dot(vec3(cbLight._m0[_1505].xyz), vec3(_1703, _1704, _1705));
    float _3724 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1718 = _1695 * _1695;
    float _1722 = ((_1713 * _1713) * (_1718 + (-1.0))) + 1.0;
    float _1731 = (exp2(log2(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1732 = 1.0 - _1695;
    float _1742 = (0.5 / (((_1634 * ((_1709 * _1732) + _1695)) + 9.9999999392252902907785028219223e-09) + (((_1634 * _1732) + _1695) * _1709))) * _1709;
    float _3735 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1744 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1718 / ((_1722 * _1722) * 3.141590118408203125));
    float _1754 = (((_1731 * cbLight._m0[_1683].x) * _1744) * _1490) + (((_1658 * cbLight._m0[_1605].x) * _1672) * _1501);
    float _1755 = (((_1731 * cbLight._m0[_1683].y) * _1744) * _1490) + (((_1658 * cbLight._m0[_1605].y) * _1672) * _1501);
    float _1756 = (((_1731 * cbLight._m0[_1683].z) * _1744) * _1490) + (((_1658 * cbLight._m0[_1605].z) * _1672) * _1501);
    float _1818;
    float _1820;
    float _1822;
    if (_1542)
    {
        _1818 = _1754;
        _1820 = _1755;
        _1822 = _1756;
    }
    else
    {
        uint _1824 = _1467 + 2u;
        uint _1828 = _1467 + 10u;
        float _1842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1824].w)) * _273) * 0.949999988079071044921875);
        float _1843 = _1842 * _1842;
        float _1844 = cbLight._m0[_1824].x + _350;
        float _1845 = cbLight._m0[_1824].y + _351;
        float _1846 = cbLight._m0[_1824].z + _352;
        float _1850 = inversesqrt(dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846)));
        float _1851 = _1850 * _1844;
        float _1852 = _1850 * _1845;
        float _1853 = _1850 * _1846;
        float _1854 = dot(vec3(_269, _270, _271), vec3(cbLight._m0[_1824].xyz));
        float _3746 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1857 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1858 = dot(vec3(_269, _270, _271), vec3(_1851, _1852, _1853));
        float _3757 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1861 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1862 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_1851, _1852, _1853));
        float _3768 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1866 = _1843 * _1843;
        float _1870 = ((_1861 * _1861) * (_1866 + (-1.0))) + 1.0;
        float _1879 = (exp2(log2(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1880 = 1.0 - _1843;
        float _1890 = (0.5 / (((_1634 * ((_1857 * _1880) + _1843)) + 9.9999999392252902907785028219223e-09) + (((_1634 * _1880) + _1843) * _1857))) * _1857;
        float _3779 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1892 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1866 / ((_1870 * _1870) * 3.141590118408203125));
        float _1893 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
        _1818 = (((_1879 * cbLight._m0[_1828].x) * _1892) * _1893) + _1754;
        _1820 = (((_1879 * cbLight._m0[_1828].y) * _1892) * _1893) + _1755;
        _1822 = (((_1879 * cbLight._m0[_1828].z) * _1892) * _1893) + _1756;
    }
    float _1928;
    float _1930;
    float _1932;
    if (_1560)
    {
        _1928 = _1818;
        _1930 = _1820;
        _1932 = _1822;
    }
    else
    {
        uint _1939 = _1467 + 3u;
        uint _1943 = _1467 + 11u;
        float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _273) * 0.949999988079071044921875);
        float _1958 = _1957 * _1957;
        float _1959 = cbLight._m0[_1939].x + _350;
        float _1960 = cbLight._m0[_1939].y + _351;
        float _1961 = cbLight._m0[_1939].z + _352;
        float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
        float _1966 = _1965 * _1959;
        float _1967 = _1965 * _1960;
        float _1968 = _1965 * _1961;
        float _1969 = dot(vec3(_269, _270, _271), vec3(cbLight._m0[_1939].xyz));
        float _3795 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1972 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1973 = dot(vec3(_269, _270, _271), vec3(_1966, _1967, _1968));
        float _3806 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1976 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1977 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_1966, _1967, _1968));
        float _3817 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1981 = _1958 * _1958;
        float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
        float _1994 = (exp2(log2(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1995 = 1.0 - _1958;
        float _2005 = (0.5 / (((_1634 * ((_1972 * _1995) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1634 * _1995) + _1958) * _1972))) * _1972;
        float _3828 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2007 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
        float _2008 = isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0));
        _1928 = (((_1994 * cbLight._m0[_1943].x) * _2007) * _2008) + _1818;
        _1930 = (((_1994 * cbLight._m0[_1943].y) * _2007) * _2008) + _1820;
        _1932 = (((_1994 * cbLight._m0[_1943].z) * _2007) * _2008) + _1822;
    }
    float _2143;
    float _2145;
    float _2147;
    float _2149;
    float _2151;
    float _2153;
    if (_1465.y == 0u)
    {
        float _2083 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2084 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2083;
        float _2085 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2083;
        float _2086 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2083;
        uvec4 _2098 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2099 = _2098.x;
        uint _2110 = uint((float(_2098.y) * floor(float(uint(cbSceneParam._m0[85u].y * _359) / _2099))) + floor(float(uint(cbSceneParam._m0[85u].x * _358) / _2099)));
        float _2120 = (log2(_2086 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2121 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        uint _2124 = uint(isnan(14.0) ? _2121 : (isnan(_2121) ? 14.0 : min(_2121, 14.0)));
        uvec4 _2129 = texelFetch(g_lightClusterGridBuffer, int(((_2124 << 2u) + (_2110 << 6u)) >> 2u));
        uint _2130 = _2129.x;
        uint _2131 = _2098.z;
        float _2233;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        if (((((1u << ((_2131 >> 4u) & 15u)) + 4294967295u) & _2130) == 0u) || ((_2131 & 240u) == 0u))
        {
            _2233 = 0.0;
            _2235 = 0.0;
            _2237 = 0.0;
            _2239 = 0.0;
            _2241 = 0.0;
            _2243 = 0.0;
        }
        else
        {
            float _2234;
            float _2236;
            float _2238;
            float _2240;
            float _2242;
            float _2244;
            float _2378 = 0.0;
            float _2379 = 0.0;
            float _2380 = 0.0;
            float _2381 = 0.0;
            float _2382 = 0.0;
            float _2383 = 0.0;
            uint _2384 = 0u;
            uint _2393;
            bool _2394;
            for (;;)
            {
                _2393 = texelFetch(g_lightClassification, int((((_2124 << 5u) + (_2110 << 9u)) + (_2384 << 2u)) >> 2u)).x;
                _2394 = _2393 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2394)
                {
                    frontier_phi_61_pred = _2378;
                    frontier_phi_61_pred_1 = _2383;
                    frontier_phi_61_pred_2 = _2382;
                    frontier_phi_61_pred_3 = _2381;
                    frontier_phi_61_pred_4 = _2380;
                    frontier_phi_61_pred_5 = _2379;
                }
                else
                {
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    uint _2508;
                    _2502 = _2378;
                    _2503 = _2379;
                    _2504 = _2380;
                    _2505 = _2381;
                    _2506 = _2382;
                    _2507 = _2383;
                    _2508 = _2393;
                    float _2434;
                    float _2435;
                    float _2436;
                    float _2437;
                    float _2438;
                    float _2439;
                    for (;;)
                    {
                        uint _2512 = uint(findLSB(_2508)) + (_2384 << 5u);
                        uint _2509 = (_2508 + 4294967295u) & _2508;
                        uint _2514 = _2512 * 48u;
                        vec4 _2528 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2514)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 3u)).x));
                        uint _2534 = (_2512 * 48u) + 4u;
                        vec4 _2547 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2534)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 3u)).x));
                        uint _2553 = (_2512 * 48u) + 8u;
                        vec3 _2564 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2553)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 2u)).x));
                        float _2568 = _2528.x - _2084;
                        float _2569 = _2528.y - _2085;
                        float _2570 = _2528.z - _2086;
                        float _2571 = dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570));
                        float _2574 = inversesqrt(_2571);
                        float _2575 = _2574 * _2568;
                        float _2576 = _2574 * _2569;
                        float _2577 = _2574 * _2570;
                        float _2578 = dot(vec3(_380, _383, _386), vec3(_2575, _2576, _2577));
                        float _2583 = 1.0 - (_2571 * _2528.w);
                        float _3854 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
                        float _2584 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
                        float _2585 = sqrt(_2571) * _2547.w;
                        float _2588 = 1.39999997615814208984375 / (_2585 + 1.39999997615814208984375);
                        float _2589 = _2588 * _2588;
                        float _2592 = ((1.0 - _2589) * _2578) + _2589;
                        float _2595 = _2585 * _2585;
                        float _2599 = ((isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0))) * _2584) / ((_2595 * 0.699999988079071044921875) + 1.0);
                        float _2603 = (-0.0) - _2084;
                        float _2604 = (-0.0) - _2085;
                        float _2605 = (-0.0) - _2086;
                        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
                        float _2610 = _2609 * _2603;
                        float _2611 = _2609 * _2604;
                        float _2612 = _2609 * _2605;
                        float _2620 = exp2(log2(1.0 / ((_2595 * 3.5) + 5.0)) * 0.25);
                        float _2621 = 1.0 - _441;
                        float _2628 = sqrt(1.0 - ((1.0 - (_2621 * _2621)) * (1.0 - (_2620 * _2620))));
                        float _2629 = _2628 * _2628;
                        float _2630 = _2629 * _2629;
                        float _2631 = _2610 + _2575;
                        float _2632 = _2611 + _2576;
                        float _2633 = _2612 + _2577;
                        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
                        float _2641 = dot(vec3(_380, _383, _386), vec3(_2610, _2611, _2612));
                        float _3870 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
                        float _2644 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
                        float _2645 = dot(vec3(_380, _383, _386), vec3(_2637 * _2631, _2637 * _2632, _2637 * _2633));
                        float _3881 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
                        float _2648 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
                        float _2652 = ((_2648 * _2648) * (_2630 + (-1.0))) + 1.0;
                        float _2653 = _2588 * _2629;
                        float _2654 = _2653 * _2653;
                        float _2657 = ((1.0 - _2654) * _2578) + _2654;
                        float _3892 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
                        float _2658 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                        float _2659 = 1.0 - _2629;
                        float _2669 = (0.5 / (((_2658 * ((_2644 * _2659) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2658 * _2659) + _2629) * _2644))) * _2658;
                        float _3903 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2680 = (((_2630 * 3.1415927410125732421875) * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) / ((_2652 * _2652) * ((_2595 * 2.1991131305694580078125) + 3.141590118408203125))) * _2584;
                        _2437 = (_2599 * _2547.x) + _2505;
                        _2438 = (_2599 * _2547.y) + _2506;
                        _2439 = (_2599 * _2547.z) + _2507;
                        _2434 = (_2680 * _2564.x) + _2502;
                        _2435 = (_2680 * _2564.y) + _2503;
                        _2436 = (_2680 * _2564.z) + _2504;
                        if (_2509 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2502 = _2434;
                            _2503 = _2435;
                            _2504 = _2436;
                            _2505 = _2437;
                            _2506 = _2438;
                            _2507 = _2439;
                            _2508 = _2509;
                        }
                    }
                    frontier_phi_61_pred = _2434;
                    frontier_phi_61_pred_1 = _2439;
                    frontier_phi_61_pred_2 = _2438;
                    frontier_phi_61_pred_3 = _2437;
                    frontier_phi_61_pred_4 = _2436;
                    frontier_phi_61_pred_5 = _2435;
                }
                _2234 = frontier_phi_61_pred;
                _2244 = frontier_phi_61_pred_1;
                _2242 = frontier_phi_61_pred_2;
                _2240 = frontier_phi_61_pred_3;
                _2238 = frontier_phi_61_pred_4;
                _2236 = frontier_phi_61_pred_5;
                uint _2385 = _2384 + 1u;
                if (_2385 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2378 = _2234;
                    _2379 = _2236;
                    _2380 = _2238;
                    _2381 = _2240;
                    _2382 = _2242;
                    _2383 = _2244;
                    _2384 = _2385;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2233 = _2234;
            _2235 = _2236;
            _2237 = _2238;
            _2239 = _2240;
            _2241 = _2242;
            _2243 = _2244;
        }
        uvec4 _2247 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2248 = _2247.z;
        uint _2250 = (_2248 >> 8u) & 15u;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        if (((4294967295u << _2250) & _2130) == 0u)
        {
            _2346 = _2233;
            _2348 = _2235;
            _2350 = _2237;
            _2352 = _2239;
            _2354 = _2241;
            _2356 = _2243;
        }
        else
        {
            float _2371 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
            float _2372 = _2371 * _2084;
            float _2373 = _2371 * _2085;
            float _2374 = _2371 * _2086;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2250 < ((_2248 >> 12u) & 15u))
            {
                float _2347;
                float _2349;
                float _2351;
                float _2353;
                float _2355;
                float _2357;
                float _2485 = _2233;
                float _2486 = _2235;
                float _2487 = _2237;
                float _2488 = _2239;
                float _2489 = _2241;
                float _2490 = _2243;
                uint _2491 = _2250;
                uint _2500;
                bool _2501;
                for (;;)
                {
                    _2500 = texelFetch(g_lightClassification, int((((_2124 << 5u) + (_2110 << 9u)) + (_2491 << 2u)) >> 2u)).x;
                    _2501 = _2500 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2501)
                    {
                        frontier_phi_67_pred = _2488;
                        frontier_phi_67_pred_1 = _2489;
                        frontier_phi_67_pred_2 = _2490;
                        frontier_phi_67_pred_3 = _2487;
                        frontier_phi_67_pred_4 = _2486;
                        frontier_phi_67_pred_5 = _2485;
                    }
                    else
                    {
                        float _2685;
                        float _2686;
                        float _2687;
                        float _2688;
                        float _2689;
                        float _2690;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2698 = _2485;
                        float _2699 = _2486;
                        float _2700 = _2487;
                        float _2701 = _2488;
                        float _2702 = _2489;
                        float _2703 = _2490;
                        uint _2704 = _2500;
                        uint _2705;
                        vec4 _2730;
                        float _2731;
                        vec4 _2746;
                        vec3 _2758;
                        vec4 _2774;
                        vec4 _2790;
                        float _2837;
                        bool _2838;
                        for (;;)
                        {
                            uint _2715 = ((_2491 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2704));
                            _2705 = (_2704 + 4294967295u) & _2704;
                            uint _2717 = _2715 * 40u;
                            _2730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 3u)).x));
                            _2731 = _2730.w;
                            uint _2733 = (_2715 * 40u) + 4u;
                            _2746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 3u)).x));
                            uint _2748 = (_2715 * 40u) + 8u;
                            _2758 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 2u)).x));
                            uint _2761 = (_2715 * 40u) + 16u;
                            _2774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 3u)).x));
                            uint _2777 = (_2715 * 40u) + 20u;
                            _2790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 3u)).x));
                            uint _2793 = (_2715 * 40u) + 24u;
                            vec4 _2806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 3u)).x));
                            uint _2812 = (_2715 * 40u) + 28u;
                            vec4 _2825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 3u)).x));
                            _2837 = fma(_2086, _2825.z, fma(_2085, _2825.y, _2825.x * _2084)) + _2825.w;
                            _2838 = !((fma(_2086, _2806.z, fma(_2085, _2806.y, _2806.x * _2084)) + _2806.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2838)
                            {
                                float _2865 = _2730.x - _2084;
                                float _2866 = _2730.y - _2085;
                                float _2867 = _2730.z - _2086;
                                float _2868 = dot(vec3(_2865, _2866, _2867), vec3(_2865, _2866, _2867));
                                float _2871 = inversesqrt(_2868);
                                float _2872 = _2871 * _2865;
                                float _2873 = _2871 * _2866;
                                float _2874 = _2871 * _2867;
                                float _2878 = 1.0 - (_2868 / (_2731 * _2731));
                                float _3914 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                                float _2879 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
                                float _2883 = sqrt(_2868) * _2746.w;
                                float _2885 = 1.39999997615814208984375 / (_2883 + 1.39999997615814208984375);
                                float _2886 = _2885 * _2885;
                                float _2889 = ((1.0 - _2886) * dot(vec3(_2872, _2873, _2874), vec3(_380, _383, _386))) + _2886;
                                float _2892 = _2883 * _2883;
                                float _2896 = (fma(_2086, _2774.z, fma(_2085, _2774.y, _2774.x * _2084)) + _2774.w) / _2837;
                                float _2897 = (fma(_2086, _2790.z, fma(_2085, _2790.y, _2790.x * _2084)) + _2790.w) / _2837;
                                float _2901 = 1.0 - dot(vec2(_2896, _2897), vec2(_2896, _2897));
                                float _3930 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                                float _2902 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
                                float _2903 = _2902 * (((isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0))) * _2879) / ((_2892 * 0.699999988079071044921875) + 1.0));
                                float _2915 = exp2(log2(1.0 / ((_2892 * 3.5) + 5.0)) * 0.25);
                                float _2916 = 1.0 - _441;
                                float _2923 = sqrt(1.0 - ((1.0 - (_2916 * _2916)) * (1.0 - (_2915 * _2915))));
                                float _2924 = _2923 * _2923;
                                float _2925 = _2924 * _2924;
                                float _2926 = _2872 - _2372;
                                float _2927 = _2873 - _2373;
                                float _2928 = _2874 - _2374;
                                float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
                                float _2936 = dot(vec3(_380, _383, _386), vec3((-0.0) - _2372, (-0.0) - _2373, (-0.0) - _2374));
                                float _3941 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                                float _2939 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                                float _2940 = dot(vec3(_380, _383, _386), vec3(_2932 * _2926, _2932 * _2927, _2932 * _2928));
                                float _3952 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                                float _2943 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
                                float _2947 = ((_2943 * _2943) * (_2925 + (-1.0))) + 1.0;
                                float _2948 = _2885 * _2924;
                                float _2949 = _2948 * _2948;
                                float _2955 = ((1.0 - _2949) * dot(vec3(_380, _383, _386), vec3(_2872, _2873, _2874))) + _2949;
                                float _3963 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                                float _2956 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                                float _2957 = 1.0 - _2924;
                                float _2967 = (0.5 / (((_2956 * ((_2939 * _2957) + _2924)) + 9.9999999392252902907785028219223e-09) + (((_2956 * _2957) + _2924) * _2939))) * _2956;
                                float _3974 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                                float _2977 = (_2902 * _2879) * (((_2925 * 3.1415927410125732421875) * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) / ((_2947 * _2947) * ((_2892 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2977 * _2758.x;
                                frontier_phi_73_pred_1 = _2977 * _2758.y;
                                frontier_phi_73_pred_2 = _2903 * _2746.z;
                                frontier_phi_73_pred_3 = _2903 * _2746.y;
                                frontier_phi_73_pred_4 = _2903 * _2746.x;
                                frontier_phi_73_pred_5 = _2977 * _2758.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2981 = frontier_phi_73_pred;
                            _2982 = frontier_phi_73_pred_1;
                            _2986 = frontier_phi_73_pred_2;
                            _2985 = frontier_phi_73_pred_3;
                            _2984 = frontier_phi_73_pred_4;
                            _2983 = frontier_phi_73_pred_5;
                            _2688 = _2984 + _2701;
                            _2689 = _2985 + _2702;
                            _2690 = _2986 + _2703;
                            _2685 = _2981 + _2698;
                            _2686 = _2982 + _2699;
                            _2687 = _2983 + _2700;
                            if (_2705 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2698 = _2685;
                                _2699 = _2686;
                                _2700 = _2687;
                                _2701 = _2688;
                                _2702 = _2689;
                                _2703 = _2690;
                                _2704 = _2705;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2688;
                        frontier_phi_67_pred_1 = _2689;
                        frontier_phi_67_pred_2 = _2690;
                        frontier_phi_67_pred_3 = _2687;
                        frontier_phi_67_pred_4 = _2686;
                        frontier_phi_67_pred_5 = _2685;
                    }
                    _2353 = frontier_phi_67_pred;
                    _2355 = frontier_phi_67_pred_1;
                    _2357 = frontier_phi_67_pred_2;
                    _2351 = frontier_phi_67_pred_3;
                    _2349 = frontier_phi_67_pred_4;
                    _2347 = frontier_phi_67_pred_5;
                    uint _2492 = _2491 + 1u;
                    if (_2492 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2485 = _2347;
                        _2486 = _2349;
                        _2487 = _2351;
                        _2488 = _2353;
                        _2489 = _2355;
                        _2490 = _2357;
                        _2491 = _2492;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2355;
                frontier_phi_55_56_ladder_1 = _2357;
                frontier_phi_55_56_ladder_2 = _2353;
                frontier_phi_55_56_ladder_3 = _2351;
                frontier_phi_55_56_ladder_4 = _2349;
                frontier_phi_55_56_ladder_5 = _2347;
            }
            else
            {
                frontier_phi_55_56_ladder = _2241;
                frontier_phi_55_56_ladder_1 = _2243;
                frontier_phi_55_56_ladder_2 = _2239;
                frontier_phi_55_56_ladder_3 = _2237;
                frontier_phi_55_56_ladder_4 = _2235;
                frontier_phi_55_56_ladder_5 = _2233;
            }
            _2346 = frontier_phi_55_56_ladder_5;
            _2348 = frontier_phi_55_56_ladder_4;
            _2350 = frontier_phi_55_56_ladder_3;
            _2352 = frontier_phi_55_56_ladder_2;
            _2354 = frontier_phi_55_56_ladder;
            _2356 = frontier_phi_55_56_ladder_1;
        }
        float _2361 = isnan(1.0) ? _425 : (isnan(_425) ? 1.0 : min(_425, 1.0));
        _2143 = (_2361 * _2352) + _1598;
        _2145 = (_2361 * _2354) + _1600;
        _2147 = (_2361 * _2356) + _1602;
        _2149 = ((_2346 * 0.039999999105930328369140625) * _2361) + _1928;
        _2151 = ((_2348 * 0.039999999105930328369140625) * _2361) + _1930;
        _2153 = ((_2350 * 0.039999999105930328369140625) * _2361) + _1932;
    }
    else
    {
        _2143 = _1598;
        _2145 = _1600;
        _2147 = _1602;
        _2149 = _1928;
        _2151 = _1930;
        _2153 = _1932;
    }
    float _3990 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _4001 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _4012 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _4023 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _2178 = cbInstanceData._m0[_399 + 6u].w * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)));
    float _2183 = _358 / cbSceneParam._m0[86u].x;
    float _2184 = _359 / cbSceneParam._m0[86u].y;
    vec4 _2198 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2183, _2184, (log2((isnan(cbSceneParam._m0[77u].w) ? _292 : (isnan(_292) ? cbSceneParam._m0[77u].w : min(_292, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2200 = _2198.x;
    float _2201 = _2198.y;
    float _2202 = _2198.z;
    float _2203 = _2198.w;
    float _2296;
    float _2298;
    float _2300;
    float _2302;
    if (_292 > cbSceneParam._m0[78u].w)
    {
        float _2258 = isnan(_292) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _292 : min(cbSceneParam._m0[80u].w, _292));
        float _2259 = _2258 / _292;
        float _2270 = _2259 * _343;
        float _2271 = _344 * _2259;
        float _2272 = (-0.0) - _2271;
        float _2274 = _2259 * _345;
        float _2276 = (cbSceneParam._m0[77u].w * _2272) / _2258;
        float _2277 = _2276 + cbSceneParam._m0[79u].w;
        float _2278 = cbSceneParam._m0[79u].w - _2271;
        float _2284 = sqrt(((_2270 * _2270) + (_2271 * _2271)) + (_2274 * _2274));
        float _2287 = (1.0 - (cbSceneParam._m0[77u].w / _2258)) * _2284;
        float _2292 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2294 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2447;
        if (abs((_2272 - _2276) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2447 = ((((_2277 > 0.0) ? exp2(_2292 * _2277) : (2.0 - exp2(_2294 * _2277))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2287;
        }
        else
        {
            float _2407 = 1.0 / cbSceneParam._m0[80u].x;
            float _2408 = isnan(_2278) ? _2277 : (isnan(_2277) ? _2278 : max(_2277, _2278));
            float _2409 = isnan(_2278) ? _2277 : (isnan(_2277) ? _2278 : min(_2277, _2278));
            float _2418 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : min(_2408, 0.0));
            float _2419 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : min(_2409, 0.0));
            _2447 = ((abs(_2284 / _2272) * cbSceneParam._m0[80u].y) * ((((_2418 - _2419) * 2.0) - ((exp2(_2292 * (isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0)))) - exp2(_2292 * (isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0))))) * _2407)) - ((exp2(_2294 * _2418) - exp2(_2294 * _2419)) * _2407))) + (_2287 * cbSceneParam._m0[80u].z);
        }
        vec4 _2449 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2183, _2184, 1.0), 0.0);
        float _2458 = exp2((_2447 * (-1.44269502162933349609375)) * (1.0 - _2449.w));
        float _2459 = log2(_2458);
        float _2475 = log2(_2203);
        _2296 = (exp2(_2475 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2459 * cbSceneParam._m0[78u].x)) * _2449.x) / cbSceneParam._m0[78u].x)) + _2200;
        _2298 = (exp2(_2475 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2459 * cbSceneParam._m0[78u].y)) * _2449.y) / cbSceneParam._m0[78u].y)) + _2201;
        _2300 = (exp2(_2475 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2459 * cbSceneParam._m0[78u].z)) * _2449.z) / cbSceneParam._m0[78u].z)) + _2202;
        _2302 = _2458 * _2203;
    }
    else
    {
        _2296 = _2200;
        _2298 = _2201;
        _2300 = _2202;
        _2302 = _2203;
    }
    float _2314 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2315 = _2314 == 3.0;
    float _2316 = log2(_2302);
    float _2323 = exp2(_2316 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_2143 + ((isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0))) * _425))) + ((_2149 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _1232)) * cbPerFrame._m0[3u].x));
    float _2324 = exp2(_2316 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_2145 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _425))) + ((_2151 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _1232)) * cbPerFrame._m0[3u].x));
    float _2325 = exp2(_2316 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_2147 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _425))) + ((_2153 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _1232)) * cbPerFrame._m0[3u].x));
    float _2334 = (_2314 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2334 * (_2315 ? _2323 : (_2323 + (cbSceneParam._m0[72u].w * _2296)));
    SV_Target.y = _2334 * (_2315 ? _2324 : (_2324 + (cbSceneParam._m0[72u].w * _2298)));
    SV_Target.z = _2334 * (_2315 ? _2325 : (_2325 + (cbSceneParam._m0[72u].w * _2300)));
    SV_Target.w = _2178;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2178;
}


