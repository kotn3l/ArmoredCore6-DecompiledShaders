#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _842;
float _3214;
float _3215;
float _3216;
float _3217;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _184 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _191 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _225 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = (cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _225.x;
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _246 = _242.z;
    float _250 = (_242.x * 2.0) + (-1.0);
    float _252 = (_242.y * 2.0) + (-1.0);
    float _253 = dot(vec2(_250, _252), vec2(_250, _252));
    float _3226 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _259 = sqrt(1.0 - (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))));
    float _262 = fma(_259, _191 * NORMAL.x, fma(_252, _198 * TANGENT.x, (_184 * _176) * _250));
    float _265 = fma(_259, _191 * NORMAL.y, fma(_252, _198 * TANGENT.y, (_184 * _177) * _250));
    float _268 = fma(_259, _191 * NORMAL.z, fma(_252, _198 * TANGENT.z, (_184 * _178) * _250));
    float _272 = inversesqrt(dot(vec3(_262, _265, _268), vec3(_262, _265, _268)));
    float _273 = _272 * _262;
    float _274 = _272 * _265;
    float _275 = _272 * _268;
    float _3237 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _276 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
    float _3248 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _277 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
    float _3259 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3270 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3281 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _296 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _337 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _347 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _337);
    float _348 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _337);
    float _349 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _337);
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _347 * _353;
    float _355 = _348 * _353;
    float _356 = _349 * _353;
    vec4 _361 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _363 = _361.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _521 = sqrt(((_347 * _347) + (_348 * _348)) + (_349 * _349));
        float _527 = (cbMatDynParam._m0[5u].x * _521) + cbMatDynParam._m0[5u].y;
        float _3292 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
        float _528 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
        float _532 = (cbMatDynParam._m0[5u].z * _521) + cbMatDynParam._m0[5u].w;
        float _3303 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0))) - _528)) + _528) < ((_363 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _375 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _376 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _396 = fma(_275, cbSceneParam._m0[5u].z, fma(_274, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _273));
    float _399 = fma(_275, cbSceneParam._m0[6u].z, fma(_274, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _273));
    float _402 = fma(_275, cbSceneParam._m0[7u].z, fma(_274, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _273));
    uint _415 = uint(roundEven(NORMAL.w)) * 13u;
    uint _417 = _415 + 9u;
    uint _418 = _417 + uint(cbMatDynParam._m0[0u].w);
    float _424 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0)))) * cbInstanceData._m0[_418].x;
    float _425 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0)))) * cbInstanceData._m0[_418].y;
    float _426 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0)))) * cbInstanceData._m0[_418].z;
    float _3314 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _427 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
    float _3325 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
    float _3336 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    vec4 _438 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _375, cbSceneParam._m0[86u].y * _376));
    float _441 = _438.x * TEXCOORD_1.w;
    float _442 = dot(vec3(_273, _274, _275), vec3(_354, _355, _356));
    float _445 = _442 * 2.0;
    float _449 = (_445 * _273) - _354;
    float _450 = (_445 * _274) - _355;
    float _451 = (_445 * _275) - _356;
    float _455 = abs(dot(vec3(_354, _355, _356), vec3(_273, _274, _275)));
    float _3347 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _457 = sqrt(_277);
    float _470 = exp2((_457 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_457 * 3.0));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _841;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _566 = fma(_510, cbModelParam._m0[26u].z, fma(_506, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _502));
        float _570 = fma(_510, cbModelParam._m0[27u].z, fma(_506, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _502));
        float _574 = fma(_510, cbModelParam._m0[28u].z, fma(_506, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _502));
        float _599 = _502 + _273;
        float _600 = _506 + _274;
        float _601 = _510 + _275;
        float _611 = fma(_601, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _599)) - _566;
        float _612 = fma(_601, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _599)) - _570;
        float _613 = fma(_601, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _599)) - _574;
        float _617 = inversesqrt(dot(vec3(_611, _612, _613), vec3(_611, _612, _613)));
        float _630 = ((_617 * _611) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_566 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _631 = ((_617 * _612) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_570 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _632 = ((_617 * _613) / cbModelParam._m0[34u].z) + ((((((_574 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        float _669 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_635.x + (-0.5));
        float _671 = _669 * (_635.y + (-0.5));
        float _672 = _669 * (_635.z + (-0.5));
        float _679 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_642.x + (-0.5));
        float _681 = _679 * (_642.y + (-0.5));
        float _682 = _679 * (_642.z + (-0.5));
        float _689 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_649.x + (-0.5));
        float _691 = _689 * (_649.y + (-0.5));
        float _692 = _689 * (_649.z + (-0.5));
        float _699 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_656.x + (-0.5));
        float _701 = _699 * (_656.y + (-0.5));
        float _702 = _699 * (_656.z + (-0.5));
        float _703 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _704 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = _670 * 0.5;
        float _707 = _680 * 0.5;
        float _708 = _690 * 0.5;
        float _709 = dot(vec3(_706, _707, _708), vec3(_706, _707, _708));
        float _714 = (_709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_709);
        float _723 = (dot(vec3(_273, _274, _275), vec3(_714 * _706, _714 * _707, _714 * _708)) + 1.0) * 0.5;
        float _3373 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _733 = sqrt(((_707 * _707) + (_706 * _706)) + (_708 * _708)) / (_703 + 9.9999997473787516355514526367188e-06);
        float _3384 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _735 = _734 * 2.0;
        float _739 = (1.0 - _734) / (_734 + 1.0);
        float _3395 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _749 = ((((1.0 - _740) * (_735 + 2.0)) * exp2(log2(isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * (_735 + 1.0))) + _740) * _703;
        float _750 = _671 * 0.5;
        float _751 = _681 * 0.5;
        float _752 = _691 * 0.5;
        float _753 = dot(vec3(_750, _751, _752), vec3(_750, _751, _752));
        float _758 = (_753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_753);
        float _766 = (dot(vec3(_273, _274, _275), vec3(_758 * _750, _758 * _751, _758 * _752)) + 1.0) * 0.5;
        float _3406 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _775 = sqrt(((_751 * _751) + (_750 * _750)) + (_752 * _752)) / (_704 + 9.9999997473787516355514526367188e-06);
        float _3417 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _777 = _776 * 2.0;
        float _781 = (1.0 - _776) / (_776 + 1.0);
        float _3428 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _791 = ((((1.0 - _782) * (_777 + 2.0)) * exp2(log2(isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * (_777 + 1.0))) + _782) * _704;
        float _792 = _672 * 0.5;
        float _793 = _682 * 0.5;
        float _794 = _692 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _808 = (dot(vec3(_273, _274, _275), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3439 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _817 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3450 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3461 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * (_819 + 1.0))) + _824) * _705;
        _841 = _672;
        _843 = _671;
        _844 = _670;
        _845 = _682;
        _846 = _681;
        _847 = _680;
        _848 = _692;
        _849 = _691;
        _850 = _690;
        _851 = _705;
        _852 = _704;
        _853 = _703;
        _854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0)));
        _855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)));
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
    }
    else
    {
        _841 = _842;
        _843 = _842;
        _844 = _842;
        _845 = _842;
        _846 = _842;
        _847 = _842;
        _848 = _842;
        _849 = _842;
        _850 = _842;
        _851 = _842;
        _852 = _842;
        _853 = _842;
        _854 = 0.0;
        _855 = 0.0;
        _856 = 0.0;
    }
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _885 = fma(_510, cbModelParam._m0[30u].z, fma(_506, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _502));
        float _889 = fma(_510, cbModelParam._m0[31u].z, fma(_506, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _502));
        float _893 = fma(_510, cbModelParam._m0[32u].z, fma(_506, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _502));
        float _916 = _502 + _273;
        float _917 = _506 + _274;
        float _918 = _510 + _275;
        float _928 = fma(_918, cbModelParam._m0[30u].z, fma(_917, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916)) - _885;
        float _929 = fma(_918, cbModelParam._m0[31u].z, fma(_917, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916)) - _889;
        float _930 = fma(_918, cbModelParam._m0[32u].z, fma(_917, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916)) - _893;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_885 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_889 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[35u].z) + ((((((_893 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _984 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_951.x + (-0.5));
        float _986 = _984 * (_951.y + (-0.5));
        float _987 = _984 * (_951.z + (-0.5));
        float _994 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_958.x + (-0.5));
        float _996 = _994 * (_958.y + (-0.5));
        float _997 = _994 * (_958.z + (-0.5));
        float _1004 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_965.x + (-0.5));
        float _1006 = _1004 * (_965.y + (-0.5));
        float _1007 = _1004 * (_965.z + (-0.5));
        float _1014 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_972.x + (-0.5));
        float _1016 = _1014 * (_972.y + (-0.5));
        float _1017 = _1014 * (_972.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_273, _274, _275), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3524 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_1048 + 1.0))) + _1053) * _1018;
        float _1063 = _986 * 0.5;
        float _1064 = _996 * 0.5;
        float _1065 = _1006 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_273, _274, _275), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3557 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_1090 + 1.0))) + _1095) * _1019;
        float _1105 = _987 * 0.5;
        float _1106 = _997 * 0.5;
        float _1107 = _1007 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_273, _274, _275), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3590 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_1132 + 1.0))) + _1137) * _1020;
        _1154 = _987;
        _1155 = _986;
        _1156 = _985;
        _1157 = _997;
        _1158 = _996;
        _1159 = _995;
        _1160 = _1007;
        _1161 = _1006;
        _1162 = _1005;
        _1163 = _1020;
        _1164 = _1019;
        _1165 = _1018;
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _842;
        _1155 = _842;
        _1156 = _842;
        _1157 = _842;
        _1158 = _842;
        _1159 = _842;
        _1160 = _842;
        _1161 = _842;
        _1162 = _842;
        _1163 = _842;
        _1164 = _842;
        _1165 = _842;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _854)) + _854;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _855)) + _855;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _856)) + _856;
    float _1201 = fma(_1180, cbSceneParam._m0[89u].z, fma(_1179, cbSceneParam._m0[89u].y, _1178 * cbSceneParam._m0[89u].x));
    float _1204 = fma(_1180, cbSceneParam._m0[90u].z, fma(_1179, cbSceneParam._m0[90u].y, _1178 * cbSceneParam._m0[90u].x));
    float _1207 = fma(_1180, cbSceneParam._m0[91u].z, fma(_1179, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1178));
    float _1222 = _449 * 0.5;
    float _1223 = _450 * 0.5;
    float _1224 = _451 * 0.5;
    float _1225 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1228 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1231 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1265;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1238 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_841, _845, _848, _851));
        float _1242 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_843, _846, _849, _852));
        float _1246 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_844, _847, _850, _853));
        float _1253 = dot(vec4(cbModelParam._m0[39u]), vec4(_1222, _1223, _1224, 1.0));
        _1265 = dot(vec3(isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1253) ? 0.0 : (isnan(0.0) ? _1253 : max(0.0, _1253))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1265 = 1.0;
    }
    float _1276;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1267 = dot(vec4(cbModelParam._m0[40u]), vec4(_1222, _1223, _1224, 1.0));
        _1276 = dot(vec3(isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1276 = 1.0;
    }
    float _1280 = (_1276 * cbModelParam._m0[1u].x) + (_1265 * (1.0 - cbModelParam._m0[1u].x));
    float _1290 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _277);
    float _1291 = isnan(_1290) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1290 : min(cbModelParam._m0[25u].z, _1290));
    float _1373;
    float _1375;
    float _1377;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1340 = fma(_510, cbModelParam._m0[13u].z, fma(_506, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502)) + cbModelParam._m0[13u].w;
        float _1344 = fma(_510, cbModelParam._m0[14u].z, fma(_506, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502)) + cbModelParam._m0[14u].w;
        float _1348 = fma(_510, cbModelParam._m0[15u].z, fma(_506, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502)) + cbModelParam._m0[15u].w;
        float _1351 = fma(_451, cbModelParam._m0[13u].z, fma(_450, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _449));
        float _1354 = fma(_451, cbModelParam._m0[14u].z, fma(_450, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _449));
        float _1357 = fma(_451, cbModelParam._m0[15u].z, fma(_450, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _449));
        float _1385;
        if (_1351 > 0.0)
        {
            _1385 = abs((1.0 - _1340) / _1351);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1340 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1385 = frontier_phi_17_15_ladder;
        }
        float _1591;
        if (_1354 > 0.0)
        {
            _1591 = abs((1.0 - _1344) / _1354);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1344 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1591 = frontier_phi_26_22_ladder;
        }
        float _1834;
        if (_1357 > 0.0)
        {
            _1834 = abs((1.0 - _1348) / _1357);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1348 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1834 = frontier_phi_38_33_ladder;
        }
        float _1836 = isnan(_1591) ? _1385 : (isnan(_1385) ? _1591 : min(_1385, _1591));
        float _1837 = isnan(_1834) ? _1836 : (isnan(_1836) ? _1834 : min(_1836, _1834));
        float _1841 = (_1837 * _1351) + _1340;
        float _1842 = (_1837 * _1354) + _1344;
        float _1843 = (_1837 * _1357) + _1348;
        float _1844 = _1837 * 9.9999997473787516355514526367188e-05;
        float _1846 = (-1.0) - _1844;
        float _1848 = _1844 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1843 > _1848) || ((_1843 < _1846) || ((_1842 > _1848) || ((_1842 < _1846) || ((_1841 < _1846) || (_1841 > _1848))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1967 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1843, cbModelParam._m0[9u].z, fma(_1842, cbModelParam._m0[9u].y, _1841 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1843, cbModelParam._m0[10u].z, fma(_1842, cbModelParam._m0[10u].y, _1841 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1843, cbModelParam._m0[11u].z, fma(_1842, cbModelParam._m0[11u].y, _1841 * cbModelParam._m0[11u].x))), _1291);
            frontier_phi_16_38_ladder = _1967.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1967.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1967.x * cbModelParam._m0[1u].y;
        }
        _1373 = frontier_phi_16_38_ladder_2;
        _1375 = frontier_phi_16_38_ladder_1;
        _1377 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1361 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_449, _450, _451), _1291);
        _1373 = _1361.x * cbModelParam._m0[1u].y;
        _1375 = _1361.y * cbModelParam._m0[1u].y;
        _1377 = _1361.z * cbModelParam._m0[1u].y;
    }
    float _1381 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _277);
    float _1382 = isnan(_1381) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1381 : min(cbModelParam._m0[25u].w, _1381));
    float _1475;
    float _1477;
    float _1479;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1439 = fma(_510, cbModelParam._m0[21u].z, fma(_506, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502)) + cbModelParam._m0[21u].w;
        float _1443 = fma(_510, cbModelParam._m0[22u].z, fma(_506, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502)) + cbModelParam._m0[22u].w;
        float _1447 = fma(_510, cbModelParam._m0[23u].z, fma(_506, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502)) + cbModelParam._m0[23u].w;
        float _1450 = fma(_451, cbModelParam._m0[21u].z, fma(_450, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _449));
        float _1453 = fma(_451, cbModelParam._m0[22u].z, fma(_450, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _449));
        float _1456 = fma(_451, cbModelParam._m0[23u].z, fma(_450, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _449));
        float _1596;
        if (_1450 > 0.0)
        {
            _1596 = abs((1.0 - _1439) / _1450);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1439 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1596 = frontier_phi_28_24_ladder;
        }
        float _1861;
        if (_1453 > 0.0)
        {
            _1861 = abs((1.0 - _1443) / _1453);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1443 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1861 = frontier_phi_40_35_ladder;
        }
        float _2066;
        if (_1456 > 0.0)
        {
            _2066 = abs((1.0 - _1447) / _1456);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1447 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2066 = frontier_phi_49_46_ladder;
        }
        float _2068 = isnan(_1861) ? _1596 : (isnan(_1596) ? _1861 : min(_1596, _1861));
        float _2069 = isnan(_2066) ? _2068 : (isnan(_2068) ? _2066 : min(_2068, _2066));
        float _2073 = (_2069 * _1450) + _1439;
        float _2074 = (_2069 * _1453) + _1443;
        float _2075 = (_2069 * _1456) + _1447;
        float _2076 = _2069 * 9.9999997473787516355514526367188e-05;
        float _2077 = (-1.0) - _2076;
        float _2079 = _2076 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2075 > _2079) || ((_2075 < _2077) || ((_2074 > _2079) || ((_2074 < _2077) || ((_2073 < _2077) || (_2073 > _2079))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2276 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2075, cbModelParam._m0[17u].z, fma(_2074, cbModelParam._m0[17u].y, _2073 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2075, cbModelParam._m0[18u].z, fma(_2074, cbModelParam._m0[18u].y, _2073 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2075, cbModelParam._m0[19u].z, fma(_2074, cbModelParam._m0[19u].y, _2073 * cbModelParam._m0[19u].x))), _1382);
            frontier_phi_25_49_ladder = _2276.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2276.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2276.x * cbModelParam._m0[1u].z;
        }
        _1475 = frontier_phi_25_49_ladder_2;
        _1477 = frontier_phi_25_49_ladder_1;
        _1479 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1459 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_449, _450, _451), _1382);
        _1475 = _1459.x * cbModelParam._m0[1u].z;
        _1477 = _1459.y * cbModelParam._m0[1u].z;
        _1479 = _1459.z * cbModelParam._m0[1u].z;
    }
    float _1491 = ((((1.0 - _470) * ((_457 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_470 * _457)) * _441;
    float _1492 = _1491 * ((cbModelParam._m0[1u].w * (_1475 - _1373)) + _1373);
    float _1493 = _1491 * ((cbModelParam._m0[1u].w * (_1477 - _1375)) + _1375);
    float _1494 = _1491 * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1497 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1500 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1503 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, _1492 * cbSceneParam._m0[91u].x));
    uvec4 _1513 = floatBitsToUint(cbInstanceData._m0[_415 + 5u]);
    uint _1515 = _1513.x * 14u;
    uint _1516 = _1515 + 13u;
    float _1523 = _441 + (-1.0);
    float _1528 = (cbLight._m0[_1516].x * _1523) + 1.0;
    float _1529 = (cbLight._m0[_1516].y * _1523) + 1.0;
    float _1530 = (cbLight._m0[_1516].z * _1523) + 1.0;
    float _1531 = (cbLight._m0[_1516].w * _1523) + 1.0;
    uint _1532 = _1515 + 5u;
    float _1538 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
    uint _1542 = _1515 + 4u;
    float _1549 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
    uint _1553 = _1515 | 1u;
    float _1564 = dot(vec3(cbLight._m0[_1515].xyz), vec3(_273, _274, _275));
    float _1567 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_273, _274, _275));
    float _3726 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
    float _3737 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _1572 = (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * 0.3183098733425140380859375;
    float _1574 = (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * 0.3183098733425140380859375;
    float _1581 = ((cbLight._m0[_1532].x * _1538) * _1574) + ((cbLight._m0[_1542].x * _1549) * _1572);
    float _1582 = ((_1538 * cbLight._m0[_1532].y) * _1574) + ((_1549 * cbLight._m0[_1542].y) * _1572);
    float _1583 = ((_1538 * cbLight._m0[_1532].z) * _1574) + ((_1549 * cbLight._m0[_1542].z) * _1572);
    uvec4 _1588 = floatBitsToUint(cbLight._m0[_1515 + 12u]);
    bool _1590 = _1588.x == 0u;
    float _1601;
    float _1603;
    float _1605;
    if (_1590)
    {
        _1601 = _1581;
        _1603 = _1582;
        _1605 = _1583;
    }
    else
    {
        uint _1609 = _1515 + 6u;
        float _1625 = (dot(vec3(cbLight._m0[_1515 + 2u].xyz), vec3(_273, _274, _275)) * 0.5) + 0.5;
        float _1626 = _1625 * _1625;
        float _3748 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1628 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1601 = (((cbLight._m0[_1609].x * 0.3183098733425140380859375) * _1627) * _1628) + _1581;
        _1603 = (((cbLight._m0[_1609].y * 0.3183098733425140380859375) * _1627) * _1628) + _1582;
        _1605 = (((cbLight._m0[_1609].z * 0.3183098733425140380859375) * _1627) * _1628) + _1583;
    }
    bool _1608 = _1588.y == 0u;
    float _1646;
    float _1648;
    float _1650;
    if (_1608)
    {
        _1646 = _1601;
        _1648 = _1603;
        _1650 = _1605;
    }
    else
    {
        uint _1805 = _1515 + 7u;
        float _1821 = (dot(vec3(cbLight._m0[_1515 + 3u].xyz), vec3(_273, _274, _275)) * 0.5) + 0.5;
        float _1822 = _1821 * _1821;
        float _3764 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1824 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1646 = (((cbLight._m0[_1805].x * 0.3183098733425140380859375) * _1823) * _1824) + _1601;
        _1648 = (((cbLight._m0[_1805].y * 0.3183098733425140380859375) * _1823) * _1824) + _1603;
        _1650 = (((cbLight._m0[_1805].z * 0.3183098733425140380859375) * _1823) * _1824) + _1605;
    }
    uint _1653 = _1515 + 8u;
    float _1666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1515].w)) * _277) * 0.949999988079071044921875);
    float _1667 = _1666 * _1666;
    float _1668 = cbLight._m0[_1515].x + _354;
    float _1669 = cbLight._m0[_1515].y + _355;
    float _1670 = cbLight._m0[_1515].z + _356;
    float _1674 = inversesqrt(dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670)));
    float _1675 = _1674 * _1668;
    float _1676 = _1674 * _1669;
    float _1677 = _1674 * _1670;
    float _1678 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1515].xyz));
    float _3780 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _1681 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _1682 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _1683 = dot(vec3(_273, _274, _275), vec3(_1675, _1676, _1677));
    float _3802 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1686 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _1687 = dot(vec3(cbLight._m0[_1515].xyz), vec3(_1675, _1676, _1677));
    float _3813 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1691 = _1667 * _1667;
    float _1695 = ((_1686 * _1686) * (_1691 + (-1.0))) + 1.0;
    float _1706 = (exp2(log2(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1707 = 1.0 - _1667;
    float _1718 = (0.5 / (((_1682 * ((_1681 * _1707) + _1667)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1707) + _1667) * _1681))) * _1681;
    float _3824 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1720 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1691 / ((_1695 * _1695) * 3.141590118408203125));
    uint _1731 = _1515 + 9u;
    float _1742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1553].w)) * _277) * 0.949999988079071044921875);
    float _1743 = _1742 * _1742;
    float _1744 = cbLight._m0[_1553].x + _354;
    float _1745 = cbLight._m0[_1553].y + _355;
    float _1746 = cbLight._m0[_1553].z + _356;
    float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
    float _1751 = _1750 * _1744;
    float _1752 = _1750 * _1745;
    float _1753 = _1750 * _1746;
    float _1754 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1553].xyz));
    float _3835 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _1758 = dot(vec3(_273, _274, _275), vec3(_1751, _1752, _1753));
    float _3846 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1761 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _1762 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_1751, _1752, _1753));
    float _3857 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1766 = _1743 * _1743;
    float _1770 = ((_1761 * _1761) * (_1766 + (-1.0))) + 1.0;
    float _1779 = (exp2(log2(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1780 = 1.0 - _1743;
    float _1790 = (0.5 / (((_1682 * ((_1757 * _1780) + _1743)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1780) + _1743) * _1757))) * _1757;
    float _3868 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1792 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1766 / ((_1770 * _1770) * 3.141590118408203125));
    float _1802 = (((_1779 * cbLight._m0[_1731].x) * _1792) * _1538) + (((_1706 * cbLight._m0[_1653].x) * _1720) * _1549);
    float _1803 = (((_1779 * cbLight._m0[_1731].y) * _1792) * _1538) + (((_1706 * cbLight._m0[_1653].y) * _1720) * _1549);
    float _1804 = (((_1779 * cbLight._m0[_1731].z) * _1792) * _1538) + (((_1706 * cbLight._m0[_1653].z) * _1720) * _1549);
    float _1866;
    float _1868;
    float _1870;
    if (_1590)
    {
        _1866 = _1802;
        _1868 = _1803;
        _1870 = _1804;
    }
    else
    {
        uint _1872 = _1515 + 2u;
        uint _1876 = _1515 + 10u;
        float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _277) * 0.949999988079071044921875);
        float _1891 = _1890 * _1890;
        float _1892 = cbLight._m0[_1872].x + _354;
        float _1893 = cbLight._m0[_1872].y + _355;
        float _1894 = cbLight._m0[_1872].z + _356;
        float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
        float _1899 = _1898 * _1892;
        float _1900 = _1898 * _1893;
        float _1901 = _1898 * _1894;
        float _1902 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1872].xyz));
        float _3879 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1905 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1906 = dot(vec3(_273, _274, _275), vec3(_1899, _1900, _1901));
        float _3890 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1909 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1910 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_1899, _1900, _1901));
        float _3901 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1914 = _1891 * _1891;
        float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
        float _1927 = (exp2(log2(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1928 = 1.0 - _1891;
        float _1938 = (0.5 / (((_1682 * ((_1905 * _1928) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1928) + _1891) * _1905))) * _1905;
        float _3912 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1940 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
        float _1941 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1866 = (((_1927 * cbLight._m0[_1876].x) * _1940) * _1941) + _1802;
        _1868 = (((_1927 * cbLight._m0[_1876].y) * _1940) * _1941) + _1803;
        _1870 = (((_1927 * cbLight._m0[_1876].z) * _1940) * _1941) + _1804;
    }
    float _1976;
    float _1978;
    float _1980;
    if (_1608)
    {
        _1976 = _1866;
        _1978 = _1868;
        _1980 = _1870;
    }
    else
    {
        uint _1987 = _1515 + 3u;
        uint _1991 = _1515 + 11u;
        float _2005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1987].w)) * _277) * 0.949999988079071044921875);
        float _2006 = _2005 * _2005;
        float _2007 = cbLight._m0[_1987].x + _354;
        float _2008 = cbLight._m0[_1987].y + _355;
        float _2009 = cbLight._m0[_1987].z + _356;
        float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
        float _2014 = _2013 * _2007;
        float _2015 = _2013 * _2008;
        float _2016 = _2013 * _2009;
        float _2017 = dot(vec3(_273, _274, _275), vec3(cbLight._m0[_1987].xyz));
        float _3928 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2020 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _2021 = dot(vec3(_273, _274, _275), vec3(_2014, _2015, _2016));
        float _3939 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2024 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _2025 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_2014, _2015, _2016));
        float _3950 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2029 = _2006 * _2006;
        float _2033 = ((_2024 * _2024) * (_2029 + (-1.0))) + 1.0;
        float _2042 = (exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2043 = 1.0 - _2006;
        float _2053 = (0.5 / (((_1682 * ((_2020 * _2043) + _2006)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _2043) + _2006) * _2020))) * _2020;
        float _3961 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2055 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_2029 / ((_2033 * _2033) * 3.141590118408203125));
        float _2056 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1976 = (((_2042 * cbLight._m0[_1991].x) * _2055) * _2056) + _1866;
        _1978 = (((_2042 * cbLight._m0[_1991].y) * _2055) * _2056) + _1868;
        _1980 = (((_2042 * cbLight._m0[_1991].z) * _2055) * _2056) + _1870;
    }
    float _2191;
    float _2193;
    float _2195;
    float _2197;
    float _2199;
    float _2201;
    if (_1513.y == 0u)
    {
        float _2131 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2132 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2131;
        float _2133 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2131;
        float _2134 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2131;
        uvec4 _2146 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2147 = _2146.x;
        uint _2158 = uint((float(_2146.y) * floor(float(uint(cbSceneParam._m0[85u].y * _376) / _2147))) + floor(float(uint(cbSceneParam._m0[85u].x * _375) / _2147)));
        float _2168 = (log2(_2134 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2169 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        uint _2172 = uint(isnan(14.0) ? _2169 : (isnan(_2169) ? 14.0 : min(_2169, 14.0)));
        uvec4 _2177 = texelFetch(g_lightClusterGridBuffer, int(((_2172 << 2u) + (_2158 << 6u)) >> 2u));
        uint _2178 = _2177.x;
        uint _2179 = _2146.z;
        float _2281;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        float _2291;
        if (((((1u << ((_2179 >> 4u) & 15u)) + 4294967295u) & _2178) == 0u) || ((_2179 & 240u) == 0u))
        {
            _2281 = 0.0;
            _2283 = 0.0;
            _2285 = 0.0;
            _2287 = 0.0;
            _2289 = 0.0;
            _2291 = 0.0;
        }
        else
        {
            float _2282;
            float _2284;
            float _2286;
            float _2288;
            float _2290;
            float _2292;
            float _2434 = 0.0;
            float _2435 = 0.0;
            float _2436 = 0.0;
            float _2437 = 0.0;
            float _2438 = 0.0;
            float _2439 = 0.0;
            uint _2440 = 0u;
            uint _2449;
            bool _2450;
            for (;;)
            {
                _2449 = texelFetch(g_lightClassification, int((((_2172 << 5u) + (_2158 << 9u)) + (_2440 << 2u)) >> 2u)).x;
                _2450 = _2449 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2450)
                {
                    frontier_phi_66_pred = _2434;
                    frontier_phi_66_pred_1 = _2439;
                    frontier_phi_66_pred_2 = _2438;
                    frontier_phi_66_pred_3 = _2437;
                    frontier_phi_66_pred_4 = _2436;
                    frontier_phi_66_pred_5 = _2435;
                }
                else
                {
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    uint _2585;
                    _2579 = _2434;
                    _2580 = _2435;
                    _2581 = _2436;
                    _2582 = _2437;
                    _2583 = _2438;
                    _2584 = _2439;
                    _2585 = _2449;
                    float _2506;
                    float _2507;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    for (;;)
                    {
                        uint _2589 = uint(findLSB(_2585)) + (_2440 << 5u);
                        uint _2586 = (_2585 + 4294967295u) & _2585;
                        uint _2591 = _2589 * 48u;
                        vec4 _2605 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2591)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 3u)).x));
                        uint _2611 = (_2589 * 48u) + 4u;
                        vec4 _2624 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2611)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 3u)).x));
                        uint _2630 = (_2589 * 48u) + 8u;
                        vec3 _2641 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2630)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 2u)).x));
                        float _2645 = _2605.x - _2132;
                        float _2646 = _2605.y - _2133;
                        float _2647 = _2605.z - _2134;
                        float _2648 = dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647));
                        float _2651 = inversesqrt(_2648);
                        float _2652 = _2651 * _2645;
                        float _2653 = _2651 * _2646;
                        float _2654 = _2651 * _2647;
                        float _2655 = dot(vec3(_396, _399, _402), vec3(_2652, _2653, _2654));
                        float _2660 = 1.0 - (_2648 * _2605.w);
                        float _3987 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
                        float _2661 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                        float _2662 = sqrt(_2648) * _2624.w;
                        float _2665 = 1.39999997615814208984375 / (_2662 + 1.39999997615814208984375);
                        float _2666 = _2665 * _2665;
                        float _2669 = ((1.0 - _2666) * _2655) + _2666;
                        float _2672 = _2662 * _2662;
                        float _2676 = ((isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0))) * _2661) / ((_2672 * 0.699999988079071044921875) + 1.0);
                        float _2680 = (-0.0) - _2132;
                        float _2681 = (-0.0) - _2133;
                        float _2682 = (-0.0) - _2134;
                        float _2686 = inversesqrt(dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682)));
                        float _2687 = _2686 * _2680;
                        float _2688 = _2686 * _2681;
                        float _2689 = _2686 * _2682;
                        float _2697 = exp2(log2(1.0 / ((_2672 * 3.5) + 5.0)) * 0.25);
                        float _2698 = 1.0 - _457;
                        float _2705 = sqrt(1.0 - ((1.0 - (_2698 * _2698)) * (1.0 - (_2697 * _2697))));
                        float _2706 = _2705 * _2705;
                        float _2707 = _2706 * _2706;
                        float _2708 = _2687 + _2652;
                        float _2709 = _2688 + _2653;
                        float _2710 = _2689 + _2654;
                        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
                        float _2718 = dot(vec3(_396, _399, _402), vec3(_2687, _2688, _2689));
                        float _4003 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                        float _2721 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
                        float _2722 = dot(vec3(_396, _399, _402), vec3(_2714 * _2708, _2714 * _2709, _2714 * _2710));
                        float _4014 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2725 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
                        float _2729 = ((_2725 * _2725) * (_2707 + (-1.0))) + 1.0;
                        float _2730 = _2665 * _2706;
                        float _2731 = _2730 * _2730;
                        float _2734 = ((1.0 - _2731) * _2655) + _2731;
                        float _4025 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2735 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _2736 = 1.0 - _2706;
                        float _2746 = (0.5 / (((_2735 * ((_2721 * _2736) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2735 * _2736) + _2706) * _2721))) * _2735;
                        float _4036 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2757 = (((_2707 * 3.1415927410125732421875) * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) / ((_2729 * _2729) * ((_2672 * 2.1991131305694580078125) + 3.141590118408203125))) * _2661;
                        _2509 = (_2676 * _2624.x) + _2582;
                        _2510 = (_2676 * _2624.y) + _2583;
                        _2511 = (_2676 * _2624.z) + _2584;
                        _2506 = (_2757 * _2641.x) + _2579;
                        _2507 = (_2757 * _2641.y) + _2580;
                        _2508 = (_2757 * _2641.z) + _2581;
                        if (_2586 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2579 = _2506;
                            _2580 = _2507;
                            _2581 = _2508;
                            _2582 = _2509;
                            _2583 = _2510;
                            _2584 = _2511;
                            _2585 = _2586;
                        }
                    }
                    frontier_phi_66_pred = _2506;
                    frontier_phi_66_pred_1 = _2511;
                    frontier_phi_66_pred_2 = _2510;
                    frontier_phi_66_pred_3 = _2509;
                    frontier_phi_66_pred_4 = _2508;
                    frontier_phi_66_pred_5 = _2507;
                }
                _2282 = frontier_phi_66_pred;
                _2292 = frontier_phi_66_pred_1;
                _2290 = frontier_phi_66_pred_2;
                _2288 = frontier_phi_66_pred_3;
                _2286 = frontier_phi_66_pred_4;
                _2284 = frontier_phi_66_pred_5;
                uint _2441 = _2440 + 1u;
                if (_2441 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2434 = _2282;
                    _2435 = _2284;
                    _2436 = _2286;
                    _2437 = _2288;
                    _2438 = _2290;
                    _2439 = _2292;
                    _2440 = _2441;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2281 = _2282;
            _2283 = _2284;
            _2285 = _2286;
            _2287 = _2288;
            _2289 = _2290;
            _2291 = _2292;
        }
        uvec4 _2295 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2296 = _2295.z;
        uint _2298 = (_2296 >> 8u) & 15u;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        if (((4294967295u << _2298) & _2178) == 0u)
        {
            _2402 = _2281;
            _2404 = _2283;
            _2406 = _2285;
            _2408 = _2287;
            _2410 = _2289;
            _2412 = _2291;
        }
        else
        {
            float _2427 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
            float _2428 = _2427 * _2132;
            float _2429 = _2427 * _2133;
            float _2430 = _2427 * _2134;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2298 < ((_2296 >> 12u) & 15u))
            {
                float _2403;
                float _2405;
                float _2407;
                float _2409;
                float _2411;
                float _2413;
                float _2562 = _2281;
                float _2563 = _2283;
                float _2564 = _2285;
                float _2565 = _2287;
                float _2566 = _2289;
                float _2567 = _2291;
                uint _2568 = _2298;
                uint _2577;
                bool _2578;
                for (;;)
                {
                    _2577 = texelFetch(g_lightClassification, int((((_2172 << 5u) + (_2158 << 9u)) + (_2568 << 2u)) >> 2u)).x;
                    _2578 = _2577 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2578)
                    {
                        frontier_phi_77_pred = _2567;
                        frontier_phi_77_pred_1 = _2566;
                        frontier_phi_77_pred_2 = _2565;
                        frontier_phi_77_pred_3 = _2564;
                        frontier_phi_77_pred_4 = _2563;
                        frontier_phi_77_pred_5 = _2562;
                    }
                    else
                    {
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _2784 = _2562;
                        float _2785 = _2563;
                        float _2786 = _2564;
                        float _2787 = _2565;
                        float _2788 = _2566;
                        float _2789 = _2567;
                        uint _2790 = _2577;
                        uint _2791;
                        vec4 _2816;
                        float _2817;
                        vec4 _2832;
                        vec3 _2844;
                        vec4 _2860;
                        vec4 _2876;
                        float _2923;
                        bool _2924;
                        for (;;)
                        {
                            uint _2801 = ((_2568 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2790));
                            _2791 = (_2790 + 4294967295u) & _2790;
                            uint _2803 = _2801 * 40u;
                            _2816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 3u)).x));
                            _2817 = _2816.w;
                            uint _2819 = (_2801 * 40u) + 4u;
                            _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            uint _2834 = (_2801 * 40u) + 8u;
                            _2844 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x));
                            uint _2847 = (_2801 * 40u) + 16u;
                            _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            uint _2863 = (_2801 * 40u) + 20u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2879 = (_2801 * 40u) + 24u;
                            vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            uint _2898 = (_2801 * 40u) + 28u;
                            vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            _2923 = fma(_2134, _2911.z, fma(_2133, _2911.y, _2911.x * _2132)) + _2911.w;
                            _2924 = !((fma(_2134, _2892.z, fma(_2133, _2892.y, _2892.x * _2132)) + _2892.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2924)
                            {
                                float _2951 = _2816.x - _2132;
                                float _2952 = _2816.y - _2133;
                                float _2953 = _2816.z - _2134;
                                float _2954 = dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953));
                                float _2957 = inversesqrt(_2954);
                                float _2958 = _2957 * _2951;
                                float _2959 = _2957 * _2952;
                                float _2960 = _2957 * _2953;
                                float _2964 = 1.0 - (_2954 / (_2817 * _2817));
                                float _4047 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                                float _2965 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                                float _2969 = sqrt(_2954) * _2832.w;
                                float _2971 = 1.39999997615814208984375 / (_2969 + 1.39999997615814208984375);
                                float _2972 = _2971 * _2971;
                                float _2975 = ((1.0 - _2972) * dot(vec3(_2958, _2959, _2960), vec3(_396, _399, _402))) + _2972;
                                float _2978 = _2969 * _2969;
                                float _2982 = (fma(_2134, _2860.z, fma(_2133, _2860.y, _2860.x * _2132)) + _2860.w) / _2923;
                                float _2983 = (fma(_2134, _2876.z, fma(_2133, _2876.y, _2876.x * _2132)) + _2876.w) / _2923;
                                float _2987 = 1.0 - dot(vec2(_2982, _2983), vec2(_2982, _2983));
                                float _4063 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                                float _2988 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                                float _2989 = _2988 * (((isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))) * _2965) / ((_2978 * 0.699999988079071044921875) + 1.0));
                                float _3001 = exp2(log2(1.0 / ((_2978 * 3.5) + 5.0)) * 0.25);
                                float _3002 = 1.0 - _457;
                                float _3009 = sqrt(1.0 - ((1.0 - (_3002 * _3002)) * (1.0 - (_3001 * _3001))));
                                float _3010 = _3009 * _3009;
                                float _3011 = _3010 * _3010;
                                float _3012 = _2958 - _2428;
                                float _3013 = _2959 - _2429;
                                float _3014 = _2960 - _2430;
                                float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                                float _3022 = dot(vec3(_396, _399, _402), vec3((-0.0) - _2428, (-0.0) - _2429, (-0.0) - _2430));
                                float _4074 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3025 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                                float _3026 = dot(vec3(_396, _399, _402), vec3(_3018 * _3012, _3018 * _3013, _3018 * _3014));
                                float _4085 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3029 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                                float _3033 = ((_3029 * _3029) * (_3011 + (-1.0))) + 1.0;
                                float _3034 = _2971 * _3010;
                                float _3035 = _3034 * _3034;
                                float _3041 = ((1.0 - _3035) * dot(vec3(_396, _399, _402), vec3(_2958, _2959, _2960))) + _3035;
                                float _4096 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3043 = 1.0 - _3010;
                                float _3053 = (0.5 / (((_3042 * ((_3025 * _3043) + _3010)) + 9.9999999392252902907785028219223e-09) + (((_3042 * _3043) + _3010) * _3025))) * _3042;
                                float _4107 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3063 = (_2988 * _2965) * (((_3011 * 3.1415927410125732421875) * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) / ((_3033 * _3033) * ((_2978 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2989 * _2832.y;
                                frontier_phi_83_pred_1 = _2989 * _2832.x;
                                frontier_phi_83_pred_2 = _3063 * _2844.z;
                                frontier_phi_83_pred_3 = _3063 * _2844.y;
                                frontier_phi_83_pred_4 = _3063 * _2844.x;
                                frontier_phi_83_pred_5 = _2989 * _2832.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3071 = frontier_phi_83_pred;
                            _3070 = frontier_phi_83_pred_1;
                            _3069 = frontier_phi_83_pred_2;
                            _3068 = frontier_phi_83_pred_3;
                            _3067 = frontier_phi_83_pred_4;
                            _3072 = frontier_phi_83_pred_5;
                            _2774 = _3070 + _2787;
                            _2775 = _3071 + _2788;
                            _2776 = _3072 + _2789;
                            _2771 = _3067 + _2784;
                            _2772 = _3068 + _2785;
                            _2773 = _3069 + _2786;
                            if (_2791 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2791;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2776;
                        frontier_phi_77_pred_1 = _2775;
                        frontier_phi_77_pred_2 = _2774;
                        frontier_phi_77_pred_3 = _2773;
                        frontier_phi_77_pred_4 = _2772;
                        frontier_phi_77_pred_5 = _2771;
                    }
                    _2413 = frontier_phi_77_pred;
                    _2411 = frontier_phi_77_pred_1;
                    _2409 = frontier_phi_77_pred_2;
                    _2407 = frontier_phi_77_pred_3;
                    _2405 = frontier_phi_77_pred_4;
                    _2403 = frontier_phi_77_pred_5;
                    uint _2569 = _2568 + 1u;
                    if (_2569 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2562 = _2403;
                        _2563 = _2405;
                        _2564 = _2407;
                        _2565 = _2409;
                        _2566 = _2411;
                        _2567 = _2413;
                        _2568 = _2569;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2407;
                frontier_phi_58_59_ladder_1 = _2413;
                frontier_phi_58_59_ladder_2 = _2411;
                frontier_phi_58_59_ladder_3 = _2409;
                frontier_phi_58_59_ladder_4 = _2405;
                frontier_phi_58_59_ladder_5 = _2403;
            }
            else
            {
                frontier_phi_58_59_ladder = _2285;
                frontier_phi_58_59_ladder_1 = _2291;
                frontier_phi_58_59_ladder_2 = _2289;
                frontier_phi_58_59_ladder_3 = _2287;
                frontier_phi_58_59_ladder_4 = _2283;
                frontier_phi_58_59_ladder_5 = _2281;
            }
            _2402 = frontier_phi_58_59_ladder_5;
            _2404 = frontier_phi_58_59_ladder_4;
            _2406 = frontier_phi_58_59_ladder;
            _2408 = frontier_phi_58_59_ladder_3;
            _2410 = frontier_phi_58_59_ladder_2;
            _2412 = frontier_phi_58_59_ladder_1;
        }
        float _2417 = isnan(1.0) ? _441 : (isnan(_441) ? 1.0 : min(_441, 1.0));
        _2191 = (_2417 * _2408) + _1646;
        _2193 = (_2417 * _2410) + _1648;
        _2195 = (_2417 * _2412) + _1650;
        _2197 = ((_2402 * 0.039999999105930328369140625) * _2417) + _1976;
        _2199 = ((_2404 * 0.039999999105930328369140625) * _2417) + _1978;
        _2201 = ((_2406 * 0.039999999105930328369140625) * _2417) + _1980;
    }
    else
    {
        _2191 = _1646;
        _2193 = _1648;
        _2195 = _1650;
        _2197 = _1976;
        _2199 = _1978;
        _2201 = _1980;
    }
    float _4123 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _4134 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _4145 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _4156 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _2219 = ((isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_2191 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _441))) + ((_2197 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    float _2220 = ((isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2193 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _441))) + ((_2199 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    float _2221 = ((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2195 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _441))) + ((_2201 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    float _2226 = cbInstanceData._m0[_415 + 6u].w * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)));
    float _2231 = _375 / cbSceneParam._m0[86u].x;
    float _2232 = _376 / cbSceneParam._m0[86u].y;
    vec4 _2246 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2231, _2232, (log2((isnan(cbSceneParam._m0[77u].w) ? _296 : (isnan(_296) ? cbSceneParam._m0[77u].w : min(_296, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2248 = _2246.x;
    float _2249 = _2246.y;
    float _2250 = _2246.z;
    float _2251 = _2246.w;
    float _2344;
    float _2346;
    float _2348;
    float _2350;
    if (_296 > cbSceneParam._m0[78u].w)
    {
        float _2306 = isnan(_296) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _296 : min(cbSceneParam._m0[80u].w, _296));
        float _2307 = _2306 / _296;
        float _2318 = _2307 * _347;
        float _2319 = _348 * _2307;
        float _2320 = (-0.0) - _2319;
        float _2322 = _2307 * _349;
        float _2324 = (cbSceneParam._m0[77u].w * _2320) / _2306;
        float _2325 = _2324 + cbSceneParam._m0[79u].w;
        float _2326 = cbSceneParam._m0[79u].w - _2319;
        float _2332 = sqrt(((_2318 * _2318) + (_2319 * _2319)) + (_2322 * _2322));
        float _2335 = (1.0 - (cbSceneParam._m0[77u].w / _2306)) * _2332;
        float _2340 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2342 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2519;
        if (abs((_2320 - _2324) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2519 = ((((_2325 > 0.0) ? exp2(_2340 * _2325) : (2.0 - exp2(_2342 * _2325))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2335;
        }
        else
        {
            float _2463 = 1.0 / cbSceneParam._m0[80u].x;
            float _2464 = isnan(_2326) ? _2325 : (isnan(_2325) ? _2326 : max(_2325, _2326));
            float _2465 = isnan(_2326) ? _2325 : (isnan(_2325) ? _2326 : min(_2325, _2326));
            float _2474 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : min(_2464, 0.0));
            float _2475 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : min(_2465, 0.0));
            _2519 = ((abs(_2332 / _2320) * cbSceneParam._m0[80u].y) * ((((_2474 - _2475) * 2.0) - ((exp2(_2340 * (isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0)))) - exp2(_2340 * (isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0))))) * _2463)) - ((exp2(_2342 * _2474) - exp2(_2342 * _2475)) * _2463))) + (_2335 * cbSceneParam._m0[80u].z);
        }
        vec4 _2521 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2231, _2232, 1.0), 0.0);
        float _2530 = exp2((_2519 * (-1.44269502162933349609375)) * (1.0 - _2521.w));
        float _2531 = log2(_2530);
        float _2547 = log2(_2251);
        _2344 = (exp2(_2547 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2531 * cbSceneParam._m0[78u].x)) * _2521.x) / cbSceneParam._m0[78u].x)) + _2248;
        _2346 = (exp2(_2547 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2531 * cbSceneParam._m0[78u].y)) * _2521.y) / cbSceneParam._m0[78u].y)) + _2249;
        _2348 = (exp2(_2547 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2531 * cbSceneParam._m0[78u].z)) * _2521.z) / cbSceneParam._m0[78u].z)) + _2250;
        _2350 = _2530 * _2251;
    }
    else
    {
        _2344 = _2248;
        _2346 = _2249;
        _2348 = _2250;
        _2350 = _2251;
    }
    bool _2557;
    vec4 _2360;
    vec4 _2382;
    float _2384;
    float _2388;
    float _2389;
    float _2390;
    float _2391;
    bool _2401;
    for (;;)
    {
        _2360 = cbMatDynParam._m0[0u];
        float _2362 = roundEven(_2360.y);
        bool _2363 = _2362 == 3.0;
        float _2364 = log2(_2350);
        float _2371 = exp2(_2364 * cbSceneParam._m0[78u].x) * _2219;
        float _2372 = exp2(_2364 * cbSceneParam._m0[78u].y) * _2220;
        float _2373 = exp2(_2364 * cbSceneParam._m0[78u].z) * _2221;
        float _2380 = _363 + (-0.5);
        _2382 = cbMtdParam._m0[1u];
        _2384 = _2382.y * _2380;
        float _2387 = (_2362 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2388 = _2387 * (_2363 ? _2371 : (_2371 + (cbSceneParam._m0[72u].w * _2344)));
        _2389 = _2387 * (_2363 ? _2372 : (_2372 + (cbSceneParam._m0[72u].w * _2346)));
        _2390 = _2387 * (_2363 ? _2373 : (_2373 + (cbSceneParam._m0[72u].w * _2348)));
        _2391 = _2380 * 0.999000012874603271484375;
        _2401 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2401)
        {
            if ((cbInstanceData._m0[_415 + 7u].x + _2391) < 0.5)
            {
                _2557 = true;
                break;
            }
        }
        uint _2498 = _417 + uint(_2360.w);
        if ((cbInstanceData._m0[_2498].w < 1.0) && ((cbInstanceData._m0[_2498].w + _2391) < 0.5))
        {
            _2557 = true;
            break;
        }
        if ((_2384 + _230) < _2382.x)
        {
            _2557 = true;
            break;
        }
        _2557 = false;
        break;
    }
    float _2762;
    if (_2557)
    {
        discard_state = true;
        _2762 = 0.0;
    }
    else
    {
        _2762 = _2226;
    }
    SV_Target.x = _2388;
    SV_Target.y = _2389;
    SV_Target.z = _2390;
    SV_Target.w = _2762;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2226;
    discard_exit();
}


