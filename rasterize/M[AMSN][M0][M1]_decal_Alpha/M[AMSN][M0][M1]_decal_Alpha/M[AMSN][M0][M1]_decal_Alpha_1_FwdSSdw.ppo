#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _799;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _182 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _189 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = (cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _223.x;
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _244 = _240.z;
    float _248 = (_240.x * 2.0) + (-1.0);
    float _250 = (_240.y * 2.0) + (-1.0);
    float _251 = dot(vec2(_248, _250), vec2(_248, _250));
    float _3141 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _257 = sqrt(1.0 - (isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0))));
    float _260 = fma(_257, _189 * NORMAL.x, fma(_250, _196 * TANGENT.x, (_182 * _174) * _248));
    float _263 = fma(_257, _189 * NORMAL.y, fma(_250, _196 * TANGENT.y, (_182 * _175) * _248));
    float _266 = fma(_257, _189 * NORMAL.z, fma(_250, _196 * TANGENT.z, (_182 * _176) * _248));
    float _270 = inversesqrt(dot(vec3(_260, _263, _266), vec3(_260, _263, _266)));
    float _271 = _270 * _260;
    float _272 = _270 * _263;
    float _273 = _270 * _266;
    float _3152 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _274 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
    float _3163 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _275 = isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0));
    float _3174 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3185 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3196 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _294 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _335 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _345 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _335);
    float _346 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _335);
    float _347 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _335);
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _345 * _351;
    float _353 = _346 * _351;
    float _354 = _347 * _351;
    float _360 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _361 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _382 = fma(_273, cbSceneParam._m0[5u].z, fma(_272, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _271));
    float _385 = fma(_273, cbSceneParam._m0[6u].z, fma(_272, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _271));
    float _388 = fma(_273, cbSceneParam._m0[7u].z, fma(_272, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _271));
    uint _401 = uint(roundEven(NORMAL.w)) * 13u;
    uint _404 = (_401 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _410 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0)))) * cbInstanceData._m0[_404].x;
    float _411 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0)))) * cbInstanceData._m0[_404].y;
    float _412 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0)))) * cbInstanceData._m0[_404].z;
    float _3207 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _413 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
    float _3218 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _414 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
    float _3229 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
    vec4 _424 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _360, cbSceneParam._m0[86u].y * _361));
    float _427 = _424.x * TEXCOORD_1.w;
    float _428 = dot(vec3(_271, _272, _273), vec3(_352, _353, _354));
    float _431 = _428 * 2.0;
    float _435 = (_431 * _271) - _352;
    float _436 = (_431 * _272) - _353;
    float _437 = (_431 * _273) - _354;
    float _441 = abs(dot(vec3(_352, _353, _354), vec3(_271, _272, _273)));
    float _3240 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _443 = sqrt(_275);
    float _456 = exp2((_443 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_443 * 3.0));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _798;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _523 = fma(_496, cbModelParam._m0[26u].z, fma(_492, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _488));
        float _527 = fma(_496, cbModelParam._m0[27u].z, fma(_492, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _488));
        float _531 = fma(_496, cbModelParam._m0[28u].z, fma(_492, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _488));
        float _556 = _488 + _271;
        float _557 = _492 + _272;
        float _558 = _496 + _273;
        float _568 = fma(_558, cbModelParam._m0[26u].z, fma(_557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _556)) - _523;
        float _569 = fma(_558, cbModelParam._m0[27u].z, fma(_557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _556)) - _527;
        float _570 = fma(_558, cbModelParam._m0[28u].z, fma(_557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _556)) - _531;
        float _574 = inversesqrt(dot(vec3(_568, _569, _570), vec3(_568, _569, _570)));
        float _587 = ((_574 * _568) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_523 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _588 = ((_574 * _569) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_527 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _589 = ((_574 * _570) / cbModelParam._m0[34u].z) + ((((((_531 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _592 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_587, _588, _589), 0.0);
        float _626 = exp2((_592.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_592.x + (-0.5));
        float _628 = _626 * (_592.y + (-0.5));
        float _629 = _626 * (_592.z + (-0.5));
        float _636 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_599.x + (-0.5));
        float _638 = _636 * (_599.y + (-0.5));
        float _639 = _636 * (_599.z + (-0.5));
        float _646 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_606.x + (-0.5));
        float _648 = _646 * (_606.y + (-0.5));
        float _649 = _646 * (_606.z + (-0.5));
        float _656 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_613.x + (-0.5));
        float _658 = _656 * (_613.y + (-0.5));
        float _659 = _656 * (_613.z + (-0.5));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = _627 * 0.5;
        float _664 = _637 * 0.5;
        float _665 = _647 * 0.5;
        float _666 = dot(vec3(_663, _664, _665), vec3(_663, _664, _665));
        float _671 = (_666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_666);
        float _680 = (dot(vec3(_271, _272, _273), vec3(_671 * _663, _671 * _664, _671 * _665)) + 1.0) * 0.5;
        float _3266 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _690 = sqrt(((_664 * _664) + (_663 * _663)) + (_665 * _665)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _3277 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
        float _692 = _691 * 2.0;
        float _696 = (1.0 - _691) / (_691 + 1.0);
        float _3288 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _706 = ((((1.0 - _697) * (_692 + 2.0)) * exp2(log2(isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0))) * (_692 + 1.0))) + _697) * _660;
        float _707 = _628 * 0.5;
        float _708 = _638 * 0.5;
        float _709 = _648 * 0.5;
        float _710 = dot(vec3(_707, _708, _709), vec3(_707, _708, _709));
        float _715 = (_710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_710);
        float _723 = (dot(vec3(_271, _272, _273), vec3(_715 * _707, _715 * _708, _715 * _709)) + 1.0) * 0.5;
        float _3299 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _732 = sqrt(((_708 * _708) + (_707 * _707)) + (_709 * _709)) / (_661 + 9.9999997473787516355514526367188e-06);
        float _3310 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
        float _734 = _733 * 2.0;
        float _738 = (1.0 - _733) / (_733 + 1.0);
        float _3321 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _748 = ((((1.0 - _739) * (_734 + 2.0)) * exp2(log2(isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0))) * (_734 + 1.0))) + _739) * _661;
        float _749 = _629 * 0.5;
        float _750 = _639 * 0.5;
        float _751 = _649 * 0.5;
        float _752 = dot(vec3(_749, _750, _751), vec3(_749, _750, _751));
        float _757 = (_752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_752);
        float _765 = (dot(vec3(_271, _272, _273), vec3(_757 * _749, _757 * _750, _757 * _751)) + 1.0) * 0.5;
        float _3332 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _774 = sqrt(((_750 * _750) + (_749 * _749)) + (_751 * _751)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _3343 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3354 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0))) * (_776 + 1.0))) + _781) * _662;
        _798 = _629;
        _800 = _628;
        _801 = _627;
        _802 = _639;
        _803 = _638;
        _804 = _637;
        _805 = _649;
        _806 = _648;
        _807 = _647;
        _808 = _662;
        _809 = _661;
        _810 = _660;
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0)));
        _812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0)));
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
    }
    else
    {
        _798 = _799;
        _800 = _799;
        _801 = _799;
        _802 = _799;
        _803 = _799;
        _804 = _799;
        _805 = _799;
        _806 = _799;
        _807 = _799;
        _808 = _799;
        _809 = _799;
        _810 = _799;
        _811 = 0.0;
        _812 = 0.0;
        _813 = 0.0;
    }
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _839 = fma(_496, cbModelParam._m0[30u].z, fma(_492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _488));
        float _843 = fma(_496, cbModelParam._m0[31u].z, fma(_492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _488));
        float _847 = fma(_496, cbModelParam._m0[32u].z, fma(_492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _488));
        float _870 = _488 + _271;
        float _871 = _492 + _272;
        float _872 = _496 + _273;
        float _882 = fma(_872, cbModelParam._m0[30u].z, fma(_871, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _870)) - _839;
        float _883 = fma(_872, cbModelParam._m0[31u].z, fma(_871, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _870)) - _843;
        float _884 = fma(_872, cbModelParam._m0[32u].z, fma(_871, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _870)) - _847;
        float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
        float _901 = ((_888 * _882) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_839 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_888 * _883) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_843 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_888 * _884) / cbModelParam._m0[35u].z) + ((((((_847 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        float _938 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_905.x + (-0.5));
        float _940 = _938 * (_905.y + (-0.5));
        float _941 = _938 * (_905.z + (-0.5));
        float _948 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_912.x + (-0.5));
        float _950 = _948 * (_912.y + (-0.5));
        float _951 = _948 * (_912.z + (-0.5));
        float _958 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_919.x + (-0.5));
        float _960 = _958 * (_919.y + (-0.5));
        float _961 = _958 * (_919.z + (-0.5));
        float _968 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_926.x + (-0.5));
        float _970 = _968 * (_926.y + (-0.5));
        float _971 = _968 * (_926.z + (-0.5));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = _939 * 0.5;
        float _976 = _949 * 0.5;
        float _977 = _959 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_271, _272, _273), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3395 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3406 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3417 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))) * (_1002 + 1.0))) + _1007) * _972;
        float _1017 = _940 * 0.5;
        float _1018 = _950 * 0.5;
        float _1019 = _960 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_271, _272, _273), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3428 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3439 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3450 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) * (_1044 + 1.0))) + _1049) * _973;
        float _1059 = _941 * 0.5;
        float _1060 = _951 * 0.5;
        float _1061 = _961 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_271, _272, _273), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3461 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3472 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3483 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * (_1086 + 1.0))) + _1091) * _974;
        _1108 = _941;
        _1109 = _940;
        _1110 = _939;
        _1111 = _951;
        _1112 = _950;
        _1113 = _949;
        _1114 = _961;
        _1115 = _960;
        _1116 = _959;
        _1117 = _974;
        _1118 = _973;
        _1119 = _972;
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
    }
    else
    {
        _1108 = _799;
        _1109 = _799;
        _1110 = _799;
        _1111 = _799;
        _1112 = _799;
        _1113 = _799;
        _1114 = _799;
        _1115 = _799;
        _1116 = _799;
        _1117 = _799;
        _1118 = _799;
        _1119 = _799;
        _1120 = 0.0;
        _1121 = 0.0;
        _1122 = 0.0;
    }
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _811)) + _811;
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _812)) + _812;
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _813)) + _813;
    float _1155 = fma(_1134, cbSceneParam._m0[89u].z, fma(_1133, cbSceneParam._m0[89u].y, _1132 * cbSceneParam._m0[89u].x));
    float _1158 = fma(_1134, cbSceneParam._m0[90u].z, fma(_1133, cbSceneParam._m0[90u].y, _1132 * cbSceneParam._m0[90u].x));
    float _1161 = fma(_1134, cbSceneParam._m0[91u].z, fma(_1133, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1132));
    float _1176 = _435 * 0.5;
    float _1177 = _436 * 0.5;
    float _1178 = _437 * 0.5;
    float _1179 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1182 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1185 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1219;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1192 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_798, _802, _805, _808));
        float _1196 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_800, _803, _806, _809));
        float _1200 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_801, _804, _807, _810));
        float _1207 = dot(vec4(cbModelParam._m0[39u]), vec4(_1176, _1177, _1178, 1.0));
        _1219 = dot(vec3(isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)), isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1207) ? 0.0 : (isnan(0.0) ? _1207 : max(0.0, _1207))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1219 = 1.0;
    }
    float _1230;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1221 = dot(vec4(cbModelParam._m0[40u]), vec4(_1176, _1177, _1178, 1.0));
        _1230 = dot(vec3(isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1221) ? 0.0 : (isnan(0.0) ? _1221 : max(0.0, _1221))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1230 = 1.0;
    }
    float _1234 = (_1230 * cbModelParam._m0[1u].x) + (_1219 * (1.0 - cbModelParam._m0[1u].x));
    float _1244 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _275);
    float _1245 = isnan(_1244) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1244 : min(cbModelParam._m0[25u].z, _1244));
    float _1327;
    float _1329;
    float _1331;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1294 = fma(_496, cbModelParam._m0[13u].z, fma(_492, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _488)) + cbModelParam._m0[13u].w;
        float _1298 = fma(_496, cbModelParam._m0[14u].z, fma(_492, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _488)) + cbModelParam._m0[14u].w;
        float _1302 = fma(_496, cbModelParam._m0[15u].z, fma(_492, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _488)) + cbModelParam._m0[15u].w;
        float _1305 = fma(_437, cbModelParam._m0[13u].z, fma(_436, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _435));
        float _1308 = fma(_437, cbModelParam._m0[14u].z, fma(_436, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _435));
        float _1311 = fma(_437, cbModelParam._m0[15u].z, fma(_436, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _435));
        float _1339;
        if (_1305 > 0.0)
        {
            _1339 = abs((1.0 - _1294) / _1305);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1294 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1339 = frontier_phi_14_12_ladder;
        }
        float _1566;
        if (_1308 > 0.0)
        {
            _1566 = abs((1.0 - _1298) / _1308);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1298 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1566 = frontier_phi_23_19_ladder;
        }
        float _1812;
        if (_1311 > 0.0)
        {
            _1812 = abs((1.0 - _1302) / _1311);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1302 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1812 = frontier_phi_35_30_ladder;
        }
        float _1814 = isnan(_1566) ? _1339 : (isnan(_1339) ? _1566 : min(_1339, _1566));
        float _1815 = isnan(_1812) ? _1814 : (isnan(_1814) ? _1812 : min(_1814, _1812));
        float _1819 = (_1815 * _1305) + _1294;
        float _1820 = (_1815 * _1308) + _1298;
        float _1821 = (_1815 * _1311) + _1302;
        float _1822 = _1815 * 9.9999997473787516355514526367188e-05;
        float _1824 = (-1.0) - _1822;
        float _1826 = _1822 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1821 > _1826) || ((_1821 < _1824) || ((_1820 > _1826) || ((_1820 < _1824) || ((_1819 < _1824) || (_1819 > _1826))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1945 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1821, cbModelParam._m0[9u].z, fma(_1820, cbModelParam._m0[9u].y, _1819 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1821, cbModelParam._m0[10u].z, fma(_1820, cbModelParam._m0[10u].y, _1819 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1821, cbModelParam._m0[11u].z, fma(_1820, cbModelParam._m0[11u].y, _1819 * cbModelParam._m0[11u].x))), _1245);
            frontier_phi_13_35_ladder = _1945.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1945.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1945.x * cbModelParam._m0[1u].y;
        }
        _1327 = frontier_phi_13_35_ladder_2;
        _1329 = frontier_phi_13_35_ladder_1;
        _1331 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1315 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_435, _436, _437), _1245);
        _1327 = _1315.x * cbModelParam._m0[1u].y;
        _1329 = _1315.y * cbModelParam._m0[1u].y;
        _1331 = _1315.z * cbModelParam._m0[1u].y;
    }
    float _1335 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _275);
    float _1336 = isnan(_1335) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1335 : min(cbModelParam._m0[25u].w, _1335));
    float _1429;
    float _1431;
    float _1433;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1393 = fma(_496, cbModelParam._m0[21u].z, fma(_492, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _488)) + cbModelParam._m0[21u].w;
        float _1397 = fma(_496, cbModelParam._m0[22u].z, fma(_492, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _488)) + cbModelParam._m0[22u].w;
        float _1401 = fma(_496, cbModelParam._m0[23u].z, fma(_492, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _488)) + cbModelParam._m0[23u].w;
        float _1404 = fma(_437, cbModelParam._m0[21u].z, fma(_436, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _435));
        float _1407 = fma(_437, cbModelParam._m0[22u].z, fma(_436, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _435));
        float _1410 = fma(_437, cbModelParam._m0[23u].z, fma(_436, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _435));
        float _1571;
        if (_1404 > 0.0)
        {
            _1571 = abs((1.0 - _1393) / _1404);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1393 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1571 = frontier_phi_25_21_ladder;
        }
        float _1839;
        if (_1407 > 0.0)
        {
            _1839 = abs((1.0 - _1397) / _1407);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1397 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1839 = frontier_phi_37_32_ladder;
        }
        float _2044;
        if (_1410 > 0.0)
        {
            _2044 = abs((1.0 - _1401) / _1410);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1401 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2044 = frontier_phi_46_43_ladder;
        }
        float _2046 = isnan(_1839) ? _1571 : (isnan(_1571) ? _1839 : min(_1571, _1839));
        float _2047 = isnan(_2044) ? _2046 : (isnan(_2046) ? _2044 : min(_2046, _2044));
        float _2051 = (_2047 * _1404) + _1393;
        float _2052 = (_2047 * _1407) + _1397;
        float _2053 = (_2047 * _1410) + _1401;
        float _2054 = _2047 * 9.9999997473787516355514526367188e-05;
        float _2055 = (-1.0) - _2054;
        float _2057 = _2054 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2053 > _2057) || ((_2053 < _2055) || ((_2052 > _2057) || ((_2052 < _2055) || ((_2051 < _2055) || (_2051 > _2057))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2254 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2053, cbModelParam._m0[17u].z, fma(_2052, cbModelParam._m0[17u].y, _2051 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2053, cbModelParam._m0[18u].z, fma(_2052, cbModelParam._m0[18u].y, _2051 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2053, cbModelParam._m0[19u].z, fma(_2052, cbModelParam._m0[19u].y, _2051 * cbModelParam._m0[19u].x))), _1336);
            frontier_phi_22_46_ladder = _2254.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2254.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2254.x * cbModelParam._m0[1u].z;
        }
        _1429 = frontier_phi_22_46_ladder_2;
        _1431 = frontier_phi_22_46_ladder_1;
        _1433 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1413 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_435, _436, _437), _1336);
        _1429 = _1413.x * cbModelParam._m0[1u].z;
        _1431 = _1413.y * cbModelParam._m0[1u].z;
        _1433 = _1413.z * cbModelParam._m0[1u].z;
    }
    float _1445 = ((((1.0 - _456) * ((_443 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_456 * _443)) * _427;
    float _1446 = _1445 * ((cbModelParam._m0[1u].w * (_1429 - _1327)) + _1327);
    float _1447 = _1445 * ((cbModelParam._m0[1u].w * (_1431 - _1329)) + _1329);
    float _1448 = _1445 * ((cbModelParam._m0[1u].w * (_1433 - _1331)) + _1331);
    float _1451 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1454 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1457 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, _1446 * cbSceneParam._m0[91u].x));
    vec4 _1465 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_360, _361));
    float _1467 = _1465.w;
    float _1479 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1467);
    float _1480 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1467);
    float _1481 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1467);
    uvec4 _1485 = floatBitsToUint(cbInstanceData._m0[_401 + 5u]);
    uint _1487 = _1485.x * 14u;
    uint _1488 = _1487 + 13u;
    float _1495 = _427 + (-1.0);
    float _1500 = (cbLight._m0[_1488].x * _1495) + 1.0;
    float _1501 = (cbLight._m0[_1488].y * _1495) + 1.0;
    float _1502 = (cbLight._m0[_1488].z * _1495) + 1.0;
    float _1503 = (cbLight._m0[_1488].w * _1495) + 1.0;
    uint _1504 = _1487 + 5u;
    float _1510 = isnan(1.0) ? _1501 : (isnan(_1501) ? 1.0 : min(_1501, 1.0));
    uint _1514 = _1487 + 4u;
    float _1524 = isnan(1.0) ? _1500 : (isnan(_1500) ? 1.0 : min(_1500, 1.0));
    uint _1528 = _1487 | 1u;
    float _1539 = dot(vec3(cbLight._m0[_1487].xyz), vec3(_271, _272, _273));
    float _1542 = dot(vec3(cbLight._m0[_1528].xyz), vec3(_271, _272, _273));
    float _3619 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
    float _3630 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
    float _1547 = (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * 0.3183098733425140380859375;
    float _1549 = (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * 0.3183098733425140380859375;
    float _1556 = ((cbLight._m0[_1504].x * _1510) * _1549) + (((cbLight._m0[_1514].x * _1479) * _1524) * _1547);
    float _1557 = ((_1510 * cbLight._m0[_1504].y) * _1549) + (((cbLight._m0[_1514].y * _1480) * _1524) * _1547);
    float _1558 = ((_1510 * cbLight._m0[_1504].z) * _1549) + (((cbLight._m0[_1514].z * _1481) * _1524) * _1547);
    uvec4 _1563 = floatBitsToUint(cbLight._m0[_1487 + 12u]);
    bool _1565 = _1563.x == 0u;
    float _1576;
    float _1578;
    float _1580;
    if (_1565)
    {
        _1576 = _1556;
        _1578 = _1557;
        _1580 = _1558;
    }
    else
    {
        uint _1584 = _1487 + 6u;
        float _1600 = (dot(vec3(cbLight._m0[_1487 + 2u].xyz), vec3(_271, _272, _273)) * 0.5) + 0.5;
        float _1601 = _1600 * _1600;
        float _3641 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1603 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
        _1576 = (((cbLight._m0[_1584].x * 0.3183098733425140380859375) * _1602) * _1603) + _1556;
        _1578 = (((cbLight._m0[_1584].y * 0.3183098733425140380859375) * _1602) * _1603) + _1557;
        _1580 = (((cbLight._m0[_1584].z * 0.3183098733425140380859375) * _1602) * _1603) + _1558;
    }
    bool _1583 = _1563.y == 0u;
    float _1621;
    float _1623;
    float _1625;
    if (_1583)
    {
        _1621 = _1576;
        _1623 = _1578;
        _1625 = _1580;
    }
    else
    {
        uint _1783 = _1487 + 7u;
        float _1799 = (dot(vec3(cbLight._m0[_1487 + 3u].xyz), vec3(_271, _272, _273)) * 0.5) + 0.5;
        float _1800 = _1799 * _1799;
        float _3657 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1802 = isnan(1.0) ? _1503 : (isnan(_1503) ? 1.0 : min(_1503, 1.0));
        _1621 = (((cbLight._m0[_1783].x * 0.3183098733425140380859375) * _1801) * _1802) + _1576;
        _1623 = (((cbLight._m0[_1783].y * 0.3183098733425140380859375) * _1801) * _1802) + _1578;
        _1625 = (((cbLight._m0[_1783].z * 0.3183098733425140380859375) * _1801) * _1802) + _1580;
    }
    uint _1628 = _1487 + 8u;
    float _1641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1487].w)) * _275) * 0.949999988079071044921875);
    float _1642 = _1641 * _1641;
    float _1643 = cbLight._m0[_1487].x + _352;
    float _1644 = cbLight._m0[_1487].y + _353;
    float _1645 = cbLight._m0[_1487].z + _354;
    float _1649 = inversesqrt(dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645)));
    float _1650 = _1649 * _1643;
    float _1651 = _1649 * _1644;
    float _1652 = _1649 * _1645;
    float _1653 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_1487].xyz));
    float _3673 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1656 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _1657 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _1658 = dot(vec3(_271, _272, _273), vec3(_1650, _1651, _1652));
    float _3695 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _1661 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _1662 = dot(vec3(cbLight._m0[_1487].xyz), vec3(_1650, _1651, _1652));
    float _3706 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1666 = _1642 * _1642;
    float _1670 = ((_1661 * _1661) * (_1666 + (-1.0))) + 1.0;
    float _1681 = (exp2(log2(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1682 = 1.0 - _1642;
    float _1693 = (0.5 / (((_1657 * ((_1656 * _1682) + _1642)) + 9.9999999392252902907785028219223e-09) + (((_1657 * _1682) + _1642) * _1656))) * _1656;
    float _3717 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1695 = (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1666 / ((_1670 * _1670) * 3.141590118408203125));
    uint _1709 = _1487 + 9u;
    float _1720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1528].w)) * _275) * 0.949999988079071044921875);
    float _1721 = _1720 * _1720;
    float _1722 = cbLight._m0[_1528].x + _352;
    float _1723 = cbLight._m0[_1528].y + _353;
    float _1724 = cbLight._m0[_1528].z + _354;
    float _1728 = inversesqrt(dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724)));
    float _1729 = _1728 * _1722;
    float _1730 = _1728 * _1723;
    float _1731 = _1728 * _1724;
    float _1732 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_1528].xyz));
    float _3728 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1735 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _1736 = dot(vec3(_271, _272, _273), vec3(_1729, _1730, _1731));
    float _3739 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _1740 = dot(vec3(cbLight._m0[_1528].xyz), vec3(_1729, _1730, _1731));
    float _3750 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1744 = _1721 * _1721;
    float _1748 = ((_1739 * _1739) * (_1744 + (-1.0))) + 1.0;
    float _1757 = (exp2(log2(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1758 = 1.0 - _1721;
    float _1768 = (0.5 / (((_1657 * ((_1735 * _1758) + _1721)) + 9.9999999392252902907785028219223e-09) + (((_1657 * _1758) + _1721) * _1735))) * _1735;
    float _3761 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1770 = (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1744 / ((_1748 * _1748) * 3.141590118408203125));
    float _1780 = (((_1757 * cbLight._m0[_1709].x) * _1770) * _1510) + ((((cbLight._m0[_1628].x * _1479) * _1681) * _1695) * _1524);
    float _1781 = (((_1757 * cbLight._m0[_1709].y) * _1770) * _1510) + ((((cbLight._m0[_1628].y * _1480) * _1681) * _1695) * _1524);
    float _1782 = (((_1757 * cbLight._m0[_1709].z) * _1770) * _1510) + ((((cbLight._m0[_1628].z * _1481) * _1681) * _1695) * _1524);
    float _1844;
    float _1846;
    float _1848;
    if (_1565)
    {
        _1844 = _1780;
        _1846 = _1781;
        _1848 = _1782;
    }
    else
    {
        uint _1850 = _1487 + 2u;
        uint _1854 = _1487 + 10u;
        float _1868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1850].w)) * _275) * 0.949999988079071044921875);
        float _1869 = _1868 * _1868;
        float _1870 = cbLight._m0[_1850].x + _352;
        float _1871 = cbLight._m0[_1850].y + _353;
        float _1872 = cbLight._m0[_1850].z + _354;
        float _1876 = inversesqrt(dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872)));
        float _1877 = _1876 * _1870;
        float _1878 = _1876 * _1871;
        float _1879 = _1876 * _1872;
        float _1880 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_1850].xyz));
        float _3772 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1883 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1884 = dot(vec3(_271, _272, _273), vec3(_1877, _1878, _1879));
        float _3783 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1887 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1888 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_1877, _1878, _1879));
        float _3794 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1892 = _1869 * _1869;
        float _1896 = ((_1887 * _1887) * (_1892 + (-1.0))) + 1.0;
        float _1905 = (exp2(log2(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1906 = 1.0 - _1869;
        float _1916 = (0.5 / (((_1657 * ((_1883 * _1906) + _1869)) + 9.9999999392252902907785028219223e-09) + (((_1657 * _1906) + _1869) * _1883))) * _1883;
        float _3805 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1918 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1892 / ((_1896 * _1896) * 3.141590118408203125));
        float _1919 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
        _1844 = (((_1905 * cbLight._m0[_1854].x) * _1918) * _1919) + _1780;
        _1846 = (((_1905 * cbLight._m0[_1854].y) * _1918) * _1919) + _1781;
        _1848 = (((_1905 * cbLight._m0[_1854].z) * _1918) * _1919) + _1782;
    }
    float _1954;
    float _1956;
    float _1958;
    if (_1583)
    {
        _1954 = _1844;
        _1956 = _1846;
        _1958 = _1848;
    }
    else
    {
        uint _1965 = _1487 + 3u;
        uint _1969 = _1487 + 11u;
        float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _275) * 0.949999988079071044921875);
        float _1984 = _1983 * _1983;
        float _1985 = cbLight._m0[_1965].x + _352;
        float _1986 = cbLight._m0[_1965].y + _353;
        float _1987 = cbLight._m0[_1965].z + _354;
        float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
        float _1992 = _1991 * _1985;
        float _1993 = _1991 * _1986;
        float _1994 = _1991 * _1987;
        float _1995 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_1965].xyz));
        float _3821 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1998 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1999 = dot(vec3(_271, _272, _273), vec3(_1992, _1993, _1994));
        float _3832 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _2003 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_1992, _1993, _1994));
        float _3843 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2007 = _1984 * _1984;
        float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
        float _2020 = (exp2(log2(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2021 = 1.0 - _1984;
        float _2031 = (0.5 / (((_1657 * ((_1998 * _2021) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1657 * _2021) + _1984) * _1998))) * _1998;
        float _3854 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2033 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
        float _2034 = isnan(1.0) ? _1503 : (isnan(_1503) ? 1.0 : min(_1503, 1.0));
        _1954 = (((_2020 * cbLight._m0[_1969].x) * _2033) * _2034) + _1844;
        _1956 = (((_2020 * cbLight._m0[_1969].y) * _2033) * _2034) + _1846;
        _1958 = (((_2020 * cbLight._m0[_1969].z) * _2033) * _2034) + _1848;
    }
    float _2169;
    float _2171;
    float _2173;
    float _2175;
    float _2177;
    float _2179;
    if (_1485.y == 0u)
    {
        float _2109 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2110 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2109;
        float _2111 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2109;
        float _2112 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2109;
        uvec4 _2124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2125 = _2124.x;
        uint _2136 = uint((float(_2124.y) * floor(float(uint(cbSceneParam._m0[85u].y * _361) / _2125))) + floor(float(uint(cbSceneParam._m0[85u].x * _360) / _2125)));
        float _2146 = (log2(_2112 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2147 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        uint _2150 = uint(isnan(14.0) ? _2147 : (isnan(_2147) ? 14.0 : min(_2147, 14.0)));
        uvec4 _2155 = texelFetch(g_lightClusterGridBuffer, int(((_2150 << 2u) + (_2136 << 6u)) >> 2u));
        uint _2156 = _2155.x;
        uint _2157 = _2124.z;
        float _2259;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        if (((((1u << ((_2157 >> 4u) & 15u)) + 4294967295u) & _2156) == 0u) || ((_2157 & 240u) == 0u))
        {
            _2259 = 0.0;
            _2261 = 0.0;
            _2263 = 0.0;
            _2265 = 0.0;
            _2267 = 0.0;
            _2269 = 0.0;
        }
        else
        {
            float _2260;
            float _2262;
            float _2264;
            float _2266;
            float _2268;
            float _2270;
            float _2404 = 0.0;
            float _2405 = 0.0;
            float _2406 = 0.0;
            float _2407 = 0.0;
            float _2408 = 0.0;
            float _2409 = 0.0;
            uint _2410 = 0u;
            uint _2419;
            bool _2420;
            for (;;)
            {
                _2419 = texelFetch(g_lightClassification, int((((_2150 << 5u) + (_2136 << 9u)) + (_2410 << 2u)) >> 2u)).x;
                _2420 = _2419 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2420)
                {
                    frontier_phi_61_pred = _2404;
                    frontier_phi_61_pred_1 = _2409;
                    frontier_phi_61_pred_2 = _2408;
                    frontier_phi_61_pred_3 = _2407;
                    frontier_phi_61_pred_4 = _2406;
                    frontier_phi_61_pred_5 = _2405;
                }
                else
                {
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    uint _2534;
                    _2528 = _2404;
                    _2529 = _2405;
                    _2530 = _2406;
                    _2531 = _2407;
                    _2532 = _2408;
                    _2533 = _2409;
                    _2534 = _2419;
                    float _2460;
                    float _2461;
                    float _2462;
                    float _2463;
                    float _2464;
                    float _2465;
                    for (;;)
                    {
                        uint _2538 = uint(findLSB(_2534)) + (_2410 << 5u);
                        uint _2535 = (_2534 + 4294967295u) & _2534;
                        uint _2540 = _2538 * 48u;
                        vec4 _2554 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2540)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 3u)).x));
                        uint _2560 = (_2538 * 48u) + 4u;
                        vec4 _2573 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2560)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 3u)).x));
                        uint _2579 = (_2538 * 48u) + 8u;
                        vec3 _2590 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2579)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 2u)).x));
                        float _2594 = _2554.x - _2110;
                        float _2595 = _2554.y - _2111;
                        float _2596 = _2554.z - _2112;
                        float _2597 = dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596));
                        float _2600 = inversesqrt(_2597);
                        float _2601 = _2600 * _2594;
                        float _2602 = _2600 * _2595;
                        float _2603 = _2600 * _2596;
                        float _2604 = dot(vec3(_382, _385, _388), vec3(_2601, _2602, _2603));
                        float _2609 = 1.0 - (_2597 * _2554.w);
                        float _3880 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
                        float _2610 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
                        float _2611 = sqrt(_2597) * _2573.w;
                        float _2614 = 1.39999997615814208984375 / (_2611 + 1.39999997615814208984375);
                        float _2615 = _2614 * _2614;
                        float _2618 = ((1.0 - _2615) * _2604) + _2615;
                        float _2621 = _2611 * _2611;
                        float _2625 = ((isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0))) * _2610) / ((_2621 * 0.699999988079071044921875) + 1.0);
                        float _2629 = (-0.0) - _2110;
                        float _2630 = (-0.0) - _2111;
                        float _2631 = (-0.0) - _2112;
                        float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
                        float _2636 = _2635 * _2629;
                        float _2637 = _2635 * _2630;
                        float _2638 = _2635 * _2631;
                        float _2646 = exp2(log2(1.0 / ((_2621 * 3.5) + 5.0)) * 0.25);
                        float _2647 = 1.0 - _443;
                        float _2654 = sqrt(1.0 - ((1.0 - (_2647 * _2647)) * (1.0 - (_2646 * _2646))));
                        float _2655 = _2654 * _2654;
                        float _2656 = _2655 * _2655;
                        float _2657 = _2636 + _2601;
                        float _2658 = _2637 + _2602;
                        float _2659 = _2638 + _2603;
                        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
                        float _2667 = dot(vec3(_382, _385, _388), vec3(_2636, _2637, _2638));
                        float _3896 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
                        float _2670 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
                        float _2671 = dot(vec3(_382, _385, _388), vec3(_2663 * _2657, _2663 * _2658, _2663 * _2659));
                        float _3907 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                        float _2674 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
                        float _2678 = ((_2674 * _2674) * (_2656 + (-1.0))) + 1.0;
                        float _2679 = _2614 * _2655;
                        float _2680 = _2679 * _2679;
                        float _2683 = ((1.0 - _2680) * _2604) + _2680;
                        float _3918 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                        float _2684 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
                        float _2685 = 1.0 - _2655;
                        float _2695 = (0.5 / (((_2684 * ((_2670 * _2685) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2684 * _2685) + _2655) * _2670))) * _2684;
                        float _3929 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
                        float _2706 = (((_2656 * 3.1415927410125732421875) * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) / ((_2678 * _2678) * ((_2621 * 2.1991131305694580078125) + 3.141590118408203125))) * _2610;
                        _2463 = (_2625 * _2573.x) + _2531;
                        _2464 = (_2625 * _2573.y) + _2532;
                        _2465 = (_2625 * _2573.z) + _2533;
                        _2460 = (_2706 * _2590.x) + _2528;
                        _2461 = (_2706 * _2590.y) + _2529;
                        _2462 = (_2706 * _2590.z) + _2530;
                        if (_2535 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2528 = _2460;
                            _2529 = _2461;
                            _2530 = _2462;
                            _2531 = _2463;
                            _2532 = _2464;
                            _2533 = _2465;
                            _2534 = _2535;
                        }
                    }
                    frontier_phi_61_pred = _2460;
                    frontier_phi_61_pred_1 = _2465;
                    frontier_phi_61_pred_2 = _2464;
                    frontier_phi_61_pred_3 = _2463;
                    frontier_phi_61_pred_4 = _2462;
                    frontier_phi_61_pred_5 = _2461;
                }
                _2260 = frontier_phi_61_pred;
                _2270 = frontier_phi_61_pred_1;
                _2268 = frontier_phi_61_pred_2;
                _2266 = frontier_phi_61_pred_3;
                _2264 = frontier_phi_61_pred_4;
                _2262 = frontier_phi_61_pred_5;
                uint _2411 = _2410 + 1u;
                if (_2411 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2404 = _2260;
                    _2405 = _2262;
                    _2406 = _2264;
                    _2407 = _2266;
                    _2408 = _2268;
                    _2409 = _2270;
                    _2410 = _2411;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2259 = _2260;
            _2261 = _2262;
            _2263 = _2264;
            _2265 = _2266;
            _2267 = _2268;
            _2269 = _2270;
        }
        uvec4 _2273 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2274 = _2273.z;
        uint _2276 = (_2274 >> 8u) & 15u;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        if (((4294967295u << _2276) & _2156) == 0u)
        {
            _2372 = _2259;
            _2374 = _2261;
            _2376 = _2263;
            _2378 = _2265;
            _2380 = _2267;
            _2382 = _2269;
        }
        else
        {
            float _2397 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
            float _2398 = _2397 * _2110;
            float _2399 = _2397 * _2111;
            float _2400 = _2397 * _2112;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2276 < ((_2274 >> 12u) & 15u))
            {
                float _2373;
                float _2375;
                float _2377;
                float _2379;
                float _2381;
                float _2383;
                float _2511 = _2259;
                float _2512 = _2261;
                float _2513 = _2263;
                float _2514 = _2265;
                float _2515 = _2267;
                float _2516 = _2269;
                uint _2517 = _2276;
                uint _2526;
                bool _2527;
                for (;;)
                {
                    _2526 = texelFetch(g_lightClassification, int((((_2150 << 5u) + (_2136 << 9u)) + (_2517 << 2u)) >> 2u)).x;
                    _2527 = _2526 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2527)
                    {
                        frontier_phi_67_pred = _2514;
                        frontier_phi_67_pred_1 = _2515;
                        frontier_phi_67_pred_2 = _2516;
                        frontier_phi_67_pred_3 = _2513;
                        frontier_phi_67_pred_4 = _2512;
                        frontier_phi_67_pred_5 = _2511;
                    }
                    else
                    {
                        float _2711;
                        float _2712;
                        float _2713;
                        float _2714;
                        float _2715;
                        float _2716;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _2724 = _2511;
                        float _2725 = _2512;
                        float _2726 = _2513;
                        float _2727 = _2514;
                        float _2728 = _2515;
                        float _2729 = _2516;
                        uint _2730 = _2526;
                        uint _2731;
                        vec4 _2756;
                        float _2757;
                        vec4 _2772;
                        vec3 _2784;
                        vec4 _2800;
                        vec4 _2816;
                        float _2863;
                        bool _2864;
                        for (;;)
                        {
                            uint _2741 = ((_2517 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2730));
                            _2731 = (_2730 + 4294967295u) & _2730;
                            uint _2743 = _2741 * 40u;
                            _2756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 3u)).x));
                            _2757 = _2756.w;
                            uint _2759 = (_2741 * 40u) + 4u;
                            _2772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 3u)).x));
                            uint _2774 = (_2741 * 40u) + 8u;
                            _2784 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 2u)).x));
                            uint _2787 = (_2741 * 40u) + 16u;
                            _2800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 3u)).x));
                            uint _2803 = (_2741 * 40u) + 20u;
                            _2816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 3u)).x));
                            uint _2819 = (_2741 * 40u) + 24u;
                            vec4 _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            uint _2838 = (_2741 * 40u) + 28u;
                            vec4 _2851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 3u)).x));
                            _2863 = fma(_2112, _2851.z, fma(_2111, _2851.y, _2851.x * _2110)) + _2851.w;
                            _2864 = !((fma(_2112, _2832.z, fma(_2111, _2832.y, _2832.x * _2110)) + _2832.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2864)
                            {
                                float _2891 = _2756.x - _2110;
                                float _2892 = _2756.y - _2111;
                                float _2893 = _2756.z - _2112;
                                float _2894 = dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893));
                                float _2897 = inversesqrt(_2894);
                                float _2898 = _2897 * _2891;
                                float _2899 = _2897 * _2892;
                                float _2900 = _2897 * _2893;
                                float _2904 = 1.0 - (_2894 / (_2757 * _2757));
                                float _3940 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                                float _2905 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
                                float _2909 = sqrt(_2894) * _2772.w;
                                float _2911 = 1.39999997615814208984375 / (_2909 + 1.39999997615814208984375);
                                float _2912 = _2911 * _2911;
                                float _2915 = ((1.0 - _2912) * dot(vec3(_2898, _2899, _2900), vec3(_382, _385, _388))) + _2912;
                                float _2918 = _2909 * _2909;
                                float _2922 = (fma(_2112, _2800.z, fma(_2111, _2800.y, _2800.x * _2110)) + _2800.w) / _2863;
                                float _2923 = (fma(_2112, _2816.z, fma(_2111, _2816.y, _2816.x * _2110)) + _2816.w) / _2863;
                                float _2927 = 1.0 - dot(vec2(_2922, _2923), vec2(_2922, _2923));
                                float _3956 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                                float _2928 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                                float _2929 = _2928 * (((isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0))) * _2905) / ((_2918 * 0.699999988079071044921875) + 1.0));
                                float _2941 = exp2(log2(1.0 / ((_2918 * 3.5) + 5.0)) * 0.25);
                                float _2942 = 1.0 - _443;
                                float _2949 = sqrt(1.0 - ((1.0 - (_2942 * _2942)) * (1.0 - (_2941 * _2941))));
                                float _2950 = _2949 * _2949;
                                float _2951 = _2950 * _2950;
                                float _2952 = _2898 - _2398;
                                float _2953 = _2899 - _2399;
                                float _2954 = _2900 - _2400;
                                float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
                                float _2962 = dot(vec3(_382, _385, _388), vec3((-0.0) - _2398, (-0.0) - _2399, (-0.0) - _2400));
                                float _3967 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2965 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                                float _2966 = dot(vec3(_382, _385, _388), vec3(_2958 * _2952, _2958 * _2953, _2958 * _2954));
                                float _3978 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                                float _2969 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                                float _2973 = ((_2969 * _2969) * (_2951 + (-1.0))) + 1.0;
                                float _2974 = _2911 * _2950;
                                float _2975 = _2974 * _2974;
                                float _2981 = ((1.0 - _2975) * dot(vec3(_382, _385, _388), vec3(_2898, _2899, _2900))) + _2975;
                                float _3989 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                                float _2982 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                                float _2983 = 1.0 - _2950;
                                float _2993 = (0.5 / (((_2982 * ((_2965 * _2983) + _2950)) + 9.9999999392252902907785028219223e-09) + (((_2982 * _2983) + _2950) * _2965))) * _2982;
                                float _4000 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                                float _3003 = (_2928 * _2905) * (((_2951 * 3.1415927410125732421875) * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) / ((_2973 * _2973) * ((_2918 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3003 * _2784.x;
                                frontier_phi_73_pred_1 = _3003 * _2784.y;
                                frontier_phi_73_pred_2 = _2929 * _2772.z;
                                frontier_phi_73_pred_3 = _2929 * _2772.y;
                                frontier_phi_73_pred_4 = _2929 * _2772.x;
                                frontier_phi_73_pred_5 = _3003 * _2784.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3007 = frontier_phi_73_pred;
                            _3008 = frontier_phi_73_pred_1;
                            _3012 = frontier_phi_73_pred_2;
                            _3011 = frontier_phi_73_pred_3;
                            _3010 = frontier_phi_73_pred_4;
                            _3009 = frontier_phi_73_pred_5;
                            _2714 = _3010 + _2727;
                            _2715 = _3011 + _2728;
                            _2716 = _3012 + _2729;
                            _2711 = _3007 + _2724;
                            _2712 = _3008 + _2725;
                            _2713 = _3009 + _2726;
                            if (_2731 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2724 = _2711;
                                _2725 = _2712;
                                _2726 = _2713;
                                _2727 = _2714;
                                _2728 = _2715;
                                _2729 = _2716;
                                _2730 = _2731;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2714;
                        frontier_phi_67_pred_1 = _2715;
                        frontier_phi_67_pred_2 = _2716;
                        frontier_phi_67_pred_3 = _2713;
                        frontier_phi_67_pred_4 = _2712;
                        frontier_phi_67_pred_5 = _2711;
                    }
                    _2379 = frontier_phi_67_pred;
                    _2381 = frontier_phi_67_pred_1;
                    _2383 = frontier_phi_67_pred_2;
                    _2377 = frontier_phi_67_pred_3;
                    _2375 = frontier_phi_67_pred_4;
                    _2373 = frontier_phi_67_pred_5;
                    uint _2518 = _2517 + 1u;
                    if (_2518 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2511 = _2373;
                        _2512 = _2375;
                        _2513 = _2377;
                        _2514 = _2379;
                        _2515 = _2381;
                        _2516 = _2383;
                        _2517 = _2518;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2381;
                frontier_phi_55_56_ladder_1 = _2383;
                frontier_phi_55_56_ladder_2 = _2379;
                frontier_phi_55_56_ladder_3 = _2377;
                frontier_phi_55_56_ladder_4 = _2375;
                frontier_phi_55_56_ladder_5 = _2373;
            }
            else
            {
                frontier_phi_55_56_ladder = _2267;
                frontier_phi_55_56_ladder_1 = _2269;
                frontier_phi_55_56_ladder_2 = _2265;
                frontier_phi_55_56_ladder_3 = _2263;
                frontier_phi_55_56_ladder_4 = _2261;
                frontier_phi_55_56_ladder_5 = _2259;
            }
            _2372 = frontier_phi_55_56_ladder_5;
            _2374 = frontier_phi_55_56_ladder_4;
            _2376 = frontier_phi_55_56_ladder_3;
            _2378 = frontier_phi_55_56_ladder_2;
            _2380 = frontier_phi_55_56_ladder;
            _2382 = frontier_phi_55_56_ladder_1;
        }
        float _2387 = isnan(1.0) ? _427 : (isnan(_427) ? 1.0 : min(_427, 1.0));
        _2169 = (_2387 * _2378) + _1621;
        _2171 = (_2387 * _2380) + _1623;
        _2173 = (_2387 * _2382) + _1625;
        _2175 = ((_2372 * 0.039999999105930328369140625) * _2387) + _1954;
        _2177 = ((_2374 * 0.039999999105930328369140625) * _2387) + _1956;
        _2179 = ((_2376 * 0.039999999105930328369140625) * _2387) + _1958;
    }
    else
    {
        _2169 = _1621;
        _2171 = _1623;
        _2173 = _1625;
        _2175 = _1954;
        _2177 = _1956;
        _2179 = _1958;
    }
    float _4016 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _4027 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _4038 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _4049 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _2204 = cbInstanceData._m0[_401 + 6u].w * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)));
    float _2209 = _360 / cbSceneParam._m0[86u].x;
    float _2210 = _361 / cbSceneParam._m0[86u].y;
    vec4 _2224 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2209, _2210, (log2((isnan(cbSceneParam._m0[77u].w) ? _294 : (isnan(_294) ? cbSceneParam._m0[77u].w : min(_294, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2226 = _2224.x;
    float _2227 = _2224.y;
    float _2228 = _2224.z;
    float _2229 = _2224.w;
    float _2322;
    float _2324;
    float _2326;
    float _2328;
    if (_294 > cbSceneParam._m0[78u].w)
    {
        float _2284 = isnan(_294) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _294 : min(cbSceneParam._m0[80u].w, _294));
        float _2285 = _2284 / _294;
        float _2296 = _2285 * _345;
        float _2297 = _346 * _2285;
        float _2298 = (-0.0) - _2297;
        float _2300 = _2285 * _347;
        float _2302 = (cbSceneParam._m0[77u].w * _2298) / _2284;
        float _2303 = _2302 + cbSceneParam._m0[79u].w;
        float _2304 = cbSceneParam._m0[79u].w - _2297;
        float _2310 = sqrt(((_2296 * _2296) + (_2297 * _2297)) + (_2300 * _2300));
        float _2313 = (1.0 - (cbSceneParam._m0[77u].w / _2284)) * _2310;
        float _2318 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2320 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2473;
        if (abs((_2298 - _2302) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2473 = ((((_2303 > 0.0) ? exp2(_2318 * _2303) : (2.0 - exp2(_2320 * _2303))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2313;
        }
        else
        {
            float _2433 = 1.0 / cbSceneParam._m0[80u].x;
            float _2434 = isnan(_2304) ? _2303 : (isnan(_2303) ? _2304 : max(_2303, _2304));
            float _2435 = isnan(_2304) ? _2303 : (isnan(_2303) ? _2304 : min(_2303, _2304));
            float _2444 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : min(_2434, 0.0));
            float _2445 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : min(_2435, 0.0));
            _2473 = ((abs(_2310 / _2298) * cbSceneParam._m0[80u].y) * ((((_2444 - _2445) * 2.0) - ((exp2(_2318 * (isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0)))) - exp2(_2318 * (isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0))))) * _2433)) - ((exp2(_2320 * _2444) - exp2(_2320 * _2445)) * _2433))) + (_2313 * cbSceneParam._m0[80u].z);
        }
        vec4 _2475 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2209, _2210, 1.0), 0.0);
        float _2484 = exp2((_2473 * (-1.44269502162933349609375)) * (1.0 - _2475.w));
        float _2485 = log2(_2484);
        float _2501 = log2(_2229);
        _2322 = (exp2(_2501 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2485 * cbSceneParam._m0[78u].x)) * _2475.x) / cbSceneParam._m0[78u].x)) + _2226;
        _2324 = (exp2(_2501 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2485 * cbSceneParam._m0[78u].y)) * _2475.y) / cbSceneParam._m0[78u].y)) + _2227;
        _2326 = (exp2(_2501 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2485 * cbSceneParam._m0[78u].z)) * _2475.z) / cbSceneParam._m0[78u].z)) + _2228;
        _2328 = _2484 * _2229;
    }
    else
    {
        _2322 = _2226;
        _2324 = _2227;
        _2326 = _2228;
        _2328 = _2229;
    }
    float _2340 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2341 = _2340 == 3.0;
    float _2342 = log2(_2328);
    float _2349 = exp2(_2342 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_2169 + ((isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))) * _427))) + ((_2175 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _1234)) * cbPerFrame._m0[3u].x));
    float _2350 = exp2(_2342 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_2171 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _427))) + ((_2177 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _1234)) * cbPerFrame._m0[3u].x));
    float _2351 = exp2(_2342 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_2173 + ((isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))) * _427))) + ((_2179 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _1234)) * cbPerFrame._m0[3u].x));
    float _2360 = (_2340 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2360 * (_2341 ? _2349 : (_2349 + (cbSceneParam._m0[72u].w * _2322)));
    SV_Target.y = _2360 * (_2341 ? _2350 : (_2350 + (cbSceneParam._m0[72u].w * _2324)));
    SV_Target.z = _2360 * (_2341 ? _2351 : (_2351 + (cbSceneParam._m0[72u].w * _2326)));
    SV_Target.w = _2204;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2204;
}


