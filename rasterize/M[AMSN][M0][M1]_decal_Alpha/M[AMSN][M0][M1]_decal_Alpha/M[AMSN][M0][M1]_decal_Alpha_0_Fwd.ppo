#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _832;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _182 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _189 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = (cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _223.x;
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _242 = _240.x;
    vec4 _254 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _254.z;
    float _262 = (_254.x * 2.0) + (-1.0);
    float _264 = (_254.y * 2.0) + (-1.0);
    float _265 = dot(vec2(_262, _264), vec2(_262, _264));
    float _3171 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _271 = sqrt(1.0 - (isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0))));
    float _274 = fma(_271, _189 * NORMAL.x, fma(_264, _196 * TANGENT.x, (_182 * _174) * _262));
    float _277 = fma(_271, _189 * NORMAL.y, fma(_264, _196 * TANGENT.y, (_182 * _175) * _262));
    float _280 = fma(_271, _189 * NORMAL.z, fma(_264, _196 * TANGENT.z, (_182 * _176) * _262));
    float _284 = inversesqrt(dot(vec3(_274, _277, _280), vec3(_274, _277, _280)));
    float _285 = _284 * _274;
    float _286 = _284 * _277;
    float _287 = _284 * _280;
    float _3182 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _288 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
    float _3193 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _289 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
    float _3204 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3215 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3226 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3237 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _293 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
    float _309 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _350 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _360 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _350);
    float _361 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _350);
    float _362 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _350);
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _360 * _366;
    float _368 = _361 * _366;
    float _369 = _362 * _366;
    float _375 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _376 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _397 = fma(_287, cbSceneParam._m0[5u].z, fma(_286, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _285));
    float _400 = fma(_287, cbSceneParam._m0[6u].z, fma(_286, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _285));
    float _403 = fma(_287, cbSceneParam._m0[7u].z, fma(_286, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _285));
    uint _416 = uint(roundEven(NORMAL.w)) * 13u;
    uint _419 = (_416 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _425 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0)))) * cbInstanceData._m0[_419].x;
    float _426 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0)))) * cbInstanceData._m0[_419].y;
    float _427 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_419].z;
    float _3248 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
    float _3259 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    float _3270 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
    float _431 = 1.0 - _293;
    float _432 = _428 * _431;
    float _433 = _429 * _431;
    float _434 = _430 * _431;
    float _439 = (_428 + (-0.039999999105930328369140625)) * _293;
    float _440 = (_429 + (-0.039999999105930328369140625)) * _293;
    float _441 = (_430 + (-0.039999999105930328369140625)) * _293;
    float _442 = _439 + 0.039999999105930328369140625;
    float _444 = _440 + 0.039999999105930328369140625;
    float _445 = _441 + 0.039999999105930328369140625;
    vec4 _454 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _375, cbSceneParam._m0[86u].y * _376));
    float _457 = _454.x * TEXCOORD_1.w;
    float _458 = dot(vec3(_285, _286, _287), vec3(_367, _368, _369));
    float _461 = _458 * 2.0;
    float _465 = (_461 * _285) - _367;
    float _466 = (_461 * _286) - _368;
    float _467 = (_461 * _287) - _369;
    float _471 = abs(dot(vec3(_367, _368, _369), vec3(_285, _286, _287)));
    float _3281 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _473 = sqrt(_289);
    float _486 = exp2((_473 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_473 * 3.0));
    float _492 = (1.0 - _486) * ((_473 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _493 = _486 * _473;
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _831;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _556 = fma(_529, cbModelParam._m0[26u].z, fma(_525, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _521));
        float _560 = fma(_529, cbModelParam._m0[27u].z, fma(_525, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _521));
        float _564 = fma(_529, cbModelParam._m0[28u].z, fma(_525, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _521));
        float _589 = _521 + _285;
        float _590 = _525 + _286;
        float _591 = _529 + _287;
        float _601 = fma(_591, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _589)) - _556;
        float _602 = fma(_591, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _589)) - _560;
        float _603 = fma(_591, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _589)) - _564;
        float _607 = inversesqrt(dot(vec3(_601, _602, _603), vec3(_601, _602, _603)));
        float _620 = ((_607 * _601) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_556 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _621 = ((_607 * _602) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_560 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _622 = ((_607 * _603) / cbModelParam._m0[34u].z) + ((((((_564 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _632 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        float _659 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_625.x + (-0.5));
        float _661 = _659 * (_625.y + (-0.5));
        float _662 = _659 * (_625.z + (-0.5));
        float _669 = exp2((_632.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_632.x + (-0.5));
        float _671 = _669 * (_632.y + (-0.5));
        float _672 = _669 * (_632.z + (-0.5));
        float _679 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_639.x + (-0.5));
        float _681 = _679 * (_639.y + (-0.5));
        float _682 = _679 * (_639.z + (-0.5));
        float _689 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_646.x + (-0.5));
        float _691 = _689 * (_646.y + (-0.5));
        float _692 = _689 * (_646.z + (-0.5));
        float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = _660 * 0.5;
        float _697 = _670 * 0.5;
        float _698 = _680 * 0.5;
        float _699 = dot(vec3(_696, _697, _698), vec3(_696, _697, _698));
        float _704 = (_699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_699);
        float _713 = (dot(vec3(_285, _286, _287), vec3(_704 * _696, _704 * _697, _704 * _698)) + 1.0) * 0.5;
        float _3307 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _723 = sqrt(((_697 * _697) + (_696 * _696)) + (_698 * _698)) / (_693 + 9.9999997473787516355514526367188e-06);
        float _3318 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
        float _725 = _724 * 2.0;
        float _729 = (1.0 - _724) / (_724 + 1.0);
        float _3329 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _739 = ((((1.0 - _730) * (_725 + 2.0)) * exp2(log2(isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) * (_725 + 1.0))) + _730) * _693;
        float _740 = _661 * 0.5;
        float _741 = _671 * 0.5;
        float _742 = _681 * 0.5;
        float _743 = dot(vec3(_740, _741, _742), vec3(_740, _741, _742));
        float _748 = (_743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_743);
        float _756 = (dot(vec3(_285, _286, _287), vec3(_748 * _740, _748 * _741, _748 * _742)) + 1.0) * 0.5;
        float _3340 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _765 = sqrt(((_741 * _741) + (_740 * _740)) + (_742 * _742)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _3351 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _767 = _766 * 2.0;
        float _771 = (1.0 - _766) / (_766 + 1.0);
        float _3362 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _781 = ((((1.0 - _772) * (_767 + 2.0)) * exp2(log2(isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * (_767 + 1.0))) + _772) * _694;
        float _782 = _662 * 0.5;
        float _783 = _672 * 0.5;
        float _784 = _682 * 0.5;
        float _785 = dot(vec3(_782, _783, _784), vec3(_782, _783, _784));
        float _790 = (_785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_785);
        float _798 = (dot(vec3(_285, _286, _287), vec3(_790 * _782, _790 * _783, _790 * _784)) + 1.0) * 0.5;
        float _3373 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _807 = sqrt(((_783 * _783) + (_782 * _782)) + (_784 * _784)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3384 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _809 = _808 * 2.0;
        float _813 = (1.0 - _808) / (_808 + 1.0);
        float _3395 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _823 = ((((1.0 - _814) * (_809 + 2.0)) * exp2(log2(isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * (_809 + 1.0))) + _814) * _695;
        _831 = _662;
        _833 = _661;
        _834 = _660;
        _835 = _672;
        _836 = _671;
        _837 = _670;
        _838 = _682;
        _839 = _681;
        _840 = _680;
        _841 = _695;
        _842 = _694;
        _843 = _693;
        _844 = cbModelParam._m0[36u].z * (isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0)));
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0)));
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
    }
    else
    {
        _831 = _832;
        _833 = _832;
        _834 = _832;
        _835 = _832;
        _836 = _832;
        _837 = _832;
        _838 = _832;
        _839 = _832;
        _840 = _832;
        _841 = _832;
        _842 = _832;
        _843 = _832;
        _844 = 0.0;
        _845 = 0.0;
        _846 = 0.0;
    }
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _872 = fma(_529, cbModelParam._m0[30u].z, fma(_525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _521));
        float _876 = fma(_529, cbModelParam._m0[31u].z, fma(_525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _521));
        float _880 = fma(_529, cbModelParam._m0[32u].z, fma(_525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _521));
        float _903 = _521 + _285;
        float _904 = _525 + _286;
        float _905 = _529 + _287;
        float _915 = fma(_905, cbModelParam._m0[30u].z, fma(_904, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _903)) - _872;
        float _916 = fma(_905, cbModelParam._m0[31u].z, fma(_904, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _903)) - _876;
        float _917 = fma(_905, cbModelParam._m0[32u].z, fma(_904, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _903)) - _880;
        float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
        float _934 = ((_921 * _915) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_872 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_921 * _916) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_876 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_921 * _917) / cbModelParam._m0[35u].z) + ((((((_880 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        float _971 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_938.x + (-0.5));
        float _973 = _971 * (_938.y + (-0.5));
        float _974 = _971 * (_938.z + (-0.5));
        float _981 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_945.x + (-0.5));
        float _983 = _981 * (_945.y + (-0.5));
        float _984 = _981 * (_945.z + (-0.5));
        float _991 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_952.x + (-0.5));
        float _993 = _991 * (_952.y + (-0.5));
        float _994 = _991 * (_952.z + (-0.5));
        float _1001 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_959.x + (-0.5));
        float _1003 = _1001 * (_959.y + (-0.5));
        float _1004 = _1001 * (_959.z + (-0.5));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = _972 * 0.5;
        float _1009 = _982 * 0.5;
        float _1010 = _992 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_285, _286, _287), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3458 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_1035 + 1.0))) + _1040) * _1005;
        float _1050 = _973 * 0.5;
        float _1051 = _983 * 0.5;
        float _1052 = _993 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_285, _286, _287), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3491 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_1077 + 1.0))) + _1082) * _1006;
        float _1092 = _974 * 0.5;
        float _1093 = _984 * 0.5;
        float _1094 = _994 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_285, _286, _287), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3524 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_1119 + 1.0))) + _1124) * _1007;
        _1141 = _974;
        _1142 = _973;
        _1143 = _972;
        _1144 = _984;
        _1145 = _983;
        _1146 = _982;
        _1147 = _994;
        _1148 = _993;
        _1149 = _992;
        _1150 = _1007;
        _1151 = _1006;
        _1152 = _1005;
        _1153 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1154 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
    }
    else
    {
        _1141 = _832;
        _1142 = _832;
        _1143 = _832;
        _1144 = _832;
        _1145 = _832;
        _1146 = _832;
        _1147 = _832;
        _1148 = _832;
        _1149 = _832;
        _1150 = _832;
        _1151 = _832;
        _1152 = _832;
        _1153 = 0.0;
        _1154 = 0.0;
        _1155 = 0.0;
    }
    float _1165 = (cbModelParam._m0[1u].x * (_1153 - _844)) + _844;
    float _1166 = (cbModelParam._m0[1u].x * (_1154 - _845)) + _845;
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _846)) + _846;
    float _1188 = fma(_1167, cbSceneParam._m0[89u].z, fma(_1166, cbSceneParam._m0[89u].y, _1165 * cbSceneParam._m0[89u].x));
    float _1191 = fma(_1167, cbSceneParam._m0[90u].z, fma(_1166, cbSceneParam._m0[90u].y, _1165 * cbSceneParam._m0[90u].x));
    float _1194 = fma(_1167, cbSceneParam._m0[91u].z, fma(_1166, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1165));
    float _1209 = _465 * 0.5;
    float _1210 = _466 * 0.5;
    float _1211 = _467 * 0.5;
    float _1212 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1215 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1142, _1145, _1148, _1151));
    float _1218 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1141, _1144, _1147, _1150));
    float _1252;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1225 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_831, _835, _838, _841));
        float _1229 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_833, _836, _839, _842));
        float _1233 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_834, _837, _840, _843));
        float _1240 = dot(vec4(cbModelParam._m0[39u]), vec4(_1209, _1210, _1211, 1.0));
        _1252 = dot(vec3(isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1240) ? 0.0 : (isnan(0.0) ? _1240 : max(0.0, _1240))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1252 = 1.0;
    }
    float _1263;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1254 = dot(vec4(cbModelParam._m0[40u]), vec4(_1209, _1210, _1211, 1.0));
        _1263 = dot(vec3(isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)), isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)), isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1263 = 1.0;
    }
    float _1267 = (_1263 * cbModelParam._m0[1u].x) + (_1252 * (1.0 - cbModelParam._m0[1u].x));
    float _1277 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _289);
    float _1278 = isnan(_1277) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1277 : min(cbModelParam._m0[25u].z, _1277));
    float _1360;
    float _1362;
    float _1364;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1327 = fma(_529, cbModelParam._m0[13u].z, fma(_525, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _521)) + cbModelParam._m0[13u].w;
        float _1331 = fma(_529, cbModelParam._m0[14u].z, fma(_525, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _521)) + cbModelParam._m0[14u].w;
        float _1335 = fma(_529, cbModelParam._m0[15u].z, fma(_525, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _521)) + cbModelParam._m0[15u].w;
        float _1338 = fma(_467, cbModelParam._m0[13u].z, fma(_466, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _465));
        float _1341 = fma(_467, cbModelParam._m0[14u].z, fma(_466, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _465));
        float _1344 = fma(_467, cbModelParam._m0[15u].z, fma(_466, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _465));
        float _1372;
        if (_1338 > 0.0)
        {
            _1372 = abs((1.0 - _1327) / _1338);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1327 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1372 = frontier_phi_14_12_ladder;
        }
        float _1580;
        if (_1341 > 0.0)
        {
            _1580 = abs((1.0 - _1331) / _1341);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1331 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1580 = frontier_phi_23_19_ladder;
        }
        float _1834;
        if (_1344 > 0.0)
        {
            _1834 = abs((1.0 - _1335) / _1344);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1335 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1834 = frontier_phi_35_30_ladder;
        }
        float _1836 = isnan(_1580) ? _1372 : (isnan(_1372) ? _1580 : min(_1372, _1580));
        float _1837 = isnan(_1834) ? _1836 : (isnan(_1836) ? _1834 : min(_1836, _1834));
        float _1841 = (_1837 * _1338) + _1327;
        float _1842 = (_1837 * _1341) + _1331;
        float _1843 = (_1837 * _1344) + _1335;
        float _1844 = _1837 * 9.9999997473787516355514526367188e-05;
        float _1846 = (-1.0) - _1844;
        float _1848 = _1844 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1843 > _1848) || ((_1843 < _1846) || ((_1842 > _1848) || ((_1842 < _1846) || ((_1841 < _1846) || (_1841 > _1848))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1843, cbModelParam._m0[9u].z, fma(_1842, cbModelParam._m0[9u].y, _1841 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1843, cbModelParam._m0[10u].z, fma(_1842, cbModelParam._m0[10u].y, _1841 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1843, cbModelParam._m0[11u].z, fma(_1842, cbModelParam._m0[11u].y, _1841 * cbModelParam._m0[11u].x))), _1278);
            frontier_phi_13_35_ladder = _1971.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1971.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1971.x * cbModelParam._m0[1u].y;
        }
        _1360 = frontier_phi_13_35_ladder_2;
        _1362 = frontier_phi_13_35_ladder_1;
        _1364 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1348 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_465, _466, _467), _1278);
        _1360 = _1348.x * cbModelParam._m0[1u].y;
        _1362 = _1348.y * cbModelParam._m0[1u].y;
        _1364 = _1348.z * cbModelParam._m0[1u].y;
    }
    float _1368 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _289);
    float _1369 = isnan(_1368) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1368 : min(cbModelParam._m0[25u].w, _1368));
    float _1462;
    float _1464;
    float _1466;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1426 = fma(_529, cbModelParam._m0[21u].z, fma(_525, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _521)) + cbModelParam._m0[21u].w;
        float _1430 = fma(_529, cbModelParam._m0[22u].z, fma(_525, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _521)) + cbModelParam._m0[22u].w;
        float _1434 = fma(_529, cbModelParam._m0[23u].z, fma(_525, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _521)) + cbModelParam._m0[23u].w;
        float _1437 = fma(_467, cbModelParam._m0[21u].z, fma(_466, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _465));
        float _1440 = fma(_467, cbModelParam._m0[22u].z, fma(_466, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _465));
        float _1443 = fma(_467, cbModelParam._m0[23u].z, fma(_466, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _465));
        float _1585;
        if (_1437 > 0.0)
        {
            _1585 = abs((1.0 - _1426) / _1437);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1426 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1585 = frontier_phi_25_21_ladder;
        }
        float _1861;
        if (_1440 > 0.0)
        {
            _1861 = abs((1.0 - _1430) / _1440);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1430 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1861 = frontier_phi_37_32_ladder;
        }
        float _2074;
        if (_1443 > 0.0)
        {
            _2074 = abs((1.0 - _1434) / _1443);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1434 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2074 = frontier_phi_46_43_ladder;
        }
        float _2076 = isnan(_1861) ? _1585 : (isnan(_1585) ? _1861 : min(_1585, _1861));
        float _2077 = isnan(_2074) ? _2076 : (isnan(_2076) ? _2074 : min(_2076, _2074));
        float _2081 = (_2077 * _1437) + _1426;
        float _2082 = (_2077 * _1440) + _1430;
        float _2083 = (_2077 * _1443) + _1434;
        float _2084 = _2077 * 9.9999997473787516355514526367188e-05;
        float _2085 = (-1.0) - _2084;
        float _2087 = _2084 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2083 > _2087) || ((_2083 < _2085) || ((_2082 > _2087) || ((_2082 < _2085) || ((_2081 < _2085) || (_2081 > _2087))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2083, cbModelParam._m0[17u].z, fma(_2082, cbModelParam._m0[17u].y, _2081 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2083, cbModelParam._m0[18u].z, fma(_2082, cbModelParam._m0[18u].y, _2081 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2083, cbModelParam._m0[19u].z, fma(_2082, cbModelParam._m0[19u].y, _2081 * cbModelParam._m0[19u].x))), _1369);
            frontier_phi_22_46_ladder = _2284.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2284.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2284.x * cbModelParam._m0[1u].z;
        }
        _1462 = frontier_phi_22_46_ladder_2;
        _1464 = frontier_phi_22_46_ladder_1;
        _1466 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1446 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_465, _466, _467), _1369);
        _1462 = _1446.x * cbModelParam._m0[1u].z;
        _1464 = _1446.y * cbModelParam._m0[1u].z;
        _1466 = _1446.z * cbModelParam._m0[1u].z;
    }
    float _1479 = (((_492 * _442) + _493) * _457) * ((cbModelParam._m0[1u].w * (_1462 - _1360)) + _1360);
    float _1481 = (((_492 * _444) + _493) * _457) * ((cbModelParam._m0[1u].w * (_1464 - _1362)) + _1362);
    float _1483 = (((_492 * _445) + _493) * _457) * ((cbModelParam._m0[1u].w * (_1466 - _1364)) + _1364);
    float _1486 = fma(_1483, cbSceneParam._m0[89u].z, fma(_1481, cbSceneParam._m0[89u].y, _1479 * cbSceneParam._m0[89u].x));
    float _1489 = fma(_1483, cbSceneParam._m0[90u].z, fma(_1481, cbSceneParam._m0[90u].y, _1479 * cbSceneParam._m0[90u].x));
    float _1492 = fma(_1483, cbSceneParam._m0[91u].z, fma(_1481, cbSceneParam._m0[91u].y, _1479 * cbSceneParam._m0[91u].x));
    uvec4 _1502 = floatBitsToUint(cbInstanceData._m0[_416 + 5u]);
    uint _1504 = _1502.x * 14u;
    uint _1505 = _1504 + 13u;
    float _1512 = _457 + (-1.0);
    float _1517 = (cbLight._m0[_1505].x * _1512) + 1.0;
    float _1518 = (cbLight._m0[_1505].y * _1512) + 1.0;
    float _1519 = (cbLight._m0[_1505].z * _1512) + 1.0;
    float _1520 = (cbLight._m0[_1505].w * _1512) + 1.0;
    uint _1521 = _1504 + 5u;
    float _1527 = isnan(1.0) ? _1518 : (isnan(_1518) ? 1.0 : min(_1518, 1.0));
    uint _1531 = _1504 + 4u;
    float _1538 = isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0));
    uint _1542 = _1504 | 1u;
    float _1553 = dot(vec3(cbLight._m0[_1504].xyz), vec3(_285, _286, _287));
    float _1556 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_285, _286, _287));
    float _3660 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
    float _3671 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
    float _1561 = (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * 0.3183098733425140380859375;
    float _1563 = (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * 0.3183098733425140380859375;
    float _1570 = ((cbLight._m0[_1521].x * _1527) * _1563) + ((cbLight._m0[_1531].x * _1538) * _1561);
    float _1571 = ((_1527 * cbLight._m0[_1521].y) * _1563) + ((_1538 * cbLight._m0[_1531].y) * _1561);
    float _1572 = ((_1527 * cbLight._m0[_1521].z) * _1563) + ((_1538 * cbLight._m0[_1531].z) * _1561);
    uvec4 _1577 = floatBitsToUint(cbLight._m0[_1504 + 12u]);
    bool _1579 = _1577.x == 0u;
    float _1590;
    float _1592;
    float _1594;
    if (_1579)
    {
        _1590 = _1570;
        _1592 = _1571;
        _1594 = _1572;
    }
    else
    {
        uint _1598 = _1504 + 6u;
        float _1614 = (dot(vec3(cbLight._m0[_1504 + 2u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _1615 = _1614 * _1614;
        float _3682 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1617 = isnan(1.0) ? _1519 : (isnan(_1519) ? 1.0 : min(_1519, 1.0));
        _1590 = (((cbLight._m0[_1598].x * 0.3183098733425140380859375) * _1616) * _1617) + _1570;
        _1592 = (((cbLight._m0[_1598].y * 0.3183098733425140380859375) * _1616) * _1617) + _1571;
        _1594 = (((cbLight._m0[_1598].z * 0.3183098733425140380859375) * _1616) * _1617) + _1572;
    }
    bool _1597 = _1577.y == 0u;
    float _1635;
    float _1637;
    float _1639;
    if (_1597)
    {
        _1635 = _1590;
        _1637 = _1592;
        _1639 = _1594;
    }
    else
    {
        uint _1805 = _1504 + 7u;
        float _1821 = (dot(vec3(cbLight._m0[_1504 + 3u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _1822 = _1821 * _1821;
        float _3698 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1824 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
        _1635 = (((cbLight._m0[_1805].x * 0.3183098733425140380859375) * _1823) * _1824) + _1590;
        _1637 = (((cbLight._m0[_1805].y * 0.3183098733425140380859375) * _1823) * _1824) + _1592;
        _1639 = (((cbLight._m0[_1805].z * 0.3183098733425140380859375) * _1823) * _1824) + _1594;
    }
    uint _1642 = _1504 + 8u;
    float _1655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1504].w)) * _289) * 0.949999988079071044921875);
    float _1656 = _1655 * _1655;
    float _1657 = cbLight._m0[_1504].x + _367;
    float _1658 = cbLight._m0[_1504].y + _368;
    float _1659 = cbLight._m0[_1504].z + _369;
    float _1663 = inversesqrt(dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659)));
    float _1664 = _1663 * _1657;
    float _1665 = _1663 * _1658;
    float _1666 = _1663 * _1659;
    float _1667 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1504].xyz));
    float _3714 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1670 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _1671 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _1672 = dot(vec3(_285, _286, _287), vec3(_1664, _1665, _1666));
    float _3736 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1675 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _1676 = dot(vec3(cbLight._m0[_1504].xyz), vec3(_1664, _1665, _1666));
    float _3747 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1680 = _1656 * _1656;
    float _1684 = ((_1675 * _1675) * (_1680 + (-1.0))) + 1.0;
    float _1692 = exp2(log2(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * 5.0);
    float _1693 = 0.959999978542327880859375 - _439;
    float _1695 = 0.959999978542327880859375 - _440;
    float _1696 = 0.959999978542327880859375 - _441;
    float _1703 = 1.0 - _1656;
    float _1714 = (0.5 / (((_1671 * ((_1670 * _1703) + _1656)) + 9.9999999392252902907785028219223e-09) + (((_1671 * _1703) + _1656) * _1670))) * _1670;
    float _3758 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1716 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1680 / ((_1684 * _1684) * 3.141590118408203125));
    uint _1727 = _1504 + 9u;
    float _1738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1542].w)) * _289) * 0.949999988079071044921875);
    float _1739 = _1738 * _1738;
    float _1740 = cbLight._m0[_1542].x + _367;
    float _1741 = cbLight._m0[_1542].y + _368;
    float _1742 = cbLight._m0[_1542].z + _369;
    float _1746 = inversesqrt(dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742)));
    float _1747 = _1746 * _1740;
    float _1748 = _1746 * _1741;
    float _1749 = _1746 * _1742;
    float _1750 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1542].xyz));
    float _3769 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _1754 = dot(vec3(_285, _286, _287), vec3(_1747, _1748, _1749));
    float _3780 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _1758 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_1747, _1748, _1749));
    float _3791 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1762 = _1739 * _1739;
    float _1766 = ((_1757 * _1757) * (_1762 + (-1.0))) + 1.0;
    float _1773 = exp2(log2(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * 5.0);
    float _1780 = 1.0 - _1739;
    float _1790 = (0.5 / (((_1671 * ((_1753 * _1780) + _1739)) + 9.9999999392252902907785028219223e-09) + (((_1671 * _1780) + _1739) * _1753))) * _1753;
    float _3802 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1792 = (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1762 / ((_1766 * _1766) * 3.141590118408203125));
    float _1802 = (((((_1773 * _1693) + _442) * cbLight._m0[_1727].x) * _1792) * _1527) + (((((_1692 * _1693) + _442) * cbLight._m0[_1642].x) * _1716) * _1538);
    float _1803 = (((((_1773 * _1695) + _444) * cbLight._m0[_1727].y) * _1792) * _1527) + (((((_1692 * _1695) + _444) * cbLight._m0[_1642].y) * _1716) * _1538);
    float _1804 = (((((_1773 * _1696) + _445) * cbLight._m0[_1727].z) * _1792) * _1527) + (((((_1692 * _1696) + _445) * cbLight._m0[_1642].z) * _1716) * _1538);
    float _1866;
    float _1868;
    float _1870;
    if (_1579)
    {
        _1866 = _1802;
        _1868 = _1803;
        _1870 = _1804;
    }
    else
    {
        uint _1872 = _1504 + 2u;
        uint _1876 = _1504 + 10u;
        float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _289) * 0.949999988079071044921875);
        float _1891 = _1890 * _1890;
        float _1892 = cbLight._m0[_1872].x + _367;
        float _1893 = cbLight._m0[_1872].y + _368;
        float _1894 = cbLight._m0[_1872].z + _369;
        float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
        float _1899 = _1898 * _1892;
        float _1900 = _1898 * _1893;
        float _1901 = _1898 * _1894;
        float _1902 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1872].xyz));
        float _3813 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1905 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1906 = dot(vec3(_285, _286, _287), vec3(_1899, _1900, _1901));
        float _3824 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1909 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1910 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_1899, _1900, _1901));
        float _3835 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1914 = _1891 * _1891;
        float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
        float _1925 = exp2(log2(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * 5.0);
        float _1932 = 1.0 - _1891;
        float _1942 = (0.5 / (((_1671 * ((_1905 * _1932) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1671 * _1932) + _1891) * _1905))) * _1905;
        float _3846 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1944 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
        float _1945 = isnan(1.0) ? _1519 : (isnan(_1519) ? 1.0 : min(_1519, 1.0));
        _1866 = (((((_1925 * _1693) + _442) * cbLight._m0[_1876].x) * _1944) * _1945) + _1802;
        _1868 = (((((_1925 * _1695) + _444) * cbLight._m0[_1876].y) * _1944) * _1945) + _1803;
        _1870 = (((((_1925 * _1696) + _445) * cbLight._m0[_1876].z) * _1944) * _1945) + _1804;
    }
    float _1980;
    float _1982;
    float _1984;
    if (_1597)
    {
        _1980 = _1866;
        _1982 = _1868;
        _1984 = _1870;
    }
    else
    {
        uint _1991 = _1504 + 3u;
        uint _1995 = _1504 + 11u;
        float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _289) * 0.949999988079071044921875);
        float _2010 = _2009 * _2009;
        float _2011 = cbLight._m0[_1991].x + _367;
        float _2012 = cbLight._m0[_1991].y + _368;
        float _2013 = cbLight._m0[_1991].z + _369;
        float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
        float _2018 = _2017 * _2011;
        float _2019 = _2017 * _2012;
        float _2020 = _2017 * _2013;
        float _2021 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1991].xyz));
        float _3862 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2024 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _2025 = dot(vec3(_285, _286, _287), vec3(_2018, _2019, _2020));
        float _3873 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _2029 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2018, _2019, _2020));
        float _3884 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2033 = _2010 * _2010;
        float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
        float _2044 = exp2(log2(1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * 5.0);
        float _2051 = 1.0 - _2010;
        float _2061 = (0.5 / (((_1671 * ((_2024 * _2051) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_1671 * _2051) + _2010) * _2024))) * _2024;
        float _3895 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2063 = (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
        float _2064 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
        _1980 = (((((_2044 * _1693) + _442) * cbLight._m0[_1995].x) * _2063) * _2064) + _1866;
        _1982 = (((((_2044 * _1695) + _444) * cbLight._m0[_1995].y) * _2063) * _2064) + _1868;
        _1984 = (((((_2044 * _1696) + _445) * cbLight._m0[_1995].z) * _2063) * _2064) + _1870;
    }
    float _2199;
    float _2201;
    float _2203;
    float _2205;
    float _2207;
    float _2209;
    if (_1502.y == 0u)
    {
        float _2139 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2140 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2139;
        float _2141 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2139;
        float _2142 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2139;
        uvec4 _2154 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2155 = _2154.x;
        uint _2166 = uint((float(_2154.y) * floor(float(uint(cbSceneParam._m0[85u].y * _376) / _2155))) + floor(float(uint(cbSceneParam._m0[85u].x * _375) / _2155)));
        float _2176 = (log2(_2142 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2177 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        uint _2180 = uint(isnan(14.0) ? _2177 : (isnan(_2177) ? 14.0 : min(_2177, 14.0)));
        uvec4 _2185 = texelFetch(g_lightClusterGridBuffer, int(((_2180 << 2u) + (_2166 << 6u)) >> 2u));
        uint _2186 = _2185.x;
        uint _2187 = _2154.z;
        float _2289;
        float _2291;
        float _2293;
        float _2295;
        float _2297;
        float _2299;
        if (((((1u << ((_2187 >> 4u) & 15u)) + 4294967295u) & _2186) == 0u) || ((_2187 & 240u) == 0u))
        {
            _2289 = 0.0;
            _2291 = 0.0;
            _2293 = 0.0;
            _2295 = 0.0;
            _2297 = 0.0;
            _2299 = 0.0;
        }
        else
        {
            float _2290;
            float _2292;
            float _2294;
            float _2296;
            float _2298;
            float _2300;
            float _2434 = 0.0;
            float _2435 = 0.0;
            float _2436 = 0.0;
            float _2437 = 0.0;
            float _2438 = 0.0;
            float _2439 = 0.0;
            uint _2440 = 0u;
            uint _2449;
            bool _2450;
            for (;;)
            {
                _2449 = texelFetch(g_lightClassification, int((((_2180 << 5u) + (_2166 << 9u)) + (_2440 << 2u)) >> 2u)).x;
                _2450 = _2449 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2450)
                {
                    frontier_phi_61_pred = _2434;
                    frontier_phi_61_pred_1 = _2439;
                    frontier_phi_61_pred_2 = _2438;
                    frontier_phi_61_pred_3 = _2437;
                    frontier_phi_61_pred_4 = _2436;
                    frontier_phi_61_pred_5 = _2435;
                }
                else
                {
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    uint _2564;
                    _2558 = _2434;
                    _2559 = _2435;
                    _2560 = _2436;
                    _2561 = _2437;
                    _2562 = _2438;
                    _2563 = _2439;
                    _2564 = _2449;
                    float _2490;
                    float _2491;
                    float _2492;
                    float _2493;
                    float _2494;
                    float _2495;
                    for (;;)
                    {
                        uint _2568 = uint(findLSB(_2564)) + (_2440 << 5u);
                        uint _2565 = (_2564 + 4294967295u) & _2564;
                        uint _2570 = _2568 * 48u;
                        vec4 _2584 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2570)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 3u)).x));
                        uint _2590 = (_2568 * 48u) + 4u;
                        vec4 _2603 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2590)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 3u)).x));
                        uint _2609 = (_2568 * 48u) + 8u;
                        vec3 _2620 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2609)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 2u)).x));
                        float _2624 = _2584.x - _2140;
                        float _2625 = _2584.y - _2141;
                        float _2626 = _2584.z - _2142;
                        float _2627 = dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626));
                        float _2630 = inversesqrt(_2627);
                        float _2631 = _2630 * _2624;
                        float _2632 = _2630 * _2625;
                        float _2633 = _2630 * _2626;
                        float _2634 = dot(vec3(_397, _400, _403), vec3(_2631, _2632, _2633));
                        float _2639 = 1.0 - (_2627 * _2584.w);
                        float _3921 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
                        float _2640 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
                        float _2641 = sqrt(_2627) * _2603.w;
                        float _2644 = 1.39999997615814208984375 / (_2641 + 1.39999997615814208984375);
                        float _2645 = _2644 * _2644;
                        float _2648 = ((1.0 - _2645) * _2634) + _2645;
                        float _2651 = _2641 * _2641;
                        float _2655 = ((isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0))) * _2640) / ((_2651 * 0.699999988079071044921875) + 1.0);
                        float _2659 = (-0.0) - _2140;
                        float _2660 = (-0.0) - _2141;
                        float _2661 = (-0.0) - _2142;
                        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
                        float _2666 = _2665 * _2659;
                        float _2667 = _2665 * _2660;
                        float _2668 = _2665 * _2661;
                        float _2676 = exp2(log2(1.0 / ((_2651 * 3.5) + 5.0)) * 0.25);
                        float _2677 = 1.0 - _473;
                        float _2684 = sqrt(1.0 - ((1.0 - (_2677 * _2677)) * (1.0 - (_2676 * _2676))));
                        float _2685 = _2684 * _2684;
                        float _2686 = _2685 * _2685;
                        float _2687 = _2666 + _2631;
                        float _2688 = _2667 + _2632;
                        float _2689 = _2668 + _2633;
                        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
                        float _2697 = dot(vec3(_397, _400, _403), vec3(_2666, _2667, _2668));
                        float _3937 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                        float _2700 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
                        float _2701 = dot(vec3(_397, _400, _403), vec3(_2693 * _2687, _2693 * _2688, _2693 * _2689));
                        float _3948 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
                        float _2704 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                        float _2708 = ((_2704 * _2704) * (_2686 + (-1.0))) + 1.0;
                        float _2709 = _2644 * _2685;
                        float _2710 = _2709 * _2709;
                        float _2713 = ((1.0 - _2710) * _2634) + _2710;
                        float _3959 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
                        float _2714 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                        float _2715 = 1.0 - _2685;
                        float _2725 = (0.5 / (((_2714 * ((_2700 * _2715) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2714 * _2715) + _2685) * _2700))) * _2714;
                        float _3970 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2736 = (((_2686 * 3.1415927410125732421875) * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) / ((_2708 * _2708) * ((_2651 * 2.1991131305694580078125) + 3.141590118408203125))) * _2640;
                        _2493 = (_2655 * _2603.x) + _2561;
                        _2494 = (_2655 * _2603.y) + _2562;
                        _2495 = (_2655 * _2603.z) + _2563;
                        _2490 = (_2736 * _2620.x) + _2558;
                        _2491 = (_2736 * _2620.y) + _2559;
                        _2492 = (_2736 * _2620.z) + _2560;
                        if (_2565 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2558 = _2490;
                            _2559 = _2491;
                            _2560 = _2492;
                            _2561 = _2493;
                            _2562 = _2494;
                            _2563 = _2495;
                            _2564 = _2565;
                        }
                    }
                    frontier_phi_61_pred = _2490;
                    frontier_phi_61_pred_1 = _2495;
                    frontier_phi_61_pred_2 = _2494;
                    frontier_phi_61_pred_3 = _2493;
                    frontier_phi_61_pred_4 = _2492;
                    frontier_phi_61_pred_5 = _2491;
                }
                _2290 = frontier_phi_61_pred;
                _2300 = frontier_phi_61_pred_1;
                _2298 = frontier_phi_61_pred_2;
                _2296 = frontier_phi_61_pred_3;
                _2294 = frontier_phi_61_pred_4;
                _2292 = frontier_phi_61_pred_5;
                uint _2441 = _2440 + 1u;
                if (_2441 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2434 = _2290;
                    _2435 = _2292;
                    _2436 = _2294;
                    _2437 = _2296;
                    _2438 = _2298;
                    _2439 = _2300;
                    _2440 = _2441;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2289 = _2290;
            _2291 = _2292;
            _2293 = _2294;
            _2295 = _2296;
            _2297 = _2298;
            _2299 = _2300;
        }
        uvec4 _2303 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2304 = _2303.z;
        uint _2306 = (_2304 >> 8u) & 15u;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        if (((4294967295u << _2306) & _2186) == 0u)
        {
            _2402 = _2289;
            _2404 = _2291;
            _2406 = _2293;
            _2408 = _2295;
            _2410 = _2297;
            _2412 = _2299;
        }
        else
        {
            float _2427 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
            float _2428 = _2427 * _2140;
            float _2429 = _2427 * _2141;
            float _2430 = _2427 * _2142;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2306 < ((_2304 >> 12u) & 15u))
            {
                float _2403;
                float _2405;
                float _2407;
                float _2409;
                float _2411;
                float _2413;
                float _2541 = _2289;
                float _2542 = _2291;
                float _2543 = _2293;
                float _2544 = _2295;
                float _2545 = _2297;
                float _2546 = _2299;
                uint _2547 = _2306;
                uint _2556;
                bool _2557;
                for (;;)
                {
                    _2556 = texelFetch(g_lightClassification, int((((_2180 << 5u) + (_2166 << 9u)) + (_2547 << 2u)) >> 2u)).x;
                    _2557 = _2556 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2557)
                    {
                        frontier_phi_67_pred = _2544;
                        frontier_phi_67_pred_1 = _2545;
                        frontier_phi_67_pred_2 = _2546;
                        frontier_phi_67_pred_3 = _2543;
                        frontier_phi_67_pred_4 = _2542;
                        frontier_phi_67_pred_5 = _2541;
                    }
                    else
                    {
                        float _2741;
                        float _2742;
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2746;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _2754 = _2541;
                        float _2755 = _2542;
                        float _2756 = _2543;
                        float _2757 = _2544;
                        float _2758 = _2545;
                        float _2759 = _2546;
                        uint _2760 = _2556;
                        uint _2761;
                        vec4 _2786;
                        float _2787;
                        vec4 _2802;
                        vec3 _2814;
                        vec4 _2830;
                        vec4 _2846;
                        float _2893;
                        bool _2894;
                        for (;;)
                        {
                            uint _2771 = ((_2547 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2760));
                            _2761 = (_2760 + 4294967295u) & _2760;
                            uint _2773 = _2771 * 40u;
                            _2786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 3u)).x));
                            _2787 = _2786.w;
                            uint _2789 = (_2771 * 40u) + 4u;
                            _2802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 3u)).x));
                            uint _2804 = (_2771 * 40u) + 8u;
                            _2814 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 2u)).x));
                            uint _2817 = (_2771 * 40u) + 16u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            uint _2833 = (_2771 * 40u) + 20u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2849 = (_2771 * 40u) + 24u;
                            vec4 _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2868 = (_2771 * 40u) + 28u;
                            vec4 _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            _2893 = fma(_2142, _2881.z, fma(_2141, _2881.y, _2881.x * _2140)) + _2881.w;
                            _2894 = !((fma(_2142, _2862.z, fma(_2141, _2862.y, _2862.x * _2140)) + _2862.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2894)
                            {
                                float _2921 = _2786.x - _2140;
                                float _2922 = _2786.y - _2141;
                                float _2923 = _2786.z - _2142;
                                float _2924 = dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923));
                                float _2927 = inversesqrt(_2924);
                                float _2928 = _2927 * _2921;
                                float _2929 = _2927 * _2922;
                                float _2930 = _2927 * _2923;
                                float _2934 = 1.0 - (_2924 / (_2787 * _2787));
                                float _3981 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                                float _2935 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
                                float _2939 = sqrt(_2924) * _2802.w;
                                float _2941 = 1.39999997615814208984375 / (_2939 + 1.39999997615814208984375);
                                float _2942 = _2941 * _2941;
                                float _2945 = ((1.0 - _2942) * dot(vec3(_2928, _2929, _2930), vec3(_397, _400, _403))) + _2942;
                                float _2948 = _2939 * _2939;
                                float _2952 = (fma(_2142, _2830.z, fma(_2141, _2830.y, _2830.x * _2140)) + _2830.w) / _2893;
                                float _2953 = (fma(_2142, _2846.z, fma(_2141, _2846.y, _2846.x * _2140)) + _2846.w) / _2893;
                                float _2957 = 1.0 - dot(vec2(_2952, _2953), vec2(_2952, _2953));
                                float _3997 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                                float _2958 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                                float _2959 = _2958 * (((isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))) * _2935) / ((_2948 * 0.699999988079071044921875) + 1.0));
                                float _2971 = exp2(log2(1.0 / ((_2948 * 3.5) + 5.0)) * 0.25);
                                float _2972 = 1.0 - _473;
                                float _2979 = sqrt(1.0 - ((1.0 - (_2972 * _2972)) * (1.0 - (_2971 * _2971))));
                                float _2980 = _2979 * _2979;
                                float _2981 = _2980 * _2980;
                                float _2982 = _2928 - _2428;
                                float _2983 = _2929 - _2429;
                                float _2984 = _2930 - _2430;
                                float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
                                float _2992 = dot(vec3(_397, _400, _403), vec3((-0.0) - _2428, (-0.0) - _2429, (-0.0) - _2430));
                                float _4008 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2995 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                                float _2996 = dot(vec3(_397, _400, _403), vec3(_2988 * _2982, _2988 * _2983, _2988 * _2984));
                                float _4019 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                                float _2999 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                                float _3003 = ((_2999 * _2999) * (_2981 + (-1.0))) + 1.0;
                                float _3004 = _2941 * _2980;
                                float _3005 = _3004 * _3004;
                                float _3011 = ((1.0 - _3005) * dot(vec3(_397, _400, _403), vec3(_2928, _2929, _2930))) + _3005;
                                float _4030 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                                float _3012 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                                float _3013 = 1.0 - _2980;
                                float _3023 = (0.5 / (((_3012 * ((_2995 * _3013) + _2980)) + 9.9999999392252902907785028219223e-09) + (((_3012 * _3013) + _2980) * _2995))) * _3012;
                                float _4041 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3033 = (_2958 * _2935) * (((_2981 * 3.1415927410125732421875) * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) / ((_3003 * _3003) * ((_2948 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3033 * _2814.x;
                                frontier_phi_73_pred_1 = _3033 * _2814.y;
                                frontier_phi_73_pred_2 = _2959 * _2802.z;
                                frontier_phi_73_pred_3 = _2959 * _2802.y;
                                frontier_phi_73_pred_4 = _2959 * _2802.x;
                                frontier_phi_73_pred_5 = _3033 * _2814.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3037 = frontier_phi_73_pred;
                            _3038 = frontier_phi_73_pred_1;
                            _3042 = frontier_phi_73_pred_2;
                            _3041 = frontier_phi_73_pred_3;
                            _3040 = frontier_phi_73_pred_4;
                            _3039 = frontier_phi_73_pred_5;
                            _2744 = _3040 + _2757;
                            _2745 = _3041 + _2758;
                            _2746 = _3042 + _2759;
                            _2741 = _3037 + _2754;
                            _2742 = _3038 + _2755;
                            _2743 = _3039 + _2756;
                            if (_2761 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2754 = _2741;
                                _2755 = _2742;
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2746;
                                _2760 = _2761;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2744;
                        frontier_phi_67_pred_1 = _2745;
                        frontier_phi_67_pred_2 = _2746;
                        frontier_phi_67_pred_3 = _2743;
                        frontier_phi_67_pred_4 = _2742;
                        frontier_phi_67_pred_5 = _2741;
                    }
                    _2409 = frontier_phi_67_pred;
                    _2411 = frontier_phi_67_pred_1;
                    _2413 = frontier_phi_67_pred_2;
                    _2407 = frontier_phi_67_pred_3;
                    _2405 = frontier_phi_67_pred_4;
                    _2403 = frontier_phi_67_pred_5;
                    uint _2548 = _2547 + 1u;
                    if (_2548 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2541 = _2403;
                        _2542 = _2405;
                        _2543 = _2407;
                        _2544 = _2409;
                        _2545 = _2411;
                        _2546 = _2413;
                        _2547 = _2548;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2411;
                frontier_phi_55_56_ladder_1 = _2413;
                frontier_phi_55_56_ladder_2 = _2409;
                frontier_phi_55_56_ladder_3 = _2407;
                frontier_phi_55_56_ladder_4 = _2405;
                frontier_phi_55_56_ladder_5 = _2403;
            }
            else
            {
                frontier_phi_55_56_ladder = _2297;
                frontier_phi_55_56_ladder_1 = _2299;
                frontier_phi_55_56_ladder_2 = _2295;
                frontier_phi_55_56_ladder_3 = _2293;
                frontier_phi_55_56_ladder_4 = _2291;
                frontier_phi_55_56_ladder_5 = _2289;
            }
            _2402 = frontier_phi_55_56_ladder_5;
            _2404 = frontier_phi_55_56_ladder_4;
            _2406 = frontier_phi_55_56_ladder_3;
            _2408 = frontier_phi_55_56_ladder_2;
            _2410 = frontier_phi_55_56_ladder;
            _2412 = frontier_phi_55_56_ladder_1;
        }
        float _2417 = isnan(1.0) ? _457 : (isnan(_457) ? 1.0 : min(_457, 1.0));
        _2199 = (_2417 * _2408) + _1635;
        _2201 = (_2417 * _2410) + _1637;
        _2203 = (_2417 * _2412) + _1639;
        _2205 = ((_2402 * _442) * _2417) + _1980;
        _2207 = ((_2404 * _444) * _2417) + _1982;
        _2209 = ((_2406 * _445) * _2417) + _1984;
    }
    else
    {
        _2199 = _1635;
        _2201 = _1637;
        _2203 = _1639;
        _2205 = _1980;
        _2207 = _1982;
        _2209 = _1984;
    }
    float _4057 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _4068 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4079 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4090 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _2234 = cbInstanceData._m0[_416 + 6u].w * (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)));
    float _2239 = _375 / cbSceneParam._m0[86u].x;
    float _2240 = _376 / cbSceneParam._m0[86u].y;
    vec4 _2254 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2239, _2240, (log2((isnan(cbSceneParam._m0[77u].w) ? _309 : (isnan(_309) ? cbSceneParam._m0[77u].w : min(_309, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2256 = _2254.x;
    float _2257 = _2254.y;
    float _2258 = _2254.z;
    float _2259 = _2254.w;
    float _2352;
    float _2354;
    float _2356;
    float _2358;
    if (_309 > cbSceneParam._m0[78u].w)
    {
        float _2314 = isnan(_309) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _309 : min(cbSceneParam._m0[80u].w, _309));
        float _2315 = _2314 / _309;
        float _2326 = _2315 * _360;
        float _2327 = _361 * _2315;
        float _2328 = (-0.0) - _2327;
        float _2330 = _2315 * _362;
        float _2332 = (cbSceneParam._m0[77u].w * _2328) / _2314;
        float _2333 = _2332 + cbSceneParam._m0[79u].w;
        float _2334 = cbSceneParam._m0[79u].w - _2327;
        float _2340 = sqrt(((_2326 * _2326) + (_2327 * _2327)) + (_2330 * _2330));
        float _2343 = (1.0 - (cbSceneParam._m0[77u].w / _2314)) * _2340;
        float _2348 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2350 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2503;
        if (abs((_2328 - _2332) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2503 = ((((_2333 > 0.0) ? exp2(_2348 * _2333) : (2.0 - exp2(_2350 * _2333))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2343;
        }
        else
        {
            float _2463 = 1.0 / cbSceneParam._m0[80u].x;
            float _2464 = isnan(_2334) ? _2333 : (isnan(_2333) ? _2334 : max(_2333, _2334));
            float _2465 = isnan(_2334) ? _2333 : (isnan(_2333) ? _2334 : min(_2333, _2334));
            float _2474 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : min(_2464, 0.0));
            float _2475 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : min(_2465, 0.0));
            _2503 = ((abs(_2340 / _2328) * cbSceneParam._m0[80u].y) * ((((_2474 - _2475) * 2.0) - ((exp2(_2348 * (isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0)))) - exp2(_2348 * (isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0))))) * _2463)) - ((exp2(_2350 * _2474) - exp2(_2350 * _2475)) * _2463))) + (_2343 * cbSceneParam._m0[80u].z);
        }
        vec4 _2505 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2239, _2240, 1.0), 0.0);
        float _2514 = exp2((_2503 * (-1.44269502162933349609375)) * (1.0 - _2505.w));
        float _2515 = log2(_2514);
        float _2531 = log2(_2259);
        _2352 = (exp2(_2531 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2515 * cbSceneParam._m0[78u].x)) * _2505.x) / cbSceneParam._m0[78u].x)) + _2256;
        _2354 = (exp2(_2531 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2515 * cbSceneParam._m0[78u].y)) * _2505.y) / cbSceneParam._m0[78u].y)) + _2257;
        _2356 = (exp2(_2531 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2515 * cbSceneParam._m0[78u].z)) * _2505.z) / cbSceneParam._m0[78u].z)) + _2258;
        _2358 = _2514 * _2259;
    }
    else
    {
        _2352 = _2256;
        _2354 = _2257;
        _2356 = _2258;
        _2358 = _2259;
    }
    float _2370 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2371 = _2370 == 3.0;
    float _2372 = log2(_2358);
    float _2379 = exp2(_2372 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_2199 + ((isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))) * _457))) + ((_2205 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _1267)) * cbPerFrame._m0[3u].x));
    float _2380 = exp2(_2372 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2201 + ((isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))) * _457))) + ((_2207 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _1267)) * cbPerFrame._m0[3u].x));
    float _2381 = exp2(_2372 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_2203 + ((isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))) * _457))) + ((_2209 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _1267)) * cbPerFrame._m0[3u].x));
    float _2390 = (_2370 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2390 * (_2371 ? _2379 : (_2379 + (cbSceneParam._m0[72u].w * _2352)));
    SV_Target.y = _2390 * (_2371 ? _2380 : (_2380 + (cbSceneParam._m0[72u].w * _2354)));
    SV_Target.z = _2390 * (_2371 ? _2381 : (_2381 + (cbSceneParam._m0[72u].w * _2356)));
    SV_Target.w = _2234;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2234;
}


