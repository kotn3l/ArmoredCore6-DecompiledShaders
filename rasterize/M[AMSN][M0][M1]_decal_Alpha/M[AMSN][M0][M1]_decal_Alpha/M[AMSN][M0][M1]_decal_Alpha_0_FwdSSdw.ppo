#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _834;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _184 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _191 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _225 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = (cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _225.x;
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _244 = _242.x;
    vec4 _256 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _260 = _256.z;
    float _264 = (_256.x * 2.0) + (-1.0);
    float _266 = (_256.y * 2.0) + (-1.0);
    float _267 = dot(vec2(_264, _266), vec2(_264, _266));
    float _3197 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _273 = sqrt(1.0 - (isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0))));
    float _276 = fma(_273, _191 * NORMAL.x, fma(_266, _198 * TANGENT.x, (_184 * _176) * _264));
    float _279 = fma(_273, _191 * NORMAL.y, fma(_266, _198 * TANGENT.y, (_184 * _177) * _264));
    float _282 = fma(_273, _191 * NORMAL.z, fma(_266, _198 * TANGENT.z, (_184 * _178) * _264));
    float _286 = inversesqrt(dot(vec3(_276, _279, _282), vec3(_276, _279, _282)));
    float _287 = _286 * _276;
    float _288 = _286 * _279;
    float _289 = _286 * _282;
    float _3208 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _290 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
    float _3219 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _291 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
    float _3230 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3241 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3252 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3263 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _295 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _311 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    float _377 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _378 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _399 = fma(_289, cbSceneParam._m0[5u].z, fma(_288, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _287));
    float _402 = fma(_289, cbSceneParam._m0[6u].z, fma(_288, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _287));
    float _405 = fma(_289, cbSceneParam._m0[7u].z, fma(_288, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _287));
    uint _418 = uint(roundEven(NORMAL.w)) * 13u;
    uint _421 = (_418 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _427 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0)))) * cbInstanceData._m0[_421].x;
    float _428 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0)))) * cbInstanceData._m0[_421].y;
    float _429 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0)))) * cbInstanceData._m0[_421].z;
    float _3274 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _3285 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _3296 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _433 = 1.0 - _295;
    float _434 = _430 * _433;
    float _435 = _431 * _433;
    float _436 = _432 * _433;
    float _441 = (_430 + (-0.039999999105930328369140625)) * _295;
    float _442 = (_431 + (-0.039999999105930328369140625)) * _295;
    float _443 = (_432 + (-0.039999999105930328369140625)) * _295;
    float _444 = _441 + 0.039999999105930328369140625;
    float _446 = _442 + 0.039999999105930328369140625;
    float _447 = _443 + 0.039999999105930328369140625;
    vec4 _456 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _377, cbSceneParam._m0[86u].y * _378));
    float _459 = _456.x * TEXCOORD_1.w;
    float _460 = dot(vec3(_287, _288, _289), vec3(_369, _370, _371));
    float _463 = _460 * 2.0;
    float _467 = (_463 * _287) - _369;
    float _468 = (_463 * _288) - _370;
    float _469 = (_463 * _289) - _371;
    float _473 = abs(dot(vec3(_369, _370, _371), vec3(_287, _288, _289)));
    float _3307 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _475 = sqrt(_291);
    float _488 = exp2((_475 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_475 * 3.0));
    float _494 = (1.0 - _488) * ((_475 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _495 = _488 * _475;
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _833;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _558 = fma(_531, cbModelParam._m0[26u].z, fma(_527, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _523));
        float _562 = fma(_531, cbModelParam._m0[27u].z, fma(_527, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _523));
        float _566 = fma(_531, cbModelParam._m0[28u].z, fma(_527, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _523));
        float _591 = _523 + _287;
        float _592 = _527 + _288;
        float _593 = _531 + _289;
        float _603 = fma(_593, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _591)) - _558;
        float _604 = fma(_593, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _591)) - _562;
        float _605 = fma(_593, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _591)) - _566;
        float _609 = inversesqrt(dot(vec3(_603, _604, _605), vec3(_603, _604, _605)));
        float _622 = ((_609 * _603) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_558 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _623 = ((_609 * _604) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_562 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _624 = ((_609 * _605) / cbModelParam._m0[34u].z) + ((((((_566 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _634 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        float _661 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _662 = _661 * (_627.x + (-0.5));
        float _663 = _661 * (_627.y + (-0.5));
        float _664 = _661 * (_627.z + (-0.5));
        float _671 = exp2((_634.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_634.x + (-0.5));
        float _673 = _671 * (_634.y + (-0.5));
        float _674 = _671 * (_634.z + (-0.5));
        float _681 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_641.x + (-0.5));
        float _683 = _681 * (_641.y + (-0.5));
        float _684 = _681 * (_641.z + (-0.5));
        float _691 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_648.x + (-0.5));
        float _693 = _691 * (_648.y + (-0.5));
        float _694 = _691 * (_648.z + (-0.5));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = _662 * 0.5;
        float _699 = _672 * 0.5;
        float _700 = _682 * 0.5;
        float _701 = dot(vec3(_698, _699, _700), vec3(_698, _699, _700));
        float _706 = (_701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_701);
        float _715 = (dot(vec3(_287, _288, _289), vec3(_706 * _698, _706 * _699, _706 * _700)) + 1.0) * 0.5;
        float _3333 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _725 = sqrt(((_699 * _699) + (_698 * _698)) + (_700 * _700)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3344 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _727 = _726 * 2.0;
        float _731 = (1.0 - _726) / (_726 + 1.0);
        float _3355 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _741 = ((((1.0 - _732) * (_727 + 2.0)) * exp2(log2(isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * (_727 + 1.0))) + _732) * _695;
        float _742 = _663 * 0.5;
        float _743 = _673 * 0.5;
        float _744 = _683 * 0.5;
        float _745 = dot(vec3(_742, _743, _744), vec3(_742, _743, _744));
        float _750 = (_745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_745);
        float _758 = (dot(vec3(_287, _288, _289), vec3(_750 * _742, _750 * _743, _750 * _744)) + 1.0) * 0.5;
        float _3366 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _767 = sqrt(((_743 * _743) + (_742 * _742)) + (_744 * _744)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3377 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _769 = _768 * 2.0;
        float _773 = (1.0 - _768) / (_768 + 1.0);
        float _3388 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _783 = ((((1.0 - _774) * (_769 + 2.0)) * exp2(log2(isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))) * (_769 + 1.0))) + _774) * _696;
        float _784 = _664 * 0.5;
        float _785 = _674 * 0.5;
        float _786 = _684 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _800 = (dot(vec3(_287, _288, _289), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3399 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _809 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3410 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _811 = _810 * 2.0;
        float _815 = (1.0 - _810) / (_810 + 1.0);
        float _3421 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _825 = ((((1.0 - _816) * (_811 + 2.0)) * exp2(log2(isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * (_811 + 1.0))) + _816) * _697;
        _833 = _664;
        _835 = _663;
        _836 = _662;
        _837 = _674;
        _838 = _673;
        _839 = _672;
        _840 = _684;
        _841 = _683;
        _842 = _682;
        _843 = _697;
        _844 = _696;
        _845 = _695;
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0)));
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0)));
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
    }
    else
    {
        _833 = _834;
        _835 = _834;
        _836 = _834;
        _837 = _834;
        _838 = _834;
        _839 = _834;
        _840 = _834;
        _841 = _834;
        _842 = _834;
        _843 = _834;
        _844 = _834;
        _845 = _834;
        _846 = 0.0;
        _847 = 0.0;
        _848 = 0.0;
    }
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _874 = fma(_531, cbModelParam._m0[30u].z, fma(_527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _523));
        float _878 = fma(_531, cbModelParam._m0[31u].z, fma(_527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _523));
        float _882 = fma(_531, cbModelParam._m0[32u].z, fma(_527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _523));
        float _905 = _523 + _287;
        float _906 = _527 + _288;
        float _907 = _531 + _289;
        float _917 = fma(_907, cbModelParam._m0[30u].z, fma(_906, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _905)) - _874;
        float _918 = fma(_907, cbModelParam._m0[31u].z, fma(_906, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _905)) - _878;
        float _919 = fma(_907, cbModelParam._m0[32u].z, fma(_906, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _905)) - _882;
        float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
        float _936 = ((_923 * _917) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_874 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_923 * _918) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_878 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_923 * _919) / cbModelParam._m0[35u].z) + ((((((_882 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        float _973 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_940.x + (-0.5));
        float _975 = _973 * (_940.y + (-0.5));
        float _976 = _973 * (_940.z + (-0.5));
        float _983 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_947.x + (-0.5));
        float _985 = _983 * (_947.y + (-0.5));
        float _986 = _983 * (_947.z + (-0.5));
        float _993 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_954.x + (-0.5));
        float _995 = _993 * (_954.y + (-0.5));
        float _996 = _993 * (_954.z + (-0.5));
        float _1003 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_961.x + (-0.5));
        float _1005 = _1003 * (_961.y + (-0.5));
        float _1006 = _1003 * (_961.z + (-0.5));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = _974 * 0.5;
        float _1011 = _984 * 0.5;
        float _1012 = _994 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_287, _288, _289), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3462 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3473 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3484 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * (_1037 + 1.0))) + _1042) * _1007;
        float _1052 = _975 * 0.5;
        float _1053 = _985 * 0.5;
        float _1054 = _995 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_287, _288, _289), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3495 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3506 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3517 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_1079 + 1.0))) + _1084) * _1008;
        float _1094 = _976 * 0.5;
        float _1095 = _986 * 0.5;
        float _1096 = _996 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_287, _288, _289), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3550 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_1121 + 1.0))) + _1126) * _1009;
        _1143 = _976;
        _1144 = _975;
        _1145 = _974;
        _1146 = _986;
        _1147 = _985;
        _1148 = _984;
        _1149 = _996;
        _1150 = _995;
        _1151 = _994;
        _1152 = _1009;
        _1153 = _1008;
        _1154 = _1007;
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1156 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
    }
    else
    {
        _1143 = _834;
        _1144 = _834;
        _1145 = _834;
        _1146 = _834;
        _1147 = _834;
        _1148 = _834;
        _1149 = _834;
        _1150 = _834;
        _1151 = _834;
        _1152 = _834;
        _1153 = _834;
        _1154 = _834;
        _1155 = 0.0;
        _1156 = 0.0;
        _1157 = 0.0;
    }
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _846)) + _846;
    float _1168 = (cbModelParam._m0[1u].x * (_1156 - _847)) + _847;
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _848)) + _848;
    float _1190 = fma(_1169, cbSceneParam._m0[89u].z, fma(_1168, cbSceneParam._m0[89u].y, _1167 * cbSceneParam._m0[89u].x));
    float _1193 = fma(_1169, cbSceneParam._m0[90u].z, fma(_1168, cbSceneParam._m0[90u].y, _1167 * cbSceneParam._m0[90u].x));
    float _1196 = fma(_1169, cbSceneParam._m0[91u].z, fma(_1168, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1167));
    float _1211 = _467 * 0.5;
    float _1212 = _468 * 0.5;
    float _1213 = _469 * 0.5;
    float _1214 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1217 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1144, _1147, _1150, _1153));
    float _1220 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1254;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1227 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_833, _837, _840, _843));
        float _1231 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_835, _838, _841, _844));
        float _1235 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_836, _839, _842, _845));
        float _1242 = dot(vec4(cbModelParam._m0[39u]), vec4(_1211, _1212, _1213, 1.0));
        _1254 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1242) ? 0.0 : (isnan(0.0) ? _1242 : max(0.0, _1242))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1254 = 1.0;
    }
    float _1265;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1256 = dot(vec4(cbModelParam._m0[40u]), vec4(_1211, _1212, _1213, 1.0));
        _1265 = dot(vec3(isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)), isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)), isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1265 = 1.0;
    }
    float _1269 = (_1265 * cbModelParam._m0[1u].x) + (_1254 * (1.0 - cbModelParam._m0[1u].x));
    float _1279 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _291);
    float _1280 = isnan(_1279) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1279 : min(cbModelParam._m0[25u].z, _1279));
    float _1362;
    float _1364;
    float _1366;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1329 = fma(_531, cbModelParam._m0[13u].z, fma(_527, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _523)) + cbModelParam._m0[13u].w;
        float _1333 = fma(_531, cbModelParam._m0[14u].z, fma(_527, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _523)) + cbModelParam._m0[14u].w;
        float _1337 = fma(_531, cbModelParam._m0[15u].z, fma(_527, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _523)) + cbModelParam._m0[15u].w;
        float _1340 = fma(_469, cbModelParam._m0[13u].z, fma(_468, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _467));
        float _1343 = fma(_469, cbModelParam._m0[14u].z, fma(_468, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _467));
        float _1346 = fma(_469, cbModelParam._m0[15u].z, fma(_468, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _467));
        float _1374;
        if (_1340 > 0.0)
        {
            _1374 = abs((1.0 - _1329) / _1340);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1329 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1374 = frontier_phi_14_12_ladder;
        }
        float _1603;
        if (_1343 > 0.0)
        {
            _1603 = abs((1.0 - _1333) / _1343);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1333 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1603 = frontier_phi_23_19_ladder;
        }
        float _1860;
        if (_1346 > 0.0)
        {
            _1860 = abs((1.0 - _1337) / _1346);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1337 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1860 = frontier_phi_35_30_ladder;
        }
        float _1862 = isnan(_1603) ? _1374 : (isnan(_1374) ? _1603 : min(_1374, _1603));
        float _1863 = isnan(_1860) ? _1862 : (isnan(_1862) ? _1860 : min(_1862, _1860));
        float _1867 = (_1863 * _1340) + _1329;
        float _1868 = (_1863 * _1343) + _1333;
        float _1869 = (_1863 * _1346) + _1337;
        float _1870 = _1863 * 9.9999997473787516355514526367188e-05;
        float _1872 = (-1.0) - _1870;
        float _1874 = _1870 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1869 > _1874) || ((_1869 < _1872) || ((_1868 > _1874) || ((_1868 < _1872) || ((_1867 < _1872) || (_1867 > _1874))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1997 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1869, cbModelParam._m0[9u].z, fma(_1868, cbModelParam._m0[9u].y, _1867 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1869, cbModelParam._m0[10u].z, fma(_1868, cbModelParam._m0[10u].y, _1867 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1869, cbModelParam._m0[11u].z, fma(_1868, cbModelParam._m0[11u].y, _1867 * cbModelParam._m0[11u].x))), _1280);
            frontier_phi_13_35_ladder = _1997.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1997.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1997.x * cbModelParam._m0[1u].y;
        }
        _1362 = frontier_phi_13_35_ladder_2;
        _1364 = frontier_phi_13_35_ladder_1;
        _1366 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1350 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_467, _468, _469), _1280);
        _1362 = _1350.x * cbModelParam._m0[1u].y;
        _1364 = _1350.y * cbModelParam._m0[1u].y;
        _1366 = _1350.z * cbModelParam._m0[1u].y;
    }
    float _1370 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _291);
    float _1371 = isnan(_1370) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1370 : min(cbModelParam._m0[25u].w, _1370));
    float _1464;
    float _1466;
    float _1468;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1428 = fma(_531, cbModelParam._m0[21u].z, fma(_527, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _523)) + cbModelParam._m0[21u].w;
        float _1432 = fma(_531, cbModelParam._m0[22u].z, fma(_527, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _523)) + cbModelParam._m0[22u].w;
        float _1436 = fma(_531, cbModelParam._m0[23u].z, fma(_527, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _523)) + cbModelParam._m0[23u].w;
        float _1439 = fma(_469, cbModelParam._m0[21u].z, fma(_468, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _467));
        float _1442 = fma(_469, cbModelParam._m0[22u].z, fma(_468, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _467));
        float _1445 = fma(_469, cbModelParam._m0[23u].z, fma(_468, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _467));
        float _1608;
        if (_1439 > 0.0)
        {
            _1608 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1608 = frontier_phi_25_21_ladder;
        }
        float _1887;
        if (_1442 > 0.0)
        {
            _1887 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1887 = frontier_phi_37_32_ladder;
        }
        float _2100;
        if (_1445 > 0.0)
        {
            _2100 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2100 = frontier_phi_46_43_ladder;
        }
        float _2102 = isnan(_1887) ? _1608 : (isnan(_1608) ? _1887 : min(_1608, _1887));
        float _2103 = isnan(_2100) ? _2102 : (isnan(_2102) ? _2100 : min(_2102, _2100));
        float _2107 = (_2103 * _1439) + _1428;
        float _2108 = (_2103 * _1442) + _1432;
        float _2109 = (_2103 * _1445) + _1436;
        float _2110 = _2103 * 9.9999997473787516355514526367188e-05;
        float _2111 = (-1.0) - _2110;
        float _2113 = _2110 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2109 > _2113) || ((_2109 < _2111) || ((_2108 > _2113) || ((_2108 < _2111) || ((_2107 < _2111) || (_2107 > _2113))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2109, cbModelParam._m0[17u].z, fma(_2108, cbModelParam._m0[17u].y, _2107 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2109, cbModelParam._m0[18u].z, fma(_2108, cbModelParam._m0[18u].y, _2107 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2109, cbModelParam._m0[19u].z, fma(_2108, cbModelParam._m0[19u].y, _2107 * cbModelParam._m0[19u].x))), _1371);
            frontier_phi_22_46_ladder = _2310.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2310.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2310.x * cbModelParam._m0[1u].z;
        }
        _1464 = frontier_phi_22_46_ladder_2;
        _1466 = frontier_phi_22_46_ladder_1;
        _1468 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1448 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_467, _468, _469), _1371);
        _1464 = _1448.x * cbModelParam._m0[1u].z;
        _1466 = _1448.y * cbModelParam._m0[1u].z;
        _1468 = _1448.z * cbModelParam._m0[1u].z;
    }
    float _1481 = (((_494 * _444) + _495) * _459) * ((cbModelParam._m0[1u].w * (_1464 - _1362)) + _1362);
    float _1483 = (((_494 * _446) + _495) * _459) * ((cbModelParam._m0[1u].w * (_1466 - _1364)) + _1364);
    float _1485 = (((_494 * _447) + _495) * _459) * ((cbModelParam._m0[1u].w * (_1468 - _1366)) + _1366);
    float _1488 = fma(_1485, cbSceneParam._m0[89u].z, fma(_1483, cbSceneParam._m0[89u].y, _1481 * cbSceneParam._m0[89u].x));
    float _1491 = fma(_1485, cbSceneParam._m0[90u].z, fma(_1483, cbSceneParam._m0[90u].y, _1481 * cbSceneParam._m0[90u].x));
    float _1494 = fma(_1485, cbSceneParam._m0[91u].z, fma(_1483, cbSceneParam._m0[91u].y, _1481 * cbSceneParam._m0[91u].x));
    vec4 _1502 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_377, _378));
    float _1504 = _1502.w;
    float _1516 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1504);
    float _1517 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1504);
    float _1518 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1504);
    uvec4 _1522 = floatBitsToUint(cbInstanceData._m0[_418 + 5u]);
    uint _1524 = _1522.x * 14u;
    uint _1525 = _1524 + 13u;
    float _1532 = _459 + (-1.0);
    float _1537 = (cbLight._m0[_1525].x * _1532) + 1.0;
    float _1538 = (cbLight._m0[_1525].y * _1532) + 1.0;
    float _1539 = (cbLight._m0[_1525].z * _1532) + 1.0;
    float _1540 = (cbLight._m0[_1525].w * _1532) + 1.0;
    uint _1541 = _1524 + 5u;
    float _1547 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
    uint _1551 = _1524 + 4u;
    float _1561 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
    uint _1565 = _1524 | 1u;
    float _1576 = dot(vec3(cbLight._m0[_1524].xyz), vec3(_287, _288, _289));
    float _1579 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_287, _288, _289));
    float _3686 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
    float _3697 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
    float _1584 = (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * 0.3183098733425140380859375;
    float _1586 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.3183098733425140380859375;
    float _1593 = ((cbLight._m0[_1541].x * _1547) * _1586) + (((cbLight._m0[_1551].x * _1516) * _1561) * _1584);
    float _1594 = ((_1547 * cbLight._m0[_1541].y) * _1586) + (((cbLight._m0[_1551].y * _1517) * _1561) * _1584);
    float _1595 = ((_1547 * cbLight._m0[_1541].z) * _1586) + (((cbLight._m0[_1551].z * _1518) * _1561) * _1584);
    uvec4 _1600 = floatBitsToUint(cbLight._m0[_1524 + 12u]);
    bool _1602 = _1600.x == 0u;
    float _1613;
    float _1615;
    float _1617;
    if (_1602)
    {
        _1613 = _1593;
        _1615 = _1594;
        _1617 = _1595;
    }
    else
    {
        uint _1621 = _1524 + 6u;
        float _1637 = (dot(vec3(cbLight._m0[_1524 + 2u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1638 = _1637 * _1637;
        float _3708 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1640 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
        _1613 = (((cbLight._m0[_1621].x * 0.3183098733425140380859375) * _1639) * _1640) + _1593;
        _1615 = (((cbLight._m0[_1621].y * 0.3183098733425140380859375) * _1639) * _1640) + _1594;
        _1617 = (((cbLight._m0[_1621].z * 0.3183098733425140380859375) * _1639) * _1640) + _1595;
    }
    bool _1620 = _1600.y == 0u;
    float _1658;
    float _1660;
    float _1662;
    if (_1620)
    {
        _1658 = _1613;
        _1660 = _1615;
        _1662 = _1617;
    }
    else
    {
        uint _1831 = _1524 + 7u;
        float _1847 = (dot(vec3(cbLight._m0[_1524 + 3u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1848 = _1847 * _1847;
        float _3724 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1850 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
        _1658 = (((cbLight._m0[_1831].x * 0.3183098733425140380859375) * _1849) * _1850) + _1613;
        _1660 = (((cbLight._m0[_1831].y * 0.3183098733425140380859375) * _1849) * _1850) + _1615;
        _1662 = (((cbLight._m0[_1831].z * 0.3183098733425140380859375) * _1849) * _1850) + _1617;
    }
    uint _1665 = _1524 + 8u;
    float _1678 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1524].w)) * _291) * 0.949999988079071044921875);
    float _1679 = _1678 * _1678;
    float _1680 = cbLight._m0[_1524].x + _369;
    float _1681 = cbLight._m0[_1524].y + _370;
    float _1682 = cbLight._m0[_1524].z + _371;
    float _1686 = inversesqrt(dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682)));
    float _1687 = _1686 * _1680;
    float _1688 = _1686 * _1681;
    float _1689 = _1686 * _1682;
    float _1690 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1524].xyz));
    float _3740 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1693 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _1694 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _1695 = dot(vec3(_287, _288, _289), vec3(_1687, _1688, _1689));
    float _3762 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1698 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _1699 = dot(vec3(cbLight._m0[_1524].xyz), vec3(_1687, _1688, _1689));
    float _3773 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1703 = _1679 * _1679;
    float _1707 = ((_1698 * _1698) * (_1703 + (-1.0))) + 1.0;
    float _1715 = exp2(log2(1.0 - (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * 5.0);
    float _1716 = 0.959999978542327880859375 - _441;
    float _1718 = 0.959999978542327880859375 - _442;
    float _1719 = 0.959999978542327880859375 - _443;
    float _1726 = 1.0 - _1679;
    float _1737 = (0.5 / (((_1694 * ((_1693 * _1726) + _1679)) + 9.9999999392252902907785028219223e-09) + (((_1694 * _1726) + _1679) * _1693))) * _1693;
    float _3784 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1739 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1703 / ((_1707 * _1707) * 3.141590118408203125));
    uint _1753 = _1524 + 9u;
    float _1764 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1565].w)) * _291) * 0.949999988079071044921875);
    float _1765 = _1764 * _1764;
    float _1766 = cbLight._m0[_1565].x + _369;
    float _1767 = cbLight._m0[_1565].y + _370;
    float _1768 = cbLight._m0[_1565].z + _371;
    float _1772 = inversesqrt(dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768)));
    float _1773 = _1772 * _1766;
    float _1774 = _1772 * _1767;
    float _1775 = _1772 * _1768;
    float _1776 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1565].xyz));
    float _3795 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _1780 = dot(vec3(_287, _288, _289), vec3(_1773, _1774, _1775));
    float _3806 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _1784 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_1773, _1774, _1775));
    float _3817 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1788 = _1765 * _1765;
    float _1792 = ((_1783 * _1783) * (_1788 + (-1.0))) + 1.0;
    float _1799 = exp2(log2(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * 5.0);
    float _1806 = 1.0 - _1765;
    float _1816 = (0.5 / (((_1694 * ((_1779 * _1806) + _1765)) + 9.9999999392252902907785028219223e-09) + (((_1694 * _1806) + _1765) * _1779))) * _1779;
    float _3828 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1818 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1788 / ((_1792 * _1792) * 3.141590118408203125));
    float _1828 = (((((_1799 * _1716) + _444) * cbLight._m0[_1753].x) * _1818) * _1547) + ((((cbLight._m0[_1665].x * _1516) * ((_1715 * _1716) + _444)) * _1739) * _1561);
    float _1829 = (((((_1799 * _1718) + _446) * cbLight._m0[_1753].y) * _1818) * _1547) + ((((cbLight._m0[_1665].y * _1517) * ((_1715 * _1718) + _446)) * _1739) * _1561);
    float _1830 = (((((_1799 * _1719) + _447) * cbLight._m0[_1753].z) * _1818) * _1547) + ((((cbLight._m0[_1665].z * _1518) * ((_1715 * _1719) + _447)) * _1739) * _1561);
    float _1892;
    float _1894;
    float _1896;
    if (_1602)
    {
        _1892 = _1828;
        _1894 = _1829;
        _1896 = _1830;
    }
    else
    {
        uint _1898 = _1524 + 2u;
        uint _1902 = _1524 + 10u;
        float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _291) * 0.949999988079071044921875);
        float _1917 = _1916 * _1916;
        float _1918 = cbLight._m0[_1898].x + _369;
        float _1919 = cbLight._m0[_1898].y + _370;
        float _1920 = cbLight._m0[_1898].z + _371;
        float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
        float _1925 = _1924 * _1918;
        float _1926 = _1924 * _1919;
        float _1927 = _1924 * _1920;
        float _1928 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1898].xyz));
        float _3839 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1931 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1932 = dot(vec3(_287, _288, _289), vec3(_1925, _1926, _1927));
        float _3850 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1935 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1936 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_1925, _1926, _1927));
        float _3861 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1940 = _1917 * _1917;
        float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
        float _1951 = exp2(log2(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * 5.0);
        float _1958 = 1.0 - _1917;
        float _1968 = (0.5 / (((_1694 * ((_1931 * _1958) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1694 * _1958) + _1917) * _1931))) * _1931;
        float _3872 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1970 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
        float _1971 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
        _1892 = (((((_1951 * _1716) + _444) * cbLight._m0[_1902].x) * _1970) * _1971) + _1828;
        _1894 = (((((_1951 * _1718) + _446) * cbLight._m0[_1902].y) * _1970) * _1971) + _1829;
        _1896 = (((((_1951 * _1719) + _447) * cbLight._m0[_1902].z) * _1970) * _1971) + _1830;
    }
    float _2006;
    float _2008;
    float _2010;
    if (_1620)
    {
        _2006 = _1892;
        _2008 = _1894;
        _2010 = _1896;
    }
    else
    {
        uint _2017 = _1524 + 3u;
        uint _2021 = _1524 + 11u;
        float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _291) * 0.949999988079071044921875);
        float _2036 = _2035 * _2035;
        float _2037 = cbLight._m0[_2017].x + _369;
        float _2038 = cbLight._m0[_2017].y + _370;
        float _2039 = cbLight._m0[_2017].z + _371;
        float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
        float _2044 = _2043 * _2037;
        float _2045 = _2043 * _2038;
        float _2046 = _2043 * _2039;
        float _2047 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_2017].xyz));
        float _3888 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _2051 = dot(vec3(_287, _288, _289), vec3(_2044, _2045, _2046));
        float _3899 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _2055 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2044, _2045, _2046));
        float _3910 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2059 = _2036 * _2036;
        float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
        float _2070 = exp2(log2(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * 5.0);
        float _2077 = 1.0 - _2036;
        float _2087 = (0.5 / (((_1694 * ((_2050 * _2077) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_1694 * _2077) + _2036) * _2050))) * _2050;
        float _3921 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2089 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
        float _2090 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
        _2006 = (((((_2070 * _1716) + _444) * cbLight._m0[_2021].x) * _2089) * _2090) + _1892;
        _2008 = (((((_2070 * _1718) + _446) * cbLight._m0[_2021].y) * _2089) * _2090) + _1894;
        _2010 = (((((_2070 * _1719) + _447) * cbLight._m0[_2021].z) * _2089) * _2090) + _1896;
    }
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    if (_1522.y == 0u)
    {
        float _2165 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2165;
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2165;
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2165;
        uvec4 _2180 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2181 = _2180.x;
        uint _2192 = uint((float(_2180.y) * floor(float(uint(cbSceneParam._m0[85u].y * _378) / _2181))) + floor(float(uint(cbSceneParam._m0[85u].x * _377) / _2181)));
        float _2202 = (log2(_2168 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2203 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        uint _2206 = uint(isnan(14.0) ? _2203 : (isnan(_2203) ? 14.0 : min(_2203, 14.0)));
        uvec4 _2211 = texelFetch(g_lightClusterGridBuffer, int(((_2206 << 2u) + (_2192 << 6u)) >> 2u));
        uint _2212 = _2211.x;
        uint _2213 = _2180.z;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        if (((((1u << ((_2213 >> 4u) & 15u)) + 4294967295u) & _2212) == 0u) || ((_2213 & 240u) == 0u))
        {
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
        }
        else
        {
            float _2316;
            float _2318;
            float _2320;
            float _2322;
            float _2324;
            float _2326;
            float _2460 = 0.0;
            float _2461 = 0.0;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            float _2465 = 0.0;
            uint _2466 = 0u;
            uint _2475;
            bool _2476;
            for (;;)
            {
                _2475 = texelFetch(g_lightClassification, int((((_2206 << 5u) + (_2192 << 9u)) + (_2466 << 2u)) >> 2u)).x;
                _2476 = _2475 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2476)
                {
                    frontier_phi_61_pred = _2460;
                    frontier_phi_61_pred_1 = _2465;
                    frontier_phi_61_pred_2 = _2464;
                    frontier_phi_61_pred_3 = _2463;
                    frontier_phi_61_pred_4 = _2462;
                    frontier_phi_61_pred_5 = _2461;
                }
                else
                {
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    uint _2590;
                    _2584 = _2460;
                    _2585 = _2461;
                    _2586 = _2462;
                    _2587 = _2463;
                    _2588 = _2464;
                    _2589 = _2465;
                    _2590 = _2475;
                    float _2516;
                    float _2517;
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    for (;;)
                    {
                        uint _2594 = uint(findLSB(_2590)) + (_2466 << 5u);
                        uint _2591 = (_2590 + 4294967295u) & _2590;
                        uint _2596 = _2594 * 48u;
                        vec4 _2610 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2596)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 3u)).x));
                        uint _2616 = (_2594 * 48u) + 4u;
                        vec4 _2629 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2616)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 3u)).x));
                        uint _2635 = (_2594 * 48u) + 8u;
                        vec3 _2646 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2635)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 2u)).x));
                        float _2650 = _2610.x - _2166;
                        float _2651 = _2610.y - _2167;
                        float _2652 = _2610.z - _2168;
                        float _2653 = dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652));
                        float _2656 = inversesqrt(_2653);
                        float _2657 = _2656 * _2650;
                        float _2658 = _2656 * _2651;
                        float _2659 = _2656 * _2652;
                        float _2660 = dot(vec3(_399, _402, _405), vec3(_2657, _2658, _2659));
                        float _2665 = 1.0 - (_2653 * _2610.w);
                        float _3947 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
                        float _2666 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
                        float _2667 = sqrt(_2653) * _2629.w;
                        float _2670 = 1.39999997615814208984375 / (_2667 + 1.39999997615814208984375);
                        float _2671 = _2670 * _2670;
                        float _2674 = ((1.0 - _2671) * _2660) + _2671;
                        float _2677 = _2667 * _2667;
                        float _2681 = ((isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0))) * _2666) / ((_2677 * 0.699999988079071044921875) + 1.0);
                        float _2685 = (-0.0) - _2166;
                        float _2686 = (-0.0) - _2167;
                        float _2687 = (-0.0) - _2168;
                        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
                        float _2692 = _2691 * _2685;
                        float _2693 = _2691 * _2686;
                        float _2694 = _2691 * _2687;
                        float _2702 = exp2(log2(1.0 / ((_2677 * 3.5) + 5.0)) * 0.25);
                        float _2703 = 1.0 - _475;
                        float _2710 = sqrt(1.0 - ((1.0 - (_2703 * _2703)) * (1.0 - (_2702 * _2702))));
                        float _2711 = _2710 * _2710;
                        float _2712 = _2711 * _2711;
                        float _2713 = _2692 + _2657;
                        float _2714 = _2693 + _2658;
                        float _2715 = _2694 + _2659;
                        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
                        float _2723 = dot(vec3(_399, _402, _405), vec3(_2692, _2693, _2694));
                        float _3963 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2726 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                        float _2727 = dot(vec3(_399, _402, _405), vec3(_2719 * _2713, _2719 * _2714, _2719 * _2715));
                        float _3974 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2730 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                        float _2734 = ((_2730 * _2730) * (_2712 + (-1.0))) + 1.0;
                        float _2735 = _2670 * _2711;
                        float _2736 = _2735 * _2735;
                        float _2739 = ((1.0 - _2736) * _2660) + _2736;
                        float _3985 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2740 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                        float _2741 = 1.0 - _2711;
                        float _2751 = (0.5 / (((_2740 * ((_2726 * _2741) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _2741) + _2711) * _2726))) * _2740;
                        float _3996 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2762 = (((_2712 * 3.1415927410125732421875) * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) / ((_2734 * _2734) * ((_2677 * 2.1991131305694580078125) + 3.141590118408203125))) * _2666;
                        _2519 = (_2681 * _2629.x) + _2587;
                        _2520 = (_2681 * _2629.y) + _2588;
                        _2521 = (_2681 * _2629.z) + _2589;
                        _2516 = (_2762 * _2646.x) + _2584;
                        _2517 = (_2762 * _2646.y) + _2585;
                        _2518 = (_2762 * _2646.z) + _2586;
                        if (_2591 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2584 = _2516;
                            _2585 = _2517;
                            _2586 = _2518;
                            _2587 = _2519;
                            _2588 = _2520;
                            _2589 = _2521;
                            _2590 = _2591;
                        }
                    }
                    frontier_phi_61_pred = _2516;
                    frontier_phi_61_pred_1 = _2521;
                    frontier_phi_61_pred_2 = _2520;
                    frontier_phi_61_pred_3 = _2519;
                    frontier_phi_61_pred_4 = _2518;
                    frontier_phi_61_pred_5 = _2517;
                }
                _2316 = frontier_phi_61_pred;
                _2326 = frontier_phi_61_pred_1;
                _2324 = frontier_phi_61_pred_2;
                _2322 = frontier_phi_61_pred_3;
                _2320 = frontier_phi_61_pred_4;
                _2318 = frontier_phi_61_pred_5;
                uint _2467 = _2466 + 1u;
                if (_2467 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2460 = _2316;
                    _2461 = _2318;
                    _2462 = _2320;
                    _2463 = _2322;
                    _2464 = _2324;
                    _2465 = _2326;
                    _2466 = _2467;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
        }
        uvec4 _2329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2330 = _2329.z;
        uint _2332 = (_2330 >> 8u) & 15u;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        if (((4294967295u << _2332) & _2212) == 0u)
        {
            _2428 = _2315;
            _2430 = _2317;
            _2432 = _2319;
            _2434 = _2321;
            _2436 = _2323;
            _2438 = _2325;
        }
        else
        {
            float _2453 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
            float _2454 = _2453 * _2166;
            float _2455 = _2453 * _2167;
            float _2456 = _2453 * _2168;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2332 < ((_2330 >> 12u) & 15u))
            {
                float _2429;
                float _2431;
                float _2433;
                float _2435;
                float _2437;
                float _2439;
                float _2567 = _2315;
                float _2568 = _2317;
                float _2569 = _2319;
                float _2570 = _2321;
                float _2571 = _2323;
                float _2572 = _2325;
                uint _2573 = _2332;
                uint _2582;
                bool _2583;
                for (;;)
                {
                    _2582 = texelFetch(g_lightClassification, int((((_2206 << 5u) + (_2192 << 9u)) + (_2573 << 2u)) >> 2u)).x;
                    _2583 = _2582 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2583)
                    {
                        frontier_phi_67_pred = _2570;
                        frontier_phi_67_pred_1 = _2571;
                        frontier_phi_67_pred_2 = _2572;
                        frontier_phi_67_pred_3 = _2569;
                        frontier_phi_67_pred_4 = _2568;
                        frontier_phi_67_pred_5 = _2567;
                    }
                    else
                    {
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _2780 = _2567;
                        float _2781 = _2568;
                        float _2782 = _2569;
                        float _2783 = _2570;
                        float _2784 = _2571;
                        float _2785 = _2572;
                        uint _2786 = _2582;
                        uint _2787;
                        vec4 _2812;
                        float _2813;
                        vec4 _2828;
                        vec3 _2840;
                        vec4 _2856;
                        vec4 _2872;
                        float _2919;
                        bool _2920;
                        for (;;)
                        {
                            uint _2797 = ((_2573 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2786));
                            _2787 = (_2786 + 4294967295u) & _2786;
                            uint _2799 = _2797 * 40u;
                            _2812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 3u)).x));
                            _2813 = _2812.w;
                            uint _2815 = (_2797 * 40u) + 4u;
                            _2828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 3u)).x));
                            uint _2830 = (_2797 * 40u) + 8u;
                            _2840 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x));
                            uint _2843 = (_2797 * 40u) + 16u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2859 = (_2797 * 40u) + 20u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2875 = (_2797 * 40u) + 24u;
                            vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2894 = (_2797 * 40u) + 28u;
                            vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            _2919 = fma(_2168, _2907.z, fma(_2167, _2907.y, _2907.x * _2166)) + _2907.w;
                            _2920 = !((fma(_2168, _2888.z, fma(_2167, _2888.y, _2888.x * _2166)) + _2888.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2920)
                            {
                                float _2947 = _2812.x - _2166;
                                float _2948 = _2812.y - _2167;
                                float _2949 = _2812.z - _2168;
                                float _2950 = dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949));
                                float _2953 = inversesqrt(_2950);
                                float _2954 = _2953 * _2947;
                                float _2955 = _2953 * _2948;
                                float _2956 = _2953 * _2949;
                                float _2960 = 1.0 - (_2950 / (_2813 * _2813));
                                float _4007 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2961 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                                float _2965 = sqrt(_2950) * _2828.w;
                                float _2967 = 1.39999997615814208984375 / (_2965 + 1.39999997615814208984375);
                                float _2968 = _2967 * _2967;
                                float _2971 = ((1.0 - _2968) * dot(vec3(_2954, _2955, _2956), vec3(_399, _402, _405))) + _2968;
                                float _2974 = _2965 * _2965;
                                float _2978 = (fma(_2168, _2856.z, fma(_2167, _2856.y, _2856.x * _2166)) + _2856.w) / _2919;
                                float _2979 = (fma(_2168, _2872.z, fma(_2167, _2872.y, _2872.x * _2166)) + _2872.w) / _2919;
                                float _2983 = 1.0 - dot(vec2(_2978, _2979), vec2(_2978, _2979));
                                float _4023 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                                float _2985 = _2984 * (((isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))) * _2961) / ((_2974 * 0.699999988079071044921875) + 1.0));
                                float _2997 = exp2(log2(1.0 / ((_2974 * 3.5) + 5.0)) * 0.25);
                                float _2998 = 1.0 - _475;
                                float _3005 = sqrt(1.0 - ((1.0 - (_2998 * _2998)) * (1.0 - (_2997 * _2997))));
                                float _3006 = _3005 * _3005;
                                float _3007 = _3006 * _3006;
                                float _3008 = _2954 - _2454;
                                float _3009 = _2955 - _2455;
                                float _3010 = _2956 - _2456;
                                float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                                float _3018 = dot(vec3(_399, _402, _405), vec3((-0.0) - _2454, (-0.0) - _2455, (-0.0) - _2456));
                                float _4034 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3021 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                                float _3022 = dot(vec3(_399, _402, _405), vec3(_3014 * _3008, _3014 * _3009, _3014 * _3010));
                                float _4045 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3025 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                                float _3029 = ((_3025 * _3025) * (_3007 + (-1.0))) + 1.0;
                                float _3030 = _2967 * _3006;
                                float _3031 = _3030 * _3030;
                                float _3037 = ((1.0 - _3031) * dot(vec3(_399, _402, _405), vec3(_2954, _2955, _2956))) + _3031;
                                float _4056 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3038 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                                float _3039 = 1.0 - _3006;
                                float _3049 = (0.5 / (((_3038 * ((_3021 * _3039) + _3006)) + 9.9999999392252902907785028219223e-09) + (((_3038 * _3039) + _3006) * _3021))) * _3038;
                                float _4067 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3059 = (_2984 * _2961) * (((_3007 * 3.1415927410125732421875) * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) / ((_3029 * _3029) * ((_2974 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3059 * _2840.x;
                                frontier_phi_73_pred_1 = _3059 * _2840.y;
                                frontier_phi_73_pred_2 = _2985 * _2828.z;
                                frontier_phi_73_pred_3 = _2985 * _2828.y;
                                frontier_phi_73_pred_4 = _2985 * _2828.x;
                                frontier_phi_73_pred_5 = _3059 * _2840.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3063 = frontier_phi_73_pred;
                            _3064 = frontier_phi_73_pred_1;
                            _3068 = frontier_phi_73_pred_2;
                            _3067 = frontier_phi_73_pred_3;
                            _3066 = frontier_phi_73_pred_4;
                            _3065 = frontier_phi_73_pred_5;
                            _2770 = _3066 + _2783;
                            _2771 = _3067 + _2784;
                            _2772 = _3068 + _2785;
                            _2767 = _3063 + _2780;
                            _2768 = _3064 + _2781;
                            _2769 = _3065 + _2782;
                            if (_2787 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2787;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2770;
                        frontier_phi_67_pred_1 = _2771;
                        frontier_phi_67_pred_2 = _2772;
                        frontier_phi_67_pred_3 = _2769;
                        frontier_phi_67_pred_4 = _2768;
                        frontier_phi_67_pred_5 = _2767;
                    }
                    _2435 = frontier_phi_67_pred;
                    _2437 = frontier_phi_67_pred_1;
                    _2439 = frontier_phi_67_pred_2;
                    _2433 = frontier_phi_67_pred_3;
                    _2431 = frontier_phi_67_pred_4;
                    _2429 = frontier_phi_67_pred_5;
                    uint _2574 = _2573 + 1u;
                    if (_2574 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2567 = _2429;
                        _2568 = _2431;
                        _2569 = _2433;
                        _2570 = _2435;
                        _2571 = _2437;
                        _2572 = _2439;
                        _2573 = _2574;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2437;
                frontier_phi_55_56_ladder_1 = _2439;
                frontier_phi_55_56_ladder_2 = _2435;
                frontier_phi_55_56_ladder_3 = _2433;
                frontier_phi_55_56_ladder_4 = _2431;
                frontier_phi_55_56_ladder_5 = _2429;
            }
            else
            {
                frontier_phi_55_56_ladder = _2323;
                frontier_phi_55_56_ladder_1 = _2325;
                frontier_phi_55_56_ladder_2 = _2321;
                frontier_phi_55_56_ladder_3 = _2319;
                frontier_phi_55_56_ladder_4 = _2317;
                frontier_phi_55_56_ladder_5 = _2315;
            }
            _2428 = frontier_phi_55_56_ladder_5;
            _2430 = frontier_phi_55_56_ladder_4;
            _2432 = frontier_phi_55_56_ladder_3;
            _2434 = frontier_phi_55_56_ladder_2;
            _2436 = frontier_phi_55_56_ladder;
            _2438 = frontier_phi_55_56_ladder_1;
        }
        float _2443 = isnan(1.0) ? _459 : (isnan(_459) ? 1.0 : min(_459, 1.0));
        _2225 = (_2443 * _2434) + _1658;
        _2227 = (_2443 * _2436) + _1660;
        _2229 = (_2443 * _2438) + _1662;
        _2231 = ((_2428 * _444) * _2443) + _2006;
        _2233 = ((_2430 * _446) * _2443) + _2008;
        _2235 = ((_2432 * _447) * _2443) + _2010;
    }
    else
    {
        _2225 = _1658;
        _2227 = _1660;
        _2229 = _1662;
        _2231 = _2006;
        _2233 = _2008;
        _2235 = _2010;
    }
    float _4083 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4094 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4105 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4116 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _2260 = cbInstanceData._m0[_418 + 6u].w * (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)));
    float _2265 = _377 / cbSceneParam._m0[86u].x;
    float _2266 = _378 / cbSceneParam._m0[86u].y;
    vec4 _2280 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2265, _2266, (log2((isnan(cbSceneParam._m0[77u].w) ? _311 : (isnan(_311) ? cbSceneParam._m0[77u].w : min(_311, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2282 = _2280.x;
    float _2283 = _2280.y;
    float _2284 = _2280.z;
    float _2285 = _2280.w;
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    if (_311 > cbSceneParam._m0[78u].w)
    {
        float _2340 = isnan(_311) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _311 : min(cbSceneParam._m0[80u].w, _311));
        float _2341 = _2340 / _311;
        float _2352 = _2341 * _362;
        float _2353 = _363 * _2341;
        float _2354 = (-0.0) - _2353;
        float _2356 = _2341 * _364;
        float _2358 = (cbSceneParam._m0[77u].w * _2354) / _2340;
        float _2359 = _2358 + cbSceneParam._m0[79u].w;
        float _2360 = cbSceneParam._m0[79u].w - _2353;
        float _2366 = sqrt(((_2352 * _2352) + (_2353 * _2353)) + (_2356 * _2356));
        float _2369 = (1.0 - (cbSceneParam._m0[77u].w / _2340)) * _2366;
        float _2374 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2376 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2529;
        if (abs((_2354 - _2358) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2529 = ((((_2359 > 0.0) ? exp2(_2374 * _2359) : (2.0 - exp2(_2376 * _2359))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2369;
        }
        else
        {
            float _2489 = 1.0 / cbSceneParam._m0[80u].x;
            float _2490 = isnan(_2360) ? _2359 : (isnan(_2359) ? _2360 : max(_2359, _2360));
            float _2491 = isnan(_2360) ? _2359 : (isnan(_2359) ? _2360 : min(_2359, _2360));
            float _2500 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : min(_2490, 0.0));
            float _2501 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : min(_2491, 0.0));
            _2529 = ((abs(_2366 / _2354) * cbSceneParam._m0[80u].y) * ((((_2500 - _2501) * 2.0) - ((exp2(_2374 * (isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0)))) - exp2(_2374 * (isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0))))) * _2489)) - ((exp2(_2376 * _2500) - exp2(_2376 * _2501)) * _2489))) + (_2369 * cbSceneParam._m0[80u].z);
        }
        vec4 _2531 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2265, _2266, 1.0), 0.0);
        float _2540 = exp2((_2529 * (-1.44269502162933349609375)) * (1.0 - _2531.w));
        float _2541 = log2(_2540);
        float _2557 = log2(_2285);
        _2378 = (exp2(_2557 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2541 * cbSceneParam._m0[78u].x)) * _2531.x) / cbSceneParam._m0[78u].x)) + _2282;
        _2380 = (exp2(_2557 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2541 * cbSceneParam._m0[78u].y)) * _2531.y) / cbSceneParam._m0[78u].y)) + _2283;
        _2382 = (exp2(_2557 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2541 * cbSceneParam._m0[78u].z)) * _2531.z) / cbSceneParam._m0[78u].z)) + _2284;
        _2384 = _2540 * _2285;
    }
    else
    {
        _2378 = _2282;
        _2380 = _2283;
        _2382 = _2284;
        _2384 = _2285;
    }
    float _2396 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2397 = _2396 == 3.0;
    float _2398 = log2(_2384);
    float _2405 = exp2(_2398 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2225 + ((isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))) * _459))) + ((_2231 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _1269)) * cbPerFrame._m0[3u].x));
    float _2406 = exp2(_2398 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2227 + ((isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))) * _459))) + ((_2233 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _1269)) * cbPerFrame._m0[3u].x));
    float _2407 = exp2(_2398 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2229 + ((isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))) * _459))) + ((_2235 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _1269)) * cbPerFrame._m0[3u].x));
    float _2416 = (_2396 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2416 * (_2397 ? _2405 : (_2405 + (cbSceneParam._m0[72u].w * _2378)));
    SV_Target.y = _2416 * (_2397 ? _2406 : (_2406 + (cbSceneParam._m0[72u].w * _2380)));
    SV_Target.z = _2416 * (_2397 ? _2407 : (_2407 + (cbSceneParam._m0[72u].w * _2382)));
    SV_Target.w = _2260;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2260;
}


