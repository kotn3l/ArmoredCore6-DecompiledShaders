#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _879;
float _3296;
float _3297;
float _3298;
float _3299;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _229 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = (cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _229.x;
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _248 = _246.x;
    vec4 _260 = texture(sampler2D(M_AMSN_M0_M1_decal_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3308 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0))));
    float _280 = fma(_277, _195 * NORMAL.x, fma(_270, _202 * TANGENT.x, (_188 * _180) * _268));
    float _283 = fma(_277, _195 * NORMAL.y, fma(_270, _202 * TANGENT.y, (_188 * _181) * _268));
    float _286 = fma(_277, _195 * NORMAL.z, fma(_270, _202 * TANGENT.z, (_188 * _182) * _268));
    float _290 = inversesqrt(dot(vec3(_280, _283, _286), vec3(_280, _283, _286)));
    float _291 = _290 * _280;
    float _292 = _290 * _283;
    float _293 = _290 * _286;
    float _3319 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _294 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    float _3330 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _295 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    float _3341 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3352 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3363 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3374 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _299 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _315 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _356 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _366 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _356);
    float _367 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _356);
    float _368 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _356);
    float _372 = inversesqrt(dot(vec3(_366, _367, _368), vec3(_366, _367, _368)));
    float _373 = _366 * _372;
    float _374 = _367 * _372;
    float _375 = _368 * _372;
    vec4 _380 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _382 = _380.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _558 = sqrt(((_366 * _366) + (_367 * _367)) + (_368 * _368));
        float _564 = (cbMatDynParam._m0[5u].x * _558) + cbMatDynParam._m0[5u].y;
        float _3385 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
        float _565 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _569 = (cbMatDynParam._m0[5u].z * _558) + cbMatDynParam._m0[5u].w;
        float _3396 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) - _565)) + _565) < ((_382 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _394 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _395 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _415 = fma(_293, cbSceneParam._m0[5u].z, fma(_292, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _291));
    float _418 = fma(_293, cbSceneParam._m0[6u].z, fma(_292, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _291));
    float _421 = fma(_293, cbSceneParam._m0[7u].z, fma(_292, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _291));
    uint _434 = uint(roundEven(NORMAL.w)) * 13u;
    uint _436 = _434 + 9u;
    uint _437 = _436 + uint(cbMatDynParam._m0[0u].w);
    float _443 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0)))) * cbInstanceData._m0[_437].x;
    float _444 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0)))) * cbInstanceData._m0[_437].y;
    float _445 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0)))) * cbInstanceData._m0[_437].z;
    float _3407 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _3418 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _449 = 1.0 - _299;
    float _450 = _446 * _449;
    float _451 = _447 * _449;
    float _452 = _448 * _449;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _299;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _299;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _299;
    float _460 = _457 + 0.039999999105930328369140625;
    float _462 = _458 + 0.039999999105930328369140625;
    float _463 = _459 + 0.039999999105930328369140625;
    vec4 _472 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _394, cbSceneParam._m0[86u].y * _395));
    float _475 = _472.x * TEXCOORD_1.w;
    float _476 = dot(vec3(_291, _292, _293), vec3(_373, _374, _375));
    float _479 = _476 * 2.0;
    float _483 = (_479 * _291) - _373;
    float _484 = (_479 * _292) - _374;
    float _485 = (_479 * _293) - _375;
    float _489 = abs(dot(vec3(_373, _374, _375), vec3(_291, _292, _293)));
    float _3440 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _491 = sqrt(_295);
    float _504 = exp2((_491 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_491 * 3.0));
    float _510 = (1.0 - _504) * ((_491 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _511 = _504 * _491;
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _878;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _603 = fma(_547, cbModelParam._m0[26u].z, fma(_543, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _539));
        float _607 = fma(_547, cbModelParam._m0[27u].z, fma(_543, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _539));
        float _611 = fma(_547, cbModelParam._m0[28u].z, fma(_543, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _539));
        float _636 = _539 + _291;
        float _637 = _543 + _292;
        float _638 = _547 + _293;
        float _648 = fma(_638, cbModelParam._m0[26u].z, fma(_637, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _636)) - _603;
        float _649 = fma(_638, cbModelParam._m0[27u].z, fma(_637, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _636)) - _607;
        float _650 = fma(_638, cbModelParam._m0[28u].z, fma(_637, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _636)) - _611;
        float _654 = inversesqrt(dot(vec3(_648, _649, _650), vec3(_648, _649, _650)));
        float _667 = ((_654 * _648) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_603 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _668 = ((_654 * _649) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_607 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _669 = ((_654 * _650) / cbModelParam._m0[34u].z) + ((((((_611 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        float _706 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_672.x + (-0.5));
        float _708 = _706 * (_672.y + (-0.5));
        float _709 = _706 * (_672.z + (-0.5));
        float _716 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_679.x + (-0.5));
        float _718 = _716 * (_679.y + (-0.5));
        float _719 = _716 * (_679.z + (-0.5));
        float _726 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_686.x + (-0.5));
        float _728 = _726 * (_686.y + (-0.5));
        float _729 = _726 * (_686.z + (-0.5));
        float _736 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_693.x + (-0.5));
        float _738 = _736 * (_693.y + (-0.5));
        float _739 = _736 * (_693.z + (-0.5));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = _707 * 0.5;
        float _744 = _717 * 0.5;
        float _745 = _727 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _760 = (dot(vec3(_291, _292, _293), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _3466 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _770 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3477 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _772 = _771 * 2.0;
        float _776 = (1.0 - _771) / (_771 + 1.0);
        float _3488 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _786 = ((((1.0 - _777) * (_772 + 2.0)) * exp2(log2(isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * (_772 + 1.0))) + _777) * _740;
        float _787 = _708 * 0.5;
        float _788 = _718 * 0.5;
        float _789 = _728 * 0.5;
        float _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
        float _795 = (_790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_790);
        float _803 = (dot(vec3(_291, _292, _293), vec3(_795 * _787, _795 * _788, _795 * _789)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _812 = sqrt(((_788 * _788) + (_787 * _787)) + (_789 * _789)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3521 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_814 + 1.0))) + _819) * _741;
        float _829 = _709 * 0.5;
        float _830 = _719 * 0.5;
        float _831 = _729 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(_291, _292, _293), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3554 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_856 + 1.0))) + _861) * _742;
        _878 = _709;
        _880 = _708;
        _881 = _707;
        _882 = _719;
        _883 = _718;
        _884 = _717;
        _885 = _729;
        _886 = _728;
        _887 = _727;
        _888 = _742;
        _889 = _741;
        _890 = _740;
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0)));
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
    }
    else
    {
        _878 = _879;
        _880 = _879;
        _881 = _879;
        _882 = _879;
        _883 = _879;
        _884 = _879;
        _885 = _879;
        _886 = _879;
        _887 = _879;
        _888 = _879;
        _889 = _879;
        _890 = _879;
        _891 = 0.0;
        _892 = 0.0;
        _893 = 0.0;
    }
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _922 = fma(_547, cbModelParam._m0[30u].z, fma(_543, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _539));
        float _926 = fma(_547, cbModelParam._m0[31u].z, fma(_543, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _539));
        float _930 = fma(_547, cbModelParam._m0[32u].z, fma(_543, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _539));
        float _953 = _539 + _291;
        float _954 = _543 + _292;
        float _955 = _547 + _293;
        float _965 = fma(_955, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953)) - _922;
        float _966 = fma(_955, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953)) - _926;
        float _967 = fma(_955, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953)) - _930;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_922 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_926 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[35u].z) + ((((((_930 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1021 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_988.x + (-0.5));
        float _1023 = _1021 * (_988.y + (-0.5));
        float _1024 = _1021 * (_988.z + (-0.5));
        float _1031 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_995.x + (-0.5));
        float _1033 = _1031 * (_995.y + (-0.5));
        float _1034 = _1031 * (_995.z + (-0.5));
        float _1041 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1002.x + (-0.5));
        float _1043 = _1041 * (_1002.y + (-0.5));
        float _1044 = _1041 * (_1002.z + (-0.5));
        float _1051 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1009.x + (-0.5));
        float _1053 = _1051 * (_1009.y + (-0.5));
        float _1054 = _1051 * (_1009.z + (-0.5));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = _1022 * 0.5;
        float _1059 = _1032 * 0.5;
        float _1060 = _1042 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_291, _292, _293), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3617 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_1085 + 1.0))) + _1090) * _1055;
        float _1100 = _1023 * 0.5;
        float _1101 = _1033 * 0.5;
        float _1102 = _1043 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_291, _292, _293), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3650 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1127 + 1.0))) + _1132) * _1056;
        float _1142 = _1024 * 0.5;
        float _1143 = _1034 * 0.5;
        float _1144 = _1044 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_291, _292, _293), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3683 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1169 + 1.0))) + _1174) * _1057;
        _1191 = _1024;
        _1192 = _1023;
        _1193 = _1022;
        _1194 = _1034;
        _1195 = _1033;
        _1196 = _1032;
        _1197 = _1044;
        _1198 = _1043;
        _1199 = _1042;
        _1200 = _1057;
        _1201 = _1056;
        _1202 = _1055;
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
    }
    else
    {
        _1191 = _879;
        _1192 = _879;
        _1193 = _879;
        _1194 = _879;
        _1195 = _879;
        _1196 = _879;
        _1197 = _879;
        _1198 = _879;
        _1199 = _879;
        _1200 = _879;
        _1201 = _879;
        _1202 = _879;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _891)) + _891;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _892)) + _892;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _893)) + _893;
    float _1238 = fma(_1217, cbSceneParam._m0[89u].z, fma(_1216, cbSceneParam._m0[89u].y, _1215 * cbSceneParam._m0[89u].x));
    float _1241 = fma(_1217, cbSceneParam._m0[90u].z, fma(_1216, cbSceneParam._m0[90u].y, _1215 * cbSceneParam._m0[90u].x));
    float _1244 = fma(_1217, cbSceneParam._m0[91u].z, fma(_1216, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1215));
    float _1259 = _483 * 0.5;
    float _1260 = _484 * 0.5;
    float _1261 = _485 * 0.5;
    float _1262 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1265 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1268 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1302;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1275 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_878, _882, _885, _888));
        float _1279 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_880, _883, _886, _889));
        float _1283 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_881, _884, _887, _890));
        float _1290 = dot(vec4(cbModelParam._m0[39u]), vec4(_1259, _1260, _1261, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1290) ? 0.0 : (isnan(0.0) ? _1290 : max(0.0, _1290))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1313;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1304 = dot(vec4(cbModelParam._m0[40u]), vec4(_1259, _1260, _1261, 1.0));
        _1313 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1313 = 1.0;
    }
    float _1317 = (_1313 * cbModelParam._m0[1u].x) + (_1302 * (1.0 - cbModelParam._m0[1u].x));
    float _1327 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _295);
    float _1328 = isnan(_1327) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1327 : min(cbModelParam._m0[25u].z, _1327));
    float _1410;
    float _1412;
    float _1414;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1377 = fma(_547, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _539)) + cbModelParam._m0[13u].w;
        float _1381 = fma(_547, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _539)) + cbModelParam._m0[14u].w;
        float _1385 = fma(_547, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _539)) + cbModelParam._m0[15u].w;
        float _1388 = fma(_485, cbModelParam._m0[13u].z, fma(_484, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _483));
        float _1391 = fma(_485, cbModelParam._m0[14u].z, fma(_484, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _483));
        float _1394 = fma(_485, cbModelParam._m0[15u].z, fma(_484, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _483));
        float _1422;
        if (_1388 > 0.0)
        {
            _1422 = abs((1.0 - _1377) / _1388);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1377 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1422 = frontier_phi_17_15_ladder;
        }
        float _1651;
        if (_1391 > 0.0)
        {
            _1651 = abs((1.0 - _1381) / _1391);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1381 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1651 = frontier_phi_26_22_ladder;
        }
        float _1908;
        if (_1394 > 0.0)
        {
            _1908 = abs((1.0 - _1385) / _1394);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1385 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1908 = frontier_phi_38_33_ladder;
        }
        float _1910 = isnan(_1651) ? _1422 : (isnan(_1422) ? _1651 : min(_1422, _1651));
        float _1911 = isnan(_1908) ? _1910 : (isnan(_1910) ? _1908 : min(_1910, _1908));
        float _1915 = (_1911 * _1388) + _1377;
        float _1916 = (_1911 * _1391) + _1381;
        float _1917 = (_1911 * _1394) + _1385;
        float _1918 = _1911 * 9.9999997473787516355514526367188e-05;
        float _1920 = (-1.0) - _1918;
        float _1922 = _1918 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1917 > _1922) || ((_1917 < _1920) || ((_1916 > _1922) || ((_1916 < _1920) || ((_1915 < _1920) || (_1915 > _1922))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2045 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1917, cbModelParam._m0[9u].z, fma(_1916, cbModelParam._m0[9u].y, _1915 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1917, cbModelParam._m0[10u].z, fma(_1916, cbModelParam._m0[10u].y, _1915 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1917, cbModelParam._m0[11u].z, fma(_1916, cbModelParam._m0[11u].y, _1915 * cbModelParam._m0[11u].x))), _1328);
            frontier_phi_16_38_ladder = _2045.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2045.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2045.x * cbModelParam._m0[1u].y;
        }
        _1410 = frontier_phi_16_38_ladder_2;
        _1412 = frontier_phi_16_38_ladder_1;
        _1414 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_483, _484, _485), _1328);
        _1410 = _1398.x * cbModelParam._m0[1u].y;
        _1412 = _1398.y * cbModelParam._m0[1u].y;
        _1414 = _1398.z * cbModelParam._m0[1u].y;
    }
    float _1418 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _295);
    float _1419 = isnan(_1418) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1418 : min(cbModelParam._m0[25u].w, _1418));
    float _1512;
    float _1514;
    float _1516;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1476 = fma(_547, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _539)) + cbModelParam._m0[21u].w;
        float _1480 = fma(_547, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _539)) + cbModelParam._m0[22u].w;
        float _1484 = fma(_547, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _539)) + cbModelParam._m0[23u].w;
        float _1487 = fma(_485, cbModelParam._m0[21u].z, fma(_484, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _483));
        float _1490 = fma(_485, cbModelParam._m0[22u].z, fma(_484, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _483));
        float _1493 = fma(_485, cbModelParam._m0[23u].z, fma(_484, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _483));
        float _1656;
        if (_1487 > 0.0)
        {
            _1656 = abs((1.0 - _1476) / _1487);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1476 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1656 = frontier_phi_28_24_ladder;
        }
        float _1935;
        if (_1490 > 0.0)
        {
            _1935 = abs((1.0 - _1480) / _1490);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1480 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1935 = frontier_phi_40_35_ladder;
        }
        float _2148;
        if (_1493 > 0.0)
        {
            _2148 = abs((1.0 - _1484) / _1493);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1484 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2148 = frontier_phi_49_46_ladder;
        }
        float _2150 = isnan(_1935) ? _1656 : (isnan(_1656) ? _1935 : min(_1656, _1935));
        float _2151 = isnan(_2148) ? _2150 : (isnan(_2150) ? _2148 : min(_2150, _2148));
        float _2155 = (_2151 * _1487) + _1476;
        float _2156 = (_2151 * _1490) + _1480;
        float _2157 = (_2151 * _1493) + _1484;
        float _2158 = _2151 * 9.9999997473787516355514526367188e-05;
        float _2159 = (-1.0) - _2158;
        float _2161 = _2158 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2157 > _2161) || ((_2157 < _2159) || ((_2156 > _2161) || ((_2156 < _2159) || ((_2155 < _2159) || (_2155 > _2161))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2157, cbModelParam._m0[17u].z, fma(_2156, cbModelParam._m0[17u].y, _2155 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2157, cbModelParam._m0[18u].z, fma(_2156, cbModelParam._m0[18u].y, _2155 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2157, cbModelParam._m0[19u].z, fma(_2156, cbModelParam._m0[19u].y, _2155 * cbModelParam._m0[19u].x))), _1419);
            frontier_phi_25_49_ladder = _2358.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2358.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2358.x * cbModelParam._m0[1u].z;
        }
        _1512 = frontier_phi_25_49_ladder_2;
        _1514 = frontier_phi_25_49_ladder_1;
        _1516 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_483, _484, _485), _1419);
        _1512 = _1496.x * cbModelParam._m0[1u].z;
        _1514 = _1496.y * cbModelParam._m0[1u].z;
        _1516 = _1496.z * cbModelParam._m0[1u].z;
    }
    float _1529 = (((_510 * _460) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1512 - _1410)) + _1410);
    float _1531 = (((_510 * _462) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1514 - _1412)) + _1412);
    float _1533 = (((_510 * _463) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1516 - _1414)) + _1414);
    float _1536 = fma(_1533, cbSceneParam._m0[89u].z, fma(_1531, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1539 = fma(_1533, cbSceneParam._m0[90u].z, fma(_1531, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1542 = fma(_1533, cbSceneParam._m0[91u].z, fma(_1531, cbSceneParam._m0[91u].y, _1529 * cbSceneParam._m0[91u].x));
    vec4 _1550 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_394, _395));
    float _1552 = _1550.w;
    float _1564 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1552);
    float _1565 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1552);
    float _1566 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1552);
    uvec4 _1570 = floatBitsToUint(cbInstanceData._m0[_434 + 5u]);
    uint _1572 = _1570.x * 14u;
    uint _1573 = _1572 + 13u;
    float _1580 = _475 + (-1.0);
    float _1585 = (cbLight._m0[_1573].x * _1580) + 1.0;
    float _1586 = (cbLight._m0[_1573].y * _1580) + 1.0;
    float _1587 = (cbLight._m0[_1573].z * _1580) + 1.0;
    float _1588 = (cbLight._m0[_1573].w * _1580) + 1.0;
    uint _1589 = _1572 + 5u;
    float _1595 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
    uint _1599 = _1572 + 4u;
    float _1609 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
    uint _1613 = _1572 | 1u;
    float _1624 = dot(vec3(cbLight._m0[_1572].xyz), vec3(_291, _292, _293));
    float _1627 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_291, _292, _293));
    float _3819 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _3830 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1632 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * 0.3183098733425140380859375;
    float _1634 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.3183098733425140380859375;
    float _1641 = ((cbLight._m0[_1589].x * _1595) * _1634) + (((cbLight._m0[_1599].x * _1564) * _1609) * _1632);
    float _1642 = ((_1595 * cbLight._m0[_1589].y) * _1634) + (((cbLight._m0[_1599].y * _1565) * _1609) * _1632);
    float _1643 = ((_1595 * cbLight._m0[_1589].z) * _1634) + (((cbLight._m0[_1599].z * _1566) * _1609) * _1632);
    uvec4 _1648 = floatBitsToUint(cbLight._m0[_1572 + 12u]);
    bool _1650 = _1648.x == 0u;
    float _1661;
    float _1663;
    float _1665;
    if (_1650)
    {
        _1661 = _1641;
        _1663 = _1642;
        _1665 = _1643;
    }
    else
    {
        uint _1669 = _1572 + 6u;
        float _1685 = (dot(vec3(cbLight._m0[_1572 + 2u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1686 = _1685 * _1685;
        float _3841 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1688 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _1661 = (((cbLight._m0[_1669].x * 0.3183098733425140380859375) * _1687) * _1688) + _1641;
        _1663 = (((cbLight._m0[_1669].y * 0.3183098733425140380859375) * _1687) * _1688) + _1642;
        _1665 = (((cbLight._m0[_1669].z * 0.3183098733425140380859375) * _1687) * _1688) + _1643;
    }
    bool _1668 = _1648.y == 0u;
    float _1706;
    float _1708;
    float _1710;
    if (_1668)
    {
        _1706 = _1661;
        _1708 = _1663;
        _1710 = _1665;
    }
    else
    {
        uint _1879 = _1572 + 7u;
        float _1895 = (dot(vec3(cbLight._m0[_1572 + 3u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1896 = _1895 * _1895;
        float _3857 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1898 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
        _1706 = (((cbLight._m0[_1879].x * 0.3183098733425140380859375) * _1897) * _1898) + _1661;
        _1708 = (((cbLight._m0[_1879].y * 0.3183098733425140380859375) * _1897) * _1898) + _1663;
        _1710 = (((cbLight._m0[_1879].z * 0.3183098733425140380859375) * _1897) * _1898) + _1665;
    }
    uint _1713 = _1572 + 8u;
    float _1726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1572].w)) * _295) * 0.949999988079071044921875);
    float _1727 = _1726 * _1726;
    float _1728 = cbLight._m0[_1572].x + _373;
    float _1729 = cbLight._m0[_1572].y + _374;
    float _1730 = cbLight._m0[_1572].z + _375;
    float _1734 = inversesqrt(dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730)));
    float _1735 = _1734 * _1728;
    float _1736 = _1734 * _1729;
    float _1737 = _1734 * _1730;
    float _1738 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1572].xyz));
    float _3873 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1741 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _1742 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1743 = dot(vec3(_291, _292, _293), vec3(_1735, _1736, _1737));
    float _3895 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1747 = dot(vec3(cbLight._m0[_1572].xyz), vec3(_1735, _1736, _1737));
    float _3906 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1751 = _1727 * _1727;
    float _1755 = ((_1746 * _1746) * (_1751 + (-1.0))) + 1.0;
    float _1763 = exp2(log2(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * 5.0);
    float _1764 = 0.959999978542327880859375 - _457;
    float _1766 = 0.959999978542327880859375 - _458;
    float _1767 = 0.959999978542327880859375 - _459;
    float _1774 = 1.0 - _1727;
    float _1785 = (0.5 / (((_1742 * ((_1741 * _1774) + _1727)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _1774) + _1727) * _1741))) * _1741;
    float _3917 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1787 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1751 / ((_1755 * _1755) * 3.141590118408203125));
    uint _1801 = _1572 + 9u;
    float _1812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1613].w)) * _295) * 0.949999988079071044921875);
    float _1813 = _1812 * _1812;
    float _1814 = cbLight._m0[_1613].x + _373;
    float _1815 = cbLight._m0[_1613].y + _374;
    float _1816 = cbLight._m0[_1613].z + _375;
    float _1820 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
    float _1821 = _1820 * _1814;
    float _1822 = _1820 * _1815;
    float _1823 = _1820 * _1816;
    float _1824 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1613].xyz));
    float _3928 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _1828 = dot(vec3(_291, _292, _293), vec3(_1821, _1822, _1823));
    float _3939 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1832 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_1821, _1822, _1823));
    float _3950 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1836 = _1813 * _1813;
    float _1840 = ((_1831 * _1831) * (_1836 + (-1.0))) + 1.0;
    float _1847 = exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0);
    float _1854 = 1.0 - _1813;
    float _1864 = (0.5 / (((_1742 * ((_1827 * _1854) + _1813)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _1854) + _1813) * _1827))) * _1827;
    float _3961 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1866 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1836 / ((_1840 * _1840) * 3.141590118408203125));
    float _1876 = (((((_1847 * _1764) + _460) * cbLight._m0[_1801].x) * _1866) * _1595) + ((((cbLight._m0[_1713].x * _1564) * ((_1763 * _1764) + _460)) * _1787) * _1609);
    float _1877 = (((((_1847 * _1766) + _462) * cbLight._m0[_1801].y) * _1866) * _1595) + ((((cbLight._m0[_1713].y * _1565) * ((_1763 * _1766) + _462)) * _1787) * _1609);
    float _1878 = (((((_1847 * _1767) + _463) * cbLight._m0[_1801].z) * _1866) * _1595) + ((((cbLight._m0[_1713].z * _1566) * ((_1763 * _1767) + _463)) * _1787) * _1609);
    float _1940;
    float _1942;
    float _1944;
    if (_1650)
    {
        _1940 = _1876;
        _1942 = _1877;
        _1944 = _1878;
    }
    else
    {
        uint _1946 = _1572 + 2u;
        uint _1950 = _1572 + 10u;
        float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _295) * 0.949999988079071044921875);
        float _1965 = _1964 * _1964;
        float _1966 = cbLight._m0[_1946].x + _373;
        float _1967 = cbLight._m0[_1946].y + _374;
        float _1968 = cbLight._m0[_1946].z + _375;
        float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
        float _1973 = _1972 * _1966;
        float _1974 = _1972 * _1967;
        float _1975 = _1972 * _1968;
        float _1976 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1946].xyz));
        float _3972 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1979 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1980 = dot(vec3(_291, _292, _293), vec3(_1973, _1974, _1975));
        float _3983 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1984 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_1973, _1974, _1975));
        float _3994 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1988 = _1965 * _1965;
        float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
        float _1999 = exp2(log2(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * 5.0);
        float _2006 = 1.0 - _1965;
        float _2016 = (0.5 / (((_1742 * ((_1979 * _2006) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _2006) + _1965) * _1979))) * _1979;
        float _4005 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2018 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
        float _2019 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _1940 = (((((_1999 * _1764) + _460) * cbLight._m0[_1950].x) * _2018) * _2019) + _1876;
        _1942 = (((((_1999 * _1766) + _462) * cbLight._m0[_1950].y) * _2018) * _2019) + _1877;
        _1944 = (((((_1999 * _1767) + _463) * cbLight._m0[_1950].z) * _2018) * _2019) + _1878;
    }
    float _2054;
    float _2056;
    float _2058;
    if (_1668)
    {
        _2054 = _1940;
        _2056 = _1942;
        _2058 = _1944;
    }
    else
    {
        uint _2065 = _1572 + 3u;
        uint _2069 = _1572 + 11u;
        float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _295) * 0.949999988079071044921875);
        float _2084 = _2083 * _2083;
        float _2085 = cbLight._m0[_2065].x + _373;
        float _2086 = cbLight._m0[_2065].y + _374;
        float _2087 = cbLight._m0[_2065].z + _375;
        float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
        float _2092 = _2091 * _2085;
        float _2093 = _2091 * _2086;
        float _2094 = _2091 * _2087;
        float _2095 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_2065].xyz));
        float _4021 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2099 = dot(vec3(_291, _292, _293), vec3(_2092, _2093, _2094));
        float _4032 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2103 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2092, _2093, _2094));
        float _4043 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2107 = _2084 * _2084;
        float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
        float _2118 = exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0);
        float _2125 = 1.0 - _2084;
        float _2135 = (0.5 / (((_1742 * ((_2098 * _2125) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _2125) + _2084) * _2098))) * _2098;
        float _4054 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2137 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
        float _2138 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
        _2054 = (((((_2118 * _1764) + _460) * cbLight._m0[_2069].x) * _2137) * _2138) + _1940;
        _2056 = (((((_2118 * _1766) + _462) * cbLight._m0[_2069].y) * _2137) * _2138) + _1942;
        _2058 = (((((_2118 * _1767) + _463) * cbLight._m0[_2069].z) * _2137) * _2138) + _1944;
    }
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    if (_1570.y == 0u)
    {
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2213;
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2213;
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2213;
        uvec4 _2228 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2229 = _2228.x;
        uint _2240 = uint((float(_2228.y) * floor(float(uint(cbSceneParam._m0[85u].y * _395) / _2229))) + floor(float(uint(cbSceneParam._m0[85u].x * _394) / _2229)));
        float _2250 = (log2(_2216 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2251 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        uint _2254 = uint(isnan(14.0) ? _2251 : (isnan(_2251) ? 14.0 : min(_2251, 14.0)));
        uvec4 _2259 = texelFetch(g_lightClusterGridBuffer, int(((_2254 << 2u) + (_2240 << 6u)) >> 2u));
        uint _2260 = _2259.x;
        uint _2261 = _2228.z;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        if (((((1u << ((_2261 >> 4u) & 15u)) + 4294967295u) & _2260) == 0u) || ((_2261 & 240u) == 0u))
        {
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
        }
        else
        {
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            uint _2522 = 0u;
            uint _2531;
            bool _2532;
            for (;;)
            {
                _2531 = texelFetch(g_lightClassification, int((((_2254 << 5u) + (_2240 << 9u)) + (_2522 << 2u)) >> 2u)).x;
                _2532 = _2531 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2532)
                {
                    frontier_phi_66_pred = _2516;
                    frontier_phi_66_pred_1 = _2521;
                    frontier_phi_66_pred_2 = _2520;
                    frontier_phi_66_pred_3 = _2519;
                    frontier_phi_66_pred_4 = _2518;
                    frontier_phi_66_pred_5 = _2517;
                }
                else
                {
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    uint _2667;
                    _2661 = _2516;
                    _2662 = _2517;
                    _2663 = _2518;
                    _2664 = _2519;
                    _2665 = _2520;
                    _2666 = _2521;
                    _2667 = _2531;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    for (;;)
                    {
                        uint _2671 = uint(findLSB(_2667)) + (_2522 << 5u);
                        uint _2668 = (_2667 + 4294967295u) & _2667;
                        uint _2673 = _2671 * 48u;
                        vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 3u)).x));
                        uint _2693 = (_2671 * 48u) + 4u;
                        vec4 _2706 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 3u)).x));
                        uint _2712 = (_2671 * 48u) + 8u;
                        vec3 _2723 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2712)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 2u)).x));
                        float _2727 = _2687.x - _2214;
                        float _2728 = _2687.y - _2215;
                        float _2729 = _2687.z - _2216;
                        float _2730 = dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729));
                        float _2733 = inversesqrt(_2730);
                        float _2734 = _2733 * _2727;
                        float _2735 = _2733 * _2728;
                        float _2736 = _2733 * _2729;
                        float _2737 = dot(vec3(_415, _418, _421), vec3(_2734, _2735, _2736));
                        float _2742 = 1.0 - (_2730 * _2687.w);
                        float _4080 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2743 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                        float _2744 = sqrt(_2730) * _2706.w;
                        float _2747 = 1.39999997615814208984375 / (_2744 + 1.39999997615814208984375);
                        float _2748 = _2747 * _2747;
                        float _2751 = ((1.0 - _2748) * _2737) + _2748;
                        float _2754 = _2744 * _2744;
                        float _2758 = ((isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0))) * _2743) / ((_2754 * 0.699999988079071044921875) + 1.0);
                        float _2762 = (-0.0) - _2214;
                        float _2763 = (-0.0) - _2215;
                        float _2764 = (-0.0) - _2216;
                        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
                        float _2769 = _2768 * _2762;
                        float _2770 = _2768 * _2763;
                        float _2771 = _2768 * _2764;
                        float _2779 = exp2(log2(1.0 / ((_2754 * 3.5) + 5.0)) * 0.25);
                        float _2780 = 1.0 - _491;
                        float _2787 = sqrt(1.0 - ((1.0 - (_2780 * _2780)) * (1.0 - (_2779 * _2779))));
                        float _2788 = _2787 * _2787;
                        float _2789 = _2788 * _2788;
                        float _2790 = _2769 + _2734;
                        float _2791 = _2770 + _2735;
                        float _2792 = _2771 + _2736;
                        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
                        float _2800 = dot(vec3(_415, _418, _421), vec3(_2769, _2770, _2771));
                        float _4096 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2803 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2804 = dot(vec3(_415, _418, _421), vec3(_2796 * _2790, _2796 * _2791, _2796 * _2792));
                        float _4107 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2807 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2811 = ((_2807 * _2807) * (_2789 + (-1.0))) + 1.0;
                        float _2812 = _2747 * _2788;
                        float _2813 = _2812 * _2812;
                        float _2816 = ((1.0 - _2813) * _2737) + _2813;
                        float _4118 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2817 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2818 = 1.0 - _2788;
                        float _2828 = (0.5 / (((_2817 * ((_2803 * _2818) + _2788)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _2818) + _2788) * _2803))) * _2817;
                        float _4129 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2839 = (((_2789 * 3.1415927410125732421875) * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) / ((_2811 * _2811) * ((_2754 * 2.1991131305694580078125) + 3.141590118408203125))) * _2743;
                        _2591 = (_2758 * _2706.x) + _2664;
                        _2592 = (_2758 * _2706.y) + _2665;
                        _2593 = (_2758 * _2706.z) + _2666;
                        _2588 = (_2839 * _2723.x) + _2661;
                        _2589 = (_2839 * _2723.y) + _2662;
                        _2590 = (_2839 * _2723.z) + _2663;
                        if (_2668 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2661 = _2588;
                            _2662 = _2589;
                            _2663 = _2590;
                            _2664 = _2591;
                            _2665 = _2592;
                            _2666 = _2593;
                            _2667 = _2668;
                        }
                    }
                    frontier_phi_66_pred = _2588;
                    frontier_phi_66_pred_1 = _2593;
                    frontier_phi_66_pred_2 = _2592;
                    frontier_phi_66_pred_3 = _2591;
                    frontier_phi_66_pred_4 = _2590;
                    frontier_phi_66_pred_5 = _2589;
                }
                _2364 = frontier_phi_66_pred;
                _2374 = frontier_phi_66_pred_1;
                _2372 = frontier_phi_66_pred_2;
                _2370 = frontier_phi_66_pred_3;
                _2368 = frontier_phi_66_pred_4;
                _2366 = frontier_phi_66_pred_5;
                uint _2523 = _2522 + 1u;
                if (_2523 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2516 = _2364;
                    _2517 = _2366;
                    _2518 = _2368;
                    _2519 = _2370;
                    _2520 = _2372;
                    _2521 = _2374;
                    _2522 = _2523;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
        }
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.z;
        uint _2380 = (_2378 >> 8u) & 15u;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        if (((4294967295u << _2380) & _2260) == 0u)
        {
            _2484 = _2363;
            _2486 = _2365;
            _2488 = _2367;
            _2490 = _2369;
            _2492 = _2371;
            _2494 = _2373;
        }
        else
        {
            float _2509 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
            float _2510 = _2509 * _2214;
            float _2511 = _2509 * _2215;
            float _2512 = _2509 * _2216;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2380 < ((_2378 >> 12u) & 15u))
            {
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2644 = _2363;
                float _2645 = _2365;
                float _2646 = _2367;
                float _2647 = _2369;
                float _2648 = _2371;
                float _2649 = _2373;
                uint _2650 = _2380;
                uint _2659;
                bool _2660;
                for (;;)
                {
                    _2659 = texelFetch(g_lightClassification, int((((_2254 << 5u) + (_2240 << 9u)) + (_2650 << 2u)) >> 2u)).x;
                    _2660 = _2659 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2660)
                    {
                        frontier_phi_77_pred = _2649;
                        frontier_phi_77_pred_1 = _2648;
                        frontier_phi_77_pred_2 = _2647;
                        frontier_phi_77_pred_3 = _2646;
                        frontier_phi_77_pred_4 = _2645;
                        frontier_phi_77_pred_5 = _2644;
                    }
                    else
                    {
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _2866 = _2644;
                        float _2867 = _2645;
                        float _2868 = _2646;
                        float _2869 = _2647;
                        float _2870 = _2648;
                        float _2871 = _2649;
                        uint _2872 = _2659;
                        uint _2873;
                        vec4 _2898;
                        float _2899;
                        vec4 _2914;
                        vec3 _2926;
                        vec4 _2942;
                        vec4 _2958;
                        float _3005;
                        bool _3006;
                        for (;;)
                        {
                            uint _2883 = ((_2650 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2872));
                            _2873 = (_2872 + 4294967295u) & _2872;
                            uint _2885 = _2883 * 40u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            _2899 = _2898.w;
                            uint _2901 = (_2883 * 40u) + 4u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2916 = (_2883 * 40u) + 8u;
                            _2926 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x));
                            uint _2929 = (_2883 * 40u) + 16u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2945 = (_2883 * 40u) + 20u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2961 = (_2883 * 40u) + 24u;
                            vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2980 = (_2883 * 40u) + 28u;
                            vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            _3005 = fma(_2216, _2993.z, fma(_2215, _2993.y, _2993.x * _2214)) + _2993.w;
                            _3006 = !((fma(_2216, _2974.z, fma(_2215, _2974.y, _2974.x * _2214)) + _2974.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3006)
                            {
                                float _3033 = _2898.x - _2214;
                                float _3034 = _2898.y - _2215;
                                float _3035 = _2898.z - _2216;
                                float _3036 = dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035));
                                float _3039 = inversesqrt(_3036);
                                float _3040 = _3039 * _3033;
                                float _3041 = _3039 * _3034;
                                float _3042 = _3039 * _3035;
                                float _3046 = 1.0 - (_3036 / (_2899 * _2899));
                                float _4140 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3051 = sqrt(_3036) * _2914.w;
                                float _3053 = 1.39999997615814208984375 / (_3051 + 1.39999997615814208984375);
                                float _3054 = _3053 * _3053;
                                float _3057 = ((1.0 - _3054) * dot(vec3(_3040, _3041, _3042), vec3(_415, _418, _421))) + _3054;
                                float _3060 = _3051 * _3051;
                                float _3064 = (fma(_2216, _2942.z, fma(_2215, _2942.y, _2942.x * _2214)) + _2942.w) / _3005;
                                float _3065 = (fma(_2216, _2958.z, fma(_2215, _2958.y, _2958.x * _2214)) + _2958.w) / _3005;
                                float _3069 = 1.0 - dot(vec2(_3064, _3065), vec2(_3064, _3065));
                                float _4156 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3071 = _3070 * (((isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))) * _3047) / ((_3060 * 0.699999988079071044921875) + 1.0));
                                float _3083 = exp2(log2(1.0 / ((_3060 * 3.5) + 5.0)) * 0.25);
                                float _3084 = 1.0 - _491;
                                float _3091 = sqrt(1.0 - ((1.0 - (_3084 * _3084)) * (1.0 - (_3083 * _3083))));
                                float _3092 = _3091 * _3091;
                                float _3093 = _3092 * _3092;
                                float _3094 = _3040 - _2510;
                                float _3095 = _3041 - _2511;
                                float _3096 = _3042 - _2512;
                                float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                                float _3104 = dot(vec3(_415, _418, _421), vec3((-0.0) - _2510, (-0.0) - _2511, (-0.0) - _2512));
                                float _4167 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3107 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3108 = dot(vec3(_415, _418, _421), vec3(_3100 * _3094, _3100 * _3095, _3100 * _3096));
                                float _4178 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3111 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3115 = ((_3111 * _3111) * (_3093 + (-1.0))) + 1.0;
                                float _3116 = _3053 * _3092;
                                float _3117 = _3116 * _3116;
                                float _3123 = ((1.0 - _3117) * dot(vec3(_415, _418, _421), vec3(_3040, _3041, _3042))) + _3117;
                                float _4189 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3124 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3125 = 1.0 - _3092;
                                float _3135 = (0.5 / (((_3124 * ((_3107 * _3125) + _3092)) + 9.9999999392252902907785028219223e-09) + (((_3124 * _3125) + _3092) * _3107))) * _3124;
                                float _4200 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3145 = (_3070 * _3047) * (((_3093 * 3.1415927410125732421875) * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) / ((_3115 * _3115) * ((_3060 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3071 * _2914.y;
                                frontier_phi_83_pred_1 = _3071 * _2914.x;
                                frontier_phi_83_pred_2 = _3145 * _2926.z;
                                frontier_phi_83_pred_3 = _3145 * _2926.y;
                                frontier_phi_83_pred_4 = _3145 * _2926.x;
                                frontier_phi_83_pred_5 = _3071 * _2914.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3153 = frontier_phi_83_pred;
                            _3152 = frontier_phi_83_pred_1;
                            _3151 = frontier_phi_83_pred_2;
                            _3150 = frontier_phi_83_pred_3;
                            _3149 = frontier_phi_83_pred_4;
                            _3154 = frontier_phi_83_pred_5;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            _2853 = _3149 + _2866;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            if (_2873 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2873;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2858;
                        frontier_phi_77_pred_1 = _2857;
                        frontier_phi_77_pred_2 = _2856;
                        frontier_phi_77_pred_3 = _2855;
                        frontier_phi_77_pred_4 = _2854;
                        frontier_phi_77_pred_5 = _2853;
                    }
                    _2495 = frontier_phi_77_pred;
                    _2493 = frontier_phi_77_pred_1;
                    _2491 = frontier_phi_77_pred_2;
                    _2489 = frontier_phi_77_pred_3;
                    _2487 = frontier_phi_77_pred_4;
                    _2485 = frontier_phi_77_pred_5;
                    uint _2651 = _2650 + 1u;
                    if (_2651 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2644 = _2485;
                        _2645 = _2487;
                        _2646 = _2489;
                        _2647 = _2491;
                        _2648 = _2493;
                        _2649 = _2495;
                        _2650 = _2651;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2489;
                frontier_phi_58_59_ladder_1 = _2495;
                frontier_phi_58_59_ladder_2 = _2493;
                frontier_phi_58_59_ladder_3 = _2491;
                frontier_phi_58_59_ladder_4 = _2487;
                frontier_phi_58_59_ladder_5 = _2485;
            }
            else
            {
                frontier_phi_58_59_ladder = _2367;
                frontier_phi_58_59_ladder_1 = _2373;
                frontier_phi_58_59_ladder_2 = _2371;
                frontier_phi_58_59_ladder_3 = _2369;
                frontier_phi_58_59_ladder_4 = _2365;
                frontier_phi_58_59_ladder_5 = _2363;
            }
            _2484 = frontier_phi_58_59_ladder_5;
            _2486 = frontier_phi_58_59_ladder_4;
            _2488 = frontier_phi_58_59_ladder;
            _2490 = frontier_phi_58_59_ladder_3;
            _2492 = frontier_phi_58_59_ladder_2;
            _2494 = frontier_phi_58_59_ladder_1;
        }
        float _2499 = isnan(1.0) ? _475 : (isnan(_475) ? 1.0 : min(_475, 1.0));
        _2273 = (_2499 * _2490) + _1706;
        _2275 = (_2499 * _2492) + _1708;
        _2277 = (_2499 * _2494) + _1710;
        _2279 = ((_2484 * _460) * _2499) + _2054;
        _2281 = ((_2486 * _462) * _2499) + _2056;
        _2283 = ((_2488 * _463) * _2499) + _2058;
    }
    else
    {
        _2273 = _1706;
        _2275 = _1708;
        _2277 = _1710;
        _2279 = _2054;
        _2281 = _2056;
        _2283 = _2058;
    }
    float _4216 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4227 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4238 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4249 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _2301 = ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2273 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _475))) + ((_2279 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    float _2302 = ((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2275 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _475))) + ((_2281 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    float _2303 = ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2277 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _475))) + ((_2283 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    float _2308 = cbInstanceData._m0[_434 + 6u].w * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)));
    float _2313 = _394 / cbSceneParam._m0[86u].x;
    float _2314 = _395 / cbSceneParam._m0[86u].y;
    vec4 _2328 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2313, _2314, (log2((isnan(cbSceneParam._m0[77u].w) ? _315 : (isnan(_315) ? cbSceneParam._m0[77u].w : min(_315, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2330 = _2328.x;
    float _2331 = _2328.y;
    float _2332 = _2328.z;
    float _2333 = _2328.w;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_315 > cbSceneParam._m0[78u].w)
    {
        float _2388 = isnan(_315) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _315 : min(cbSceneParam._m0[80u].w, _315));
        float _2389 = _2388 / _315;
        float _2400 = _2389 * _366;
        float _2401 = _367 * _2389;
        float _2402 = (-0.0) - _2401;
        float _2404 = _2389 * _368;
        float _2406 = (cbSceneParam._m0[77u].w * _2402) / _2388;
        float _2407 = _2406 + cbSceneParam._m0[79u].w;
        float _2408 = cbSceneParam._m0[79u].w - _2401;
        float _2414 = sqrt(((_2400 * _2400) + (_2401 * _2401)) + (_2404 * _2404));
        float _2417 = (1.0 - (cbSceneParam._m0[77u].w / _2388)) * _2414;
        float _2422 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2424 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2601;
        if (abs((_2402 - _2406) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2601 = ((((_2407 > 0.0) ? exp2(_2422 * _2407) : (2.0 - exp2(_2424 * _2407))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2417;
        }
        else
        {
            float _2545 = 1.0 / cbSceneParam._m0[80u].x;
            float _2546 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : max(_2407, _2408));
            float _2547 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : min(_2407, _2408));
            float _2556 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : min(_2546, 0.0));
            float _2557 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : min(_2547, 0.0));
            _2601 = ((abs(_2414 / _2402) * cbSceneParam._m0[80u].y) * ((((_2556 - _2557) * 2.0) - ((exp2(_2422 * (isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0)))) - exp2(_2422 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0))))) * _2545)) - ((exp2(_2424 * _2556) - exp2(_2424 * _2557)) * _2545))) + (_2417 * cbSceneParam._m0[80u].z);
        }
        vec4 _2603 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2313, _2314, 1.0), 0.0);
        float _2612 = exp2((_2601 * (-1.44269502162933349609375)) * (1.0 - _2603.w));
        float _2613 = log2(_2612);
        float _2629 = log2(_2333);
        _2426 = (exp2(_2629 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].x)) * _2603.x) / cbSceneParam._m0[78u].x)) + _2330;
        _2428 = (exp2(_2629 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].y)) * _2603.y) / cbSceneParam._m0[78u].y)) + _2331;
        _2430 = (exp2(_2629 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].z)) * _2603.z) / cbSceneParam._m0[78u].z)) + _2332;
        _2432 = _2612 * _2333;
    }
    else
    {
        _2426 = _2330;
        _2428 = _2331;
        _2430 = _2332;
        _2432 = _2333;
    }
    bool _2639;
    vec4 _2442;
    vec4 _2464;
    float _2466;
    float _2470;
    float _2471;
    float _2472;
    float _2473;
    bool _2483;
    for (;;)
    {
        _2442 = cbMatDynParam._m0[0u];
        float _2444 = roundEven(_2442.y);
        bool _2445 = _2444 == 3.0;
        float _2446 = log2(_2432);
        float _2453 = exp2(_2446 * cbSceneParam._m0[78u].x) * _2301;
        float _2454 = exp2(_2446 * cbSceneParam._m0[78u].y) * _2302;
        float _2455 = exp2(_2446 * cbSceneParam._m0[78u].z) * _2303;
        float _2462 = _382 + (-0.5);
        _2464 = cbMtdParam._m0[1u];
        _2466 = _2464.y * _2462;
        float _2469 = (_2444 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2470 = _2469 * (_2445 ? _2453 : (_2453 + (cbSceneParam._m0[72u].w * _2426)));
        _2471 = _2469 * (_2445 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2428)));
        _2472 = _2469 * (_2445 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2430)));
        _2473 = _2462 * 0.999000012874603271484375;
        _2483 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2483)
        {
            if ((cbInstanceData._m0[_434 + 7u].x + _2473) < 0.5)
            {
                _2639 = true;
                break;
            }
        }
        uint _2580 = _436 + uint(_2442.w);
        if ((cbInstanceData._m0[_2580].w < 1.0) && ((cbInstanceData._m0[_2580].w + _2473) < 0.5))
        {
            _2639 = true;
            break;
        }
        if ((_2466 + _234) < _2464.x)
        {
            _2639 = true;
            break;
        }
        _2639 = false;
        break;
    }
    float _2844;
    if (_2639)
    {
        discard_state = true;
        _2844 = 0.0;
    }
    else
    {
        _2844 = _2308;
    }
    SV_Target.x = _2470;
    SV_Target.y = _2471;
    SV_Target.z = _2472;
    SV_Target.w = _2844;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2308;
    discard_exit();
}


