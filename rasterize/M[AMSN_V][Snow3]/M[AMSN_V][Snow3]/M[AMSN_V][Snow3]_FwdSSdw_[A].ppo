#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1001;
float _3415;
float _3416;
float _3417;
float _3418;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    vec4 _243 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _243.z;
    float _252 = (_243.x * 2.0) + (-1.0);
    float _254 = (_243.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3427 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))));
    float _264 = fma(_261, _221, fma(_254, _214, _252 * _200));
    float _267 = fma(_261, _222, fma(_254, _215, _252 * _201));
    float _270 = fma(_261, _223, fma(_254, _216, _252 * _202));
    float _274 = inversesqrt(dot(vec3(_264, _267, _270), vec3(_264, _267, _270)));
    float _303 = dot(vec4(texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w))), vec4(cbMtdParam._m0[9u].x)) + dot(vec4(_274 * _264, _274 * _267, _274 * _270, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _3438 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    vec4 _316 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _332 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _334 = _332.x;
    float _335 = _332.y;
    float _336 = _332.z;
    float _343 = ((_316.x - _334) * _304) + _334;
    float _344 = ((_316.y - _335) * _304) + _335;
    float _345 = ((_316.z - _336) * _304) + _336;
    vec4 _358 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _360 = _358.x;
    float _362 = _360 - (_360 * _304);
    vec4 _374 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _381 = (_374.x * 2.0) + (-1.0);
    float _382 = (_374.y * 2.0) + (-1.0);
    float _383 = dot(vec2(_381, _382), vec2(_381, _382));
    float _3449 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _391 = ((_374.z - _248) * _304) + _248;
    float _398 = ((_381 - _252) * _304) + _252;
    float _399 = ((_382 - _254) * _304) + _254;
    float _400 = ((sqrt(1.0 - (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) - _261) * _304) + _261;
    float _403 = fma(_400, _221, fma(_399, _214, _398 * _200));
    float _406 = fma(_400, _222, fma(_399, _215, _398 * _201));
    float _409 = fma(_400, _223, fma(_399, _216, _398 * _202));
    float _413 = inversesqrt(dot(vec3(_403, _406, _409), vec3(_403, _406, _409)));
    float _414 = _413 * _403;
    float _415 = _413 * _406;
    float _416 = _413 * _409;
    float _3460 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _417 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3482 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3493 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3504 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _421 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _437 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _479 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _489 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _479);
    float _490 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _479);
    float _491 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _479);
    float _495 = inversesqrt(dot(vec3(_489, _490, _491), vec3(_489, _490, _491)));
    float _496 = _489 * _495;
    float _497 = _490 * _495;
    float _498 = _491 * _495;
    vec4 _503 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _505 = _503.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _680 = sqrt(((_489 * _489) + (_490 * _490)) + (_491 * _491));
        float _686 = (cbMatDynParam._m0[5u].x * _680) + cbMatDynParam._m0[5u].y;
        float _3515 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _687 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _691 = (cbMatDynParam._m0[5u].z * _680) + cbMatDynParam._m0[5u].w;
        float _3526 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) - _687)) + _687) < ((_505 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _517 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _518 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _537 = fma(_416, cbSceneParam._m0[5u].z, fma(_415, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _414));
    float _540 = fma(_416, cbSceneParam._m0[6u].z, fma(_415, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _414));
    float _543 = fma(_416, cbSceneParam._m0[7u].z, fma(_415, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _414));
    uint _556 = uint(roundEven(NORMAL.w)) * 13u;
    uint _558 = _556 + 9u;
    uint _559 = _558 + uint(cbMatDynParam._m0[0u].w);
    float _565 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_559].x;
    float _566 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_559].y;
    float _567 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_559].z;
    float _3537 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _571 = 1.0 - _421;
    float _572 = _568 * _571;
    float _573 = _569 * _571;
    float _574 = _570 * _571;
    float _579 = (_568 + (-0.039999999105930328369140625)) * _421;
    float _580 = (_569 + (-0.039999999105930328369140625)) * _421;
    float _581 = (_570 + (-0.039999999105930328369140625)) * _421;
    float _582 = _579 + 0.039999999105930328369140625;
    float _584 = _580 + 0.039999999105930328369140625;
    float _585 = _581 + 0.039999999105930328369140625;
    vec4 _594 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _517, cbSceneParam._m0[86u].y * _518));
    float _597 = _594.x * TEXCOORD.z;
    float _598 = dot(vec3(_414, _415, _416), vec3(_496, _497, _498));
    float _601 = _598 * 2.0;
    float _605 = (_601 * _414) - _496;
    float _606 = (_601 * _415) - _497;
    float _607 = (_601 * _416) - _498;
    float _611 = abs(dot(vec3(_496, _497, _498), vec3(_414, _415, _416)));
    float _3570 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _613 = sqrt(_417);
    float _626 = exp2((_613 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_613 * 3.0));
    float _632 = (1.0 - _626) * ((_613 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _633 = _626 * _613;
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1000;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _725 = fma(_669, cbModelParam._m0[26u].z, fma(_665, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _661));
        float _729 = fma(_669, cbModelParam._m0[27u].z, fma(_665, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _661));
        float _733 = fma(_669, cbModelParam._m0[28u].z, fma(_665, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _661));
        float _758 = _661 + _414;
        float _759 = _665 + _415;
        float _760 = _669 + _416;
        float _770 = fma(_760, cbModelParam._m0[26u].z, fma(_759, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758)) - _725;
        float _771 = fma(_760, cbModelParam._m0[27u].z, fma(_759, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758)) - _729;
        float _772 = fma(_760, cbModelParam._m0[28u].z, fma(_759, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758)) - _733;
        float _776 = inversesqrt(dot(vec3(_770, _771, _772), vec3(_770, _771, _772)));
        float _789 = ((_776 * _770) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_725 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _790 = ((_776 * _771) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_729 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _791 = ((_776 * _772) / cbModelParam._m0[34u].z) + ((((((_733 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        float _828 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_794.x + (-0.5));
        float _830 = _828 * (_794.y + (-0.5));
        float _831 = _828 * (_794.z + (-0.5));
        float _838 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_801.x + (-0.5));
        float _840 = _838 * (_801.y + (-0.5));
        float _841 = _838 * (_801.z + (-0.5));
        float _848 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_808.x + (-0.5));
        float _850 = _848 * (_808.y + (-0.5));
        float _851 = _848 * (_808.z + (-0.5));
        float _858 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_815.x + (-0.5));
        float _860 = _858 * (_815.y + (-0.5));
        float _861 = _858 * (_815.z + (-0.5));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = _829 * 0.5;
        float _866 = _839 * 0.5;
        float _867 = _849 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _882 = (dot(vec3(_414, _415, _416), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _892 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3618 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_894 + 1.0))) + _899) * _862;
        float _909 = _830 * 0.5;
        float _910 = _840 * 0.5;
        float _911 = _850 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _925 = (dot(vec3(_414, _415, _416), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _934 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3651 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_936 + 1.0))) + _941) * _863;
        float _951 = _831 * 0.5;
        float _952 = _841 * 0.5;
        float _953 = _851 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_414, _415, _416), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3684 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_978 + 1.0))) + _983) * _864;
        _1000 = _831;
        _1002 = _830;
        _1003 = _829;
        _1004 = _841;
        _1005 = _840;
        _1006 = _839;
        _1007 = _851;
        _1008 = _850;
        _1009 = _849;
        _1010 = _864;
        _1011 = _863;
        _1012 = _862;
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
    }
    else
    {
        _1000 = _1001;
        _1002 = _1001;
        _1003 = _1001;
        _1004 = _1001;
        _1005 = _1001;
        _1006 = _1001;
        _1007 = _1001;
        _1008 = _1001;
        _1009 = _1001;
        _1010 = _1001;
        _1011 = _1001;
        _1012 = _1001;
        _1013 = 0.0;
        _1014 = 0.0;
        _1015 = 0.0;
    }
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1044 = fma(_669, cbModelParam._m0[30u].z, fma(_665, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _661));
        float _1048 = fma(_669, cbModelParam._m0[31u].z, fma(_665, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _661));
        float _1052 = fma(_669, cbModelParam._m0[32u].z, fma(_665, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _661));
        float _1075 = _661 + _414;
        float _1076 = _665 + _415;
        float _1077 = _669 + _416;
        float _1087 = fma(_1077, cbModelParam._m0[30u].z, fma(_1076, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1075)) - _1044;
        float _1088 = fma(_1077, cbModelParam._m0[31u].z, fma(_1076, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1075)) - _1048;
        float _1089 = fma(_1077, cbModelParam._m0[32u].z, fma(_1076, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1075)) - _1052;
        float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
        float _1106 = ((_1093 * _1087) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1044 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1093 * _1088) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1048 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1093 * _1089) / cbModelParam._m0[35u].z) + ((((((_1052 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        float _1143 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1110.x + (-0.5));
        float _1145 = _1143 * (_1110.y + (-0.5));
        float _1146 = _1143 * (_1110.z + (-0.5));
        float _1153 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1117.x + (-0.5));
        float _1155 = _1153 * (_1117.y + (-0.5));
        float _1156 = _1153 * (_1117.z + (-0.5));
        float _1163 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1124.x + (-0.5));
        float _1165 = _1163 * (_1124.y + (-0.5));
        float _1166 = _1163 * (_1124.z + (-0.5));
        float _1173 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1131.x + (-0.5));
        float _1175 = _1173 * (_1131.y + (-0.5));
        float _1176 = _1173 * (_1131.z + (-0.5));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = _1144 * 0.5;
        float _1181 = _1154 * 0.5;
        float _1182 = _1164 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_414, _415, _416), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3747 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1207 + 1.0))) + _1212) * _1177;
        float _1222 = _1145 * 0.5;
        float _1223 = _1155 * 0.5;
        float _1224 = _1165 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_414, _415, _416), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3780 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1249 + 1.0))) + _1254) * _1178;
        float _1264 = _1146 * 0.5;
        float _1265 = _1156 * 0.5;
        float _1266 = _1166 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_414, _415, _416), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3813 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1291 + 1.0))) + _1296) * _1179;
        _1313 = _1146;
        _1314 = _1145;
        _1315 = _1144;
        _1316 = _1156;
        _1317 = _1155;
        _1318 = _1154;
        _1319 = _1166;
        _1320 = _1165;
        _1321 = _1164;
        _1322 = _1179;
        _1323 = _1178;
        _1324 = _1177;
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
    }
    else
    {
        _1313 = _1001;
        _1314 = _1001;
        _1315 = _1001;
        _1316 = _1001;
        _1317 = _1001;
        _1318 = _1001;
        _1319 = _1001;
        _1320 = _1001;
        _1321 = _1001;
        _1322 = _1001;
        _1323 = _1001;
        _1324 = _1001;
        _1325 = 0.0;
        _1326 = 0.0;
        _1327 = 0.0;
    }
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1013)) + _1013;
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1014)) + _1014;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1015)) + _1015;
    float _1360 = fma(_1339, cbSceneParam._m0[89u].z, fma(_1338, cbSceneParam._m0[89u].y, _1337 * cbSceneParam._m0[89u].x));
    float _1363 = fma(_1339, cbSceneParam._m0[90u].z, fma(_1338, cbSceneParam._m0[90u].y, _1337 * cbSceneParam._m0[90u].x));
    float _1366 = fma(_1339, cbSceneParam._m0[91u].z, fma(_1338, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1337));
    float _1381 = _605 * 0.5;
    float _1382 = _606 * 0.5;
    float _1383 = _607 * 0.5;
    float _1384 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1387 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1390 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1424;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1397 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1000, _1004, _1007, _1010));
        float _1401 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1002, _1005, _1008, _1011));
        float _1405 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1003, _1006, _1009, _1012));
        float _1412 = dot(vec4(cbModelParam._m0[39u]), vec4(_1381, _1382, _1383, 1.0));
        _1424 = dot(vec3(isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1412) ? 0.0 : (isnan(0.0) ? _1412 : max(0.0, _1412))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1424 = 1.0;
    }
    float _1435;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1426 = dot(vec4(cbModelParam._m0[40u]), vec4(_1381, _1382, _1383, 1.0));
        _1435 = dot(vec3(isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1426) ? 0.0 : (isnan(0.0) ? _1426 : max(0.0, _1426))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1435 = 1.0;
    }
    float _1439 = (_1435 * cbModelParam._m0[1u].x) + (_1424 * (1.0 - cbModelParam._m0[1u].x));
    float _1449 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _417);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1449 : min(cbModelParam._m0[25u].z, _1449));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1499 = fma(_669, cbModelParam._m0[13u].z, fma(_665, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _661)) + cbModelParam._m0[13u].w;
        float _1503 = fma(_669, cbModelParam._m0[14u].z, fma(_665, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _661)) + cbModelParam._m0[14u].w;
        float _1507 = fma(_669, cbModelParam._m0[15u].z, fma(_665, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _661)) + cbModelParam._m0[15u].w;
        float _1510 = fma(_607, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _605));
        float _1513 = fma(_607, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _605));
        float _1516 = fma(_607, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _605));
        float _1544;
        if (_1510 > 0.0)
        {
            _1544 = abs((1.0 - _1499) / _1510);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1499 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1544 = frontier_phi_19_17_ladder;
        }
        float _1772;
        if (_1513 > 0.0)
        {
            _1772 = abs((1.0 - _1503) / _1513);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1503 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1772 = frontier_phi_28_24_ladder;
        }
        float _2029;
        if (_1516 > 0.0)
        {
            _2029 = abs((1.0 - _1507) / _1516);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1507 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2029 = frontier_phi_40_35_ladder;
        }
        float _2031 = isnan(_1772) ? _1544 : (isnan(_1544) ? _1772 : min(_1544, _1772));
        float _2032 = isnan(_2029) ? _2031 : (isnan(_2031) ? _2029 : min(_2031, _2029));
        float _2036 = (_2032 * _1510) + _1499;
        float _2037 = (_2032 * _1513) + _1503;
        float _2038 = (_2032 * _1516) + _1507;
        float _2039 = _2032 * 9.9999997473787516355514526367188e-05;
        float _2041 = (-1.0) - _2039;
        float _2043 = _2039 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2038 > _2043) || ((_2038 < _2041) || ((_2037 > _2043) || ((_2037 < _2041) || ((_2036 < _2041) || (_2036 > _2043))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2166 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2038, cbModelParam._m0[9u].z, fma(_2037, cbModelParam._m0[9u].y, _2036 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2038, cbModelParam._m0[10u].z, fma(_2037, cbModelParam._m0[10u].y, _2036 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2038, cbModelParam._m0[11u].z, fma(_2037, cbModelParam._m0[11u].y, _2036 * cbModelParam._m0[11u].x))), _1450);
            frontier_phi_18_40_ladder = _2166.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2166.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2166.x * cbModelParam._m0[1u].y;
        }
        _1532 = frontier_phi_18_40_ladder_2;
        _1534 = frontier_phi_18_40_ladder_1;
        _1536 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_605, _606, _607), _1450);
        _1532 = _1520.x * cbModelParam._m0[1u].y;
        _1534 = _1520.y * cbModelParam._m0[1u].y;
        _1536 = _1520.z * cbModelParam._m0[1u].y;
    }
    float _1540 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _417);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1540 : min(cbModelParam._m0[25u].w, _1540));
    float _1634;
    float _1636;
    float _1638;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1598 = fma(_669, cbModelParam._m0[21u].z, fma(_665, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _661)) + cbModelParam._m0[21u].w;
        float _1602 = fma(_669, cbModelParam._m0[22u].z, fma(_665, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _661)) + cbModelParam._m0[22u].w;
        float _1606 = fma(_669, cbModelParam._m0[23u].z, fma(_665, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _661)) + cbModelParam._m0[23u].w;
        float _1609 = fma(_607, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _605));
        float _1612 = fma(_607, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _605));
        float _1615 = fma(_607, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _605));
        float _1777;
        if (_1609 > 0.0)
        {
            _1777 = abs((1.0 - _1598) / _1609);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1598 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1777 = frontier_phi_30_26_ladder;
        }
        float _2056;
        if (_1612 > 0.0)
        {
            _2056 = abs((1.0 - _1602) / _1612);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1602 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2056 = frontier_phi_42_37_ladder;
        }
        float _2269;
        if (_1615 > 0.0)
        {
            _2269 = abs((1.0 - _1606) / _1615);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1606 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2269 = frontier_phi_51_48_ladder;
        }
        float _2271 = isnan(_2056) ? _1777 : (isnan(_1777) ? _2056 : min(_1777, _2056));
        float _2272 = isnan(_2269) ? _2271 : (isnan(_2271) ? _2269 : min(_2271, _2269));
        float _2276 = (_2272 * _1609) + _1598;
        float _2277 = (_2272 * _1612) + _1602;
        float _2278 = (_2272 * _1615) + _1606;
        float _2279 = _2272 * 9.9999997473787516355514526367188e-05;
        float _2280 = (-1.0) - _2279;
        float _2282 = _2279 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2278 > _2282) || ((_2278 < _2280) || ((_2277 > _2282) || ((_2277 < _2280) || ((_2276 < _2280) || (_2276 > _2282))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2476 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2278, cbModelParam._m0[17u].z, fma(_2277, cbModelParam._m0[17u].y, _2276 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2278, cbModelParam._m0[18u].z, fma(_2277, cbModelParam._m0[18u].y, _2276 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2278, cbModelParam._m0[19u].z, fma(_2277, cbModelParam._m0[19u].y, _2276 * cbModelParam._m0[19u].x))), _1541);
            frontier_phi_27_51_ladder = _2476.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2476.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2476.x * cbModelParam._m0[1u].z;
        }
        _1634 = frontier_phi_27_51_ladder_2;
        _1636 = frontier_phi_27_51_ladder_1;
        _1638 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_605, _606, _607), _1541);
        _1634 = _1618.x * cbModelParam._m0[1u].z;
        _1636 = _1618.y * cbModelParam._m0[1u].z;
        _1638 = _1618.z * cbModelParam._m0[1u].z;
    }
    float _1651 = (((_632 * _582) + _633) * _597) * ((cbModelParam._m0[1u].w * (_1634 - _1532)) + _1532);
    float _1653 = (((_632 * _584) + _633) * _597) * ((cbModelParam._m0[1u].w * (_1636 - _1534)) + _1534);
    float _1655 = (((_632 * _585) + _633) * _597) * ((cbModelParam._m0[1u].w * (_1638 - _1536)) + _1536);
    float _1658 = fma(_1655, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1655, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1655, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, _1651 * cbSceneParam._m0[91u].x));
    vec4 _1672 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_517, _518));
    float _1674 = _1672.w;
    float _1686 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1674);
    float _1687 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1674);
    float _1688 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1674);
    uvec4 _1692 = floatBitsToUint(cbInstanceData._m0[_556 + 5u]);
    uint _1694 = _1692.x * 14u;
    uint _1695 = _1694 + 13u;
    float _1702 = _597 + (-1.0);
    float _1707 = (cbLight._m0[_1695].x * _1702) + 1.0;
    float _1708 = (cbLight._m0[_1695].y * _1702) + 1.0;
    float _1709 = (cbLight._m0[_1695].z * _1702) + 1.0;
    float _1710 = (cbLight._m0[_1695].w * _1702) + 1.0;
    uint _1711 = _1694 + 5u;
    float _1717 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
    uint _1721 = _1694 + 4u;
    float _1730 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
    uint _1734 = _1694 | 1u;
    float _1745 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_414, _415, _416));
    float _1748 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_414, _415, _416));
    float _3949 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _3960 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1753 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.3183098733425140380859375;
    float _1755 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
    float _1762 = ((cbLight._m0[_1711].x * _1717) * _1755) + (((cbLight._m0[_1721].x * _1686) * _1730) * _1753);
    float _1763 = ((_1717 * cbLight._m0[_1711].y) * _1755) + (((cbLight._m0[_1721].y * _1687) * _1730) * _1753);
    float _1764 = ((_1717 * cbLight._m0[_1711].z) * _1755) + (((cbLight._m0[_1721].z * _1688) * _1730) * _1753);
    uvec4 _1769 = floatBitsToUint(cbLight._m0[_1694 + 12u]);
    bool _1771 = _1769.x == 0u;
    float _1782;
    float _1784;
    float _1786;
    if (_1771)
    {
        _1782 = _1762;
        _1784 = _1763;
        _1786 = _1764;
    }
    else
    {
        uint _1790 = _1694 + 6u;
        float _1806 = (dot(vec3(cbLight._m0[_1694 + 2u].xyz), vec3(_414, _415, _416)) * 0.5) + 0.5;
        float _1807 = _1806 * _1806;
        float _3971 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1809 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
        _1782 = (((cbLight._m0[_1790].x * 0.3183098733425140380859375) * _1808) * _1809) + _1762;
        _1784 = (((cbLight._m0[_1790].y * 0.3183098733425140380859375) * _1808) * _1809) + _1763;
        _1786 = (((cbLight._m0[_1790].z * 0.3183098733425140380859375) * _1808) * _1809) + _1764;
    }
    bool _1789 = _1769.y == 0u;
    float _1827;
    float _1829;
    float _1831;
    if (_1789)
    {
        _1827 = _1782;
        _1829 = _1784;
        _1831 = _1786;
    }
    else
    {
        uint _2000 = _1694 + 7u;
        float _2016 = (dot(vec3(cbLight._m0[_1694 + 3u].xyz), vec3(_414, _415, _416)) * 0.5) + 0.5;
        float _2017 = _2016 * _2016;
        float _3987 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2018 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _2019 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
        _1827 = (((cbLight._m0[_2000].x * 0.3183098733425140380859375) * _2018) * _2019) + _1782;
        _1829 = (((cbLight._m0[_2000].y * 0.3183098733425140380859375) * _2018) * _2019) + _1784;
        _1831 = (((cbLight._m0[_2000].z * 0.3183098733425140380859375) * _2018) * _2019) + _1786;
    }
    uint _1834 = _1694 + 8u;
    float _1847 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1694].w)) * _417) * 0.949999988079071044921875);
    float _1848 = _1847 * _1847;
    float _1849 = cbLight._m0[_1694].x + _496;
    float _1850 = cbLight._m0[_1694].y + _497;
    float _1851 = cbLight._m0[_1694].z + _498;
    float _1855 = inversesqrt(dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851)));
    float _1856 = _1855 * _1849;
    float _1857 = _1855 * _1850;
    float _1858 = _1855 * _1851;
    float _1859 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_1694].xyz));
    float _4003 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1862 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _1863 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1864 = dot(vec3(_414, _415, _416), vec3(_1856, _1857, _1858));
    float _4025 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1867 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1868 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_1856, _1857, _1858));
    float _4036 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1872 = _1848 * _1848;
    float _1876 = ((_1867 * _1867) * (_1872 + (-1.0))) + 1.0;
    float _1884 = exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0);
    float _1885 = 0.959999978542327880859375 - _579;
    float _1887 = 0.959999978542327880859375 - _580;
    float _1888 = 0.959999978542327880859375 - _581;
    float _1895 = 1.0 - _1848;
    float _1906 = (0.5 / (((_1863 * ((_1862 * _1895) + _1848)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _1895) + _1848) * _1862))) * _1862;
    float _4047 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1908 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1872 / ((_1876 * _1876) * 3.141590118408203125));
    uint _1922 = _1694 + 9u;
    float _1933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1734].w)) * _417) * 0.949999988079071044921875);
    float _1934 = _1933 * _1933;
    float _1935 = cbLight._m0[_1734].x + _496;
    float _1936 = cbLight._m0[_1734].y + _497;
    float _1937 = cbLight._m0[_1734].z + _498;
    float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
    float _1942 = _1941 * _1935;
    float _1943 = _1941 * _1936;
    float _1944 = _1941 * _1937;
    float _1945 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_1734].xyz));
    float _4058 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _1949 = dot(vec3(_414, _415, _416), vec3(_1942, _1943, _1944));
    float _4069 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _1953 = dot(vec3(cbLight._m0[_1734].xyz), vec3(_1942, _1943, _1944));
    float _4080 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1957 = _1934 * _1934;
    float _1961 = ((_1952 * _1952) * (_1957 + (-1.0))) + 1.0;
    float _1968 = exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0);
    float _1975 = 1.0 - _1934;
    float _1985 = (0.5 / (((_1863 * ((_1948 * _1975) + _1934)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _1975) + _1934) * _1948))) * _1948;
    float _4091 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1987 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1957 / ((_1961 * _1961) * 3.141590118408203125));
    float _1997 = (((((_1968 * _1885) + _582) * cbLight._m0[_1922].x) * _1987) * _1717) + ((((cbLight._m0[_1834].x * _1686) * ((_1884 * _1885) + _582)) * _1908) * _1730);
    float _1998 = (((((_1968 * _1887) + _584) * cbLight._m0[_1922].y) * _1987) * _1717) + ((((cbLight._m0[_1834].y * _1687) * ((_1884 * _1887) + _584)) * _1908) * _1730);
    float _1999 = (((((_1968 * _1888) + _585) * cbLight._m0[_1922].z) * _1987) * _1717) + ((((cbLight._m0[_1834].z * _1688) * ((_1884 * _1888) + _585)) * _1908) * _1730);
    float _2061;
    float _2063;
    float _2065;
    if (_1771)
    {
        _2061 = _1997;
        _2063 = _1998;
        _2065 = _1999;
    }
    else
    {
        uint _2067 = _1694 + 2u;
        uint _2071 = _1694 + 10u;
        float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _417) * 0.949999988079071044921875);
        float _2086 = _2085 * _2085;
        float _2087 = cbLight._m0[_2067].x + _496;
        float _2088 = cbLight._m0[_2067].y + _497;
        float _2089 = cbLight._m0[_2067].z + _498;
        float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
        float _2094 = _2093 * _2087;
        float _2095 = _2093 * _2088;
        float _2096 = _2093 * _2089;
        float _2097 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_2067].xyz));
        float _4102 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2101 = dot(vec3(_414, _415, _416), vec3(_2094, _2095, _2096));
        float _4113 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2104 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2105 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2094, _2095, _2096));
        float _4124 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2109 = _2086 * _2086;
        float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
        float _2120 = exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0);
        float _2127 = 1.0 - _2086;
        float _2137 = (0.5 / (((_1863 * ((_2100 * _2127) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _2127) + _2086) * _2100))) * _2100;
        float _4135 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2139 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
        float _2140 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
        _2061 = (((((_2120 * _1885) + _582) * cbLight._m0[_2071].x) * _2139) * _2140) + _1997;
        _2063 = (((((_2120 * _1887) + _584) * cbLight._m0[_2071].y) * _2139) * _2140) + _1998;
        _2065 = (((((_2120 * _1888) + _585) * cbLight._m0[_2071].z) * _2139) * _2140) + _1999;
    }
    float _2175;
    float _2177;
    float _2179;
    if (_1789)
    {
        _2175 = _2061;
        _2177 = _2063;
        _2179 = _2065;
    }
    else
    {
        uint _2186 = _1694 + 3u;
        uint _2190 = _1694 + 11u;
        float _2204 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _417) * 0.949999988079071044921875);
        float _2205 = _2204 * _2204;
        float _2206 = cbLight._m0[_2186].x + _496;
        float _2207 = cbLight._m0[_2186].y + _497;
        float _2208 = cbLight._m0[_2186].z + _498;
        float _2212 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
        float _2213 = _2212 * _2206;
        float _2214 = _2212 * _2207;
        float _2215 = _2212 * _2208;
        float _2216 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_2186].xyz));
        float _4151 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2219 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2220 = dot(vec3(_414, _415, _416), vec3(_2213, _2214, _2215));
        float _4162 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2223 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2224 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2213, _2214, _2215));
        float _4173 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2228 = _2205 * _2205;
        float _2232 = ((_2223 * _2223) * (_2228 + (-1.0))) + 1.0;
        float _2239 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
        float _2246 = 1.0 - _2205;
        float _2256 = (0.5 / (((_1863 * ((_2219 * _2246) + _2205)) + 9.9999999392252902907785028219223e-09) + (((_1863 * _2246) + _2205) * _2219))) * _2219;
        float _4184 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2258 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2228 / ((_2232 * _2232) * 3.141590118408203125));
        float _2259 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
        _2175 = (((((_2239 * _1885) + _582) * cbLight._m0[_2190].x) * _2258) * _2259) + _2061;
        _2177 = (((((_2239 * _1887) + _584) * cbLight._m0[_2190].y) * _2258) * _2259) + _2063;
        _2179 = (((((_2239 * _1888) + _585) * cbLight._m0[_2190].z) * _2258) * _2259) + _2065;
    }
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    float _2403;
    if (_1692.y == 0u)
    {
        float _2334 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2334;
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2334;
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2334;
        uvec4 _2349 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2350 = _2349.x;
        uint _2361 = uint((float(_2349.y) * floor(float(uint(cbSceneParam._m0[85u].y * _518) / _2350))) + floor(float(uint(cbSceneParam._m0[85u].x * _517) / _2350)));
        float _2371 = (log2(_2337 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2372 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        uint _2375 = uint(isnan(14.0) ? _2372 : (isnan(_2372) ? 14.0 : min(_2372, 14.0)));
        uvec4 _2380 = texelFetch(g_lightClusterGridBuffer, int(((_2375 << 2u) + (_2361 << 6u)) >> 2u));
        uint _2381 = _2380.x;
        uint _2382 = _2349.z;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        if (((((1u << ((_2382 >> 4u) & 15u)) + 4294967295u) & _2381) == 0u) || ((_2382 & 240u) == 0u))
        {
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
            _2487 = 0.0;
            _2489 = 0.0;
            _2491 = 0.0;
        }
        else
        {
            float _2482;
            float _2484;
            float _2486;
            float _2488;
            float _2490;
            float _2492;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            uint _2639 = 0u;
            uint _2648;
            bool _2649;
            for (;;)
            {
                _2648 = texelFetch(g_lightClassification, int((((_2375 << 5u) + (_2361 << 9u)) + (_2639 << 2u)) >> 2u)).x;
                _2649 = _2648 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2649)
                {
                    frontier_phi_68_pred = _2635;
                    frontier_phi_68_pred_1 = _2638;
                    frontier_phi_68_pred_2 = _2637;
                    frontier_phi_68_pred_3 = _2636;
                    frontier_phi_68_pred_4 = _2634;
                    frontier_phi_68_pred_5 = _2633;
                }
                else
                {
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    uint _2784;
                    _2778 = _2633;
                    _2779 = _2634;
                    _2780 = _2635;
                    _2781 = _2636;
                    _2782 = _2637;
                    _2783 = _2638;
                    _2784 = _2648;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    for (;;)
                    {
                        uint _2788 = uint(findLSB(_2784)) + (_2639 << 5u);
                        uint _2785 = (_2784 + 4294967295u) & _2784;
                        uint _2790 = _2788 * 48u;
                        vec4 _2804 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2790)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 3u)).x));
                        uint _2810 = (_2788 * 48u) + 4u;
                        vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 3u)).x));
                        uint _2829 = (_2788 * 48u) + 8u;
                        vec3 _2840 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x));
                        float _2844 = _2804.x - _2335;
                        float _2845 = _2804.y - _2336;
                        float _2846 = _2804.z - _2337;
                        float _2847 = dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846));
                        float _2850 = inversesqrt(_2847);
                        float _2851 = _2850 * _2844;
                        float _2852 = _2850 * _2845;
                        float _2853 = _2850 * _2846;
                        float _2854 = dot(vec3(_537, _540, _543), vec3(_2851, _2852, _2853));
                        float _2859 = 1.0 - (_2847 * _2804.w);
                        float _4210 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2860 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2861 = sqrt(_2847) * _2823.w;
                        float _2864 = 1.39999997615814208984375 / (_2861 + 1.39999997615814208984375);
                        float _2865 = _2864 * _2864;
                        float _2868 = ((1.0 - _2865) * _2854) + _2865;
                        float _2871 = _2861 * _2861;
                        float _2875 = ((isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))) * _2860) / ((_2871 * 0.699999988079071044921875) + 1.0);
                        float _2879 = (-0.0) - _2335;
                        float _2880 = (-0.0) - _2336;
                        float _2881 = (-0.0) - _2337;
                        float _2885 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
                        float _2886 = _2885 * _2879;
                        float _2887 = _2885 * _2880;
                        float _2888 = _2885 * _2881;
                        float _2896 = exp2(log2(1.0 / ((_2871 * 3.5) + 5.0)) * 0.25);
                        float _2897 = 1.0 - _613;
                        float _2904 = sqrt(1.0 - ((1.0 - (_2897 * _2897)) * (1.0 - (_2896 * _2896))));
                        float _2905 = _2904 * _2904;
                        float _2906 = _2905 * _2905;
                        float _2907 = _2886 + _2851;
                        float _2908 = _2887 + _2852;
                        float _2909 = _2888 + _2853;
                        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
                        float _2917 = dot(vec3(_537, _540, _543), vec3(_2886, _2887, _2888));
                        float _4226 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2920 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2921 = dot(vec3(_537, _540, _543), vec3(_2913 * _2907, _2913 * _2908, _2913 * _2909));
                        float _4237 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2924 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2928 = ((_2924 * _2924) * (_2906 + (-1.0))) + 1.0;
                        float _2929 = _2864 * _2905;
                        float _2930 = _2929 * _2929;
                        float _2933 = ((1.0 - _2930) * _2854) + _2930;
                        float _4248 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2934 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2935 = 1.0 - _2905;
                        float _2945 = (0.5 / (((_2934 * ((_2920 * _2935) + _2905)) + 9.9999999392252902907785028219223e-09) + (((_2934 * _2935) + _2905) * _2920))) * _2934;
                        float _4259 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2956 = (((_2906 * 3.1415927410125732421875) * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) / ((_2928 * _2928) * ((_2871 * 2.1991131305694580078125) + 3.141590118408203125))) * _2860;
                        _2708 = (_2875 * _2823.x) + _2781;
                        _2709 = (_2875 * _2823.y) + _2782;
                        _2710 = (_2875 * _2823.z) + _2783;
                        _2705 = (_2956 * _2840.x) + _2778;
                        _2706 = (_2956 * _2840.y) + _2779;
                        _2707 = (_2956 * _2840.z) + _2780;
                        if (_2785 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2778 = _2705;
                            _2779 = _2706;
                            _2780 = _2707;
                            _2781 = _2708;
                            _2782 = _2709;
                            _2783 = _2710;
                            _2784 = _2785;
                        }
                    }
                    frontier_phi_68_pred = _2707;
                    frontier_phi_68_pred_1 = _2710;
                    frontier_phi_68_pred_2 = _2709;
                    frontier_phi_68_pred_3 = _2708;
                    frontier_phi_68_pred_4 = _2706;
                    frontier_phi_68_pred_5 = _2705;
                }
                _2486 = frontier_phi_68_pred;
                _2492 = frontier_phi_68_pred_1;
                _2490 = frontier_phi_68_pred_2;
                _2488 = frontier_phi_68_pred_3;
                _2484 = frontier_phi_68_pred_4;
                _2482 = frontier_phi_68_pred_5;
                uint _2640 = _2639 + 1u;
                if (_2640 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2633 = _2482;
                    _2634 = _2484;
                    _2635 = _2486;
                    _2636 = _2488;
                    _2637 = _2490;
                    _2638 = _2492;
                    _2639 = _2640;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
            _2487 = _2488;
            _2489 = _2490;
            _2491 = _2492;
        }
        uvec4 _2495 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2496 = _2495.z;
        uint _2498 = (_2496 >> 8u) & 15u;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        if (((4294967295u << _2498) & _2381) == 0u)
        {
            _2601 = _2481;
            _2603 = _2483;
            _2605 = _2485;
            _2607 = _2487;
            _2609 = _2489;
            _2611 = _2491;
        }
        else
        {
            float _2626 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
            float _2627 = _2626 * _2335;
            float _2628 = _2626 * _2336;
            float _2629 = _2626 * _2337;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2498 < ((_2496 >> 12u) & 15u))
            {
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2761 = _2481;
                float _2762 = _2483;
                float _2763 = _2485;
                float _2764 = _2487;
                float _2765 = _2489;
                float _2766 = _2491;
                uint _2767 = _2498;
                uint _2776;
                bool _2777;
                for (;;)
                {
                    _2776 = texelFetch(g_lightClassification, int((((_2375 << 5u) + (_2361 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                    _2777 = _2776 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2777)
                    {
                        frontier_phi_79_pred = _2766;
                        frontier_phi_79_pred_1 = _2765;
                        frontier_phi_79_pred_2 = _2764;
                        frontier_phi_79_pred_3 = _2763;
                        frontier_phi_79_pred_4 = _2762;
                        frontier_phi_79_pred_5 = _2761;
                    }
                    else
                    {
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _2983 = _2761;
                        float _2984 = _2762;
                        float _2985 = _2763;
                        float _2986 = _2764;
                        float _2987 = _2765;
                        float _2988 = _2766;
                        uint _2989 = _2776;
                        uint _2990;
                        vec4 _3015;
                        float _3016;
                        vec4 _3031;
                        vec3 _3043;
                        vec4 _3059;
                        vec4 _3075;
                        float _3122;
                        bool _3123;
                        for (;;)
                        {
                            uint _3000 = ((_2767 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2989));
                            _2990 = (_2989 + 4294967295u) & _2989;
                            uint _3002 = _3000 * 40u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            _3016 = _3015.w;
                            uint _3018 = (_3000 * 40u) + 4u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3033 = (_3000 * 40u) + 8u;
                            _3043 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x));
                            uint _3046 = (_3000 * 40u) + 16u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3062 = (_3000 * 40u) + 20u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3078 = (_3000 * 40u) + 24u;
                            vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3097 = (_3000 * 40u) + 28u;
                            vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            _3122 = fma(_2337, _3110.z, fma(_2336, _3110.y, _3110.x * _2335)) + _3110.w;
                            _3123 = !((fma(_2337, _3091.z, fma(_2336, _3091.y, _3091.x * _2335)) + _3091.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3123)
                            {
                                float _3150 = _3015.x - _2335;
                                float _3151 = _3015.y - _2336;
                                float _3152 = _3015.z - _2337;
                                float _3153 = dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152));
                                float _3156 = inversesqrt(_3153);
                                float _3157 = _3156 * _3150;
                                float _3158 = _3156 * _3151;
                                float _3159 = _3156 * _3152;
                                float _3163 = 1.0 - (_3153 / (_3016 * _3016));
                                float _4270 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3164 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3168 = sqrt(_3153) * _3031.w;
                                float _3170 = 1.39999997615814208984375 / (_3168 + 1.39999997615814208984375);
                                float _3171 = _3170 * _3170;
                                float _3174 = ((1.0 - _3171) * dot(vec3(_3157, _3158, _3159), vec3(_537, _540, _543))) + _3171;
                                float _3177 = _3168 * _3168;
                                float _3181 = (fma(_2337, _3059.z, fma(_2336, _3059.y, _3059.x * _2335)) + _3059.w) / _3122;
                                float _3182 = (fma(_2337, _3075.z, fma(_2336, _3075.y, _3075.x * _2335)) + _3075.w) / _3122;
                                float _3186 = 1.0 - dot(vec2(_3181, _3182), vec2(_3181, _3182));
                                float _4286 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3188 = _3187 * (((isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))) * _3164) / ((_3177 * 0.699999988079071044921875) + 1.0));
                                float _3200 = exp2(log2(1.0 / ((_3177 * 3.5) + 5.0)) * 0.25);
                                float _3201 = 1.0 - _613;
                                float _3208 = sqrt(1.0 - ((1.0 - (_3201 * _3201)) * (1.0 - (_3200 * _3200))));
                                float _3209 = _3208 * _3208;
                                float _3210 = _3209 * _3209;
                                float _3211 = _3157 - _2627;
                                float _3212 = _3158 - _2628;
                                float _3213 = _3159 - _2629;
                                float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                                float _3221 = dot(vec3(_537, _540, _543), vec3((-0.0) - _2627, (-0.0) - _2628, (-0.0) - _2629));
                                float _4297 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3224 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3225 = dot(vec3(_537, _540, _543), vec3(_3217 * _3211, _3217 * _3212, _3217 * _3213));
                                float _4308 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3228 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3232 = ((_3228 * _3228) * (_3210 + (-1.0))) + 1.0;
                                float _3233 = _3170 * _3209;
                                float _3234 = _3233 * _3233;
                                float _3240 = ((1.0 - _3234) * dot(vec3(_537, _540, _543), vec3(_3157, _3158, _3159))) + _3234;
                                float _4319 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3242 = 1.0 - _3209;
                                float _3252 = (0.5 / (((_3241 * ((_3224 * _3242) + _3209)) + 9.9999999392252902907785028219223e-09) + (((_3241 * _3242) + _3209) * _3224))) * _3241;
                                float _4330 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3262 = (_3187 * _3164) * (((_3210 * 3.1415927410125732421875) * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) / ((_3232 * _3232) * ((_3177 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3188 * _3031.z;
                                frontier_phi_85_pred_1 = _3188 * _3031.y;
                                frontier_phi_85_pred_2 = _3188 * _3031.x;
                                frontier_phi_85_pred_3 = _3262 * _3043.z;
                                frontier_phi_85_pred_4 = _3262 * _3043.y;
                                frontier_phi_85_pred_5 = _3262 * _3043.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3271 = frontier_phi_85_pred;
                            _3270 = frontier_phi_85_pred_1;
                            _3269 = frontier_phi_85_pred_2;
                            _3268 = frontier_phi_85_pred_3;
                            _3267 = frontier_phi_85_pred_4;
                            _3266 = frontier_phi_85_pred_5;
                            _2973 = _3269 + _2986;
                            _2974 = _3270 + _2987;
                            _2975 = _3271 + _2988;
                            _2970 = _3266 + _2983;
                            _2971 = _3267 + _2984;
                            _2972 = _3268 + _2985;
                            if (_2990 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2990;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2975;
                        frontier_phi_79_pred_1 = _2974;
                        frontier_phi_79_pred_2 = _2973;
                        frontier_phi_79_pred_3 = _2972;
                        frontier_phi_79_pred_4 = _2971;
                        frontier_phi_79_pred_5 = _2970;
                    }
                    _2612 = frontier_phi_79_pred;
                    _2610 = frontier_phi_79_pred_1;
                    _2608 = frontier_phi_79_pred_2;
                    _2606 = frontier_phi_79_pred_3;
                    _2604 = frontier_phi_79_pred_4;
                    _2602 = frontier_phi_79_pred_5;
                    uint _2768 = _2767 + 1u;
                    if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2761 = _2602;
                        _2762 = _2604;
                        _2763 = _2606;
                        _2764 = _2608;
                        _2765 = _2610;
                        _2766 = _2612;
                        _2767 = _2768;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2608;
                frontier_phi_60_61_ladder_1 = _2612;
                frontier_phi_60_61_ladder_2 = _2610;
                frontier_phi_60_61_ladder_3 = _2606;
                frontier_phi_60_61_ladder_4 = _2604;
                frontier_phi_60_61_ladder_5 = _2602;
            }
            else
            {
                frontier_phi_60_61_ladder = _2487;
                frontier_phi_60_61_ladder_1 = _2491;
                frontier_phi_60_61_ladder_2 = _2489;
                frontier_phi_60_61_ladder_3 = _2485;
                frontier_phi_60_61_ladder_4 = _2483;
                frontier_phi_60_61_ladder_5 = _2481;
            }
            _2601 = frontier_phi_60_61_ladder_5;
            _2603 = frontier_phi_60_61_ladder_4;
            _2605 = frontier_phi_60_61_ladder_3;
            _2607 = frontier_phi_60_61_ladder;
            _2609 = frontier_phi_60_61_ladder_2;
            _2611 = frontier_phi_60_61_ladder_1;
        }
        float _2616 = isnan(1.0) ? _597 : (isnan(_597) ? 1.0 : min(_597, 1.0));
        _2393 = (_2616 * _2607) + _1827;
        _2395 = (_2616 * _2609) + _1829;
        _2397 = (_2616 * _2611) + _1831;
        _2399 = ((_2601 * _582) * _2616) + _2175;
        _2401 = ((_2603 * _584) * _2616) + _2177;
        _2403 = ((_2605 * _585) * _2616) + _2179;
    }
    else
    {
        _2393 = _1827;
        _2395 = _1829;
        _2397 = _1831;
        _2399 = _2175;
        _2401 = _2177;
        _2403 = _2179;
    }
    float _4346 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4357 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4368 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _2420 = ((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2393 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _597))) + ((_2399 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1439)) * cbPerFrame._m0[3u].x);
    float _2421 = ((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2395 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _597))) + ((_2401 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1439)) * cbPerFrame._m0[3u].x);
    float _2422 = ((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2397 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _597))) + ((_2403 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1439)) * cbPerFrame._m0[3u].x);
    uint _2423 = _556 + 6u;
    float _2431 = _517 / cbSceneParam._m0[86u].x;
    float _2432 = _518 / cbSceneParam._m0[86u].y;
    vec4 _2446 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2431, _2432, (log2((isnan(cbSceneParam._m0[77u].w) ? _437 : (isnan(_437) ? cbSceneParam._m0[77u].w : min(_437, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2448 = _2446.x;
    float _2449 = _2446.y;
    float _2450 = _2446.z;
    float _2451 = _2446.w;
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    if (_437 > cbSceneParam._m0[78u].w)
    {
        float _2506 = isnan(_437) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _437 : min(cbSceneParam._m0[80u].w, _437));
        float _2507 = _2506 / _437;
        float _2518 = _2507 * _489;
        float _2519 = _490 * _2507;
        float _2520 = (-0.0) - _2519;
        float _2521 = _2507 * _491;
        float _2523 = (cbSceneParam._m0[77u].w * _2520) / _2506;
        float _2524 = _2523 + cbSceneParam._m0[79u].w;
        float _2525 = cbSceneParam._m0[79u].w - _2519;
        float _2531 = sqrt(((_2518 * _2518) + (_2519 * _2519)) + (_2521 * _2521));
        float _2534 = (1.0 - (cbSceneParam._m0[77u].w / _2506)) * _2531;
        float _2539 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2541 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2718;
        if (abs((_2520 - _2523) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2718 = ((((_2524 > 0.0) ? exp2(_2539 * _2524) : (2.0 - exp2(_2541 * _2524))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2534;
        }
        else
        {
            float _2662 = 1.0 / cbSceneParam._m0[80u].x;
            float _2663 = isnan(_2525) ? _2524 : (isnan(_2524) ? _2525 : max(_2524, _2525));
            float _2664 = isnan(_2525) ? _2524 : (isnan(_2524) ? _2525 : min(_2524, _2525));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            float _2674 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : min(_2664, 0.0));
            _2718 = ((abs(_2531 / _2520) * cbSceneParam._m0[80u].y) * ((((_2673 - _2674) * 2.0) - ((exp2(_2539 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0)))) - exp2(_2539 * (isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0))))) * _2662)) - ((exp2(_2541 * _2673) - exp2(_2541 * _2674)) * _2662))) + (_2534 * cbSceneParam._m0[80u].z);
        }
        vec4 _2720 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2431, _2432, 1.0), 0.0);
        float _2729 = exp2((_2718 * (-1.44269502162933349609375)) * (1.0 - _2720.w));
        float _2730 = log2(_2729);
        float _2746 = log2(_2451);
        _2543 = (exp2(_2746 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2730 * cbSceneParam._m0[78u].x)) * _2720.x) / cbSceneParam._m0[78u].x)) + _2448;
        _2545 = (exp2(_2746 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2730 * cbSceneParam._m0[78u].y)) * _2720.y) / cbSceneParam._m0[78u].y)) + _2449;
        _2547 = (exp2(_2746 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2730 * cbSceneParam._m0[78u].z)) * _2720.z) / cbSceneParam._m0[78u].z)) + _2450;
        _2549 = _2729 * _2451;
    }
    else
    {
        _2543 = _2448;
        _2545 = _2449;
        _2547 = _2450;
        _2549 = _2451;
    }
    bool _2756;
    vec4 _2559;
    vec4 _2581;
    float _2583;
    float _2587;
    float _2588;
    float _2589;
    float _2590;
    bool _2600;
    for (;;)
    {
        _2559 = cbMatDynParam._m0[0u];
        float _2561 = roundEven(_2559.y);
        bool _2562 = _2561 == 3.0;
        float _2563 = log2(_2549);
        float _2570 = exp2(_2563 * cbSceneParam._m0[78u].x) * _2420;
        float _2571 = exp2(_2563 * cbSceneParam._m0[78u].y) * _2421;
        float _2572 = exp2(_2563 * cbSceneParam._m0[78u].z) * _2422;
        float _2579 = _505 + (-0.5);
        _2581 = cbMtdParam._m0[1u];
        _2583 = _2581.y * _2579;
        float _2586 = (_2561 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2587 = _2586 * (_2562 ? _2570 : (_2570 + (cbSceneParam._m0[72u].w * _2543)));
        _2588 = _2586 * (_2562 ? _2571 : (_2571 + (cbSceneParam._m0[72u].w * _2545)));
        _2589 = _2586 * (_2562 ? _2572 : (_2572 + (cbSceneParam._m0[72u].w * _2547)));
        _2590 = _2579 * 0.999000012874603271484375;
        _2600 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2600)
        {
            if ((cbInstanceData._m0[_556 + 7u].x + _2590) < 0.5)
            {
                _2756 = true;
                break;
            }
        }
        uint _2697 = _558 + uint(_2559.w);
        if ((cbInstanceData._m0[_2697].w < 1.0) && ((cbInstanceData._m0[_2697].w + _2590) < 0.5))
        {
            _2756 = true;
            break;
        }
        if ((_2583 + 1.0) < _2581.x)
        {
            _2756 = true;
            break;
        }
        _2756 = false;
        break;
    }
    float _2961;
    if (_2756)
    {
        discard_state = true;
        _2961 = 0.0;
    }
    else
    {
        _2961 = cbInstanceData._m0[_2423].w;
    }
    SV_Target.x = _2587;
    SV_Target.y = _2588;
    SV_Target.z = _2589;
    SV_Target.w = _2961;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2423].w;
    discard_exit();
}


