#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _956;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _239 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _244 = _239.z;
    float _248 = (_239.x * 2.0) + (-1.0);
    float _250 = (_239.y * 2.0) + (-1.0);
    float _251 = dot(vec2(_248, _250), vec2(_248, _250));
    float _3316 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _257 = sqrt(1.0 - (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))));
    float _260 = fma(_257, _217, fma(_250, _210, _248 * _196));
    float _263 = fma(_257, _218, fma(_250, _211, _248 * _197));
    float _266 = fma(_257, _219, fma(_250, _212, _248 * _198));
    float _270 = inversesqrt(dot(vec3(_260, _263, _266), vec3(_260, _263, _266)));
    float _299 = dot(vec4(texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w))), vec4(cbMtdParam._m0[9u].x)) + dot(vec4(_270 * _260, _270 * _263, _270 * _266, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _3327 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _300 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    vec4 _312 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _330 = _328.x;
    float _331 = _328.y;
    float _332 = _328.z;
    float _339 = ((_312.x - _330) * _300) + _330;
    float _340 = ((_312.y - _331) * _300) + _331;
    float _341 = ((_312.z - _332) * _300) + _332;
    vec4 _354 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _356 = _354.x;
    float _358 = _356 - (_356 * _300);
    vec4 _370 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _377 = (_370.x * 2.0) + (-1.0);
    float _378 = (_370.y * 2.0) + (-1.0);
    float _379 = dot(vec2(_377, _378), vec2(_377, _378));
    float _3338 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _387 = ((_370.z - _244) * _300) + _244;
    float _394 = ((_377 - _248) * _300) + _248;
    float _395 = ((_378 - _250) * _300) + _250;
    float _396 = ((sqrt(1.0 - (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) - _257) * _300) + _257;
    float _399 = fma(_396, _217, fma(_395, _210, _394 * _196));
    float _402 = fma(_396, _218, fma(_395, _211, _394 * _197));
    float _405 = fma(_396, _219, fma(_395, _212, _394 * _198));
    float _409 = inversesqrt(dot(vec3(_399, _402, _405), vec3(_399, _402, _405)));
    float _410 = _409 * _399;
    float _411 = _409 * _402;
    float _412 = _409 * _405;
    float _3349 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _413 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _3360 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3371 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3382 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3393 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _417 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _433 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _475 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _485 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _475);
    float _486 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _475);
    float _487 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _475);
    float _491 = inversesqrt(dot(vec3(_485, _486, _487), vec3(_485, _486, _487)));
    float _492 = _485 * _491;
    float _493 = _486 * _491;
    float _494 = _487 * _491;
    float _500 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _501 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _521 = fma(_412, cbSceneParam._m0[5u].z, fma(_411, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _410));
    float _524 = fma(_412, cbSceneParam._m0[6u].z, fma(_411, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _410));
    float _527 = fma(_412, cbSceneParam._m0[7u].z, fma(_411, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _410));
    uint _540 = uint(roundEven(NORMAL.w)) * 13u;
    uint _543 = (_540 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _549 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_543].x;
    float _550 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) * cbInstanceData._m0[_543].y;
    float _551 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)))) * cbInstanceData._m0[_543].z;
    float _3404 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _554 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _555 = 1.0 - _417;
    float _556 = _552 * _555;
    float _557 = _553 * _555;
    float _558 = _554 * _555;
    float _563 = (_552 + (-0.039999999105930328369140625)) * _417;
    float _564 = (_553 + (-0.039999999105930328369140625)) * _417;
    float _565 = (_554 + (-0.039999999105930328369140625)) * _417;
    float _566 = _563 + 0.039999999105930328369140625;
    float _568 = _564 + 0.039999999105930328369140625;
    float _569 = _565 + 0.039999999105930328369140625;
    vec4 _578 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _500, cbSceneParam._m0[86u].y * _501));
    float _581 = _578.x * TEXCOORD.z;
    float _582 = dot(vec3(_410, _411, _412), vec3(_492, _493, _494));
    float _585 = _582 * 2.0;
    float _589 = (_585 * _410) - _492;
    float _590 = (_585 * _411) - _493;
    float _591 = (_585 * _412) - _494;
    float _595 = abs(dot(vec3(_492, _493, _494), vec3(_410, _411, _412)));
    float _3437 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _597 = sqrt(_413);
    float _610 = exp2((_597 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_597 * 3.0));
    float _616 = (1.0 - _610) * ((_597 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _617 = _610 * _597;
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _955;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _680 = fma(_653, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _645));
        float _684 = fma(_653, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _645));
        float _688 = fma(_653, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _645));
        float _713 = _645 + _410;
        float _714 = _649 + _411;
        float _715 = _653 + _412;
        float _725 = fma(_715, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713)) - _680;
        float _726 = fma(_715, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713)) - _684;
        float _727 = fma(_715, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713)) - _688;
        float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
        float _744 = ((_731 * _725) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_680 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_731 * _726) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_684 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _746 = ((_731 * _727) / cbModelParam._m0[34u].z) + ((((((_688 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        float _783 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_749.x + (-0.5));
        float _785 = _783 * (_749.y + (-0.5));
        float _786 = _783 * (_749.z + (-0.5));
        float _793 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_756.x + (-0.5));
        float _795 = _793 * (_756.y + (-0.5));
        float _796 = _793 * (_756.z + (-0.5));
        float _803 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_763.x + (-0.5));
        float _805 = _803 * (_763.y + (-0.5));
        float _806 = _803 * (_763.z + (-0.5));
        float _813 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_770.x + (-0.5));
        float _815 = _813 * (_770.y + (-0.5));
        float _816 = _813 * (_770.z + (-0.5));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = _784 * 0.5;
        float _821 = _794 * 0.5;
        float _822 = _804 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _837 = (dot(vec3(_410, _411, _412), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _847 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3485 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_849 + 1.0))) + _854) * _817;
        float _864 = _785 * 0.5;
        float _865 = _795 * 0.5;
        float _866 = _805 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _880 = (dot(vec3(_410, _411, _412), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _889 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3518 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_891 + 1.0))) + _896) * _818;
        float _906 = _786 * 0.5;
        float _907 = _796 * 0.5;
        float _908 = _806 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_410, _411, _412), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3551 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_933 + 1.0))) + _938) * _819;
        _955 = _786;
        _957 = _785;
        _958 = _784;
        _959 = _796;
        _960 = _795;
        _961 = _794;
        _962 = _806;
        _963 = _805;
        _964 = _804;
        _965 = _819;
        _966 = _818;
        _967 = _817;
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
    }
    else
    {
        _955 = _956;
        _957 = _956;
        _958 = _956;
        _959 = _956;
        _960 = _956;
        _961 = _956;
        _962 = _956;
        _963 = _956;
        _964 = _956;
        _965 = _956;
        _966 = _956;
        _967 = _956;
        _968 = 0.0;
        _969 = 0.0;
        _970 = 0.0;
    }
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _996 = fma(_653, cbModelParam._m0[30u].z, fma(_649, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _645));
        float _1000 = fma(_653, cbModelParam._m0[31u].z, fma(_649, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _645));
        float _1004 = fma(_653, cbModelParam._m0[32u].z, fma(_649, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _645));
        float _1027 = _645 + _410;
        float _1028 = _649 + _411;
        float _1029 = _653 + _412;
        float _1039 = fma(_1029, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1027)) - _996;
        float _1040 = fma(_1029, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1027)) - _1000;
        float _1041 = fma(_1029, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1027)) - _1004;
        float _1045 = inversesqrt(dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041)));
        float _1058 = ((_1045 * _1039) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_996 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1045 * _1040) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1000 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1045 * _1041) / cbModelParam._m0[35u].z) + ((((((_1004 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        float _1095 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1062.x + (-0.5));
        float _1097 = _1095 * (_1062.y + (-0.5));
        float _1098 = _1095 * (_1062.z + (-0.5));
        float _1105 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1069.x + (-0.5));
        float _1107 = _1105 * (_1069.y + (-0.5));
        float _1108 = _1105 * (_1069.z + (-0.5));
        float _1115 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1076.x + (-0.5));
        float _1117 = _1115 * (_1076.y + (-0.5));
        float _1118 = _1115 * (_1076.z + (-0.5));
        float _1125 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1083.x + (-0.5));
        float _1127 = _1125 * (_1083.y + (-0.5));
        float _1128 = _1125 * (_1083.z + (-0.5));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = _1096 * 0.5;
        float _1133 = _1106 * 0.5;
        float _1134 = _1116 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_410, _411, _412), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3614 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_1159 + 1.0))) + _1164) * _1129;
        float _1174 = _1097 * 0.5;
        float _1175 = _1107 * 0.5;
        float _1176 = _1117 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_410, _411, _412), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3647 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1201 + 1.0))) + _1206) * _1130;
        float _1216 = _1098 * 0.5;
        float _1217 = _1108 * 0.5;
        float _1218 = _1118 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_410, _411, _412), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3680 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1243 + 1.0))) + _1248) * _1131;
        _1265 = _1098;
        _1266 = _1097;
        _1267 = _1096;
        _1268 = _1108;
        _1269 = _1107;
        _1270 = _1106;
        _1271 = _1118;
        _1272 = _1117;
        _1273 = _1116;
        _1274 = _1131;
        _1275 = _1130;
        _1276 = _1129;
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
    }
    else
    {
        _1265 = _956;
        _1266 = _956;
        _1267 = _956;
        _1268 = _956;
        _1269 = _956;
        _1270 = _956;
        _1271 = _956;
        _1272 = _956;
        _1273 = _956;
        _1274 = _956;
        _1275 = _956;
        _1276 = _956;
        _1277 = 0.0;
        _1278 = 0.0;
        _1279 = 0.0;
    }
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _968)) + _968;
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _969)) + _969;
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _970)) + _970;
    float _1312 = fma(_1291, cbSceneParam._m0[89u].z, fma(_1290, cbSceneParam._m0[89u].y, _1289 * cbSceneParam._m0[89u].x));
    float _1315 = fma(_1291, cbSceneParam._m0[90u].z, fma(_1290, cbSceneParam._m0[90u].y, _1289 * cbSceneParam._m0[90u].x));
    float _1318 = fma(_1291, cbSceneParam._m0[91u].z, fma(_1290, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1289));
    float _1333 = _589 * 0.5;
    float _1334 = _590 * 0.5;
    float _1335 = _591 * 0.5;
    float _1336 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1339 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1342 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1376;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1349 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_955, _959, _962, _965));
        float _1353 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_957, _960, _963, _966));
        float _1357 = dot(vec4(_1333, _1334, _1335, 1.0), vec4(_958, _961, _964, _967));
        float _1364 = dot(vec4(cbModelParam._m0[39u]), vec4(_1333, _1334, _1335, 1.0));
        _1376 = dot(vec3(isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1364) ? 0.0 : (isnan(0.0) ? _1364 : max(0.0, _1364))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1376 = 1.0;
    }
    float _1387;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1378 = dot(vec4(cbModelParam._m0[40u]), vec4(_1333, _1334, _1335, 1.0));
        _1387 = dot(vec3(isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1378) ? 0.0 : (isnan(0.0) ? _1378 : max(0.0, _1378))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1387 = 1.0;
    }
    float _1391 = (_1387 * cbModelParam._m0[1u].x) + (_1376 * (1.0 - cbModelParam._m0[1u].x));
    float _1401 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _413);
    float _1402 = isnan(_1401) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1401 : min(cbModelParam._m0[25u].z, _1401));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1451 = fma(_653, cbModelParam._m0[13u].z, fma(_649, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _645)) + cbModelParam._m0[13u].w;
        float _1455 = fma(_653, cbModelParam._m0[14u].z, fma(_649, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _645)) + cbModelParam._m0[14u].w;
        float _1459 = fma(_653, cbModelParam._m0[15u].z, fma(_649, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _645)) + cbModelParam._m0[15u].w;
        float _1462 = fma(_591, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _589));
        float _1465 = fma(_591, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _589));
        float _1468 = fma(_591, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _589));
        float _1496;
        if (_1462 > 0.0)
        {
            _1496 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1496 = frontier_phi_16_14_ladder;
        }
        float _1724;
        if (_1465 > 0.0)
        {
            _1724 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1724 = frontier_phi_25_21_ladder;
        }
        float _1981;
        if (_1468 > 0.0)
        {
            _1981 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1981 = frontier_phi_37_32_ladder;
        }
        float _1983 = isnan(_1724) ? _1496 : (isnan(_1496) ? _1724 : min(_1496, _1724));
        float _1984 = isnan(_1981) ? _1983 : (isnan(_1983) ? _1981 : min(_1983, _1981));
        float _1988 = (_1984 * _1462) + _1451;
        float _1989 = (_1984 * _1465) + _1455;
        float _1990 = (_1984 * _1468) + _1459;
        float _1991 = _1984 * 9.9999997473787516355514526367188e-05;
        float _1993 = (-1.0) - _1991;
        float _1995 = _1991 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1990 > _1995) || ((_1990 < _1993) || ((_1989 > _1995) || ((_1989 < _1993) || ((_1988 < _1993) || (_1988 > _1995))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2118 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1990, cbModelParam._m0[9u].z, fma(_1989, cbModelParam._m0[9u].y, _1988 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1990, cbModelParam._m0[10u].z, fma(_1989, cbModelParam._m0[10u].y, _1988 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1990, cbModelParam._m0[11u].z, fma(_1989, cbModelParam._m0[11u].y, _1988 * cbModelParam._m0[11u].x))), _1402);
            frontier_phi_15_37_ladder = _2118.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2118.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2118.x * cbModelParam._m0[1u].y;
        }
        _1484 = frontier_phi_15_37_ladder_2;
        _1486 = frontier_phi_15_37_ladder_1;
        _1488 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1472 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_589, _590, _591), _1402);
        _1484 = _1472.x * cbModelParam._m0[1u].y;
        _1486 = _1472.y * cbModelParam._m0[1u].y;
        _1488 = _1472.z * cbModelParam._m0[1u].y;
    }
    float _1492 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _413);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1492 : min(cbModelParam._m0[25u].w, _1492));
    float _1586;
    float _1588;
    float _1590;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1550 = fma(_653, cbModelParam._m0[21u].z, fma(_649, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _645)) + cbModelParam._m0[21u].w;
        float _1554 = fma(_653, cbModelParam._m0[22u].z, fma(_649, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _645)) + cbModelParam._m0[22u].w;
        float _1558 = fma(_653, cbModelParam._m0[23u].z, fma(_649, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _645)) + cbModelParam._m0[23u].w;
        float _1561 = fma(_591, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _589));
        float _1564 = fma(_591, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _589));
        float _1567 = fma(_591, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _589));
        float _1729;
        if (_1561 > 0.0)
        {
            _1729 = abs((1.0 - _1550) / _1561);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1550 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1729 = frontier_phi_27_23_ladder;
        }
        float _2008;
        if (_1564 > 0.0)
        {
            _2008 = abs((1.0 - _1554) / _1564);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1554 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2008 = frontier_phi_39_34_ladder;
        }
        float _2221;
        if (_1567 > 0.0)
        {
            _2221 = abs((1.0 - _1558) / _1567);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1558 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2221 = frontier_phi_48_45_ladder;
        }
        float _2223 = isnan(_2008) ? _1729 : (isnan(_1729) ? _2008 : min(_1729, _2008));
        float _2224 = isnan(_2221) ? _2223 : (isnan(_2223) ? _2221 : min(_2223, _2221));
        float _2228 = (_2224 * _1561) + _1550;
        float _2229 = (_2224 * _1564) + _1554;
        float _2230 = (_2224 * _1567) + _1558;
        float _2231 = _2224 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2231;
        float _2234 = _2231 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2230 > _2234) || ((_2230 < _2232) || ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 < _2232) || (_2228 > _2234))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2428 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2230, cbModelParam._m0[17u].z, fma(_2229, cbModelParam._m0[17u].y, _2228 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2230, cbModelParam._m0[18u].z, fma(_2229, cbModelParam._m0[18u].y, _2228 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2230, cbModelParam._m0[19u].z, fma(_2229, cbModelParam._m0[19u].y, _2228 * cbModelParam._m0[19u].x))), _1493);
            frontier_phi_24_48_ladder = _2428.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2428.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2428.x * cbModelParam._m0[1u].z;
        }
        _1586 = frontier_phi_24_48_ladder_2;
        _1588 = frontier_phi_24_48_ladder_1;
        _1590 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1570 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_589, _590, _591), _1493);
        _1586 = _1570.x * cbModelParam._m0[1u].z;
        _1588 = _1570.y * cbModelParam._m0[1u].z;
        _1590 = _1570.z * cbModelParam._m0[1u].z;
    }
    float _1603 = (((_616 * _566) + _617) * _581) * ((cbModelParam._m0[1u].w * (_1586 - _1484)) + _1484);
    float _1605 = (((_616 * _568) + _617) * _581) * ((cbModelParam._m0[1u].w * (_1588 - _1486)) + _1486);
    float _1607 = (((_616 * _569) + _617) * _581) * ((cbModelParam._m0[1u].w * (_1590 - _1488)) + _1488);
    float _1610 = fma(_1607, cbSceneParam._m0[89u].z, fma(_1605, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1613 = fma(_1607, cbSceneParam._m0[90u].z, fma(_1605, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1616 = fma(_1607, cbSceneParam._m0[91u].z, fma(_1605, cbSceneParam._m0[91u].y, _1603 * cbSceneParam._m0[91u].x));
    vec4 _1624 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_500, _501));
    float _1626 = _1624.w;
    float _1638 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1626);
    float _1639 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1626);
    float _1640 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1626);
    uvec4 _1644 = floatBitsToUint(cbInstanceData._m0[_540 + 5u]);
    uint _1646 = _1644.x * 14u;
    uint _1647 = _1646 + 13u;
    float _1654 = _581 + (-1.0);
    float _1659 = (cbLight._m0[_1647].x * _1654) + 1.0;
    float _1660 = (cbLight._m0[_1647].y * _1654) + 1.0;
    float _1661 = (cbLight._m0[_1647].z * _1654) + 1.0;
    float _1662 = (cbLight._m0[_1647].w * _1654) + 1.0;
    uint _1663 = _1646 + 5u;
    float _1669 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
    uint _1673 = _1646 + 4u;
    float _1682 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
    uint _1686 = _1646 | 1u;
    float _1697 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_410, _411, _412));
    float _1700 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_410, _411, _412));
    float _3816 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _3827 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1705 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.3183098733425140380859375;
    float _1707 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.3183098733425140380859375;
    float _1714 = ((cbLight._m0[_1663].x * _1669) * _1707) + (((cbLight._m0[_1673].x * _1638) * _1682) * _1705);
    float _1715 = ((_1669 * cbLight._m0[_1663].y) * _1707) + (((cbLight._m0[_1673].y * _1639) * _1682) * _1705);
    float _1716 = ((_1669 * cbLight._m0[_1663].z) * _1707) + (((cbLight._m0[_1673].z * _1640) * _1682) * _1705);
    uvec4 _1721 = floatBitsToUint(cbLight._m0[_1646 + 12u]);
    bool _1723 = _1721.x == 0u;
    float _1734;
    float _1736;
    float _1738;
    if (_1723)
    {
        _1734 = _1714;
        _1736 = _1715;
        _1738 = _1716;
    }
    else
    {
        uint _1742 = _1646 + 6u;
        float _1758 = (dot(vec3(cbLight._m0[_1646 + 2u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _1759 = _1758 * _1758;
        float _3838 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1761 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
        _1734 = (((cbLight._m0[_1742].x * 0.3183098733425140380859375) * _1760) * _1761) + _1714;
        _1736 = (((cbLight._m0[_1742].y * 0.3183098733425140380859375) * _1760) * _1761) + _1715;
        _1738 = (((cbLight._m0[_1742].z * 0.3183098733425140380859375) * _1760) * _1761) + _1716;
    }
    bool _1741 = _1721.y == 0u;
    float _1779;
    float _1781;
    float _1783;
    if (_1741)
    {
        _1779 = _1734;
        _1781 = _1736;
        _1783 = _1738;
    }
    else
    {
        uint _1952 = _1646 + 7u;
        float _1968 = (dot(vec3(cbLight._m0[_1646 + 3u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _1969 = _1968 * _1968;
        float _3854 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1971 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _1779 = (((cbLight._m0[_1952].x * 0.3183098733425140380859375) * _1970) * _1971) + _1734;
        _1781 = (((cbLight._m0[_1952].y * 0.3183098733425140380859375) * _1970) * _1971) + _1736;
        _1783 = (((cbLight._m0[_1952].z * 0.3183098733425140380859375) * _1970) * _1971) + _1738;
    }
    uint _1786 = _1646 + 8u;
    float _1799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1646].w)) * _413) * 0.949999988079071044921875);
    float _1800 = _1799 * _1799;
    float _1801 = cbLight._m0[_1646].x + _492;
    float _1802 = cbLight._m0[_1646].y + _493;
    float _1803 = cbLight._m0[_1646].z + _494;
    float _1807 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
    float _1808 = _1807 * _1801;
    float _1809 = _1807 * _1802;
    float _1810 = _1807 * _1803;
    float _1811 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1646].xyz));
    float _3870 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _1815 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _1816 = dot(vec3(_410, _411, _412), vec3(_1808, _1809, _1810));
    float _3892 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1819 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _1820 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_1808, _1809, _1810));
    float _3903 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1824 = _1800 * _1800;
    float _1828 = ((_1819 * _1819) * (_1824 + (-1.0))) + 1.0;
    float _1836 = exp2(log2(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * 5.0);
    float _1837 = 0.959999978542327880859375 - _563;
    float _1839 = 0.959999978542327880859375 - _564;
    float _1840 = 0.959999978542327880859375 - _565;
    float _1847 = 1.0 - _1800;
    float _1858 = (0.5 / (((_1815 * ((_1814 * _1847) + _1800)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _1847) + _1800) * _1814))) * _1814;
    float _3914 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1860 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1824 / ((_1828 * _1828) * 3.141590118408203125));
    uint _1874 = _1646 + 9u;
    float _1885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1686].w)) * _413) * 0.949999988079071044921875);
    float _1886 = _1885 * _1885;
    float _1887 = cbLight._m0[_1686].x + _492;
    float _1888 = cbLight._m0[_1686].y + _493;
    float _1889 = cbLight._m0[_1686].z + _494;
    float _1893 = inversesqrt(dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889)));
    float _1894 = _1893 * _1887;
    float _1895 = _1893 * _1888;
    float _1896 = _1893 * _1889;
    float _1897 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1686].xyz));
    float _3925 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _1901 = dot(vec3(_410, _411, _412), vec3(_1894, _1895, _1896));
    float _3936 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_1894, _1895, _1896));
    float _3947 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1886 * _1886;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1920 = exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0);
    float _1927 = 1.0 - _1886;
    float _1937 = (0.5 / (((_1815 * ((_1900 * _1927) + _1886)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _1927) + _1886) * _1900))) * _1900;
    float _3958 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    float _1949 = (((((_1920 * _1837) + _566) * cbLight._m0[_1874].x) * _1939) * _1669) + ((((cbLight._m0[_1786].x * _1638) * ((_1836 * _1837) + _566)) * _1860) * _1682);
    float _1950 = (((((_1920 * _1839) + _568) * cbLight._m0[_1874].y) * _1939) * _1669) + ((((cbLight._m0[_1786].y * _1639) * ((_1836 * _1839) + _568)) * _1860) * _1682);
    float _1951 = (((((_1920 * _1840) + _569) * cbLight._m0[_1874].z) * _1939) * _1669) + ((((cbLight._m0[_1786].z * _1640) * ((_1836 * _1840) + _569)) * _1860) * _1682);
    float _2013;
    float _2015;
    float _2017;
    if (_1723)
    {
        _2013 = _1949;
        _2015 = _1950;
        _2017 = _1951;
    }
    else
    {
        uint _2019 = _1646 + 2u;
        uint _2023 = _1646 + 10u;
        float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _413) * 0.949999988079071044921875);
        float _2038 = _2037 * _2037;
        float _2039 = cbLight._m0[_2019].x + _492;
        float _2040 = cbLight._m0[_2019].y + _493;
        float _2041 = cbLight._m0[_2019].z + _494;
        float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
        float _2046 = _2045 * _2039;
        float _2047 = _2045 * _2040;
        float _2048 = _2045 * _2041;
        float _2049 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2019].xyz));
        float _3969 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _2053 = dot(vec3(_410, _411, _412), vec3(_2046, _2047, _2048));
        float _3980 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _2057 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2046, _2047, _2048));
        float _3991 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2061 = _2038 * _2038;
        float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
        float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0);
        float _2079 = 1.0 - _2038;
        float _2089 = (0.5 / (((_1815 * ((_2052 * _2079) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _2079) + _2038) * _2052))) * _2052;
        float _4002 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2091 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
        float _2092 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
        _2013 = (((((_2072 * _1837) + _566) * cbLight._m0[_2023].x) * _2091) * _2092) + _1949;
        _2015 = (((((_2072 * _1839) + _568) * cbLight._m0[_2023].y) * _2091) * _2092) + _1950;
        _2017 = (((((_2072 * _1840) + _569) * cbLight._m0[_2023].z) * _2091) * _2092) + _1951;
    }
    float _2127;
    float _2129;
    float _2131;
    if (_1741)
    {
        _2127 = _2013;
        _2129 = _2015;
        _2131 = _2017;
    }
    else
    {
        uint _2138 = _1646 + 3u;
        uint _2142 = _1646 + 11u;
        float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _413) * 0.949999988079071044921875);
        float _2157 = _2156 * _2156;
        float _2158 = cbLight._m0[_2138].x + _492;
        float _2159 = cbLight._m0[_2138].y + _493;
        float _2160 = cbLight._m0[_2138].z + _494;
        float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
        float _2165 = _2164 * _2158;
        float _2166 = _2164 * _2159;
        float _2167 = _2164 * _2160;
        float _2168 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2138].xyz));
        float _4018 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _2172 = dot(vec3(_410, _411, _412), vec3(_2165, _2166, _2167));
        float _4029 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2176 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2165, _2166, _2167));
        float _4040 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2180 = _2157 * _2157;
        float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
        float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0);
        float _2198 = 1.0 - _2157;
        float _2208 = (0.5 / (((_1815 * ((_2171 * _2198) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _2198) + _2157) * _2171))) * _2171;
        float _4051 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2210 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
        float _2211 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _2127 = (((((_2191 * _1837) + _566) * cbLight._m0[_2142].x) * _2210) * _2211) + _2013;
        _2129 = (((((_2191 * _1839) + _568) * cbLight._m0[_2142].y) * _2210) * _2211) + _2015;
        _2131 = (((((_2191 * _1840) + _569) * cbLight._m0[_2142].z) * _2210) * _2211) + _2017;
    }
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    if (_1644.y == 0u)
    {
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2286;
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2286;
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2286;
        uvec4 _2301 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2302 = _2301.x;
        uint _2313 = uint((float(_2301.y) * floor(float(uint(cbSceneParam._m0[85u].y * _501) / _2302))) + floor(float(uint(cbSceneParam._m0[85u].x * _500) / _2302)));
        float _2323 = (log2(_2289 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2324 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        uint _2327 = uint(isnan(14.0) ? _2324 : (isnan(_2324) ? 14.0 : min(_2324, 14.0)));
        uvec4 _2332 = texelFetch(g_lightClusterGridBuffer, int(((_2327 << 2u) + (_2313 << 6u)) >> 2u));
        uint _2333 = _2332.x;
        uint _2334 = _2301.z;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        if (((((1u << ((_2334 >> 4u) & 15u)) + 4294967295u) & _2333) == 0u) || ((_2334 & 240u) == 0u))
        {
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
        }
        else
        {
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2444;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            uint _2583 = 0u;
            uint _2592;
            bool _2593;
            for (;;)
            {
                _2592 = texelFetch(g_lightClassification, int((((_2327 << 5u) + (_2313 << 9u)) + (_2583 << 2u)) >> 2u)).x;
                _2593 = _2592 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2593)
                {
                    frontier_phi_63_pred = _2582;
                    frontier_phi_63_pred_1 = _2581;
                    frontier_phi_63_pred_2 = _2580;
                    frontier_phi_63_pred_3 = _2579;
                    frontier_phi_63_pred_4 = _2578;
                    frontier_phi_63_pred_5 = _2577;
                }
                else
                {
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    uint _2707;
                    _2701 = _2577;
                    _2702 = _2578;
                    _2703 = _2579;
                    _2704 = _2580;
                    _2705 = _2581;
                    _2706 = _2582;
                    _2707 = _2592;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    for (;;)
                    {
                        uint _2711 = uint(findLSB(_2707)) + (_2583 << 5u);
                        uint _2708 = (_2707 + 4294967295u) & _2707;
                        uint _2713 = _2711 * 48u;
                        vec4 _2727 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 3u)).x));
                        uint _2733 = (_2711 * 48u) + 4u;
                        vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2733)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 3u)).x));
                        uint _2752 = (_2711 * 48u) + 8u;
                        vec3 _2763 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x));
                        float _2767 = _2727.x - _2287;
                        float _2768 = _2727.y - _2288;
                        float _2769 = _2727.z - _2289;
                        float _2770 = dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769));
                        float _2773 = inversesqrt(_2770);
                        float _2774 = _2773 * _2767;
                        float _2775 = _2773 * _2768;
                        float _2776 = _2773 * _2769;
                        float _2777 = dot(vec3(_521, _524, _527), vec3(_2774, _2775, _2776));
                        float _2782 = 1.0 - (_2770 * _2727.w);
                        float _4077 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2783 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                        float _2784 = sqrt(_2770) * _2746.w;
                        float _2787 = 1.39999997615814208984375 / (_2784 + 1.39999997615814208984375);
                        float _2788 = _2787 * _2787;
                        float _2791 = ((1.0 - _2788) * _2777) + _2788;
                        float _2794 = _2784 * _2784;
                        float _2798 = ((isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0))) * _2783) / ((_2794 * 0.699999988079071044921875) + 1.0);
                        float _2802 = (-0.0) - _2287;
                        float _2803 = (-0.0) - _2288;
                        float _2804 = (-0.0) - _2289;
                        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
                        float _2809 = _2808 * _2802;
                        float _2810 = _2808 * _2803;
                        float _2811 = _2808 * _2804;
                        float _2819 = exp2(log2(1.0 / ((_2794 * 3.5) + 5.0)) * 0.25);
                        float _2820 = 1.0 - _597;
                        float _2827 = sqrt(1.0 - ((1.0 - (_2820 * _2820)) * (1.0 - (_2819 * _2819))));
                        float _2828 = _2827 * _2827;
                        float _2829 = _2828 * _2828;
                        float _2830 = _2809 + _2774;
                        float _2831 = _2810 + _2775;
                        float _2832 = _2811 + _2776;
                        float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
                        float _2840 = dot(vec3(_521, _524, _527), vec3(_2809, _2810, _2811));
                        float _4093 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2843 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2844 = dot(vec3(_521, _524, _527), vec3(_2836 * _2830, _2836 * _2831, _2836 * _2832));
                        float _4104 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2847 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2851 = ((_2847 * _2847) * (_2829 + (-1.0))) + 1.0;
                        float _2852 = _2787 * _2828;
                        float _2853 = _2852 * _2852;
                        float _2856 = ((1.0 - _2853) * _2777) + _2853;
                        float _4115 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2857 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2858 = 1.0 - _2828;
                        float _2868 = (0.5 / (((_2857 * ((_2843 * _2858) + _2828)) + 9.9999999392252902907785028219223e-09) + (((_2857 * _2858) + _2828) * _2843))) * _2857;
                        float _4126 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2879 = (((_2829 * 3.1415927410125732421875) * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) / ((_2851 * _2851) * ((_2794 * 2.1991131305694580078125) + 3.141590118408203125))) * _2783;
                        _2636 = (_2798 * _2746.x) + _2704;
                        _2637 = (_2798 * _2746.y) + _2705;
                        _2638 = (_2798 * _2746.z) + _2706;
                        _2633 = (_2879 * _2763.x) + _2701;
                        _2634 = (_2879 * _2763.y) + _2702;
                        _2635 = (_2879 * _2763.z) + _2703;
                        if (_2708 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2701 = _2633;
                            _2702 = _2634;
                            _2703 = _2635;
                            _2704 = _2636;
                            _2705 = _2637;
                            _2706 = _2638;
                            _2707 = _2708;
                        }
                    }
                    frontier_phi_63_pred = _2638;
                    frontier_phi_63_pred_1 = _2637;
                    frontier_phi_63_pred_2 = _2636;
                    frontier_phi_63_pred_3 = _2635;
                    frontier_phi_63_pred_4 = _2634;
                    frontier_phi_63_pred_5 = _2633;
                }
                _2444 = frontier_phi_63_pred;
                _2442 = frontier_phi_63_pred_1;
                _2440 = frontier_phi_63_pred_2;
                _2438 = frontier_phi_63_pred_3;
                _2436 = frontier_phi_63_pred_4;
                _2434 = frontier_phi_63_pred_5;
                uint _2584 = _2583 + 1u;
                if (_2584 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2577 = _2434;
                    _2578 = _2436;
                    _2579 = _2438;
                    _2580 = _2440;
                    _2581 = _2442;
                    _2582 = _2444;
                    _2583 = _2584;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
        }
        uvec4 _2447 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2448 = _2447.z;
        uint _2450 = (_2448 >> 8u) & 15u;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        if (((4294967295u << _2450) & _2333) == 0u)
        {
            _2545 = _2433;
            _2547 = _2435;
            _2549 = _2437;
            _2551 = _2439;
            _2553 = _2441;
            _2555 = _2443;
        }
        else
        {
            float _2570 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
            float _2571 = _2570 * _2287;
            float _2572 = _2570 * _2288;
            float _2573 = _2570 * _2289;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2450 < ((_2448 >> 12u) & 15u))
            {
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2684 = _2433;
                float _2685 = _2435;
                float _2686 = _2437;
                float _2687 = _2439;
                float _2688 = _2441;
                float _2689 = _2443;
                uint _2690 = _2450;
                uint _2699;
                bool _2700;
                for (;;)
                {
                    _2699 = texelFetch(g_lightClassification, int((((_2327 << 5u) + (_2313 << 9u)) + (_2690 << 2u)) >> 2u)).x;
                    _2700 = _2699 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2700)
                    {
                        frontier_phi_69_pred = _2689;
                        frontier_phi_69_pred_1 = _2688;
                        frontier_phi_69_pred_2 = _2687;
                        frontier_phi_69_pred_3 = _2686;
                        frontier_phi_69_pred_4 = _2685;
                        frontier_phi_69_pred_5 = _2684;
                    }
                    else
                    {
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _2889;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _2897 = _2684;
                        float _2898 = _2685;
                        float _2899 = _2686;
                        float _2900 = _2687;
                        float _2901 = _2688;
                        float _2902 = _2689;
                        uint _2903 = _2699;
                        uint _2904;
                        vec4 _2929;
                        float _2930;
                        vec4 _2945;
                        vec3 _2957;
                        vec4 _2973;
                        vec4 _2989;
                        float _3036;
                        bool _3037;
                        for (;;)
                        {
                            uint _2914 = ((_2690 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2903));
                            _2904 = (_2903 + 4294967295u) & _2903;
                            uint _2916 = _2914 * 40u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            _2930 = _2929.w;
                            uint _2932 = (_2914 * 40u) + 4u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2947 = (_2914 * 40u) + 8u;
                            _2957 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x));
                            uint _2960 = (_2914 * 40u) + 16u;
                            _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            uint _2976 = (_2914 * 40u) + 20u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2992 = (_2914 * 40u) + 24u;
                            vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3011 = (_2914 * 40u) + 28u;
                            vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            _3036 = fma(_2289, _3024.z, fma(_2288, _3024.y, _3024.x * _2287)) + _3024.w;
                            _3037 = !((fma(_2289, _3005.z, fma(_2288, _3005.y, _3005.x * _2287)) + _3005.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3037)
                            {
                                float _3064 = _2929.x - _2287;
                                float _3065 = _2929.y - _2288;
                                float _3066 = _2929.z - _2289;
                                float _3067 = dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066));
                                float _3070 = inversesqrt(_3067);
                                float _3071 = _3070 * _3064;
                                float _3072 = _3070 * _3065;
                                float _3073 = _3070 * _3066;
                                float _3077 = 1.0 - (_3067 / (_2930 * _2930));
                                float _4137 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3078 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3082 = sqrt(_3067) * _2945.w;
                                float _3084 = 1.39999997615814208984375 / (_3082 + 1.39999997615814208984375);
                                float _3085 = _3084 * _3084;
                                float _3088 = ((1.0 - _3085) * dot(vec3(_3071, _3072, _3073), vec3(_521, _524, _527))) + _3085;
                                float _3091 = _3082 * _3082;
                                float _3095 = (fma(_2289, _2973.z, fma(_2288, _2973.y, _2973.x * _2287)) + _2973.w) / _3036;
                                float _3096 = (fma(_2289, _2989.z, fma(_2288, _2989.y, _2989.x * _2287)) + _2989.w) / _3036;
                                float _3100 = 1.0 - dot(vec2(_3095, _3096), vec2(_3095, _3096));
                                float _4153 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3101 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3102 = _3101 * (((isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))) * _3078) / ((_3091 * 0.699999988079071044921875) + 1.0));
                                float _3114 = exp2(log2(1.0 / ((_3091 * 3.5) + 5.0)) * 0.25);
                                float _3115 = 1.0 - _597;
                                float _3122 = sqrt(1.0 - ((1.0 - (_3115 * _3115)) * (1.0 - (_3114 * _3114))));
                                float _3123 = _3122 * _3122;
                                float _3124 = _3123 * _3123;
                                float _3125 = _3071 - _2571;
                                float _3126 = _3072 - _2572;
                                float _3127 = _3073 - _2573;
                                float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                                float _3135 = dot(vec3(_521, _524, _527), vec3((-0.0) - _2571, (-0.0) - _2572, (-0.0) - _2573));
                                float _4164 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3138 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3139 = dot(vec3(_521, _524, _527), vec3(_3131 * _3125, _3131 * _3126, _3131 * _3127));
                                float _4175 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3142 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3146 = ((_3142 * _3142) * (_3124 + (-1.0))) + 1.0;
                                float _3147 = _3084 * _3123;
                                float _3148 = _3147 * _3147;
                                float _3154 = ((1.0 - _3148) * dot(vec3(_521, _524, _527), vec3(_3071, _3072, _3073))) + _3148;
                                float _4186 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3156 = 1.0 - _3123;
                                float _3166 = (0.5 / (((_3155 * ((_3138 * _3156) + _3123)) + 9.9999999392252902907785028219223e-09) + (((_3155 * _3156) + _3123) * _3138))) * _3155;
                                float _4197 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3176 = (_3101 * _3078) * (((_3124 * 3.1415927410125732421875) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) / ((_3146 * _3146) * ((_3091 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3102 * _2945.z;
                                frontier_phi_75_pred_1 = _3102 * _2945.y;
                                frontier_phi_75_pred_2 = _3102 * _2945.x;
                                frontier_phi_75_pred_3 = _3176 * _2957.z;
                                frontier_phi_75_pred_4 = _3176 * _2957.y;
                                frontier_phi_75_pred_5 = _3176 * _2957.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3185 = frontier_phi_75_pred;
                            _3184 = frontier_phi_75_pred_1;
                            _3183 = frontier_phi_75_pred_2;
                            _3182 = frontier_phi_75_pred_3;
                            _3181 = frontier_phi_75_pred_4;
                            _3180 = frontier_phi_75_pred_5;
                            _2887 = _3183 + _2900;
                            _2888 = _3184 + _2901;
                            _2889 = _3185 + _2902;
                            _2884 = _3180 + _2897;
                            _2885 = _3181 + _2898;
                            _2886 = _3182 + _2899;
                            if (_2904 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2904;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2889;
                        frontier_phi_69_pred_1 = _2888;
                        frontier_phi_69_pred_2 = _2887;
                        frontier_phi_69_pred_3 = _2886;
                        frontier_phi_69_pred_4 = _2885;
                        frontier_phi_69_pred_5 = _2884;
                    }
                    _2556 = frontier_phi_69_pred;
                    _2554 = frontier_phi_69_pred_1;
                    _2552 = frontier_phi_69_pred_2;
                    _2550 = frontier_phi_69_pred_3;
                    _2548 = frontier_phi_69_pred_4;
                    _2546 = frontier_phi_69_pred_5;
                    uint _2691 = _2690 + 1u;
                    if (_2691 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2684 = _2546;
                        _2685 = _2548;
                        _2686 = _2550;
                        _2687 = _2552;
                        _2688 = _2554;
                        _2689 = _2556;
                        _2690 = _2691;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2556;
                frontier_phi_57_58_ladder_1 = _2554;
                frontier_phi_57_58_ladder_2 = _2552;
                frontier_phi_57_58_ladder_3 = _2550;
                frontier_phi_57_58_ladder_4 = _2548;
                frontier_phi_57_58_ladder_5 = _2546;
            }
            else
            {
                frontier_phi_57_58_ladder = _2443;
                frontier_phi_57_58_ladder_1 = _2441;
                frontier_phi_57_58_ladder_2 = _2439;
                frontier_phi_57_58_ladder_3 = _2437;
                frontier_phi_57_58_ladder_4 = _2435;
                frontier_phi_57_58_ladder_5 = _2433;
            }
            _2545 = frontier_phi_57_58_ladder_5;
            _2547 = frontier_phi_57_58_ladder_4;
            _2549 = frontier_phi_57_58_ladder_3;
            _2551 = frontier_phi_57_58_ladder_2;
            _2553 = frontier_phi_57_58_ladder_1;
            _2555 = frontier_phi_57_58_ladder;
        }
        float _2560 = isnan(1.0) ? _581 : (isnan(_581) ? 1.0 : min(_581, 1.0));
        _2345 = (_2560 * _2551) + _1779;
        _2347 = (_2560 * _2553) + _1781;
        _2349 = (_2560 * _2555) + _1783;
        _2351 = ((_2545 * _566) * _2560) + _2127;
        _2353 = ((_2547 * _568) * _2560) + _2129;
        _2355 = ((_2549 * _569) * _2560) + _2131;
    }
    else
    {
        _2345 = _1779;
        _2347 = _1781;
        _2349 = _1783;
        _2351 = _2127;
        _2353 = _2129;
        _2355 = _2131;
    }
    float _4213 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4224 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4235 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    uint _2375 = _540 + 6u;
    float _2383 = _500 / cbSceneParam._m0[86u].x;
    float _2384 = _501 / cbSceneParam._m0[86u].y;
    vec4 _2398 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, (log2((isnan(cbSceneParam._m0[77u].w) ? _433 : (isnan(_433) ? cbSceneParam._m0[77u].w : min(_433, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2400 = _2398.x;
    float _2401 = _2398.y;
    float _2402 = _2398.z;
    float _2403 = _2398.w;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    if (_433 > cbSceneParam._m0[78u].w)
    {
        float _2458 = isnan(_433) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _433 : min(cbSceneParam._m0[80u].w, _433));
        float _2459 = _2458 / _433;
        float _2470 = _2459 * _485;
        float _2471 = _486 * _2459;
        float _2472 = (-0.0) - _2471;
        float _2473 = _2459 * _487;
        float _2475 = (cbSceneParam._m0[77u].w * _2472) / _2458;
        float _2476 = _2475 + cbSceneParam._m0[79u].w;
        float _2477 = cbSceneParam._m0[79u].w - _2471;
        float _2483 = sqrt(((_2470 * _2470) + (_2471 * _2471)) + (_2473 * _2473));
        float _2486 = (1.0 - (cbSceneParam._m0[77u].w / _2458)) * _2483;
        float _2491 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2493 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2646;
        if (abs((_2472 - _2475) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2646 = ((((_2476 > 0.0) ? exp2(_2491 * _2476) : (2.0 - exp2(_2493 * _2476))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2486;
        }
        else
        {
            float _2606 = 1.0 / cbSceneParam._m0[80u].x;
            float _2607 = isnan(_2477) ? _2476 : (isnan(_2476) ? _2477 : max(_2476, _2477));
            float _2608 = isnan(_2477) ? _2476 : (isnan(_2476) ? _2477 : min(_2476, _2477));
            float _2617 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : min(_2607, 0.0));
            float _2618 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : min(_2608, 0.0));
            _2646 = ((abs(_2483 / _2472) * cbSceneParam._m0[80u].y) * ((((_2617 - _2618) * 2.0) - ((exp2(_2491 * (isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0)))) - exp2(_2491 * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0))))) * _2606)) - ((exp2(_2493 * _2617) - exp2(_2493 * _2618)) * _2606))) + (_2486 * cbSceneParam._m0[80u].z);
        }
        vec4 _2648 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, 1.0), 0.0);
        float _2657 = exp2((_2646 * (-1.44269502162933349609375)) * (1.0 - _2648.w));
        float _2658 = log2(_2657);
        float _2674 = log2(_2403);
        _2495 = (exp2(_2674 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2658 * cbSceneParam._m0[78u].x)) * _2648.x) / cbSceneParam._m0[78u].x)) + _2400;
        _2497 = (exp2(_2674 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2658 * cbSceneParam._m0[78u].y)) * _2648.y) / cbSceneParam._m0[78u].y)) + _2401;
        _2499 = (exp2(_2674 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2658 * cbSceneParam._m0[78u].z)) * _2648.z) / cbSceneParam._m0[78u].z)) + _2402;
        _2501 = _2657 * _2403;
    }
    else
    {
        _2495 = _2400;
        _2497 = _2401;
        _2499 = _2402;
        _2501 = _2403;
    }
    float _2513 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2514 = _2513 == 3.0;
    float _2515 = log2(_2501);
    float _2522 = exp2(_2515 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2345 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _581))) + ((_2351 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1391)) * cbPerFrame._m0[3u].x));
    float _2523 = exp2(_2515 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2347 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _581))) + ((_2353 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1391)) * cbPerFrame._m0[3u].x));
    float _2524 = exp2(_2515 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2349 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _581))) + ((_2355 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1391)) * cbPerFrame._m0[3u].x));
    float _2533 = (_2513 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2533 * (_2514 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2495)));
    SV_Target.y = _2533 * (_2514 ? _2523 : (_2523 + (cbSceneParam._m0[72u].w * _2497)));
    SV_Target.z = _2533 * (_2514 ? _2524 : (_2524 + (cbSceneParam._m0[72u].w * _2499)));
    SV_Target.w = cbInstanceData._m0[_2375].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2375].w;
}


