#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow3_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _954;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _237 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _242 = _237.z;
    float _246 = (_237.x * 2.0) + (-1.0);
    float _248 = (_237.y * 2.0) + (-1.0);
    float _249 = dot(vec2(_246, _248), vec2(_246, _248));
    float _3290 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _255 = sqrt(1.0 - (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))));
    float _258 = fma(_255, _215, fma(_248, _208, _246 * _194));
    float _261 = fma(_255, _216, fma(_248, _209, _246 * _195));
    float _264 = fma(_255, _217, fma(_248, _210, _246 * _196));
    float _268 = inversesqrt(dot(vec3(_258, _261, _264), vec3(_258, _261, _264)));
    float _297 = dot(vec4(texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w))), vec4(cbMtdParam._m0[9u].x)) + dot(vec4(_268 * _258, _268 * _261, _268 * _264, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _3301 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _298 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    vec4 _310 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _328 = _326.x;
    float _329 = _326.y;
    float _330 = _326.z;
    float _337 = ((_310.x - _328) * _298) + _328;
    float _338 = ((_310.y - _329) * _298) + _329;
    float _339 = ((_310.z - _330) * _298) + _330;
    vec4 _352 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _354 = _352.x;
    float _356 = _354 - (_354 * _298);
    vec4 _368 = texture(sampler2D(M_AMSN_V_Snow3_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _375 = (_368.x * 2.0) + (-1.0);
    float _376 = (_368.y * 2.0) + (-1.0);
    float _377 = dot(vec2(_375, _376), vec2(_375, _376));
    float _3312 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _385 = ((_368.z - _242) * _298) + _242;
    float _392 = ((_375 - _246) * _298) + _246;
    float _393 = ((_376 - _248) * _298) + _248;
    float _394 = ((sqrt(1.0 - (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)))) - _255) * _298) + _255;
    float _397 = fma(_394, _215, fma(_393, _208, _392 * _194));
    float _400 = fma(_394, _216, fma(_393, _209, _392 * _195));
    float _403 = fma(_394, _217, fma(_393, _210, _392 * _196));
    float _407 = inversesqrt(dot(vec3(_397, _400, _403), vec3(_397, _400, _403)));
    float _408 = _407 * _397;
    float _409 = _407 * _400;
    float _410 = _407 * _403;
    float _3323 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _411 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _3334 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3345 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3356 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3367 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _415 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _431 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _473 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _483 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _473);
    float _484 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _473);
    float _485 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _473);
    float _489 = inversesqrt(dot(vec3(_483, _484, _485), vec3(_483, _484, _485)));
    float _490 = _483 * _489;
    float _491 = _484 * _489;
    float _492 = _485 * _489;
    float _498 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _499 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _519 = fma(_410, cbSceneParam._m0[5u].z, fma(_409, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _408));
    float _522 = fma(_410, cbSceneParam._m0[6u].z, fma(_409, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _408));
    float _525 = fma(_410, cbSceneParam._m0[7u].z, fma(_409, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _408));
    uint _538 = uint(roundEven(NORMAL.w)) * 13u;
    uint _541 = (_538 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _547 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0)))) * cbInstanceData._m0[_541].x;
    float _548 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) * cbInstanceData._m0[_541].y;
    float _549 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) * cbInstanceData._m0[_541].z;
    float _3378 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _3389 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _3400 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _553 = 1.0 - _415;
    float _554 = _550 * _553;
    float _555 = _551 * _553;
    float _556 = _552 * _553;
    float _561 = (_550 + (-0.039999999105930328369140625)) * _415;
    float _562 = (_551 + (-0.039999999105930328369140625)) * _415;
    float _563 = (_552 + (-0.039999999105930328369140625)) * _415;
    float _564 = _561 + 0.039999999105930328369140625;
    float _566 = _562 + 0.039999999105930328369140625;
    float _567 = _563 + 0.039999999105930328369140625;
    vec4 _576 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _498, cbSceneParam._m0[86u].y * _499));
    float _579 = _576.x * TEXCOORD.z;
    float _580 = dot(vec3(_408, _409, _410), vec3(_490, _491, _492));
    float _583 = _580 * 2.0;
    float _587 = (_583 * _408) - _490;
    float _588 = (_583 * _409) - _491;
    float _589 = (_583 * _410) - _492;
    float _593 = abs(dot(vec3(_490, _491, _492), vec3(_408, _409, _410)));
    float _3411 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _595 = sqrt(_411);
    float _608 = exp2((_595 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_595 * 3.0));
    float _614 = (1.0 - _608) * ((_595 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _615 = _608 * _595;
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _953;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _678 = fma(_651, cbModelParam._m0[26u].z, fma(_647, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _643));
        float _682 = fma(_651, cbModelParam._m0[27u].z, fma(_647, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _643));
        float _686 = fma(_651, cbModelParam._m0[28u].z, fma(_647, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _643));
        float _711 = _643 + _408;
        float _712 = _647 + _409;
        float _713 = _651 + _410;
        float _723 = fma(_713, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711)) - _678;
        float _724 = fma(_713, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711)) - _682;
        float _725 = fma(_713, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711)) - _686;
        float _729 = inversesqrt(dot(vec3(_723, _724, _725), vec3(_723, _724, _725)));
        float _742 = ((_729 * _723) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_678 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _743 = ((_729 * _724) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_682 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _744 = ((_729 * _725) / cbModelParam._m0[34u].z) + ((((((_686 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        float _781 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_747.x + (-0.5));
        float _783 = _781 * (_747.y + (-0.5));
        float _784 = _781 * (_747.z + (-0.5));
        float _791 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_754.x + (-0.5));
        float _793 = _791 * (_754.y + (-0.5));
        float _794 = _791 * (_754.z + (-0.5));
        float _801 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_761.x + (-0.5));
        float _803 = _801 * (_761.y + (-0.5));
        float _804 = _801 * (_761.z + (-0.5));
        float _811 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_768.x + (-0.5));
        float _813 = _811 * (_768.y + (-0.5));
        float _814 = _811 * (_768.z + (-0.5));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = _782 * 0.5;
        float _819 = _792 * 0.5;
        float _820 = _802 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _835 = (dot(vec3(_408, _409, _410), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3437 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _845 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3448 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3459 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * (_847 + 1.0))) + _852) * _815;
        float _862 = _783 * 0.5;
        float _863 = _793 * 0.5;
        float _864 = _803 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _878 = (dot(vec3(_408, _409, _410), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3470 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _887 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3481 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3492 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_889 + 1.0))) + _894) * _816;
        float _904 = _784 * 0.5;
        float _905 = _794 * 0.5;
        float _906 = _804 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_408, _409, _410), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3525 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_931 + 1.0))) + _936) * _817;
        _953 = _784;
        _955 = _783;
        _956 = _782;
        _957 = _794;
        _958 = _793;
        _959 = _792;
        _960 = _804;
        _961 = _803;
        _962 = _802;
        _963 = _817;
        _964 = _816;
        _965 = _815;
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
    }
    else
    {
        _953 = _954;
        _955 = _954;
        _956 = _954;
        _957 = _954;
        _958 = _954;
        _959 = _954;
        _960 = _954;
        _961 = _954;
        _962 = _954;
        _963 = _954;
        _964 = _954;
        _965 = _954;
        _966 = 0.0;
        _967 = 0.0;
        _968 = 0.0;
    }
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _994 = fma(_651, cbModelParam._m0[30u].z, fma(_647, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _643));
        float _998 = fma(_651, cbModelParam._m0[31u].z, fma(_647, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _643));
        float _1002 = fma(_651, cbModelParam._m0[32u].z, fma(_647, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _643));
        float _1025 = _643 + _408;
        float _1026 = _647 + _409;
        float _1027 = _651 + _410;
        float _1037 = fma(_1027, cbModelParam._m0[30u].z, fma(_1026, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1025)) - _994;
        float _1038 = fma(_1027, cbModelParam._m0[31u].z, fma(_1026, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1025)) - _998;
        float _1039 = fma(_1027, cbModelParam._m0[32u].z, fma(_1026, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1025)) - _1002;
        float _1043 = inversesqrt(dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039)));
        float _1056 = ((_1043 * _1037) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_994 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1043 * _1038) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_998 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1043 * _1039) / cbModelParam._m0[35u].z) + ((((((_1002 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        float _1093 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1060.x + (-0.5));
        float _1095 = _1093 * (_1060.y + (-0.5));
        float _1096 = _1093 * (_1060.z + (-0.5));
        float _1103 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1067.x + (-0.5));
        float _1105 = _1103 * (_1067.y + (-0.5));
        float _1106 = _1103 * (_1067.z + (-0.5));
        float _1113 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1074.x + (-0.5));
        float _1115 = _1113 * (_1074.y + (-0.5));
        float _1116 = _1113 * (_1074.z + (-0.5));
        float _1123 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1081.x + (-0.5));
        float _1125 = _1123 * (_1081.y + (-0.5));
        float _1126 = _1123 * (_1081.z + (-0.5));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = _1094 * 0.5;
        float _1131 = _1104 * 0.5;
        float _1132 = _1114 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_408, _409, _410), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3588 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_1157 + 1.0))) + _1162) * _1127;
        float _1172 = _1095 * 0.5;
        float _1173 = _1105 * 0.5;
        float _1174 = _1115 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_408, _409, _410), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3621 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1199 + 1.0))) + _1204) * _1128;
        float _1214 = _1096 * 0.5;
        float _1215 = _1106 * 0.5;
        float _1216 = _1116 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_408, _409, _410), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3654 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1241 + 1.0))) + _1246) * _1129;
        _1263 = _1096;
        _1264 = _1095;
        _1265 = _1094;
        _1266 = _1106;
        _1267 = _1105;
        _1268 = _1104;
        _1269 = _1116;
        _1270 = _1115;
        _1271 = _1114;
        _1272 = _1129;
        _1273 = _1128;
        _1274 = _1127;
        _1275 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
    }
    else
    {
        _1263 = _954;
        _1264 = _954;
        _1265 = _954;
        _1266 = _954;
        _1267 = _954;
        _1268 = _954;
        _1269 = _954;
        _1270 = _954;
        _1271 = _954;
        _1272 = _954;
        _1273 = _954;
        _1274 = _954;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1287 = (cbModelParam._m0[1u].x * (_1275 - _966)) + _966;
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _967)) + _967;
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _968)) + _968;
    float _1310 = fma(_1289, cbSceneParam._m0[89u].z, fma(_1288, cbSceneParam._m0[89u].y, _1287 * cbSceneParam._m0[89u].x));
    float _1313 = fma(_1289, cbSceneParam._m0[90u].z, fma(_1288, cbSceneParam._m0[90u].y, _1287 * cbSceneParam._m0[90u].x));
    float _1316 = fma(_1289, cbSceneParam._m0[91u].z, fma(_1288, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1287));
    float _1331 = _587 * 0.5;
    float _1332 = _588 * 0.5;
    float _1333 = _589 * 0.5;
    float _1334 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1337 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1340 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1374;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1347 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_953, _957, _960, _963));
        float _1351 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_955, _958, _961, _964));
        float _1355 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_956, _959, _962, _965));
        float _1362 = dot(vec4(cbModelParam._m0[39u]), vec4(_1331, _1332, _1333, 1.0));
        _1374 = dot(vec3(isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1362) ? 0.0 : (isnan(0.0) ? _1362 : max(0.0, _1362))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1374 = 1.0;
    }
    float _1385;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1376 = dot(vec4(cbModelParam._m0[40u]), vec4(_1331, _1332, _1333, 1.0));
        _1385 = dot(vec3(isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1376) ? 0.0 : (isnan(0.0) ? _1376 : max(0.0, _1376))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1385 = 1.0;
    }
    float _1389 = (_1385 * cbModelParam._m0[1u].x) + (_1374 * (1.0 - cbModelParam._m0[1u].x));
    float _1399 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _411);
    float _1400 = isnan(_1399) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1399 : min(cbModelParam._m0[25u].z, _1399));
    float _1482;
    float _1484;
    float _1486;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1449 = fma(_651, cbModelParam._m0[13u].z, fma(_647, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _643)) + cbModelParam._m0[13u].w;
        float _1453 = fma(_651, cbModelParam._m0[14u].z, fma(_647, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _643)) + cbModelParam._m0[14u].w;
        float _1457 = fma(_651, cbModelParam._m0[15u].z, fma(_647, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _643)) + cbModelParam._m0[15u].w;
        float _1460 = fma(_589, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _587));
        float _1463 = fma(_589, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _587));
        float _1466 = fma(_589, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _587));
        float _1494;
        if (_1460 > 0.0)
        {
            _1494 = abs((1.0 - _1449) / _1460);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1449 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1494 = frontier_phi_16_14_ladder;
        }
        float _1701;
        if (_1463 > 0.0)
        {
            _1701 = abs((1.0 - _1453) / _1463);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1453 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1701 = frontier_phi_25_21_ladder;
        }
        float _1955;
        if (_1466 > 0.0)
        {
            _1955 = abs((1.0 - _1457) / _1466);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1457 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1955 = frontier_phi_37_32_ladder;
        }
        float _1957 = isnan(_1701) ? _1494 : (isnan(_1494) ? _1701 : min(_1494, _1701));
        float _1958 = isnan(_1955) ? _1957 : (isnan(_1957) ? _1955 : min(_1957, _1955));
        float _1962 = (_1958 * _1460) + _1449;
        float _1963 = (_1958 * _1463) + _1453;
        float _1964 = (_1958 * _1466) + _1457;
        float _1965 = _1958 * 9.9999997473787516355514526367188e-05;
        float _1967 = (-1.0) - _1965;
        float _1969 = _1965 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1964 > _1969) || ((_1964 < _1967) || ((_1963 > _1969) || ((_1963 < _1967) || ((_1962 < _1967) || (_1962 > _1969))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2092 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1964, cbModelParam._m0[9u].z, fma(_1963, cbModelParam._m0[9u].y, _1962 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1964, cbModelParam._m0[10u].z, fma(_1963, cbModelParam._m0[10u].y, _1962 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1964, cbModelParam._m0[11u].z, fma(_1963, cbModelParam._m0[11u].y, _1962 * cbModelParam._m0[11u].x))), _1400);
            frontier_phi_15_37_ladder = _2092.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2092.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2092.x * cbModelParam._m0[1u].y;
        }
        _1482 = frontier_phi_15_37_ladder_2;
        _1484 = frontier_phi_15_37_ladder_1;
        _1486 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1470 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_587, _588, _589), _1400);
        _1482 = _1470.x * cbModelParam._m0[1u].y;
        _1484 = _1470.y * cbModelParam._m0[1u].y;
        _1486 = _1470.z * cbModelParam._m0[1u].y;
    }
    float _1490 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _411);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1490 : min(cbModelParam._m0[25u].w, _1490));
    float _1584;
    float _1586;
    float _1588;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1548 = fma(_651, cbModelParam._m0[21u].z, fma(_647, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _643)) + cbModelParam._m0[21u].w;
        float _1552 = fma(_651, cbModelParam._m0[22u].z, fma(_647, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _643)) + cbModelParam._m0[22u].w;
        float _1556 = fma(_651, cbModelParam._m0[23u].z, fma(_647, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _643)) + cbModelParam._m0[23u].w;
        float _1559 = fma(_589, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _587));
        float _1562 = fma(_589, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _587));
        float _1565 = fma(_589, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _587));
        float _1706;
        if (_1559 > 0.0)
        {
            _1706 = abs((1.0 - _1548) / _1559);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1548 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1706 = frontier_phi_27_23_ladder;
        }
        float _1982;
        if (_1562 > 0.0)
        {
            _1982 = abs((1.0 - _1552) / _1562);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1552 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1982 = frontier_phi_39_34_ladder;
        }
        float _2195;
        if (_1565 > 0.0)
        {
            _2195 = abs((1.0 - _1556) / _1565);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1556 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2195 = frontier_phi_48_45_ladder;
        }
        float _2197 = isnan(_1982) ? _1706 : (isnan(_1706) ? _1982 : min(_1706, _1982));
        float _2198 = isnan(_2195) ? _2197 : (isnan(_2197) ? _2195 : min(_2197, _2195));
        float _2202 = (_2198 * _1559) + _1548;
        float _2203 = (_2198 * _1562) + _1552;
        float _2204 = (_2198 * _1565) + _1556;
        float _2205 = _2198 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2205;
        float _2208 = _2205 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2204 > _2208) || ((_2204 < _2206) || ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 < _2206) || (_2202 > _2208))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2204, cbModelParam._m0[17u].z, fma(_2203, cbModelParam._m0[17u].y, _2202 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2204, cbModelParam._m0[18u].z, fma(_2203, cbModelParam._m0[18u].y, _2202 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2204, cbModelParam._m0[19u].z, fma(_2203, cbModelParam._m0[19u].y, _2202 * cbModelParam._m0[19u].x))), _1491);
            frontier_phi_24_48_ladder = _2402.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2402.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2402.x * cbModelParam._m0[1u].z;
        }
        _1584 = frontier_phi_24_48_ladder_2;
        _1586 = frontier_phi_24_48_ladder_1;
        _1588 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1568 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_587, _588, _589), _1491);
        _1584 = _1568.x * cbModelParam._m0[1u].z;
        _1586 = _1568.y * cbModelParam._m0[1u].z;
        _1588 = _1568.z * cbModelParam._m0[1u].z;
    }
    float _1601 = (((_614 * _564) + _615) * _579) * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1603 = (((_614 * _566) + _615) * _579) * ((cbModelParam._m0[1u].w * (_1586 - _1484)) + _1484);
    float _1605 = (((_614 * _567) + _615) * _579) * ((cbModelParam._m0[1u].w * (_1588 - _1486)) + _1486);
    float _1608 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1603, cbSceneParam._m0[89u].y, _1601 * cbSceneParam._m0[89u].x));
    float _1611 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1603, cbSceneParam._m0[90u].y, _1601 * cbSceneParam._m0[90u].x));
    float _1614 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1603, cbSceneParam._m0[91u].y, _1601 * cbSceneParam._m0[91u].x));
    uvec4 _1624 = floatBitsToUint(cbInstanceData._m0[_538 + 5u]);
    uint _1626 = _1624.x * 14u;
    uint _1627 = _1626 + 13u;
    float _1634 = _579 + (-1.0);
    float _1639 = (cbLight._m0[_1627].x * _1634) + 1.0;
    float _1640 = (cbLight._m0[_1627].y * _1634) + 1.0;
    float _1641 = (cbLight._m0[_1627].z * _1634) + 1.0;
    float _1642 = (cbLight._m0[_1627].w * _1634) + 1.0;
    uint _1643 = _1626 + 5u;
    float _1649 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
    uint _1653 = _1626 + 4u;
    float _1659 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
    uint _1663 = _1626 | 1u;
    float _1674 = dot(vec3(cbLight._m0[_1626].xyz), vec3(_408, _409, _410));
    float _1677 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_408, _409, _410));
    float _3790 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _3801 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1682 = (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.3183098733425140380859375;
    float _1684 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * 0.3183098733425140380859375;
    float _1691 = ((cbLight._m0[_1643].x * _1649) * _1684) + ((cbLight._m0[_1653].x * _1659) * _1682);
    float _1692 = ((_1649 * cbLight._m0[_1643].y) * _1684) + ((_1659 * cbLight._m0[_1653].y) * _1682);
    float _1693 = ((_1649 * cbLight._m0[_1643].z) * _1684) + ((_1659 * cbLight._m0[_1653].z) * _1682);
    uvec4 _1698 = floatBitsToUint(cbLight._m0[_1626 + 12u]);
    bool _1700 = _1698.x == 0u;
    float _1711;
    float _1713;
    float _1715;
    if (_1700)
    {
        _1711 = _1691;
        _1713 = _1692;
        _1715 = _1693;
    }
    else
    {
        uint _1719 = _1626 + 6u;
        float _1735 = (dot(vec3(cbLight._m0[_1626 + 2u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _1736 = _1735 * _1735;
        float _3812 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1738 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
        _1711 = (((cbLight._m0[_1719].x * 0.3183098733425140380859375) * _1737) * _1738) + _1691;
        _1713 = (((cbLight._m0[_1719].y * 0.3183098733425140380859375) * _1737) * _1738) + _1692;
        _1715 = (((cbLight._m0[_1719].z * 0.3183098733425140380859375) * _1737) * _1738) + _1693;
    }
    bool _1718 = _1698.y == 0u;
    float _1756;
    float _1758;
    float _1760;
    if (_1718)
    {
        _1756 = _1711;
        _1758 = _1713;
        _1760 = _1715;
    }
    else
    {
        uint _1926 = _1626 + 7u;
        float _1942 = (dot(vec3(cbLight._m0[_1626 + 3u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _3828 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1945 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1756 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1711;
        _1758 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1713;
        _1760 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1715;
    }
    uint _1763 = _1626 + 8u;
    float _1776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1626].w)) * _411) * 0.949999988079071044921875);
    float _1777 = _1776 * _1776;
    float _1778 = cbLight._m0[_1626].x + _490;
    float _1779 = cbLight._m0[_1626].y + _491;
    float _1780 = cbLight._m0[_1626].z + _492;
    float _1784 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
    float _1785 = _1784 * _1778;
    float _1786 = _1784 * _1779;
    float _1787 = _1784 * _1780;
    float _1788 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1626].xyz));
    float _3844 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1791 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _1792 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _1793 = dot(vec3(_408, _409, _410), vec3(_1785, _1786, _1787));
    float _3866 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _1797 = dot(vec3(cbLight._m0[_1626].xyz), vec3(_1785, _1786, _1787));
    float _3877 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1801 = _1777 * _1777;
    float _1805 = ((_1796 * _1796) * (_1801 + (-1.0))) + 1.0;
    float _1813 = exp2(log2(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * 5.0);
    float _1814 = 0.959999978542327880859375 - _561;
    float _1816 = 0.959999978542327880859375 - _562;
    float _1817 = 0.959999978542327880859375 - _563;
    float _1824 = 1.0 - _1777;
    float _1835 = (0.5 / (((_1792 * ((_1791 * _1824) + _1777)) + 9.9999999392252902907785028219223e-09) + (((_1792 * _1824) + _1777) * _1791))) * _1791;
    float _3888 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1837 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1801 / ((_1805 * _1805) * 3.141590118408203125));
    uint _1848 = _1626 + 9u;
    float _1859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1663].w)) * _411) * 0.949999988079071044921875);
    float _1860 = _1859 * _1859;
    float _1861 = cbLight._m0[_1663].x + _490;
    float _1862 = cbLight._m0[_1663].y + _491;
    float _1863 = cbLight._m0[_1663].z + _492;
    float _1867 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
    float _1868 = _1867 * _1861;
    float _1869 = _1867 * _1862;
    float _1870 = _1867 * _1863;
    float _1871 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1663].xyz));
    float _3899 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1875 = dot(vec3(_408, _409, _410), vec3(_1868, _1869, _1870));
    float _3910 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1879 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_1868, _1869, _1870));
    float _3921 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1883 = _1860 * _1860;
    float _1887 = ((_1878 * _1878) * (_1883 + (-1.0))) + 1.0;
    float _1894 = exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0);
    float _1901 = 1.0 - _1860;
    float _1911 = (0.5 / (((_1792 * ((_1874 * _1901) + _1860)) + 9.9999999392252902907785028219223e-09) + (((_1792 * _1901) + _1860) * _1874))) * _1874;
    float _3932 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1883 / ((_1887 * _1887) * 3.141590118408203125));
    float _1923 = (((((_1894 * _1814) + _564) * cbLight._m0[_1848].x) * _1913) * _1649) + (((((_1813 * _1814) + _564) * cbLight._m0[_1763].x) * _1837) * _1659);
    float _1924 = (((((_1894 * _1816) + _566) * cbLight._m0[_1848].y) * _1913) * _1649) + (((((_1813 * _1816) + _566) * cbLight._m0[_1763].y) * _1837) * _1659);
    float _1925 = (((((_1894 * _1817) + _567) * cbLight._m0[_1848].z) * _1913) * _1649) + (((((_1813 * _1817) + _567) * cbLight._m0[_1763].z) * _1837) * _1659);
    float _1987;
    float _1989;
    float _1991;
    if (_1700)
    {
        _1987 = _1923;
        _1989 = _1924;
        _1991 = _1925;
    }
    else
    {
        uint _1993 = _1626 + 2u;
        uint _1997 = _1626 + 10u;
        float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _411) * 0.949999988079071044921875);
        float _2012 = _2011 * _2011;
        float _2013 = cbLight._m0[_1993].x + _490;
        float _2014 = cbLight._m0[_1993].y + _491;
        float _2015 = cbLight._m0[_1993].z + _492;
        float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
        float _2020 = _2019 * _2013;
        float _2021 = _2019 * _2014;
        float _2022 = _2019 * _2015;
        float _2023 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1993].xyz));
        float _3943 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2026 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _2027 = dot(vec3(_408, _409, _410), vec3(_2020, _2021, _2022));
        float _3954 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2030 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _2031 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2020, _2021, _2022));
        float _3965 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2035 = _2012 * _2012;
        float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
        float _2046 = exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0);
        float _2053 = 1.0 - _2012;
        float _2063 = (0.5 / (((_1792 * ((_2026 * _2053) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_1792 * _2053) + _2012) * _2026))) * _2026;
        float _3976 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2065 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
        float _2066 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
        _1987 = (((((_2046 * _1814) + _564) * cbLight._m0[_1997].x) * _2065) * _2066) + _1923;
        _1989 = (((((_2046 * _1816) + _566) * cbLight._m0[_1997].y) * _2065) * _2066) + _1924;
        _1991 = (((((_2046 * _1817) + _567) * cbLight._m0[_1997].z) * _2065) * _2066) + _1925;
    }
    float _2101;
    float _2103;
    float _2105;
    if (_1718)
    {
        _2101 = _1987;
        _2103 = _1989;
        _2105 = _1991;
    }
    else
    {
        uint _2112 = _1626 + 3u;
        uint _2116 = _1626 + 11u;
        float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _411) * 0.949999988079071044921875);
        float _2131 = _2130 * _2130;
        float _2132 = cbLight._m0[_2112].x + _490;
        float _2133 = cbLight._m0[_2112].y + _491;
        float _2134 = cbLight._m0[_2112].z + _492;
        float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
        float _2139 = _2138 * _2132;
        float _2140 = _2138 * _2133;
        float _2141 = _2138 * _2134;
        float _2142 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2112].xyz));
        float _3992 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _2146 = dot(vec3(_408, _409, _410), vec3(_2139, _2140, _2141));
        float _4003 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _2150 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2139, _2140, _2141));
        float _4014 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2154 = _2131 * _2131;
        float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
        float _2165 = exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0);
        float _2172 = 1.0 - _2131;
        float _2182 = (0.5 / (((_1792 * ((_2145 * _2172) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_1792 * _2172) + _2131) * _2145))) * _2145;
        float _4025 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2184 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
        float _2185 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _2101 = (((((_2165 * _1814) + _564) * cbLight._m0[_2116].x) * _2184) * _2185) + _1987;
        _2103 = (((((_2165 * _1816) + _566) * cbLight._m0[_2116].y) * _2184) * _2185) + _1989;
        _2105 = (((((_2165 * _1817) + _567) * cbLight._m0[_2116].z) * _2184) * _2185) + _1991;
    }
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    if (_1624.y == 0u)
    {
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2260;
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2260;
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2260;
        uvec4 _2275 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2276 = _2275.x;
        uint _2287 = uint((float(_2275.y) * floor(float(uint(cbSceneParam._m0[85u].y * _499) / _2276))) + floor(float(uint(cbSceneParam._m0[85u].x * _498) / _2276)));
        float _2297 = (log2(_2263 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2298 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        uint _2301 = uint(isnan(14.0) ? _2298 : (isnan(_2298) ? 14.0 : min(_2298, 14.0)));
        uvec4 _2306 = texelFetch(g_lightClusterGridBuffer, int(((_2301 << 2u) + (_2287 << 6u)) >> 2u));
        uint _2307 = _2306.x;
        uint _2308 = _2275.z;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        if (((((1u << ((_2308 >> 4u) & 15u)) + 4294967295u) & _2307) == 0u) || ((_2308 & 240u) == 0u))
        {
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
        }
        else
        {
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            uint _2557 = 0u;
            uint _2566;
            bool _2567;
            for (;;)
            {
                _2566 = texelFetch(g_lightClassification, int((((_2301 << 5u) + (_2287 << 9u)) + (_2557 << 2u)) >> 2u)).x;
                _2567 = _2566 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2567)
                {
                    frontier_phi_63_pred = _2556;
                    frontier_phi_63_pred_1 = _2555;
                    frontier_phi_63_pred_2 = _2554;
                    frontier_phi_63_pred_3 = _2553;
                    frontier_phi_63_pred_4 = _2552;
                    frontier_phi_63_pred_5 = _2551;
                }
                else
                {
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    uint _2681;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2555;
                    _2680 = _2556;
                    _2681 = _2566;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    for (;;)
                    {
                        uint _2685 = uint(findLSB(_2681)) + (_2557 << 5u);
                        uint _2682 = (_2681 + 4294967295u) & _2681;
                        uint _2687 = _2685 * 48u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 3u)).x));
                        uint _2707 = (_2685 * 48u) + 4u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 3u)).x));
                        uint _2726 = (_2685 * 48u) + 8u;
                        vec3 _2737 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x));
                        float _2741 = _2701.x - _2261;
                        float _2742 = _2701.y - _2262;
                        float _2743 = _2701.z - _2263;
                        float _2744 = dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743));
                        float _2747 = inversesqrt(_2744);
                        float _2748 = _2747 * _2741;
                        float _2749 = _2747 * _2742;
                        float _2750 = _2747 * _2743;
                        float _2751 = dot(vec3(_519, _522, _525), vec3(_2748, _2749, _2750));
                        float _2756 = 1.0 - (_2744 * _2701.w);
                        float _4051 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2757 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                        float _2758 = sqrt(_2744) * _2720.w;
                        float _2761 = 1.39999997615814208984375 / (_2758 + 1.39999997615814208984375);
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * _2751) + _2762;
                        float _2768 = _2758 * _2758;
                        float _2772 = ((isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))) * _2757) / ((_2768 * 0.699999988079071044921875) + 1.0);
                        float _2776 = (-0.0) - _2261;
                        float _2777 = (-0.0) - _2262;
                        float _2778 = (-0.0) - _2263;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2783 = _2782 * _2776;
                        float _2784 = _2782 * _2777;
                        float _2785 = _2782 * _2778;
                        float _2793 = exp2(log2(1.0 / ((_2768 * 3.5) + 5.0)) * 0.25);
                        float _2794 = 1.0 - _595;
                        float _2801 = sqrt(1.0 - ((1.0 - (_2794 * _2794)) * (1.0 - (_2793 * _2793))));
                        float _2802 = _2801 * _2801;
                        float _2803 = _2802 * _2802;
                        float _2804 = _2783 + _2748;
                        float _2805 = _2784 + _2749;
                        float _2806 = _2785 + _2750;
                        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
                        float _2814 = dot(vec3(_519, _522, _525), vec3(_2783, _2784, _2785));
                        float _4067 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2817 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                        float _2818 = dot(vec3(_519, _522, _525), vec3(_2810 * _2804, _2810 * _2805, _2810 * _2806));
                        float _4078 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2821 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2825 = ((_2821 * _2821) * (_2803 + (-1.0))) + 1.0;
                        float _2826 = _2761 * _2802;
                        float _2827 = _2826 * _2826;
                        float _2830 = ((1.0 - _2827) * _2751) + _2827;
                        float _4089 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2831 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2832 = 1.0 - _2802;
                        float _2842 = (0.5 / (((_2831 * ((_2817 * _2832) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2831 * _2832) + _2802) * _2817))) * _2831;
                        float _4100 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2853 = (((_2803 * 3.1415927410125732421875) * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) / ((_2825 * _2825) * ((_2768 * 2.1991131305694580078125) + 3.141590118408203125))) * _2757;
                        _2610 = (_2772 * _2720.x) + _2678;
                        _2611 = (_2772 * _2720.y) + _2679;
                        _2612 = (_2772 * _2720.z) + _2680;
                        _2607 = (_2853 * _2737.x) + _2675;
                        _2608 = (_2853 * _2737.y) + _2676;
                        _2609 = (_2853 * _2737.z) + _2677;
                        if (_2682 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2611;
                            _2680 = _2612;
                            _2681 = _2682;
                        }
                    }
                    frontier_phi_63_pred = _2612;
                    frontier_phi_63_pred_1 = _2611;
                    frontier_phi_63_pred_2 = _2610;
                    frontier_phi_63_pred_3 = _2609;
                    frontier_phi_63_pred_4 = _2608;
                    frontier_phi_63_pred_5 = _2607;
                }
                _2418 = frontier_phi_63_pred;
                _2416 = frontier_phi_63_pred_1;
                _2414 = frontier_phi_63_pred_2;
                _2412 = frontier_phi_63_pred_3;
                _2410 = frontier_phi_63_pred_4;
                _2408 = frontier_phi_63_pred_5;
                uint _2558 = _2557 + 1u;
                if (_2558 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2551 = _2408;
                    _2552 = _2410;
                    _2553 = _2412;
                    _2554 = _2414;
                    _2555 = _2416;
                    _2556 = _2418;
                    _2557 = _2558;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
        }
        uvec4 _2421 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2422 = _2421.z;
        uint _2424 = (_2422 >> 8u) & 15u;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        if (((4294967295u << _2424) & _2307) == 0u)
        {
            _2519 = _2407;
            _2521 = _2409;
            _2523 = _2411;
            _2525 = _2413;
            _2527 = _2415;
            _2529 = _2417;
        }
        else
        {
            float _2544 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
            float _2545 = _2544 * _2261;
            float _2546 = _2544 * _2262;
            float _2547 = _2544 * _2263;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2424 < ((_2422 >> 12u) & 15u))
            {
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2658 = _2407;
                float _2659 = _2409;
                float _2660 = _2411;
                float _2661 = _2413;
                float _2662 = _2415;
                float _2663 = _2417;
                uint _2664 = _2424;
                uint _2673;
                bool _2674;
                for (;;)
                {
                    _2673 = texelFetch(g_lightClassification, int((((_2301 << 5u) + (_2287 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                    _2674 = _2673 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2674)
                    {
                        frontier_phi_69_pred = _2663;
                        frontier_phi_69_pred_1 = _2662;
                        frontier_phi_69_pred_2 = _2661;
                        frontier_phi_69_pred_3 = _2660;
                        frontier_phi_69_pred_4 = _2659;
                        frontier_phi_69_pred_5 = _2658;
                    }
                    else
                    {
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _2871 = _2658;
                        float _2872 = _2659;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        float _2875 = _2662;
                        float _2876 = _2663;
                        uint _2877 = _2673;
                        uint _2878;
                        vec4 _2903;
                        float _2904;
                        vec4 _2919;
                        vec3 _2931;
                        vec4 _2947;
                        vec4 _2963;
                        float _3010;
                        bool _3011;
                        for (;;)
                        {
                            uint _2888 = ((_2664 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2877));
                            _2878 = (_2877 + 4294967295u) & _2877;
                            uint _2890 = _2888 * 40u;
                            _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            _2904 = _2903.w;
                            uint _2906 = (_2888 * 40u) + 4u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2921 = (_2888 * 40u) + 8u;
                            _2931 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x));
                            uint _2934 = (_2888 * 40u) + 16u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2950 = (_2888 * 40u) + 20u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2966 = (_2888 * 40u) + 24u;
                            vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2985 = (_2888 * 40u) + 28u;
                            vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            _3010 = fma(_2263, _2998.z, fma(_2262, _2998.y, _2998.x * _2261)) + _2998.w;
                            _3011 = !((fma(_2263, _2979.z, fma(_2262, _2979.y, _2979.x * _2261)) + _2979.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3011)
                            {
                                float _3038 = _2903.x - _2261;
                                float _3039 = _2903.y - _2262;
                                float _3040 = _2903.z - _2263;
                                float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                                float _3044 = inversesqrt(_3041);
                                float _3045 = _3044 * _3038;
                                float _3046 = _3044 * _3039;
                                float _3047 = _3044 * _3040;
                                float _3051 = 1.0 - (_3041 / (_2904 * _2904));
                                float _4111 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3056 = sqrt(_3041) * _2919.w;
                                float _3058 = 1.39999997615814208984375 / (_3056 + 1.39999997615814208984375);
                                float _3059 = _3058 * _3058;
                                float _3062 = ((1.0 - _3059) * dot(vec3(_3045, _3046, _3047), vec3(_519, _522, _525))) + _3059;
                                float _3065 = _3056 * _3056;
                                float _3069 = (fma(_2263, _2947.z, fma(_2262, _2947.y, _2947.x * _2261)) + _2947.w) / _3010;
                                float _3070 = (fma(_2263, _2963.z, fma(_2262, _2963.y, _2963.x * _2261)) + _2963.w) / _3010;
                                float _3074 = 1.0 - dot(vec2(_3069, _3070), vec2(_3069, _3070));
                                float _4127 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3075 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3076 = _3075 * (((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3052) / ((_3065 * 0.699999988079071044921875) + 1.0));
                                float _3088 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                                float _3089 = 1.0 - _595;
                                float _3096 = sqrt(1.0 - ((1.0 - (_3089 * _3089)) * (1.0 - (_3088 * _3088))));
                                float _3097 = _3096 * _3096;
                                float _3098 = _3097 * _3097;
                                float _3099 = _3045 - _2545;
                                float _3100 = _3046 - _2546;
                                float _3101 = _3047 - _2547;
                                float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                                float _3109 = dot(vec3(_519, _522, _525), vec3((-0.0) - _2545, (-0.0) - _2546, (-0.0) - _2547));
                                float _4138 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3112 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3113 = dot(vec3(_519, _522, _525), vec3(_3105 * _3099, _3105 * _3100, _3105 * _3101));
                                float _4149 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3116 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3120 = ((_3116 * _3116) * (_3098 + (-1.0))) + 1.0;
                                float _3121 = _3058 * _3097;
                                float _3122 = _3121 * _3121;
                                float _3128 = ((1.0 - _3122) * dot(vec3(_519, _522, _525), vec3(_3045, _3046, _3047))) + _3122;
                                float _4160 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3129 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3130 = 1.0 - _3097;
                                float _3140 = (0.5 / (((_3129 * ((_3112 * _3130) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_3129 * _3130) + _3097) * _3112))) * _3129;
                                float _4171 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3150 = (_3075 * _3052) * (((_3098 * 3.1415927410125732421875) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) / ((_3120 * _3120) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3076 * _2919.z;
                                frontier_phi_75_pred_1 = _3076 * _2919.y;
                                frontier_phi_75_pred_2 = _3076 * _2919.x;
                                frontier_phi_75_pred_3 = _3150 * _2931.z;
                                frontier_phi_75_pred_4 = _3150 * _2931.y;
                                frontier_phi_75_pred_5 = _3150 * _2931.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3159 = frontier_phi_75_pred;
                            _3158 = frontier_phi_75_pred_1;
                            _3157 = frontier_phi_75_pred_2;
                            _3156 = frontier_phi_75_pred_3;
                            _3155 = frontier_phi_75_pred_4;
                            _3154 = frontier_phi_75_pred_5;
                            _2861 = _3157 + _2874;
                            _2862 = _3158 + _2875;
                            _2863 = _3159 + _2876;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            _2860 = _3156 + _2873;
                            if (_2878 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2878;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2863;
                        frontier_phi_69_pred_1 = _2862;
                        frontier_phi_69_pred_2 = _2861;
                        frontier_phi_69_pred_3 = _2860;
                        frontier_phi_69_pred_4 = _2859;
                        frontier_phi_69_pred_5 = _2858;
                    }
                    _2530 = frontier_phi_69_pred;
                    _2528 = frontier_phi_69_pred_1;
                    _2526 = frontier_phi_69_pred_2;
                    _2524 = frontier_phi_69_pred_3;
                    _2522 = frontier_phi_69_pred_4;
                    _2520 = frontier_phi_69_pred_5;
                    uint _2665 = _2664 + 1u;
                    if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2658 = _2520;
                        _2659 = _2522;
                        _2660 = _2524;
                        _2661 = _2526;
                        _2662 = _2528;
                        _2663 = _2530;
                        _2664 = _2665;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2530;
                frontier_phi_57_58_ladder_1 = _2528;
                frontier_phi_57_58_ladder_2 = _2526;
                frontier_phi_57_58_ladder_3 = _2524;
                frontier_phi_57_58_ladder_4 = _2522;
                frontier_phi_57_58_ladder_5 = _2520;
            }
            else
            {
                frontier_phi_57_58_ladder = _2417;
                frontier_phi_57_58_ladder_1 = _2415;
                frontier_phi_57_58_ladder_2 = _2413;
                frontier_phi_57_58_ladder_3 = _2411;
                frontier_phi_57_58_ladder_4 = _2409;
                frontier_phi_57_58_ladder_5 = _2407;
            }
            _2519 = frontier_phi_57_58_ladder_5;
            _2521 = frontier_phi_57_58_ladder_4;
            _2523 = frontier_phi_57_58_ladder_3;
            _2525 = frontier_phi_57_58_ladder_2;
            _2527 = frontier_phi_57_58_ladder_1;
            _2529 = frontier_phi_57_58_ladder;
        }
        float _2534 = isnan(1.0) ? _579 : (isnan(_579) ? 1.0 : min(_579, 1.0));
        _2319 = (_2534 * _2525) + _1756;
        _2321 = (_2534 * _2527) + _1758;
        _2323 = (_2534 * _2529) + _1760;
        _2325 = ((_2519 * _564) * _2534) + _2101;
        _2327 = ((_2521 * _566) * _2534) + _2103;
        _2329 = ((_2523 * _567) * _2534) + _2105;
    }
    else
    {
        _2319 = _1756;
        _2321 = _1758;
        _2323 = _1760;
        _2325 = _2101;
        _2327 = _2103;
        _2329 = _2105;
    }
    float _4187 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _4198 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _4209 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    uint _2349 = _538 + 6u;
    float _2357 = _498 / cbSceneParam._m0[86u].x;
    float _2358 = _499 / cbSceneParam._m0[86u].y;
    vec4 _2372 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, (log2((isnan(cbSceneParam._m0[77u].w) ? _431 : (isnan(_431) ? cbSceneParam._m0[77u].w : min(_431, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2374 = _2372.x;
    float _2375 = _2372.y;
    float _2376 = _2372.z;
    float _2377 = _2372.w;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_431 > cbSceneParam._m0[78u].w)
    {
        float _2432 = isnan(_431) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _431 : min(cbSceneParam._m0[80u].w, _431));
        float _2433 = _2432 / _431;
        float _2444 = _2433 * _483;
        float _2445 = _484 * _2433;
        float _2446 = (-0.0) - _2445;
        float _2447 = _2433 * _485;
        float _2449 = (cbSceneParam._m0[77u].w * _2446) / _2432;
        float _2450 = _2449 + cbSceneParam._m0[79u].w;
        float _2451 = cbSceneParam._m0[79u].w - _2445;
        float _2457 = sqrt(((_2444 * _2444) + (_2445 * _2445)) + (_2447 * _2447));
        float _2460 = (1.0 - (cbSceneParam._m0[77u].w / _2432)) * _2457;
        float _2465 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2467 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2620;
        if (abs((_2446 - _2449) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2620 = ((((_2450 > 0.0) ? exp2(_2465 * _2450) : (2.0 - exp2(_2467 * _2450))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2460;
        }
        else
        {
            float _2580 = 1.0 / cbSceneParam._m0[80u].x;
            float _2581 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : max(_2450, _2451));
            float _2582 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : min(_2450, _2451));
            float _2591 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : min(_2581, 0.0));
            float _2592 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : min(_2582, 0.0));
            _2620 = ((abs(_2457 / _2446) * cbSceneParam._m0[80u].y) * ((((_2591 - _2592) * 2.0) - ((exp2(_2465 * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0)))) - exp2(_2465 * (isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))))) * _2580)) - ((exp2(_2467 * _2591) - exp2(_2467 * _2592)) * _2580))) + (_2460 * cbSceneParam._m0[80u].z);
        }
        vec4 _2622 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, 1.0), 0.0);
        float _2631 = exp2((_2620 * (-1.44269502162933349609375)) * (1.0 - _2622.w));
        float _2632 = log2(_2631);
        float _2648 = log2(_2377);
        _2469 = (exp2(_2648 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].x)) * _2622.x) / cbSceneParam._m0[78u].x)) + _2374;
        _2471 = (exp2(_2648 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].y)) * _2622.y) / cbSceneParam._m0[78u].y)) + _2375;
        _2473 = (exp2(_2648 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].z)) * _2622.z) / cbSceneParam._m0[78u].z)) + _2376;
        _2475 = _2631 * _2377;
    }
    else
    {
        _2469 = _2374;
        _2471 = _2375;
        _2473 = _2376;
        _2475 = _2377;
    }
    float _2487 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2488 = _2487 == 3.0;
    float _2489 = log2(_2475);
    float _2496 = exp2(_2489 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2319 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _579))) + ((_2325 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1389)) * cbPerFrame._m0[3u].x));
    float _2497 = exp2(_2489 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2321 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _579))) + ((_2327 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1389)) * cbPerFrame._m0[3u].x));
    float _2498 = exp2(_2489 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2323 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _579))) + ((_2329 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1389)) * cbPerFrame._m0[3u].x));
    float _2507 = (_2487 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2507 * (_2488 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2469)));
    SV_Target.y = _2507 * (_2488 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.z = _2507 * (_2488 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2473)));
    SV_Target.w = cbInstanceData._m0[_2349].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2349].w;
}


