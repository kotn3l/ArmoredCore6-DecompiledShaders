#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[21];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _972;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    vec4 _249 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMatDynParam._m0[17u].x;
    float _256 = _249.y * cbMatDynParam._m0[17u].y;
    float _257 = _249.z * cbMatDynParam._m0[17u].z;
    vec4 _276 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _309 = (TEXCOORD_7.x - ((cbMatDynParam._m0[19u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMatDynParam._m0[19u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMatDynParam._m0[19u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMatDynParam._m0[19u].y * TEXCOORD.w) + 1.0);
    float _3331 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _317 = (_310 * ((_276.x * cbMatDynParam._m0[18u].x) - _255)) + _255;
    float _318 = (_310 * ((_276.y * cbMatDynParam._m0[18u].y) - _256)) + _256;
    float _319 = (_310 * ((_276.z * cbMatDynParam._m0[18u].z) - _257)) + _257;
    float _336 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_5) + cbTextureTilingScale._m0[5u].w)).x + cbMatDynParam._m0[19u].w;
    float _359 = (((cbMatDynParam._m0[20u].x - _336) + texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_5) + cbTextureTilingScale._m0[6u].w)).x) * _310) + _336;
    vec4 _371 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _373 = _371.x;
    float _374 = _371.y;
    float _375 = _371.z;
    vec4 _387 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _400 = ((_387.z - _375) * _310) + _375;
    float _404 = ((((_387.x - _373) * _310) + _373) * 2.0) + (-1.0);
    float _406 = ((((_387.y - _374) * _310) + _374) * 2.0) + (-1.0);
    float _407 = dot(vec2(_404, _406), vec2(_404, _406));
    float _3342 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _412 = sqrt(1.0 - (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))));
    float _415 = fma(_412, _221, fma(_406, _213 * TANGENT.x, (_199 * _191) * _404));
    float _418 = fma(_412, _222, fma(_406, _213 * TANGENT.y, (_199 * _192) * _404));
    float _421 = fma(_412, _223, fma(_406, _213 * TANGENT.z, (_199 * _193) * _404));
    float _425 = inversesqrt(dot(vec3(_415, _418, _421), vec3(_415, _418, _421)));
    float _426 = _425 * _415;
    float _427 = _425 * _418;
    float _428 = _425 * _421;
    float _3353 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _429 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _3364 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3375 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3386 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3397 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _433 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _449 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _502 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _492);
    float _503 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _492);
    float _504 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _492);
    float _508 = inversesqrt(dot(vec3(_502, _503, _504), vec3(_502, _503, _504)));
    float _509 = _502 * _508;
    float _510 = _503 * _508;
    float _511 = _504 * _508;
    float _517 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _518 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _537 = fma(_428, cbSceneParam._m0[5u].z, fma(_427, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _426));
    float _540 = fma(_428, cbSceneParam._m0[6u].z, fma(_427, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _426));
    float _543 = fma(_428, cbSceneParam._m0[7u].z, fma(_427, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _426));
    uint _556 = uint(roundEven(NORMAL.w)) * 13u;
    uint _559 = (_556 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _565 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_559].x;
    float _566 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_559].y;
    float _567 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_559].z;
    float _3408 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _571 = 1.0 - _433;
    float _572 = _568 * _571;
    float _573 = _569 * _571;
    float _574 = _570 * _571;
    float _579 = (_568 + (-0.039999999105930328369140625)) * _433;
    float _580 = (_569 + (-0.039999999105930328369140625)) * _433;
    float _581 = (_570 + (-0.039999999105930328369140625)) * _433;
    float _582 = _579 + 0.039999999105930328369140625;
    float _584 = _580 + 0.039999999105930328369140625;
    float _585 = _581 + 0.039999999105930328369140625;
    vec4 _594 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _517, cbSceneParam._m0[86u].y * _518));
    float _597 = _594.x * TEXCOORD_7.w;
    float _598 = dot(vec3(_426, _427, _428), vec3(_509, _510, _511));
    float _601 = _598 * 2.0;
    float _605 = (_601 * _426) - _509;
    float _606 = (_601 * _427) - _510;
    float _607 = (_601 * _428) - _511;
    float _611 = abs(dot(vec3(_509, _510, _511), vec3(_426, _427, _428)));
    float _3441 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _613 = sqrt(_429);
    float _626 = exp2((_613 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_613 * 3.0));
    float _632 = (1.0 - _626) * ((_613 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _633 = _626 * _613;
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _971;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _696 = fma(_669, cbModelParam._m0[26u].z, fma(_665, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _661));
        float _700 = fma(_669, cbModelParam._m0[27u].z, fma(_665, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _661));
        float _704 = fma(_669, cbModelParam._m0[28u].z, fma(_665, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _661));
        float _729 = _661 + _426;
        float _730 = _665 + _427;
        float _731 = _669 + _428;
        float _741 = fma(_731, cbModelParam._m0[26u].z, fma(_730, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729)) - _696;
        float _742 = fma(_731, cbModelParam._m0[27u].z, fma(_730, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729)) - _700;
        float _743 = fma(_731, cbModelParam._m0[28u].z, fma(_730, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729)) - _704;
        float _747 = inversesqrt(dot(vec3(_741, _742, _743), vec3(_741, _742, _743)));
        float _760 = ((_747 * _741) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_696 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _761 = ((_747 * _742) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_700 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _762 = ((_747 * _743) / cbModelParam._m0[34u].z) + ((((((_704 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_760, _761, _762), 0.0);
        float _799 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_765.x + (-0.5));
        float _801 = _799 * (_765.y + (-0.5));
        float _802 = _799 * (_765.z + (-0.5));
        float _809 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_772.x + (-0.5));
        float _811 = _809 * (_772.y + (-0.5));
        float _812 = _809 * (_772.z + (-0.5));
        float _819 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_779.x + (-0.5));
        float _821 = _819 * (_779.y + (-0.5));
        float _822 = _819 * (_779.z + (-0.5));
        float _829 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_786.x + (-0.5));
        float _831 = _829 * (_786.y + (-0.5));
        float _832 = _829 * (_786.z + (-0.5));
        float _833 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = _800 * 0.5;
        float _837 = _810 * 0.5;
        float _838 = _820 * 0.5;
        float _839 = dot(vec3(_836, _837, _838), vec3(_836, _837, _838));
        float _844 = (_839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_839);
        float _853 = (dot(vec3(_426, _427, _428), vec3(_844 * _836, _844 * _837, _844 * _838)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _863 = sqrt(((_837 * _837) + (_836 * _836)) + (_838 * _838)) / (_833 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _865 = _864 * 2.0;
        float _869 = (1.0 - _864) / (_864 + 1.0);
        float _3489 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _879 = ((((1.0 - _870) * (_865 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_865 + 1.0))) + _870) * _833;
        float _880 = _801 * 0.5;
        float _881 = _811 * 0.5;
        float _882 = _821 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _896 = (dot(vec3(_426, _427, _428), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _905 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3522 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_907 + 1.0))) + _912) * _834;
        float _922 = _802 * 0.5;
        float _923 = _812 * 0.5;
        float _924 = _822 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_426, _427, _428), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3555 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_949 + 1.0))) + _954) * _835;
        _971 = _802;
        _973 = _801;
        _974 = _800;
        _975 = _812;
        _976 = _811;
        _977 = _810;
        _978 = _822;
        _979 = _821;
        _980 = _820;
        _981 = _835;
        _982 = _834;
        _983 = _833;
        _984 = cbModelParam._m0[36u].z * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
    }
    else
    {
        _971 = _972;
        _973 = _972;
        _974 = _972;
        _975 = _972;
        _976 = _972;
        _977 = _972;
        _978 = _972;
        _979 = _972;
        _980 = _972;
        _981 = _972;
        _982 = _972;
        _983 = _972;
        _984 = 0.0;
        _985 = 0.0;
        _986 = 0.0;
    }
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1012 = fma(_669, cbModelParam._m0[30u].z, fma(_665, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _661));
        float _1016 = fma(_669, cbModelParam._m0[31u].z, fma(_665, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _661));
        float _1020 = fma(_669, cbModelParam._m0[32u].z, fma(_665, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _661));
        float _1043 = _661 + _426;
        float _1044 = _665 + _427;
        float _1045 = _669 + _428;
        float _1055 = fma(_1045, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043)) - _1012;
        float _1056 = fma(_1045, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043)) - _1016;
        float _1057 = fma(_1045, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043)) - _1020;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1012 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1016 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[35u].z) + ((((((_1020 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1111 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1078.x + (-0.5));
        float _1113 = _1111 * (_1078.y + (-0.5));
        float _1114 = _1111 * (_1078.z + (-0.5));
        float _1121 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1085.x + (-0.5));
        float _1123 = _1121 * (_1085.y + (-0.5));
        float _1124 = _1121 * (_1085.z + (-0.5));
        float _1131 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1092.x + (-0.5));
        float _1133 = _1131 * (_1092.y + (-0.5));
        float _1134 = _1131 * (_1092.z + (-0.5));
        float _1141 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1099.x + (-0.5));
        float _1143 = _1141 * (_1099.y + (-0.5));
        float _1144 = _1141 * (_1099.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_426, _427, _428), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3618 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1175 + 1.0))) + _1180) * _1145;
        float _1190 = _1113 * 0.5;
        float _1191 = _1123 * 0.5;
        float _1192 = _1133 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_426, _427, _428), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3651 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1217 + 1.0))) + _1222) * _1146;
        float _1232 = _1114 * 0.5;
        float _1233 = _1124 * 0.5;
        float _1234 = _1134 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_426, _427, _428), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3684 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1259 + 1.0))) + _1264) * _1147;
        _1281 = _1114;
        _1282 = _1113;
        _1283 = _1112;
        _1284 = _1124;
        _1285 = _1123;
        _1286 = _1122;
        _1287 = _1134;
        _1288 = _1133;
        _1289 = _1132;
        _1290 = _1147;
        _1291 = _1146;
        _1292 = _1145;
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _972;
        _1282 = _972;
        _1283 = _972;
        _1284 = _972;
        _1285 = _972;
        _1286 = _972;
        _1287 = _972;
        _1288 = _972;
        _1289 = _972;
        _1290 = _972;
        _1291 = _972;
        _1292 = _972;
        _1293 = 0.0;
        _1294 = 0.0;
        _1295 = 0.0;
    }
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _984)) + _984;
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _985)) + _985;
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _986)) + _986;
    float _1328 = fma(_1307, cbSceneParam._m0[89u].z, fma(_1306, cbSceneParam._m0[89u].y, _1305 * cbSceneParam._m0[89u].x));
    float _1331 = fma(_1307, cbSceneParam._m0[90u].z, fma(_1306, cbSceneParam._m0[90u].y, _1305 * cbSceneParam._m0[90u].x));
    float _1334 = fma(_1307, cbSceneParam._m0[91u].z, fma(_1306, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1305));
    float _1349 = _605 * 0.5;
    float _1350 = _606 * 0.5;
    float _1351 = _607 * 0.5;
    float _1352 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1355 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1358 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1392;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1365 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_971, _975, _978, _981));
        float _1369 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_973, _976, _979, _982));
        float _1373 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_974, _977, _980, _983));
        float _1380 = dot(vec4(cbModelParam._m0[39u]), vec4(_1349, _1350, _1351, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1380) ? 0.0 : (isnan(0.0) ? _1380 : max(0.0, _1380))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1403;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1394 = dot(vec4(cbModelParam._m0[40u]), vec4(_1349, _1350, _1351, 1.0));
        _1403 = dot(vec3(isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1403 = 1.0;
    }
    float _1407 = (_1403 * cbModelParam._m0[1u].x) + (_1392 * (1.0 - cbModelParam._m0[1u].x));
    float _1417 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _429);
    float _1418 = isnan(_1417) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1417 : min(cbModelParam._m0[25u].z, _1417));
    float _1500;
    float _1502;
    float _1504;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1467 = fma(_669, cbModelParam._m0[13u].z, fma(_665, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _661)) + cbModelParam._m0[13u].w;
        float _1471 = fma(_669, cbModelParam._m0[14u].z, fma(_665, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _661)) + cbModelParam._m0[14u].w;
        float _1475 = fma(_669, cbModelParam._m0[15u].z, fma(_665, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _661)) + cbModelParam._m0[15u].w;
        float _1478 = fma(_607, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _605));
        float _1481 = fma(_607, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _605));
        float _1484 = fma(_607, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _605));
        float _1512;
        if (_1478 > 0.0)
        {
            _1512 = abs((1.0 - _1467) / _1478);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1467 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1512 = frontier_phi_16_14_ladder;
        }
        float _1737;
        if (_1481 > 0.0)
        {
            _1737 = abs((1.0 - _1471) / _1481);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1471 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1737 = frontier_phi_25_21_ladder;
        }
        float _1994;
        if (_1484 > 0.0)
        {
            _1994 = abs((1.0 - _1475) / _1484);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1475 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1994 = frontier_phi_37_32_ladder;
        }
        float _1996 = isnan(_1737) ? _1512 : (isnan(_1512) ? _1737 : min(_1512, _1737));
        float _1997 = isnan(_1994) ? _1996 : (isnan(_1996) ? _1994 : min(_1996, _1994));
        float _2001 = (_1997 * _1478) + _1467;
        float _2002 = (_1997 * _1481) + _1471;
        float _2003 = (_1997 * _1484) + _1475;
        float _2004 = _1997 * 9.9999997473787516355514526367188e-05;
        float _2006 = (-1.0) - _2004;
        float _2008 = _2004 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2003 > _2008) || ((_2003 < _2006) || ((_2002 > _2008) || ((_2002 < _2006) || ((_2001 < _2006) || (_2001 > _2008))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2131 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2003, cbModelParam._m0[9u].z, fma(_2002, cbModelParam._m0[9u].y, _2001 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2003, cbModelParam._m0[10u].z, fma(_2002, cbModelParam._m0[10u].y, _2001 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2003, cbModelParam._m0[11u].z, fma(_2002, cbModelParam._m0[11u].y, _2001 * cbModelParam._m0[11u].x))), _1418);
            frontier_phi_15_37_ladder = _2131.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2131.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2131.x * cbModelParam._m0[1u].y;
        }
        _1500 = frontier_phi_15_37_ladder_2;
        _1502 = frontier_phi_15_37_ladder_1;
        _1504 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_605, _606, _607), _1418);
        _1500 = _1488.x * cbModelParam._m0[1u].y;
        _1502 = _1488.y * cbModelParam._m0[1u].y;
        _1504 = _1488.z * cbModelParam._m0[1u].y;
    }
    float _1508 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _429);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1508 : min(cbModelParam._m0[25u].w, _1508));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1563 = fma(_669, cbModelParam._m0[21u].z, fma(_665, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _661)) + cbModelParam._m0[21u].w;
        float _1567 = fma(_669, cbModelParam._m0[22u].z, fma(_665, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _661)) + cbModelParam._m0[22u].w;
        float _1571 = fma(_669, cbModelParam._m0[23u].z, fma(_665, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _661)) + cbModelParam._m0[23u].w;
        float _1574 = fma(_607, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _605));
        float _1577 = fma(_607, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _605));
        float _1580 = fma(_607, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _605));
        float _1742;
        if (_1574 > 0.0)
        {
            _1742 = abs((1.0 - _1563) / _1574);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1563 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1742 = frontier_phi_27_23_ladder;
        }
        float _2021;
        if (_1577 > 0.0)
        {
            _2021 = abs((1.0 - _1567) / _1577);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1567 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2021 = frontier_phi_39_34_ladder;
        }
        float _2234;
        if (_1580 > 0.0)
        {
            _2234 = abs((1.0 - _1571) / _1580);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1571 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2234 = frontier_phi_48_45_ladder;
        }
        float _2236 = isnan(_2021) ? _1742 : (isnan(_1742) ? _2021 : min(_1742, _2021));
        float _2237 = isnan(_2234) ? _2236 : (isnan(_2236) ? _2234 : min(_2236, _2234));
        float _2241 = (_2237 * _1574) + _1563;
        float _2242 = (_2237 * _1577) + _1567;
        float _2243 = (_2237 * _1580) + _1571;
        float _2244 = _2237 * 9.9999997473787516355514526367188e-05;
        float _2245 = (-1.0) - _2244;
        float _2247 = _2244 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2243 > _2247) || ((_2243 < _2245) || ((_2242 > _2247) || ((_2242 < _2245) || ((_2241 < _2245) || (_2241 > _2247))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2444 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2243, cbModelParam._m0[17u].z, fma(_2242, cbModelParam._m0[17u].y, _2241 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2243, cbModelParam._m0[18u].z, fma(_2242, cbModelParam._m0[18u].y, _2241 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2243, cbModelParam._m0[19u].z, fma(_2242, cbModelParam._m0[19u].y, _2241 * cbModelParam._m0[19u].x))), _1509);
            frontier_phi_24_48_ladder = _2444.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2444.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2444.x * cbModelParam._m0[1u].z;
        }
        _1599 = frontier_phi_24_48_ladder_2;
        _1601 = frontier_phi_24_48_ladder_1;
        _1603 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1583 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_605, _606, _607), _1509);
        _1599 = _1583.x * cbModelParam._m0[1u].z;
        _1601 = _1583.y * cbModelParam._m0[1u].z;
        _1603 = _1583.z * cbModelParam._m0[1u].z;
    }
    float _1616 = (((_632 * _582) + _633) * _597) * ((cbModelParam._m0[1u].w * (_1599 - _1500)) + _1500);
    float _1618 = (((_632 * _584) + _633) * _597) * ((cbModelParam._m0[1u].w * (_1601 - _1502)) + _1502);
    float _1620 = (((_632 * _585) + _633) * _597) * ((cbModelParam._m0[1u].w * (_1603 - _1504)) + _1504);
    float _1623 = fma(_1620, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1616 * cbSceneParam._m0[89u].x));
    float _1626 = fma(_1620, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1616 * cbSceneParam._m0[90u].x));
    float _1629 = fma(_1620, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, _1616 * cbSceneParam._m0[91u].x));
    vec4 _1637 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_517, _518));
    float _1639 = _1637.w;
    float _1651 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1639);
    float _1652 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1639);
    float _1653 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1639);
    uvec4 _1657 = floatBitsToUint(cbInstanceData._m0[_556 + 5u]);
    uint _1659 = _1657.x * 14u;
    uint _1660 = _1659 + 13u;
    float _1667 = _597 + (-1.0);
    float _1672 = (cbLight._m0[_1660].x * _1667) + 1.0;
    float _1673 = (cbLight._m0[_1660].y * _1667) + 1.0;
    float _1674 = (cbLight._m0[_1660].z * _1667) + 1.0;
    float _1675 = (cbLight._m0[_1660].w * _1667) + 1.0;
    uint _1676 = _1659 + 5u;
    float _1682 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
    uint _1686 = _1659 + 4u;
    float _1695 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
    uint _1699 = _1659 | 1u;
    float _1710 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_426, _427, _428));
    float _1713 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_426, _427, _428));
    float _3820 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _3831 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1718 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1720 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.3183098733425140380859375;
    float _1727 = ((cbLight._m0[_1676].x * _1682) * _1720) + (((cbLight._m0[_1686].x * _1651) * _1695) * _1718);
    float _1728 = ((_1682 * cbLight._m0[_1676].y) * _1720) + (((cbLight._m0[_1686].y * _1652) * _1695) * _1718);
    float _1729 = ((_1682 * cbLight._m0[_1676].z) * _1720) + (((cbLight._m0[_1686].z * _1653) * _1695) * _1718);
    uvec4 _1734 = floatBitsToUint(cbLight._m0[_1659 + 12u]);
    bool _1736 = _1734.x == 0u;
    float _1747;
    float _1749;
    float _1751;
    if (_1736)
    {
        _1747 = _1727;
        _1749 = _1728;
        _1751 = _1729;
    }
    else
    {
        uint _1755 = _1659 + 6u;
        float _1771 = (dot(vec3(cbLight._m0[_1659 + 2u].xyz), vec3(_426, _427, _428)) * 0.5) + 0.5;
        float _1772 = _1771 * _1771;
        float _3842 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1774 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _1747 = (((cbLight._m0[_1755].x * 0.3183098733425140380859375) * _1773) * _1774) + _1727;
        _1749 = (((cbLight._m0[_1755].y * 0.3183098733425140380859375) * _1773) * _1774) + _1728;
        _1751 = (((cbLight._m0[_1755].z * 0.3183098733425140380859375) * _1773) * _1774) + _1729;
    }
    bool _1754 = _1734.y == 0u;
    float _1792;
    float _1794;
    float _1796;
    if (_1754)
    {
        _1792 = _1747;
        _1794 = _1749;
        _1796 = _1751;
    }
    else
    {
        uint _1965 = _1659 + 7u;
        float _1981 = (dot(vec3(cbLight._m0[_1659 + 3u].xyz), vec3(_426, _427, _428)) * 0.5) + 0.5;
        float _1982 = _1981 * _1981;
        float _3858 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1984 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _1792 = (((cbLight._m0[_1965].x * 0.3183098733425140380859375) * _1983) * _1984) + _1747;
        _1794 = (((cbLight._m0[_1965].y * 0.3183098733425140380859375) * _1983) * _1984) + _1749;
        _1796 = (((cbLight._m0[_1965].z * 0.3183098733425140380859375) * _1983) * _1984) + _1751;
    }
    uint _1799 = _1659 + 8u;
    float _1812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1659].w)) * _429) * 0.949999988079071044921875);
    float _1813 = _1812 * _1812;
    float _1814 = cbLight._m0[_1659].x + _509;
    float _1815 = cbLight._m0[_1659].y + _510;
    float _1816 = cbLight._m0[_1659].z + _511;
    float _1820 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
    float _1821 = _1820 * _1814;
    float _1822 = _1820 * _1815;
    float _1823 = _1820 * _1816;
    float _1824 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_1659].xyz));
    float _3874 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _1828 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1829 = dot(vec3(_426, _427, _428), vec3(_1821, _1822, _1823));
    float _3896 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1833 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_1821, _1822, _1823));
    float _3907 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1837 = _1813 * _1813;
    float _1841 = ((_1832 * _1832) * (_1837 + (-1.0))) + 1.0;
    float _1849 = exp2(log2(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * 5.0);
    float _1850 = 0.959999978542327880859375 - _579;
    float _1852 = 0.959999978542327880859375 - _580;
    float _1853 = 0.959999978542327880859375 - _581;
    float _1860 = 1.0 - _1813;
    float _1871 = (0.5 / (((_1828 * ((_1827 * _1860) + _1813)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _1860) + _1813) * _1827))) * _1827;
    float _3918 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1873 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1837 / ((_1841 * _1841) * 3.141590118408203125));
    uint _1887 = _1659 + 9u;
    float _1898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1699].w)) * _429) * 0.949999988079071044921875);
    float _1899 = _1898 * _1898;
    float _1900 = cbLight._m0[_1699].x + _509;
    float _1901 = cbLight._m0[_1699].y + _510;
    float _1902 = cbLight._m0[_1699].z + _511;
    float _1906 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
    float _1907 = _1906 * _1900;
    float _1908 = _1906 * _1901;
    float _1909 = _1906 * _1902;
    float _1910 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_1699].xyz));
    float _3929 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1913 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1914 = dot(vec3(_426, _427, _428), vec3(_1907, _1908, _1909));
    float _3940 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1918 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_1907, _1908, _1909));
    float _3951 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1922 = _1899 * _1899;
    float _1926 = ((_1917 * _1917) * (_1922 + (-1.0))) + 1.0;
    float _1933 = exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0);
    float _1940 = 1.0 - _1899;
    float _1950 = (0.5 / (((_1828 * ((_1913 * _1940) + _1899)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _1940) + _1899) * _1913))) * _1913;
    float _3962 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1952 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1922 / ((_1926 * _1926) * 3.141590118408203125));
    float _1962 = (((((_1933 * _1850) + _582) * cbLight._m0[_1887].x) * _1952) * _1682) + ((((cbLight._m0[_1799].x * _1651) * ((_1849 * _1850) + _582)) * _1873) * _1695);
    float _1963 = (((((_1933 * _1852) + _584) * cbLight._m0[_1887].y) * _1952) * _1682) + ((((cbLight._m0[_1799].y * _1652) * ((_1849 * _1852) + _584)) * _1873) * _1695);
    float _1964 = (((((_1933 * _1853) + _585) * cbLight._m0[_1887].z) * _1952) * _1682) + ((((cbLight._m0[_1799].z * _1653) * ((_1849 * _1853) + _585)) * _1873) * _1695);
    float _2026;
    float _2028;
    float _2030;
    if (_1736)
    {
        _2026 = _1962;
        _2028 = _1963;
        _2030 = _1964;
    }
    else
    {
        uint _2032 = _1659 + 2u;
        uint _2036 = _1659 + 10u;
        float _2050 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2032].w)) * _429) * 0.949999988079071044921875);
        float _2051 = _2050 * _2050;
        float _2052 = cbLight._m0[_2032].x + _509;
        float _2053 = cbLight._m0[_2032].y + _510;
        float _2054 = cbLight._m0[_2032].z + _511;
        float _2058 = inversesqrt(dot(vec3(_2052, _2053, _2054), vec3(_2052, _2053, _2054)));
        float _2059 = _2058 * _2052;
        float _2060 = _2058 * _2053;
        float _2061 = _2058 * _2054;
        float _2062 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_2032].xyz));
        float _3973 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2065 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _2066 = dot(vec3(_426, _427, _428), vec3(_2059, _2060, _2061));
        float _3984 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _2070 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_2059, _2060, _2061));
        float _3995 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2074 = _2051 * _2051;
        float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
        float _2085 = exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0);
        float _2092 = 1.0 - _2051;
        float _2102 = (0.5 / (((_1828 * ((_2065 * _2092) + _2051)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _2092) + _2051) * _2065))) * _2065;
        float _4006 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2104 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
        float _2105 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _2026 = (((((_2085 * _1850) + _582) * cbLight._m0[_2036].x) * _2104) * _2105) + _1962;
        _2028 = (((((_2085 * _1852) + _584) * cbLight._m0[_2036].y) * _2104) * _2105) + _1963;
        _2030 = (((((_2085 * _1853) + _585) * cbLight._m0[_2036].z) * _2104) * _2105) + _1964;
    }
    float _2140;
    float _2142;
    float _2144;
    if (_1754)
    {
        _2140 = _2026;
        _2142 = _2028;
        _2144 = _2030;
    }
    else
    {
        uint _2151 = _1659 + 3u;
        uint _2155 = _1659 + 11u;
        float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _429) * 0.949999988079071044921875);
        float _2170 = _2169 * _2169;
        float _2171 = cbLight._m0[_2151].x + _509;
        float _2172 = cbLight._m0[_2151].y + _510;
        float _2173 = cbLight._m0[_2151].z + _511;
        float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
        float _2178 = _2177 * _2171;
        float _2179 = _2177 * _2172;
        float _2180 = _2177 * _2173;
        float _2181 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_2151].xyz));
        float _4022 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2185 = dot(vec3(_426, _427, _428), vec3(_2178, _2179, _2180));
        float _4033 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2189 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2178, _2179, _2180));
        float _4044 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2193 = _2170 * _2170;
        float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
        float _2204 = exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0);
        float _2211 = 1.0 - _2170;
        float _2221 = (0.5 / (((_1828 * ((_2184 * _2211) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_1828 * _2211) + _2170) * _2184))) * _2184;
        float _4055 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2223 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
        float _2224 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _2140 = (((((_2204 * _1850) + _582) * cbLight._m0[_2155].x) * _2223) * _2224) + _2026;
        _2142 = (((((_2204 * _1852) + _584) * cbLight._m0[_2155].y) * _2223) * _2224) + _2028;
        _2144 = (((((_2204 * _1853) + _585) * cbLight._m0[_2155].z) * _2223) * _2224) + _2030;
    }
    float _2358;
    float _2360;
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    if (_1657.y == 0u)
    {
        float _2299 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2300 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2299;
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2299;
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2299;
        uvec4 _2314 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2315 = _2314.x;
        uint _2326 = uint((float(_2314.y) * floor(float(uint(cbSceneParam._m0[85u].y * _518) / _2315))) + floor(float(uint(cbSceneParam._m0[85u].x * _517) / _2315)));
        float _2336 = (log2(_2302 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2337 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        uint _2340 = uint(isnan(14.0) ? _2337 : (isnan(_2337) ? 14.0 : min(_2337, 14.0)));
        uvec4 _2345 = texelFetch(g_lightClusterGridBuffer, int(((_2340 << 2u) + (_2326 << 6u)) >> 2u));
        uint _2346 = _2345.x;
        uint _2347 = _2314.z;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        if (((((1u << ((_2347 >> 4u) & 15u)) + 4294967295u) & _2346) == 0u) || ((_2347 & 240u) == 0u))
        {
            _2449 = 0.0;
            _2451 = 0.0;
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
        }
        else
        {
            float _2450;
            float _2452;
            float _2454;
            float _2456;
            float _2458;
            float _2460;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            uint _2599 = 0u;
            uint _2608;
            bool _2609;
            for (;;)
            {
                _2608 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2599 << 2u)) >> 2u)).x;
                _2609 = _2608 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2609)
                {
                    frontier_phi_63_pred = _2598;
                    frontier_phi_63_pred_1 = _2597;
                    frontier_phi_63_pred_2 = _2596;
                    frontier_phi_63_pred_3 = _2595;
                    frontier_phi_63_pred_4 = _2594;
                    frontier_phi_63_pred_5 = _2593;
                }
                else
                {
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    uint _2723;
                    _2717 = _2593;
                    _2718 = _2594;
                    _2719 = _2595;
                    _2720 = _2596;
                    _2721 = _2597;
                    _2722 = _2598;
                    _2723 = _2608;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    for (;;)
                    {
                        uint _2727 = uint(findLSB(_2723)) + (_2599 << 5u);
                        uint _2724 = (_2723 + 4294967295u) & _2723;
                        uint _2729 = _2727 * 48u;
                        vec4 _2743 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 3u)).x));
                        uint _2749 = (_2727 * 48u) + 4u;
                        vec4 _2762 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2749)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 3u)).x));
                        uint _2768 = (_2727 * 48u) + 8u;
                        vec3 _2779 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x));
                        float _2783 = _2743.x - _2300;
                        float _2784 = _2743.y - _2301;
                        float _2785 = _2743.z - _2302;
                        float _2786 = dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785));
                        float _2789 = inversesqrt(_2786);
                        float _2790 = _2789 * _2783;
                        float _2791 = _2789 * _2784;
                        float _2792 = _2789 * _2785;
                        float _2793 = dot(vec3(_537, _540, _543), vec3(_2790, _2791, _2792));
                        float _2798 = 1.0 - (_2786 * _2743.w);
                        float _4081 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2799 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2800 = sqrt(_2786) * _2762.w;
                        float _2803 = 1.39999997615814208984375 / (_2800 + 1.39999997615814208984375);
                        float _2804 = _2803 * _2803;
                        float _2807 = ((1.0 - _2804) * _2793) + _2804;
                        float _2810 = _2800 * _2800;
                        float _2814 = ((isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0))) * _2799) / ((_2810 * 0.699999988079071044921875) + 1.0);
                        float _2818 = (-0.0) - _2300;
                        float _2819 = (-0.0) - _2301;
                        float _2820 = (-0.0) - _2302;
                        float _2824 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
                        float _2825 = _2824 * _2818;
                        float _2826 = _2824 * _2819;
                        float _2827 = _2824 * _2820;
                        float _2835 = exp2(log2(1.0 / ((_2810 * 3.5) + 5.0)) * 0.25);
                        float _2836 = 1.0 - _613;
                        float _2843 = sqrt(1.0 - ((1.0 - (_2836 * _2836)) * (1.0 - (_2835 * _2835))));
                        float _2844 = _2843 * _2843;
                        float _2845 = _2844 * _2844;
                        float _2846 = _2825 + _2790;
                        float _2847 = _2826 + _2791;
                        float _2848 = _2827 + _2792;
                        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
                        float _2856 = dot(vec3(_537, _540, _543), vec3(_2825, _2826, _2827));
                        float _4097 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2859 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2860 = dot(vec3(_537, _540, _543), vec3(_2852 * _2846, _2852 * _2847, _2852 * _2848));
                        float _4108 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2863 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2867 = ((_2863 * _2863) * (_2845 + (-1.0))) + 1.0;
                        float _2868 = _2803 * _2844;
                        float _2869 = _2868 * _2868;
                        float _2872 = ((1.0 - _2869) * _2793) + _2869;
                        float _4119 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2873 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2874 = 1.0 - _2844;
                        float _2884 = (0.5 / (((_2873 * ((_2859 * _2874) + _2844)) + 9.9999999392252902907785028219223e-09) + (((_2873 * _2874) + _2844) * _2859))) * _2873;
                        float _4130 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2895 = (((_2845 * 3.1415927410125732421875) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) / ((_2867 * _2867) * ((_2810 * 2.1991131305694580078125) + 3.141590118408203125))) * _2799;
                        _2652 = (_2814 * _2762.x) + _2720;
                        _2653 = (_2814 * _2762.y) + _2721;
                        _2654 = (_2814 * _2762.z) + _2722;
                        _2649 = (_2895 * _2779.x) + _2717;
                        _2650 = (_2895 * _2779.y) + _2718;
                        _2651 = (_2895 * _2779.z) + _2719;
                        if (_2724 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2717 = _2649;
                            _2718 = _2650;
                            _2719 = _2651;
                            _2720 = _2652;
                            _2721 = _2653;
                            _2722 = _2654;
                            _2723 = _2724;
                        }
                    }
                    frontier_phi_63_pred = _2654;
                    frontier_phi_63_pred_1 = _2653;
                    frontier_phi_63_pred_2 = _2652;
                    frontier_phi_63_pred_3 = _2651;
                    frontier_phi_63_pred_4 = _2650;
                    frontier_phi_63_pred_5 = _2649;
                }
                _2460 = frontier_phi_63_pred;
                _2458 = frontier_phi_63_pred_1;
                _2456 = frontier_phi_63_pred_2;
                _2454 = frontier_phi_63_pred_3;
                _2452 = frontier_phi_63_pred_4;
                _2450 = frontier_phi_63_pred_5;
                uint _2600 = _2599 + 1u;
                if (_2600 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2593 = _2450;
                    _2594 = _2452;
                    _2595 = _2454;
                    _2596 = _2456;
                    _2597 = _2458;
                    _2598 = _2460;
                    _2599 = _2600;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2449 = _2450;
            _2451 = _2452;
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
        }
        uvec4 _2463 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2464 = _2463.z;
        uint _2466 = (_2464 >> 8u) & 15u;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        if (((4294967295u << _2466) & _2346) == 0u)
        {
            _2561 = _2449;
            _2563 = _2451;
            _2565 = _2453;
            _2567 = _2455;
            _2569 = _2457;
            _2571 = _2459;
        }
        else
        {
            float _2586 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
            float _2587 = _2586 * _2300;
            float _2588 = _2586 * _2301;
            float _2589 = _2586 * _2302;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2466 < ((_2464 >> 12u) & 15u))
            {
                float _2562;
                float _2564;
                float _2566;
                float _2568;
                float _2570;
                float _2572;
                float _2700 = _2449;
                float _2701 = _2451;
                float _2702 = _2453;
                float _2703 = _2455;
                float _2704 = _2457;
                float _2705 = _2459;
                uint _2706 = _2466;
                uint _2715;
                bool _2716;
                for (;;)
                {
                    _2715 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2706 << 2u)) >> 2u)).x;
                    _2716 = _2715 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2716)
                    {
                        frontier_phi_69_pred = _2705;
                        frontier_phi_69_pred_1 = _2704;
                        frontier_phi_69_pred_2 = _2703;
                        frontier_phi_69_pred_3 = _2702;
                        frontier_phi_69_pred_4 = _2701;
                        frontier_phi_69_pred_5 = _2700;
                    }
                    else
                    {
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _2913 = _2700;
                        float _2914 = _2701;
                        float _2915 = _2702;
                        float _2916 = _2703;
                        float _2917 = _2704;
                        float _2918 = _2705;
                        uint _2919 = _2715;
                        uint _2920;
                        vec4 _2945;
                        float _2946;
                        vec4 _2961;
                        vec3 _2973;
                        vec4 _2989;
                        vec4 _3004;
                        float _3051;
                        bool _3052;
                        for (;;)
                        {
                            uint _2930 = ((_2706 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2919));
                            _2920 = (_2919 + 4294967295u) & _2919;
                            uint _2932 = _2930 * 40u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            _2946 = _2945.w;
                            uint _2948 = (_2930 * 40u) + 4u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            uint _2963 = (_2930 * 40u) + 8u;
                            _2973 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x));
                            uint _2976 = (_2930 * 40u) + 16u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2991 = (_2930 * 40u) + 20u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3007 = (_2930 * 40u) + 24u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3026 = (_2930 * 40u) + 28u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3051 = fma(_2302, _3039.z, fma(_2301, _3039.y, _3039.x * _2300)) + _3039.w;
                            _3052 = !((fma(_2302, _3020.z, fma(_2301, _3020.y, _3020.x * _2300)) + _3020.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3052)
                            {
                                float _3079 = _2945.x - _2300;
                                float _3080 = _2945.y - _2301;
                                float _3081 = _2945.z - _2302;
                                float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                                float _3085 = inversesqrt(_3082);
                                float _3086 = _3085 * _3079;
                                float _3087 = _3085 * _3080;
                                float _3088 = _3085 * _3081;
                                float _3092 = 1.0 - (_3082 / (_2946 * _2946));
                                float _4141 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3097 = sqrt(_3082) * _2961.w;
                                float _3099 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                                float _3100 = _3099 * _3099;
                                float _3103 = ((1.0 - _3100) * dot(vec3(_3086, _3087, _3088), vec3(_537, _540, _543))) + _3100;
                                float _3106 = _3097 * _3097;
                                float _3110 = (fma(_2302, _2989.z, fma(_2301, _2989.y, _2989.x * _2300)) + _2989.w) / _3051;
                                float _3111 = (fma(_2302, _3004.z, fma(_2301, _3004.y, _3004.x * _2300)) + _3004.w) / _3051;
                                float _3115 = 1.0 - dot(vec2(_3110, _3111), vec2(_3110, _3111));
                                float _4157 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3117 = _3116 * (((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3093) / ((_3106 * 0.699999988079071044921875) + 1.0));
                                float _3129 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                                float _3130 = 1.0 - _613;
                                float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                                float _3138 = _3137 * _3137;
                                float _3139 = _3138 * _3138;
                                float _3140 = _3086 - _2587;
                                float _3141 = _3087 - _2588;
                                float _3142 = _3088 - _2589;
                                float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                                float _3150 = dot(vec3(_537, _540, _543), vec3((-0.0) - _2587, (-0.0) - _2588, (-0.0) - _2589));
                                float _4168 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3153 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3154 = dot(vec3(_537, _540, _543), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                                float _4179 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3157 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                                float _3162 = _3099 * _3138;
                                float _3163 = _3162 * _3162;
                                float _3169 = ((1.0 - _3163) * dot(vec3(_537, _540, _543), vec3(_3086, _3087, _3088))) + _3163;
                                float _4190 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3171 = 1.0 - _3138;
                                float _3181 = (0.5 / (((_3170 * ((_3153 * _3171) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3170 * _3171) + _3138) * _3153))) * _3170;
                                float _4201 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3191 = (_3116 * _3093) * (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_3161 * _3161) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3117 * _2961.z;
                                frontier_phi_75_pred_1 = _3117 * _2961.y;
                                frontier_phi_75_pred_2 = _3117 * _2961.x;
                                frontier_phi_75_pred_3 = _3191 * _2973.z;
                                frontier_phi_75_pred_4 = _3191 * _2973.y;
                                frontier_phi_75_pred_5 = _3191 * _2973.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3200 = frontier_phi_75_pred;
                            _3199 = frontier_phi_75_pred_1;
                            _3198 = frontier_phi_75_pred_2;
                            _3197 = frontier_phi_75_pred_3;
                            _3196 = frontier_phi_75_pred_4;
                            _3195 = frontier_phi_75_pred_5;
                            _2903 = _3198 + _2916;
                            _2904 = _3199 + _2917;
                            _2905 = _3200 + _2918;
                            _2900 = _3195 + _2913;
                            _2901 = _3196 + _2914;
                            _2902 = _3197 + _2915;
                            if (_2920 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2920;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2905;
                        frontier_phi_69_pred_1 = _2904;
                        frontier_phi_69_pred_2 = _2903;
                        frontier_phi_69_pred_3 = _2902;
                        frontier_phi_69_pred_4 = _2901;
                        frontier_phi_69_pred_5 = _2900;
                    }
                    _2572 = frontier_phi_69_pred;
                    _2570 = frontier_phi_69_pred_1;
                    _2568 = frontier_phi_69_pred_2;
                    _2566 = frontier_phi_69_pred_3;
                    _2564 = frontier_phi_69_pred_4;
                    _2562 = frontier_phi_69_pred_5;
                    uint _2707 = _2706 + 1u;
                    if (_2707 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2700 = _2562;
                        _2701 = _2564;
                        _2702 = _2566;
                        _2703 = _2568;
                        _2704 = _2570;
                        _2705 = _2572;
                        _2706 = _2707;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2572;
                frontier_phi_57_58_ladder_1 = _2570;
                frontier_phi_57_58_ladder_2 = _2568;
                frontier_phi_57_58_ladder_3 = _2566;
                frontier_phi_57_58_ladder_4 = _2564;
                frontier_phi_57_58_ladder_5 = _2562;
            }
            else
            {
                frontier_phi_57_58_ladder = _2459;
                frontier_phi_57_58_ladder_1 = _2457;
                frontier_phi_57_58_ladder_2 = _2455;
                frontier_phi_57_58_ladder_3 = _2453;
                frontier_phi_57_58_ladder_4 = _2451;
                frontier_phi_57_58_ladder_5 = _2449;
            }
            _2561 = frontier_phi_57_58_ladder_5;
            _2563 = frontier_phi_57_58_ladder_4;
            _2565 = frontier_phi_57_58_ladder_3;
            _2567 = frontier_phi_57_58_ladder_2;
            _2569 = frontier_phi_57_58_ladder_1;
            _2571 = frontier_phi_57_58_ladder;
        }
        float _2576 = isnan(1.0) ? _597 : (isnan(_597) ? 1.0 : min(_597, 1.0));
        _2358 = (_2576 * _2567) + _1792;
        _2360 = (_2576 * _2569) + _1794;
        _2362 = (_2576 * _2571) + _1796;
        _2364 = ((_2561 * _582) * _2576) + _2140;
        _2366 = ((_2563 * _584) * _2576) + _2142;
        _2368 = ((_2565 * _585) * _2576) + _2144;
    }
    else
    {
        _2358 = _1792;
        _2360 = _1794;
        _2362 = _1796;
        _2364 = _2140;
        _2366 = _2142;
        _2368 = _2144;
    }
    float _4217 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4228 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4239 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _2385 = ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2358 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _597))) + ((_2364 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1407)) * cbPerFrame._m0[3u].x);
    float _2386 = ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2360 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _597))) + ((_2366 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1407)) * cbPerFrame._m0[3u].x);
    float _2387 = ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2362 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _597))) + ((_2368 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1407)) * cbPerFrame._m0[3u].x);
    uint _2391 = _556 + 6u;
    float _2399 = _517 / cbSceneParam._m0[86u].x;
    float _2400 = _518 / cbSceneParam._m0[86u].y;
    vec4 _2414 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2399, _2400, (log2((isnan(cbSceneParam._m0[77u].w) ? _449 : (isnan(_449) ? cbSceneParam._m0[77u].w : min(_449, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2416 = _2414.x;
    float _2417 = _2414.y;
    float _2418 = _2414.z;
    float _2419 = _2414.w;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    if (_449 > cbSceneParam._m0[78u].w)
    {
        float _2474 = isnan(_449) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _449 : min(cbSceneParam._m0[80u].w, _449));
        float _2475 = _2474 / _449;
        float _2486 = _2475 * _502;
        float _2487 = _503 * _2475;
        float _2488 = (-0.0) - _2487;
        float _2489 = _2475 * _504;
        float _2491 = (cbSceneParam._m0[77u].w * _2488) / _2474;
        float _2492 = _2491 + cbSceneParam._m0[79u].w;
        float _2493 = cbSceneParam._m0[79u].w - _2487;
        float _2499 = sqrt(((_2486 * _2486) + (_2487 * _2487)) + (_2489 * _2489));
        float _2502 = (1.0 - (cbSceneParam._m0[77u].w / _2474)) * _2499;
        float _2507 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2509 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2662;
        if (abs((_2488 - _2491) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2662 = ((((_2492 > 0.0) ? exp2(_2507 * _2492) : (2.0 - exp2(_2509 * _2492))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2502;
        }
        else
        {
            float _2622 = 1.0 / cbSceneParam._m0[80u].x;
            float _2623 = isnan(_2493) ? _2492 : (isnan(_2492) ? _2493 : max(_2492, _2493));
            float _2624 = isnan(_2493) ? _2492 : (isnan(_2492) ? _2493 : min(_2492, _2493));
            float _2633 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : min(_2623, 0.0));
            float _2634 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : min(_2624, 0.0));
            _2662 = ((abs(_2499 / _2488) * cbSceneParam._m0[80u].y) * ((((_2633 - _2634) * 2.0) - ((exp2(_2507 * (isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0)))) - exp2(_2507 * (isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0))))) * _2622)) - ((exp2(_2509 * _2633) - exp2(_2509 * _2634)) * _2622))) + (_2502 * cbSceneParam._m0[80u].z);
        }
        vec4 _2664 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2399, _2400, 1.0), 0.0);
        float _2673 = exp2((_2662 * (-1.44269502162933349609375)) * (1.0 - _2664.w));
        float _2674 = log2(_2673);
        float _2690 = log2(_2419);
        _2511 = (exp2(_2690 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].x)) * _2664.x) / cbSceneParam._m0[78u].x)) + _2416;
        _2513 = (exp2(_2690 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].y)) * _2664.y) / cbSceneParam._m0[78u].y)) + _2417;
        _2515 = (exp2(_2690 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].z)) * _2664.z) / cbSceneParam._m0[78u].z)) + _2418;
        _2517 = _2673 * _2419;
    }
    else
    {
        _2511 = _2416;
        _2513 = _2417;
        _2515 = _2418;
        _2517 = _2419;
    }
    float _2529 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2530 = _2529 == 3.0;
    float _2531 = log2(_2517);
    float _2538 = exp2(_2531 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0)));
    float _2539 = exp2(_2531 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0)));
    float _2540 = exp2(_2531 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0)));
    float _2549 = (_2529 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2549 * (_2530 ? _2538 : (_2538 + (cbSceneParam._m0[72u].w * _2511)));
    SV_Target.y = _2549 * (_2530 ? _2539 : (_2539 + (cbSceneParam._m0[72u].w * _2513)));
    SV_Target.z = _2549 * (_2530 ? _2540 : (_2540 + (cbSceneParam._m0[72u].w * _2515)));
    SV_Target.w = cbInstanceData._m0[_2391].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2391].w;
}


