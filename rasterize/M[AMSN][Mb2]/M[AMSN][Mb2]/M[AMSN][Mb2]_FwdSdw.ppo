#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[21];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _974;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223;
    float _224;
    float _225;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
    }
    else
    {
        _223 = _209;
        _224 = _210;
        _225 = _211;
    }
    vec4 _251 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMatDynParam._m0[17u].x;
    float _258 = _251.y * cbMatDynParam._m0[17u].y;
    float _259 = _251.z * cbMatDynParam._m0[17u].z;
    vec4 _278 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _311 = (TEXCOORD_7.x - ((cbMatDynParam._m0[19u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMatDynParam._m0[19u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMatDynParam._m0[19u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMatDynParam._m0[19u].y * TEXCOORD.w) + 1.0);
    float _3592 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _319 = (_312 * ((_278.x * cbMatDynParam._m0[18u].x) - _257)) + _257;
    float _320 = (_312 * ((_278.y * cbMatDynParam._m0[18u].y) - _258)) + _258;
    float _321 = (_312 * ((_278.z * cbMatDynParam._m0[18u].z) - _259)) + _259;
    float _338 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_5) + cbTextureTilingScale._m0[5u].w)).x + cbMatDynParam._m0[19u].w;
    float _361 = (((cbMatDynParam._m0[20u].x - _338) + texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_5) + cbTextureTilingScale._m0[6u].w)).x) * _312) + _338;
    vec4 _373 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _375 = _373.x;
    float _376 = _373.y;
    float _377 = _373.z;
    vec4 _389 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _402 = ((_389.z - _377) * _312) + _377;
    float _406 = ((((_389.x - _375) * _312) + _375) * 2.0) + (-1.0);
    float _408 = ((((_389.y - _376) * _312) + _376) * 2.0) + (-1.0);
    float _409 = dot(vec2(_406, _408), vec2(_406, _408));
    float _3603 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _414 = sqrt(1.0 - (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))));
    float _417 = fma(_414, _223, fma(_408, _215 * TANGENT.x, (_201 * _193) * _406));
    float _420 = fma(_414, _224, fma(_408, _215 * TANGENT.y, (_201 * _194) * _406));
    float _423 = fma(_414, _225, fma(_408, _215 * TANGENT.z, (_201 * _195) * _406));
    float _427 = inversesqrt(dot(vec3(_417, _420, _423), vec3(_417, _420, _423)));
    float _428 = _427 * _417;
    float _429 = _427 * _420;
    float _430 = _427 * _423;
    float _3614 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _431 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3636 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3647 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3658 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _435 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _451 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _504 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _494);
    float _505 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _494);
    float _506 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _494);
    float _510 = inversesqrt(dot(vec3(_504, _505, _506), vec3(_504, _505, _506)));
    float _511 = _504 * _510;
    float _512 = _505 * _510;
    float _513 = _506 * _510;
    float _519 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _520 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _539 = fma(_430, cbSceneParam._m0[5u].z, fma(_429, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _428));
    float _542 = fma(_430, cbSceneParam._m0[6u].z, fma(_429, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _428));
    float _545 = fma(_430, cbSceneParam._m0[7u].z, fma(_429, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _428));
    uint _558 = uint(roundEven(NORMAL.w)) * 13u;
    uint _561 = (_558 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _567 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_561].x;
    float _568 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_561].y;
    float _569 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_561].z;
    float _3669 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _573 = 1.0 - _435;
    float _574 = _570 * _573;
    float _575 = _571 * _573;
    float _576 = _572 * _573;
    float _581 = (_570 + (-0.039999999105930328369140625)) * _435;
    float _582 = (_571 + (-0.039999999105930328369140625)) * _435;
    float _583 = (_572 + (-0.039999999105930328369140625)) * _435;
    float _584 = _581 + 0.039999999105930328369140625;
    float _586 = _582 + 0.039999999105930328369140625;
    float _587 = _583 + 0.039999999105930328369140625;
    vec4 _596 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _519, cbSceneParam._m0[86u].y * _520));
    float _599 = _596.x * TEXCOORD_7.w;
    float _600 = dot(vec3(_428, _429, _430), vec3(_511, _512, _513));
    float _603 = _600 * 2.0;
    float _607 = (_603 * _428) - _511;
    float _608 = (_603 * _429) - _512;
    float _609 = (_603 * _430) - _513;
    float _613 = abs(dot(vec3(_511, _512, _513), vec3(_428, _429, _430)));
    float _3702 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _615 = sqrt(_431);
    float _628 = exp2((_615 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_615 * 3.0));
    float _634 = (1.0 - _628) * ((_615 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _635 = _628 * _615;
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _973;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _698 = fma(_671, cbModelParam._m0[26u].z, fma(_667, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _663));
        float _702 = fma(_671, cbModelParam._m0[27u].z, fma(_667, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _663));
        float _706 = fma(_671, cbModelParam._m0[28u].z, fma(_667, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _663));
        float _731 = _663 + _428;
        float _732 = _667 + _429;
        float _733 = _671 + _430;
        float _743 = fma(_733, cbModelParam._m0[26u].z, fma(_732, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731)) - _698;
        float _744 = fma(_733, cbModelParam._m0[27u].z, fma(_732, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731)) - _702;
        float _745 = fma(_733, cbModelParam._m0[28u].z, fma(_732, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731)) - _706;
        float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
        float _762 = ((_749 * _743) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_698 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _763 = ((_749 * _744) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_702 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _764 = ((_749 * _745) / cbModelParam._m0[34u].z) + ((((((_706 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_762, _763, _764), 0.0);
        float _801 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_767.x + (-0.5));
        float _803 = _801 * (_767.y + (-0.5));
        float _804 = _801 * (_767.z + (-0.5));
        float _811 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_774.x + (-0.5));
        float _813 = _811 * (_774.y + (-0.5));
        float _814 = _811 * (_774.z + (-0.5));
        float _821 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_781.x + (-0.5));
        float _823 = _821 * (_781.y + (-0.5));
        float _824 = _821 * (_781.z + (-0.5));
        float _831 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_788.x + (-0.5));
        float _833 = _831 * (_788.y + (-0.5));
        float _834 = _831 * (_788.z + (-0.5));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _838 = _802 * 0.5;
        float _839 = _812 * 0.5;
        float _840 = _822 * 0.5;
        float _841 = dot(vec3(_838, _839, _840), vec3(_838, _839, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _855 = (dot(vec3(_428, _429, _430), vec3(_846 * _838, _846 * _839, _846 * _840)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _865 = sqrt(((_839 * _839) + (_838 * _838)) + (_840 * _840)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3750 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_867 + 1.0))) + _872) * _835;
        float _882 = _803 * 0.5;
        float _883 = _813 * 0.5;
        float _884 = _823 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_428, _429, _430), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3783 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_909 + 1.0))) + _914) * _836;
        float _924 = _804 * 0.5;
        float _925 = _814 * 0.5;
        float _926 = _824 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_428, _429, _430), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_837 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3816 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_951 + 1.0))) + _956) * _837;
        _973 = _804;
        _975 = _803;
        _976 = _802;
        _977 = _814;
        _978 = _813;
        _979 = _812;
        _980 = _824;
        _981 = _823;
        _982 = _822;
        _983 = _837;
        _984 = _836;
        _985 = _835;
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _988 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
    }
    else
    {
        _973 = _974;
        _975 = _974;
        _976 = _974;
        _977 = _974;
        _978 = _974;
        _979 = _974;
        _980 = _974;
        _981 = _974;
        _982 = _974;
        _983 = _974;
        _984 = _974;
        _985 = _974;
        _986 = 0.0;
        _987 = 0.0;
        _988 = 0.0;
    }
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1014 = fma(_671, cbModelParam._m0[30u].z, fma(_667, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _663));
        float _1018 = fma(_671, cbModelParam._m0[31u].z, fma(_667, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _663));
        float _1022 = fma(_671, cbModelParam._m0[32u].z, fma(_667, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _663));
        float _1045 = _663 + _428;
        float _1046 = _667 + _429;
        float _1047 = _671 + _430;
        float _1057 = fma(_1047, cbModelParam._m0[30u].z, fma(_1046, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1045)) - _1014;
        float _1058 = fma(_1047, cbModelParam._m0[31u].z, fma(_1046, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1045)) - _1018;
        float _1059 = fma(_1047, cbModelParam._m0[32u].z, fma(_1046, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1045)) - _1022;
        float _1063 = inversesqrt(dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059)));
        float _1076 = ((_1063 * _1057) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1014 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1063 * _1058) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1018 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1063 * _1059) / cbModelParam._m0[35u].z) + ((((((_1022 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        float _1113 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1080.x + (-0.5));
        float _1115 = _1113 * (_1080.y + (-0.5));
        float _1116 = _1113 * (_1080.z + (-0.5));
        float _1123 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1087.x + (-0.5));
        float _1125 = _1123 * (_1087.y + (-0.5));
        float _1126 = _1123 * (_1087.z + (-0.5));
        float _1133 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1094.x + (-0.5));
        float _1135 = _1133 * (_1094.y + (-0.5));
        float _1136 = _1133 * (_1094.z + (-0.5));
        float _1143 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1101.x + (-0.5));
        float _1145 = _1143 * (_1101.y + (-0.5));
        float _1146 = _1143 * (_1101.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_428, _429, _430), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3879 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1177 + 1.0))) + _1182) * _1147;
        float _1192 = _1115 * 0.5;
        float _1193 = _1125 * 0.5;
        float _1194 = _1135 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_428, _429, _430), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3912 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1219 + 1.0))) + _1224) * _1148;
        float _1234 = _1116 * 0.5;
        float _1235 = _1126 * 0.5;
        float _1236 = _1136 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_428, _429, _430), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3945 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1261 + 1.0))) + _1266) * _1149;
        _1283 = _1116;
        _1284 = _1115;
        _1285 = _1114;
        _1286 = _1126;
        _1287 = _1125;
        _1288 = _1124;
        _1289 = _1136;
        _1290 = _1135;
        _1291 = _1134;
        _1292 = _1149;
        _1293 = _1148;
        _1294 = _1147;
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _974;
        _1284 = _974;
        _1285 = _974;
        _1286 = _974;
        _1287 = _974;
        _1288 = _974;
        _1289 = _974;
        _1290 = _974;
        _1291 = _974;
        _1292 = _974;
        _1293 = _974;
        _1294 = _974;
        _1295 = 0.0;
        _1296 = 0.0;
        _1297 = 0.0;
    }
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _986)) + _986;
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _987)) + _987;
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _988)) + _988;
    float _1330 = fma(_1309, cbSceneParam._m0[89u].z, fma(_1308, cbSceneParam._m0[89u].y, _1307 * cbSceneParam._m0[89u].x));
    float _1333 = fma(_1309, cbSceneParam._m0[90u].z, fma(_1308, cbSceneParam._m0[90u].y, _1307 * cbSceneParam._m0[90u].x));
    float _1336 = fma(_1309, cbSceneParam._m0[91u].z, fma(_1308, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1307));
    float _1351 = _607 * 0.5;
    float _1352 = _608 * 0.5;
    float _1353 = _609 * 0.5;
    float _1354 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1357 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1360 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1394;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1367 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_973, _977, _980, _983));
        float _1371 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_975, _978, _981, _984));
        float _1375 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_976, _979, _982, _985));
        float _1382 = dot(vec4(cbModelParam._m0[39u]), vec4(_1351, _1352, _1353, 1.0));
        _1394 = dot(vec3(isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1382) ? 0.0 : (isnan(0.0) ? _1382 : max(0.0, _1382))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1394 = 1.0;
    }
    float _1405;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1396 = dot(vec4(cbModelParam._m0[40u]), vec4(_1351, _1352, _1353, 1.0));
        _1405 = dot(vec3(isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1396) ? 0.0 : (isnan(0.0) ? _1396 : max(0.0, _1396))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1405 = 1.0;
    }
    float _1409 = (_1405 * cbModelParam._m0[1u].x) + (_1394 * (1.0 - cbModelParam._m0[1u].x));
    float _1419 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _431);
    float _1420 = isnan(_1419) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1419 : min(cbModelParam._m0[25u].z, _1419));
    float _1502;
    float _1504;
    float _1506;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1469 = fma(_671, cbModelParam._m0[13u].z, fma(_667, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _663)) + cbModelParam._m0[13u].w;
        float _1473 = fma(_671, cbModelParam._m0[14u].z, fma(_667, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _663)) + cbModelParam._m0[14u].w;
        float _1477 = fma(_671, cbModelParam._m0[15u].z, fma(_667, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _663)) + cbModelParam._m0[15u].w;
        float _1480 = fma(_609, cbModelParam._m0[13u].z, fma(_608, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _607));
        float _1483 = fma(_609, cbModelParam._m0[14u].z, fma(_608, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _607));
        float _1486 = fma(_609, cbModelParam._m0[15u].z, fma(_608, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _607));
        float _1514;
        if (_1480 > 0.0)
        {
            _1514 = abs((1.0 - _1469) / _1480);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1469 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1514 = frontier_phi_16_14_ladder;
        }
        float _1687;
        if (_1483 > 0.0)
        {
            _1687 = abs((1.0 - _1473) / _1483);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1473 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1687 = frontier_phi_25_21_ladder;
        }
        float _1982;
        if (_1486 > 0.0)
        {
            _1982 = abs((1.0 - _1477) / _1486);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1477 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1982 = frontier_phi_37_32_ladder;
        }
        float _1984 = isnan(_1687) ? _1514 : (isnan(_1514) ? _1687 : min(_1514, _1687));
        float _1985 = isnan(_1982) ? _1984 : (isnan(_1984) ? _1982 : min(_1984, _1982));
        float _1989 = (_1985 * _1480) + _1469;
        float _1990 = (_1985 * _1483) + _1473;
        float _1991 = (_1985 * _1486) + _1477;
        float _1992 = _1985 * 9.9999997473787516355514526367188e-05;
        float _1994 = (-1.0) - _1992;
        float _1996 = _1992 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1991 > _1996) || ((_1991 < _1994) || ((_1990 > _1996) || ((_1990 < _1994) || ((_1989 < _1994) || (_1989 > _1996))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2136 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1991, cbModelParam._m0[9u].z, fma(_1990, cbModelParam._m0[9u].y, _1989 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1991, cbModelParam._m0[10u].z, fma(_1990, cbModelParam._m0[10u].y, _1989 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1991, cbModelParam._m0[11u].z, fma(_1990, cbModelParam._m0[11u].y, _1989 * cbModelParam._m0[11u].x))), _1420);
            frontier_phi_15_37_ladder = _2136.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2136.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2136.z * cbModelParam._m0[1u].y;
        }
        _1502 = frontier_phi_15_37_ladder_1;
        _1504 = frontier_phi_15_37_ladder;
        _1506 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_607, _608, _609), _1420);
        _1502 = _1490.x * cbModelParam._m0[1u].y;
        _1504 = _1490.y * cbModelParam._m0[1u].y;
        _1506 = _1490.z * cbModelParam._m0[1u].y;
    }
    float _1510 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _431);
    float _1511 = isnan(_1510) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1510 : min(cbModelParam._m0[25u].w, _1510));
    float _1601;
    float _1603;
    float _1605;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1565 = fma(_671, cbModelParam._m0[21u].z, fma(_667, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _663)) + cbModelParam._m0[21u].w;
        float _1569 = fma(_671, cbModelParam._m0[22u].z, fma(_667, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _663)) + cbModelParam._m0[22u].w;
        float _1573 = fma(_671, cbModelParam._m0[23u].z, fma(_667, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _663)) + cbModelParam._m0[23u].w;
        float _1576 = fma(_609, cbModelParam._m0[21u].z, fma(_608, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _607));
        float _1579 = fma(_609, cbModelParam._m0[22u].z, fma(_608, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _607));
        float _1582 = fma(_609, cbModelParam._m0[23u].z, fma(_608, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _607));
        float _1692;
        if (_1576 > 0.0)
        {
            _1692 = abs((1.0 - _1565) / _1576);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1565 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1692 = frontier_phi_27_23_ladder;
        }
        float _2009;
        if (_1579 > 0.0)
        {
            _2009 = abs((1.0 - _1569) / _1579);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1569 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2009 = frontier_phi_39_34_ladder;
        }
        float _2347;
        if (_1582 > 0.0)
        {
            _2347 = abs((1.0 - _1573) / _1582);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1573 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2347 = frontier_phi_49_46_ladder;
        }
        float _2349 = isnan(_2009) ? _1692 : (isnan(_1692) ? _2009 : min(_1692, _2009));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1576) + _1565;
        float _2355 = (_2350 * _1579) + _1569;
        float _2356 = (_2350 * _1582) + _1573;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2358 = (-1.0) - _2357;
        float _2360 = _2357 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2356 > _2360) || ((_2356 < _2358) || ((_2355 > _2360) || ((_2355 < _2358) || ((_2354 < _2358) || (_2354 > _2360))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2478 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2356, cbModelParam._m0[17u].z, fma(_2355, cbModelParam._m0[17u].y, _2354 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2356, cbModelParam._m0[18u].z, fma(_2355, cbModelParam._m0[18u].y, _2354 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2356, cbModelParam._m0[19u].z, fma(_2355, cbModelParam._m0[19u].y, _2354 * cbModelParam._m0[19u].x))), _1511);
            frontier_phi_24_49_ladder = _2478.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2478.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2478.x * cbModelParam._m0[1u].z;
        }
        _1601 = frontier_phi_24_49_ladder_2;
        _1603 = frontier_phi_24_49_ladder_1;
        _1605 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_607, _608, _609), _1511);
        _1601 = _1585.x * cbModelParam._m0[1u].z;
        _1603 = _1585.y * cbModelParam._m0[1u].z;
        _1605 = _1585.z * cbModelParam._m0[1u].z;
    }
    float _1618 = (((_634 * _584) + _635) * _599) * ((cbModelParam._m0[1u].w * (_1601 - _1502)) + _1502);
    float _1620 = (((_634 * _586) + _635) * _599) * ((cbModelParam._m0[1u].w * (_1603 - _1504)) + _1504);
    float _1622 = (((_634 * _587) + _635) * _599) * ((cbModelParam._m0[1u].w * (_1605 - _1506)) + _1506);
    float _1625 = fma(_1622, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1618 * cbSceneParam._m0[89u].x));
    float _1628 = fma(_1622, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1618 * cbSceneParam._m0[90u].x));
    float _1631 = fma(_1622, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, _1618 * cbSceneParam._m0[91u].x));
    float _1666 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1670 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1674 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1678 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1679 = _1666 / _1678;
    float _1680 = _1670 / _1678;
    float _1681 = _1674 / _1678;
    float _1828;
    float _1829;
    float _1830;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1708 = ((uint(_1681 > cbSceneParam._m0[59u].y) + uint(_1681 > cbSceneParam._m0[59u].x)) + uint(_1681 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1709 = _1708 + 43u;
        uint _1717 = _1708 + 44u;
        uint _1725 = _1708 + 45u;
        uint _1733 = _1708 + 46u;
        float _1744 = fma(_1678, cbSceneParam._m0[_1709].w, fma(_1674, cbSceneParam._m0[_1709].z, fma(_1670, cbSceneParam._m0[_1709].y, _1666 * cbSceneParam._m0[_1709].x)));
        float _1748 = fma(_1678, cbSceneParam._m0[_1717].w, fma(_1674, cbSceneParam._m0[_1717].z, fma(_1670, cbSceneParam._m0[_1717].y, _1666 * cbSceneParam._m0[_1717].x)));
        float _1756 = fma(_1678, cbSceneParam._m0[_1733].w, fma(_1674, cbSceneParam._m0[_1733].z, fma(_1670, cbSceneParam._m0[_1733].y, _1666 * cbSceneParam._m0[_1733].x)));
        float _1761 = cbSceneParam._m0[33u].z * _1756;
        float _1763 = cbSceneParam._m0[33u].w * _1756;
        float _1766 = fma(_1678, cbSceneParam._m0[_1725].w, fma(_1674, cbSceneParam._m0[_1725].z, fma(_1670, cbSceneParam._m0[_1725].y, _1666 * cbSceneParam._m0[_1725].x))) / _1756;
        float _1814 = (cbSceneParam._m0[33u].x - sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681))) * cbSceneParam._m0[33u].y;
        float _4071 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1821 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1761 + _1744) / _1756, (_1763 + _1748) / _1756), _1766), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1763 + _1744) / _1756, (_1748 - _1761) / _1756), _1766), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1744 - _1761) / _1756, (_1748 - _1763) / _1756), _1766), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1744 - _1763) / _1756, (_1761 + _1748) / _1756), _1766), 0.0)).x), vec4(0.25)));
        _1828 = 1.0 - (_1821 * cbSceneParam._m0[34u].x);
        _1829 = 1.0 - (_1821 * cbSceneParam._m0[34u].y);
        _1830 = 1.0 - (_1821 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1828 = 1.0;
        _1829 = 1.0;
        _1830 = 1.0;
    }
    float _1894;
    float _1896;
    float _1898;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1882 = fma(_1678, cbSceneParam._m0[63u].w, fma(_1674, cbSceneParam._m0[63u].z, fma(_1670, cbSceneParam._m0[63u].y, _1666 * cbSceneParam._m0[63u].x)));
        float _1883 = fma(_1678, cbSceneParam._m0[60u].w, fma(_1674, cbSceneParam._m0[60u].z, fma(_1670, cbSceneParam._m0[60u].y, _1666 * cbSceneParam._m0[60u].x))) / _1882;
        float _1884 = fma(_1678, cbSceneParam._m0[61u].w, fma(_1674, cbSceneParam._m0[61u].z, fma(_1670, cbSceneParam._m0[61u].y, _1666 * cbSceneParam._m0[61u].x))) / _1882;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1883 >= cbSceneParam._m0[64u].x) && (_1884 >= cbSceneParam._m0[64u].y)) && (_1883 <= cbSceneParam._m0[64u].z)) && (_1884 <= cbSceneParam._m0[64u].w))
        {
            float _2022 = fma(_1678, cbSceneParam._m0[62u].w, fma(_1674, cbSceneParam._m0[62u].z, fma(_1670, cbSceneParam._m0[62u].y, _1666 * cbSceneParam._m0[62u].x))) / _1882;
            float _2026 = isnan(cbSceneParam._m0[41u].w) ? _2022 : (isnan(_2022) ? cbSceneParam._m0[41u].w : max(_2022, cbSceneParam._m0[41u].w));
            float _2069 = (cbSceneParam._m0[33u].x - sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681))) * cbSceneParam._m0[33u].y;
            float _4087 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
            float _2076 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1883, cbSceneParam._m0[33u].w + _1884), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1883, _1884 - cbSceneParam._m0[33u].z), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1883 - cbSceneParam._m0[33u].z, _1884 - cbSceneParam._m0[33u].w), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1883 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1884), _2026), 0.0)).x), vec4(0.25)));
            float _2080 = 1.0 - (_2076 * cbSceneParam._m0[34u].x);
            float _2081 = 1.0 - (_2076 * cbSceneParam._m0[34u].y);
            float _2082 = 1.0 - (_2076 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2081) ? _1829 : (isnan(_1829) ? _2081 : min(_1829, _2081));
            frontier_phi_36_35_ladder_1 = isnan(_2082) ? _1830 : (isnan(_1830) ? _2082 : min(_1830, _2082));
            frontier_phi_36_35_ladder_2 = isnan(_2080) ? _1828 : (isnan(_1828) ? _2080 : min(_1828, _2080));
        }
        else
        {
            frontier_phi_36_35_ladder = _1829;
            frontier_phi_36_35_ladder_1 = _1830;
            frontier_phi_36_35_ladder_2 = _1828;
        }
        _1894 = frontier_phi_36_35_ladder_2;
        _1896 = frontier_phi_36_35_ladder;
        _1898 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1894 = _1828;
        _1896 = _1829;
        _1898 = _1830;
    }
    uvec4 _1903 = floatBitsToUint(cbInstanceData._m0[_558 + 5u]);
    uint _1905 = _1903.x * 14u;
    uint _1906 = _1905 + 13u;
    float _1913 = _599 + (-1.0);
    float _1918 = (cbLight._m0[_1906].x * _1913) + 1.0;
    float _1919 = (cbLight._m0[_1906].y * _1913) + 1.0;
    float _1920 = (cbLight._m0[_1906].z * _1913) + 1.0;
    float _1921 = (cbLight._m0[_1906].w * _1913) + 1.0;
    uint _1922 = _1905 + 5u;
    float _1928 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1932 = _1905 + 4u;
    float _1941 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1945 = _1905 | 1u;
    float _1956 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_428, _429, _430));
    float _1959 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_428, _429, _430));
    float _4123 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _4134 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1964 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.3183098733425140380859375;
    float _1966 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 0.3183098733425140380859375;
    float _1973 = ((cbLight._m0[_1922].x * _1928) * _1966) + (((cbLight._m0[_1932].x * _1894) * _1941) * _1964);
    float _1974 = ((_1928 * cbLight._m0[_1922].y) * _1966) + (((cbLight._m0[_1932].y * _1896) * _1941) * _1964);
    float _1975 = ((_1928 * cbLight._m0[_1922].z) * _1966) + (((cbLight._m0[_1932].z * _1898) * _1941) * _1964);
    uvec4 _1979 = floatBitsToUint(cbLight._m0[_1905 + 12u]);
    bool _1981 = _1979.x == 0u;
    float _2083;
    float _2085;
    float _2087;
    if (_1981)
    {
        _2083 = _1973;
        _2085 = _1974;
        _2087 = _1975;
    }
    else
    {
        uint _2091 = _1905 + 6u;
        float _2107 = (dot(vec3(cbLight._m0[_1905 + 2u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _2108 = _2107 * _2107;
        float _4145 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2109 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2110 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2083 = (((cbLight._m0[_2091].x * 0.3183098733425140380859375) * _2109) * _2110) + _1973;
        _2085 = (((cbLight._m0[_2091].y * 0.3183098733425140380859375) * _2109) * _2110) + _1974;
        _2087 = (((cbLight._m0[_2091].z * 0.3183098733425140380859375) * _2109) * _2110) + _1975;
    }
    bool _2090 = _1979.y == 0u;
    float _2145;
    float _2147;
    float _2149;
    if (_2090)
    {
        _2145 = _2083;
        _2147 = _2085;
        _2149 = _2087;
    }
    else
    {
        uint _2318 = _1905 + 7u;
        float _2334 = (dot(vec3(cbLight._m0[_1905 + 3u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _2335 = _2334 * _2334;
        float _4161 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2336 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2337 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2145 = (((cbLight._m0[_2318].x * 0.3183098733425140380859375) * _2336) * _2337) + _2083;
        _2147 = (((cbLight._m0[_2318].y * 0.3183098733425140380859375) * _2336) * _2337) + _2085;
        _2149 = (((cbLight._m0[_2318].z * 0.3183098733425140380859375) * _2336) * _2337) + _2087;
    }
    uint _2152 = _1905 + 8u;
    float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _431) * 0.949999988079071044921875);
    float _2166 = _2165 * _2165;
    float _2167 = cbLight._m0[_1905].x + _511;
    float _2168 = cbLight._m0[_1905].y + _512;
    float _2169 = cbLight._m0[_1905].z + _513;
    float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
    float _2174 = _2173 * _2167;
    float _2175 = _2173 * _2168;
    float _2176 = _2173 * _2169;
    float _2177 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_1905].xyz));
    float _4177 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _4188 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _2181 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2182 = dot(vec3(_428, _429, _430), vec3(_2174, _2175, _2176));
    float _4199 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_2174, _2175, _2176));
    float _4210 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2166 * _2166;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0);
    float _2203 = 0.959999978542327880859375 - _581;
    float _2205 = 0.959999978542327880859375 - _582;
    float _2206 = 0.959999978542327880859375 - _583;
    float _2213 = 1.0 - _2166;
    float _2224 = (0.5 / (((_2181 * ((_2180 * _2213) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2213) + _2166) * _2180))) * _2180;
    float _4221 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2226 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    uint _2240 = _1905 + 9u;
    float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _431) * 0.949999988079071044921875);
    float _2252 = _2251 * _2251;
    float _2253 = cbLight._m0[_1945].x + _511;
    float _2254 = cbLight._m0[_1945].y + _512;
    float _2255 = cbLight._m0[_1945].z + _513;
    float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
    float _2260 = _2259 * _2253;
    float _2261 = _2259 * _2254;
    float _2262 = _2259 * _2255;
    float _2263 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_1945].xyz));
    float _4232 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2267 = dot(vec3(_428, _429, _430), vec3(_2260, _2261, _2262));
    float _4243 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_2260, _2261, _2262));
    float _4254 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2252 * _2252;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2286 = exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0);
    float _2293 = 1.0 - _2252;
    float _2303 = (0.5 / (((_2181 * ((_2266 * _2293) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2293) + _2252) * _2266))) * _2266;
    float _4265 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    float _2315 = (((((_2286 * _2203) + _584) * cbLight._m0[_2240].x) * _2305) * _1928) + ((((cbLight._m0[_2152].x * _1894) * ((_2202 * _2203) + _584)) * _2226) * _1941);
    float _2316 = (((((_2286 * _2205) + _586) * cbLight._m0[_2240].y) * _2305) * _1928) + ((((cbLight._m0[_2152].y * _1896) * ((_2202 * _2205) + _586)) * _2226) * _1941);
    float _2317 = (((((_2286 * _2206) + _587) * cbLight._m0[_2240].z) * _2305) * _1928) + ((((cbLight._m0[_2152].z * _1898) * ((_2202 * _2206) + _587)) * _2226) * _1941);
    float _2373;
    float _2375;
    float _2377;
    if (_1981)
    {
        _2373 = _2315;
        _2375 = _2316;
        _2377 = _2317;
    }
    else
    {
        uint _2379 = _1905 + 2u;
        uint _2383 = _1905 + 10u;
        float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2379].w)) * _431) * 0.949999988079071044921875);
        float _2398 = _2397 * _2397;
        float _2399 = cbLight._m0[_2379].x + _511;
        float _2400 = cbLight._m0[_2379].y + _512;
        float _2401 = cbLight._m0[_2379].z + _513;
        float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
        float _2406 = _2405 * _2399;
        float _2407 = _2405 * _2400;
        float _2408 = _2405 * _2401;
        float _2409 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2379].xyz));
        float _4276 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2413 = dot(vec3(_428, _429, _430), vec3(_2406, _2407, _2408));
        float _4287 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2417 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_2406, _2407, _2408));
        float _4298 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2421 = _2398 * _2398;
        float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
        float _2432 = exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0);
        float _2439 = 1.0 - _2398;
        float _2449 = (0.5 / (((_2181 * ((_2412 * _2439) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2439) + _2398) * _2412))) * _2412;
        float _4309 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2451 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
        float _2452 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2373 = (((((_2432 * _2203) + _584) * cbLight._m0[_2383].x) * _2451) * _2452) + _2315;
        _2375 = (((((_2432 * _2205) + _586) * cbLight._m0[_2383].y) * _2451) * _2452) + _2316;
        _2377 = (((((_2432 * _2206) + _587) * cbLight._m0[_2383].z) * _2451) * _2452) + _2317;
    }
    float _2483;
    float _2485;
    float _2487;
    if (_2090)
    {
        _2483 = _2373;
        _2485 = _2375;
        _2487 = _2377;
    }
    else
    {
        uint _2494 = _1905 + 3u;
        uint _2498 = _1905 + 11u;
        float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2494].w)) * _431) * 0.949999988079071044921875);
        float _2513 = _2512 * _2512;
        float _2514 = cbLight._m0[_2494].x + _511;
        float _2515 = cbLight._m0[_2494].y + _512;
        float _2516 = cbLight._m0[_2494].z + _513;
        float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
        float _2521 = _2520 * _2514;
        float _2522 = _2520 * _2515;
        float _2523 = _2520 * _2516;
        float _2524 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2494].xyz));
        float _4325 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2528 = dot(vec3(_428, _429, _430), vec3(_2521, _2522, _2523));
        float _4336 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2532 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_2521, _2522, _2523));
        float _4347 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2536 = _2513 * _2513;
        float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
        float _2547 = exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0);
        float _2554 = 1.0 - _2513;
        float _2564 = (0.5 / (((_2181 * ((_2527 * _2554) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2554) + _2513) * _2527))) * _2527;
        float _4358 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2566 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
        float _2567 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2483 = (((((_2547 * _2203) + _584) * cbLight._m0[_2498].x) * _2566) * _2567) + _2373;
        _2485 = (((((_2547 * _2205) + _586) * cbLight._m0[_2498].y) * _2566) * _2567) + _2375;
        _2487 = (((((_2547 * _2206) + _587) * cbLight._m0[_2498].z) * _2566) * _2567) + _2377;
    }
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    if (_1903.y == 0u)
    {
        uvec4 _2588 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2589 = _2588.x;
        uint _2600 = uint((float(_2588.y) * floor(float(uint(cbSceneParam._m0[85u].y * _520) / _2589))) + floor(float(uint(cbSceneParam._m0[85u].x * _519) / _2589)));
        float _2610 = (log2(_1681 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2611 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        uint _2614 = uint(isnan(14.0) ? _2611 : (isnan(_2611) ? 14.0 : min(_2611, 14.0)));
        uvec4 _2619 = texelFetch(g_lightClusterGridBuffer, int(((_2614 << 2u) + (_2600 << 6u)) >> 2u));
        uint _2620 = _2619.x;
        uint _2621 = _2588.z;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((((1u << ((_2621 >> 4u) & 15u)) + 4294967295u) & _2620) == 0u) || ((_2621 & 240u) == 0u))
        {
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
        }
        else
        {
            float _2703;
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            uint _2852 = 0u;
            uint _2861;
            bool _2862;
            for (;;)
            {
                _2861 = texelFetch(g_lightClassification, int((((_2614 << 5u) + (_2600 << 9u)) + (_2852 << 2u)) >> 2u)).x;
                _2862 = _2861 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2862)
                {
                    frontier_phi_68_pred = _2851;
                    frontier_phi_68_pred_1 = _2850;
                    frontier_phi_68_pred_2 = _2849;
                    frontier_phi_68_pred_3 = _2847;
                    frontier_phi_68_pred_4 = _2846;
                    frontier_phi_68_pred_5 = _2848;
                }
                else
                {
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    uint _2976;
                    _2970 = _2846;
                    _2971 = _2847;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2861;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    for (;;)
                    {
                        uint _2980 = uint(findLSB(_2976)) + (_2852 << 5u);
                        uint _2977 = (_2976 + 4294967295u) & _2976;
                        uint _2982 = _2980 * 48u;
                        vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 3u)).x));
                        uint _3002 = (_2980 * 48u) + 4u;
                        vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 3u)).x));
                        uint _3021 = (_2980 * 48u) + 8u;
                        vec3 _3032 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x));
                        float _3036 = _2996.x - _1679;
                        float _3037 = _2996.y - _1680;
                        float _3038 = _2996.z - _1681;
                        float _3039 = dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038));
                        float _3042 = inversesqrt(_3039);
                        float _3043 = _3042 * _3036;
                        float _3044 = _3042 * _3037;
                        float _3045 = _3042 * _3038;
                        float _3046 = dot(vec3(_539, _542, _545), vec3(_3043, _3044, _3045));
                        float _3051 = 1.0 - (_3039 * _2996.w);
                        float _4384 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3052 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3053 = sqrt(_3039) * _3015.w;
                        float _3056 = 1.39999997615814208984375 / (_3053 + 1.39999997615814208984375);
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _3046) + _3057;
                        float _3063 = _3053 * _3053;
                        float _3067 = ((isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))) * _3052) / ((_3063 * 0.699999988079071044921875) + 1.0);
                        float _3071 = (-0.0) - _1679;
                        float _3072 = (-0.0) - _1680;
                        float _3073 = (-0.0) - _1681;
                        float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3087 = exp2(log2(1.0 / ((_3063 * 3.5) + 5.0)) * 0.25);
                        float _3088 = 1.0 - _615;
                        float _3095 = sqrt(1.0 - ((1.0 - (_3088 * _3088)) * (1.0 - (_3087 * _3087))));
                        float _3096 = _3095 * _3095;
                        float _3097 = _3096 * _3096;
                        float _3098 = _3078 + _3043;
                        float _3099 = _3079 + _3044;
                        float _3100 = _3080 + _3045;
                        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                        float _3108 = dot(vec3(_539, _542, _545), vec3(_3078, _3079, _3080));
                        float _4400 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3111 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3112 = dot(vec3(_539, _542, _545), vec3(_3104 * _3098, _3104 * _3099, _3104 * _3100));
                        float _4411 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3115 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3119 = ((_3115 * _3115) * (_3097 + (-1.0))) + 1.0;
                        float _3120 = _3056 * _3096;
                        float _3121 = _3120 * _3120;
                        float _3124 = ((1.0 - _3121) * _3046) + _3121;
                        float _4422 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3125 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3126 = 1.0 - _3096;
                        float _3136 = (0.5 / (((_3125 * ((_3111 * _3126) + _3096)) + 9.9999999392252902907785028219223e-09) + (((_3125 * _3126) + _3096) * _3111))) * _3125;
                        float _4433 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3147 = (((_3097 * 3.1415927410125732421875) * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) / ((_3119 * _3119) * ((_3063 * 2.1991131305694580078125) + 3.141590118408203125))) * _3052;
                        _2905 = (_3067 * _3015.x) + _2973;
                        _2906 = (_3067 * _3015.y) + _2974;
                        _2907 = (_3067 * _3015.z) + _2975;
                        _2902 = (_3147 * _3032.x) + _2970;
                        _2903 = (_3147 * _3032.y) + _2971;
                        _2904 = (_3147 * _3032.z) + _2972;
                        if (_2977 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2970 = _2902;
                            _2971 = _2903;
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2977;
                        }
                    }
                    frontier_phi_68_pred = _2907;
                    frontier_phi_68_pred_1 = _2906;
                    frontier_phi_68_pred_2 = _2905;
                    frontier_phi_68_pred_3 = _2903;
                    frontier_phi_68_pred_4 = _2902;
                    frontier_phi_68_pred_5 = _2904;
                }
                _2713 = frontier_phi_68_pred;
                _2711 = frontier_phi_68_pred_1;
                _2709 = frontier_phi_68_pred_2;
                _2705 = frontier_phi_68_pred_3;
                _2703 = frontier_phi_68_pred_4;
                _2707 = frontier_phi_68_pred_5;
                uint _2853 = _2852 + 1u;
                if (_2853 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2846 = _2703;
                    _2847 = _2705;
                    _2848 = _2707;
                    _2849 = _2709;
                    _2850 = _2711;
                    _2851 = _2713;
                    _2852 = _2853;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
        }
        uvec4 _2716 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2717 = _2716.z;
        uint _2719 = (_2717 >> 8u) & 15u;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        if (((4294967295u << _2719) & _2620) == 0u)
        {
            _2814 = _2702;
            _2816 = _2704;
            _2818 = _2706;
            _2820 = _2708;
            _2822 = _2710;
            _2824 = _2712;
        }
        else
        {
            float _2839 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
            float _2840 = _2839 * _1679;
            float _2841 = _2839 * _1680;
            float _2842 = _2839 * _1681;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2719 < ((_2717 >> 12u) & 15u))
            {
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2953 = _2702;
                float _2954 = _2704;
                float _2955 = _2706;
                float _2956 = _2708;
                float _2957 = _2710;
                float _2958 = _2712;
                uint _2959 = _2719;
                uint _2968;
                bool _2969;
                for (;;)
                {
                    _2968 = texelFetch(g_lightClassification, int((((_2614 << 5u) + (_2600 << 9u)) + (_2959 << 2u)) >> 2u)).x;
                    _2969 = _2968 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2969)
                    {
                        frontier_phi_74_pred = _2955;
                        frontier_phi_74_pred_1 = _2954;
                        frontier_phi_74_pred_2 = _2953;
                        frontier_phi_74_pred_3 = _2958;
                        frontier_phi_74_pred_4 = _2957;
                        frontier_phi_74_pred_5 = _2956;
                    }
                    else
                    {
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3165 = _2953;
                        float _3166 = _2954;
                        float _3167 = _2955;
                        float _3168 = _2956;
                        float _3169 = _2957;
                        float _3170 = _2958;
                        uint _3171 = _2968;
                        uint _3172;
                        vec4 _3197;
                        float _3198;
                        vec4 _3213;
                        vec3 _3225;
                        vec4 _3241;
                        vec4 _3256;
                        float _3303;
                        bool _3304;
                        for (;;)
                        {
                            uint _3182 = ((_2959 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3171));
                            _3172 = (_3171 + 4294967295u) & _3171;
                            uint _3184 = _3182 * 40u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            _3198 = _3197.w;
                            uint _3200 = (_3182 * 40u) + 4u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3215 = (_3182 * 40u) + 8u;
                            _3225 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x));
                            uint _3228 = (_3182 * 40u) + 16u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3243 = (_3182 * 40u) + 20u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3259 = (_3182 * 40u) + 24u;
                            vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3278 = (_3182 * 40u) + 28u;
                            vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            _3303 = fma(_1681, _3291.z, fma(_1680, _3291.y, _3291.x * _1679)) + _3291.w;
                            _3304 = !((fma(_1681, _3272.z, fma(_1680, _3272.y, _3272.x * _1679)) + _3272.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3304)
                            {
                                float _3331 = _3197.x - _1679;
                                float _3332 = _3197.y - _1680;
                                float _3333 = _3197.z - _1681;
                                float _3334 = dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333));
                                float _3337 = inversesqrt(_3334);
                                float _3338 = _3337 * _3331;
                                float _3339 = _3337 * _3332;
                                float _3340 = _3337 * _3333;
                                float _3344 = 1.0 - (_3334 / (_3198 * _3198));
                                float _4444 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3345 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3349 = sqrt(_3334) * _3213.w;
                                float _3351 = 1.39999997615814208984375 / (_3349 + 1.39999997615814208984375);
                                float _3352 = _3351 * _3351;
                                float _3355 = ((1.0 - _3352) * dot(vec3(_3338, _3339, _3340), vec3(_539, _542, _545))) + _3352;
                                float _3358 = _3349 * _3349;
                                float _3362 = (fma(_1681, _3241.z, fma(_1680, _3241.y, _3241.x * _1679)) + _3241.w) / _3303;
                                float _3363 = (fma(_1681, _3256.z, fma(_1680, _3256.y, _3256.x * _1679)) + _3256.w) / _3303;
                                float _3367 = 1.0 - dot(vec2(_3362, _3363), vec2(_3362, _3363));
                                float _4460 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3369 = _3368 * (((isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0))) * _3345) / ((_3358 * 0.699999988079071044921875) + 1.0));
                                float _3381 = exp2(log2(1.0 / ((_3358 * 3.5) + 5.0)) * 0.25);
                                float _3382 = 1.0 - _615;
                                float _3389 = sqrt(1.0 - ((1.0 - (_3382 * _3382)) * (1.0 - (_3381 * _3381))));
                                float _3390 = _3389 * _3389;
                                float _3391 = _3390 * _3390;
                                float _3392 = _3338 - _2840;
                                float _3393 = _3339 - _2841;
                                float _3394 = _3340 - _2842;
                                float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                                float _3402 = dot(vec3(_539, _542, _545), vec3((-0.0) - _2840, (-0.0) - _2841, (-0.0) - _2842));
                                float _4471 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3405 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3406 = dot(vec3(_539, _542, _545), vec3(_3398 * _3392, _3398 * _3393, _3398 * _3394));
                                float _4482 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3409 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3413 = ((_3409 * _3409) * (_3391 + (-1.0))) + 1.0;
                                float _3414 = _3351 * _3390;
                                float _3415 = _3414 * _3414;
                                float _3421 = ((1.0 - _3415) * dot(vec3(_539, _542, _545), vec3(_3338, _3339, _3340))) + _3415;
                                float _4493 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3423 = 1.0 - _3390;
                                float _3433 = (0.5 / (((_3422 * ((_3405 * _3423) + _3390)) + 9.9999999392252902907785028219223e-09) + (((_3422 * _3423) + _3390) * _3405))) * _3422;
                                float _4504 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3443 = (_3368 * _3345) * (((_3391 * 3.1415927410125732421875) * (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) / ((_3413 * _3413) * ((_3358 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3443 * _3225.z;
                                frontier_phi_80_pred_1 = _3443 * _3225.y;
                                frontier_phi_80_pred_2 = _3443 * _3225.x;
                                frontier_phi_80_pred_3 = _3369 * _3213.z;
                                frontier_phi_80_pred_4 = _3369 * _3213.y;
                                frontier_phi_80_pred_5 = _3369 * _3213.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3449 = frontier_phi_80_pred;
                            _3448 = frontier_phi_80_pred_1;
                            _3447 = frontier_phi_80_pred_2;
                            _3452 = frontier_phi_80_pred_3;
                            _3451 = frontier_phi_80_pred_4;
                            _3450 = frontier_phi_80_pred_5;
                            _3155 = _3450 + _3168;
                            _3156 = _3451 + _3169;
                            _3157 = _3452 + _3170;
                            _3152 = _3447 + _3165;
                            _3153 = _3448 + _3166;
                            _3154 = _3449 + _3167;
                            if (_3172 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3172;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3154;
                        frontier_phi_74_pred_1 = _3153;
                        frontier_phi_74_pred_2 = _3152;
                        frontier_phi_74_pred_3 = _3157;
                        frontier_phi_74_pred_4 = _3156;
                        frontier_phi_74_pred_5 = _3155;
                    }
                    _2819 = frontier_phi_74_pred;
                    _2817 = frontier_phi_74_pred_1;
                    _2815 = frontier_phi_74_pred_2;
                    _2825 = frontier_phi_74_pred_3;
                    _2823 = frontier_phi_74_pred_4;
                    _2821 = frontier_phi_74_pred_5;
                    uint _2960 = _2959 + 1u;
                    if (_2960 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2953 = _2815;
                        _2954 = _2817;
                        _2955 = _2819;
                        _2956 = _2821;
                        _2957 = _2823;
                        _2958 = _2825;
                        _2959 = _2960;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2823;
                frontier_phi_62_63_ladder_1 = _2821;
                frontier_phi_62_63_ladder_2 = _2819;
                frontier_phi_62_63_ladder_3 = _2825;
                frontier_phi_62_63_ladder_4 = _2817;
                frontier_phi_62_63_ladder_5 = _2815;
            }
            else
            {
                frontier_phi_62_63_ladder = _2710;
                frontier_phi_62_63_ladder_1 = _2708;
                frontier_phi_62_63_ladder_2 = _2706;
                frontier_phi_62_63_ladder_3 = _2712;
                frontier_phi_62_63_ladder_4 = _2704;
                frontier_phi_62_63_ladder_5 = _2702;
            }
            _2814 = frontier_phi_62_63_ladder_5;
            _2816 = frontier_phi_62_63_ladder_4;
            _2818 = frontier_phi_62_63_ladder_2;
            _2820 = frontier_phi_62_63_ladder_1;
            _2822 = frontier_phi_62_63_ladder;
            _2824 = frontier_phi_62_63_ladder_3;
        }
        float _2829 = isnan(1.0) ? _599 : (isnan(_599) ? 1.0 : min(_599, 1.0));
        _2632 = (_2829 * _2820) + _2145;
        _2634 = (_2829 * _2822) + _2147;
        _2636 = (_2829 * _2824) + _2149;
        _2638 = ((_2814 * _584) * _2829) + _2483;
        _2640 = ((_2816 * _586) * _2829) + _2485;
        _2642 = ((_2818 * _587) * _2829) + _2487;
    }
    else
    {
        _2632 = _2145;
        _2634 = _2147;
        _2636 = _2149;
        _2638 = _2483;
        _2640 = _2485;
        _2642 = _2487;
    }
    float _4520 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4531 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4542 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _2659 = ((isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2632 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _599))) + ((_2638 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1409)) * cbPerFrame._m0[3u].x);
    float _2660 = ((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2634 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _599))) + ((_2640 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1409)) * cbPerFrame._m0[3u].x);
    float _2661 = ((isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2636 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _599))) + ((_2642 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1409)) * cbPerFrame._m0[3u].x);
    uint _2665 = _558 + 6u;
    float _2673 = _519 / cbSceneParam._m0[86u].x;
    float _2674 = _520 / cbSceneParam._m0[86u].y;
    vec4 _2688 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2673, _2674, (log2((isnan(cbSceneParam._m0[77u].w) ? _451 : (isnan(_451) ? cbSceneParam._m0[77u].w : min(_451, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2690 = _2688.x;
    float _2691 = _2688.y;
    float _2692 = _2688.z;
    float _2693 = _2688.w;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    if (_451 > cbSceneParam._m0[78u].w)
    {
        float _2727 = isnan(_451) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _451 : min(cbSceneParam._m0[80u].w, _451));
        float _2728 = _2727 / _451;
        float _2739 = _2728 * _504;
        float _2740 = _505 * _2728;
        float _2741 = (-0.0) - _2740;
        float _2742 = _2728 * _506;
        float _2744 = (cbSceneParam._m0[77u].w * _2741) / _2727;
        float _2745 = _2744 + cbSceneParam._m0[79u].w;
        float _2746 = cbSceneParam._m0[79u].w - _2740;
        float _2752 = sqrt(((_2739 * _2739) + (_2740 * _2740)) + (_2742 * _2742));
        float _2755 = (1.0 - (cbSceneParam._m0[77u].w / _2727)) * _2752;
        float _2760 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2762 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2915;
        if (abs((_2741 - _2744) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2915 = ((((_2745 > 0.0) ? exp2(_2760 * _2745) : (2.0 - exp2(_2762 * _2745))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2755;
        }
        else
        {
            float _2875 = 1.0 / cbSceneParam._m0[80u].x;
            float _2876 = isnan(_2746) ? _2745 : (isnan(_2745) ? _2746 : max(_2745, _2746));
            float _2877 = isnan(_2746) ? _2745 : (isnan(_2745) ? _2746 : min(_2745, _2746));
            float _2886 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : min(_2876, 0.0));
            float _2887 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : min(_2877, 0.0));
            _2915 = ((abs(_2752 / _2741) * cbSceneParam._m0[80u].y) * ((((_2886 - _2887) * 2.0) - ((exp2(_2760 * (isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0)))) - exp2(_2760 * (isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0))))) * _2875)) - ((exp2(_2762 * _2886) - exp2(_2762 * _2887)) * _2875))) + (_2755 * cbSceneParam._m0[80u].z);
        }
        vec4 _2917 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2673, _2674, 1.0), 0.0);
        float _2926 = exp2((_2915 * (-1.44269502162933349609375)) * (1.0 - _2917.w));
        float _2927 = log2(_2926);
        float _2943 = log2(_2693);
        _2764 = (exp2(_2943 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].x)) * _2917.x) / cbSceneParam._m0[78u].x)) + _2690;
        _2766 = (exp2(_2943 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].y)) * _2917.y) / cbSceneParam._m0[78u].y)) + _2691;
        _2768 = (exp2(_2943 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2927 * cbSceneParam._m0[78u].z)) * _2917.z) / cbSceneParam._m0[78u].z)) + _2692;
        _2770 = _2926 * _2693;
    }
    else
    {
        _2764 = _2690;
        _2766 = _2691;
        _2768 = _2692;
        _2770 = _2693;
    }
    float _2782 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2783 = _2782 == 3.0;
    float _2784 = log2(_2770);
    float _2791 = exp2(_2784 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0)));
    float _2792 = exp2(_2784 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0)));
    float _2793 = exp2(_2784 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0)));
    float _2802 = (_2782 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2802 * (_2783 ? _2791 : (_2791 + (cbSceneParam._m0[72u].w * _2764)));
    SV_Target.y = _2802 * (_2783 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2766)));
    SV_Target.z = _2802 * (_2783 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2768)));
    SV_Target.w = cbInstanceData._m0[_2665].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2665].w;
}


