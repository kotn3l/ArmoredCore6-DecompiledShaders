#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[21];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1018;
float _3690;
float _3691;
float _3692;
float _3693;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227;
    float _228;
    float _229;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
    }
    else
    {
        _227 = _213;
        _228 = _214;
        _229 = _215;
    }
    vec4 _255 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _261 = _255.x * cbMatDynParam._m0[17u].x;
    float _262 = _255.y * cbMatDynParam._m0[17u].y;
    float _263 = _255.z * cbMatDynParam._m0[17u].z;
    vec4 _282 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _315 = (TEXCOORD_7.x - ((cbMatDynParam._m0[19u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMatDynParam._m0[19u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMatDynParam._m0[19u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMatDynParam._m0[19u].y * TEXCOORD.w) + 1.0);
    float _3702 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _323 = (_316 * ((_282.x * cbMatDynParam._m0[18u].x) - _261)) + _261;
    float _324 = (_316 * ((_282.y * cbMatDynParam._m0[18u].y) - _262)) + _262;
    float _325 = (_316 * ((_282.z * cbMatDynParam._m0[18u].z) - _263)) + _263;
    float _342 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_5) + cbTextureTilingScale._m0[5u].w)).x + cbMatDynParam._m0[19u].w;
    float _365 = (((cbMatDynParam._m0[20u].x - _342) + texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_5) + cbTextureTilingScale._m0[6u].w)).x) * _316) + _342;
    vec4 _377 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _379 = _377.x;
    float _380 = _377.y;
    float _381 = _377.z;
    vec4 _393 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _406 = ((_393.z - _381) * _316) + _381;
    float _410 = ((((_393.x - _379) * _316) + _379) * 2.0) + (-1.0);
    float _412 = ((((_393.y - _380) * _316) + _380) * 2.0) + (-1.0);
    float _413 = dot(vec2(_410, _412), vec2(_410, _412));
    float _3713 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _418 = sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))));
    float _421 = fma(_418, _227, fma(_412, _219 * TANGENT.x, (_205 * _197) * _410));
    float _424 = fma(_418, _228, fma(_412, _219 * TANGENT.y, (_205 * _198) * _410));
    float _427 = fma(_418, _229, fma(_412, _219 * TANGENT.z, (_205 * _199) * _410));
    float _431 = inversesqrt(dot(vec3(_421, _424, _427), vec3(_421, _424, _427)));
    float _432 = _431 * _421;
    float _433 = _431 * _424;
    float _434 = _431 * _427;
    float _3724 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _435 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3746 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3757 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3768 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _439 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _455 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _508 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _498);
    float _509 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _498);
    float _510 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _498);
    float _514 = inversesqrt(dot(vec3(_508, _509, _510), vec3(_508, _509, _510)));
    float _515 = _508 * _514;
    float _516 = _509 * _514;
    float _517 = _510 * _514;
    vec4 _522 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _524 = _522.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _698 = sqrt(((_508 * _508) + (_509 * _509)) + (_510 * _510));
        float _704 = (cbMatDynParam._m0[5u].x * _698) + cbMatDynParam._m0[5u].y;
        float _3779 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _709 = (cbMatDynParam._m0[5u].z * _698) + cbMatDynParam._m0[5u].w;
        float _3790 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) - _705)) + _705) < ((_524 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _535 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _536 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _555 = fma(_434, cbSceneParam._m0[5u].z, fma(_433, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _432));
    float _558 = fma(_434, cbSceneParam._m0[6u].z, fma(_433, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _432));
    float _561 = fma(_434, cbSceneParam._m0[7u].z, fma(_433, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _432));
    uint _574 = uint(roundEven(NORMAL.w)) * 13u;
    uint _576 = _574 + 9u;
    uint _577 = _576 + uint(cbMatDynParam._m0[0u].w);
    float _583 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * cbInstanceData._m0[_577].x;
    float _584 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * cbInstanceData._m0[_577].y;
    float _585 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * cbInstanceData._m0[_577].z;
    float _3801 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _589 = 1.0 - _439;
    float _590 = _586 * _589;
    float _591 = _587 * _589;
    float _592 = _588 * _589;
    float _597 = (_586 + (-0.039999999105930328369140625)) * _439;
    float _598 = (_587 + (-0.039999999105930328369140625)) * _439;
    float _599 = (_588 + (-0.039999999105930328369140625)) * _439;
    float _600 = _597 + 0.039999999105930328369140625;
    float _602 = _598 + 0.039999999105930328369140625;
    float _603 = _599 + 0.039999999105930328369140625;
    vec4 _612 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _535, cbSceneParam._m0[86u].y * _536));
    float _615 = _612.x * TEXCOORD_7.w;
    float _616 = dot(vec3(_432, _433, _434), vec3(_515, _516, _517));
    float _619 = _616 * 2.0;
    float _623 = (_619 * _432) - _515;
    float _624 = (_619 * _433) - _516;
    float _625 = (_619 * _434) - _517;
    float _629 = abs(dot(vec3(_515, _516, _517), vec3(_432, _433, _434)));
    float _3834 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _631 = sqrt(_435);
    float _644 = exp2((_631 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_631 * 3.0));
    float _650 = (1.0 - _644) * ((_631 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _651 = _644 * _631;
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1017;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _742 = fma(_687, cbModelParam._m0[26u].z, fma(_683, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _679));
        float _746 = fma(_687, cbModelParam._m0[27u].z, fma(_683, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _679));
        float _750 = fma(_687, cbModelParam._m0[28u].z, fma(_683, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _679));
        float _775 = _679 + _432;
        float _776 = _683 + _433;
        float _777 = _687 + _434;
        float _787 = fma(_777, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775)) - _742;
        float _788 = fma(_777, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775)) - _746;
        float _789 = fma(_777, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775)) - _750;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_742 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_746 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[34u].z) + ((((((_750 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _845 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_811.x + (-0.5));
        float _847 = _845 * (_811.y + (-0.5));
        float _848 = _845 * (_811.z + (-0.5));
        float _855 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_818.x + (-0.5));
        float _857 = _855 * (_818.y + (-0.5));
        float _858 = _855 * (_818.z + (-0.5));
        float _865 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_825.x + (-0.5));
        float _867 = _865 * (_825.y + (-0.5));
        float _868 = _865 * (_825.z + (-0.5));
        float _875 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_832.x + (-0.5));
        float _877 = _875 * (_832.y + (-0.5));
        float _878 = _875 * (_832.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _899 = (dot(vec3(_432, _433, _434), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _909 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3882 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_911 + 1.0))) + _916) * _879;
        float _926 = _847 * 0.5;
        float _927 = _857 * 0.5;
        float _928 = _867 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_432, _433, _434), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3915 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_953 + 1.0))) + _958) * _880;
        float _968 = _848 * 0.5;
        float _969 = _858 * 0.5;
        float _970 = _868 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_432, _433, _434), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3948 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_995 + 1.0))) + _1000) * _881;
        _1017 = _848;
        _1019 = _847;
        _1020 = _846;
        _1021 = _858;
        _1022 = _857;
        _1023 = _856;
        _1024 = _868;
        _1025 = _867;
        _1026 = _866;
        _1027 = _881;
        _1028 = _880;
        _1029 = _879;
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _1018;
        _1019 = _1018;
        _1020 = _1018;
        _1021 = _1018;
        _1022 = _1018;
        _1023 = _1018;
        _1024 = _1018;
        _1025 = _1018;
        _1026 = _1018;
        _1027 = _1018;
        _1028 = _1018;
        _1029 = _1018;
        _1030 = 0.0;
        _1031 = 0.0;
        _1032 = 0.0;
    }
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1061 = fma(_687, cbModelParam._m0[30u].z, fma(_683, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _679));
        float _1065 = fma(_687, cbModelParam._m0[31u].z, fma(_683, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _679));
        float _1069 = fma(_687, cbModelParam._m0[32u].z, fma(_683, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _679));
        float _1092 = _679 + _432;
        float _1093 = _683 + _433;
        float _1094 = _687 + _434;
        float _1104 = fma(_1094, cbModelParam._m0[30u].z, fma(_1093, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1092)) - _1061;
        float _1105 = fma(_1094, cbModelParam._m0[31u].z, fma(_1093, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1092)) - _1065;
        float _1106 = fma(_1094, cbModelParam._m0[32u].z, fma(_1093, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1092)) - _1069;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1061 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1065 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[35u].z) + ((((((_1069 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1160 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1127.x + (-0.5));
        float _1162 = _1160 * (_1127.y + (-0.5));
        float _1163 = _1160 * (_1127.z + (-0.5));
        float _1170 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1134.x + (-0.5));
        float _1172 = _1170 * (_1134.y + (-0.5));
        float _1173 = _1170 * (_1134.z + (-0.5));
        float _1180 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1141.x + (-0.5));
        float _1182 = _1180 * (_1141.y + (-0.5));
        float _1183 = _1180 * (_1141.z + (-0.5));
        float _1190 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1148.x + (-0.5));
        float _1192 = _1190 * (_1148.y + (-0.5));
        float _1193 = _1190 * (_1148.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_432, _433, _434), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _4011 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1224 + 1.0))) + _1229) * _1194;
        float _1239 = _1162 * 0.5;
        float _1240 = _1172 * 0.5;
        float _1241 = _1182 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_432, _433, _434), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4044 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1266 + 1.0))) + _1271) * _1195;
        float _1281 = _1163 * 0.5;
        float _1282 = _1173 * 0.5;
        float _1283 = _1183 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_432, _433, _434), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4077 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1308 + 1.0))) + _1313) * _1196;
        _1330 = _1163;
        _1331 = _1162;
        _1332 = _1161;
        _1333 = _1173;
        _1334 = _1172;
        _1335 = _1171;
        _1336 = _1183;
        _1337 = _1182;
        _1338 = _1181;
        _1339 = _1196;
        _1340 = _1195;
        _1341 = _1194;
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1018;
        _1331 = _1018;
        _1332 = _1018;
        _1333 = _1018;
        _1334 = _1018;
        _1335 = _1018;
        _1336 = _1018;
        _1337 = _1018;
        _1338 = _1018;
        _1339 = _1018;
        _1340 = _1018;
        _1341 = _1018;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1030)) + _1030;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1031)) + _1031;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1032)) + _1032;
    float _1377 = fma(_1356, cbSceneParam._m0[89u].z, fma(_1355, cbSceneParam._m0[89u].y, _1354 * cbSceneParam._m0[89u].x));
    float _1380 = fma(_1356, cbSceneParam._m0[90u].z, fma(_1355, cbSceneParam._m0[90u].y, _1354 * cbSceneParam._m0[90u].x));
    float _1383 = fma(_1356, cbSceneParam._m0[91u].z, fma(_1355, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1354));
    float _1398 = _623 * 0.5;
    float _1399 = _624 * 0.5;
    float _1400 = _625 * 0.5;
    float _1401 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1404 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1407 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1441;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1414 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1017, _1021, _1024, _1027));
        float _1418 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1422 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1429 = dot(vec4(cbModelParam._m0[39u]), vec4(_1398, _1399, _1400, 1.0));
        _1441 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1441 = 1.0;
    }
    float _1452;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1443 = dot(vec4(cbModelParam._m0[40u]), vec4(_1398, _1399, _1400, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1456 = (_1452 * cbModelParam._m0[1u].x) + (_1441 * (1.0 - cbModelParam._m0[1u].x));
    float _1466 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _435);
    float _1467 = isnan(_1466) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1466 : min(cbModelParam._m0[25u].z, _1466));
    float _1549;
    float _1551;
    float _1553;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1516 = fma(_687, cbModelParam._m0[13u].z, fma(_683, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _679)) + cbModelParam._m0[13u].w;
        float _1520 = fma(_687, cbModelParam._m0[14u].z, fma(_683, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _679)) + cbModelParam._m0[14u].w;
        float _1524 = fma(_687, cbModelParam._m0[15u].z, fma(_683, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _679)) + cbModelParam._m0[15u].w;
        float _1527 = fma(_625, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623));
        float _1530 = fma(_625, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623));
        float _1533 = fma(_625, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623));
        float _1561;
        if (_1527 > 0.0)
        {
            _1561 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1561 = frontier_phi_19_17_ladder;
        }
        float _1734;
        if (_1530 > 0.0)
        {
            _1734 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1734 = frontier_phi_28_24_ladder;
        }
        float _2029;
        if (_1533 > 0.0)
        {
            _2029 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2029 = frontier_phi_40_35_ladder;
        }
        float _2031 = isnan(_1734) ? _1561 : (isnan(_1561) ? _1734 : min(_1561, _1734));
        float _2032 = isnan(_2029) ? _2031 : (isnan(_2031) ? _2029 : min(_2031, _2029));
        float _2036 = (_2032 * _1527) + _1516;
        float _2037 = (_2032 * _1530) + _1520;
        float _2038 = (_2032 * _1533) + _1524;
        float _2039 = _2032 * 9.9999997473787516355514526367188e-05;
        float _2041 = (-1.0) - _2039;
        float _2043 = _2039 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2038 > _2043) || ((_2038 < _2041) || ((_2037 > _2043) || ((_2037 < _2041) || ((_2036 < _2041) || (_2036 > _2043))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2183 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2038, cbModelParam._m0[9u].z, fma(_2037, cbModelParam._m0[9u].y, _2036 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2038, cbModelParam._m0[10u].z, fma(_2037, cbModelParam._m0[10u].y, _2036 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2038, cbModelParam._m0[11u].z, fma(_2037, cbModelParam._m0[11u].y, _2036 * cbModelParam._m0[11u].x))), _1467);
            frontier_phi_18_40_ladder = _2183.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2183.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2183.x * cbModelParam._m0[1u].y;
        }
        _1549 = frontier_phi_18_40_ladder_2;
        _1551 = frontier_phi_18_40_ladder_1;
        _1553 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_623, _624, _625), _1467);
        _1549 = _1537.x * cbModelParam._m0[1u].y;
        _1551 = _1537.y * cbModelParam._m0[1u].y;
        _1553 = _1537.z * cbModelParam._m0[1u].y;
    }
    float _1557 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _435);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1557 : min(cbModelParam._m0[25u].w, _1557));
    float _1648;
    float _1650;
    float _1652;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1612 = fma(_687, cbModelParam._m0[21u].z, fma(_683, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _679)) + cbModelParam._m0[21u].w;
        float _1616 = fma(_687, cbModelParam._m0[22u].z, fma(_683, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _679)) + cbModelParam._m0[22u].w;
        float _1620 = fma(_687, cbModelParam._m0[23u].z, fma(_683, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _679)) + cbModelParam._m0[23u].w;
        float _1623 = fma(_625, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623));
        float _1626 = fma(_625, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623));
        float _1629 = fma(_625, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623));
        float _1739;
        if (_1623 > 0.0)
        {
            _1739 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1739 = frontier_phi_30_26_ladder;
        }
        float _2056;
        if (_1626 > 0.0)
        {
            _2056 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2056 = frontier_phi_42_37_ladder;
        }
        float _2394;
        if (_1629 > 0.0)
        {
            _2394 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2394 = frontier_phi_52_49_ladder;
        }
        float _2396 = isnan(_2056) ? _1739 : (isnan(_1739) ? _2056 : min(_1739, _2056));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1623) + _1612;
        float _2402 = (_2397 * _1626) + _1616;
        float _2403 = (_2397 * _1629) + _1620;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2404;
        float _2407 = _2404 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2403 > _2407) || ((_2403 < _2405) || ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 < _2405) || (_2401 > _2407))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2403, cbModelParam._m0[17u].z, fma(_2402, cbModelParam._m0[17u].y, _2401 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2403, cbModelParam._m0[18u].z, fma(_2402, cbModelParam._m0[18u].y, _2401 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2403, cbModelParam._m0[19u].z, fma(_2402, cbModelParam._m0[19u].y, _2401 * cbModelParam._m0[19u].x))), _1558);
            frontier_phi_27_52_ladder = _2525.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2525.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2525.x * cbModelParam._m0[1u].z;
        }
        _1648 = frontier_phi_27_52_ladder_2;
        _1650 = frontier_phi_27_52_ladder_1;
        _1652 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1632 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_623, _624, _625), _1558);
        _1648 = _1632.x * cbModelParam._m0[1u].z;
        _1650 = _1632.y * cbModelParam._m0[1u].z;
        _1652 = _1632.z * cbModelParam._m0[1u].z;
    }
    float _1665 = (((_650 * _600) + _651) * _615) * ((cbModelParam._m0[1u].w * (_1648 - _1549)) + _1549);
    float _1667 = (((_650 * _602) + _651) * _615) * ((cbModelParam._m0[1u].w * (_1650 - _1551)) + _1551);
    float _1669 = (((_650 * _603) + _651) * _615) * ((cbModelParam._m0[1u].w * (_1652 - _1553)) + _1553);
    float _1672 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1675 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1678 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, _1665 * cbSceneParam._m0[91u].x));
    float _1713 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1717 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1721 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1725 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1726 = _1713 / _1725;
    float _1727 = _1717 / _1725;
    float _1728 = _1721 / _1725;
    float _1875;
    float _1876;
    float _1877;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1755 = ((uint(_1728 > cbSceneParam._m0[59u].y) + uint(_1728 > cbSceneParam._m0[59u].x)) + uint(_1728 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1756 = _1755 + 43u;
        uint _1764 = _1755 + 44u;
        uint _1772 = _1755 + 45u;
        uint _1780 = _1755 + 46u;
        float _1791 = fma(_1725, cbSceneParam._m0[_1756].w, fma(_1721, cbSceneParam._m0[_1756].z, fma(_1717, cbSceneParam._m0[_1756].y, _1713 * cbSceneParam._m0[_1756].x)));
        float _1795 = fma(_1725, cbSceneParam._m0[_1764].w, fma(_1721, cbSceneParam._m0[_1764].z, fma(_1717, cbSceneParam._m0[_1764].y, _1713 * cbSceneParam._m0[_1764].x)));
        float _1803 = fma(_1725, cbSceneParam._m0[_1780].w, fma(_1721, cbSceneParam._m0[_1780].z, fma(_1717, cbSceneParam._m0[_1780].y, _1713 * cbSceneParam._m0[_1780].x)));
        float _1808 = cbSceneParam._m0[33u].z * _1803;
        float _1810 = cbSceneParam._m0[33u].w * _1803;
        float _1813 = fma(_1725, cbSceneParam._m0[_1772].w, fma(_1721, cbSceneParam._m0[_1772].z, fma(_1717, cbSceneParam._m0[_1772].y, _1713 * cbSceneParam._m0[_1772].x))) / _1803;
        float _1861 = (cbSceneParam._m0[33u].x - sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728))) * cbSceneParam._m0[33u].y;
        float _4203 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1868 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1808 + _1791) / _1803, (_1810 + _1795) / _1803), _1813), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1810 + _1791) / _1803, (_1795 - _1808) / _1803), _1813), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1791 - _1808) / _1803, (_1795 - _1810) / _1803), _1813), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1791 - _1810) / _1803, (_1808 + _1795) / _1803), _1813), 0.0)).x), vec4(0.25)));
        _1875 = 1.0 - (_1868 * cbSceneParam._m0[34u].x);
        _1876 = 1.0 - (_1868 * cbSceneParam._m0[34u].y);
        _1877 = 1.0 - (_1868 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1875 = 1.0;
        _1876 = 1.0;
        _1877 = 1.0;
    }
    float _1941;
    float _1943;
    float _1945;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1929 = fma(_1725, cbSceneParam._m0[63u].w, fma(_1721, cbSceneParam._m0[63u].z, fma(_1717, cbSceneParam._m0[63u].y, _1713 * cbSceneParam._m0[63u].x)));
        float _1930 = fma(_1725, cbSceneParam._m0[60u].w, fma(_1721, cbSceneParam._m0[60u].z, fma(_1717, cbSceneParam._m0[60u].y, _1713 * cbSceneParam._m0[60u].x))) / _1929;
        float _1931 = fma(_1725, cbSceneParam._m0[61u].w, fma(_1721, cbSceneParam._m0[61u].z, fma(_1717, cbSceneParam._m0[61u].y, _1713 * cbSceneParam._m0[61u].x))) / _1929;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1930 >= cbSceneParam._m0[64u].x) && (_1931 >= cbSceneParam._m0[64u].y)) && (_1930 <= cbSceneParam._m0[64u].z)) && (_1931 <= cbSceneParam._m0[64u].w))
        {
            float _2069 = fma(_1725, cbSceneParam._m0[62u].w, fma(_1721, cbSceneParam._m0[62u].z, fma(_1717, cbSceneParam._m0[62u].y, _1713 * cbSceneParam._m0[62u].x))) / _1929;
            float _2073 = isnan(cbSceneParam._m0[41u].w) ? _2069 : (isnan(_2069) ? cbSceneParam._m0[41u].w : max(_2069, cbSceneParam._m0[41u].w));
            float _2116 = (cbSceneParam._m0[33u].x - sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728))) * cbSceneParam._m0[33u].y;
            float _4219 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
            float _2123 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1930, cbSceneParam._m0[33u].w + _1931), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1930, _1931 - cbSceneParam._m0[33u].z), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1930 - cbSceneParam._m0[33u].z, _1931 - cbSceneParam._m0[33u].w), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1930 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1931), _2073), 0.0)).x), vec4(0.25)));
            float _2127 = 1.0 - (_2123 * cbSceneParam._m0[34u].x);
            float _2128 = 1.0 - (_2123 * cbSceneParam._m0[34u].y);
            float _2129 = 1.0 - (_2123 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2128) ? _1876 : (isnan(_1876) ? _2128 : min(_1876, _2128));
            frontier_phi_39_38_ladder_1 = isnan(_2127) ? _1875 : (isnan(_1875) ? _2127 : min(_1875, _2127));
            frontier_phi_39_38_ladder_2 = isnan(_2129) ? _1877 : (isnan(_1877) ? _2129 : min(_1877, _2129));
        }
        else
        {
            frontier_phi_39_38_ladder = _1876;
            frontier_phi_39_38_ladder_1 = _1875;
            frontier_phi_39_38_ladder_2 = _1877;
        }
        _1941 = frontier_phi_39_38_ladder_1;
        _1943 = frontier_phi_39_38_ladder;
        _1945 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1941 = _1875;
        _1943 = _1876;
        _1945 = _1877;
    }
    uvec4 _1950 = floatBitsToUint(cbInstanceData._m0[_574 + 5u]);
    uint _1952 = _1950.x * 14u;
    uint _1953 = _1952 + 13u;
    float _1960 = _615 + (-1.0);
    float _1965 = (cbLight._m0[_1953].x * _1960) + 1.0;
    float _1966 = (cbLight._m0[_1953].y * _1960) + 1.0;
    float _1967 = (cbLight._m0[_1953].z * _1960) + 1.0;
    float _1968 = (cbLight._m0[_1953].w * _1960) + 1.0;
    uint _1969 = _1952 + 5u;
    float _1975 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
    uint _1979 = _1952 + 4u;
    float _1988 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
    uint _1992 = _1952 | 1u;
    float _2003 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_432, _433, _434));
    float _2006 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_432, _433, _434));
    float _4255 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _4266 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2011 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.3183098733425140380859375;
    float _2013 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * 0.3183098733425140380859375;
    float _2020 = ((cbLight._m0[_1969].x * _1975) * _2013) + (((cbLight._m0[_1979].x * _1941) * _1988) * _2011);
    float _2021 = ((_1975 * cbLight._m0[_1969].y) * _2013) + (((cbLight._m0[_1979].y * _1943) * _1988) * _2011);
    float _2022 = ((_1975 * cbLight._m0[_1969].z) * _2013) + (((cbLight._m0[_1979].z * _1945) * _1988) * _2011);
    uvec4 _2026 = floatBitsToUint(cbLight._m0[_1952 + 12u]);
    bool _2028 = _2026.x == 0u;
    float _2130;
    float _2132;
    float _2134;
    if (_2028)
    {
        _2130 = _2020;
        _2132 = _2021;
        _2134 = _2022;
    }
    else
    {
        uint _2138 = _1952 + 6u;
        float _2154 = (dot(vec3(cbLight._m0[_1952 + 2u].xyz), vec3(_432, _433, _434)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _4277 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2157 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
        _2130 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _2020;
        _2132 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _2021;
        _2134 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _2022;
    }
    bool _2137 = _2026.y == 0u;
    float _2192;
    float _2194;
    float _2196;
    if (_2137)
    {
        _2192 = _2130;
        _2194 = _2132;
        _2196 = _2134;
    }
    else
    {
        uint _2365 = _1952 + 7u;
        float _2381 = (dot(vec3(cbLight._m0[_1952 + 3u].xyz), vec3(_432, _433, _434)) * 0.5) + 0.5;
        float _2382 = _2381 * _2381;
        float _4293 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2383 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2384 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2192 = (((cbLight._m0[_2365].x * 0.3183098733425140380859375) * _2383) * _2384) + _2130;
        _2194 = (((cbLight._m0[_2365].y * 0.3183098733425140380859375) * _2383) * _2384) + _2132;
        _2196 = (((cbLight._m0[_2365].z * 0.3183098733425140380859375) * _2383) * _2384) + _2134;
    }
    uint _2199 = _1952 + 8u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1952].w)) * _435) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_1952].x + _515;
    float _2215 = cbLight._m0[_1952].y + _516;
    float _2216 = cbLight._m0[_1952].z + _517;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_1952].xyz));
    float _4309 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _4320 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _2228 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2229 = dot(vec3(_432, _433, _434), vec3(_2221, _2222, _2223));
    float _4331 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2233 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_2221, _2222, _2223));
    float _4342 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2237 = _2213 * _2213;
    float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
    float _2249 = exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0);
    float _2250 = 0.959999978542327880859375 - _597;
    float _2252 = 0.959999978542327880859375 - _598;
    float _2253 = 0.959999978542327880859375 - _599;
    float _2260 = 1.0 - _2213;
    float _2271 = (0.5 / (((_2228 * ((_2227 * _2260) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2260) + _2213) * _2227))) * _2227;
    float _4353 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
    uint _2287 = _1952 + 9u;
    float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _435) * 0.949999988079071044921875);
    float _2299 = _2298 * _2298;
    float _2300 = cbLight._m0[_1992].x + _515;
    float _2301 = cbLight._m0[_1992].y + _516;
    float _2302 = cbLight._m0[_1992].z + _517;
    float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
    float _2307 = _2306 * _2300;
    float _2308 = _2306 * _2301;
    float _2309 = _2306 * _2302;
    float _2310 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_1992].xyz));
    float _4364 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2314 = dot(vec3(_432, _433, _434), vec3(_2307, _2308, _2309));
    float _4375 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2318 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2307, _2308, _2309));
    float _4386 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2322 = _2299 * _2299;
    float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
    float _2333 = exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0);
    float _2340 = 1.0 - _2299;
    float _2350 = (0.5 / (((_2228 * ((_2313 * _2340) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2340) + _2299) * _2313))) * _2313;
    float _4397 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
    float _2362 = (((((_2333 * _2250) + _600) * cbLight._m0[_2287].x) * _2352) * _1975) + ((((cbLight._m0[_2199].x * _1941) * ((_2249 * _2250) + _600)) * _2273) * _1988);
    float _2363 = (((((_2333 * _2252) + _602) * cbLight._m0[_2287].y) * _2352) * _1975) + ((((cbLight._m0[_2199].y * _1943) * ((_2249 * _2252) + _602)) * _2273) * _1988);
    float _2364 = (((((_2333 * _2253) + _603) * cbLight._m0[_2287].z) * _2352) * _1975) + ((((cbLight._m0[_2199].z * _1945) * ((_2249 * _2253) + _603)) * _2273) * _1988);
    float _2420;
    float _2422;
    float _2424;
    if (_2028)
    {
        _2420 = _2362;
        _2422 = _2363;
        _2424 = _2364;
    }
    else
    {
        uint _2426 = _1952 + 2u;
        uint _2430 = _1952 + 10u;
        float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _435) * 0.949999988079071044921875);
        float _2445 = _2444 * _2444;
        float _2446 = cbLight._m0[_2426].x + _515;
        float _2447 = cbLight._m0[_2426].y + _516;
        float _2448 = cbLight._m0[_2426].z + _517;
        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
        float _2453 = _2452 * _2446;
        float _2454 = _2452 * _2447;
        float _2455 = _2452 * _2448;
        float _2456 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_2426].xyz));
        float _4408 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2460 = dot(vec3(_432, _433, _434), vec3(_2453, _2454, _2455));
        float _4419 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2464 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2453, _2454, _2455));
        float _4430 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2468 = _2445 * _2445;
        float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
        float _2479 = exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0);
        float _2486 = 1.0 - _2445;
        float _2496 = (0.5 / (((_2228 * ((_2459 * _2486) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2486) + _2445) * _2459))) * _2459;
        float _4441 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2498 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
        float _2499 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
        _2420 = (((((_2479 * _2250) + _600) * cbLight._m0[_2430].x) * _2498) * _2499) + _2362;
        _2422 = (((((_2479 * _2252) + _602) * cbLight._m0[_2430].y) * _2498) * _2499) + _2363;
        _2424 = (((((_2479 * _2253) + _603) * cbLight._m0[_2430].z) * _2498) * _2499) + _2364;
    }
    float _2530;
    float _2532;
    float _2534;
    if (_2137)
    {
        _2530 = _2420;
        _2532 = _2422;
        _2534 = _2424;
    }
    else
    {
        uint _2541 = _1952 + 3u;
        uint _2545 = _1952 + 11u;
        float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2541].w)) * _435) * 0.949999988079071044921875);
        float _2560 = _2559 * _2559;
        float _2561 = cbLight._m0[_2541].x + _515;
        float _2562 = cbLight._m0[_2541].y + _516;
        float _2563 = cbLight._m0[_2541].z + _517;
        float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
        float _2568 = _2567 * _2561;
        float _2569 = _2567 * _2562;
        float _2570 = _2567 * _2563;
        float _2571 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_2541].xyz));
        float _4457 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2575 = dot(vec3(_432, _433, _434), vec3(_2568, _2569, _2570));
        float _4468 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2579 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_2568, _2569, _2570));
        float _4479 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2583 = _2560 * _2560;
        float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
        float _2594 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
        float _2601 = 1.0 - _2560;
        float _2611 = (0.5 / (((_2228 * ((_2574 * _2601) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2601) + _2560) * _2574))) * _2574;
        float _4490 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2613 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
        float _2614 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2530 = (((((_2594 * _2250) + _600) * cbLight._m0[_2545].x) * _2613) * _2614) + _2420;
        _2532 = (((((_2594 * _2252) + _602) * cbLight._m0[_2545].y) * _2613) * _2614) + _2422;
        _2534 = (((((_2594 * _2253) + _603) * cbLight._m0[_2545].z) * _2613) * _2614) + _2424;
    }
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    if (_1950.y == 0u)
    {
        uvec4 _2635 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2636 = _2635.x;
        uint _2647 = uint((float(_2635.y) * floor(float(uint(cbSceneParam._m0[85u].y * _536) / _2636))) + floor(float(uint(cbSceneParam._m0[85u].x * _535) / _2636)));
        float _2657 = (log2(_1728 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2658 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        uint _2661 = uint(isnan(14.0) ? _2658 : (isnan(_2658) ? 14.0 : min(_2658, 14.0)));
        uvec4 _2666 = texelFetch(g_lightClusterGridBuffer, int(((_2661 << 2u) + (_2647 << 6u)) >> 2u));
        uint _2667 = _2666.x;
        uint _2668 = _2635.z;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((((1u << ((_2668 >> 4u) & 15u)) + 4294967295u) & _2667) == 0u) || ((_2668 & 240u) == 0u))
        {
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
        }
        else
        {
            float _2750;
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            uint _2907 = 0u;
            uint _2916;
            bool _2917;
            for (;;)
            {
                _2916 = texelFetch(g_lightClassification, int((((_2661 << 5u) + (_2647 << 9u)) + (_2907 << 2u)) >> 2u)).x;
                _2917 = _2916 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2917)
                {
                    frontier_phi_73_pred = _2906;
                    frontier_phi_73_pred_1 = _2905;
                    frontier_phi_73_pred_2 = _2904;
                    frontier_phi_73_pred_3 = _2903;
                    frontier_phi_73_pred_4 = _2902;
                    frontier_phi_73_pred_5 = _2901;
                }
                else
                {
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    uint _3052;
                    _3046 = _2901;
                    _3047 = _2902;
                    _3048 = _2903;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2916;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    for (;;)
                    {
                        uint _3056 = uint(findLSB(_3052)) + (_2907 << 5u);
                        uint _3053 = (_3052 + 4294967295u) & _3052;
                        uint _3058 = _3056 * 48u;
                        vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 3u)).x));
                        uint _3078 = (_3056 * 48u) + 4u;
                        vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 3u)).x));
                        uint _3097 = (_3056 * 48u) + 8u;
                        vec3 _3108 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x));
                        float _3112 = _3072.x - _1726;
                        float _3113 = _3072.y - _1727;
                        float _3114 = _3072.z - _1728;
                        float _3115 = dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114));
                        float _3118 = inversesqrt(_3115);
                        float _3119 = _3118 * _3112;
                        float _3120 = _3118 * _3113;
                        float _3121 = _3118 * _3114;
                        float _3122 = dot(vec3(_555, _558, _561), vec3(_3119, _3120, _3121));
                        float _3127 = 1.0 - (_3115 * _3072.w);
                        float _4516 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3128 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3129 = sqrt(_3115) * _3091.w;
                        float _3132 = 1.39999997615814208984375 / (_3129 + 1.39999997615814208984375);
                        float _3133 = _3132 * _3132;
                        float _3136 = ((1.0 - _3133) * _3122) + _3133;
                        float _3139 = _3129 * _3129;
                        float _3143 = ((isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))) * _3128) / ((_3139 * 0.699999988079071044921875) + 1.0);
                        float _3147 = (-0.0) - _1726;
                        float _3148 = (-0.0) - _1727;
                        float _3149 = (-0.0) - _1728;
                        float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                        float _3154 = _3153 * _3147;
                        float _3155 = _3153 * _3148;
                        float _3156 = _3153 * _3149;
                        float _3163 = exp2(log2(1.0 / ((_3139 * 3.5) + 5.0)) * 0.25);
                        float _3164 = 1.0 - _631;
                        float _3171 = sqrt(1.0 - ((1.0 - (_3164 * _3164)) * (1.0 - (_3163 * _3163))));
                        float _3172 = _3171 * _3171;
                        float _3173 = _3172 * _3172;
                        float _3174 = _3154 + _3119;
                        float _3175 = _3155 + _3120;
                        float _3176 = _3156 + _3121;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3184 = dot(vec3(_555, _558, _561), vec3(_3154, _3155, _3156));
                        float _4532 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3187 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3188 = dot(vec3(_555, _558, _561), vec3(_3180 * _3174, _3180 * _3175, _3180 * _3176));
                        float _4543 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3191 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3195 = ((_3191 * _3191) * (_3173 + (-1.0))) + 1.0;
                        float _3196 = _3132 * _3172;
                        float _3197 = _3196 * _3196;
                        float _3200 = ((1.0 - _3197) * _3122) + _3197;
                        float _4554 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3201 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3202 = 1.0 - _3172;
                        float _3212 = (0.5 / (((_3201 * ((_3187 * _3202) + _3172)) + 9.9999999392252902907785028219223e-09) + (((_3201 * _3202) + _3172) * _3187))) * _3201;
                        float _4565 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3223 = (((_3173 * 3.1415927410125732421875) * (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) / ((_3195 * _3195) * ((_3139 * 2.1991131305694580078125) + 3.141590118408203125))) * _3128;
                        _2976 = (_3143 * _3091.x) + _3049;
                        _2977 = (_3143 * _3091.y) + _3050;
                        _2978 = (_3143 * _3091.z) + _3051;
                        _2973 = (_3223 * _3108.x) + _3046;
                        _2974 = (_3223 * _3108.y) + _3047;
                        _2975 = (_3223 * _3108.z) + _3048;
                        if (_3053 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3046 = _2973;
                            _3047 = _2974;
                            _3048 = _2975;
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _3053;
                        }
                    }
                    frontier_phi_73_pred = _2978;
                    frontier_phi_73_pred_1 = _2977;
                    frontier_phi_73_pred_2 = _2976;
                    frontier_phi_73_pred_3 = _2975;
                    frontier_phi_73_pred_4 = _2974;
                    frontier_phi_73_pred_5 = _2973;
                }
                _2760 = frontier_phi_73_pred;
                _2758 = frontier_phi_73_pred_1;
                _2756 = frontier_phi_73_pred_2;
                _2754 = frontier_phi_73_pred_3;
                _2752 = frontier_phi_73_pred_4;
                _2750 = frontier_phi_73_pred_5;
                uint _2908 = _2907 + 1u;
                if (_2908 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2901 = _2750;
                    _2902 = _2752;
                    _2903 = _2754;
                    _2904 = _2756;
                    _2905 = _2758;
                    _2906 = _2760;
                    _2907 = _2908;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
        }
        uvec4 _2763 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2764 = _2763.z;
        uint _2766 = (_2764 >> 8u) & 15u;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        if (((4294967295u << _2766) & _2667) == 0u)
        {
            _2869 = _2749;
            _2871 = _2751;
            _2873 = _2753;
            _2875 = _2755;
            _2877 = _2757;
            _2879 = _2759;
        }
        else
        {
            float _2894 = inversesqrt(dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728)));
            float _2895 = _2894 * _1726;
            float _2896 = _2894 * _1727;
            float _2897 = _2894 * _1728;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2766 < ((_2764 >> 12u) & 15u))
            {
                float _2870;
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _3029 = _2749;
                float _3030 = _2751;
                float _3031 = _2753;
                float _3032 = _2755;
                float _3033 = _2757;
                float _3034 = _2759;
                uint _3035 = _2766;
                uint _3044;
                bool _3045;
                for (;;)
                {
                    _3044 = texelFetch(g_lightClassification, int((((_2661 << 5u) + (_2647 << 9u)) + (_3035 << 2u)) >> 2u)).x;
                    _3045 = _3044 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3045)
                    {
                        frontier_phi_84_pred = _3033;
                        frontier_phi_84_pred_1 = _3032;
                        frontier_phi_84_pred_2 = _3031;
                        frontier_phi_84_pred_3 = _3030;
                        frontier_phi_84_pred_4 = _3029;
                        frontier_phi_84_pred_5 = _3034;
                    }
                    else
                    {
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3250 = _3029;
                        float _3251 = _3030;
                        float _3252 = _3031;
                        float _3253 = _3032;
                        float _3254 = _3033;
                        float _3255 = _3034;
                        uint _3256 = _3044;
                        uint _3257;
                        vec4 _3282;
                        float _3283;
                        vec4 _3298;
                        vec3 _3310;
                        vec4 _3326;
                        vec4 _3341;
                        float _3388;
                        bool _3389;
                        for (;;)
                        {
                            uint _3267 = ((_3035 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3256));
                            _3257 = (_3256 + 4294967295u) & _3256;
                            uint _3269 = _3267 * 40u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            _3283 = _3282.w;
                            uint _3285 = (_3267 * 40u) + 4u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3300 = (_3267 * 40u) + 8u;
                            _3310 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x));
                            uint _3313 = (_3267 * 40u) + 16u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3267 * 40u) + 20u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3344 = (_3267 * 40u) + 24u;
                            vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3363 = (_3267 * 40u) + 28u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3388 = fma(_1728, _3376.z, fma(_1727, _3376.y, _3376.x * _1726)) + _3376.w;
                            _3389 = !((fma(_1728, _3357.z, fma(_1727, _3357.y, _3357.x * _1726)) + _3357.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3389)
                            {
                                float _3416 = _3282.x - _1726;
                                float _3417 = _3282.y - _1727;
                                float _3418 = _3282.z - _1728;
                                float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                                float _3422 = inversesqrt(_3419);
                                float _3423 = _3422 * _3416;
                                float _3424 = _3422 * _3417;
                                float _3425 = _3422 * _3418;
                                float _3429 = 1.0 - (_3419 / (_3283 * _3283));
                                float _4576 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3434 = sqrt(_3419) * _3298.w;
                                float _3436 = 1.39999997615814208984375 / (_3434 + 1.39999997615814208984375);
                                float _3437 = _3436 * _3436;
                                float _3440 = ((1.0 - _3437) * dot(vec3(_3423, _3424, _3425), vec3(_555, _558, _561))) + _3437;
                                float _3443 = _3434 * _3434;
                                float _3447 = (fma(_1728, _3326.z, fma(_1727, _3326.y, _3326.x * _1726)) + _3326.w) / _3388;
                                float _3448 = (fma(_1728, _3341.z, fma(_1727, _3341.y, _3341.x * _1726)) + _3341.w) / _3388;
                                float _3452 = 1.0 - dot(vec2(_3447, _3448), vec2(_3447, _3448));
                                float _4592 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3454 = _3453 * (((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3430) / ((_3443 * 0.699999988079071044921875) + 1.0));
                                float _3466 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                                float _3467 = 1.0 - _631;
                                float _3474 = sqrt(1.0 - ((1.0 - (_3467 * _3467)) * (1.0 - (_3466 * _3466))));
                                float _3475 = _3474 * _3474;
                                float _3476 = _3475 * _3475;
                                float _3477 = _3423 - _2895;
                                float _3478 = _3424 - _2896;
                                float _3479 = _3425 - _2897;
                                float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                                float _3487 = dot(vec3(_555, _558, _561), vec3((-0.0) - _2895, (-0.0) - _2896, (-0.0) - _2897));
                                float _4603 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3491 = dot(vec3(_555, _558, _561), vec3(_3483 * _3477, _3483 * _3478, _3483 * _3479));
                                float _4614 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3498 = ((_3494 * _3494) * (_3476 + (-1.0))) + 1.0;
                                float _3499 = _3436 * _3475;
                                float _3500 = _3499 * _3499;
                                float _3506 = ((1.0 - _3500) * dot(vec3(_555, _558, _561), vec3(_3423, _3424, _3425))) + _3500;
                                float _4625 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3508 = 1.0 - _3475;
                                float _3518 = (0.5 / (((_3507 * ((_3490 * _3508) + _3475)) + 9.9999999392252902907785028219223e-09) + (((_3507 * _3508) + _3475) * _3490))) * _3507;
                                float _4636 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3528 = (_3453 * _3430) * (((_3476 * 3.1415927410125732421875) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) / ((_3498 * _3498) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3454 * _3298.y;
                                frontier_phi_90_pred_1 = _3454 * _3298.x;
                                frontier_phi_90_pred_2 = _3528 * _3310.z;
                                frontier_phi_90_pred_3 = _3528 * _3310.y;
                                frontier_phi_90_pred_4 = _3528 * _3310.x;
                                frontier_phi_90_pred_5 = _3454 * _3298.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3536 = frontier_phi_90_pred;
                            _3535 = frontier_phi_90_pred_1;
                            _3534 = frontier_phi_90_pred_2;
                            _3533 = frontier_phi_90_pred_3;
                            _3532 = frontier_phi_90_pred_4;
                            _3537 = frontier_phi_90_pred_5;
                            _3240 = _3535 + _3253;
                            _3241 = _3536 + _3254;
                            _3242 = _3537 + _3255;
                            _3237 = _3532 + _3250;
                            _3238 = _3533 + _3251;
                            _3239 = _3534 + _3252;
                            if (_3257 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3257;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3241;
                        frontier_phi_84_pred_1 = _3240;
                        frontier_phi_84_pred_2 = _3239;
                        frontier_phi_84_pred_3 = _3238;
                        frontier_phi_84_pred_4 = _3237;
                        frontier_phi_84_pred_5 = _3242;
                    }
                    _2878 = frontier_phi_84_pred;
                    _2876 = frontier_phi_84_pred_1;
                    _2874 = frontier_phi_84_pred_2;
                    _2872 = frontier_phi_84_pred_3;
                    _2870 = frontier_phi_84_pred_4;
                    _2880 = frontier_phi_84_pred_5;
                    uint _3036 = _3035 + 1u;
                    if (_3036 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3029 = _2870;
                        _3030 = _2872;
                        _3031 = _2874;
                        _3032 = _2876;
                        _3033 = _2878;
                        _3034 = _2880;
                        _3035 = _3036;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2880;
                frontier_phi_65_66_ladder_1 = _2876;
                frontier_phi_65_66_ladder_2 = _2878;
                frontier_phi_65_66_ladder_3 = _2872;
                frontier_phi_65_66_ladder_4 = _2870;
                frontier_phi_65_66_ladder_5 = _2874;
            }
            else
            {
                frontier_phi_65_66_ladder = _2759;
                frontier_phi_65_66_ladder_1 = _2755;
                frontier_phi_65_66_ladder_2 = _2757;
                frontier_phi_65_66_ladder_3 = _2751;
                frontier_phi_65_66_ladder_4 = _2749;
                frontier_phi_65_66_ladder_5 = _2753;
            }
            _2869 = frontier_phi_65_66_ladder_4;
            _2871 = frontier_phi_65_66_ladder_3;
            _2873 = frontier_phi_65_66_ladder_5;
            _2875 = frontier_phi_65_66_ladder_1;
            _2877 = frontier_phi_65_66_ladder_2;
            _2879 = frontier_phi_65_66_ladder;
        }
        float _2884 = isnan(1.0) ? _615 : (isnan(_615) ? 1.0 : min(_615, 1.0));
        _2679 = (_2884 * _2875) + _2192;
        _2681 = (_2884 * _2877) + _2194;
        _2683 = (_2884 * _2879) + _2196;
        _2685 = ((_2869 * _600) * _2884) + _2530;
        _2687 = ((_2871 * _602) * _2884) + _2532;
        _2689 = ((_2873 * _603) * _2884) + _2534;
    }
    else
    {
        _2679 = _2192;
        _2681 = _2194;
        _2683 = _2196;
        _2685 = _2530;
        _2687 = _2532;
        _2689 = _2534;
    }
    float _4652 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4663 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4674 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _2706 = ((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2679 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _615))) + ((_2685 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1456)) * cbPerFrame._m0[3u].x);
    float _2707 = ((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2681 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _615))) + ((_2687 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1456)) * cbPerFrame._m0[3u].x);
    float _2708 = ((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2683 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _615))) + ((_2689 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1456)) * cbPerFrame._m0[3u].x);
    float _2709 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2710 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2711 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    uint _2712 = _574 + 6u;
    float _2720 = _535 / cbSceneParam._m0[86u].x;
    float _2721 = _536 / cbSceneParam._m0[86u].y;
    vec4 _2735 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2720, _2721, (log2((isnan(cbSceneParam._m0[77u].w) ? _455 : (isnan(_455) ? cbSceneParam._m0[77u].w : min(_455, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2737 = _2735.x;
    float _2738 = _2735.y;
    float _2739 = _2735.z;
    float _2740 = _2735.w;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    if (_455 > cbSceneParam._m0[78u].w)
    {
        float _2774 = isnan(_455) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _455 : min(cbSceneParam._m0[80u].w, _455));
        float _2775 = _2774 / _455;
        float _2786 = _2775 * _508;
        float _2787 = _509 * _2775;
        float _2788 = (-0.0) - _2787;
        float _2789 = _2775 * _510;
        float _2791 = (cbSceneParam._m0[77u].w * _2788) / _2774;
        float _2792 = _2791 + cbSceneParam._m0[79u].w;
        float _2793 = cbSceneParam._m0[79u].w - _2787;
        float _2799 = sqrt(((_2786 * _2786) + (_2787 * _2787)) + (_2789 * _2789));
        float _2802 = (1.0 - (cbSceneParam._m0[77u].w / _2774)) * _2799;
        float _2807 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2809 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2986;
        if (abs((_2788 - _2791) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2986 = ((((_2792 > 0.0) ? exp2(_2807 * _2792) : (2.0 - exp2(_2809 * _2792))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2802;
        }
        else
        {
            float _2930 = 1.0 / cbSceneParam._m0[80u].x;
            float _2931 = isnan(_2793) ? _2792 : (isnan(_2792) ? _2793 : max(_2792, _2793));
            float _2932 = isnan(_2793) ? _2792 : (isnan(_2792) ? _2793 : min(_2792, _2793));
            float _2941 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : min(_2931, 0.0));
            float _2942 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : min(_2932, 0.0));
            _2986 = ((abs(_2799 / _2788) * cbSceneParam._m0[80u].y) * ((((_2941 - _2942) * 2.0) - ((exp2(_2807 * (isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0)))) - exp2(_2807 * (isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0))))) * _2930)) - ((exp2(_2809 * _2941) - exp2(_2809 * _2942)) * _2930))) + (_2802 * cbSceneParam._m0[80u].z);
        }
        vec4 _2988 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2720, _2721, 1.0), 0.0);
        float _2997 = exp2((_2986 * (-1.44269502162933349609375)) * (1.0 - _2988.w));
        float _2998 = log2(_2997);
        float _3014 = log2(_2740);
        _2811 = (exp2(_3014 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].x)) * _2988.x) / cbSceneParam._m0[78u].x)) + _2737;
        _2813 = (exp2(_3014 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].y)) * _2988.y) / cbSceneParam._m0[78u].y)) + _2738;
        _2815 = (exp2(_3014 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].z)) * _2988.z) / cbSceneParam._m0[78u].z)) + _2739;
        _2817 = _2997 * _2740;
    }
    else
    {
        _2811 = _2737;
        _2813 = _2738;
        _2815 = _2739;
        _2817 = _2740;
    }
    bool _3024;
    vec4 _2827;
    vec4 _2849;
    float _2851;
    float _2855;
    float _2856;
    float _2857;
    float _2858;
    bool _2868;
    for (;;)
    {
        _2827 = cbMatDynParam._m0[0u];
        float _2829 = roundEven(_2827.y);
        bool _2830 = _2829 == 3.0;
        float _2831 = log2(_2817);
        float _2838 = exp2(_2831 * cbSceneParam._m0[78u].x) * _2709;
        float _2839 = exp2(_2831 * cbSceneParam._m0[78u].y) * _2710;
        float _2840 = exp2(_2831 * cbSceneParam._m0[78u].z) * _2711;
        float _2847 = _524 + (-0.5);
        _2849 = cbMtdParam._m0[1u];
        _2851 = _2849.y * _2847;
        float _2854 = (_2829 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2855 = _2854 * (_2830 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2811)));
        _2856 = _2854 * (_2830 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2813)));
        _2857 = _2854 * (_2830 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2815)));
        _2858 = _2847 * 0.999000012874603271484375;
        _2868 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2868)
        {
            if ((cbInstanceData._m0[_574 + 7u].x + _2858) < 0.5)
            {
                _3024 = true;
                break;
            }
        }
        uint _2965 = _576 + uint(_2827.w);
        if ((cbInstanceData._m0[_2965].w < 1.0) && ((cbInstanceData._m0[_2965].w + _2858) < 0.5))
        {
            _3024 = true;
            break;
        }
        if ((_2851 + 1.0) < _2849.x)
        {
            _3024 = true;
            break;
        }
        _3024 = false;
        break;
    }
    float _3228;
    if (_3024)
    {
        discard_state = true;
        _3228 = 0.0;
    }
    else
    {
        _3228 = cbInstanceData._m0[_2712].w;
    }
    SV_Target.x = _2855;
    SV_Target.y = _2856;
    SV_Target.z = _2857;
    SV_Target.w = _3228;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2712].w;
    discard_exit();
}


