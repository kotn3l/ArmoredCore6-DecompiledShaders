#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[21];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1016;
float _3429;
float _3430;
float _3431;
float _3432;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225;
    float _226;
    float _227;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
    }
    else
    {
        _225 = _211;
        _226 = _212;
        _227 = _213;
    }
    vec4 _253 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _259 = _253.x * cbMatDynParam._m0[17u].x;
    float _260 = _253.y * cbMatDynParam._m0[17u].y;
    float _261 = _253.z * cbMatDynParam._m0[17u].z;
    vec4 _280 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _313 = (TEXCOORD_7.x - ((cbMatDynParam._m0[19u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMatDynParam._m0[19u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMatDynParam._m0[19u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMatDynParam._m0[19u].y * TEXCOORD.w) + 1.0);
    float _3441 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _321 = (_314 * ((_280.x * cbMatDynParam._m0[18u].x) - _259)) + _259;
    float _322 = (_314 * ((_280.y * cbMatDynParam._m0[18u].y) - _260)) + _260;
    float _323 = (_314 * ((_280.z * cbMatDynParam._m0[18u].z) - _261)) + _261;
    float _340 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_5) + cbTextureTilingScale._m0[5u].w)).x + cbMatDynParam._m0[19u].w;
    float _363 = (((cbMatDynParam._m0[20u].x - _340) + texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_5) + cbTextureTilingScale._m0[6u].w)).x) * _314) + _340;
    vec4 _375 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _377 = _375.x;
    float _378 = _375.y;
    float _379 = _375.z;
    vec4 _391 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _404 = ((_391.z - _379) * _314) + _379;
    float _408 = ((((_391.x - _377) * _314) + _377) * 2.0) + (-1.0);
    float _410 = ((((_391.y - _378) * _314) + _378) * 2.0) + (-1.0);
    float _411 = dot(vec2(_408, _410), vec2(_408, _410));
    float _3452 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _416 = sqrt(1.0 - (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))));
    float _419 = fma(_416, _225, fma(_410, _217 * TANGENT.x, (_203 * _195) * _408));
    float _422 = fma(_416, _226, fma(_410, _217 * TANGENT.y, (_203 * _196) * _408));
    float _425 = fma(_416, _227, fma(_410, _217 * TANGENT.z, (_203 * _197) * _408));
    float _429 = inversesqrt(dot(vec3(_419, _422, _425), vec3(_419, _422, _425)));
    float _430 = _429 * _419;
    float _431 = _429 * _422;
    float _432 = _429 * _425;
    float _3463 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _433 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3485 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3496 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3507 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _437 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _453 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _506 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _496);
    float _507 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _496);
    float _508 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _496);
    float _512 = inversesqrt(dot(vec3(_506, _507, _508), vec3(_506, _507, _508)));
    float _513 = _506 * _512;
    float _514 = _507 * _512;
    float _515 = _508 * _512;
    vec4 _520 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _522 = _520.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _696 = sqrt(((_506 * _506) + (_507 * _507)) + (_508 * _508));
        float _702 = (cbMatDynParam._m0[5u].x * _696) + cbMatDynParam._m0[5u].y;
        float _3518 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _707 = (cbMatDynParam._m0[5u].z * _696) + cbMatDynParam._m0[5u].w;
        float _3529 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) - _703)) + _703) < ((_522 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _533 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _534 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _553 = fma(_432, cbSceneParam._m0[5u].z, fma(_431, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _430));
    float _556 = fma(_432, cbSceneParam._m0[6u].z, fma(_431, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _430));
    float _559 = fma(_432, cbSceneParam._m0[7u].z, fma(_431, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _430));
    uint _572 = uint(roundEven(NORMAL.w)) * 13u;
    uint _574 = _572 + 9u;
    uint _575 = _574 + uint(cbMatDynParam._m0[0u].w);
    float _581 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_575].x;
    float _582 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * cbInstanceData._m0[_575].y;
    float _583 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * cbInstanceData._m0[_575].z;
    float _3540 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _587 = 1.0 - _437;
    float _588 = _584 * _587;
    float _589 = _585 * _587;
    float _590 = _586 * _587;
    float _595 = (_584 + (-0.039999999105930328369140625)) * _437;
    float _596 = (_585 + (-0.039999999105930328369140625)) * _437;
    float _597 = (_586 + (-0.039999999105930328369140625)) * _437;
    float _598 = _595 + 0.039999999105930328369140625;
    float _600 = _596 + 0.039999999105930328369140625;
    float _601 = _597 + 0.039999999105930328369140625;
    vec4 _610 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _533, cbSceneParam._m0[86u].y * _534));
    float _613 = _610.x * TEXCOORD_7.w;
    float _614 = dot(vec3(_430, _431, _432), vec3(_513, _514, _515));
    float _617 = _614 * 2.0;
    float _621 = (_617 * _430) - _513;
    float _622 = (_617 * _431) - _514;
    float _623 = (_617 * _432) - _515;
    float _627 = abs(dot(vec3(_513, _514, _515), vec3(_430, _431, _432)));
    float _3573 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _629 = sqrt(_433);
    float _642 = exp2((_629 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_629 * 3.0));
    float _648 = (1.0 - _642) * ((_629 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _649 = _642 * _629;
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1015;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _740 = fma(_685, cbModelParam._m0[26u].z, fma(_681, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _677));
        float _744 = fma(_685, cbModelParam._m0[27u].z, fma(_681, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _677));
        float _748 = fma(_685, cbModelParam._m0[28u].z, fma(_681, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _677));
        float _773 = _677 + _430;
        float _774 = _681 + _431;
        float _775 = _685 + _432;
        float _785 = fma(_775, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _773)) - _740;
        float _786 = fma(_775, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _773)) - _744;
        float _787 = fma(_775, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _773)) - _748;
        float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
        float _804 = ((_791 * _785) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_740 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _805 = ((_791 * _786) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_744 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_791 * _787) / cbModelParam._m0[34u].z) + ((((((_748 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        float _843 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_809.x + (-0.5));
        float _845 = _843 * (_809.y + (-0.5));
        float _846 = _843 * (_809.z + (-0.5));
        float _853 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_816.x + (-0.5));
        float _855 = _853 * (_816.y + (-0.5));
        float _856 = _853 * (_816.z + (-0.5));
        float _863 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_823.x + (-0.5));
        float _865 = _863 * (_823.y + (-0.5));
        float _866 = _863 * (_823.z + (-0.5));
        float _873 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_830.x + (-0.5));
        float _875 = _873 * (_830.y + (-0.5));
        float _876 = _873 * (_830.z + (-0.5));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = _844 * 0.5;
        float _881 = _854 * 0.5;
        float _882 = _864 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _897 = (dot(vec3(_430, _431, _432), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _907 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3621 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_909 + 1.0))) + _914) * _877;
        float _924 = _845 * 0.5;
        float _925 = _855 * 0.5;
        float _926 = _865 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_430, _431, _432), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3654 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_951 + 1.0))) + _956) * _878;
        float _966 = _846 * 0.5;
        float _967 = _856 * 0.5;
        float _968 = _866 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_430, _431, _432), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3687 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_993 + 1.0))) + _998) * _879;
        _1015 = _846;
        _1017 = _845;
        _1018 = _844;
        _1019 = _856;
        _1020 = _855;
        _1021 = _854;
        _1022 = _866;
        _1023 = _865;
        _1024 = _864;
        _1025 = _879;
        _1026 = _878;
        _1027 = _877;
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
    }
    else
    {
        _1015 = _1016;
        _1017 = _1016;
        _1018 = _1016;
        _1019 = _1016;
        _1020 = _1016;
        _1021 = _1016;
        _1022 = _1016;
        _1023 = _1016;
        _1024 = _1016;
        _1025 = _1016;
        _1026 = _1016;
        _1027 = _1016;
        _1028 = 0.0;
        _1029 = 0.0;
        _1030 = 0.0;
    }
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1059 = fma(_685, cbModelParam._m0[30u].z, fma(_681, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _677));
        float _1063 = fma(_685, cbModelParam._m0[31u].z, fma(_681, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _677));
        float _1067 = fma(_685, cbModelParam._m0[32u].z, fma(_681, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _677));
        float _1090 = _677 + _430;
        float _1091 = _681 + _431;
        float _1092 = _685 + _432;
        float _1102 = fma(_1092, cbModelParam._m0[30u].z, fma(_1091, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1090)) - _1059;
        float _1103 = fma(_1092, cbModelParam._m0[31u].z, fma(_1091, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1090)) - _1063;
        float _1104 = fma(_1092, cbModelParam._m0[32u].z, fma(_1091, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1090)) - _1067;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1059 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1063 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[35u].z) + ((((((_1067 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1158 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1125.x + (-0.5));
        float _1160 = _1158 * (_1125.y + (-0.5));
        float _1161 = _1158 * (_1125.z + (-0.5));
        float _1168 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1132.x + (-0.5));
        float _1170 = _1168 * (_1132.y + (-0.5));
        float _1171 = _1168 * (_1132.z + (-0.5));
        float _1178 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1139.x + (-0.5));
        float _1180 = _1178 * (_1139.y + (-0.5));
        float _1181 = _1178 * (_1139.z + (-0.5));
        float _1188 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1146.x + (-0.5));
        float _1190 = _1188 * (_1146.y + (-0.5));
        float _1191 = _1188 * (_1146.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_430, _431, _432), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3750 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1222 + 1.0))) + _1227) * _1192;
        float _1237 = _1160 * 0.5;
        float _1238 = _1170 * 0.5;
        float _1239 = _1180 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_430, _431, _432), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3783 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1264 + 1.0))) + _1269) * _1193;
        float _1279 = _1161 * 0.5;
        float _1280 = _1171 * 0.5;
        float _1281 = _1181 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_430, _431, _432), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3816 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1306 + 1.0))) + _1311) * _1194;
        _1328 = _1161;
        _1329 = _1160;
        _1330 = _1159;
        _1331 = _1171;
        _1332 = _1170;
        _1333 = _1169;
        _1334 = _1181;
        _1335 = _1180;
        _1336 = _1179;
        _1337 = _1194;
        _1338 = _1193;
        _1339 = _1192;
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
    }
    else
    {
        _1328 = _1016;
        _1329 = _1016;
        _1330 = _1016;
        _1331 = _1016;
        _1332 = _1016;
        _1333 = _1016;
        _1334 = _1016;
        _1335 = _1016;
        _1336 = _1016;
        _1337 = _1016;
        _1338 = _1016;
        _1339 = _1016;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1028)) + _1028;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1029)) + _1029;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1030)) + _1030;
    float _1375 = fma(_1354, cbSceneParam._m0[89u].z, fma(_1353, cbSceneParam._m0[89u].y, _1352 * cbSceneParam._m0[89u].x));
    float _1378 = fma(_1354, cbSceneParam._m0[90u].z, fma(_1353, cbSceneParam._m0[90u].y, _1352 * cbSceneParam._m0[90u].x));
    float _1381 = fma(_1354, cbSceneParam._m0[91u].z, fma(_1353, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1352));
    float _1396 = _621 * 0.5;
    float _1397 = _622 * 0.5;
    float _1398 = _623 * 0.5;
    float _1399 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1402 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1405 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1439;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1412 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1015, _1019, _1022, _1025));
        float _1416 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1017, _1020, _1023, _1026));
        float _1420 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1018, _1021, _1024, _1027));
        float _1427 = dot(vec4(cbModelParam._m0[39u]), vec4(_1396, _1397, _1398, 1.0));
        _1439 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1439 = 1.0;
    }
    float _1450;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1441 = dot(vec4(cbModelParam._m0[40u]), vec4(_1396, _1397, _1398, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1441) ? 0.0 : (isnan(0.0) ? _1441 : max(0.0, _1441))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1454 = (_1450 * cbModelParam._m0[1u].x) + (_1439 * (1.0 - cbModelParam._m0[1u].x));
    float _1464 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _433);
    float _1465 = isnan(_1464) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1464 : min(cbModelParam._m0[25u].z, _1464));
    float _1547;
    float _1549;
    float _1551;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1514 = fma(_685, cbModelParam._m0[13u].z, fma(_681, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _677)) + cbModelParam._m0[13u].w;
        float _1518 = fma(_685, cbModelParam._m0[14u].z, fma(_681, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _677)) + cbModelParam._m0[14u].w;
        float _1522 = fma(_685, cbModelParam._m0[15u].z, fma(_681, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _677)) + cbModelParam._m0[15u].w;
        float _1525 = fma(_623, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _621));
        float _1528 = fma(_623, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _621));
        float _1531 = fma(_623, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _621));
        float _1559;
        if (_1525 > 0.0)
        {
            _1559 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1559 = frontier_phi_19_17_ladder;
        }
        float _1784;
        if (_1528 > 0.0)
        {
            _1784 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1784 = frontier_phi_28_24_ladder;
        }
        float _2041;
        if (_1531 > 0.0)
        {
            _2041 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2041 = frontier_phi_40_35_ladder;
        }
        float _2043 = isnan(_1784) ? _1559 : (isnan(_1559) ? _1784 : min(_1559, _1784));
        float _2044 = isnan(_2041) ? _2043 : (isnan(_2043) ? _2041 : min(_2043, _2041));
        float _2048 = (_2044 * _1525) + _1514;
        float _2049 = (_2044 * _1528) + _1518;
        float _2050 = (_2044 * _1531) + _1522;
        float _2051 = _2044 * 9.9999997473787516355514526367188e-05;
        float _2053 = (-1.0) - _2051;
        float _2055 = _2051 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2050 > _2055) || ((_2050 < _2053) || ((_2049 > _2055) || ((_2049 < _2053) || ((_2048 < _2053) || (_2048 > _2055))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2178 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2050, cbModelParam._m0[9u].z, fma(_2049, cbModelParam._m0[9u].y, _2048 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2050, cbModelParam._m0[10u].z, fma(_2049, cbModelParam._m0[10u].y, _2048 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2050, cbModelParam._m0[11u].z, fma(_2049, cbModelParam._m0[11u].y, _2048 * cbModelParam._m0[11u].x))), _1465);
            frontier_phi_18_40_ladder = _2178.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2178.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2178.x * cbModelParam._m0[1u].y;
        }
        _1547 = frontier_phi_18_40_ladder_2;
        _1549 = frontier_phi_18_40_ladder_1;
        _1551 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_621, _622, _623), _1465);
        _1547 = _1535.x * cbModelParam._m0[1u].y;
        _1549 = _1535.y * cbModelParam._m0[1u].y;
        _1551 = _1535.z * cbModelParam._m0[1u].y;
    }
    float _1555 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _433);
    float _1556 = isnan(_1555) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1555 : min(cbModelParam._m0[25u].w, _1555));
    float _1646;
    float _1648;
    float _1650;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1610 = fma(_685, cbModelParam._m0[21u].z, fma(_681, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _677)) + cbModelParam._m0[21u].w;
        float _1614 = fma(_685, cbModelParam._m0[22u].z, fma(_681, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _677)) + cbModelParam._m0[22u].w;
        float _1618 = fma(_685, cbModelParam._m0[23u].z, fma(_681, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _677)) + cbModelParam._m0[23u].w;
        float _1621 = fma(_623, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _621));
        float _1624 = fma(_623, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _621));
        float _1627 = fma(_623, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _621));
        float _1789;
        if (_1621 > 0.0)
        {
            _1789 = abs((1.0 - _1610) / _1621);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1610 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1789 = frontier_phi_30_26_ladder;
        }
        float _2068;
        if (_1624 > 0.0)
        {
            _2068 = abs((1.0 - _1614) / _1624);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1614 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2068 = frontier_phi_42_37_ladder;
        }
        float _2281;
        if (_1627 > 0.0)
        {
            _2281 = abs((1.0 - _1618) / _1627);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1618 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2281 = frontier_phi_51_48_ladder;
        }
        float _2283 = isnan(_2068) ? _1789 : (isnan(_1789) ? _2068 : min(_1789, _2068));
        float _2284 = isnan(_2281) ? _2283 : (isnan(_2283) ? _2281 : min(_2283, _2281));
        float _2288 = (_2284 * _1621) + _1610;
        float _2289 = (_2284 * _1624) + _1614;
        float _2290 = (_2284 * _1627) + _1618;
        float _2291 = _2284 * 9.9999997473787516355514526367188e-05;
        float _2292 = (-1.0) - _2291;
        float _2294 = _2291 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2290 > _2294) || ((_2290 < _2292) || ((_2289 > _2294) || ((_2289 < _2292) || ((_2288 < _2292) || (_2288 > _2294))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2491 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2290, cbModelParam._m0[17u].z, fma(_2289, cbModelParam._m0[17u].y, _2288 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2290, cbModelParam._m0[18u].z, fma(_2289, cbModelParam._m0[18u].y, _2288 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2290, cbModelParam._m0[19u].z, fma(_2289, cbModelParam._m0[19u].y, _2288 * cbModelParam._m0[19u].x))), _1556);
            frontier_phi_27_51_ladder = _2491.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2491.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2491.x * cbModelParam._m0[1u].z;
        }
        _1646 = frontier_phi_27_51_ladder_2;
        _1648 = frontier_phi_27_51_ladder_1;
        _1650 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1630 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_621, _622, _623), _1556);
        _1646 = _1630.x * cbModelParam._m0[1u].z;
        _1648 = _1630.y * cbModelParam._m0[1u].z;
        _1650 = _1630.z * cbModelParam._m0[1u].z;
    }
    float _1663 = (((_648 * _598) + _649) * _613) * ((cbModelParam._m0[1u].w * (_1646 - _1547)) + _1547);
    float _1665 = (((_648 * _600) + _649) * _613) * ((cbModelParam._m0[1u].w * (_1648 - _1549)) + _1549);
    float _1667 = (((_648 * _601) + _649) * _613) * ((cbModelParam._m0[1u].w * (_1650 - _1551)) + _1551);
    float _1670 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1663 * cbSceneParam._m0[89u].x));
    float _1673 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1663 * cbSceneParam._m0[90u].x));
    float _1676 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, _1663 * cbSceneParam._m0[91u].x));
    vec4 _1684 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_533, _534));
    float _1686 = _1684.w;
    float _1698 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1686);
    float _1699 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1686);
    float _1700 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1686);
    uvec4 _1704 = floatBitsToUint(cbInstanceData._m0[_572 + 5u]);
    uint _1706 = _1704.x * 14u;
    uint _1707 = _1706 + 13u;
    float _1714 = _613 + (-1.0);
    float _1719 = (cbLight._m0[_1707].x * _1714) + 1.0;
    float _1720 = (cbLight._m0[_1707].y * _1714) + 1.0;
    float _1721 = (cbLight._m0[_1707].z * _1714) + 1.0;
    float _1722 = (cbLight._m0[_1707].w * _1714) + 1.0;
    uint _1723 = _1706 + 5u;
    float _1729 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
    uint _1733 = _1706 + 4u;
    float _1742 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
    uint _1746 = _1706 | 1u;
    float _1757 = dot(vec3(cbLight._m0[_1706].xyz), vec3(_430, _431, _432));
    float _1760 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_430, _431, _432));
    float _3952 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _3963 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1765 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 0.3183098733425140380859375;
    float _1767 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 0.3183098733425140380859375;
    float _1774 = ((cbLight._m0[_1723].x * _1729) * _1767) + (((cbLight._m0[_1733].x * _1698) * _1742) * _1765);
    float _1775 = ((_1729 * cbLight._m0[_1723].y) * _1767) + (((cbLight._m0[_1733].y * _1699) * _1742) * _1765);
    float _1776 = ((_1729 * cbLight._m0[_1723].z) * _1767) + (((cbLight._m0[_1733].z * _1700) * _1742) * _1765);
    uvec4 _1781 = floatBitsToUint(cbLight._m0[_1706 + 12u]);
    bool _1783 = _1781.x == 0u;
    float _1794;
    float _1796;
    float _1798;
    if (_1783)
    {
        _1794 = _1774;
        _1796 = _1775;
        _1798 = _1776;
    }
    else
    {
        uint _1802 = _1706 + 6u;
        float _1818 = (dot(vec3(cbLight._m0[_1706 + 2u].xyz), vec3(_430, _431, _432)) * 0.5) + 0.5;
        float _1819 = _1818 * _1818;
        float _3974 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1821 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _1794 = (((cbLight._m0[_1802].x * 0.3183098733425140380859375) * _1820) * _1821) + _1774;
        _1796 = (((cbLight._m0[_1802].y * 0.3183098733425140380859375) * _1820) * _1821) + _1775;
        _1798 = (((cbLight._m0[_1802].z * 0.3183098733425140380859375) * _1820) * _1821) + _1776;
    }
    bool _1801 = _1781.y == 0u;
    float _1839;
    float _1841;
    float _1843;
    if (_1801)
    {
        _1839 = _1794;
        _1841 = _1796;
        _1843 = _1798;
    }
    else
    {
        uint _2012 = _1706 + 7u;
        float _2028 = (dot(vec3(cbLight._m0[_1706 + 3u].xyz), vec3(_430, _431, _432)) * 0.5) + 0.5;
        float _2029 = _2028 * _2028;
        float _3990 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2030 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2031 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _1839 = (((cbLight._m0[_2012].x * 0.3183098733425140380859375) * _2030) * _2031) + _1794;
        _1841 = (((cbLight._m0[_2012].y * 0.3183098733425140380859375) * _2030) * _2031) + _1796;
        _1843 = (((cbLight._m0[_2012].z * 0.3183098733425140380859375) * _2030) * _2031) + _1798;
    }
    uint _1846 = _1706 + 8u;
    float _1859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1706].w)) * _433) * 0.949999988079071044921875);
    float _1860 = _1859 * _1859;
    float _1861 = cbLight._m0[_1706].x + _513;
    float _1862 = cbLight._m0[_1706].y + _514;
    float _1863 = cbLight._m0[_1706].z + _515;
    float _1867 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
    float _1868 = _1867 * _1861;
    float _1869 = _1867 * _1862;
    float _1870 = _1867 * _1863;
    float _1871 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_1706].xyz));
    float _4006 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _1875 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1876 = dot(vec3(_430, _431, _432), vec3(_1868, _1869, _1870));
    float _4028 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1880 = dot(vec3(cbLight._m0[_1706].xyz), vec3(_1868, _1869, _1870));
    float _4039 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1884 = _1860 * _1860;
    float _1888 = ((_1879 * _1879) * (_1884 + (-1.0))) + 1.0;
    float _1896 = exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0);
    float _1897 = 0.959999978542327880859375 - _595;
    float _1899 = 0.959999978542327880859375 - _596;
    float _1900 = 0.959999978542327880859375 - _597;
    float _1907 = 1.0 - _1860;
    float _1918 = (0.5 / (((_1875 * ((_1874 * _1907) + _1860)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _1907) + _1860) * _1874))) * _1874;
    float _4050 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1920 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1884 / ((_1888 * _1888) * 3.141590118408203125));
    uint _1934 = _1706 + 9u;
    float _1945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1746].w)) * _433) * 0.949999988079071044921875);
    float _1946 = _1945 * _1945;
    float _1947 = cbLight._m0[_1746].x + _513;
    float _1948 = cbLight._m0[_1746].y + _514;
    float _1949 = cbLight._m0[_1746].z + _515;
    float _1953 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
    float _1954 = _1953 * _1947;
    float _1955 = _1953 * _1948;
    float _1956 = _1953 * _1949;
    float _1957 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_1746].xyz));
    float _4061 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _1961 = dot(vec3(_430, _431, _432), vec3(_1954, _1955, _1956));
    float _4072 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _1965 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_1954, _1955, _1956));
    float _4083 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1969 = _1946 * _1946;
    float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
    float _1980 = exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0);
    float _1987 = 1.0 - _1946;
    float _1997 = (0.5 / (((_1875 * ((_1960 * _1987) + _1946)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _1987) + _1946) * _1960))) * _1960;
    float _4094 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _1999 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
    float _2009 = (((((_1980 * _1897) + _598) * cbLight._m0[_1934].x) * _1999) * _1729) + ((((cbLight._m0[_1846].x * _1698) * ((_1896 * _1897) + _598)) * _1920) * _1742);
    float _2010 = (((((_1980 * _1899) + _600) * cbLight._m0[_1934].y) * _1999) * _1729) + ((((cbLight._m0[_1846].y * _1699) * ((_1896 * _1899) + _600)) * _1920) * _1742);
    float _2011 = (((((_1980 * _1900) + _601) * cbLight._m0[_1934].z) * _1999) * _1729) + ((((cbLight._m0[_1846].z * _1700) * ((_1896 * _1900) + _601)) * _1920) * _1742);
    float _2073;
    float _2075;
    float _2077;
    if (_1783)
    {
        _2073 = _2009;
        _2075 = _2010;
        _2077 = _2011;
    }
    else
    {
        uint _2079 = _1706 + 2u;
        uint _2083 = _1706 + 10u;
        float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _433) * 0.949999988079071044921875);
        float _2098 = _2097 * _2097;
        float _2099 = cbLight._m0[_2079].x + _513;
        float _2100 = cbLight._m0[_2079].y + _514;
        float _2101 = cbLight._m0[_2079].z + _515;
        float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
        float _2106 = _2105 * _2099;
        float _2107 = _2105 * _2100;
        float _2108 = _2105 * _2101;
        float _2109 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_2079].xyz));
        float _4105 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2112 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2113 = dot(vec3(_430, _431, _432), vec3(_2106, _2107, _2108));
        float _4116 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2116 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2117 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2106, _2107, _2108));
        float _4127 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2121 = _2098 * _2098;
        float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
        float _2132 = exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0);
        float _2139 = 1.0 - _2098;
        float _2149 = (0.5 / (((_1875 * ((_2112 * _2139) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _2139) + _2098) * _2112))) * _2112;
        float _4138 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2151 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
        float _2152 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _2073 = (((((_2132 * _1897) + _598) * cbLight._m0[_2083].x) * _2151) * _2152) + _2009;
        _2075 = (((((_2132 * _1899) + _600) * cbLight._m0[_2083].y) * _2151) * _2152) + _2010;
        _2077 = (((((_2132 * _1900) + _601) * cbLight._m0[_2083].z) * _2151) * _2152) + _2011;
    }
    float _2187;
    float _2189;
    float _2191;
    if (_1801)
    {
        _2187 = _2073;
        _2189 = _2075;
        _2191 = _2077;
    }
    else
    {
        uint _2198 = _1706 + 3u;
        uint _2202 = _1706 + 11u;
        float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _433) * 0.949999988079071044921875);
        float _2217 = _2216 * _2216;
        float _2218 = cbLight._m0[_2198].x + _513;
        float _2219 = cbLight._m0[_2198].y + _514;
        float _2220 = cbLight._m0[_2198].z + _515;
        float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
        float _2225 = _2224 * _2218;
        float _2226 = _2224 * _2219;
        float _2227 = _2224 * _2220;
        float _2228 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_2198].xyz));
        float _4154 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2232 = dot(vec3(_430, _431, _432), vec3(_2225, _2226, _2227));
        float _4165 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2235 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2236 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2225, _2226, _2227));
        float _4176 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2240 = _2217 * _2217;
        float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
        float _2251 = exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0);
        float _2258 = 1.0 - _2217;
        float _2268 = (0.5 / (((_1875 * ((_2231 * _2258) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _2258) + _2217) * _2231))) * _2231;
        float _4187 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2270 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
        float _2271 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _2187 = (((((_2251 * _1897) + _598) * cbLight._m0[_2202].x) * _2270) * _2271) + _2073;
        _2189 = (((((_2251 * _1899) + _600) * cbLight._m0[_2202].y) * _2270) * _2271) + _2075;
        _2191 = (((((_2251 * _1900) + _601) * cbLight._m0[_2202].z) * _2270) * _2271) + _2077;
    }
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    if (_1704.y == 0u)
    {
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2347 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2346;
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2346;
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2346;
        uvec4 _2361 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2362 = _2361.x;
        uint _2373 = uint((float(_2361.y) * floor(float(uint(cbSceneParam._m0[85u].y * _534) / _2362))) + floor(float(uint(cbSceneParam._m0[85u].x * _533) / _2362)));
        float _2383 = (log2(_2349 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2384 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        uint _2387 = uint(isnan(14.0) ? _2384 : (isnan(_2384) ? 14.0 : min(_2384, 14.0)));
        uvec4 _2392 = texelFetch(g_lightClusterGridBuffer, int(((_2387 << 2u) + (_2373 << 6u)) >> 2u));
        uint _2393 = _2392.x;
        uint _2394 = _2361.z;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        if (((((1u << ((_2394 >> 4u) & 15u)) + 4294967295u) & _2393) == 0u) || ((_2394 & 240u) == 0u))
        {
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
        }
        else
        {
            float _2497;
            float _2499;
            float _2501;
            float _2503;
            float _2505;
            float _2507;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            uint _2654 = 0u;
            uint _2663;
            bool _2664;
            for (;;)
            {
                _2663 = texelFetch(g_lightClassification, int((((_2387 << 5u) + (_2373 << 9u)) + (_2654 << 2u)) >> 2u)).x;
                _2664 = _2663 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2664)
                {
                    frontier_phi_68_pred = _2650;
                    frontier_phi_68_pred_1 = _2653;
                    frontier_phi_68_pred_2 = _2652;
                    frontier_phi_68_pred_3 = _2651;
                    frontier_phi_68_pred_4 = _2649;
                    frontier_phi_68_pred_5 = _2648;
                }
                else
                {
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    uint _2799;
                    _2793 = _2648;
                    _2794 = _2649;
                    _2795 = _2650;
                    _2796 = _2651;
                    _2797 = _2652;
                    _2798 = _2653;
                    _2799 = _2663;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    for (;;)
                    {
                        uint _2803 = uint(findLSB(_2799)) + (_2654 << 5u);
                        uint _2800 = (_2799 + 4294967295u) & _2799;
                        uint _2805 = _2803 * 48u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 3u)).x));
                        uint _2825 = (_2803 * 48u) + 4u;
                        vec4 _2838 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2844 = (_2803 * 48u) + 8u;
                        vec3 _2855 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x));
                        float _2859 = _2819.x - _2347;
                        float _2860 = _2819.y - _2348;
                        float _2861 = _2819.z - _2349;
                        float _2862 = dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861));
                        float _2865 = inversesqrt(_2862);
                        float _2866 = _2865 * _2859;
                        float _2867 = _2865 * _2860;
                        float _2868 = _2865 * _2861;
                        float _2869 = dot(vec3(_553, _556, _559), vec3(_2866, _2867, _2868));
                        float _2874 = 1.0 - (_2862 * _2819.w);
                        float _4213 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2876 = sqrt(_2862) * _2838.w;
                        float _2879 = 1.39999997615814208984375 / (_2876 + 1.39999997615814208984375);
                        float _2880 = _2879 * _2879;
                        float _2883 = ((1.0 - _2880) * _2869) + _2880;
                        float _2886 = _2876 * _2876;
                        float _2890 = ((isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))) * _2875) / ((_2886 * 0.699999988079071044921875) + 1.0);
                        float _2894 = (-0.0) - _2347;
                        float _2895 = (-0.0) - _2348;
                        float _2896 = (-0.0) - _2349;
                        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
                        float _2901 = _2900 * _2894;
                        float _2902 = _2900 * _2895;
                        float _2903 = _2900 * _2896;
                        float _2911 = exp2(log2(1.0 / ((_2886 * 3.5) + 5.0)) * 0.25);
                        float _2912 = 1.0 - _629;
                        float _2919 = sqrt(1.0 - ((1.0 - (_2912 * _2912)) * (1.0 - (_2911 * _2911))));
                        float _2920 = _2919 * _2919;
                        float _2921 = _2920 * _2920;
                        float _2922 = _2901 + _2866;
                        float _2923 = _2902 + _2867;
                        float _2924 = _2903 + _2868;
                        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
                        float _2932 = dot(vec3(_553, _556, _559), vec3(_2901, _2902, _2903));
                        float _4229 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2936 = dot(vec3(_553, _556, _559), vec3(_2928 * _2922, _2928 * _2923, _2928 * _2924));
                        float _4240 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2943 = ((_2939 * _2939) * (_2921 + (-1.0))) + 1.0;
                        float _2944 = _2879 * _2920;
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2869) + _2945;
                        float _4251 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2950 = 1.0 - _2920;
                        float _2960 = (0.5 / (((_2949 * ((_2935 * _2950) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2949 * _2950) + _2920) * _2935))) * _2949;
                        float _4262 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2971 = (((_2921 * 3.1415927410125732421875) * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) / ((_2943 * _2943) * ((_2886 * 2.1991131305694580078125) + 3.141590118408203125))) * _2875;
                        _2723 = (_2890 * _2838.x) + _2796;
                        _2724 = (_2890 * _2838.y) + _2797;
                        _2725 = (_2890 * _2838.z) + _2798;
                        _2720 = (_2971 * _2855.x) + _2793;
                        _2721 = (_2971 * _2855.y) + _2794;
                        _2722 = (_2971 * _2855.z) + _2795;
                        if (_2800 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2793 = _2720;
                            _2794 = _2721;
                            _2795 = _2722;
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2725;
                            _2799 = _2800;
                        }
                    }
                    frontier_phi_68_pred = _2722;
                    frontier_phi_68_pred_1 = _2725;
                    frontier_phi_68_pred_2 = _2724;
                    frontier_phi_68_pred_3 = _2723;
                    frontier_phi_68_pred_4 = _2721;
                    frontier_phi_68_pred_5 = _2720;
                }
                _2501 = frontier_phi_68_pred;
                _2507 = frontier_phi_68_pred_1;
                _2505 = frontier_phi_68_pred_2;
                _2503 = frontier_phi_68_pred_3;
                _2499 = frontier_phi_68_pred_4;
                _2497 = frontier_phi_68_pred_5;
                uint _2655 = _2654 + 1u;
                if (_2655 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2648 = _2497;
                    _2649 = _2499;
                    _2650 = _2501;
                    _2651 = _2503;
                    _2652 = _2505;
                    _2653 = _2507;
                    _2654 = _2655;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
        }
        uvec4 _2510 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2511 = _2510.z;
        uint _2513 = (_2511 >> 8u) & 15u;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        if (((4294967295u << _2513) & _2393) == 0u)
        {
            _2616 = _2496;
            _2618 = _2498;
            _2620 = _2500;
            _2622 = _2502;
            _2624 = _2504;
            _2626 = _2506;
        }
        else
        {
            float _2641 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
            float _2642 = _2641 * _2347;
            float _2643 = _2641 * _2348;
            float _2644 = _2641 * _2349;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2513 < ((_2511 >> 12u) & 15u))
            {
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2627;
                float _2776 = _2496;
                float _2777 = _2498;
                float _2778 = _2500;
                float _2779 = _2502;
                float _2780 = _2504;
                float _2781 = _2506;
                uint _2782 = _2513;
                uint _2791;
                bool _2792;
                for (;;)
                {
                    _2791 = texelFetch(g_lightClassification, int((((_2387 << 5u) + (_2373 << 9u)) + (_2782 << 2u)) >> 2u)).x;
                    _2792 = _2791 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2792)
                    {
                        frontier_phi_79_pred = _2781;
                        frontier_phi_79_pred_1 = _2780;
                        frontier_phi_79_pred_2 = _2779;
                        frontier_phi_79_pred_3 = _2778;
                        frontier_phi_79_pred_4 = _2777;
                        frontier_phi_79_pred_5 = _2776;
                    }
                    else
                    {
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _2998 = _2776;
                        float _2999 = _2777;
                        float _3000 = _2778;
                        float _3001 = _2779;
                        float _3002 = _2780;
                        float _3003 = _2781;
                        uint _3004 = _2791;
                        uint _3005;
                        vec4 _3030;
                        float _3031;
                        vec4 _3046;
                        vec3 _3058;
                        vec4 _3074;
                        vec4 _3089;
                        float _3136;
                        bool _3137;
                        for (;;)
                        {
                            uint _3015 = ((_2782 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3004));
                            _3005 = (_3004 + 4294967295u) & _3004;
                            uint _3017 = _3015 * 40u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            _3031 = _3030.w;
                            uint _3033 = (_3015 * 40u) + 4u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3048 = (_3015 * 40u) + 8u;
                            _3058 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x));
                            uint _3061 = (_3015 * 40u) + 16u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3076 = (_3015 * 40u) + 20u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3092 = (_3015 * 40u) + 24u;
                            vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3111 = (_3015 * 40u) + 28u;
                            vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            _3136 = fma(_2349, _3124.z, fma(_2348, _3124.y, _3124.x * _2347)) + _3124.w;
                            _3137 = !((fma(_2349, _3105.z, fma(_2348, _3105.y, _3105.x * _2347)) + _3105.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3137)
                            {
                                float _3164 = _3030.x - _2347;
                                float _3165 = _3030.y - _2348;
                                float _3166 = _3030.z - _2349;
                                float _3167 = dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166));
                                float _3170 = inversesqrt(_3167);
                                float _3171 = _3170 * _3164;
                                float _3172 = _3170 * _3165;
                                float _3173 = _3170 * _3166;
                                float _3177 = 1.0 - (_3167 / (_3031 * _3031));
                                float _4273 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3178 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3182 = sqrt(_3167) * _3046.w;
                                float _3184 = 1.39999997615814208984375 / (_3182 + 1.39999997615814208984375);
                                float _3185 = _3184 * _3184;
                                float _3188 = ((1.0 - _3185) * dot(vec3(_3171, _3172, _3173), vec3(_553, _556, _559))) + _3185;
                                float _3191 = _3182 * _3182;
                                float _3195 = (fma(_2349, _3074.z, fma(_2348, _3074.y, _3074.x * _2347)) + _3074.w) / _3136;
                                float _3196 = (fma(_2349, _3089.z, fma(_2348, _3089.y, _3089.x * _2347)) + _3089.w) / _3136;
                                float _3200 = 1.0 - dot(vec2(_3195, _3196), vec2(_3195, _3196));
                                float _4289 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3202 = _3201 * (((isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))) * _3178) / ((_3191 * 0.699999988079071044921875) + 1.0));
                                float _3214 = exp2(log2(1.0 / ((_3191 * 3.5) + 5.0)) * 0.25);
                                float _3215 = 1.0 - _629;
                                float _3222 = sqrt(1.0 - ((1.0 - (_3215 * _3215)) * (1.0 - (_3214 * _3214))));
                                float _3223 = _3222 * _3222;
                                float _3224 = _3223 * _3223;
                                float _3225 = _3171 - _2642;
                                float _3226 = _3172 - _2643;
                                float _3227 = _3173 - _2644;
                                float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                                float _3235 = dot(vec3(_553, _556, _559), vec3((-0.0) - _2642, (-0.0) - _2643, (-0.0) - _2644));
                                float _4300 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3238 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3239 = dot(vec3(_553, _556, _559), vec3(_3231 * _3225, _3231 * _3226, _3231 * _3227));
                                float _4311 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3242 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3246 = ((_3242 * _3242) * (_3224 + (-1.0))) + 1.0;
                                float _3247 = _3184 * _3223;
                                float _3248 = _3247 * _3247;
                                float _3254 = ((1.0 - _3248) * dot(vec3(_553, _556, _559), vec3(_3171, _3172, _3173))) + _3248;
                                float _4322 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3256 = 1.0 - _3223;
                                float _3266 = (0.5 / (((_3255 * ((_3238 * _3256) + _3223)) + 9.9999999392252902907785028219223e-09) + (((_3255 * _3256) + _3223) * _3238))) * _3255;
                                float _4333 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3276 = (_3201 * _3178) * (((_3224 * 3.1415927410125732421875) * (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) / ((_3246 * _3246) * ((_3191 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3202 * _3046.z;
                                frontier_phi_85_pred_1 = _3202 * _3046.y;
                                frontier_phi_85_pred_2 = _3202 * _3046.x;
                                frontier_phi_85_pred_3 = _3276 * _3058.z;
                                frontier_phi_85_pred_4 = _3276 * _3058.y;
                                frontier_phi_85_pred_5 = _3276 * _3058.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3285 = frontier_phi_85_pred;
                            _3284 = frontier_phi_85_pred_1;
                            _3283 = frontier_phi_85_pred_2;
                            _3282 = frontier_phi_85_pred_3;
                            _3281 = frontier_phi_85_pred_4;
                            _3280 = frontier_phi_85_pred_5;
                            _2988 = _3283 + _3001;
                            _2989 = _3284 + _3002;
                            _2990 = _3285 + _3003;
                            _2985 = _3280 + _2998;
                            _2986 = _3281 + _2999;
                            _2987 = _3282 + _3000;
                            if (_3005 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _3005;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2990;
                        frontier_phi_79_pred_1 = _2989;
                        frontier_phi_79_pred_2 = _2988;
                        frontier_phi_79_pred_3 = _2987;
                        frontier_phi_79_pred_4 = _2986;
                        frontier_phi_79_pred_5 = _2985;
                    }
                    _2627 = frontier_phi_79_pred;
                    _2625 = frontier_phi_79_pred_1;
                    _2623 = frontier_phi_79_pred_2;
                    _2621 = frontier_phi_79_pred_3;
                    _2619 = frontier_phi_79_pred_4;
                    _2617 = frontier_phi_79_pred_5;
                    uint _2783 = _2782 + 1u;
                    if (_2783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2776 = _2617;
                        _2777 = _2619;
                        _2778 = _2621;
                        _2779 = _2623;
                        _2780 = _2625;
                        _2781 = _2627;
                        _2782 = _2783;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2623;
                frontier_phi_60_61_ladder_1 = _2627;
                frontier_phi_60_61_ladder_2 = _2625;
                frontier_phi_60_61_ladder_3 = _2621;
                frontier_phi_60_61_ladder_4 = _2619;
                frontier_phi_60_61_ladder_5 = _2617;
            }
            else
            {
                frontier_phi_60_61_ladder = _2502;
                frontier_phi_60_61_ladder_1 = _2506;
                frontier_phi_60_61_ladder_2 = _2504;
                frontier_phi_60_61_ladder_3 = _2500;
                frontier_phi_60_61_ladder_4 = _2498;
                frontier_phi_60_61_ladder_5 = _2496;
            }
            _2616 = frontier_phi_60_61_ladder_5;
            _2618 = frontier_phi_60_61_ladder_4;
            _2620 = frontier_phi_60_61_ladder_3;
            _2622 = frontier_phi_60_61_ladder;
            _2624 = frontier_phi_60_61_ladder_2;
            _2626 = frontier_phi_60_61_ladder_1;
        }
        float _2631 = isnan(1.0) ? _613 : (isnan(_613) ? 1.0 : min(_613, 1.0));
        _2405 = (_2631 * _2622) + _1839;
        _2407 = (_2631 * _2624) + _1841;
        _2409 = (_2631 * _2626) + _1843;
        _2411 = ((_2616 * _598) * _2631) + _2187;
        _2413 = ((_2618 * _600) * _2631) + _2189;
        _2415 = ((_2620 * _601) * _2631) + _2191;
    }
    else
    {
        _2405 = _1839;
        _2407 = _1841;
        _2409 = _1843;
        _2411 = _2187;
        _2413 = _2189;
        _2415 = _2191;
    }
    float _4349 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4360 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4371 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _2432 = ((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2405 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _613))) + ((_2411 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1454)) * cbPerFrame._m0[3u].x);
    float _2433 = ((isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2407 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _613))) + ((_2413 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1454)) * cbPerFrame._m0[3u].x);
    float _2434 = ((isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2409 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _613))) + ((_2415 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1454)) * cbPerFrame._m0[3u].x);
    float _2435 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2436 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2437 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    uint _2438 = _572 + 6u;
    float _2446 = _533 / cbSceneParam._m0[86u].x;
    float _2447 = _534 / cbSceneParam._m0[86u].y;
    vec4 _2461 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2446, _2447, (log2((isnan(cbSceneParam._m0[77u].w) ? _453 : (isnan(_453) ? cbSceneParam._m0[77u].w : min(_453, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2463 = _2461.x;
    float _2464 = _2461.y;
    float _2465 = _2461.z;
    float _2466 = _2461.w;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_453 > cbSceneParam._m0[78u].w)
    {
        float _2521 = isnan(_453) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _453 : min(cbSceneParam._m0[80u].w, _453));
        float _2522 = _2521 / _453;
        float _2533 = _2522 * _506;
        float _2534 = _507 * _2522;
        float _2535 = (-0.0) - _2534;
        float _2536 = _2522 * _508;
        float _2538 = (cbSceneParam._m0[77u].w * _2535) / _2521;
        float _2539 = _2538 + cbSceneParam._m0[79u].w;
        float _2540 = cbSceneParam._m0[79u].w - _2534;
        float _2546 = sqrt(((_2533 * _2533) + (_2534 * _2534)) + (_2536 * _2536));
        float _2549 = (1.0 - (cbSceneParam._m0[77u].w / _2521)) * _2546;
        float _2554 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2556 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2733;
        if (abs((_2535 - _2538) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2733 = ((((_2539 > 0.0) ? exp2(_2554 * _2539) : (2.0 - exp2(_2556 * _2539))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2549;
        }
        else
        {
            float _2677 = 1.0 / cbSceneParam._m0[80u].x;
            float _2678 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : max(_2539, _2540));
            float _2679 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : min(_2539, _2540));
            float _2688 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : min(_2678, 0.0));
            float _2689 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : min(_2679, 0.0));
            _2733 = ((abs(_2546 / _2535) * cbSceneParam._m0[80u].y) * ((((_2688 - _2689) * 2.0) - ((exp2(_2554 * (isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0)))) - exp2(_2554 * (isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0))))) * _2677)) - ((exp2(_2556 * _2688) - exp2(_2556 * _2689)) * _2677))) + (_2549 * cbSceneParam._m0[80u].z);
        }
        vec4 _2735 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2446, _2447, 1.0), 0.0);
        float _2744 = exp2((_2733 * (-1.44269502162933349609375)) * (1.0 - _2735.w));
        float _2745 = log2(_2744);
        float _2761 = log2(_2466);
        _2558 = (exp2(_2761 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].x)) * _2735.x) / cbSceneParam._m0[78u].x)) + _2463;
        _2560 = (exp2(_2761 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].y)) * _2735.y) / cbSceneParam._m0[78u].y)) + _2464;
        _2562 = (exp2(_2761 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].z)) * _2735.z) / cbSceneParam._m0[78u].z)) + _2465;
        _2564 = _2744 * _2466;
    }
    else
    {
        _2558 = _2463;
        _2560 = _2464;
        _2562 = _2465;
        _2564 = _2466;
    }
    bool _2771;
    vec4 _2574;
    vec4 _2596;
    float _2598;
    float _2602;
    float _2603;
    float _2604;
    float _2605;
    bool _2615;
    for (;;)
    {
        _2574 = cbMatDynParam._m0[0u];
        float _2576 = roundEven(_2574.y);
        bool _2577 = _2576 == 3.0;
        float _2578 = log2(_2564);
        float _2585 = exp2(_2578 * cbSceneParam._m0[78u].x) * _2435;
        float _2586 = exp2(_2578 * cbSceneParam._m0[78u].y) * _2436;
        float _2587 = exp2(_2578 * cbSceneParam._m0[78u].z) * _2437;
        float _2594 = _522 + (-0.5);
        _2596 = cbMtdParam._m0[1u];
        _2598 = _2596.y * _2594;
        float _2601 = (_2576 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2602 = _2601 * (_2577 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2558)));
        _2603 = _2601 * (_2577 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2560)));
        _2604 = _2601 * (_2577 ? _2587 : (_2587 + (cbSceneParam._m0[72u].w * _2562)));
        _2605 = _2594 * 0.999000012874603271484375;
        _2615 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2615)
        {
            if ((cbInstanceData._m0[_572 + 7u].x + _2605) < 0.5)
            {
                _2771 = true;
                break;
            }
        }
        uint _2712 = _574 + uint(_2574.w);
        if ((cbInstanceData._m0[_2712].w < 1.0) && ((cbInstanceData._m0[_2712].w + _2605) < 0.5))
        {
            _2771 = true;
            break;
        }
        if ((_2598 + 1.0) < _2596.x)
        {
            _2771 = true;
            break;
        }
        _2771 = false;
        break;
    }
    float _2976;
    if (_2771)
    {
        discard_state = true;
        _2976 = 0.0;
    }
    else
    {
        _2976 = cbInstanceData._m0[_2438].w;
    }
    SV_Target.x = _2602;
    SV_Target.y = _2603;
    SV_Target.z = _2604;
    SV_Target.w = _2976;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2438].w;
    discard_exit();
}


