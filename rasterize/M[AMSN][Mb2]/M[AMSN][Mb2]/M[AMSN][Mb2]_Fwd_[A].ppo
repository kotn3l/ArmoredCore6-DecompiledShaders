#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[21];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1014;
float _3403;
float _3404;
float _3405;
float _3406;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223;
    float _224;
    float _225;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
    }
    else
    {
        _223 = _209;
        _224 = _210;
        _225 = _211;
    }
    vec4 _251 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMatDynParam._m0[17u].x;
    float _258 = _251.y * cbMatDynParam._m0[17u].y;
    float _259 = _251.z * cbMatDynParam._m0[17u].z;
    vec4 _278 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _311 = (TEXCOORD_7.x - ((cbMatDynParam._m0[19u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMatDynParam._m0[19u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMatDynParam._m0[19u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMatDynParam._m0[19u].y * TEXCOORD.w) + 1.0);
    float _3415 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _319 = (_312 * ((_278.x * cbMatDynParam._m0[18u].x) - _257)) + _257;
    float _320 = (_312 * ((_278.y * cbMatDynParam._m0[18u].y) - _258)) + _258;
    float _321 = (_312 * ((_278.z * cbMatDynParam._m0[18u].z) - _259)) + _259;
    float _338 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_5) + cbTextureTilingScale._m0[5u].w)).x + cbMatDynParam._m0[19u].w;
    float _361 = (((cbMatDynParam._m0[20u].x - _338) + texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_5) + cbTextureTilingScale._m0[6u].w)).x) * _312) + _338;
    vec4 _373 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _375 = _373.x;
    float _376 = _373.y;
    float _377 = _373.z;
    vec4 _389 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _402 = ((_389.z - _377) * _312) + _377;
    float _406 = ((((_389.x - _375) * _312) + _375) * 2.0) + (-1.0);
    float _408 = ((((_389.y - _376) * _312) + _376) * 2.0) + (-1.0);
    float _409 = dot(vec2(_406, _408), vec2(_406, _408));
    float _3426 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _414 = sqrt(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))));
    float _417 = fma(_414, _223, fma(_408, _215 * TANGENT.x, (_201 * _193) * _406));
    float _420 = fma(_414, _224, fma(_408, _215 * TANGENT.y, (_201 * _194) * _406));
    float _423 = fma(_414, _225, fma(_408, _215 * TANGENT.z, (_201 * _195) * _406));
    float _427 = inversesqrt(dot(vec3(_417, _420, _423), vec3(_417, _420, _423)));
    float _428 = _427 * _417;
    float _429 = _427 * _420;
    float _430 = _427 * _423;
    float _3437 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _431 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3459 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3470 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3481 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _435 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _451 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _504 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _494);
    float _505 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _494);
    float _506 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _494);
    float _510 = inversesqrt(dot(vec3(_504, _505, _506), vec3(_504, _505, _506)));
    float _511 = _504 * _510;
    float _512 = _505 * _510;
    float _513 = _506 * _510;
    vec4 _518 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _520 = _518.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _694 = sqrt(((_504 * _504) + (_505 * _505)) + (_506 * _506));
        float _700 = (cbMatDynParam._m0[5u].x * _694) + cbMatDynParam._m0[5u].y;
        float _3492 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _705 = (cbMatDynParam._m0[5u].z * _694) + cbMatDynParam._m0[5u].w;
        float _3503 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) - _701)) + _701) < ((_520 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _531 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _532 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _551 = fma(_430, cbSceneParam._m0[5u].z, fma(_429, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _428));
    float _554 = fma(_430, cbSceneParam._m0[6u].z, fma(_429, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _428));
    float _557 = fma(_430, cbSceneParam._m0[7u].z, fma(_429, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _428));
    uint _570 = uint(roundEven(NORMAL.w)) * 13u;
    uint _572 = _570 + 9u;
    uint _573 = _572 + uint(cbMatDynParam._m0[0u].w);
    float _579 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * cbInstanceData._m0[_573].x;
    float _580 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * cbInstanceData._m0[_573].y;
    float _581 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_573].z;
    float _3514 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _3536 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _585 = 1.0 - _435;
    float _586 = _582 * _585;
    float _587 = _583 * _585;
    float _588 = _584 * _585;
    float _593 = (_582 + (-0.039999999105930328369140625)) * _435;
    float _594 = (_583 + (-0.039999999105930328369140625)) * _435;
    float _595 = (_584 + (-0.039999999105930328369140625)) * _435;
    float _596 = _593 + 0.039999999105930328369140625;
    float _598 = _594 + 0.039999999105930328369140625;
    float _599 = _595 + 0.039999999105930328369140625;
    vec4 _608 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _531, cbSceneParam._m0[86u].y * _532));
    float _611 = _608.x * TEXCOORD_7.w;
    float _612 = dot(vec3(_428, _429, _430), vec3(_511, _512, _513));
    float _615 = _612 * 2.0;
    float _619 = (_615 * _428) - _511;
    float _620 = (_615 * _429) - _512;
    float _621 = (_615 * _430) - _513;
    float _625 = abs(dot(vec3(_511, _512, _513), vec3(_428, _429, _430)));
    float _3547 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _627 = sqrt(_431);
    float _640 = exp2((_627 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_627 * 3.0));
    float _646 = (1.0 - _640) * ((_627 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _647 = _640 * _627;
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1013;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _738 = fma(_683, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _675));
        float _742 = fma(_683, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _675));
        float _746 = fma(_683, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _675));
        float _771 = _675 + _428;
        float _772 = _679 + _429;
        float _773 = _683 + _430;
        float _783 = fma(_773, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771)) - _738;
        float _784 = fma(_773, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771)) - _742;
        float _785 = fma(_773, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771)) - _746;
        float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
        float _802 = ((_789 * _783) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_738 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _803 = ((_789 * _784) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_742 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _804 = ((_789 * _785) / cbModelParam._m0[34u].z) + ((((((_746 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        float _841 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_807.x + (-0.5));
        float _843 = _841 * (_807.y + (-0.5));
        float _844 = _841 * (_807.z + (-0.5));
        float _851 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_814.x + (-0.5));
        float _853 = _851 * (_814.y + (-0.5));
        float _854 = _851 * (_814.z + (-0.5));
        float _861 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_821.x + (-0.5));
        float _863 = _861 * (_821.y + (-0.5));
        float _864 = _861 * (_821.z + (-0.5));
        float _871 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_828.x + (-0.5));
        float _873 = _871 * (_828.y + (-0.5));
        float _874 = _871 * (_828.z + (-0.5));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = _842 * 0.5;
        float _879 = _852 * 0.5;
        float _880 = _862 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _895 = (dot(vec3(_428, _429, _430), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _905 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3595 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_907 + 1.0))) + _912) * _875;
        float _922 = _843 * 0.5;
        float _923 = _853 * 0.5;
        float _924 = _863 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_428, _429, _430), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3628 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_949 + 1.0))) + _954) * _876;
        float _964 = _844 * 0.5;
        float _965 = _854 * 0.5;
        float _966 = _864 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_428, _429, _430), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3661 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_991 + 1.0))) + _996) * _877;
        _1013 = _844;
        _1015 = _843;
        _1016 = _842;
        _1017 = _854;
        _1018 = _853;
        _1019 = _852;
        _1020 = _864;
        _1021 = _863;
        _1022 = _862;
        _1023 = _877;
        _1024 = _876;
        _1025 = _875;
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
    }
    else
    {
        _1013 = _1014;
        _1015 = _1014;
        _1016 = _1014;
        _1017 = _1014;
        _1018 = _1014;
        _1019 = _1014;
        _1020 = _1014;
        _1021 = _1014;
        _1022 = _1014;
        _1023 = _1014;
        _1024 = _1014;
        _1025 = _1014;
        _1026 = 0.0;
        _1027 = 0.0;
        _1028 = 0.0;
    }
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1057 = fma(_683, cbModelParam._m0[30u].z, fma(_679, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _675));
        float _1061 = fma(_683, cbModelParam._m0[31u].z, fma(_679, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _675));
        float _1065 = fma(_683, cbModelParam._m0[32u].z, fma(_679, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _675));
        float _1088 = _675 + _428;
        float _1089 = _679 + _429;
        float _1090 = _683 + _430;
        float _1100 = fma(_1090, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088)) - _1057;
        float _1101 = fma(_1090, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088)) - _1061;
        float _1102 = fma(_1090, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088)) - _1065;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1057 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1061 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[35u].z) + ((((((_1065 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1156 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1123.x + (-0.5));
        float _1158 = _1156 * (_1123.y + (-0.5));
        float _1159 = _1156 * (_1123.z + (-0.5));
        float _1166 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1130.x + (-0.5));
        float _1168 = _1166 * (_1130.y + (-0.5));
        float _1169 = _1166 * (_1130.z + (-0.5));
        float _1176 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1137.x + (-0.5));
        float _1178 = _1176 * (_1137.y + (-0.5));
        float _1179 = _1176 * (_1137.z + (-0.5));
        float _1186 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1144.x + (-0.5));
        float _1188 = _1186 * (_1144.y + (-0.5));
        float _1189 = _1186 * (_1144.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_428, _429, _430), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3724 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1220 + 1.0))) + _1225) * _1190;
        float _1235 = _1158 * 0.5;
        float _1236 = _1168 * 0.5;
        float _1237 = _1178 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_428, _429, _430), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3757 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1262 + 1.0))) + _1267) * _1191;
        float _1277 = _1159 * 0.5;
        float _1278 = _1169 * 0.5;
        float _1279 = _1179 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_428, _429, _430), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3790 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1304 + 1.0))) + _1309) * _1192;
        _1326 = _1159;
        _1327 = _1158;
        _1328 = _1157;
        _1329 = _1169;
        _1330 = _1168;
        _1331 = _1167;
        _1332 = _1179;
        _1333 = _1178;
        _1334 = _1177;
        _1335 = _1192;
        _1336 = _1191;
        _1337 = _1190;
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1014;
        _1327 = _1014;
        _1328 = _1014;
        _1329 = _1014;
        _1330 = _1014;
        _1331 = _1014;
        _1332 = _1014;
        _1333 = _1014;
        _1334 = _1014;
        _1335 = _1014;
        _1336 = _1014;
        _1337 = _1014;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1026)) + _1026;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1027)) + _1027;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1028)) + _1028;
    float _1373 = fma(_1352, cbSceneParam._m0[89u].z, fma(_1351, cbSceneParam._m0[89u].y, _1350 * cbSceneParam._m0[89u].x));
    float _1376 = fma(_1352, cbSceneParam._m0[90u].z, fma(_1351, cbSceneParam._m0[90u].y, _1350 * cbSceneParam._m0[90u].x));
    float _1379 = fma(_1352, cbSceneParam._m0[91u].z, fma(_1351, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1350));
    float _1394 = _619 * 0.5;
    float _1395 = _620 * 0.5;
    float _1396 = _621 * 0.5;
    float _1397 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1400 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1403 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1437;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1410 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1013, _1017, _1020, _1023));
        float _1414 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1015, _1018, _1021, _1024));
        float _1418 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1016, _1019, _1022, _1025));
        float _1425 = dot(vec4(cbModelParam._m0[39u]), vec4(_1394, _1395, _1396, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1448;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1439 = dot(vec4(cbModelParam._m0[40u]), vec4(_1394, _1395, _1396, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1452 = (_1448 * cbModelParam._m0[1u].x) + (_1437 * (1.0 - cbModelParam._m0[1u].x));
    float _1462 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _431);
    float _1463 = isnan(_1462) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1462 : min(cbModelParam._m0[25u].z, _1462));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1512 = fma(_683, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675)) + cbModelParam._m0[13u].w;
        float _1516 = fma(_683, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675)) + cbModelParam._m0[14u].w;
        float _1520 = fma(_683, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675)) + cbModelParam._m0[15u].w;
        float _1523 = fma(_621, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _619));
        float _1526 = fma(_621, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _619));
        float _1529 = fma(_621, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _619));
        float _1557;
        if (_1523 > 0.0)
        {
            _1557 = abs((1.0 - _1512) / _1523);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1512 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1557 = frontier_phi_19_17_ladder;
        }
        float _1761;
        if (_1526 > 0.0)
        {
            _1761 = abs((1.0 - _1516) / _1526);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1516 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1761 = frontier_phi_28_24_ladder;
        }
        float _2015;
        if (_1529 > 0.0)
        {
            _2015 = abs((1.0 - _1520) / _1529);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1520 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2015 = frontier_phi_40_35_ladder;
        }
        float _2017 = isnan(_1761) ? _1557 : (isnan(_1557) ? _1761 : min(_1557, _1761));
        float _2018 = isnan(_2015) ? _2017 : (isnan(_2017) ? _2015 : min(_2017, _2015));
        float _2022 = (_2018 * _1523) + _1512;
        float _2023 = (_2018 * _1526) + _1516;
        float _2024 = (_2018 * _1529) + _1520;
        float _2025 = _2018 * 9.9999997473787516355514526367188e-05;
        float _2027 = (-1.0) - _2025;
        float _2029 = _2025 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2024 > _2029) || ((_2024 < _2027) || ((_2023 > _2029) || ((_2023 < _2027) || ((_2022 < _2027) || (_2022 > _2029))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2152 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2024, cbModelParam._m0[9u].z, fma(_2023, cbModelParam._m0[9u].y, _2022 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2024, cbModelParam._m0[10u].z, fma(_2023, cbModelParam._m0[10u].y, _2022 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2024, cbModelParam._m0[11u].z, fma(_2023, cbModelParam._m0[11u].y, _2022 * cbModelParam._m0[11u].x))), _1463);
            frontier_phi_18_40_ladder = _2152.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2152.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2152.x * cbModelParam._m0[1u].y;
        }
        _1545 = frontier_phi_18_40_ladder_2;
        _1547 = frontier_phi_18_40_ladder_1;
        _1549 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_619, _620, _621), _1463);
        _1545 = _1533.x * cbModelParam._m0[1u].y;
        _1547 = _1533.y * cbModelParam._m0[1u].y;
        _1549 = _1533.z * cbModelParam._m0[1u].y;
    }
    float _1553 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _431);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1553 : min(cbModelParam._m0[25u].w, _1553));
    float _1644;
    float _1646;
    float _1648;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1608 = fma(_683, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675)) + cbModelParam._m0[21u].w;
        float _1612 = fma(_683, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675)) + cbModelParam._m0[22u].w;
        float _1616 = fma(_683, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675)) + cbModelParam._m0[23u].w;
        float _1619 = fma(_621, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _619));
        float _1622 = fma(_621, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _619));
        float _1625 = fma(_621, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _619));
        float _1766;
        if (_1619 > 0.0)
        {
            _1766 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1766 = frontier_phi_30_26_ladder;
        }
        float _2042;
        if (_1622 > 0.0)
        {
            _2042 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2042 = frontier_phi_42_37_ladder;
        }
        float _2255;
        if (_1625 > 0.0)
        {
            _2255 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2255 = frontier_phi_51_48_ladder;
        }
        float _2257 = isnan(_2042) ? _1766 : (isnan(_1766) ? _2042 : min(_1766, _2042));
        float _2258 = isnan(_2255) ? _2257 : (isnan(_2257) ? _2255 : min(_2257, _2255));
        float _2262 = (_2258 * _1619) + _1608;
        float _2263 = (_2258 * _1622) + _1612;
        float _2264 = (_2258 * _1625) + _1616;
        float _2265 = _2258 * 9.9999997473787516355514526367188e-05;
        float _2266 = (-1.0) - _2265;
        float _2268 = _2265 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2264 > _2268) || ((_2264 < _2266) || ((_2263 > _2268) || ((_2263 < _2266) || ((_2262 < _2266) || (_2262 > _2268))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2465 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2264, cbModelParam._m0[17u].z, fma(_2263, cbModelParam._m0[17u].y, _2262 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2264, cbModelParam._m0[18u].z, fma(_2263, cbModelParam._m0[18u].y, _2262 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2264, cbModelParam._m0[19u].z, fma(_2263, cbModelParam._m0[19u].y, _2262 * cbModelParam._m0[19u].x))), _1554);
            frontier_phi_27_51_ladder = _2465.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2465.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2465.x * cbModelParam._m0[1u].z;
        }
        _1644 = frontier_phi_27_51_ladder_2;
        _1646 = frontier_phi_27_51_ladder_1;
        _1648 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1628 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_619, _620, _621), _1554);
        _1644 = _1628.x * cbModelParam._m0[1u].z;
        _1646 = _1628.y * cbModelParam._m0[1u].z;
        _1648 = _1628.z * cbModelParam._m0[1u].z;
    }
    float _1661 = (((_646 * _596) + _647) * _611) * ((cbModelParam._m0[1u].w * (_1644 - _1545)) + _1545);
    float _1663 = (((_646 * _598) + _647) * _611) * ((cbModelParam._m0[1u].w * (_1646 - _1547)) + _1547);
    float _1665 = (((_646 * _599) + _647) * _611) * ((cbModelParam._m0[1u].w * (_1648 - _1549)) + _1549);
    float _1668 = fma(_1665, cbSceneParam._m0[89u].z, fma(_1663, cbSceneParam._m0[89u].y, _1661 * cbSceneParam._m0[89u].x));
    float _1671 = fma(_1665, cbSceneParam._m0[90u].z, fma(_1663, cbSceneParam._m0[90u].y, _1661 * cbSceneParam._m0[90u].x));
    float _1674 = fma(_1665, cbSceneParam._m0[91u].z, fma(_1663, cbSceneParam._m0[91u].y, _1661 * cbSceneParam._m0[91u].x));
    uvec4 _1684 = floatBitsToUint(cbInstanceData._m0[_570 + 5u]);
    uint _1686 = _1684.x * 14u;
    uint _1687 = _1686 + 13u;
    float _1694 = _611 + (-1.0);
    float _1699 = (cbLight._m0[_1687].x * _1694) + 1.0;
    float _1700 = (cbLight._m0[_1687].y * _1694) + 1.0;
    float _1701 = (cbLight._m0[_1687].z * _1694) + 1.0;
    float _1702 = (cbLight._m0[_1687].w * _1694) + 1.0;
    uint _1703 = _1686 + 5u;
    float _1709 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
    uint _1713 = _1686 + 4u;
    float _1719 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
    uint _1723 = _1686 | 1u;
    float _1734 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_428, _429, _430));
    float _1737 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_428, _429, _430));
    float _3926 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _3937 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1742 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _1744 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.3183098733425140380859375;
    float _1751 = ((cbLight._m0[_1703].x * _1709) * _1744) + ((cbLight._m0[_1713].x * _1719) * _1742);
    float _1752 = ((_1709 * cbLight._m0[_1703].y) * _1744) + ((_1719 * cbLight._m0[_1713].y) * _1742);
    float _1753 = ((_1709 * cbLight._m0[_1703].z) * _1744) + ((_1719 * cbLight._m0[_1713].z) * _1742);
    uvec4 _1758 = floatBitsToUint(cbLight._m0[_1686 + 12u]);
    bool _1760 = _1758.x == 0u;
    float _1771;
    float _1773;
    float _1775;
    if (_1760)
    {
        _1771 = _1751;
        _1773 = _1752;
        _1775 = _1753;
    }
    else
    {
        uint _1779 = _1686 + 6u;
        float _1795 = (dot(vec3(cbLight._m0[_1686 + 2u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _1796 = _1795 * _1795;
        float _3948 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1798 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _1771 = (((cbLight._m0[_1779].x * 0.3183098733425140380859375) * _1797) * _1798) + _1751;
        _1773 = (((cbLight._m0[_1779].y * 0.3183098733425140380859375) * _1797) * _1798) + _1752;
        _1775 = (((cbLight._m0[_1779].z * 0.3183098733425140380859375) * _1797) * _1798) + _1753;
    }
    bool _1778 = _1758.y == 0u;
    float _1816;
    float _1818;
    float _1820;
    if (_1778)
    {
        _1816 = _1771;
        _1818 = _1773;
        _1820 = _1775;
    }
    else
    {
        uint _1986 = _1686 + 7u;
        float _2002 = (dot(vec3(cbLight._m0[_1686 + 3u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _2003 = _2002 * _2002;
        float _3964 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2004 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _2005 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _1816 = (((cbLight._m0[_1986].x * 0.3183098733425140380859375) * _2004) * _2005) + _1771;
        _1818 = (((cbLight._m0[_1986].y * 0.3183098733425140380859375) * _2004) * _2005) + _1773;
        _1820 = (((cbLight._m0[_1986].z * 0.3183098733425140380859375) * _2004) * _2005) + _1775;
    }
    uint _1823 = _1686 + 8u;
    float _1836 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1686].w)) * _431) * 0.949999988079071044921875);
    float _1837 = _1836 * _1836;
    float _1838 = cbLight._m0[_1686].x + _511;
    float _1839 = cbLight._m0[_1686].y + _512;
    float _1840 = cbLight._m0[_1686].z + _513;
    float _1844 = inversesqrt(dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840)));
    float _1845 = _1844 * _1838;
    float _1846 = _1844 * _1839;
    float _1847 = _1844 * _1840;
    float _1848 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_1686].xyz));
    float _3980 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _1852 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1853 = dot(vec3(_428, _429, _430), vec3(_1845, _1846, _1847));
    float _4002 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1857 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_1845, _1846, _1847));
    float _4013 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1861 = _1837 * _1837;
    float _1865 = ((_1856 * _1856) * (_1861 + (-1.0))) + 1.0;
    float _1873 = exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0);
    float _1874 = 0.959999978542327880859375 - _593;
    float _1876 = 0.959999978542327880859375 - _594;
    float _1877 = 0.959999978542327880859375 - _595;
    float _1884 = 1.0 - _1837;
    float _1895 = (0.5 / (((_1852 * ((_1851 * _1884) + _1837)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _1884) + _1837) * _1851))) * _1851;
    float _4024 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1897 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1861 / ((_1865 * _1865) * 3.141590118408203125));
    uint _1908 = _1686 + 9u;
    float _1919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1723].w)) * _431) * 0.949999988079071044921875);
    float _1920 = _1919 * _1919;
    float _1921 = cbLight._m0[_1723].x + _511;
    float _1922 = cbLight._m0[_1723].y + _512;
    float _1923 = cbLight._m0[_1723].z + _513;
    float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
    float _1928 = _1927 * _1921;
    float _1929 = _1927 * _1922;
    float _1930 = _1927 * _1923;
    float _1931 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_1723].xyz));
    float _4035 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1935 = dot(vec3(_428, _429, _430), vec3(_1928, _1929, _1930));
    float _4046 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _1939 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_1928, _1929, _1930));
    float _4057 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1943 = _1920 * _1920;
    float _1947 = ((_1938 * _1938) * (_1943 + (-1.0))) + 1.0;
    float _1954 = exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0);
    float _1961 = 1.0 - _1920;
    float _1971 = (0.5 / (((_1852 * ((_1934 * _1961) + _1920)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _1961) + _1920) * _1934))) * _1934;
    float _4068 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1973 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1943 / ((_1947 * _1947) * 3.141590118408203125));
    float _1983 = (((((_1954 * _1874) + _596) * cbLight._m0[_1908].x) * _1973) * _1709) + (((((_1873 * _1874) + _596) * cbLight._m0[_1823].x) * _1897) * _1719);
    float _1984 = (((((_1954 * _1876) + _598) * cbLight._m0[_1908].y) * _1973) * _1709) + (((((_1873 * _1876) + _598) * cbLight._m0[_1823].y) * _1897) * _1719);
    float _1985 = (((((_1954 * _1877) + _599) * cbLight._m0[_1908].z) * _1973) * _1709) + (((((_1873 * _1877) + _599) * cbLight._m0[_1823].z) * _1897) * _1719);
    float _2047;
    float _2049;
    float _2051;
    if (_1760)
    {
        _2047 = _1983;
        _2049 = _1984;
        _2051 = _1985;
    }
    else
    {
        uint _2053 = _1686 + 2u;
        uint _2057 = _1686 + 10u;
        float _2071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _431) * 0.949999988079071044921875);
        float _2072 = _2071 * _2071;
        float _2073 = cbLight._m0[_2053].x + _511;
        float _2074 = cbLight._m0[_2053].y + _512;
        float _2075 = cbLight._m0[_2053].z + _513;
        float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
        float _2080 = _2079 * _2073;
        float _2081 = _2079 * _2074;
        float _2082 = _2079 * _2075;
        float _2083 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2053].xyz));
        float _4079 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2086 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2087 = dot(vec3(_428, _429, _430), vec3(_2080, _2081, _2082));
        float _4090 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2090 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2091 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2080, _2081, _2082));
        float _4101 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2095 = _2072 * _2072;
        float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
        float _2106 = exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0);
        float _2113 = 1.0 - _2072;
        float _2123 = (0.5 / (((_1852 * ((_2086 * _2113) + _2072)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _2113) + _2072) * _2086))) * _2086;
        float _4112 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2125 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
        float _2126 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _2047 = (((((_2106 * _1874) + _596) * cbLight._m0[_2057].x) * _2125) * _2126) + _1983;
        _2049 = (((((_2106 * _1876) + _598) * cbLight._m0[_2057].y) * _2125) * _2126) + _1984;
        _2051 = (((((_2106 * _1877) + _599) * cbLight._m0[_2057].z) * _2125) * _2126) + _1985;
    }
    float _2161;
    float _2163;
    float _2165;
    if (_1778)
    {
        _2161 = _2047;
        _2163 = _2049;
        _2165 = _2051;
    }
    else
    {
        uint _2172 = _1686 + 3u;
        uint _2176 = _1686 + 11u;
        float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _431) * 0.949999988079071044921875);
        float _2191 = _2190 * _2190;
        float _2192 = cbLight._m0[_2172].x + _511;
        float _2193 = cbLight._m0[_2172].y + _512;
        float _2194 = cbLight._m0[_2172].z + _513;
        float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
        float _2199 = _2198 * _2192;
        float _2200 = _2198 * _2193;
        float _2201 = _2198 * _2194;
        float _2202 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2172].xyz));
        float _4128 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2206 = dot(vec3(_428, _429, _430), vec3(_2199, _2200, _2201));
        float _4139 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2209 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2210 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2199, _2200, _2201));
        float _4150 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2214 = _2191 * _2191;
        float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
        float _2225 = exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0);
        float _2232 = 1.0 - _2191;
        float _2242 = (0.5 / (((_1852 * ((_2205 * _2232) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _2232) + _2191) * _2205))) * _2205;
        float _4161 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2244 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
        float _2245 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _2161 = (((((_2225 * _1874) + _596) * cbLight._m0[_2176].x) * _2244) * _2245) + _2047;
        _2163 = (((((_2225 * _1876) + _598) * cbLight._m0[_2176].y) * _2244) * _2245) + _2049;
        _2165 = (((((_2225 * _1877) + _599) * cbLight._m0[_2176].z) * _2244) * _2245) + _2051;
    }
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    float _2389;
    if (_1684.y == 0u)
    {
        float _2320 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2321 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2320;
        float _2322 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2320;
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2320;
        uvec4 _2335 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2336 = _2335.x;
        uint _2347 = uint((float(_2335.y) * floor(float(uint(cbSceneParam._m0[85u].y * _532) / _2336))) + floor(float(uint(cbSceneParam._m0[85u].x * _531) / _2336)));
        float _2357 = (log2(_2323 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2358 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        uint _2361 = uint(isnan(14.0) ? _2358 : (isnan(_2358) ? 14.0 : min(_2358, 14.0)));
        uvec4 _2366 = texelFetch(g_lightClusterGridBuffer, int(((_2361 << 2u) + (_2347 << 6u)) >> 2u));
        uint _2367 = _2366.x;
        uint _2368 = _2335.z;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        if (((((1u << ((_2368 >> 4u) & 15u)) + 4294967295u) & _2367) == 0u) || ((_2368 & 240u) == 0u))
        {
            _2470 = 0.0;
            _2472 = 0.0;
            _2474 = 0.0;
            _2476 = 0.0;
            _2478 = 0.0;
            _2480 = 0.0;
        }
        else
        {
            float _2471;
            float _2473;
            float _2475;
            float _2477;
            float _2479;
            float _2481;
            float _2622 = 0.0;
            float _2623 = 0.0;
            float _2624 = 0.0;
            float _2625 = 0.0;
            float _2626 = 0.0;
            float _2627 = 0.0;
            uint _2628 = 0u;
            uint _2637;
            bool _2638;
            for (;;)
            {
                _2637 = texelFetch(g_lightClassification, int((((_2361 << 5u) + (_2347 << 9u)) + (_2628 << 2u)) >> 2u)).x;
                _2638 = _2637 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2638)
                {
                    frontier_phi_68_pred = _2624;
                    frontier_phi_68_pred_1 = _2627;
                    frontier_phi_68_pred_2 = _2626;
                    frontier_phi_68_pred_3 = _2625;
                    frontier_phi_68_pred_4 = _2623;
                    frontier_phi_68_pred_5 = _2622;
                }
                else
                {
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    uint _2773;
                    _2767 = _2622;
                    _2768 = _2623;
                    _2769 = _2624;
                    _2770 = _2625;
                    _2771 = _2626;
                    _2772 = _2627;
                    _2773 = _2637;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    for (;;)
                    {
                        uint _2777 = uint(findLSB(_2773)) + (_2628 << 5u);
                        uint _2774 = (_2773 + 4294967295u) & _2773;
                        uint _2779 = _2777 * 48u;
                        vec4 _2793 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2779)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 3u)).x));
                        uint _2799 = (_2777 * 48u) + 4u;
                        vec4 _2812 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2799)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 3u)).x));
                        uint _2818 = (_2777 * 48u) + 8u;
                        vec3 _2829 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2818)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 2u)).x));
                        float _2833 = _2793.x - _2321;
                        float _2834 = _2793.y - _2322;
                        float _2835 = _2793.z - _2323;
                        float _2836 = dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835));
                        float _2839 = inversesqrt(_2836);
                        float _2840 = _2839 * _2833;
                        float _2841 = _2839 * _2834;
                        float _2842 = _2839 * _2835;
                        float _2843 = dot(vec3(_551, _554, _557), vec3(_2840, _2841, _2842));
                        float _2848 = 1.0 - (_2836 * _2793.w);
                        float _4187 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2849 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2850 = sqrt(_2836) * _2812.w;
                        float _2853 = 1.39999997615814208984375 / (_2850 + 1.39999997615814208984375);
                        float _2854 = _2853 * _2853;
                        float _2857 = ((1.0 - _2854) * _2843) + _2854;
                        float _2860 = _2850 * _2850;
                        float _2864 = ((isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))) * _2849) / ((_2860 * 0.699999988079071044921875) + 1.0);
                        float _2868 = (-0.0) - _2321;
                        float _2869 = (-0.0) - _2322;
                        float _2870 = (-0.0) - _2323;
                        float _2874 = inversesqrt(dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870)));
                        float _2875 = _2874 * _2868;
                        float _2876 = _2874 * _2869;
                        float _2877 = _2874 * _2870;
                        float _2885 = exp2(log2(1.0 / ((_2860 * 3.5) + 5.0)) * 0.25);
                        float _2886 = 1.0 - _627;
                        float _2893 = sqrt(1.0 - ((1.0 - (_2886 * _2886)) * (1.0 - (_2885 * _2885))));
                        float _2894 = _2893 * _2893;
                        float _2895 = _2894 * _2894;
                        float _2896 = _2875 + _2840;
                        float _2897 = _2876 + _2841;
                        float _2898 = _2877 + _2842;
                        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
                        float _2906 = dot(vec3(_551, _554, _557), vec3(_2875, _2876, _2877));
                        float _4203 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2909 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2910 = dot(vec3(_551, _554, _557), vec3(_2902 * _2896, _2902 * _2897, _2902 * _2898));
                        float _4214 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2913 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2917 = ((_2913 * _2913) * (_2895 + (-1.0))) + 1.0;
                        float _2918 = _2853 * _2894;
                        float _2919 = _2918 * _2918;
                        float _2922 = ((1.0 - _2919) * _2843) + _2919;
                        float _4225 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2923 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2924 = 1.0 - _2894;
                        float _2934 = (0.5 / (((_2923 * ((_2909 * _2924) + _2894)) + 9.9999999392252902907785028219223e-09) + (((_2923 * _2924) + _2894) * _2909))) * _2923;
                        float _4236 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2945 = (((_2895 * 3.1415927410125732421875) * (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) / ((_2917 * _2917) * ((_2860 * 2.1991131305694580078125) + 3.141590118408203125))) * _2849;
                        _2697 = (_2864 * _2812.x) + _2770;
                        _2698 = (_2864 * _2812.y) + _2771;
                        _2699 = (_2864 * _2812.z) + _2772;
                        _2694 = (_2945 * _2829.x) + _2767;
                        _2695 = (_2945 * _2829.y) + _2768;
                        _2696 = (_2945 * _2829.z) + _2769;
                        if (_2774 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2767 = _2694;
                            _2768 = _2695;
                            _2769 = _2696;
                            _2770 = _2697;
                            _2771 = _2698;
                            _2772 = _2699;
                            _2773 = _2774;
                        }
                    }
                    frontier_phi_68_pred = _2696;
                    frontier_phi_68_pred_1 = _2699;
                    frontier_phi_68_pred_2 = _2698;
                    frontier_phi_68_pred_3 = _2697;
                    frontier_phi_68_pred_4 = _2695;
                    frontier_phi_68_pred_5 = _2694;
                }
                _2475 = frontier_phi_68_pred;
                _2481 = frontier_phi_68_pred_1;
                _2479 = frontier_phi_68_pred_2;
                _2477 = frontier_phi_68_pred_3;
                _2473 = frontier_phi_68_pred_4;
                _2471 = frontier_phi_68_pred_5;
                uint _2629 = _2628 + 1u;
                if (_2629 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2622 = _2471;
                    _2623 = _2473;
                    _2624 = _2475;
                    _2625 = _2477;
                    _2626 = _2479;
                    _2627 = _2481;
                    _2628 = _2629;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2470 = _2471;
            _2472 = _2473;
            _2474 = _2475;
            _2476 = _2477;
            _2478 = _2479;
            _2480 = _2481;
        }
        uvec4 _2484 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2485 = _2484.z;
        uint _2487 = (_2485 >> 8u) & 15u;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        if (((4294967295u << _2487) & _2367) == 0u)
        {
            _2590 = _2470;
            _2592 = _2472;
            _2594 = _2474;
            _2596 = _2476;
            _2598 = _2478;
            _2600 = _2480;
        }
        else
        {
            float _2615 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
            float _2616 = _2615 * _2321;
            float _2617 = _2615 * _2322;
            float _2618 = _2615 * _2323;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2487 < ((_2485 >> 12u) & 15u))
            {
                float _2591;
                float _2593;
                float _2595;
                float _2597;
                float _2599;
                float _2601;
                float _2750 = _2470;
                float _2751 = _2472;
                float _2752 = _2474;
                float _2753 = _2476;
                float _2754 = _2478;
                float _2755 = _2480;
                uint _2756 = _2487;
                uint _2765;
                bool _2766;
                for (;;)
                {
                    _2765 = texelFetch(g_lightClassification, int((((_2361 << 5u) + (_2347 << 9u)) + (_2756 << 2u)) >> 2u)).x;
                    _2766 = _2765 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2766)
                    {
                        frontier_phi_79_pred = _2755;
                        frontier_phi_79_pred_1 = _2754;
                        frontier_phi_79_pred_2 = _2753;
                        frontier_phi_79_pred_3 = _2752;
                        frontier_phi_79_pred_4 = _2751;
                        frontier_phi_79_pred_5 = _2750;
                    }
                    else
                    {
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _2972 = _2750;
                        float _2973 = _2751;
                        float _2974 = _2752;
                        float _2975 = _2753;
                        float _2976 = _2754;
                        float _2977 = _2755;
                        uint _2978 = _2765;
                        uint _2979;
                        vec4 _3004;
                        float _3005;
                        vec4 _3020;
                        vec3 _3032;
                        vec4 _3048;
                        vec4 _3063;
                        float _3110;
                        bool _3111;
                        for (;;)
                        {
                            uint _2989 = ((_2756 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2978));
                            _2979 = (_2978 + 4294967295u) & _2978;
                            uint _2991 = _2989 * 40u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            _3005 = _3004.w;
                            uint _3007 = (_2989 * 40u) + 4u;
                            _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3022 = (_2989 * 40u) + 8u;
                            _3032 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x));
                            uint _3035 = (_2989 * 40u) + 16u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3050 = (_2989 * 40u) + 20u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3066 = (_2989 * 40u) + 24u;
                            vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3085 = (_2989 * 40u) + 28u;
                            vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            _3110 = fma(_2323, _3098.z, fma(_2322, _3098.y, _3098.x * _2321)) + _3098.w;
                            _3111 = !((fma(_2323, _3079.z, fma(_2322, _3079.y, _3079.x * _2321)) + _3079.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3111)
                            {
                                float _3138 = _3004.x - _2321;
                                float _3139 = _3004.y - _2322;
                                float _3140 = _3004.z - _2323;
                                float _3141 = dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140));
                                float _3144 = inversesqrt(_3141);
                                float _3145 = _3144 * _3138;
                                float _3146 = _3144 * _3139;
                                float _3147 = _3144 * _3140;
                                float _3151 = 1.0 - (_3141 / (_3005 * _3005));
                                float _4247 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3152 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3156 = sqrt(_3141) * _3020.w;
                                float _3158 = 1.39999997615814208984375 / (_3156 + 1.39999997615814208984375);
                                float _3159 = _3158 * _3158;
                                float _3162 = ((1.0 - _3159) * dot(vec3(_3145, _3146, _3147), vec3(_551, _554, _557))) + _3159;
                                float _3165 = _3156 * _3156;
                                float _3169 = (fma(_2323, _3048.z, fma(_2322, _3048.y, _3048.x * _2321)) + _3048.w) / _3110;
                                float _3170 = (fma(_2323, _3063.z, fma(_2322, _3063.y, _3063.x * _2321)) + _3063.w) / _3110;
                                float _3174 = 1.0 - dot(vec2(_3169, _3170), vec2(_3169, _3170));
                                float _4263 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3175 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3176 = _3175 * (((isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))) * _3152) / ((_3165 * 0.699999988079071044921875) + 1.0));
                                float _3188 = exp2(log2(1.0 / ((_3165 * 3.5) + 5.0)) * 0.25);
                                float _3189 = 1.0 - _627;
                                float _3196 = sqrt(1.0 - ((1.0 - (_3189 * _3189)) * (1.0 - (_3188 * _3188))));
                                float _3197 = _3196 * _3196;
                                float _3198 = _3197 * _3197;
                                float _3199 = _3145 - _2616;
                                float _3200 = _3146 - _2617;
                                float _3201 = _3147 - _2618;
                                float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                                float _3209 = dot(vec3(_551, _554, _557), vec3((-0.0) - _2616, (-0.0) - _2617, (-0.0) - _2618));
                                float _4274 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3212 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3213 = dot(vec3(_551, _554, _557), vec3(_3205 * _3199, _3205 * _3200, _3205 * _3201));
                                float _4285 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3216 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3220 = ((_3216 * _3216) * (_3198 + (-1.0))) + 1.0;
                                float _3221 = _3158 * _3197;
                                float _3222 = _3221 * _3221;
                                float _3228 = ((1.0 - _3222) * dot(vec3(_551, _554, _557), vec3(_3145, _3146, _3147))) + _3222;
                                float _4296 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3230 = 1.0 - _3197;
                                float _3240 = (0.5 / (((_3229 * ((_3212 * _3230) + _3197)) + 9.9999999392252902907785028219223e-09) + (((_3229 * _3230) + _3197) * _3212))) * _3229;
                                float _4307 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3250 = (_3175 * _3152) * (((_3198 * 3.1415927410125732421875) * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) / ((_3220 * _3220) * ((_3165 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3176 * _3020.z;
                                frontier_phi_85_pred_1 = _3176 * _3020.y;
                                frontier_phi_85_pred_2 = _3176 * _3020.x;
                                frontier_phi_85_pred_3 = _3250 * _3032.z;
                                frontier_phi_85_pred_4 = _3250 * _3032.y;
                                frontier_phi_85_pred_5 = _3250 * _3032.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3259 = frontier_phi_85_pred;
                            _3258 = frontier_phi_85_pred_1;
                            _3257 = frontier_phi_85_pred_2;
                            _3256 = frontier_phi_85_pred_3;
                            _3255 = frontier_phi_85_pred_4;
                            _3254 = frontier_phi_85_pred_5;
                            _2962 = _3257 + _2975;
                            _2963 = _3258 + _2976;
                            _2964 = _3259 + _2977;
                            _2959 = _3254 + _2972;
                            _2960 = _3255 + _2973;
                            _2961 = _3256 + _2974;
                            if (_2979 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2979;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2964;
                        frontier_phi_79_pred_1 = _2963;
                        frontier_phi_79_pred_2 = _2962;
                        frontier_phi_79_pred_3 = _2961;
                        frontier_phi_79_pred_4 = _2960;
                        frontier_phi_79_pred_5 = _2959;
                    }
                    _2601 = frontier_phi_79_pred;
                    _2599 = frontier_phi_79_pred_1;
                    _2597 = frontier_phi_79_pred_2;
                    _2595 = frontier_phi_79_pred_3;
                    _2593 = frontier_phi_79_pred_4;
                    _2591 = frontier_phi_79_pred_5;
                    uint _2757 = _2756 + 1u;
                    if (_2757 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2750 = _2591;
                        _2751 = _2593;
                        _2752 = _2595;
                        _2753 = _2597;
                        _2754 = _2599;
                        _2755 = _2601;
                        _2756 = _2757;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2597;
                frontier_phi_60_61_ladder_1 = _2601;
                frontier_phi_60_61_ladder_2 = _2599;
                frontier_phi_60_61_ladder_3 = _2595;
                frontier_phi_60_61_ladder_4 = _2593;
                frontier_phi_60_61_ladder_5 = _2591;
            }
            else
            {
                frontier_phi_60_61_ladder = _2476;
                frontier_phi_60_61_ladder_1 = _2480;
                frontier_phi_60_61_ladder_2 = _2478;
                frontier_phi_60_61_ladder_3 = _2474;
                frontier_phi_60_61_ladder_4 = _2472;
                frontier_phi_60_61_ladder_5 = _2470;
            }
            _2590 = frontier_phi_60_61_ladder_5;
            _2592 = frontier_phi_60_61_ladder_4;
            _2594 = frontier_phi_60_61_ladder_3;
            _2596 = frontier_phi_60_61_ladder;
            _2598 = frontier_phi_60_61_ladder_2;
            _2600 = frontier_phi_60_61_ladder_1;
        }
        float _2605 = isnan(1.0) ? _611 : (isnan(_611) ? 1.0 : min(_611, 1.0));
        _2379 = (_2605 * _2596) + _1816;
        _2381 = (_2605 * _2598) + _1818;
        _2383 = (_2605 * _2600) + _1820;
        _2385 = ((_2590 * _596) * _2605) + _2161;
        _2387 = ((_2592 * _598) * _2605) + _2163;
        _2389 = ((_2594 * _599) * _2605) + _2165;
    }
    else
    {
        _2379 = _1816;
        _2381 = _1818;
        _2383 = _1820;
        _2385 = _2161;
        _2387 = _2163;
        _2389 = _2165;
    }
    float _4323 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _4334 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _4345 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _2406 = ((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2379 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _611))) + ((_2385 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1452)) * cbPerFrame._m0[3u].x);
    float _2407 = ((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2381 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _611))) + ((_2387 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1452)) * cbPerFrame._m0[3u].x);
    float _2408 = ((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2383 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _611))) + ((_2389 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1452)) * cbPerFrame._m0[3u].x);
    float _2409 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2410 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2411 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    uint _2412 = _570 + 6u;
    float _2420 = _531 / cbSceneParam._m0[86u].x;
    float _2421 = _532 / cbSceneParam._m0[86u].y;
    vec4 _2435 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2420, _2421, (log2((isnan(cbSceneParam._m0[77u].w) ? _451 : (isnan(_451) ? cbSceneParam._m0[77u].w : min(_451, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2437 = _2435.x;
    float _2438 = _2435.y;
    float _2439 = _2435.z;
    float _2440 = _2435.w;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    if (_451 > cbSceneParam._m0[78u].w)
    {
        float _2495 = isnan(_451) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _451 : min(cbSceneParam._m0[80u].w, _451));
        float _2496 = _2495 / _451;
        float _2507 = _2496 * _504;
        float _2508 = _505 * _2496;
        float _2509 = (-0.0) - _2508;
        float _2510 = _2496 * _506;
        float _2512 = (cbSceneParam._m0[77u].w * _2509) / _2495;
        float _2513 = _2512 + cbSceneParam._m0[79u].w;
        float _2514 = cbSceneParam._m0[79u].w - _2508;
        float _2520 = sqrt(((_2507 * _2507) + (_2508 * _2508)) + (_2510 * _2510));
        float _2523 = (1.0 - (cbSceneParam._m0[77u].w / _2495)) * _2520;
        float _2528 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2530 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2707;
        if (abs((_2509 - _2512) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2707 = ((((_2513 > 0.0) ? exp2(_2528 * _2513) : (2.0 - exp2(_2530 * _2513))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2523;
        }
        else
        {
            float _2651 = 1.0 / cbSceneParam._m0[80u].x;
            float _2652 = isnan(_2514) ? _2513 : (isnan(_2513) ? _2514 : max(_2513, _2514));
            float _2653 = isnan(_2514) ? _2513 : (isnan(_2513) ? _2514 : min(_2513, _2514));
            float _2662 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : min(_2652, 0.0));
            float _2663 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : min(_2653, 0.0));
            _2707 = ((abs(_2520 / _2509) * cbSceneParam._m0[80u].y) * ((((_2662 - _2663) * 2.0) - ((exp2(_2528 * (isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0)))) - exp2(_2528 * (isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0))))) * _2651)) - ((exp2(_2530 * _2662) - exp2(_2530 * _2663)) * _2651))) + (_2523 * cbSceneParam._m0[80u].z);
        }
        vec4 _2709 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2420, _2421, 1.0), 0.0);
        float _2718 = exp2((_2707 * (-1.44269502162933349609375)) * (1.0 - _2709.w));
        float _2719 = log2(_2718);
        float _2735 = log2(_2440);
        _2532 = (exp2(_2735 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].x)) * _2709.x) / cbSceneParam._m0[78u].x)) + _2437;
        _2534 = (exp2(_2735 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].y)) * _2709.y) / cbSceneParam._m0[78u].y)) + _2438;
        _2536 = (exp2(_2735 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].z)) * _2709.z) / cbSceneParam._m0[78u].z)) + _2439;
        _2538 = _2718 * _2440;
    }
    else
    {
        _2532 = _2437;
        _2534 = _2438;
        _2536 = _2439;
        _2538 = _2440;
    }
    bool _2745;
    vec4 _2548;
    vec4 _2570;
    float _2572;
    float _2576;
    float _2577;
    float _2578;
    float _2579;
    bool _2589;
    for (;;)
    {
        _2548 = cbMatDynParam._m0[0u];
        float _2550 = roundEven(_2548.y);
        bool _2551 = _2550 == 3.0;
        float _2552 = log2(_2538);
        float _2559 = exp2(_2552 * cbSceneParam._m0[78u].x) * _2409;
        float _2560 = exp2(_2552 * cbSceneParam._m0[78u].y) * _2410;
        float _2561 = exp2(_2552 * cbSceneParam._m0[78u].z) * _2411;
        float _2568 = _520 + (-0.5);
        _2570 = cbMtdParam._m0[1u];
        _2572 = _2570.y * _2568;
        float _2575 = (_2550 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2576 = _2575 * (_2551 ? _2559 : (_2559 + (cbSceneParam._m0[72u].w * _2532)));
        _2577 = _2575 * (_2551 ? _2560 : (_2560 + (cbSceneParam._m0[72u].w * _2534)));
        _2578 = _2575 * (_2551 ? _2561 : (_2561 + (cbSceneParam._m0[72u].w * _2536)));
        _2579 = _2568 * 0.999000012874603271484375;
        _2589 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2589)
        {
            if ((cbInstanceData._m0[_570 + 7u].x + _2579) < 0.5)
            {
                _2745 = true;
                break;
            }
        }
        uint _2686 = _572 + uint(_2548.w);
        if ((cbInstanceData._m0[_2686].w < 1.0) && ((cbInstanceData._m0[_2686].w + _2579) < 0.5))
        {
            _2745 = true;
            break;
        }
        if ((_2572 + 1.0) < _2570.x)
        {
            _2745 = true;
            break;
        }
        _2745 = false;
        break;
    }
    float _2950;
    if (_2745)
    {
        discard_state = true;
        _2950 = 0.0;
    }
    else
    {
        _2950 = cbInstanceData._m0[_2412].w;
    }
    SV_Target.x = _2576;
    SV_Target.y = _2577;
    SV_Target.z = _2578;
    SV_Target.w = _2950;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2412].w;
    discard_exit();
}


