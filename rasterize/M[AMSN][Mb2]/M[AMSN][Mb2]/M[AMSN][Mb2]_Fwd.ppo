#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[21];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 5, component = 1) in float TEXCOORD_5;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _970;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _247 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_5) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMatDynParam._m0[17u].x;
    float _254 = _247.y * cbMatDynParam._m0[17u].y;
    float _255 = _247.z * cbMatDynParam._m0[17u].z;
    vec4 _274 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_5) + cbTextureTilingScale._m0[4u].w));
    float _307 = (TEXCOORD_7.x - ((cbMatDynParam._m0[19u].x * (1.0 - TEXCOORD_7.x)) * (texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMatDynParam._m0[19u].z * TEXCOORD_4) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMatDynParam._m0[19u].z * TEXCOORD_5) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMatDynParam._m0[19u].y * TEXCOORD.w) + 1.0);
    float _3305 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _315 = (_308 * ((_274.x * cbMatDynParam._m0[18u].x) - _253)) + _253;
    float _316 = (_308 * ((_274.y * cbMatDynParam._m0[18u].y) - _254)) + _254;
    float _317 = (_308 * ((_274.z * cbMatDynParam._m0[18u].z) - _255)) + _255;
    float _334 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_5) + cbTextureTilingScale._m0[5u].w)).x + cbMatDynParam._m0[19u].w;
    float _357 = (((cbMatDynParam._m0[20u].x - _334) + texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_5) + cbTextureTilingScale._m0[6u].w)).x) * _308) + _334;
    vec4 _369 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_5) + cbTextureTilingScale._m0[2u].w));
    float _371 = _369.x;
    float _372 = _369.y;
    float _373 = _369.z;
    vec4 _385 = texture(sampler2D(M_AMSN_Mb2_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_5) + cbTextureTilingScale._m0[3u].w));
    float _398 = ((_385.z - _373) * _308) + _373;
    float _402 = ((((_385.x - _371) * _308) + _371) * 2.0) + (-1.0);
    float _404 = ((((_385.y - _372) * _308) + _372) * 2.0) + (-1.0);
    float _405 = dot(vec2(_402, _404), vec2(_402, _404));
    float _3316 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _410 = sqrt(1.0 - (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))));
    float _413 = fma(_410, _219, fma(_404, _211 * TANGENT.x, (_197 * _189) * _402));
    float _416 = fma(_410, _220, fma(_404, _211 * TANGENT.y, (_197 * _190) * _402));
    float _419 = fma(_410, _221, fma(_404, _211 * TANGENT.z, (_197 * _191) * _402));
    float _423 = inversesqrt(dot(vec3(_413, _416, _419), vec3(_413, _416, _419)));
    float _424 = _423 * _413;
    float _425 = _423 * _416;
    float _426 = _423 * _419;
    float _3327 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _427 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    float _3338 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3349 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3360 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3371 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _431 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _447 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _500 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _490);
    float _501 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _490);
    float _502 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _490);
    float _506 = inversesqrt(dot(vec3(_500, _501, _502), vec3(_500, _501, _502)));
    float _507 = _500 * _506;
    float _508 = _501 * _506;
    float _509 = _502 * _506;
    float _515 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _516 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _535 = fma(_426, cbSceneParam._m0[5u].z, fma(_425, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _424));
    float _538 = fma(_426, cbSceneParam._m0[6u].z, fma(_425, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _424));
    float _541 = fma(_426, cbSceneParam._m0[7u].z, fma(_425, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _424));
    uint _554 = uint(roundEven(NORMAL.w)) * 13u;
    uint _557 = (_554 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _563 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_557].x;
    float _564 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_557].y;
    float _565 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_557].z;
    float _3382 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _569 = 1.0 - _431;
    float _570 = _566 * _569;
    float _571 = _567 * _569;
    float _572 = _568 * _569;
    float _577 = (_566 + (-0.039999999105930328369140625)) * _431;
    float _578 = (_567 + (-0.039999999105930328369140625)) * _431;
    float _579 = (_568 + (-0.039999999105930328369140625)) * _431;
    float _580 = _577 + 0.039999999105930328369140625;
    float _582 = _578 + 0.039999999105930328369140625;
    float _583 = _579 + 0.039999999105930328369140625;
    vec4 _592 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _515, cbSceneParam._m0[86u].y * _516));
    float _595 = _592.x * TEXCOORD_7.w;
    float _596 = dot(vec3(_424, _425, _426), vec3(_507, _508, _509));
    float _599 = _596 * 2.0;
    float _603 = (_599 * _424) - _507;
    float _604 = (_599 * _425) - _508;
    float _605 = (_599 * _426) - _509;
    float _609 = abs(dot(vec3(_507, _508, _509), vec3(_424, _425, _426)));
    float _3415 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _611 = sqrt(_427);
    float _624 = exp2((_611 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_611 * 3.0));
    float _630 = (1.0 - _624) * ((_611 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _631 = _624 * _611;
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _969;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _694 = fma(_667, cbModelParam._m0[26u].z, fma(_663, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _659));
        float _698 = fma(_667, cbModelParam._m0[27u].z, fma(_663, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _659));
        float _702 = fma(_667, cbModelParam._m0[28u].z, fma(_663, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _659));
        float _727 = _659 + _424;
        float _728 = _663 + _425;
        float _729 = _667 + _426;
        float _739 = fma(_729, cbModelParam._m0[26u].z, fma(_728, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _727)) - _694;
        float _740 = fma(_729, cbModelParam._m0[27u].z, fma(_728, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _727)) - _698;
        float _741 = fma(_729, cbModelParam._m0[28u].z, fma(_728, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _727)) - _702;
        float _745 = inversesqrt(dot(vec3(_739, _740, _741), vec3(_739, _740, _741)));
        float _758 = ((_745 * _739) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_694 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _759 = ((_745 * _740) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_698 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _760 = ((_745 * _741) / cbModelParam._m0[34u].z) + ((((((_702 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_758, _759, _760), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_758, _759, _760), 0.0);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_758, _759, _760), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_758, _759, _760), 0.0);
        float _797 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_763.x + (-0.5));
        float _799 = _797 * (_763.y + (-0.5));
        float _800 = _797 * (_763.z + (-0.5));
        float _807 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_770.x + (-0.5));
        float _809 = _807 * (_770.y + (-0.5));
        float _810 = _807 * (_770.z + (-0.5));
        float _817 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_777.x + (-0.5));
        float _819 = _817 * (_777.y + (-0.5));
        float _820 = _817 * (_777.z + (-0.5));
        float _827 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_784.x + (-0.5));
        float _829 = _827 * (_784.y + (-0.5));
        float _830 = _827 * (_784.z + (-0.5));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _834 = _798 * 0.5;
        float _835 = _808 * 0.5;
        float _836 = _818 * 0.5;
        float _837 = dot(vec3(_834, _835, _836), vec3(_834, _835, _836));
        float _842 = (_837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_837);
        float _851 = (dot(vec3(_424, _425, _426), vec3(_842 * _834, _842 * _835, _842 * _836)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _861 = sqrt(((_835 * _835) + (_834 * _834)) + (_836 * _836)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _863 = _862 * 2.0;
        float _867 = (1.0 - _862) / (_862 + 1.0);
        float _3463 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _877 = ((((1.0 - _868) * (_863 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_863 + 1.0))) + _868) * _831;
        float _878 = _799 * 0.5;
        float _879 = _809 * 0.5;
        float _880 = _819 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _894 = (dot(vec3(_424, _425, _426), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _903 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3496 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_905 + 1.0))) + _910) * _832;
        float _920 = _800 * 0.5;
        float _921 = _810 * 0.5;
        float _922 = _820 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _936 = (dot(vec3(_424, _425, _426), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _945 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_833 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3529 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_947 + 1.0))) + _952) * _833;
        _969 = _800;
        _971 = _799;
        _972 = _798;
        _973 = _810;
        _974 = _809;
        _975 = _808;
        _976 = _820;
        _977 = _819;
        _978 = _818;
        _979 = _833;
        _980 = _832;
        _981 = _831;
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0)));
        _983 = cbModelParam._m0[36u].z * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
        _984 = cbModelParam._m0[36u].z * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
    }
    else
    {
        _969 = _970;
        _971 = _970;
        _972 = _970;
        _973 = _970;
        _974 = _970;
        _975 = _970;
        _976 = _970;
        _977 = _970;
        _978 = _970;
        _979 = _970;
        _980 = _970;
        _981 = _970;
        _982 = 0.0;
        _983 = 0.0;
        _984 = 0.0;
    }
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1010 = fma(_667, cbModelParam._m0[30u].z, fma(_663, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _659));
        float _1014 = fma(_667, cbModelParam._m0[31u].z, fma(_663, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _659));
        float _1018 = fma(_667, cbModelParam._m0[32u].z, fma(_663, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _659));
        float _1041 = _659 + _424;
        float _1042 = _663 + _425;
        float _1043 = _667 + _426;
        float _1053 = fma(_1043, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041)) - _1010;
        float _1054 = fma(_1043, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041)) - _1014;
        float _1055 = fma(_1043, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041)) - _1018;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1010 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1014 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[35u].z) + ((((((_1018 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1109 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1076.x + (-0.5));
        float _1111 = _1109 * (_1076.y + (-0.5));
        float _1112 = _1109 * (_1076.z + (-0.5));
        float _1119 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1083.x + (-0.5));
        float _1121 = _1119 * (_1083.y + (-0.5));
        float _1122 = _1119 * (_1083.z + (-0.5));
        float _1129 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1090.x + (-0.5));
        float _1131 = _1129 * (_1090.y + (-0.5));
        float _1132 = _1129 * (_1090.z + (-0.5));
        float _1139 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1097.x + (-0.5));
        float _1141 = _1139 * (_1097.y + (-0.5));
        float _1142 = _1139 * (_1097.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_424, _425, _426), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3592 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1173 + 1.0))) + _1178) * _1143;
        float _1188 = _1111 * 0.5;
        float _1189 = _1121 * 0.5;
        float _1190 = _1131 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_424, _425, _426), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3625 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1215 + 1.0))) + _1220) * _1144;
        float _1230 = _1112 * 0.5;
        float _1231 = _1122 * 0.5;
        float _1232 = _1132 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_424, _425, _426), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3658 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1257 + 1.0))) + _1262) * _1145;
        _1279 = _1112;
        _1280 = _1111;
        _1281 = _1110;
        _1282 = _1122;
        _1283 = _1121;
        _1284 = _1120;
        _1285 = _1132;
        _1286 = _1131;
        _1287 = _1130;
        _1288 = _1145;
        _1289 = _1144;
        _1290 = _1143;
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _970;
        _1280 = _970;
        _1281 = _970;
        _1282 = _970;
        _1283 = _970;
        _1284 = _970;
        _1285 = _970;
        _1286 = _970;
        _1287 = _970;
        _1288 = _970;
        _1289 = _970;
        _1290 = _970;
        _1291 = 0.0;
        _1292 = 0.0;
        _1293 = 0.0;
    }
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _982)) + _982;
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _983)) + _983;
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _984)) + _984;
    float _1326 = fma(_1305, cbSceneParam._m0[89u].z, fma(_1304, cbSceneParam._m0[89u].y, _1303 * cbSceneParam._m0[89u].x));
    float _1329 = fma(_1305, cbSceneParam._m0[90u].z, fma(_1304, cbSceneParam._m0[90u].y, _1303 * cbSceneParam._m0[90u].x));
    float _1332 = fma(_1305, cbSceneParam._m0[91u].z, fma(_1304, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1303));
    float _1347 = _603 * 0.5;
    float _1348 = _604 * 0.5;
    float _1349 = _605 * 0.5;
    float _1350 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1353 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1356 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1390;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1363 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_969, _973, _976, _979));
        float _1367 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_971, _974, _977, _980));
        float _1371 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_972, _975, _978, _981));
        float _1378 = dot(vec4(cbModelParam._m0[39u]), vec4(_1347, _1348, _1349, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1378) ? 0.0 : (isnan(0.0) ? _1378 : max(0.0, _1378))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1401;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1392 = dot(vec4(cbModelParam._m0[40u]), vec4(_1347, _1348, _1349, 1.0));
        _1401 = dot(vec3(isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1392) ? 0.0 : (isnan(0.0) ? _1392 : max(0.0, _1392))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1401 = 1.0;
    }
    float _1405 = (_1401 * cbModelParam._m0[1u].x) + (_1390 * (1.0 - cbModelParam._m0[1u].x));
    float _1415 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _427);
    float _1416 = isnan(_1415) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1415 : min(cbModelParam._m0[25u].z, _1415));
    float _1498;
    float _1500;
    float _1502;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1465 = fma(_667, cbModelParam._m0[13u].z, fma(_663, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _659)) + cbModelParam._m0[13u].w;
        float _1469 = fma(_667, cbModelParam._m0[14u].z, fma(_663, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _659)) + cbModelParam._m0[14u].w;
        float _1473 = fma(_667, cbModelParam._m0[15u].z, fma(_663, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _659)) + cbModelParam._m0[15u].w;
        float _1476 = fma(_605, cbModelParam._m0[13u].z, fma(_604, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _603));
        float _1479 = fma(_605, cbModelParam._m0[14u].z, fma(_604, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _603));
        float _1482 = fma(_605, cbModelParam._m0[15u].z, fma(_604, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _603));
        float _1510;
        if (_1476 > 0.0)
        {
            _1510 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1510 = frontier_phi_16_14_ladder;
        }
        float _1714;
        if (_1479 > 0.0)
        {
            _1714 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1714 = frontier_phi_25_21_ladder;
        }
        float _1968;
        if (_1482 > 0.0)
        {
            _1968 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1968 = frontier_phi_37_32_ladder;
        }
        float _1970 = isnan(_1714) ? _1510 : (isnan(_1510) ? _1714 : min(_1510, _1714));
        float _1971 = isnan(_1968) ? _1970 : (isnan(_1970) ? _1968 : min(_1970, _1968));
        float _1975 = (_1971 * _1476) + _1465;
        float _1976 = (_1971 * _1479) + _1469;
        float _1977 = (_1971 * _1482) + _1473;
        float _1978 = _1971 * 9.9999997473787516355514526367188e-05;
        float _1980 = (-1.0) - _1978;
        float _1982 = _1978 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1977 > _1982) || ((_1977 < _1980) || ((_1976 > _1982) || ((_1976 < _1980) || ((_1975 < _1980) || (_1975 > _1982))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2105 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1977, cbModelParam._m0[9u].z, fma(_1976, cbModelParam._m0[9u].y, _1975 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1977, cbModelParam._m0[10u].z, fma(_1976, cbModelParam._m0[10u].y, _1975 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1977, cbModelParam._m0[11u].z, fma(_1976, cbModelParam._m0[11u].y, _1975 * cbModelParam._m0[11u].x))), _1416);
            frontier_phi_15_37_ladder = _2105.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2105.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2105.x * cbModelParam._m0[1u].y;
        }
        _1498 = frontier_phi_15_37_ladder_2;
        _1500 = frontier_phi_15_37_ladder_1;
        _1502 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1486 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_603, _604, _605), _1416);
        _1498 = _1486.x * cbModelParam._m0[1u].y;
        _1500 = _1486.y * cbModelParam._m0[1u].y;
        _1502 = _1486.z * cbModelParam._m0[1u].y;
    }
    float _1506 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _427);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1506 : min(cbModelParam._m0[25u].w, _1506));
    float _1597;
    float _1599;
    float _1601;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1561 = fma(_667, cbModelParam._m0[21u].z, fma(_663, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _659)) + cbModelParam._m0[21u].w;
        float _1565 = fma(_667, cbModelParam._m0[22u].z, fma(_663, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _659)) + cbModelParam._m0[22u].w;
        float _1569 = fma(_667, cbModelParam._m0[23u].z, fma(_663, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _659)) + cbModelParam._m0[23u].w;
        float _1572 = fma(_605, cbModelParam._m0[21u].z, fma(_604, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _603));
        float _1575 = fma(_605, cbModelParam._m0[22u].z, fma(_604, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _603));
        float _1578 = fma(_605, cbModelParam._m0[23u].z, fma(_604, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _603));
        float _1719;
        if (_1572 > 0.0)
        {
            _1719 = abs((1.0 - _1561) / _1572);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1561 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1719 = frontier_phi_27_23_ladder;
        }
        float _1995;
        if (_1575 > 0.0)
        {
            _1995 = abs((1.0 - _1565) / _1575);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1565 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1995 = frontier_phi_39_34_ladder;
        }
        float _2208;
        if (_1578 > 0.0)
        {
            _2208 = abs((1.0 - _1569) / _1578);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1569 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2208 = frontier_phi_48_45_ladder;
        }
        float _2210 = isnan(_1995) ? _1719 : (isnan(_1719) ? _1995 : min(_1719, _1995));
        float _2211 = isnan(_2208) ? _2210 : (isnan(_2210) ? _2208 : min(_2210, _2208));
        float _2215 = (_2211 * _1572) + _1561;
        float _2216 = (_2211 * _1575) + _1565;
        float _2217 = (_2211 * _1578) + _1569;
        float _2218 = _2211 * 9.9999997473787516355514526367188e-05;
        float _2219 = (-1.0) - _2218;
        float _2221 = _2218 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2217 > _2221) || ((_2217 < _2219) || ((_2216 > _2221) || ((_2216 < _2219) || ((_2215 < _2219) || (_2215 > _2221))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2217, cbModelParam._m0[17u].z, fma(_2216, cbModelParam._m0[17u].y, _2215 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2217, cbModelParam._m0[18u].z, fma(_2216, cbModelParam._m0[18u].y, _2215 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2217, cbModelParam._m0[19u].z, fma(_2216, cbModelParam._m0[19u].y, _2215 * cbModelParam._m0[19u].x))), _1507);
            frontier_phi_24_48_ladder = _2418.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2418.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2418.x * cbModelParam._m0[1u].z;
        }
        _1597 = frontier_phi_24_48_ladder_2;
        _1599 = frontier_phi_24_48_ladder_1;
        _1601 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1581 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_603, _604, _605), _1507);
        _1597 = _1581.x * cbModelParam._m0[1u].z;
        _1599 = _1581.y * cbModelParam._m0[1u].z;
        _1601 = _1581.z * cbModelParam._m0[1u].z;
    }
    float _1614 = (((_630 * _580) + _631) * _595) * ((cbModelParam._m0[1u].w * (_1597 - _1498)) + _1498);
    float _1616 = (((_630 * _582) + _631) * _595) * ((cbModelParam._m0[1u].w * (_1599 - _1500)) + _1500);
    float _1618 = (((_630 * _583) + _631) * _595) * ((cbModelParam._m0[1u].w * (_1601 - _1502)) + _1502);
    float _1621 = fma(_1618, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1614 * cbSceneParam._m0[89u].x));
    float _1624 = fma(_1618, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1614 * cbSceneParam._m0[90u].x));
    float _1627 = fma(_1618, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, _1614 * cbSceneParam._m0[91u].x));
    uvec4 _1637 = floatBitsToUint(cbInstanceData._m0[_554 + 5u]);
    uint _1639 = _1637.x * 14u;
    uint _1640 = _1639 + 13u;
    float _1647 = _595 + (-1.0);
    float _1652 = (cbLight._m0[_1640].x * _1647) + 1.0;
    float _1653 = (cbLight._m0[_1640].y * _1647) + 1.0;
    float _1654 = (cbLight._m0[_1640].z * _1647) + 1.0;
    float _1655 = (cbLight._m0[_1640].w * _1647) + 1.0;
    uint _1656 = _1639 + 5u;
    float _1662 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
    uint _1666 = _1639 + 4u;
    float _1672 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
    uint _1676 = _1639 | 1u;
    float _1687 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_424, _425, _426));
    float _1690 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_424, _425, _426));
    float _3794 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _3805 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1695 = (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.3183098733425140380859375;
    float _1697 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.3183098733425140380859375;
    float _1704 = ((cbLight._m0[_1656].x * _1662) * _1697) + ((cbLight._m0[_1666].x * _1672) * _1695);
    float _1705 = ((_1662 * cbLight._m0[_1656].y) * _1697) + ((_1672 * cbLight._m0[_1666].y) * _1695);
    float _1706 = ((_1662 * cbLight._m0[_1656].z) * _1697) + ((_1672 * cbLight._m0[_1666].z) * _1695);
    uvec4 _1711 = floatBitsToUint(cbLight._m0[_1639 + 12u]);
    bool _1713 = _1711.x == 0u;
    float _1724;
    float _1726;
    float _1728;
    if (_1713)
    {
        _1724 = _1704;
        _1726 = _1705;
        _1728 = _1706;
    }
    else
    {
        uint _1732 = _1639 + 6u;
        float _1748 = (dot(vec3(cbLight._m0[_1639 + 2u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _1749 = _1748 * _1748;
        float _3816 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1751 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _1724 = (((cbLight._m0[_1732].x * 0.3183098733425140380859375) * _1750) * _1751) + _1704;
        _1726 = (((cbLight._m0[_1732].y * 0.3183098733425140380859375) * _1750) * _1751) + _1705;
        _1728 = (((cbLight._m0[_1732].z * 0.3183098733425140380859375) * _1750) * _1751) + _1706;
    }
    bool _1731 = _1711.y == 0u;
    float _1769;
    float _1771;
    float _1773;
    if (_1731)
    {
        _1769 = _1724;
        _1771 = _1726;
        _1773 = _1728;
    }
    else
    {
        uint _1939 = _1639 + 7u;
        float _1955 = (dot(vec3(cbLight._m0[_1639 + 3u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _1956 = _1955 * _1955;
        float _3832 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1957 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1958 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
        _1769 = (((cbLight._m0[_1939].x * 0.3183098733425140380859375) * _1957) * _1958) + _1724;
        _1771 = (((cbLight._m0[_1939].y * 0.3183098733425140380859375) * _1957) * _1958) + _1726;
        _1773 = (((cbLight._m0[_1939].z * 0.3183098733425140380859375) * _1957) * _1958) + _1728;
    }
    uint _1776 = _1639 + 8u;
    float _1789 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1639].w)) * _427) * 0.949999988079071044921875);
    float _1790 = _1789 * _1789;
    float _1791 = cbLight._m0[_1639].x + _507;
    float _1792 = cbLight._m0[_1639].y + _508;
    float _1793 = cbLight._m0[_1639].z + _509;
    float _1797 = inversesqrt(dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793)));
    float _1798 = _1797 * _1791;
    float _1799 = _1797 * _1792;
    float _1800 = _1797 * _1793;
    float _1801 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_1639].xyz));
    float _3848 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _1805 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _1806 = dot(vec3(_424, _425, _426), vec3(_1798, _1799, _1800));
    float _3870 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1810 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_1798, _1799, _1800));
    float _3881 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1814 = _1790 * _1790;
    float _1818 = ((_1809 * _1809) * (_1814 + (-1.0))) + 1.0;
    float _1826 = exp2(log2(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * 5.0);
    float _1827 = 0.959999978542327880859375 - _577;
    float _1829 = 0.959999978542327880859375 - _578;
    float _1830 = 0.959999978542327880859375 - _579;
    float _1837 = 1.0 - _1790;
    float _1848 = (0.5 / (((_1805 * ((_1804 * _1837) + _1790)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _1837) + _1790) * _1804))) * _1804;
    float _3892 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1850 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1814 / ((_1818 * _1818) * 3.141590118408203125));
    uint _1861 = _1639 + 9u;
    float _1872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1676].w)) * _427) * 0.949999988079071044921875);
    float _1873 = _1872 * _1872;
    float _1874 = cbLight._m0[_1676].x + _507;
    float _1875 = cbLight._m0[_1676].y + _508;
    float _1876 = cbLight._m0[_1676].z + _509;
    float _1880 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
    float _1881 = _1880 * _1874;
    float _1882 = _1880 * _1875;
    float _1883 = _1880 * _1876;
    float _1884 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_1676].xyz));
    float _3903 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1888 = dot(vec3(_424, _425, _426), vec3(_1881, _1882, _1883));
    float _3914 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1892 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_1881, _1882, _1883));
    float _3925 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1896 = _1873 * _1873;
    float _1900 = ((_1891 * _1891) * (_1896 + (-1.0))) + 1.0;
    float _1907 = exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0);
    float _1914 = 1.0 - _1873;
    float _1924 = (0.5 / (((_1805 * ((_1887 * _1914) + _1873)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _1914) + _1873) * _1887))) * _1887;
    float _3936 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1926 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1896 / ((_1900 * _1900) * 3.141590118408203125));
    float _1936 = (((((_1907 * _1827) + _580) * cbLight._m0[_1861].x) * _1926) * _1662) + (((((_1826 * _1827) + _580) * cbLight._m0[_1776].x) * _1850) * _1672);
    float _1937 = (((((_1907 * _1829) + _582) * cbLight._m0[_1861].y) * _1926) * _1662) + (((((_1826 * _1829) + _582) * cbLight._m0[_1776].y) * _1850) * _1672);
    float _1938 = (((((_1907 * _1830) + _583) * cbLight._m0[_1861].z) * _1926) * _1662) + (((((_1826 * _1830) + _583) * cbLight._m0[_1776].z) * _1850) * _1672);
    float _2000;
    float _2002;
    float _2004;
    if (_1713)
    {
        _2000 = _1936;
        _2002 = _1937;
        _2004 = _1938;
    }
    else
    {
        uint _2006 = _1639 + 2u;
        uint _2010 = _1639 + 10u;
        float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _427) * 0.949999988079071044921875);
        float _2025 = _2024 * _2024;
        float _2026 = cbLight._m0[_2006].x + _507;
        float _2027 = cbLight._m0[_2006].y + _508;
        float _2028 = cbLight._m0[_2006].z + _509;
        float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
        float _2033 = _2032 * _2026;
        float _2034 = _2032 * _2027;
        float _2035 = _2032 * _2028;
        float _2036 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2006].xyz));
        float _3947 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2039 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _2040 = dot(vec3(_424, _425, _426), vec3(_2033, _2034, _2035));
        float _3958 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2043 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _2044 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2033, _2034, _2035));
        float _3969 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2048 = _2025 * _2025;
        float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
        float _2059 = exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0);
        float _2066 = 1.0 - _2025;
        float _2076 = (0.5 / (((_1805 * ((_2039 * _2066) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _2066) + _2025) * _2039))) * _2039;
        float _3980 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2078 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
        float _2079 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _2000 = (((((_2059 * _1827) + _580) * cbLight._m0[_2010].x) * _2078) * _2079) + _1936;
        _2002 = (((((_2059 * _1829) + _582) * cbLight._m0[_2010].y) * _2078) * _2079) + _1937;
        _2004 = (((((_2059 * _1830) + _583) * cbLight._m0[_2010].z) * _2078) * _2079) + _1938;
    }
    float _2114;
    float _2116;
    float _2118;
    if (_1731)
    {
        _2114 = _2000;
        _2116 = _2002;
        _2118 = _2004;
    }
    else
    {
        uint _2125 = _1639 + 3u;
        uint _2129 = _1639 + 11u;
        float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _427) * 0.949999988079071044921875);
        float _2144 = _2143 * _2143;
        float _2145 = cbLight._m0[_2125].x + _507;
        float _2146 = cbLight._m0[_2125].y + _508;
        float _2147 = cbLight._m0[_2125].z + _509;
        float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
        float _2152 = _2151 * _2145;
        float _2153 = _2151 * _2146;
        float _2154 = _2151 * _2147;
        float _2155 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2125].xyz));
        float _3996 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _2159 = dot(vec3(_424, _425, _426), vec3(_2152, _2153, _2154));
        float _4007 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2163 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2152, _2153, _2154));
        float _4018 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2167 = _2144 * _2144;
        float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
        float _2178 = exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0);
        float _2185 = 1.0 - _2144;
        float _2195 = (0.5 / (((_1805 * ((_2158 * _2185) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _2185) + _2144) * _2158))) * _2158;
        float _4029 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2197 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
        float _2198 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
        _2114 = (((((_2178 * _1827) + _580) * cbLight._m0[_2129].x) * _2197) * _2198) + _2000;
        _2116 = (((((_2178 * _1829) + _582) * cbLight._m0[_2129].y) * _2197) * _2198) + _2002;
        _2118 = (((((_2178 * _1830) + _583) * cbLight._m0[_2129].z) * _2197) * _2198) + _2004;
    }
    float _2332;
    float _2334;
    float _2336;
    float _2338;
    float _2340;
    float _2342;
    if (_1637.y == 0u)
    {
        float _2273 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2274 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2273;
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2273;
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2273;
        uvec4 _2288 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2289 = _2288.x;
        uint _2300 = uint((float(_2288.y) * floor(float(uint(cbSceneParam._m0[85u].y * _516) / _2289))) + floor(float(uint(cbSceneParam._m0[85u].x * _515) / _2289)));
        float _2310 = (log2(_2276 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2311 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        uint _2314 = uint(isnan(14.0) ? _2311 : (isnan(_2311) ? 14.0 : min(_2311, 14.0)));
        uvec4 _2319 = texelFetch(g_lightClusterGridBuffer, int(((_2314 << 2u) + (_2300 << 6u)) >> 2u));
        uint _2320 = _2319.x;
        uint _2321 = _2288.z;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        if (((((1u << ((_2321 >> 4u) & 15u)) + 4294967295u) & _2320) == 0u) || ((_2321 & 240u) == 0u))
        {
            _2423 = 0.0;
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
        }
        else
        {
            float _2424;
            float _2426;
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            uint _2573 = 0u;
            uint _2582;
            bool _2583;
            for (;;)
            {
                _2582 = texelFetch(g_lightClassification, int((((_2314 << 5u) + (_2300 << 9u)) + (_2573 << 2u)) >> 2u)).x;
                _2583 = _2582 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2583)
                {
                    frontier_phi_63_pred = _2572;
                    frontier_phi_63_pred_1 = _2571;
                    frontier_phi_63_pred_2 = _2570;
                    frontier_phi_63_pred_3 = _2569;
                    frontier_phi_63_pred_4 = _2568;
                    frontier_phi_63_pred_5 = _2567;
                }
                else
                {
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    uint _2697;
                    _2691 = _2567;
                    _2692 = _2568;
                    _2693 = _2569;
                    _2694 = _2570;
                    _2695 = _2571;
                    _2696 = _2572;
                    _2697 = _2582;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    for (;;)
                    {
                        uint _2701 = uint(findLSB(_2697)) + (_2573 << 5u);
                        uint _2698 = (_2697 + 4294967295u) & _2697;
                        uint _2703 = _2701 * 48u;
                        vec4 _2717 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2703)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 3u)).x));
                        uint _2723 = (_2701 * 48u) + 4u;
                        vec4 _2736 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 3u)).x));
                        uint _2742 = (_2701 * 48u) + 8u;
                        vec3 _2753 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2742)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 2u)).x));
                        float _2757 = _2717.x - _2274;
                        float _2758 = _2717.y - _2275;
                        float _2759 = _2717.z - _2276;
                        float _2760 = dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759));
                        float _2763 = inversesqrt(_2760);
                        float _2764 = _2763 * _2757;
                        float _2765 = _2763 * _2758;
                        float _2766 = _2763 * _2759;
                        float _2767 = dot(vec3(_535, _538, _541), vec3(_2764, _2765, _2766));
                        float _2772 = 1.0 - (_2760 * _2717.w);
                        float _4055 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2773 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2774 = sqrt(_2760) * _2736.w;
                        float _2777 = 1.39999997615814208984375 / (_2774 + 1.39999997615814208984375);
                        float _2778 = _2777 * _2777;
                        float _2781 = ((1.0 - _2778) * _2767) + _2778;
                        float _2784 = _2774 * _2774;
                        float _2788 = ((isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0))) * _2773) / ((_2784 * 0.699999988079071044921875) + 1.0);
                        float _2792 = (-0.0) - _2274;
                        float _2793 = (-0.0) - _2275;
                        float _2794 = (-0.0) - _2276;
                        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
                        float _2799 = _2798 * _2792;
                        float _2800 = _2798 * _2793;
                        float _2801 = _2798 * _2794;
                        float _2809 = exp2(log2(1.0 / ((_2784 * 3.5) + 5.0)) * 0.25);
                        float _2810 = 1.0 - _611;
                        float _2817 = sqrt(1.0 - ((1.0 - (_2810 * _2810)) * (1.0 - (_2809 * _2809))));
                        float _2818 = _2817 * _2817;
                        float _2819 = _2818 * _2818;
                        float _2820 = _2799 + _2764;
                        float _2821 = _2800 + _2765;
                        float _2822 = _2801 + _2766;
                        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
                        float _2830 = dot(vec3(_535, _538, _541), vec3(_2799, _2800, _2801));
                        float _4071 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2833 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2834 = dot(vec3(_535, _538, _541), vec3(_2826 * _2820, _2826 * _2821, _2826 * _2822));
                        float _4082 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2837 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2841 = ((_2837 * _2837) * (_2819 + (-1.0))) + 1.0;
                        float _2842 = _2777 * _2818;
                        float _2843 = _2842 * _2842;
                        float _2846 = ((1.0 - _2843) * _2767) + _2843;
                        float _4093 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2847 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2848 = 1.0 - _2818;
                        float _2858 = (0.5 / (((_2847 * ((_2833 * _2848) + _2818)) + 9.9999999392252902907785028219223e-09) + (((_2847 * _2848) + _2818) * _2833))) * _2847;
                        float _4104 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2869 = (((_2819 * 3.1415927410125732421875) * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) / ((_2841 * _2841) * ((_2784 * 2.1991131305694580078125) + 3.141590118408203125))) * _2773;
                        _2626 = (_2788 * _2736.x) + _2694;
                        _2627 = (_2788 * _2736.y) + _2695;
                        _2628 = (_2788 * _2736.z) + _2696;
                        _2623 = (_2869 * _2753.x) + _2691;
                        _2624 = (_2869 * _2753.y) + _2692;
                        _2625 = (_2869 * _2753.z) + _2693;
                        if (_2698 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2691 = _2623;
                            _2692 = _2624;
                            _2693 = _2625;
                            _2694 = _2626;
                            _2695 = _2627;
                            _2696 = _2628;
                            _2697 = _2698;
                        }
                    }
                    frontier_phi_63_pred = _2628;
                    frontier_phi_63_pred_1 = _2627;
                    frontier_phi_63_pred_2 = _2626;
                    frontier_phi_63_pred_3 = _2625;
                    frontier_phi_63_pred_4 = _2624;
                    frontier_phi_63_pred_5 = _2623;
                }
                _2434 = frontier_phi_63_pred;
                _2432 = frontier_phi_63_pred_1;
                _2430 = frontier_phi_63_pred_2;
                _2428 = frontier_phi_63_pred_3;
                _2426 = frontier_phi_63_pred_4;
                _2424 = frontier_phi_63_pred_5;
                uint _2574 = _2573 + 1u;
                if (_2574 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2567 = _2424;
                    _2568 = _2426;
                    _2569 = _2428;
                    _2570 = _2430;
                    _2571 = _2432;
                    _2572 = _2434;
                    _2573 = _2574;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2423 = _2424;
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
        }
        uvec4 _2437 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2438 = _2437.z;
        uint _2440 = (_2438 >> 8u) & 15u;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        if (((4294967295u << _2440) & _2320) == 0u)
        {
            _2535 = _2423;
            _2537 = _2425;
            _2539 = _2427;
            _2541 = _2429;
            _2543 = _2431;
            _2545 = _2433;
        }
        else
        {
            float _2560 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
            float _2561 = _2560 * _2274;
            float _2562 = _2560 * _2275;
            float _2563 = _2560 * _2276;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2440 < ((_2438 >> 12u) & 15u))
            {
                float _2536;
                float _2538;
                float _2540;
                float _2542;
                float _2544;
                float _2546;
                float _2674 = _2423;
                float _2675 = _2425;
                float _2676 = _2427;
                float _2677 = _2429;
                float _2678 = _2431;
                float _2679 = _2433;
                uint _2680 = _2440;
                uint _2689;
                bool _2690;
                for (;;)
                {
                    _2689 = texelFetch(g_lightClassification, int((((_2314 << 5u) + (_2300 << 9u)) + (_2680 << 2u)) >> 2u)).x;
                    _2690 = _2689 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2690)
                    {
                        frontier_phi_69_pred = _2679;
                        frontier_phi_69_pred_1 = _2678;
                        frontier_phi_69_pred_2 = _2677;
                        frontier_phi_69_pred_3 = _2676;
                        frontier_phi_69_pred_4 = _2675;
                        frontier_phi_69_pred_5 = _2674;
                    }
                    else
                    {
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _2887 = _2674;
                        float _2888 = _2675;
                        float _2889 = _2676;
                        float _2890 = _2677;
                        float _2891 = _2678;
                        float _2892 = _2679;
                        uint _2893 = _2689;
                        uint _2894;
                        vec4 _2919;
                        float _2920;
                        vec4 _2935;
                        vec3 _2947;
                        vec4 _2963;
                        vec4 _2978;
                        float _3025;
                        bool _3026;
                        for (;;)
                        {
                            uint _2904 = ((_2680 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2893));
                            _2894 = (_2893 + 4294967295u) & _2893;
                            uint _2906 = _2904 * 40u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            _2920 = _2919.w;
                            uint _2922 = (_2904 * 40u) + 4u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            uint _2937 = (_2904 * 40u) + 8u;
                            _2947 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x));
                            uint _2950 = (_2904 * 40u) + 16u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2965 = (_2904 * 40u) + 20u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2981 = (_2904 * 40u) + 24u;
                            vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _3000 = (_2904 * 40u) + 28u;
                            vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            _3025 = fma(_2276, _3013.z, fma(_2275, _3013.y, _3013.x * _2274)) + _3013.w;
                            _3026 = !((fma(_2276, _2994.z, fma(_2275, _2994.y, _2994.x * _2274)) + _2994.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3026)
                            {
                                float _3053 = _2919.x - _2274;
                                float _3054 = _2919.y - _2275;
                                float _3055 = _2919.z - _2276;
                                float _3056 = dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055));
                                float _3059 = inversesqrt(_3056);
                                float _3060 = _3059 * _3053;
                                float _3061 = _3059 * _3054;
                                float _3062 = _3059 * _3055;
                                float _3066 = 1.0 - (_3056 / (_2920 * _2920));
                                float _4115 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3067 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3071 = sqrt(_3056) * _2935.w;
                                float _3073 = 1.39999997615814208984375 / (_3071 + 1.39999997615814208984375);
                                float _3074 = _3073 * _3073;
                                float _3077 = ((1.0 - _3074) * dot(vec3(_3060, _3061, _3062), vec3(_535, _538, _541))) + _3074;
                                float _3080 = _3071 * _3071;
                                float _3084 = (fma(_2276, _2963.z, fma(_2275, _2963.y, _2963.x * _2274)) + _2963.w) / _3025;
                                float _3085 = (fma(_2276, _2978.z, fma(_2275, _2978.y, _2978.x * _2274)) + _2978.w) / _3025;
                                float _3089 = 1.0 - dot(vec2(_3084, _3085), vec2(_3084, _3085));
                                float _4131 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3091 = _3090 * (((isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))) * _3067) / ((_3080 * 0.699999988079071044921875) + 1.0));
                                float _3103 = exp2(log2(1.0 / ((_3080 * 3.5) + 5.0)) * 0.25);
                                float _3104 = 1.0 - _611;
                                float _3111 = sqrt(1.0 - ((1.0 - (_3104 * _3104)) * (1.0 - (_3103 * _3103))));
                                float _3112 = _3111 * _3111;
                                float _3113 = _3112 * _3112;
                                float _3114 = _3060 - _2561;
                                float _3115 = _3061 - _2562;
                                float _3116 = _3062 - _2563;
                                float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                                float _3124 = dot(vec3(_535, _538, _541), vec3((-0.0) - _2561, (-0.0) - _2562, (-0.0) - _2563));
                                float _4142 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3127 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3128 = dot(vec3(_535, _538, _541), vec3(_3120 * _3114, _3120 * _3115, _3120 * _3116));
                                float _4153 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3131 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3135 = ((_3131 * _3131) * (_3113 + (-1.0))) + 1.0;
                                float _3136 = _3073 * _3112;
                                float _3137 = _3136 * _3136;
                                float _3143 = ((1.0 - _3137) * dot(vec3(_535, _538, _541), vec3(_3060, _3061, _3062))) + _3137;
                                float _4164 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3145 = 1.0 - _3112;
                                float _3155 = (0.5 / (((_3144 * ((_3127 * _3145) + _3112)) + 9.9999999392252902907785028219223e-09) + (((_3144 * _3145) + _3112) * _3127))) * _3144;
                                float _4175 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3165 = (_3090 * _3067) * (((_3113 * 3.1415927410125732421875) * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) / ((_3135 * _3135) * ((_3080 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3091 * _2935.z;
                                frontier_phi_75_pred_1 = _3091 * _2935.y;
                                frontier_phi_75_pred_2 = _3091 * _2935.x;
                                frontier_phi_75_pred_3 = _3165 * _2947.z;
                                frontier_phi_75_pred_4 = _3165 * _2947.y;
                                frontier_phi_75_pred_5 = _3165 * _2947.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3174 = frontier_phi_75_pred;
                            _3173 = frontier_phi_75_pred_1;
                            _3172 = frontier_phi_75_pred_2;
                            _3171 = frontier_phi_75_pred_3;
                            _3170 = frontier_phi_75_pred_4;
                            _3169 = frontier_phi_75_pred_5;
                            _2877 = _3172 + _2890;
                            _2878 = _3173 + _2891;
                            _2879 = _3174 + _2892;
                            _2874 = _3169 + _2887;
                            _2875 = _3170 + _2888;
                            _2876 = _3171 + _2889;
                            if (_2894 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2894;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2879;
                        frontier_phi_69_pred_1 = _2878;
                        frontier_phi_69_pred_2 = _2877;
                        frontier_phi_69_pred_3 = _2876;
                        frontier_phi_69_pred_4 = _2875;
                        frontier_phi_69_pred_5 = _2874;
                    }
                    _2546 = frontier_phi_69_pred;
                    _2544 = frontier_phi_69_pred_1;
                    _2542 = frontier_phi_69_pred_2;
                    _2540 = frontier_phi_69_pred_3;
                    _2538 = frontier_phi_69_pred_4;
                    _2536 = frontier_phi_69_pred_5;
                    uint _2681 = _2680 + 1u;
                    if (_2681 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2674 = _2536;
                        _2675 = _2538;
                        _2676 = _2540;
                        _2677 = _2542;
                        _2678 = _2544;
                        _2679 = _2546;
                        _2680 = _2681;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2546;
                frontier_phi_57_58_ladder_1 = _2544;
                frontier_phi_57_58_ladder_2 = _2542;
                frontier_phi_57_58_ladder_3 = _2540;
                frontier_phi_57_58_ladder_4 = _2538;
                frontier_phi_57_58_ladder_5 = _2536;
            }
            else
            {
                frontier_phi_57_58_ladder = _2433;
                frontier_phi_57_58_ladder_1 = _2431;
                frontier_phi_57_58_ladder_2 = _2429;
                frontier_phi_57_58_ladder_3 = _2427;
                frontier_phi_57_58_ladder_4 = _2425;
                frontier_phi_57_58_ladder_5 = _2423;
            }
            _2535 = frontier_phi_57_58_ladder_5;
            _2537 = frontier_phi_57_58_ladder_4;
            _2539 = frontier_phi_57_58_ladder_3;
            _2541 = frontier_phi_57_58_ladder_2;
            _2543 = frontier_phi_57_58_ladder_1;
            _2545 = frontier_phi_57_58_ladder;
        }
        float _2550 = isnan(1.0) ? _595 : (isnan(_595) ? 1.0 : min(_595, 1.0));
        _2332 = (_2550 * _2541) + _1769;
        _2334 = (_2550 * _2543) + _1771;
        _2336 = (_2550 * _2545) + _1773;
        _2338 = ((_2535 * _580) * _2550) + _2114;
        _2340 = ((_2537 * _582) * _2550) + _2116;
        _2342 = ((_2539 * _583) * _2550) + _2118;
    }
    else
    {
        _2332 = _1769;
        _2334 = _1771;
        _2336 = _1773;
        _2338 = _2114;
        _2340 = _2116;
        _2342 = _2118;
    }
    float _4191 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4202 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4213 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _2359 = ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2332 + ((isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))) * _595))) + ((_2338 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _1405)) * cbPerFrame._m0[3u].x);
    float _2360 = ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2334 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _595))) + ((_2340 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1405)) * cbPerFrame._m0[3u].x);
    float _2361 = ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2336 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _595))) + ((_2342 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1405)) * cbPerFrame._m0[3u].x);
    uint _2365 = _554 + 6u;
    float _2373 = _515 / cbSceneParam._m0[86u].x;
    float _2374 = _516 / cbSceneParam._m0[86u].y;
    vec4 _2388 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2373, _2374, (log2((isnan(cbSceneParam._m0[77u].w) ? _447 : (isnan(_447) ? cbSceneParam._m0[77u].w : min(_447, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2390 = _2388.x;
    float _2391 = _2388.y;
    float _2392 = _2388.z;
    float _2393 = _2388.w;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    if (_447 > cbSceneParam._m0[78u].w)
    {
        float _2448 = isnan(_447) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _447 : min(cbSceneParam._m0[80u].w, _447));
        float _2449 = _2448 / _447;
        float _2460 = _2449 * _500;
        float _2461 = _501 * _2449;
        float _2462 = (-0.0) - _2461;
        float _2463 = _2449 * _502;
        float _2465 = (cbSceneParam._m0[77u].w * _2462) / _2448;
        float _2466 = _2465 + cbSceneParam._m0[79u].w;
        float _2467 = cbSceneParam._m0[79u].w - _2461;
        float _2473 = sqrt(((_2460 * _2460) + (_2461 * _2461)) + (_2463 * _2463));
        float _2476 = (1.0 - (cbSceneParam._m0[77u].w / _2448)) * _2473;
        float _2481 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2483 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2636;
        if (abs((_2462 - _2465) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2636 = ((((_2466 > 0.0) ? exp2(_2481 * _2466) : (2.0 - exp2(_2483 * _2466))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2476;
        }
        else
        {
            float _2596 = 1.0 / cbSceneParam._m0[80u].x;
            float _2597 = isnan(_2467) ? _2466 : (isnan(_2466) ? _2467 : max(_2466, _2467));
            float _2598 = isnan(_2467) ? _2466 : (isnan(_2466) ? _2467 : min(_2466, _2467));
            float _2607 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : min(_2597, 0.0));
            float _2608 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : min(_2598, 0.0));
            _2636 = ((abs(_2473 / _2462) * cbSceneParam._m0[80u].y) * ((((_2607 - _2608) * 2.0) - ((exp2(_2481 * (isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0)))) - exp2(_2481 * (isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0))))) * _2596)) - ((exp2(_2483 * _2607) - exp2(_2483 * _2608)) * _2596))) + (_2476 * cbSceneParam._m0[80u].z);
        }
        vec4 _2638 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2373, _2374, 1.0), 0.0);
        float _2647 = exp2((_2636 * (-1.44269502162933349609375)) * (1.0 - _2638.w));
        float _2648 = log2(_2647);
        float _2664 = log2(_2393);
        _2485 = (exp2(_2664 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2648 * cbSceneParam._m0[78u].x)) * _2638.x) / cbSceneParam._m0[78u].x)) + _2390;
        _2487 = (exp2(_2664 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2648 * cbSceneParam._m0[78u].y)) * _2638.y) / cbSceneParam._m0[78u].y)) + _2391;
        _2489 = (exp2(_2664 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2648 * cbSceneParam._m0[78u].z)) * _2638.z) / cbSceneParam._m0[78u].z)) + _2392;
        _2491 = _2647 * _2393;
    }
    else
    {
        _2485 = _2390;
        _2487 = _2391;
        _2489 = _2392;
        _2491 = _2393;
    }
    float _2503 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2504 = _2503 == 3.0;
    float _2505 = log2(_2491);
    float _2512 = exp2(_2505 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0)));
    float _2513 = exp2(_2505 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0)));
    float _2514 = exp2(_2505 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0)));
    float _2523 = (_2503 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2523 * (_2504 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2485)));
    SV_Target.y = _2523 * (_2504 ? _2513 : (_2513 + (cbSceneParam._m0[72u].w * _2487)));
    SV_Target.z = _2523 * (_2504 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2489)));
    SV_Target.w = cbInstanceData._m0[_2365].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2365].w;
}


