#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_snp_0_Texture2D_3;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_Enemy_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_Enemy_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_Enemy_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1252;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _254 = texture(sampler2D(C_Enemy_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _268 = exp2(log2(_254.w * cbMtdParam._m0[24u].y) * cbMtdParam._m0[21u].y);
    float _269 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _270 = isnan(1.0) ? _269 : (isnan(_269) ? 1.0 : min(_269, 1.0));
    vec4 _284 = texture(sampler2D(C_Enemy_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _284.z;
    float _297 = exp2(log2(_288 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _312 = texture(sampler2D(C_Enemy_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _337 = texture(sampler2D(C_Enemy_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _348 = cbMtdParam._m0[9u].x * _337.x;
    float _349 = cbMtdParam._m0[9u].y * _337.y;
    float _350 = cbMtdParam._m0[9u].z * _337.z;
    float _357 = (((cbMtdParam._m0[10u].x * _312.x) - _348) * _299) + _348;
    float _358 = (((cbMtdParam._m0[10u].y * _312.y) - _349) * _299) + _349;
    float _359 = (((cbMtdParam._m0[10u].z * _312.z) - _350) * _299) + _350;
    float _366 = exp2(log2(_284.w) * cbMtdParam._m0[22u].y);
    vec4 _379 = texture(sampler2D(C_Enemy_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _398 = (((cbMtdParam._m0[12u].x * _379.x) - _357) * _366) + _357;
    float _399 = (((cbMtdParam._m0[12u].y * _379.y) - _358) * _366) + _358;
    float _400 = (((cbMtdParam._m0[12u].z * _379.z) - _359) * _366) + _359;
    vec4 _413 = texture(sampler2D(C_Enemy_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _437 = (_254.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _413.x) - _398) * _270) + _398);
    float _439 = (_254.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _413.y) - _399) * _270) + _399);
    float _441 = (_254.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _413.z) - _400) * _270) + _400);
    float _473 = cbMtdParam._m0[23u].z + texture(sampler2D(C_Enemy_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x;
    float _476 = ((texture(sampler2D(C_Enemy_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _473) * _299) + _473;
    float _496 = (((texture(sampler2D(C_Enemy_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _476) + cbMtdParam._m0[21u].z) * _366) + _476;
    float _516 = (((texture(sampler2D(C_Enemy_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x - _496) + cbMtdParam._m0[24u].z) * _270) + _496;
    vec4 _530 = texture(sampler2D(C_Enemy_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    vec4 _549 = texture(sampler2D(C_Enemy_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _555 = cbMtdParam._m0[20u].x + _549.z;
    float _558 = (((cbMtdParam._m0[21u].x + _530.z) - _555) * _299) + _555;
    vec4 _570 = texture(sampler2D(C_Enemy_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _579 = (((_570.z - _558) + cbMtdParam._m0[24u].x) * _366) + _558;
    float _585 = ((((_288 * 2.0) * _579) - _579) * cbMtdParam._m0[23u].y) + _579;
    vec4 _598 = texture(sampler2D(C_Enemy_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _607 = (((cbMtdParam._m0[22u].x + _598.z) - _585) * _270) + _585;
    float _618 = ((_530.x - _551) * _299) + _551;
    float _619 = ((_530.y - _552) * _299) + _552;
    float _624 = ((_570.x - _618) * _366) + _618;
    float _625 = ((_570.y - _619) * _366) + _619;
    float _634 = ((((_598.x - _624) * _270) + _624) * 2.0) + (-1.0);
    float _635 = ((((_598.y - _625) * _270) + _625) * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3882 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _641 = sqrt(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))));
    float _644 = _634 + (cbMtdParam._m0[23u].w * ((_284.x * 2.0) + (-1.0)));
    float _645 = _635 + (cbMtdParam._m0[23u].w * ((_284.y * 2.0) + (-1.0)));
    float _648 = fma(_641, _225 * NORMAL.x, fma(_645, _232 * TANGENT.x, (_218 * _210) * _644));
    float _651 = fma(_641, _225 * NORMAL.y, fma(_645, _232 * TANGENT.y, (_218 * _211) * _644));
    float _654 = fma(_641, _225 * NORMAL.z, fma(_645, _232 * TANGENT.z, (_218 * _212) * _644));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    float _659 = _658 * _648;
    float _660 = _658 * _651;
    float _661 = _658 * _654;
    float _3893 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _662 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3915 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3926 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3937 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _666 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _682 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _733 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _723);
    float _734 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _723);
    float _735 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _723);
    float _739 = inversesqrt(dot(vec3(_733, _734, _735), vec3(_733, _734, _735)));
    float _740 = _733 * _739;
    float _741 = _734 * _739;
    float _742 = _735 * _739;
    float _748 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _749 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _751 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _753 = _751.w;
    float _773 = fma(_661, cbSceneParam._m0[5u].z, fma(_660, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _659));
    float _776 = fma(_661, cbSceneParam._m0[6u].z, fma(_660, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _659));
    float _779 = fma(_661, cbSceneParam._m0[7u].z, fma(_660, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _659));
    vec4 _781 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _792 = (((_781.y - _662) + (_781.w * _662)) * cbMtdParam._m0[3u].x) + _662;
    uint _805 = uint(roundEven(NORMAL.w)) * 13u;
    uint _807 = (_805 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _813 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_807].x;
    float _814 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_807].y;
    float _815 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_807].z;
    float _3948 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    vec4 _819 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _824 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _835 = (((_824.x - _666) + (_824.w * _666)) * cbMtdParam._m0[3u].x) + _666;
    float _848 = (cbMtdParam._m0[3u].x * (((_816 * _753) - _816) + _819.x)) + _816;
    float _849 = (cbMtdParam._m0[3u].x * (((_817 * _753) - _817) + _819.y)) + _817;
    float _850 = (cbMtdParam._m0[3u].x * (((_818 * _753) - _818) + _819.z)) + _818;
    float _851 = 1.0 - _835;
    float _852 = _851 * _848;
    float _853 = _851 * _849;
    float _854 = _851 * _850;
    float _859 = (_848 + (-0.039999999105930328369140625)) * _835;
    float _860 = (_849 + (-0.039999999105930328369140625)) * _835;
    float _861 = (_850 + (-0.039999999105930328369140625)) * _835;
    float _862 = _859 + 0.039999999105930328369140625;
    float _864 = _860 + 0.039999999105930328369140625;
    float _865 = _861 + 0.039999999105930328369140625;
    vec4 _874 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _748, cbSceneParam._m0[86u].y * _749));
    float _877 = _874.x * TEXCOORD_5.w;
    float _878 = dot(vec3(_659, _660, _661), vec3(_740, _741, _742));
    float _881 = _878 * 2.0;
    float _885 = (_881 * _659) - _740;
    float _886 = (_881 * _660) - _741;
    float _887 = (_881 * _661) - _742;
    float _891 = abs(dot(vec3(_740, _741, _742), vec3(_659, _660, _661)));
    float _3981 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _893 = sqrt(_792);
    float _906 = exp2((_893 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_893 * 3.0));
    float _912 = (1.0 - _906) * ((_893 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _913 = _906 * _893;
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1251;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _976 = fma(_949, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941));
        float _980 = fma(_949, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941));
        float _984 = fma(_949, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941));
        float _1009 = _941 + _659;
        float _1010 = _945 + _660;
        float _1011 = _949 + _661;
        float _1021 = fma(_1011, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009)) - _976;
        float _1022 = fma(_1011, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009)) - _980;
        float _1023 = fma(_1011, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009)) - _984;
        float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
        float _1040 = ((_1027 * _1021) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_976 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1027 * _1022) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_980 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1027 * _1023) / cbModelParam._m0[34u].z) + ((((((_984 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        float _1079 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1045.x + (-0.5));
        float _1081 = _1079 * (_1045.y + (-0.5));
        float _1082 = _1079 * (_1045.z + (-0.5));
        float _1089 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1052.x + (-0.5));
        float _1091 = _1089 * (_1052.y + (-0.5));
        float _1092 = _1089 * (_1052.z + (-0.5));
        float _1099 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1059.x + (-0.5));
        float _1101 = _1099 * (_1059.y + (-0.5));
        float _1102 = _1099 * (_1059.z + (-0.5));
        float _1109 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1066.x + (-0.5));
        float _1111 = _1109 * (_1066.y + (-0.5));
        float _1112 = _1109 * (_1066.z + (-0.5));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = _1080 * 0.5;
        float _1117 = _1090 * 0.5;
        float _1118 = _1100 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1133 = (dot(vec3(_659, _660, _661), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1143 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _4029 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1145 + 1.0))) + _1150) * _1113;
        float _1160 = _1081 * 0.5;
        float _1161 = _1091 * 0.5;
        float _1162 = _1101 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_659, _660, _661), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _4062 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1187 + 1.0))) + _1192) * _1114;
        float _1202 = _1082 * 0.5;
        float _1203 = _1092 * 0.5;
        float _1204 = _1102 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_659, _660, _661), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4095 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1229 + 1.0))) + _1234) * _1115;
        _1251 = _1082;
        _1253 = _1081;
        _1254 = _1080;
        _1255 = _1092;
        _1256 = _1091;
        _1257 = _1090;
        _1258 = _1102;
        _1259 = _1101;
        _1260 = _1100;
        _1261 = _1115;
        _1262 = _1114;
        _1263 = _1113;
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
    }
    else
    {
        _1251 = _1252;
        _1253 = _1252;
        _1254 = _1252;
        _1255 = _1252;
        _1256 = _1252;
        _1257 = _1252;
        _1258 = _1252;
        _1259 = _1252;
        _1260 = _1252;
        _1261 = _1252;
        _1262 = _1252;
        _1263 = _1252;
        _1264 = 0.0;
        _1265 = 0.0;
        _1266 = 0.0;
    }
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1292 = fma(_949, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _941));
        float _1296 = fma(_949, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _941));
        float _1300 = fma(_949, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _941));
        float _1323 = _941 + _659;
        float _1324 = _945 + _660;
        float _1325 = _949 + _661;
        float _1335 = fma(_1325, cbModelParam._m0[30u].z, fma(_1324, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1323)) - _1292;
        float _1336 = fma(_1325, cbModelParam._m0[31u].z, fma(_1324, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1323)) - _1296;
        float _1337 = fma(_1325, cbModelParam._m0[32u].z, fma(_1324, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1323)) - _1300;
        float _1341 = inversesqrt(dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337)));
        float _1354 = ((_1341 * _1335) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1292 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1341 * _1336) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1296 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1341 * _1337) / cbModelParam._m0[35u].z) + ((((((_1300 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        float _1391 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1358.x + (-0.5));
        float _1393 = _1391 * (_1358.y + (-0.5));
        float _1394 = _1391 * (_1358.z + (-0.5));
        float _1401 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1365.x + (-0.5));
        float _1403 = _1401 * (_1365.y + (-0.5));
        float _1404 = _1401 * (_1365.z + (-0.5));
        float _1411 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1372.x + (-0.5));
        float _1413 = _1411 * (_1372.y + (-0.5));
        float _1414 = _1411 * (_1372.z + (-0.5));
        float _1421 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1379.x + (-0.5));
        float _1423 = _1421 * (_1379.y + (-0.5));
        float _1424 = _1421 * (_1379.z + (-0.5));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = _1392 * 0.5;
        float _1429 = _1402 * 0.5;
        float _1430 = _1412 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_659, _660, _661), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4158 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1455 + 1.0))) + _1460) * _1425;
        float _1470 = _1393 * 0.5;
        float _1471 = _1403 * 0.5;
        float _1472 = _1413 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_659, _660, _661), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4191 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1497 + 1.0))) + _1502) * _1426;
        float _1512 = _1394 * 0.5;
        float _1513 = _1404 * 0.5;
        float _1514 = _1414 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_659, _660, _661), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4224 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1539 + 1.0))) + _1544) * _1427;
        _1561 = _1394;
        _1562 = _1393;
        _1563 = _1392;
        _1564 = _1404;
        _1565 = _1403;
        _1566 = _1402;
        _1567 = _1414;
        _1568 = _1413;
        _1569 = _1412;
        _1570 = _1427;
        _1571 = _1426;
        _1572 = _1425;
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
    }
    else
    {
        _1561 = _1252;
        _1562 = _1252;
        _1563 = _1252;
        _1564 = _1252;
        _1565 = _1252;
        _1566 = _1252;
        _1567 = _1252;
        _1568 = _1252;
        _1569 = _1252;
        _1570 = _1252;
        _1571 = _1252;
        _1572 = _1252;
        _1573 = 0.0;
        _1574 = 0.0;
        _1575 = 0.0;
    }
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1264)) + _1264;
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1265)) + _1265;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1266)) + _1266;
    float _1608 = fma(_1587, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1585 * cbSceneParam._m0[89u].x));
    float _1611 = fma(_1587, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1585 * cbSceneParam._m0[90u].x));
    float _1614 = fma(_1587, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1585));
    float _1629 = _885 * 0.5;
    float _1630 = _886 * 0.5;
    float _1631 = _887 * 0.5;
    float _1632 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1635 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1638 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1672;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1645 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1251, _1255, _1258, _1261));
        float _1649 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1253, _1256, _1259, _1262));
        float _1653 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1254, _1257, _1260, _1263));
        float _1660 = dot(vec4(cbModelParam._m0[39u]), vec4(_1629, _1630, _1631, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1660) ? 0.0 : (isnan(0.0) ? _1660 : max(0.0, _1660))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1683;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1674 = dot(vec4(cbModelParam._m0[40u]), vec4(_1629, _1630, _1631, 1.0));
        _1683 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1683 = 1.0;
    }
    float _1687 = (_1683 * cbModelParam._m0[1u].x) + (_1672 * (1.0 - cbModelParam._m0[1u].x));
    float _1697 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _792);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1697 : min(cbModelParam._m0[25u].z, _1697));
    float _1778;
    float _1780;
    float _1782;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1745 = fma(_949, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941)) + cbModelParam._m0[13u].w;
        float _1749 = fma(_949, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941)) + cbModelParam._m0[14u].w;
        float _1753 = fma(_949, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941)) + cbModelParam._m0[15u].w;
        float _1756 = fma(_887, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885));
        float _1759 = fma(_887, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885));
        float _1762 = fma(_887, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885));
        float _1790;
        if (_1756 > 0.0)
        {
            _1790 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1790 = frontier_phi_14_12_ladder;
        }
        float _1962;
        if (_1759 > 0.0)
        {
            _1962 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1962 = frontier_phi_23_19_ladder;
        }
        float _2257;
        if (_1762 > 0.0)
        {
            _2257 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2257 = frontier_phi_35_30_ladder;
        }
        float _2259 = isnan(_1962) ? _1790 : (isnan(_1790) ? _1962 : min(_1790, _1962));
        float _2260 = isnan(_2257) ? _2259 : (isnan(_2259) ? _2257 : min(_2259, _2257));
        float _2264 = (_2260 * _1756) + _1745;
        float _2265 = (_2260 * _1759) + _1749;
        float _2266 = (_2260 * _1762) + _1753;
        float _2267 = _2260 * 9.9999997473787516355514526367188e-05;
        float _2269 = (-1.0) - _2267;
        float _2271 = _2267 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2266 > _2271) || ((_2266 < _2269) || ((_2265 > _2271) || ((_2265 < _2269) || ((_2264 < _2269) || (_2264 > _2271))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2411 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2266, cbModelParam._m0[9u].z, fma(_2265, cbModelParam._m0[9u].y, _2264 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2266, cbModelParam._m0[10u].z, fma(_2265, cbModelParam._m0[10u].y, _2264 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2266, cbModelParam._m0[11u].z, fma(_2265, cbModelParam._m0[11u].y, _2264 * cbModelParam._m0[11u].x))), _1698);
            frontier_phi_13_35_ladder = _2411.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2411.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2411.x * cbModelParam._m0[1u].y;
        }
        _1778 = frontier_phi_13_35_ladder_2;
        _1780 = frontier_phi_13_35_ladder_1;
        _1782 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1766 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_885, _886, _887), _1698);
        _1778 = _1766.x * cbModelParam._m0[1u].y;
        _1780 = _1766.y * cbModelParam._m0[1u].y;
        _1782 = _1766.z * cbModelParam._m0[1u].y;
    }
    float _1786 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _792);
    float _1787 = isnan(_1786) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1786 : min(cbModelParam._m0[25u].w, _1786));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1841 = fma(_949, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941)) + cbModelParam._m0[21u].w;
        float _1845 = fma(_949, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941)) + cbModelParam._m0[22u].w;
        float _1849 = fma(_949, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941)) + cbModelParam._m0[23u].w;
        float _1852 = fma(_887, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885));
        float _1855 = fma(_887, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885));
        float _1858 = fma(_887, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885));
        float _1967;
        if (_1852 > 0.0)
        {
            _1967 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1967 = frontier_phi_25_21_ladder;
        }
        float _2284;
        if (_1855 > 0.0)
        {
            _2284 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2284 = frontier_phi_37_32_ladder;
        }
        float _2622;
        if (_1858 > 0.0)
        {
            _2622 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2622 = frontier_phi_47_44_ladder;
        }
        float _2624 = isnan(_2284) ? _1967 : (isnan(_1967) ? _2284 : min(_1967, _2284));
        float _2625 = isnan(_2622) ? _2624 : (isnan(_2624) ? _2622 : min(_2624, _2622));
        float _2629 = (_2625 * _1852) + _1841;
        float _2630 = (_2625 * _1855) + _1845;
        float _2631 = (_2625 * _1858) + _1849;
        float _2632 = _2625 * 9.9999997473787516355514526367188e-05;
        float _2633 = (-1.0) - _2632;
        float _2635 = _2632 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2631 > _2635) || ((_2631 < _2633) || ((_2630 > _2635) || ((_2630 < _2633) || ((_2629 < _2633) || (_2629 > _2635))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2631, cbModelParam._m0[17u].z, fma(_2630, cbModelParam._m0[17u].y, _2629 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2631, cbModelParam._m0[18u].z, fma(_2630, cbModelParam._m0[18u].y, _2629 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2631, cbModelParam._m0[19u].z, fma(_2630, cbModelParam._m0[19u].y, _2629 * cbModelParam._m0[19u].x))), _1787);
            frontier_phi_22_47_ladder = _2753.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2753.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2753.x * cbModelParam._m0[1u].z;
        }
        _1877 = frontier_phi_22_47_ladder_2;
        _1879 = frontier_phi_22_47_ladder_1;
        _1881 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_885, _886, _887), _1787);
        _1877 = _1861.x * cbModelParam._m0[1u].z;
        _1879 = _1861.y * cbModelParam._m0[1u].z;
        _1881 = _1861.z * cbModelParam._m0[1u].z;
    }
    float _1894 = (((_912 * _862) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1877 - _1778)) + _1778);
    float _1896 = (((_912 * _864) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1879 - _1780)) + _1780);
    float _1898 = (((_912 * _865) + _913) * _877) * ((cbModelParam._m0[1u].w * (_1881 - _1782)) + _1782);
    float _1901 = fma(_1898, cbSceneParam._m0[89u].z, fma(_1896, cbSceneParam._m0[89u].y, _1894 * cbSceneParam._m0[89u].x));
    float _1904 = fma(_1898, cbSceneParam._m0[90u].z, fma(_1896, cbSceneParam._m0[90u].y, _1894 * cbSceneParam._m0[90u].x));
    float _1907 = fma(_1898, cbSceneParam._m0[91u].z, fma(_1896, cbSceneParam._m0[91u].y, _1894 * cbSceneParam._m0[91u].x));
    float _1941 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1945 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1949 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1953 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1954 = _1941 / _1953;
    float _1955 = _1945 / _1953;
    float _1956 = _1949 / _1953;
    float _2103;
    float _2104;
    float _2105;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1983 = ((uint(_1956 > cbSceneParam._m0[59u].y) + uint(_1956 > cbSceneParam._m0[59u].x)) + uint(_1956 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1984 = _1983 + 43u;
        uint _1992 = _1983 + 44u;
        uint _2000 = _1983 + 45u;
        uint _2008 = _1983 + 46u;
        float _2019 = fma(_1953, cbSceneParam._m0[_1984].w, fma(_1949, cbSceneParam._m0[_1984].z, fma(_1945, cbSceneParam._m0[_1984].y, _1941 * cbSceneParam._m0[_1984].x)));
        float _2023 = fma(_1953, cbSceneParam._m0[_1992].w, fma(_1949, cbSceneParam._m0[_1992].z, fma(_1945, cbSceneParam._m0[_1992].y, _1941 * cbSceneParam._m0[_1992].x)));
        float _2031 = fma(_1953, cbSceneParam._m0[_2008].w, fma(_1949, cbSceneParam._m0[_2008].z, fma(_1945, cbSceneParam._m0[_2008].y, _1941 * cbSceneParam._m0[_2008].x)));
        float _2036 = cbSceneParam._m0[33u].z * _2031;
        float _2038 = cbSceneParam._m0[33u].w * _2031;
        float _2041 = fma(_1953, cbSceneParam._m0[_2000].w, fma(_1949, cbSceneParam._m0[_2000].z, fma(_1945, cbSceneParam._m0[_2000].y, _1941 * cbSceneParam._m0[_2000].x))) / _2031;
        float _2089 = (cbSceneParam._m0[33u].x - sqrt(((_1955 * _1955) + (_1954 * _1954)) + (_1956 * _1956))) * cbSceneParam._m0[33u].y;
        float _4350 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2096 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2036 + _2019) / _2031, (_2038 + _2023) / _2031), _2041), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2038 + _2019) / _2031, (_2023 - _2036) / _2031), _2041), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2019 - _2036) / _2031, (_2023 - _2038) / _2031), _2041), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2019 - _2038) / _2031, (_2036 + _2023) / _2031), _2041), 0.0)).x), vec4(0.25)));
        _2103 = 1.0 - (_2096 * cbSceneParam._m0[34u].x);
        _2104 = 1.0 - (_2096 * cbSceneParam._m0[34u].y);
        _2105 = 1.0 - (_2096 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2103 = 1.0;
        _2104 = 1.0;
        _2105 = 1.0;
    }
    float _2169;
    float _2171;
    float _2173;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2157 = fma(_1953, cbSceneParam._m0[63u].w, fma(_1949, cbSceneParam._m0[63u].z, fma(_1945, cbSceneParam._m0[63u].y, _1941 * cbSceneParam._m0[63u].x)));
        float _2158 = fma(_1953, cbSceneParam._m0[60u].w, fma(_1949, cbSceneParam._m0[60u].z, fma(_1945, cbSceneParam._m0[60u].y, _1941 * cbSceneParam._m0[60u].x))) / _2157;
        float _2159 = fma(_1953, cbSceneParam._m0[61u].w, fma(_1949, cbSceneParam._m0[61u].z, fma(_1945, cbSceneParam._m0[61u].y, _1941 * cbSceneParam._m0[61u].x))) / _2157;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2158 >= cbSceneParam._m0[64u].x) && (_2159 >= cbSceneParam._m0[64u].y)) && (_2158 <= cbSceneParam._m0[64u].z)) && (_2159 <= cbSceneParam._m0[64u].w))
        {
            float _2297 = fma(_1953, cbSceneParam._m0[62u].w, fma(_1949, cbSceneParam._m0[62u].z, fma(_1945, cbSceneParam._m0[62u].y, _1941 * cbSceneParam._m0[62u].x))) / _2157;
            float _2301 = isnan(cbSceneParam._m0[41u].w) ? _2297 : (isnan(_2297) ? cbSceneParam._m0[41u].w : max(_2297, cbSceneParam._m0[41u].w));
            float _2344 = (cbSceneParam._m0[33u].x - sqrt(((_1955 * _1955) + (_1954 * _1954)) + (_1956 * _1956))) * cbSceneParam._m0[33u].y;
            float _4366 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
            float _2351 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2158, cbSceneParam._m0[33u].w + _2159), _2301), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2158, _2159 - cbSceneParam._m0[33u].z), _2301), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2158 - cbSceneParam._m0[33u].z, _2159 - cbSceneParam._m0[33u].w), _2301), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2158 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2159), _2301), 0.0)).x), vec4(0.25)));
            float _2355 = 1.0 - (_2351 * cbSceneParam._m0[34u].x);
            float _2356 = 1.0 - (_2351 * cbSceneParam._m0[34u].y);
            float _2357 = 1.0 - (_2351 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2357) ? _2105 : (isnan(_2105) ? _2357 : min(_2105, _2357));
            frontier_phi_34_33_ladder_1 = isnan(_2356) ? _2104 : (isnan(_2104) ? _2356 : min(_2104, _2356));
            frontier_phi_34_33_ladder_2 = isnan(_2355) ? _2103 : (isnan(_2103) ? _2355 : min(_2103, _2355));
        }
        else
        {
            frontier_phi_34_33_ladder = _2105;
            frontier_phi_34_33_ladder_1 = _2104;
            frontier_phi_34_33_ladder_2 = _2103;
        }
        _2169 = frontier_phi_34_33_ladder_2;
        _2171 = frontier_phi_34_33_ladder_1;
        _2173 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2169 = _2103;
        _2171 = _2104;
        _2173 = _2105;
    }
    uvec4 _2178 = floatBitsToUint(cbInstanceData._m0[_805 + 5u]);
    uint _2180 = _2178.x * 14u;
    uint _2181 = _2180 + 13u;
    float _2188 = _877 + (-1.0);
    float _2193 = (cbLight._m0[_2181].x * _2188) + 1.0;
    float _2194 = (cbLight._m0[_2181].y * _2188) + 1.0;
    float _2195 = (cbLight._m0[_2181].z * _2188) + 1.0;
    float _2196 = (cbLight._m0[_2181].w * _2188) + 1.0;
    uint _2197 = _2180 + 5u;
    float _2203 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
    uint _2207 = _2180 + 4u;
    float _2216 = isnan(1.0) ? _2193 : (isnan(_2193) ? 1.0 : min(_2193, 1.0));
    uint _2220 = _2180 | 1u;
    float _2231 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_659, _660, _661));
    float _2234 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_659, _660, _661));
    float _4402 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _4413 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2239 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 0.3183098733425140380859375;
    float _2241 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * 0.3183098733425140380859375;
    float _2248 = ((cbLight._m0[_2197].x * _2203) * _2241) + (((cbLight._m0[_2207].x * _2169) * _2216) * _2239);
    float _2249 = ((_2203 * cbLight._m0[_2197].y) * _2241) + (((cbLight._m0[_2207].y * _2171) * _2216) * _2239);
    float _2250 = ((_2203 * cbLight._m0[_2197].z) * _2241) + (((cbLight._m0[_2207].z * _2173) * _2216) * _2239);
    uvec4 _2254 = floatBitsToUint(cbLight._m0[_2180 + 12u]);
    bool _2256 = _2254.x == 0u;
    float _2358;
    float _2360;
    float _2362;
    if (_2256)
    {
        _2358 = _2248;
        _2360 = _2249;
        _2362 = _2250;
    }
    else
    {
        uint _2366 = _2180 + 6u;
        float _2382 = (dot(vec3(cbLight._m0[_2180 + 2u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2383 = _2382 * _2382;
        float _4424 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2384 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2385 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
        _2358 = (((cbLight._m0[_2366].x * 0.3183098733425140380859375) * _2384) * _2385) + _2248;
        _2360 = (((cbLight._m0[_2366].y * 0.3183098733425140380859375) * _2384) * _2385) + _2249;
        _2362 = (((cbLight._m0[_2366].z * 0.3183098733425140380859375) * _2384) * _2385) + _2250;
    }
    bool _2365 = _2254.y == 0u;
    float _2420;
    float _2422;
    float _2424;
    if (_2365)
    {
        _2420 = _2358;
        _2422 = _2360;
        _2424 = _2362;
    }
    else
    {
        uint _2593 = _2180 + 7u;
        float _2609 = (dot(vec3(cbLight._m0[_2180 + 3u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2610 = _2609 * _2609;
        float _4440 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2611 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2612 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2420 = (((cbLight._m0[_2593].x * 0.3183098733425140380859375) * _2611) * _2612) + _2358;
        _2422 = (((cbLight._m0[_2593].y * 0.3183098733425140380859375) * _2611) * _2612) + _2360;
        _2424 = (((cbLight._m0[_2593].z * 0.3183098733425140380859375) * _2611) * _2612) + _2362;
    }
    uint _2427 = _2180 + 8u;
    float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2180].w)) * _792) * 0.949999988079071044921875);
    float _2441 = _2440 * _2440;
    float _2442 = cbLight._m0[_2180].x + _740;
    float _2443 = cbLight._m0[_2180].y + _741;
    float _2444 = cbLight._m0[_2180].z + _742;
    float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
    float _2449 = _2448 * _2442;
    float _2450 = _2448 * _2443;
    float _2451 = _2448 * _2444;
    float _2452 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2180].xyz));
    float _4456 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _4467 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _2456 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2457 = dot(vec3(_659, _660, _661), vec3(_2449, _2450, _2451));
    float _4478 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2461 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_2449, _2450, _2451));
    float _4489 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2465 = _2441 * _2441;
    float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
    float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0);
    float _2478 = 0.959999978542327880859375 - _859;
    float _2480 = 0.959999978542327880859375 - _860;
    float _2481 = 0.959999978542327880859375 - _861;
    float _2488 = 1.0 - _2441;
    float _2499 = (0.5 / (((_2456 * ((_2455 * _2488) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2488) + _2441) * _2455))) * _2455;
    float _4500 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2501 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
    uint _2515 = _2180 + 9u;
    float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2220].w)) * _792) * 0.949999988079071044921875);
    float _2527 = _2526 * _2526;
    float _2528 = cbLight._m0[_2220].x + _740;
    float _2529 = cbLight._m0[_2220].y + _741;
    float _2530 = cbLight._m0[_2220].z + _742;
    float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
    float _2535 = _2534 * _2528;
    float _2536 = _2534 * _2529;
    float _2537 = _2534 * _2530;
    float _2538 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2220].xyz));
    float _4511 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _2542 = dot(vec3(_659, _660, _661), vec3(_2535, _2536, _2537));
    float _4522 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2546 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_2535, _2536, _2537));
    float _4533 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2550 = _2527 * _2527;
    float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
    float _2561 = exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0);
    float _2568 = 1.0 - _2527;
    float _2578 = (0.5 / (((_2456 * ((_2541 * _2568) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2568) + _2527) * _2541))) * _2541;
    float _4544 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2580 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
    float _2590 = (((((_2561 * _2478) + _862) * cbLight._m0[_2515].x) * _2580) * _2203) + ((((cbLight._m0[_2427].x * _2169) * ((_2477 * _2478) + _862)) * _2501) * _2216);
    float _2591 = (((((_2561 * _2480) + _864) * cbLight._m0[_2515].y) * _2580) * _2203) + ((((cbLight._m0[_2427].y * _2171) * ((_2477 * _2480) + _864)) * _2501) * _2216);
    float _2592 = (((((_2561 * _2481) + _865) * cbLight._m0[_2515].z) * _2580) * _2203) + ((((cbLight._m0[_2427].z * _2173) * ((_2477 * _2481) + _865)) * _2501) * _2216);
    float _2648;
    float _2650;
    float _2652;
    if (_2256)
    {
        _2648 = _2590;
        _2650 = _2591;
        _2652 = _2592;
    }
    else
    {
        uint _2654 = _2180 + 2u;
        uint _2658 = _2180 + 10u;
        float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2654].w)) * _792) * 0.949999988079071044921875);
        float _2673 = _2672 * _2672;
        float _2674 = cbLight._m0[_2654].x + _740;
        float _2675 = cbLight._m0[_2654].y + _741;
        float _2676 = cbLight._m0[_2654].z + _742;
        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
        float _2681 = _2680 * _2674;
        float _2682 = _2680 * _2675;
        float _2683 = _2680 * _2676;
        float _2684 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2654].xyz));
        float _4555 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2688 = dot(vec3(_659, _660, _661), vec3(_2681, _2682, _2683));
        float _4566 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2692 = dot(vec3(cbLight._m0[_2654].xyz), vec3(_2681, _2682, _2683));
        float _4577 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2696 = _2673 * _2673;
        float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
        float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0);
        float _2714 = 1.0 - _2673;
        float _2724 = (0.5 / (((_2456 * ((_2687 * _2714) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2714) + _2673) * _2687))) * _2687;
        float _4588 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2726 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
        float _2727 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
        _2648 = (((((_2707 * _2478) + _862) * cbLight._m0[_2658].x) * _2726) * _2727) + _2590;
        _2650 = (((((_2707 * _2480) + _864) * cbLight._m0[_2658].y) * _2726) * _2727) + _2591;
        _2652 = (((((_2707 * _2481) + _865) * cbLight._m0[_2658].z) * _2726) * _2727) + _2592;
    }
    float _2758;
    float _2760;
    float _2762;
    if (_2365)
    {
        _2758 = _2648;
        _2760 = _2650;
        _2762 = _2652;
    }
    else
    {
        uint _2769 = _2180 + 3u;
        uint _2773 = _2180 + 11u;
        float _2787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2769].w)) * _792) * 0.949999988079071044921875);
        float _2788 = _2787 * _2787;
        float _2789 = cbLight._m0[_2769].x + _740;
        float _2790 = cbLight._m0[_2769].y + _741;
        float _2791 = cbLight._m0[_2769].z + _742;
        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
        float _2796 = _2795 * _2789;
        float _2797 = _2795 * _2790;
        float _2798 = _2795 * _2791;
        float _2799 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2769].xyz));
        float _4604 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2802 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2803 = dot(vec3(_659, _660, _661), vec3(_2796, _2797, _2798));
        float _4615 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2807 = dot(vec3(cbLight._m0[_2769].xyz), vec3(_2796, _2797, _2798));
        float _4626 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2811 = _2788 * _2788;
        float _2815 = ((_2806 * _2806) * (_2811 + (-1.0))) + 1.0;
        float _2822 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
        float _2829 = 1.0 - _2788;
        float _2839 = (0.5 / (((_2456 * ((_2802 * _2829) + _2788)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2829) + _2788) * _2802))) * _2802;
        float _4637 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2841 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2811 / ((_2815 * _2815) * 3.141590118408203125));
        float _2842 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2758 = (((((_2822 * _2478) + _862) * cbLight._m0[_2773].x) * _2841) * _2842) + _2648;
        _2760 = (((((_2822 * _2480) + _864) * cbLight._m0[_2773].y) * _2841) * _2842) + _2650;
        _2762 = (((((_2822 * _2481) + _865) * cbLight._m0[_2773].z) * _2841) * _2842) + _2652;
    }
    float _2908;
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    if (_2178.y == 0u)
    {
        uvec4 _2863 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2864 = _2863.x;
        uint _2875 = uint((float(_2863.y) * floor(float(uint(cbSceneParam._m0[85u].y * _749) / _2864))) + floor(float(uint(cbSceneParam._m0[85u].x * _748) / _2864)));
        float _2885 = (log2(_1956 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2886 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        uint _2889 = uint(isnan(14.0) ? _2886 : (isnan(_2886) ? 14.0 : min(_2886, 14.0)));
        uvec4 _2894 = texelFetch(g_lightClusterGridBuffer, int(((_2889 << 2u) + (_2875 << 6u)) >> 2u));
        uint _2895 = _2894.x;
        uint _2896 = _2863.z;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        if (((((1u << ((_2896 >> 4u) & 15u)) + 4294967295u) & _2895) == 0u) || ((_2896 & 240u) == 0u))
        {
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
        }
        else
        {
            float _2976;
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            uint _3126 = 0u;
            uint _3135;
            bool _3136;
            for (;;)
            {
                _3135 = texelFetch(g_lightClassification, int((((_2889 << 5u) + (_2875 << 9u)) + (_3126 << 2u)) >> 2u)).x;
                _3136 = _3135 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3136)
                {
                    frontier_phi_66_pred = _3125;
                    frontier_phi_66_pred_1 = _3124;
                    frontier_phi_66_pred_2 = _3123;
                    frontier_phi_66_pred_3 = _3122;
                    frontier_phi_66_pred_4 = _3121;
                    frontier_phi_66_pred_5 = _3120;
                }
                else
                {
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    uint _3250;
                    _3244 = _3120;
                    _3245 = _3121;
                    _3246 = _3122;
                    _3247 = _3123;
                    _3248 = _3124;
                    _3249 = _3125;
                    _3250 = _3135;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    for (;;)
                    {
                        uint _3254 = uint(findLSB(_3250)) + (_3126 << 5u);
                        uint _3251 = (_3250 + 4294967295u) & _3250;
                        uint _3256 = _3254 * 48u;
                        vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 3u)).x));
                        uint _3276 = (_3254 * 48u) + 4u;
                        vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 3u)).x));
                        uint _3295 = (_3254 * 48u) + 8u;
                        vec3 _3306 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x));
                        float _3310 = _3270.x - _1954;
                        float _3311 = _3270.y - _1955;
                        float _3312 = _3270.z - _1956;
                        float _3313 = dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312));
                        float _3316 = inversesqrt(_3313);
                        float _3317 = _3316 * _3310;
                        float _3318 = _3316 * _3311;
                        float _3319 = _3316 * _3312;
                        float _3320 = dot(vec3(_773, _776, _779), vec3(_3317, _3318, _3319));
                        float _3325 = 1.0 - (_3313 * _3270.w);
                        float _4663 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3326 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3327 = sqrt(_3313) * _3289.w;
                        float _3330 = 1.39999997615814208984375 / (_3327 + 1.39999997615814208984375);
                        float _3331 = _3330 * _3330;
                        float _3334 = ((1.0 - _3331) * _3320) + _3331;
                        float _3337 = _3327 * _3327;
                        float _3341 = ((isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0))) * _3326) / ((_3337 * 0.699999988079071044921875) + 1.0);
                        float _3345 = (-0.0) - _1954;
                        float _3346 = (-0.0) - _1955;
                        float _3347 = (-0.0) - _1956;
                        float _3351 = inversesqrt(dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347)));
                        float _3352 = _3351 * _3345;
                        float _3353 = _3351 * _3346;
                        float _3354 = _3351 * _3347;
                        float _3361 = exp2(log2(1.0 / ((_3337 * 3.5) + 5.0)) * 0.25);
                        float _3362 = 1.0 - _893;
                        float _3369 = sqrt(1.0 - ((1.0 - (_3362 * _3362)) * (1.0 - (_3361 * _3361))));
                        float _3370 = _3369 * _3369;
                        float _3371 = _3370 * _3370;
                        float _3372 = _3352 + _3317;
                        float _3373 = _3353 + _3318;
                        float _3374 = _3354 + _3319;
                        float _3378 = inversesqrt(dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374)));
                        float _3382 = dot(vec3(_773, _776, _779), vec3(_3352, _3353, _3354));
                        float _4679 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3385 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3386 = dot(vec3(_773, _776, _779), vec3(_3378 * _3372, _3378 * _3373, _3378 * _3374));
                        float _4690 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3389 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3393 = ((_3389 * _3389) * (_3371 + (-1.0))) + 1.0;
                        float _3394 = _3330 * _3370;
                        float _3395 = _3394 * _3394;
                        float _3398 = ((1.0 - _3395) * _3320) + _3395;
                        float _4701 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3399 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3400 = 1.0 - _3370;
                        float _3410 = (0.5 / (((_3399 * ((_3385 * _3400) + _3370)) + 9.9999999392252902907785028219223e-09) + (((_3399 * _3400) + _3370) * _3385))) * _3399;
                        float _4712 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3421 = (((_3371 * 3.1415927410125732421875) * (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) / ((_3393 * _3393) * ((_3337 * 2.1991131305694580078125) + 3.141590118408203125))) * _3326;
                        _3179 = (_3341 * _3289.x) + _3247;
                        _3180 = (_3341 * _3289.y) + _3248;
                        _3181 = (_3341 * _3289.z) + _3249;
                        _3176 = (_3421 * _3306.x) + _3244;
                        _3177 = (_3421 * _3306.y) + _3245;
                        _3178 = (_3421 * _3306.z) + _3246;
                        if (_3251 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3244 = _3176;
                            _3245 = _3177;
                            _3246 = _3178;
                            _3247 = _3179;
                            _3248 = _3180;
                            _3249 = _3181;
                            _3250 = _3251;
                        }
                    }
                    frontier_phi_66_pred = _3181;
                    frontier_phi_66_pred_1 = _3180;
                    frontier_phi_66_pred_2 = _3179;
                    frontier_phi_66_pred_3 = _3178;
                    frontier_phi_66_pred_4 = _3177;
                    frontier_phi_66_pred_5 = _3176;
                }
                _2986 = frontier_phi_66_pred;
                _2984 = frontier_phi_66_pred_1;
                _2982 = frontier_phi_66_pred_2;
                _2980 = frontier_phi_66_pred_3;
                _2978 = frontier_phi_66_pred_4;
                _2976 = frontier_phi_66_pred_5;
                uint _3127 = _3126 + 1u;
                if (_3127 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3120 = _2976;
                    _3121 = _2978;
                    _3122 = _2980;
                    _3123 = _2982;
                    _3124 = _2984;
                    _3125 = _2986;
                    _3126 = _3127;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
        }
        uvec4 _2989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2990 = _2989.z;
        uint _2992 = (_2990 >> 8u) & 15u;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        if (((4294967295u << _2992) & _2895) == 0u)
        {
            _3088 = _2975;
            _3090 = _2977;
            _3092 = _2979;
            _3094 = _2981;
            _3096 = _2983;
            _3098 = _2985;
        }
        else
        {
            float _3113 = inversesqrt(dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956)));
            float _3114 = _3113 * _1954;
            float _3115 = _3113 * _1955;
            float _3116 = _3113 * _1956;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2992 < ((_2990 >> 12u) & 15u))
            {
                float _3089;
                float _3091;
                float _3093;
                float _3095;
                float _3097;
                float _3099;
                float _3227 = _2975;
                float _3228 = _2977;
                float _3229 = _2979;
                float _3230 = _2981;
                float _3231 = _2983;
                float _3232 = _2985;
                uint _3233 = _2992;
                uint _3242;
                bool _3243;
                for (;;)
                {
                    _3242 = texelFetch(g_lightClassification, int((((_2889 << 5u) + (_2875 << 9u)) + (_3233 << 2u)) >> 2u)).x;
                    _3243 = _3242 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3243)
                    {
                        frontier_phi_72_pred = _3232;
                        frontier_phi_72_pred_1 = _3231;
                        frontier_phi_72_pred_2 = _3230;
                        frontier_phi_72_pred_3 = _3229;
                        frontier_phi_72_pred_4 = _3228;
                        frontier_phi_72_pred_5 = _3227;
                    }
                    else
                    {
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3439 = _3227;
                        float _3440 = _3228;
                        float _3441 = _3229;
                        float _3442 = _3230;
                        float _3443 = _3231;
                        float _3444 = _3232;
                        uint _3445 = _3242;
                        uint _3446;
                        vec4 _3471;
                        float _3472;
                        vec4 _3487;
                        vec3 _3499;
                        vec4 _3514;
                        vec4 _3529;
                        float _3575;
                        bool _3576;
                        for (;;)
                        {
                            uint _3456 = ((_3233 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3445));
                            _3446 = (_3445 + 4294967295u) & _3445;
                            uint _3458 = _3456 * 40u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            _3472 = _3471.w;
                            uint _3474 = (_3456 * 40u) + 4u;
                            _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            uint _3489 = (_3456 * 40u) + 8u;
                            _3499 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x));
                            uint _3501 = (_3456 * 40u) + 16u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3516 = (_3456 * 40u) + 20u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3531 = (_3456 * 40u) + 24u;
                            vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3550 = (_3456 * 40u) + 28u;
                            vec4 _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            _3575 = fma(_1956, _3563.z, fma(_1955, _3563.y, _3563.x * _1954)) + _3563.w;
                            _3576 = !((fma(_1956, _3544.z, fma(_1955, _3544.y, _3544.x * _1954)) + _3544.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3576)
                            {
                                float _3603 = _3471.x - _1954;
                                float _3604 = _3471.y - _1955;
                                float _3605 = _3471.z - _1956;
                                float _3606 = dot(vec3(_3603, _3604, _3605), vec3(_3603, _3604, _3605));
                                float _3609 = inversesqrt(_3606);
                                float _3610 = _3609 * _3603;
                                float _3611 = _3609 * _3604;
                                float _3612 = _3609 * _3605;
                                float _3616 = 1.0 - (_3606 / (_3472 * _3472));
                                float _4723 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3617 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3621 = sqrt(_3606) * _3487.w;
                                float _3623 = 1.39999997615814208984375 / (_3621 + 1.39999997615814208984375);
                                float _3624 = _3623 * _3623;
                                float _3627 = ((1.0 - _3624) * dot(vec3(_3610, _3611, _3612), vec3(_773, _776, _779))) + _3624;
                                float _3630 = _3621 * _3621;
                                float _3634 = (fma(_1956, _3514.z, fma(_1955, _3514.y, _3514.x * _1954)) + _3514.w) / _3575;
                                float _3635 = (fma(_1956, _3529.z, fma(_1955, _3529.y, _3529.x * _1954)) + _3529.w) / _3575;
                                float _3639 = 1.0 - dot(vec2(_3634, _3635), vec2(_3634, _3635));
                                float _4739 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3641 = _3640 * (((isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0))) * _3617) / ((_3630 * 0.699999988079071044921875) + 1.0));
                                float _3653 = exp2(log2(1.0 / ((_3630 * 3.5) + 5.0)) * 0.25);
                                float _3654 = 1.0 - _893;
                                float _3661 = sqrt(1.0 - ((1.0 - (_3654 * _3654)) * (1.0 - (_3653 * _3653))));
                                float _3662 = _3661 * _3661;
                                float _3663 = _3662 * _3662;
                                float _3664 = _3610 - _3114;
                                float _3665 = _3611 - _3115;
                                float _3666 = _3612 - _3116;
                                float _3670 = inversesqrt(dot(vec3(_3664, _3665, _3666), vec3(_3664, _3665, _3666)));
                                float _3674 = dot(vec3(_773, _776, _779), vec3((-0.0) - _3114, (-0.0) - _3115, (-0.0) - _3116));
                                float _4750 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3677 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3678 = dot(vec3(_773, _776, _779), vec3(_3670 * _3664, _3670 * _3665, _3670 * _3666));
                                float _4761 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3681 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3685 = ((_3681 * _3681) * (_3663 + (-1.0))) + 1.0;
                                float _3686 = _3623 * _3662;
                                float _3687 = _3686 * _3686;
                                float _3693 = ((1.0 - _3687) * dot(vec3(_773, _776, _779), vec3(_3610, _3611, _3612))) + _3687;
                                float _4772 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3695 = 1.0 - _3662;
                                float _3705 = (0.5 / (((_3694 * ((_3677 * _3695) + _3662)) + 9.9999999392252902907785028219223e-09) + (((_3694 * _3695) + _3662) * _3677))) * _3694;
                                float _4783 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3715 = (_3640 * _3617) * (((_3663 * 3.1415927410125732421875) * (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) / ((_3685 * _3685) * ((_3630 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3641 * _3487.y;
                                frontier_phi_78_pred_1 = _3641 * _3487.x;
                                frontier_phi_78_pred_2 = _3715 * _3499.z;
                                frontier_phi_78_pred_3 = _3715 * _3499.y;
                                frontier_phi_78_pred_4 = _3715 * _3499.x;
                                frontier_phi_78_pred_5 = _3641 * _3487.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3723 = frontier_phi_78_pred;
                            _3722 = frontier_phi_78_pred_1;
                            _3721 = frontier_phi_78_pred_2;
                            _3720 = frontier_phi_78_pred_3;
                            _3719 = frontier_phi_78_pred_4;
                            _3724 = frontier_phi_78_pred_5;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            _3431 = _3724 + _3444;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            _3428 = _3721 + _3441;
                            if (_3446 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3446;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3431;
                        frontier_phi_72_pred_1 = _3430;
                        frontier_phi_72_pred_2 = _3429;
                        frontier_phi_72_pred_3 = _3428;
                        frontier_phi_72_pred_4 = _3427;
                        frontier_phi_72_pred_5 = _3426;
                    }
                    _3099 = frontier_phi_72_pred;
                    _3097 = frontier_phi_72_pred_1;
                    _3095 = frontier_phi_72_pred_2;
                    _3093 = frontier_phi_72_pred_3;
                    _3091 = frontier_phi_72_pred_4;
                    _3089 = frontier_phi_72_pred_5;
                    uint _3234 = _3233 + 1u;
                    if (_3234 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3227 = _3089;
                        _3228 = _3091;
                        _3229 = _3093;
                        _3230 = _3095;
                        _3231 = _3097;
                        _3232 = _3099;
                        _3233 = _3234;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3099;
                frontier_phi_60_61_ladder_1 = _3097;
                frontier_phi_60_61_ladder_2 = _3093;
                frontier_phi_60_61_ladder_3 = _3091;
                frontier_phi_60_61_ladder_4 = _3089;
                frontier_phi_60_61_ladder_5 = _3095;
            }
            else
            {
                frontier_phi_60_61_ladder = _2985;
                frontier_phi_60_61_ladder_1 = _2983;
                frontier_phi_60_61_ladder_2 = _2979;
                frontier_phi_60_61_ladder_3 = _2977;
                frontier_phi_60_61_ladder_4 = _2975;
                frontier_phi_60_61_ladder_5 = _2981;
            }
            _3088 = frontier_phi_60_61_ladder_4;
            _3090 = frontier_phi_60_61_ladder_3;
            _3092 = frontier_phi_60_61_ladder_2;
            _3094 = frontier_phi_60_61_ladder_5;
            _3096 = frontier_phi_60_61_ladder_1;
            _3098 = frontier_phi_60_61_ladder;
        }
        float _3103 = isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0));
        _2908 = (_3103 * _3094) + _2420;
        _2910 = (_3103 * _3096) + _2422;
        _2912 = (_3103 * _3098) + _2424;
        _2914 = ((_3088 * _862) * _3103) + _2758;
        _2916 = ((_3090 * _864) * _3103) + _2760;
        _2918 = ((_3092 * _865) * _3103) + _2762;
    }
    else
    {
        _2908 = _2420;
        _2910 = _2422;
        _2912 = _2424;
        _2914 = _2758;
        _2916 = _2760;
        _2918 = _2762;
    }
    float _4799 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4810 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4821 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    uint _2938 = _805 + 6u;
    float _2946 = _748 / cbSceneParam._m0[86u].x;
    float _2947 = _749 / cbSceneParam._m0[86u].y;
    vec4 _2961 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2946, _2947, (log2((isnan(cbSceneParam._m0[77u].w) ? _682 : (isnan(_682) ? cbSceneParam._m0[77u].w : min(_682, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2963 = _2961.x;
    float _2964 = _2961.y;
    float _2965 = _2961.z;
    float _2966 = _2961.w;
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    if (_682 > cbSceneParam._m0[78u].w)
    {
        float _3000 = isnan(_682) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _682 : min(cbSceneParam._m0[80u].w, _682));
        float _3001 = _3000 / _682;
        float _3012 = _3001 * _733;
        float _3013 = _734 * _3001;
        float _3014 = (-0.0) - _3013;
        float _3016 = _3001 * _735;
        float _3018 = (cbSceneParam._m0[77u].w * _3014) / _3000;
        float _3019 = _3018 + cbSceneParam._m0[79u].w;
        float _3020 = cbSceneParam._m0[79u].w - _3013;
        float _3026 = sqrt(((_3012 * _3012) + (_3013 * _3013)) + (_3016 * _3016));
        float _3029 = (1.0 - (cbSceneParam._m0[77u].w / _3000)) * _3026;
        float _3034 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3036 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3189;
        if (abs((_3014 - _3018) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3189 = ((((_3019 > 0.0) ? exp2(_3034 * _3019) : (2.0 - exp2(_3036 * _3019))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3029;
        }
        else
        {
            float _3149 = 1.0 / cbSceneParam._m0[80u].x;
            float _3150 = isnan(_3020) ? _3019 : (isnan(_3019) ? _3020 : max(_3019, _3020));
            float _3151 = isnan(_3020) ? _3019 : (isnan(_3019) ? _3020 : min(_3019, _3020));
            float _3160 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : min(_3150, 0.0));
            float _3161 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : min(_3151, 0.0));
            _3189 = ((abs(_3026 / _3014) * cbSceneParam._m0[80u].y) * ((((_3160 - _3161) * 2.0) - ((exp2(_3034 * (isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0)))) - exp2(_3034 * (isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0))))) * _3149)) - ((exp2(_3036 * _3160) - exp2(_3036 * _3161)) * _3149))) + (_3029 * cbSceneParam._m0[80u].z);
        }
        vec4 _3191 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2946, _2947, 1.0), 0.0);
        float _3200 = exp2((_3189 * (-1.44269502162933349609375)) * (1.0 - _3191.w));
        float _3201 = log2(_3200);
        float _3217 = log2(_2966);
        _3038 = (exp2(_3217 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].x)) * _3191.x) / cbSceneParam._m0[78u].x)) + _2963;
        _3040 = (exp2(_3217 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].y)) * _3191.y) / cbSceneParam._m0[78u].y)) + _2964;
        _3042 = (exp2(_3217 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].z)) * _3191.z) / cbSceneParam._m0[78u].z)) + _2965;
        _3044 = _3200 * _2966;
    }
    else
    {
        _3038 = _2963;
        _3040 = _2964;
        _3042 = _2965;
        _3044 = _2966;
    }
    float _3056 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3057 = _3056 == 3.0;
    float _3058 = log2(_3044);
    float _3065 = exp2(_3058 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2908 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _877))) + ((_2914 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1687)) * cbPerFrame._m0[3u].x));
    float _3066 = exp2(_3058 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2910 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _877))) + ((_2916 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1687)) * cbPerFrame._m0[3u].x));
    float _3067 = exp2(_3058 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2912 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _877))) + ((_2918 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1687)) * cbPerFrame._m0[3u].x));
    float _3076 = (_3056 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3076 * (_3057 ? _3065 : (_3065 + (cbSceneParam._m0[72u].w * _3038)));
    SV_Target.y = _3076 * (_3057 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3040)));
    SV_Target.z = _3076 * (_3057 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3042)));
    SV_Target.w = cbInstanceData._m0[_2938].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2938].w;
}


