#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_snp_0_Texture2D_3;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_Enemy_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_Enemy_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_Enemy_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_snp_0_Texture2D_13;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1406;
float _4070;
float _4071;
float _4072;
float _4073;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _269 = texture(sampler2D(C_Enemy_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _289 = texture(sampler2D(C_Enemy_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _302 = exp2(log2(_289.w * cbMtdParam._m0[24u].y) * cbMtdParam._m0[21u].y);
    float _303 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _304 = isnan(1.0) ? _303 : (isnan(_303) ? 1.0 : min(_303, 1.0));
    vec4 _318 = texture(sampler2D(C_Enemy_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _322 = _318.z;
    float _331 = exp2(log2(_322 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _332 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _333 = isnan(1.0) ? _332 : (isnan(_332) ? 1.0 : min(_332, 1.0));
    vec4 _346 = texture(sampler2D(C_Enemy_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _370 = texture(sampler2D(C_Enemy_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _381 = cbMtdParam._m0[9u].x * _370.x;
    float _382 = cbMtdParam._m0[9u].y * _370.y;
    float _383 = cbMtdParam._m0[9u].z * _370.z;
    float _390 = (((cbMtdParam._m0[10u].x * _346.x) - _381) * _333) + _381;
    float _391 = (((cbMtdParam._m0[10u].y * _346.y) - _382) * _333) + _382;
    float _392 = (((cbMtdParam._m0[10u].z * _346.z) - _383) * _333) + _383;
    float _396 = exp2(log2(_318.w) * cbMtdParam._m0[22u].y);
    vec4 _409 = texture(sampler2D(C_Enemy_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _428 = (((cbMtdParam._m0[12u].x * _409.x) - _390) * _396) + _390;
    float _429 = (((cbMtdParam._m0[12u].y * _409.y) - _391) * _396) + _391;
    float _430 = (((cbMtdParam._m0[12u].z * _409.z) - _392) * _396) + _392;
    vec4 _443 = texture(sampler2D(C_Enemy_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _467 = (_289.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _443.x) - _428) * _304) + _428);
    float _469 = (_289.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _443.y) - _429) * _304) + _429);
    float _471 = (_289.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _443.z) - _430) * _304) + _430);
    vec4 _483 = texture(sampler2D(C_Enemy_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _501 = TEXCOORD_5.x - ((cbMtdParam._m0[22u].z * (1.0 - TEXCOORD_5.x)) * (_269.x + 0.00999999977648258209228515625));
    float _503 = _501 * (cbMtdParam._m0[23u].x + 1.0);
    float _4102 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _504 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _511 = (_504 * ((cbMtdParam._m0[11u].x * _483.x) - _467)) + _467;
    float _512 = (((cbMtdParam._m0[11u].y * _483.y) - _469) * _504) + _469;
    float _513 = (((cbMtdParam._m0[11u].z * _483.z) - _471) * _504) + _471;
    float _543 = cbMtdParam._m0[23u].z + texture(sampler2D(C_Enemy_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x;
    float _546 = ((texture(sampler2D(C_Enemy_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _543) * _333) + _543;
    float _566 = (((texture(sampler2D(C_Enemy_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _546) + cbMtdParam._m0[21u].z) * _396) + _546;
    float _586 = (((texture(sampler2D(C_Enemy_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x - _566) + cbMtdParam._m0[24u].z) * _304) + _566;
    float _589 = (cbMtdParam._m0[22u].w + 1.0) * _501;
    float _4113 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _592 = _586 - (_586 * _590);
    vec4 _606 = texture(sampler2D(C_Enemy_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    vec4 _625 = texture(sampler2D(C_Enemy_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _627 = _625.x;
    float _628 = _625.y;
    float _631 = cbMtdParam._m0[20u].x + _625.z;
    float _634 = (((cbMtdParam._m0[21u].x + _606.z) - _631) * _333) + _631;
    vec4 _646 = texture(sampler2D(C_Enemy_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _655 = (((_646.z - _634) + cbMtdParam._m0[24u].x) * _396) + _634;
    float _661 = ((((_322 * 2.0) * _655) - _655) * cbMtdParam._m0[23u].y) + _655;
    vec4 _674 = texture(sampler2D(C_Enemy_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _683 = (((cbMtdParam._m0[22u].x + _674.z) - _661) * _304) + _661;
    vec4 _696 = texture(sampler2D(C_Enemy_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _703 = (_696.x * 2.0) + (-1.0);
    float _705 = (_696.y * 2.0) + (-1.0);
    float _706 = dot(vec2(_703, _705), vec2(_703, _705));
    float _4124 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _714 = (_590 * (_696.z - _683)) + _683;
    float _724 = ((_606.x - _627) * _333) + _627;
    float _725 = ((_606.y - _628) * _333) + _628;
    float _730 = ((_646.x - _724) * _396) + _724;
    float _731 = ((_646.y - _725) * _396) + _725;
    float _740 = ((((_674.x - _730) * _304) + _730) * 2.0) + (-1.0);
    float _741 = ((((_674.y - _731) * _304) + _731) * 2.0) + (-1.0);
    float _742 = dot(vec2(_740, _741), vec2(_740, _741));
    float _4135 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _747 = sqrt(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))));
    float _750 = (cbMtdParam._m0[23u].w * ((_318.x * 2.0) + (-1.0))) + _740;
    float _751 = (cbMtdParam._m0[23u].w * ((_318.y * 2.0) + (-1.0))) + _741;
    float _758 = (_590 * (_703 - _750)) + _750;
    float _759 = (_590 * (_705 - _751)) + _751;
    float _760 = (_590 * (sqrt(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) - _747)) + _747;
    float _763 = fma(_760, _237 * NORMAL.x, fma(_759, _244 * TANGENT.x, (_230 * _222) * _758));
    float _766 = fma(_760, _237 * NORMAL.y, fma(_759, _244 * TANGENT.y, (_230 * _223) * _758));
    float _769 = fma(_760, _237 * NORMAL.z, fma(_759, _244 * TANGENT.z, (_230 * _224) * _758));
    float _773 = inversesqrt(dot(vec3(_763, _766, _769), vec3(_763, _766, _769)));
    float _774 = _773 * _763;
    float _775 = _773 * _766;
    float _776 = _773 * _769;
    float _4146 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _777 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _4157 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4168 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4179 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4190 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _781 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _797 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _847 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _837);
    float _848 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _837);
    float _849 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _837);
    float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
    float _854 = _847 * _853;
    float _855 = _848 * _853;
    float _856 = _849 * _853;
    vec4 _861 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _863 = _861.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1086 = sqrt(((_847 * _847) + (_848 * _848)) + (_849 * _849));
        float _1092 = (cbMatDynParam._m0[5u].x * _1086) + cbMatDynParam._m0[5u].y;
        float _4201 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1097 = (cbMatDynParam._m0[5u].z * _1086) + cbMatDynParam._m0[5u].w;
        float _4212 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) - _1093)) + _1093) < ((_863 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _875 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _876 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _878 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _880 = _878.w;
    float _899 = fma(_776, cbSceneParam._m0[5u].z, fma(_775, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _774));
    float _902 = fma(_776, cbSceneParam._m0[6u].z, fma(_775, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _774));
    float _905 = fma(_776, cbSceneParam._m0[7u].z, fma(_775, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _774));
    vec4 _907 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _918 = (((_907.y - _777) + (_907.w * _777)) * cbMtdParam._m0[3u].x) + _777;
    uint _931 = uint(roundEven(NORMAL.w)) * 13u;
    uint _932 = _931 + 9u;
    uint _933 = _932 + uint(cbMatDynParam._m0[0u].w);
    float _939 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_933].x;
    float _940 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * cbInstanceData._m0[_933].y;
    float _941 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * cbInstanceData._m0[_933].z;
    float _4223 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _4245 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    vec4 _945 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _950 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _961 = (((_950.x - _781) + (_950.w * _781)) * cbMtdParam._m0[3u].x) + _781;
    float _974 = (cbMtdParam._m0[3u].x * (((_942 * _880) - _942) + _945.x)) + _942;
    float _975 = (cbMtdParam._m0[3u].x * (((_943 * _880) - _943) + _945.y)) + _943;
    float _976 = (cbMtdParam._m0[3u].x * (((_944 * _880) - _944) + _945.z)) + _944;
    float _977 = 1.0 - _961;
    float _978 = _977 * _974;
    float _979 = _977 * _975;
    float _980 = _977 * _976;
    float _985 = (_974 + (-0.039999999105930328369140625)) * _961;
    float _986 = (_975 + (-0.039999999105930328369140625)) * _961;
    float _987 = (_976 + (-0.039999999105930328369140625)) * _961;
    float _988 = _985 + 0.039999999105930328369140625;
    float _990 = _986 + 0.039999999105930328369140625;
    float _991 = _987 + 0.039999999105930328369140625;
    vec4 _1000 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _875, cbSceneParam._m0[86u].y * _876));
    float _1003 = _1000.x * TEXCOORD_5.w;
    float _1004 = dot(vec3(_774, _775, _776), vec3(_854, _855, _856));
    float _1007 = _1004 * 2.0;
    float _1011 = (_1007 * _774) - _854;
    float _1012 = (_1007 * _775) - _855;
    float _1013 = (_1007 * _776) - _856;
    float _1017 = abs(dot(vec3(_854, _855, _856), vec3(_774, _775, _776)));
    float _4256 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1019 = sqrt(_918);
    float _1032 = exp2((_1019 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1019 * 3.0));
    float _1038 = (1.0 - _1032) * ((_1019 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1039 = _1032 * _1019;
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1405;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1130 = fma(_1075, cbModelParam._m0[26u].z, fma(_1071, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1067));
        float _1134 = fma(_1075, cbModelParam._m0[27u].z, fma(_1071, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1067));
        float _1138 = fma(_1075, cbModelParam._m0[28u].z, fma(_1071, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1067));
        float _1163 = _1067 + _774;
        float _1164 = _1071 + _775;
        float _1165 = _1075 + _776;
        float _1175 = fma(_1165, cbModelParam._m0[26u].z, fma(_1164, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163)) - _1130;
        float _1176 = fma(_1165, cbModelParam._m0[27u].z, fma(_1164, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163)) - _1134;
        float _1177 = fma(_1165, cbModelParam._m0[28u].z, fma(_1164, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163)) - _1138;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1130 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1134 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[34u].z) + ((((((_1138 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1233 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1199.x + (-0.5));
        float _1235 = _1233 * (_1199.y + (-0.5));
        float _1236 = _1233 * (_1199.z + (-0.5));
        float _1243 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1206.x + (-0.5));
        float _1245 = _1243 * (_1206.y + (-0.5));
        float _1246 = _1243 * (_1206.z + (-0.5));
        float _1253 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1213.x + (-0.5));
        float _1255 = _1253 * (_1213.y + (-0.5));
        float _1256 = _1253 * (_1213.z + (-0.5));
        float _1263 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1220.x + (-0.5));
        float _1265 = _1263 * (_1220.y + (-0.5));
        float _1266 = _1263 * (_1220.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1287 = (dot(vec3(_774, _775, _776), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1297 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4304 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1299 + 1.0))) + _1304) * _1267;
        float _1314 = _1235 * 0.5;
        float _1315 = _1245 * 0.5;
        float _1316 = _1255 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_774, _775, _776), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4337 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1341 + 1.0))) + _1346) * _1268;
        float _1356 = _1236 * 0.5;
        float _1357 = _1246 * 0.5;
        float _1358 = _1256 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_774, _775, _776), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4370 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1383 + 1.0))) + _1388) * _1269;
        _1405 = _1236;
        _1407 = _1235;
        _1408 = _1234;
        _1409 = _1246;
        _1410 = _1245;
        _1411 = _1244;
        _1412 = _1256;
        _1413 = _1255;
        _1414 = _1254;
        _1415 = _1269;
        _1416 = _1268;
        _1417 = _1267;
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
    }
    else
    {
        _1405 = _1406;
        _1407 = _1406;
        _1408 = _1406;
        _1409 = _1406;
        _1410 = _1406;
        _1411 = _1406;
        _1412 = _1406;
        _1413 = _1406;
        _1414 = _1406;
        _1415 = _1406;
        _1416 = _1406;
        _1417 = _1406;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1449 = fma(_1075, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067));
        float _1453 = fma(_1075, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067));
        float _1457 = fma(_1075, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067));
        float _1480 = _1067 + _774;
        float _1481 = _1071 + _775;
        float _1482 = _1075 + _776;
        float _1492 = fma(_1482, cbModelParam._m0[30u].z, fma(_1481, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1480)) - _1449;
        float _1493 = fma(_1482, cbModelParam._m0[31u].z, fma(_1481, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1480)) - _1453;
        float _1494 = fma(_1482, cbModelParam._m0[32u].z, fma(_1481, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1480)) - _1457;
        float _1498 = inversesqrt(dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494)));
        float _1511 = ((_1498 * _1492) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1449 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1498 * _1493) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1453 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1498 * _1494) / cbModelParam._m0[35u].z) + ((((((_1457 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        float _1548 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1515.x + (-0.5));
        float _1550 = _1548 * (_1515.y + (-0.5));
        float _1551 = _1548 * (_1515.z + (-0.5));
        float _1558 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1522.x + (-0.5));
        float _1560 = _1558 * (_1522.y + (-0.5));
        float _1561 = _1558 * (_1522.z + (-0.5));
        float _1568 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1529.x + (-0.5));
        float _1570 = _1568 * (_1529.y + (-0.5));
        float _1571 = _1568 * (_1529.z + (-0.5));
        float _1578 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1536.x + (-0.5));
        float _1580 = _1578 * (_1536.y + (-0.5));
        float _1581 = _1578 * (_1536.z + (-0.5));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = _1549 * 0.5;
        float _1586 = _1559 * 0.5;
        float _1587 = _1569 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_774, _775, _776), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4433 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1612 + 1.0))) + _1617) * _1582;
        float _1627 = _1550 * 0.5;
        float _1628 = _1560 * 0.5;
        float _1629 = _1570 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_774, _775, _776), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4466 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1654 + 1.0))) + _1659) * _1583;
        float _1669 = _1551 * 0.5;
        float _1670 = _1561 * 0.5;
        float _1671 = _1571 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_774, _775, _776), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4499 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1696 + 1.0))) + _1701) * _1584;
        _1718 = _1551;
        _1719 = _1550;
        _1720 = _1549;
        _1721 = _1561;
        _1722 = _1560;
        _1723 = _1559;
        _1724 = _1571;
        _1725 = _1570;
        _1726 = _1569;
        _1727 = _1584;
        _1728 = _1583;
        _1729 = _1582;
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
    }
    else
    {
        _1718 = _1406;
        _1719 = _1406;
        _1720 = _1406;
        _1721 = _1406;
        _1722 = _1406;
        _1723 = _1406;
        _1724 = _1406;
        _1725 = _1406;
        _1726 = _1406;
        _1727 = _1406;
        _1728 = _1406;
        _1729 = _1406;
        _1730 = 0.0;
        _1731 = 0.0;
        _1732 = 0.0;
    }
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1418)) + _1418;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1419)) + _1419;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1420)) + _1420;
    float _1765 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1743, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1743, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1743, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1742));
    float _1786 = _1011 * 0.5;
    float _1787 = _1012 * 0.5;
    float _1788 = _1013 * 0.5;
    float _1789 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1792 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1795 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1829;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1802 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1405, _1409, _1412, _1415));
        float _1806 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1407, _1410, _1413, _1416));
        float _1810 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1817 = dot(vec4(cbModelParam._m0[39u]), vec4(_1786, _1787, _1788, 1.0));
        _1829 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1817) ? 0.0 : (isnan(0.0) ? _1817 : max(0.0, _1817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1829 = 1.0;
    }
    float _1840;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1831 = dot(vec4(cbModelParam._m0[40u]), vec4(_1786, _1787, _1788, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1844 = (_1840 * cbModelParam._m0[1u].x) + (_1829 * (1.0 - cbModelParam._m0[1u].x));
    float _1854 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _918);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1854 : min(cbModelParam._m0[25u].z, _1854));
    float _1935;
    float _1937;
    float _1939;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1902 = fma(_1075, cbModelParam._m0[13u].z, fma(_1071, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067)) + cbModelParam._m0[13u].w;
        float _1906 = fma(_1075, cbModelParam._m0[14u].z, fma(_1071, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067)) + cbModelParam._m0[14u].w;
        float _1910 = fma(_1075, cbModelParam._m0[15u].z, fma(_1071, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067)) + cbModelParam._m0[15u].w;
        float _1913 = fma(_1013, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011));
        float _1916 = fma(_1013, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011));
        float _1919 = fma(_1013, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011));
        float _1947;
        if (_1913 > 0.0)
        {
            _1947 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1947 = frontier_phi_17_15_ladder;
        }
        float _2119;
        if (_1916 > 0.0)
        {
            _2119 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2119 = frontier_phi_26_22_ladder;
        }
        float _2414;
        if (_1919 > 0.0)
        {
            _2414 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2414 = frontier_phi_38_33_ladder;
        }
        float _2416 = isnan(_2119) ? _1947 : (isnan(_1947) ? _2119 : min(_1947, _2119));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1913) + _1902;
        float _2422 = (_2417 * _1916) + _1906;
        float _2423 = (_2417 * _1919) + _1910;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2424;
        float _2428 = _2424 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 > _2428) || ((_2422 < _2426) || ((_2421 < _2426) || (_2421 > _2428))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1855);
            frontier_phi_16_38_ladder = _2568.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2568.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2568.x * cbModelParam._m0[1u].y;
        }
        _1935 = frontier_phi_16_38_ladder_2;
        _1937 = frontier_phi_16_38_ladder_1;
        _1939 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1923 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1011, _1012, _1013), _1855);
        _1935 = _1923.x * cbModelParam._m0[1u].y;
        _1937 = _1923.y * cbModelParam._m0[1u].y;
        _1939 = _1923.z * cbModelParam._m0[1u].y;
    }
    float _1943 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _918);
    float _1944 = isnan(_1943) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1943 : min(cbModelParam._m0[25u].w, _1943));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1998 = fma(_1075, cbModelParam._m0[21u].z, fma(_1071, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067)) + cbModelParam._m0[21u].w;
        float _2002 = fma(_1075, cbModelParam._m0[22u].z, fma(_1071, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067)) + cbModelParam._m0[22u].w;
        float _2006 = fma(_1075, cbModelParam._m0[23u].z, fma(_1071, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067)) + cbModelParam._m0[23u].w;
        float _2009 = fma(_1013, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011));
        float _2012 = fma(_1013, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011));
        float _2015 = fma(_1013, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011));
        float _2124;
        if (_2009 > 0.0)
        {
            _2124 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2124 = frontier_phi_28_24_ladder;
        }
        float _2441;
        if (_2012 > 0.0)
        {
            _2441 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2441 = frontier_phi_40_35_ladder;
        }
        float _2779;
        if (_2015 > 0.0)
        {
            _2779 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2779 = frontier_phi_50_47_ladder;
        }
        float _2781 = isnan(_2441) ? _2124 : (isnan(_2124) ? _2441 : min(_2124, _2441));
        float _2782 = isnan(_2779) ? _2781 : (isnan(_2781) ? _2779 : min(_2781, _2779));
        float _2786 = (_2782 * _2009) + _1998;
        float _2787 = (_2782 * _2012) + _2002;
        float _2788 = (_2782 * _2015) + _2006;
        float _2789 = _2782 * 9.9999997473787516355514526367188e-05;
        float _2790 = (-1.0) - _2789;
        float _2792 = _2789 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2788 > _2792) || ((_2788 < _2790) || ((_2787 > _2792) || ((_2787 < _2790) || ((_2786 < _2790) || (_2786 > _2792))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2788, cbModelParam._m0[17u].z, fma(_2787, cbModelParam._m0[17u].y, _2786 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2788, cbModelParam._m0[18u].z, fma(_2787, cbModelParam._m0[18u].y, _2786 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2788, cbModelParam._m0[19u].z, fma(_2787, cbModelParam._m0[19u].y, _2786 * cbModelParam._m0[19u].x))), _1944);
            frontier_phi_25_50_ladder = _2910.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2910.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2910.x * cbModelParam._m0[1u].z;
        }
        _2034 = frontier_phi_25_50_ladder_2;
        _2036 = frontier_phi_25_50_ladder_1;
        _2038 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1011, _1012, _1013), _1944);
        _2034 = _2018.x * cbModelParam._m0[1u].z;
        _2036 = _2018.y * cbModelParam._m0[1u].z;
        _2038 = _2018.z * cbModelParam._m0[1u].z;
    }
    float _2051 = (((_1038 * _988) + _1039) * _1003) * ((cbModelParam._m0[1u].w * (_2034 - _1935)) + _1935);
    float _2053 = (((_1038 * _990) + _1039) * _1003) * ((cbModelParam._m0[1u].w * (_2036 - _1937)) + _1937);
    float _2055 = (((_1038 * _991) + _1039) * _1003) * ((cbModelParam._m0[1u].w * (_2038 - _1939)) + _1939);
    float _2058 = fma(_2055, cbSceneParam._m0[89u].z, fma(_2053, cbSceneParam._m0[89u].y, _2051 * cbSceneParam._m0[89u].x));
    float _2061 = fma(_2055, cbSceneParam._m0[90u].z, fma(_2053, cbSceneParam._m0[90u].y, _2051 * cbSceneParam._m0[90u].x));
    float _2064 = fma(_2055, cbSceneParam._m0[91u].z, fma(_2053, cbSceneParam._m0[91u].y, _2051 * cbSceneParam._m0[91u].x));
    float _2098 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2102 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2106 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2110 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2111 = _2098 / _2110;
    float _2112 = _2102 / _2110;
    float _2113 = _2106 / _2110;
    float _2260;
    float _2261;
    float _2262;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2140 = ((uint(_2113 > cbSceneParam._m0[59u].y) + uint(_2113 > cbSceneParam._m0[59u].x)) + uint(_2113 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2141 = _2140 + 43u;
        uint _2149 = _2140 + 44u;
        uint _2157 = _2140 + 45u;
        uint _2165 = _2140 + 46u;
        float _2176 = fma(_2110, cbSceneParam._m0[_2141].w, fma(_2106, cbSceneParam._m0[_2141].z, fma(_2102, cbSceneParam._m0[_2141].y, _2098 * cbSceneParam._m0[_2141].x)));
        float _2180 = fma(_2110, cbSceneParam._m0[_2149].w, fma(_2106, cbSceneParam._m0[_2149].z, fma(_2102, cbSceneParam._m0[_2149].y, _2098 * cbSceneParam._m0[_2149].x)));
        float _2188 = fma(_2110, cbSceneParam._m0[_2165].w, fma(_2106, cbSceneParam._m0[_2165].z, fma(_2102, cbSceneParam._m0[_2165].y, _2098 * cbSceneParam._m0[_2165].x)));
        float _2193 = cbSceneParam._m0[33u].z * _2188;
        float _2195 = cbSceneParam._m0[33u].w * _2188;
        float _2198 = fma(_2110, cbSceneParam._m0[_2157].w, fma(_2106, cbSceneParam._m0[_2157].z, fma(_2102, cbSceneParam._m0[_2157].y, _2098 * cbSceneParam._m0[_2157].x))) / _2188;
        float _2246 = (cbSceneParam._m0[33u].x - sqrt(((_2112 * _2112) + (_2111 * _2111)) + (_2113 * _2113))) * cbSceneParam._m0[33u].y;
        float _4625 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2253 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2193 + _2176) / _2188, (_2195 + _2180) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 + _2176) / _2188, (_2180 - _2193) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 - _2193) / _2188, (_2180 - _2195) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 - _2195) / _2188, (_2193 + _2180) / _2188), _2198), 0.0)).x), vec4(0.25)));
        _2260 = 1.0 - (_2253 * cbSceneParam._m0[34u].x);
        _2261 = 1.0 - (_2253 * cbSceneParam._m0[34u].y);
        _2262 = 1.0 - (_2253 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2260 = 1.0;
        _2261 = 1.0;
        _2262 = 1.0;
    }
    float _2326;
    float _2328;
    float _2330;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2314 = fma(_2110, cbSceneParam._m0[63u].w, fma(_2106, cbSceneParam._m0[63u].z, fma(_2102, cbSceneParam._m0[63u].y, _2098 * cbSceneParam._m0[63u].x)));
        float _2315 = fma(_2110, cbSceneParam._m0[60u].w, fma(_2106, cbSceneParam._m0[60u].z, fma(_2102, cbSceneParam._m0[60u].y, _2098 * cbSceneParam._m0[60u].x))) / _2314;
        float _2316 = fma(_2110, cbSceneParam._m0[61u].w, fma(_2106, cbSceneParam._m0[61u].z, fma(_2102, cbSceneParam._m0[61u].y, _2098 * cbSceneParam._m0[61u].x))) / _2314;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2315 >= cbSceneParam._m0[64u].x) && (_2316 >= cbSceneParam._m0[64u].y)) && (_2315 <= cbSceneParam._m0[64u].z)) && (_2316 <= cbSceneParam._m0[64u].w))
        {
            float _2454 = fma(_2110, cbSceneParam._m0[62u].w, fma(_2106, cbSceneParam._m0[62u].z, fma(_2102, cbSceneParam._m0[62u].y, _2098 * cbSceneParam._m0[62u].x))) / _2314;
            float _2458 = isnan(cbSceneParam._m0[41u].w) ? _2454 : (isnan(_2454) ? cbSceneParam._m0[41u].w : max(_2454, cbSceneParam._m0[41u].w));
            float _2501 = (cbSceneParam._m0[33u].x - sqrt(((_2112 * _2112) + (_2111 * _2111)) + (_2113 * _2113))) * cbSceneParam._m0[33u].y;
            float _4641 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
            float _2508 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2315, cbSceneParam._m0[33u].w + _2316), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2315, _2316 - cbSceneParam._m0[33u].z), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2315 - cbSceneParam._m0[33u].z, _2316 - cbSceneParam._m0[33u].w), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2315 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2316), _2458), 0.0)).x), vec4(0.25)));
            float _2512 = 1.0 - (_2508 * cbSceneParam._m0[34u].x);
            float _2513 = 1.0 - (_2508 * cbSceneParam._m0[34u].y);
            float _2514 = 1.0 - (_2508 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2514) ? _2262 : (isnan(_2262) ? _2514 : min(_2262, _2514));
            frontier_phi_37_36_ladder_1 = isnan(_2513) ? _2261 : (isnan(_2261) ? _2513 : min(_2261, _2513));
            frontier_phi_37_36_ladder_2 = isnan(_2512) ? _2260 : (isnan(_2260) ? _2512 : min(_2260, _2512));
        }
        else
        {
            frontier_phi_37_36_ladder = _2262;
            frontier_phi_37_36_ladder_1 = _2261;
            frontier_phi_37_36_ladder_2 = _2260;
        }
        _2326 = frontier_phi_37_36_ladder_2;
        _2328 = frontier_phi_37_36_ladder_1;
        _2330 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2326 = _2260;
        _2328 = _2261;
        _2330 = _2262;
    }
    uvec4 _2335 = floatBitsToUint(cbInstanceData._m0[_931 + 5u]);
    uint _2337 = _2335.x * 14u;
    uint _2338 = _2337 + 13u;
    float _2345 = _1003 + (-1.0);
    float _2350 = (cbLight._m0[_2338].x * _2345) + 1.0;
    float _2351 = (cbLight._m0[_2338].y * _2345) + 1.0;
    float _2352 = (cbLight._m0[_2338].z * _2345) + 1.0;
    float _2353 = (cbLight._m0[_2338].w * _2345) + 1.0;
    uint _2354 = _2337 + 5u;
    float _2360 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
    uint _2364 = _2337 + 4u;
    float _2373 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
    uint _2377 = _2337 | 1u;
    float _2388 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_774, _775, _776));
    float _2391 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_774, _775, _776));
    float _4677 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _4688 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2396 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * 0.3183098733425140380859375;
    float _2398 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * 0.3183098733425140380859375;
    float _2405 = ((cbLight._m0[_2354].x * _2360) * _2398) + (((cbLight._m0[_2364].x * _2326) * _2373) * _2396);
    float _2406 = ((_2360 * cbLight._m0[_2354].y) * _2398) + (((cbLight._m0[_2364].y * _2328) * _2373) * _2396);
    float _2407 = ((_2360 * cbLight._m0[_2354].z) * _2398) + (((cbLight._m0[_2364].z * _2330) * _2373) * _2396);
    uvec4 _2411 = floatBitsToUint(cbLight._m0[_2337 + 12u]);
    bool _2413 = _2411.x == 0u;
    float _2515;
    float _2517;
    float _2519;
    if (_2413)
    {
        _2515 = _2405;
        _2517 = _2406;
        _2519 = _2407;
    }
    else
    {
        uint _2523 = _2337 + 6u;
        float _2539 = (dot(vec3(cbLight._m0[_2337 + 2u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4699 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2542 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2515 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2405;
        _2517 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2406;
        _2519 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2407;
    }
    bool _2522 = _2411.y == 0u;
    float _2577;
    float _2579;
    float _2581;
    if (_2522)
    {
        _2577 = _2515;
        _2579 = _2517;
        _2581 = _2519;
    }
    else
    {
        uint _2750 = _2337 + 7u;
        float _2766 = (dot(vec3(cbLight._m0[_2337 + 3u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2767 = _2766 * _2766;
        float _4715 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2768 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2769 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2577 = (((cbLight._m0[_2750].x * 0.3183098733425140380859375) * _2768) * _2769) + _2515;
        _2579 = (((cbLight._m0[_2750].y * 0.3183098733425140380859375) * _2768) * _2769) + _2517;
        _2581 = (((cbLight._m0[_2750].z * 0.3183098733425140380859375) * _2768) * _2769) + _2519;
    }
    uint _2584 = _2337 + 8u;
    float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _918) * 0.949999988079071044921875);
    float _2598 = _2597 * _2597;
    float _2599 = cbLight._m0[_2337].x + _854;
    float _2600 = cbLight._m0[_2337].y + _855;
    float _2601 = cbLight._m0[_2337].z + _856;
    float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
    float _2606 = _2605 * _2599;
    float _2607 = _2605 * _2600;
    float _2608 = _2605 * _2601;
    float _2609 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2337].xyz));
    float _4731 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _4742 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _2613 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2614 = dot(vec3(_774, _775, _776), vec3(_2606, _2607, _2608));
    float _4753 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2618 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2606, _2607, _2608));
    float _4764 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2622 = _2598 * _2598;
    float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
    float _2634 = exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0);
    float _2635 = 0.959999978542327880859375 - _985;
    float _2637 = 0.959999978542327880859375 - _986;
    float _2638 = 0.959999978542327880859375 - _987;
    float _2645 = 1.0 - _2598;
    float _2656 = (0.5 / (((_2613 * ((_2612 * _2645) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2645) + _2598) * _2612))) * _2612;
    float _4775 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2658 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
    uint _2672 = _2337 + 9u;
    float _2683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _918) * 0.949999988079071044921875);
    float _2684 = _2683 * _2683;
    float _2685 = cbLight._m0[_2377].x + _854;
    float _2686 = cbLight._m0[_2377].y + _855;
    float _2687 = cbLight._m0[_2377].z + _856;
    float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
    float _2692 = _2691 * _2685;
    float _2693 = _2691 * _2686;
    float _2694 = _2691 * _2687;
    float _2695 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2377].xyz));
    float _4786 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2698 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
    float _2699 = dot(vec3(_774, _775, _776), vec3(_2692, _2693, _2694));
    float _4797 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2702 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
    float _2703 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2692, _2693, _2694));
    float _4808 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2707 = _2684 * _2684;
    float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
    float _2718 = exp2(log2(1.0 - (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) * 5.0);
    float _2725 = 1.0 - _2684;
    float _2735 = (0.5 / (((_2613 * ((_2698 * _2725) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2725) + _2684) * _2698))) * _2698;
    float _4819 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2737 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
    float _2747 = (((((_2718 * _2635) + _988) * cbLight._m0[_2672].x) * _2737) * _2360) + ((((cbLight._m0[_2584].x * _2326) * ((_2634 * _2635) + _988)) * _2658) * _2373);
    float _2748 = (((((_2718 * _2637) + _990) * cbLight._m0[_2672].y) * _2737) * _2360) + ((((cbLight._m0[_2584].y * _2328) * ((_2634 * _2637) + _990)) * _2658) * _2373);
    float _2749 = (((((_2718 * _2638) + _991) * cbLight._m0[_2672].z) * _2737) * _2360) + ((((cbLight._m0[_2584].z * _2330) * ((_2634 * _2638) + _991)) * _2658) * _2373);
    float _2805;
    float _2807;
    float _2809;
    if (_2413)
    {
        _2805 = _2747;
        _2807 = _2748;
        _2809 = _2749;
    }
    else
    {
        uint _2811 = _2337 + 2u;
        uint _2815 = _2337 + 10u;
        float _2829 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2811].w)) * _918) * 0.949999988079071044921875);
        float _2830 = _2829 * _2829;
        float _2831 = cbLight._m0[_2811].x + _854;
        float _2832 = cbLight._m0[_2811].y + _855;
        float _2833 = cbLight._m0[_2811].z + _856;
        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
        float _2838 = _2837 * _2831;
        float _2839 = _2837 * _2832;
        float _2840 = _2837 * _2833;
        float _2841 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2811].xyz));
        float _4830 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2845 = dot(vec3(_774, _775, _776), vec3(_2838, _2839, _2840));
        float _4841 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2849 = dot(vec3(cbLight._m0[_2811].xyz), vec3(_2838, _2839, _2840));
        float _4852 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2853 = _2830 * _2830;
        float _2857 = ((_2848 * _2848) * (_2853 + (-1.0))) + 1.0;
        float _2864 = exp2(log2(1.0 - (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) * 5.0);
        float _2871 = 1.0 - _2830;
        float _2881 = (0.5 / (((_2613 * ((_2844 * _2871) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2871) + _2830) * _2844))) * _2844;
        float _4863 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2883 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2853 / ((_2857 * _2857) * 3.141590118408203125));
        float _2884 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2805 = (((((_2864 * _2635) + _988) * cbLight._m0[_2815].x) * _2883) * _2884) + _2747;
        _2807 = (((((_2864 * _2637) + _990) * cbLight._m0[_2815].y) * _2883) * _2884) + _2748;
        _2809 = (((((_2864 * _2638) + _991) * cbLight._m0[_2815].z) * _2883) * _2884) + _2749;
    }
    float _2915;
    float _2917;
    float _2919;
    if (_2522)
    {
        _2915 = _2805;
        _2917 = _2807;
        _2919 = _2809;
    }
    else
    {
        uint _2926 = _2337 + 3u;
        uint _2930 = _2337 + 11u;
        float _2944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2926].w)) * _918) * 0.949999988079071044921875);
        float _2945 = _2944 * _2944;
        float _2946 = cbLight._m0[_2926].x + _854;
        float _2947 = cbLight._m0[_2926].y + _855;
        float _2948 = cbLight._m0[_2926].z + _856;
        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
        float _2953 = _2952 * _2946;
        float _2954 = _2952 * _2947;
        float _2955 = _2952 * _2948;
        float _2956 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2926].xyz));
        float _4879 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2959 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _2960 = dot(vec3(_774, _775, _776), vec3(_2953, _2954, _2955));
        float _4890 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2963 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
        float _2964 = dot(vec3(cbLight._m0[_2926].xyz), vec3(_2953, _2954, _2955));
        float _4901 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2968 = _2945 * _2945;
        float _2972 = ((_2963 * _2963) * (_2968 + (-1.0))) + 1.0;
        float _2979 = exp2(log2(1.0 - (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) * 5.0);
        float _2986 = 1.0 - _2945;
        float _2996 = (0.5 / (((_2613 * ((_2959 * _2986) + _2945)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2986) + _2945) * _2959))) * _2959;
        float _4912 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2998 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2968 / ((_2972 * _2972) * 3.141590118408203125));
        float _2999 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2915 = (((((_2979 * _2635) + _988) * cbLight._m0[_2930].x) * _2998) * _2999) + _2805;
        _2917 = (((((_2979 * _2637) + _990) * cbLight._m0[_2930].y) * _2998) * _2999) + _2807;
        _2919 = (((((_2979 * _2638) + _991) * cbLight._m0[_2930].z) * _2998) * _2999) + _2809;
    }
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    float _3075;
    if (_2335.y == 0u)
    {
        uvec4 _3020 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3021 = _3020.x;
        uint _3032 = uint((float(_3020.y) * floor(float(uint(cbSceneParam._m0[85u].y * _876) / _3021))) + floor(float(uint(cbSceneParam._m0[85u].x * _875) / _3021)));
        float _3042 = (log2(_2113 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3043 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        uint _3046 = uint(isnan(14.0) ? _3043 : (isnan(_3043) ? 14.0 : min(_3043, 14.0)));
        uvec4 _3051 = texelFetch(g_lightClusterGridBuffer, int(((_3046 << 2u) + (_3032 << 6u)) >> 2u));
        uint _3052 = _3051.x;
        uint _3053 = _3020.z;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        if (((((1u << ((_3053 >> 4u) & 15u)) + 4294967295u) & _3052) == 0u) || ((_3053 & 240u) == 0u))
        {
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
        }
        else
        {
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            uint _3291 = 0u;
            uint _3300;
            bool _3301;
            for (;;)
            {
                _3300 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3291 << 2u)) >> 2u)).x;
                _3301 = _3300 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3301)
                {
                    frontier_phi_71_pred = _3290;
                    frontier_phi_71_pred_1 = _3289;
                    frontier_phi_71_pred_2 = _3288;
                    frontier_phi_71_pred_3 = _3287;
                    frontier_phi_71_pred_4 = _3286;
                    frontier_phi_71_pred_5 = _3285;
                }
                else
                {
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    float _3435;
                    uint _3436;
                    _3430 = _3285;
                    _3431 = _3286;
                    _3432 = _3287;
                    _3433 = _3288;
                    _3434 = _3289;
                    _3435 = _3290;
                    _3436 = _3300;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    for (;;)
                    {
                        uint _3440 = uint(findLSB(_3436)) + (_3291 << 5u);
                        uint _3437 = (_3436 + 4294967295u) & _3436;
                        uint _3442 = _3440 * 48u;
                        vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3442)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 3u)).x));
                        uint _3462 = (_3440 * 48u) + 4u;
                        vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3462)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 3u)).x));
                        uint _3481 = (_3440 * 48u) + 8u;
                        vec3 _3492 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3481)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 2u)).x));
                        float _3496 = _3456.x - _2111;
                        float _3497 = _3456.y - _2112;
                        float _3498 = _3456.z - _2113;
                        float _3499 = dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498));
                        float _3502 = inversesqrt(_3499);
                        float _3503 = _3502 * _3496;
                        float _3504 = _3502 * _3497;
                        float _3505 = _3502 * _3498;
                        float _3506 = dot(vec3(_899, _902, _905), vec3(_3503, _3504, _3505));
                        float _3511 = 1.0 - (_3499 * _3456.w);
                        float _4938 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3512 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3513 = sqrt(_3499) * _3475.w;
                        float _3516 = 1.39999997615814208984375 / (_3513 + 1.39999997615814208984375);
                        float _3517 = _3516 * _3516;
                        float _3520 = ((1.0 - _3517) * _3506) + _3517;
                        float _3523 = _3513 * _3513;
                        float _3527 = ((isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0))) * _3512) / ((_3523 * 0.699999988079071044921875) + 1.0);
                        float _3531 = (-0.0) - _2111;
                        float _3532 = (-0.0) - _2112;
                        float _3533 = (-0.0) - _2113;
                        float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                        float _3538 = _3537 * _3531;
                        float _3539 = _3537 * _3532;
                        float _3540 = _3537 * _3533;
                        float _3547 = exp2(log2(1.0 / ((_3523 * 3.5) + 5.0)) * 0.25);
                        float _3548 = 1.0 - _1019;
                        float _3555 = sqrt(1.0 - ((1.0 - (_3548 * _3548)) * (1.0 - (_3547 * _3547))));
                        float _3556 = _3555 * _3555;
                        float _3557 = _3556 * _3556;
                        float _3558 = _3538 + _3503;
                        float _3559 = _3539 + _3504;
                        float _3560 = _3540 + _3505;
                        float _3564 = inversesqrt(dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560)));
                        float _3568 = dot(vec3(_899, _902, _905), vec3(_3538, _3539, _3540));
                        float _4954 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3571 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                        float _3572 = dot(vec3(_899, _902, _905), vec3(_3564 * _3558, _3564 * _3559, _3564 * _3560));
                        float _4965 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3575 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                        float _3579 = ((_3575 * _3575) * (_3557 + (-1.0))) + 1.0;
                        float _3580 = _3516 * _3556;
                        float _3581 = _3580 * _3580;
                        float _3584 = ((1.0 - _3581) * _3506) + _3581;
                        float _4976 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3585 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                        float _3586 = 1.0 - _3556;
                        float _3596 = (0.5 / (((_3585 * ((_3571 * _3586) + _3556)) + 9.9999999392252902907785028219223e-09) + (((_3585 * _3586) + _3556) * _3571))) * _3585;
                        float _4987 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3607 = (((_3557 * 3.1415927410125732421875) * (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0)))) / ((_3579 * _3579) * ((_3523 * 2.1991131305694580078125) + 3.141590118408203125))) * _3512;
                        _3360 = (_3527 * _3475.x) + _3433;
                        _3361 = (_3527 * _3475.y) + _3434;
                        _3362 = (_3527 * _3475.z) + _3435;
                        _3357 = (_3607 * _3492.x) + _3430;
                        _3358 = (_3607 * _3492.y) + _3431;
                        _3359 = (_3607 * _3492.z) + _3432;
                        if (_3437 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3430 = _3357;
                            _3431 = _3358;
                            _3432 = _3359;
                            _3433 = _3360;
                            _3434 = _3361;
                            _3435 = _3362;
                            _3436 = _3437;
                        }
                    }
                    frontier_phi_71_pred = _3362;
                    frontier_phi_71_pred_1 = _3361;
                    frontier_phi_71_pred_2 = _3360;
                    frontier_phi_71_pred_3 = _3359;
                    frontier_phi_71_pred_4 = _3358;
                    frontier_phi_71_pred_5 = _3357;
                }
                _3143 = frontier_phi_71_pred;
                _3141 = frontier_phi_71_pred_1;
                _3139 = frontier_phi_71_pred_2;
                _3137 = frontier_phi_71_pred_3;
                _3135 = frontier_phi_71_pred_4;
                _3133 = frontier_phi_71_pred_5;
                uint _3292 = _3291 + 1u;
                if (_3292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3285 = _3133;
                    _3286 = _3135;
                    _3287 = _3137;
                    _3288 = _3139;
                    _3289 = _3141;
                    _3290 = _3143;
                    _3291 = _3292;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
        }
        uvec4 _3146 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3147 = _3146.z;
        uint _3149 = (_3147 >> 8u) & 15u;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        float _3263;
        if (((4294967295u << _3149) & _3052) == 0u)
        {
            _3253 = _3132;
            _3255 = _3134;
            _3257 = _3136;
            _3259 = _3138;
            _3261 = _3140;
            _3263 = _3142;
        }
        else
        {
            float _3278 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
            float _3279 = _3278 * _2111;
            float _3280 = _3278 * _2112;
            float _3281 = _3278 * _2113;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3149 < ((_3147 >> 12u) & 15u))
            {
                float _3254;
                float _3256;
                float _3258;
                float _3260;
                float _3262;
                float _3264;
                float _3413 = _3132;
                float _3414 = _3134;
                float _3415 = _3136;
                float _3416 = _3138;
                float _3417 = _3140;
                float _3418 = _3142;
                uint _3419 = _3149;
                uint _3428;
                bool _3429;
                for (;;)
                {
                    _3428 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3419 << 2u)) >> 2u)).x;
                    _3429 = _3428 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3429)
                    {
                        frontier_phi_82_pred = _3418;
                        frontier_phi_82_pred_1 = _3417;
                        frontier_phi_82_pred_2 = _3416;
                        frontier_phi_82_pred_3 = _3415;
                        frontier_phi_82_pred_4 = _3414;
                        frontier_phi_82_pred_5 = _3413;
                    }
                    else
                    {
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3634 = _3413;
                        float _3635 = _3414;
                        float _3636 = _3415;
                        float _3637 = _3416;
                        float _3638 = _3417;
                        float _3639 = _3418;
                        uint _3640 = _3428;
                        uint _3641;
                        vec4 _3666;
                        float _3667;
                        vec4 _3682;
                        vec3 _3694;
                        vec4 _3709;
                        vec4 _3724;
                        float _3770;
                        bool _3771;
                        for (;;)
                        {
                            uint _3651 = ((_3419 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3640));
                            _3641 = (_3640 + 4294967295u) & _3640;
                            uint _3653 = _3651 * 40u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            _3667 = _3666.w;
                            uint _3669 = (_3651 * 40u) + 4u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3684 = (_3651 * 40u) + 8u;
                            _3694 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x));
                            uint _3696 = (_3651 * 40u) + 16u;
                            _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3711 = (_3651 * 40u) + 20u;
                            _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            uint _3726 = (_3651 * 40u) + 24u;
                            vec4 _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            uint _3745 = (_3651 * 40u) + 28u;
                            vec4 _3758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 3u)).x));
                            _3770 = fma(_2113, _3758.z, fma(_2112, _3758.y, _3758.x * _2111)) + _3758.w;
                            _3771 = !((fma(_2113, _3739.z, fma(_2112, _3739.y, _3739.x * _2111)) + _3739.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3771)
                            {
                                float _3798 = _3666.x - _2111;
                                float _3799 = _3666.y - _2112;
                                float _3800 = _3666.z - _2113;
                                float _3801 = dot(vec3(_3798, _3799, _3800), vec3(_3798, _3799, _3800));
                                float _3804 = inversesqrt(_3801);
                                float _3805 = _3804 * _3798;
                                float _3806 = _3804 * _3799;
                                float _3807 = _3804 * _3800;
                                float _3811 = 1.0 - (_3801 / (_3667 * _3667));
                                float _4998 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3812 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3816 = sqrt(_3801) * _3682.w;
                                float _3818 = 1.39999997615814208984375 / (_3816 + 1.39999997615814208984375);
                                float _3819 = _3818 * _3818;
                                float _3822 = ((1.0 - _3819) * dot(vec3(_3805, _3806, _3807), vec3(_899, _902, _905))) + _3819;
                                float _3825 = _3816 * _3816;
                                float _3829 = (fma(_2113, _3709.z, fma(_2112, _3709.y, _3709.x * _2111)) + _3709.w) / _3770;
                                float _3830 = (fma(_2113, _3724.z, fma(_2112, _3724.y, _3724.x * _2111)) + _3724.w) / _3770;
                                float _3834 = 1.0 - dot(vec2(_3829, _3830), vec2(_3829, _3830));
                                float _5014 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3835 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3836 = _3835 * (((isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0))) * _3812) / ((_3825 * 0.699999988079071044921875) + 1.0));
                                float _3848 = exp2(log2(1.0 / ((_3825 * 3.5) + 5.0)) * 0.25);
                                float _3849 = 1.0 - _1019;
                                float _3856 = sqrt(1.0 - ((1.0 - (_3849 * _3849)) * (1.0 - (_3848 * _3848))));
                                float _3857 = _3856 * _3856;
                                float _3858 = _3857 * _3857;
                                float _3859 = _3805 - _3279;
                                float _3860 = _3806 - _3280;
                                float _3861 = _3807 - _3281;
                                float _3865 = inversesqrt(dot(vec3(_3859, _3860, _3861), vec3(_3859, _3860, _3861)));
                                float _3869 = dot(vec3(_899, _902, _905), vec3((-0.0) - _3279, (-0.0) - _3280, (-0.0) - _3281));
                                float _5025 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3872 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3873 = dot(vec3(_899, _902, _905), vec3(_3865 * _3859, _3865 * _3860, _3865 * _3861));
                                float _5036 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3876 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                                float _3880 = ((_3876 * _3876) * (_3858 + (-1.0))) + 1.0;
                                float _3881 = _3818 * _3857;
                                float _3882 = _3881 * _3881;
                                float _3888 = ((1.0 - _3882) * dot(vec3(_899, _902, _905), vec3(_3805, _3806, _3807))) + _3882;
                                float _5047 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3889 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                                float _3890 = 1.0 - _3857;
                                float _3900 = (0.5 / (((_3889 * ((_3872 * _3890) + _3857)) + 9.9999999392252902907785028219223e-09) + (((_3889 * _3890) + _3857) * _3872))) * _3889;
                                float _5058 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3910 = (_3835 * _3812) * (((_3858 * 3.1415927410125732421875) * (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0)))) / ((_3880 * _3880) * ((_3825 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3836 * _3682.z;
                                frontier_phi_88_pred_1 = _3836 * _3682.y;
                                frontier_phi_88_pred_2 = _3836 * _3682.x;
                                frontier_phi_88_pred_3 = _3910 * _3694.z;
                                frontier_phi_88_pred_4 = _3910 * _3694.y;
                                frontier_phi_88_pred_5 = _3910 * _3694.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3919 = frontier_phi_88_pred;
                            _3918 = frontier_phi_88_pred_1;
                            _3917 = frontier_phi_88_pred_2;
                            _3916 = frontier_phi_88_pred_3;
                            _3915 = frontier_phi_88_pred_4;
                            _3914 = frontier_phi_88_pred_5;
                            _3624 = _3917 + _3637;
                            _3625 = _3918 + _3638;
                            _3626 = _3919 + _3639;
                            _3621 = _3914 + _3634;
                            _3622 = _3915 + _3635;
                            _3623 = _3916 + _3636;
                            if (_3641 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3641;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3626;
                        frontier_phi_82_pred_1 = _3625;
                        frontier_phi_82_pred_2 = _3624;
                        frontier_phi_82_pred_3 = _3623;
                        frontier_phi_82_pred_4 = _3622;
                        frontier_phi_82_pred_5 = _3621;
                    }
                    _3264 = frontier_phi_82_pred;
                    _3262 = frontier_phi_82_pred_1;
                    _3260 = frontier_phi_82_pred_2;
                    _3258 = frontier_phi_82_pred_3;
                    _3256 = frontier_phi_82_pred_4;
                    _3254 = frontier_phi_82_pred_5;
                    uint _3420 = _3419 + 1u;
                    if (_3420 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3413 = _3254;
                        _3414 = _3256;
                        _3415 = _3258;
                        _3416 = _3260;
                        _3417 = _3262;
                        _3418 = _3264;
                        _3419 = _3420;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3260;
                frontier_phi_63_64_ladder_1 = _3264;
                frontier_phi_63_64_ladder_2 = _3262;
                frontier_phi_63_64_ladder_3 = _3258;
                frontier_phi_63_64_ladder_4 = _3256;
                frontier_phi_63_64_ladder_5 = _3254;
            }
            else
            {
                frontier_phi_63_64_ladder = _3138;
                frontier_phi_63_64_ladder_1 = _3142;
                frontier_phi_63_64_ladder_2 = _3140;
                frontier_phi_63_64_ladder_3 = _3136;
                frontier_phi_63_64_ladder_4 = _3134;
                frontier_phi_63_64_ladder_5 = _3132;
            }
            _3253 = frontier_phi_63_64_ladder_5;
            _3255 = frontier_phi_63_64_ladder_4;
            _3257 = frontier_phi_63_64_ladder_3;
            _3259 = frontier_phi_63_64_ladder;
            _3261 = frontier_phi_63_64_ladder_2;
            _3263 = frontier_phi_63_64_ladder_1;
        }
        float _3268 = isnan(1.0) ? _1003 : (isnan(_1003) ? 1.0 : min(_1003, 1.0));
        _3065 = (_3268 * _3259) + _2577;
        _3067 = (_3268 * _3261) + _2579;
        _3069 = (_3268 * _3263) + _2581;
        _3071 = ((_3253 * _988) * _3268) + _2915;
        _3073 = ((_3255 * _990) * _3268) + _2917;
        _3075 = ((_3257 * _991) * _3268) + _2919;
    }
    else
    {
        _3065 = _2577;
        _3067 = _2579;
        _3069 = _2581;
        _3071 = _2915;
        _3073 = _2917;
        _3075 = _2919;
    }
    float _5074 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _5085 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _5096 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _3092 = ((isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0))) * (_3065 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1003))) + ((_3071 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1844)) * cbPerFrame._m0[3u].x);
    float _3093 = ((isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0))) * (_3067 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1003))) + ((_3073 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1844)) * cbPerFrame._m0[3u].x);
    float _3094 = ((isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0))) * (_3069 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1003))) + ((_3075 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1844)) * cbPerFrame._m0[3u].x);
    uint _3095 = _931 + 6u;
    float _3103 = _875 / cbSceneParam._m0[86u].x;
    float _3104 = _876 / cbSceneParam._m0[86u].y;
    vec4 _3118 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, (log2((isnan(cbSceneParam._m0[77u].w) ? _797 : (isnan(_797) ? cbSceneParam._m0[77u].w : min(_797, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3120 = _3118.x;
    float _3121 = _3118.y;
    float _3122 = _3118.z;
    float _3123 = _3118.w;
    float _3195;
    float _3197;
    float _3199;
    float _3201;
    if (_797 > cbSceneParam._m0[78u].w)
    {
        float _3157 = isnan(_797) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _797 : min(cbSceneParam._m0[80u].w, _797));
        float _3158 = _3157 / _797;
        float _3169 = _3158 * _847;
        float _3170 = _848 * _3158;
        float _3171 = (-0.0) - _3170;
        float _3173 = _3158 * _849;
        float _3175 = (cbSceneParam._m0[77u].w * _3171) / _3157;
        float _3176 = _3175 + cbSceneParam._m0[79u].w;
        float _3177 = cbSceneParam._m0[79u].w - _3170;
        float _3183 = sqrt(((_3169 * _3169) + (_3170 * _3170)) + (_3173 * _3173));
        float _3186 = (1.0 - (cbSceneParam._m0[77u].w / _3157)) * _3183;
        float _3191 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3193 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3370;
        if (abs((_3171 - _3175) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3370 = ((((_3176 > 0.0) ? exp2(_3191 * _3176) : (2.0 - exp2(_3193 * _3176))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3186;
        }
        else
        {
            float _3314 = 1.0 / cbSceneParam._m0[80u].x;
            float _3315 = isnan(_3177) ? _3176 : (isnan(_3176) ? _3177 : max(_3176, _3177));
            float _3316 = isnan(_3177) ? _3176 : (isnan(_3176) ? _3177 : min(_3176, _3177));
            float _3325 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : min(_3315, 0.0));
            float _3326 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : min(_3316, 0.0));
            _3370 = ((abs(_3183 / _3171) * cbSceneParam._m0[80u].y) * ((((_3325 - _3326) * 2.0) - ((exp2(_3191 * (isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0)))) - exp2(_3191 * (isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))))) * _3314)) - ((exp2(_3193 * _3325) - exp2(_3193 * _3326)) * _3314))) + (_3186 * cbSceneParam._m0[80u].z);
        }
        vec4 _3372 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, 1.0), 0.0);
        float _3381 = exp2((_3370 * (-1.44269502162933349609375)) * (1.0 - _3372.w));
        float _3382 = log2(_3381);
        float _3398 = log2(_3123);
        _3195 = (exp2(_3398 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3382 * cbSceneParam._m0[78u].x)) * _3372.x) / cbSceneParam._m0[78u].x)) + _3120;
        _3197 = (exp2(_3398 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3382 * cbSceneParam._m0[78u].y)) * _3372.y) / cbSceneParam._m0[78u].y)) + _3121;
        _3199 = (exp2(_3398 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3382 * cbSceneParam._m0[78u].z)) * _3372.z) / cbSceneParam._m0[78u].z)) + _3122;
        _3201 = _3381 * _3123;
    }
    else
    {
        _3195 = _3120;
        _3197 = _3121;
        _3199 = _3122;
        _3201 = _3123;
    }
    bool _3408;
    vec4 _3211;
    vec4 _3233;
    float _3235;
    float _3239;
    float _3240;
    float _3241;
    float _3242;
    bool _3252;
    for (;;)
    {
        _3211 = cbMatDynParam._m0[0u];
        float _3213 = roundEven(_3211.y);
        bool _3214 = _3213 == 3.0;
        float _3215 = log2(_3201);
        float _3222 = exp2(_3215 * cbSceneParam._m0[78u].x) * _3092;
        float _3223 = exp2(_3215 * cbSceneParam._m0[78u].y) * _3093;
        float _3224 = exp2(_3215 * cbSceneParam._m0[78u].z) * _3094;
        float _3231 = _863 + (-0.5);
        _3233 = cbMtdParam._m0[1u];
        _3235 = _3233.y * _3231;
        float _3238 = (_3213 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3239 = _3238 * (_3214 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3195)));
        _3240 = _3238 * (_3214 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3197)));
        _3241 = _3238 * (_3214 ? _3224 : (_3224 + (cbSceneParam._m0[72u].w * _3199)));
        _3242 = _3231 * 0.999000012874603271484375;
        _3252 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3252)
        {
            if ((cbInstanceData._m0[_931 + 7u].x + _3242) < 0.5)
            {
                _3408 = true;
                break;
            }
        }
        uint _3349 = _932 + uint(_3211.w);
        if ((cbInstanceData._m0[_3349].w < 1.0) && ((cbInstanceData._m0[_3349].w + _3242) < 0.5))
        {
            _3408 = true;
            break;
        }
        if ((_3235 + 1.0) < _3233.x)
        {
            _3408 = true;
            break;
        }
        _3408 = false;
        break;
    }
    float _3612;
    if (_3408)
    {
        discard_state = true;
        _3612 = 0.0;
    }
    else
    {
        _3612 = cbInstanceData._m0[_3095].w;
    }
    SV_Target.x = _3239;
    SV_Target.y = _3240;
    SV_Target.z = _3241;
    SV_Target.w = _3612;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3095].w;
    discard_exit();
}


