#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_snp_0_Texture2D_3;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_Enemy_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_Enemy_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_Enemy_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1294;
float _3958;
float _3959;
float _3960;
float _3961;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _254 = texture(sampler2D(C_Enemy_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _264 = log2(0.0);
    float _266 = exp2(_264 * cbMtdParam._m0[21u].y);
    float _267 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _268 = isnan(1.0) ? _267 : (isnan(_267) ? 1.0 : min(_267, 1.0));
    vec4 _282 = texture(sampler2D(C_Enemy_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _282.z;
    float _295 = exp2(log2(_286 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _296 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _297 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    vec4 _310 = texture(sampler2D(C_Enemy_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _335 = texture(sampler2D(C_Enemy_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _346 = cbMtdParam._m0[9u].x * _335.x;
    float _347 = cbMtdParam._m0[9u].y * _335.y;
    float _348 = cbMtdParam._m0[9u].z * _335.z;
    float _355 = (((cbMtdParam._m0[10u].x * _310.x) - _346) * _297) + _346;
    float _356 = (((cbMtdParam._m0[10u].y * _310.y) - _347) * _297) + _347;
    float _357 = (((cbMtdParam._m0[10u].z * _310.z) - _348) * _297) + _348;
    float _364 = exp2(log2(_282.w) * cbMtdParam._m0[22u].y);
    vec4 _377 = texture(sampler2D(C_Enemy_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _396 = (((cbMtdParam._m0[12u].x * _377.x) - _355) * _364) + _355;
    float _397 = (((cbMtdParam._m0[12u].y * _377.y) - _356) * _364) + _356;
    float _398 = (((cbMtdParam._m0[12u].z * _377.z) - _357) * _364) + _357;
    vec4 _411 = texture(sampler2D(C_Enemy_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _435 = (_254.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _411.x) - _396) * _268) + _396);
    float _437 = (_254.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _411.y) - _397) * _268) + _397);
    float _439 = (_254.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _411.z) - _398) * _268) + _398);
    float _471 = cbMtdParam._m0[23u].z + texture(sampler2D(C_Enemy_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x;
    float _474 = ((texture(sampler2D(C_Enemy_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _471) * _297) + _471;
    float _494 = (((texture(sampler2D(C_Enemy_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _474) + cbMtdParam._m0[21u].z) * _364) + _474;
    float _517 = (((texture(sampler2D(C_Enemy_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x - _494) + cbMtdParam._m0[24u].z) * _268) + _494;
    vec4 _531 = texture(sampler2D(C_Enemy_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    vec4 _550 = texture(sampler2D(C_Enemy_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _552 = _550.x;
    float _553 = _550.y;
    float _556 = cbMtdParam._m0[20u].x + _550.z;
    float _559 = (((cbMtdParam._m0[21u].x + _531.z) - _556) * _297) + _556;
    vec4 _571 = texture(sampler2D(C_Enemy_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _580 = (((_571.z - _559) + cbMtdParam._m0[24u].x) * _364) + _559;
    float _586 = ((((_286 * 2.0) * _580) - _580) * cbMtdParam._m0[23u].y) + _580;
    vec4 _599 = texture(sampler2D(C_Enemy_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _608 = (((cbMtdParam._m0[22u].x + _599.z) - _586) * _268) + _586;
    float _619 = ((_531.x - _552) * _297) + _552;
    float _620 = ((_531.y - _553) * _297) + _553;
    float _625 = ((_571.x - _619) * _364) + _619;
    float _626 = ((_571.y - _620) * _364) + _620;
    float _635 = ((((_599.x - _625) * _268) + _625) * 2.0) + (-1.0);
    float _636 = ((((_599.y - _626) * _268) + _626) * 2.0) + (-1.0);
    float _637 = dot(vec2(_635, _636), vec2(_635, _636));
    float _3990 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _642 = sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))));
    float _645 = _635 + (cbMtdParam._m0[23u].w * ((_282.x * 2.0) + (-1.0)));
    float _646 = _636 + (cbMtdParam._m0[23u].w * ((_282.y * 2.0) + (-1.0)));
    float _649 = fma(_642, _229 * NORMAL.x, fma(_646, _236 * TANGENT.x, (_222 * _214) * _645));
    float _652 = fma(_642, _229 * NORMAL.y, fma(_646, _236 * TANGENT.y, (_222 * _215) * _645));
    float _655 = fma(_642, _229 * NORMAL.z, fma(_646, _236 * TANGENT.z, (_222 * _216) * _645));
    float _659 = inversesqrt(dot(vec3(_649, _652, _655), vec3(_649, _652, _655)));
    float _660 = _659 * _649;
    float _661 = _659 * _652;
    float _662 = _659 * _655;
    float _4001 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _663 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4023 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4034 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _4045 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _667 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _683 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _734 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _724);
    float _735 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _724);
    float _736 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _724);
    float _740 = inversesqrt(dot(vec3(_734, _735, _736), vec3(_734, _735, _736)));
    float _741 = _734 * _740;
    float _742 = _735 * _740;
    float _743 = _736 * _740;
    vec4 _748 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _750 = _748.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _973 = sqrt(((_734 * _734) + (_735 * _735)) + (_736 * _736));
        float _979 = (cbMatDynParam._m0[5u].x * _973) + cbMatDynParam._m0[5u].y;
        float _4056 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _984 = (cbMatDynParam._m0[5u].z * _973) + cbMatDynParam._m0[5u].w;
        float _4067 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) - _980)) + _980) < ((_750 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _762 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _763 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _765 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _767 = _765.w;
    float _786 = fma(_662, cbSceneParam._m0[5u].z, fma(_661, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _660));
    float _789 = fma(_662, cbSceneParam._m0[6u].z, fma(_661, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _660));
    float _792 = fma(_662, cbSceneParam._m0[7u].z, fma(_661, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _660));
    vec4 _794 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _805 = (((_794.y - _663) + (_794.w * _663)) * cbMtdParam._m0[3u].x) + _663;
    uint _818 = uint(roundEven(NORMAL.w)) * 13u;
    uint _819 = _818 + 9u;
    uint _820 = _819 + uint(cbMatDynParam._m0[0u].w);
    float _826 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_820].x;
    float _827 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_820].y;
    float _828 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_820].z;
    float _4078 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    vec4 _832 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _837 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _848 = (((_837.x - _667) + (_837.w * _667)) * cbMtdParam._m0[3u].x) + _667;
    float _861 = (cbMtdParam._m0[3u].x * (((_829 * _767) - _829) + _832.x)) + _829;
    float _862 = (cbMtdParam._m0[3u].x * (((_830 * _767) - _830) + _832.y)) + _830;
    float _863 = (cbMtdParam._m0[3u].x * (((_831 * _767) - _831) + _832.z)) + _831;
    float _864 = 1.0 - _848;
    float _865 = _864 * _861;
    float _866 = _864 * _862;
    float _867 = _864 * _863;
    float _872 = (_861 + (-0.039999999105930328369140625)) * _848;
    float _873 = (_862 + (-0.039999999105930328369140625)) * _848;
    float _874 = (_863 + (-0.039999999105930328369140625)) * _848;
    float _875 = _872 + 0.039999999105930328369140625;
    float _877 = _873 + 0.039999999105930328369140625;
    float _878 = _874 + 0.039999999105930328369140625;
    vec4 _887 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _762, cbSceneParam._m0[86u].y * _763));
    float _890 = _887.x * TEXCOORD_5.w;
    float _891 = dot(vec3(_660, _661, _662), vec3(_741, _742, _743));
    float _894 = _891 * 2.0;
    float _898 = (_894 * _660) - _741;
    float _899 = (_894 * _661) - _742;
    float _900 = (_894 * _662) - _743;
    float _904 = abs(dot(vec3(_741, _742, _743), vec3(_660, _661, _662)));
    float _4111 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _906 = sqrt(_805);
    float _919 = exp2((_906 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_906 * 3.0));
    float _925 = (1.0 - _919) * ((_906 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _926 = _919 * _906;
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1293;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1018 = fma(_962, cbModelParam._m0[26u].z, fma(_958, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954));
        float _1022 = fma(_962, cbModelParam._m0[27u].z, fma(_958, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954));
        float _1026 = fma(_962, cbModelParam._m0[28u].z, fma(_958, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954));
        float _1051 = _954 + _660;
        float _1052 = _958 + _661;
        float _1053 = _962 + _662;
        float _1063 = fma(_1053, cbModelParam._m0[26u].z, fma(_1052, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1051)) - _1018;
        float _1064 = fma(_1053, cbModelParam._m0[27u].z, fma(_1052, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1051)) - _1022;
        float _1065 = fma(_1053, cbModelParam._m0[28u].z, fma(_1052, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1051)) - _1026;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1018 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1022 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[34u].z) + ((((((_1026 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1121 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1087.x + (-0.5));
        float _1123 = _1121 * (_1087.y + (-0.5));
        float _1124 = _1121 * (_1087.z + (-0.5));
        float _1131 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1094.x + (-0.5));
        float _1133 = _1131 * (_1094.y + (-0.5));
        float _1134 = _1131 * (_1094.z + (-0.5));
        float _1141 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1101.x + (-0.5));
        float _1143 = _1141 * (_1101.y + (-0.5));
        float _1144 = _1141 * (_1101.z + (-0.5));
        float _1151 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1108.x + (-0.5));
        float _1153 = _1151 * (_1108.y + (-0.5));
        float _1154 = _1151 * (_1108.z + (-0.5));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = _1122 * 0.5;
        float _1159 = _1132 * 0.5;
        float _1160 = _1142 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1175 = (dot(vec3(_660, _661, _662), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1185 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _4159 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1187 + 1.0))) + _1192) * _1155;
        float _1202 = _1123 * 0.5;
        float _1203 = _1133 * 0.5;
        float _1204 = _1143 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_660, _661, _662), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4192 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1229 + 1.0))) + _1234) * _1156;
        float _1244 = _1124 * 0.5;
        float _1245 = _1134 * 0.5;
        float _1246 = _1144 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_660, _661, _662), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4225 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1271 + 1.0))) + _1276) * _1157;
        _1293 = _1124;
        _1295 = _1123;
        _1296 = _1122;
        _1297 = _1134;
        _1298 = _1133;
        _1299 = _1132;
        _1300 = _1144;
        _1301 = _1143;
        _1302 = _1142;
        _1303 = _1157;
        _1304 = _1156;
        _1305 = _1155;
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
    }
    else
    {
        _1293 = _1294;
        _1295 = _1294;
        _1296 = _1294;
        _1297 = _1294;
        _1298 = _1294;
        _1299 = _1294;
        _1300 = _1294;
        _1301 = _1294;
        _1302 = _1294;
        _1303 = _1294;
        _1304 = _1294;
        _1305 = _1294;
        _1306 = 0.0;
        _1307 = 0.0;
        _1308 = 0.0;
    }
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1337 = fma(_962, cbModelParam._m0[30u].z, fma(_958, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954));
        float _1341 = fma(_962, cbModelParam._m0[31u].z, fma(_958, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954));
        float _1345 = fma(_962, cbModelParam._m0[32u].z, fma(_958, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954));
        float _1368 = _954 + _660;
        float _1369 = _958 + _661;
        float _1370 = _962 + _662;
        float _1380 = fma(_1370, cbModelParam._m0[30u].z, fma(_1369, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1368)) - _1337;
        float _1381 = fma(_1370, cbModelParam._m0[31u].z, fma(_1369, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1368)) - _1341;
        float _1382 = fma(_1370, cbModelParam._m0[32u].z, fma(_1369, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1368)) - _1345;
        float _1386 = inversesqrt(dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382)));
        float _1399 = ((_1386 * _1380) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1337 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1386 * _1381) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1341 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1386 * _1382) / cbModelParam._m0[35u].z) + ((((((_1345 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        float _1436 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1403.x + (-0.5));
        float _1438 = _1436 * (_1403.y + (-0.5));
        float _1439 = _1436 * (_1403.z + (-0.5));
        float _1446 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1410.x + (-0.5));
        float _1448 = _1446 * (_1410.y + (-0.5));
        float _1449 = _1446 * (_1410.z + (-0.5));
        float _1456 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1417.x + (-0.5));
        float _1458 = _1456 * (_1417.y + (-0.5));
        float _1459 = _1456 * (_1417.z + (-0.5));
        float _1466 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1424.x + (-0.5));
        float _1468 = _1466 * (_1424.y + (-0.5));
        float _1469 = _1466 * (_1424.z + (-0.5));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = _1437 * 0.5;
        float _1474 = _1447 * 0.5;
        float _1475 = _1457 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_660, _661, _662), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4288 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1500 + 1.0))) + _1505) * _1470;
        float _1515 = _1438 * 0.5;
        float _1516 = _1448 * 0.5;
        float _1517 = _1458 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_660, _661, _662), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4321 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1542 + 1.0))) + _1547) * _1471;
        float _1557 = _1439 * 0.5;
        float _1558 = _1449 * 0.5;
        float _1559 = _1459 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_660, _661, _662), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4354 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1584 + 1.0))) + _1589) * _1472;
        _1606 = _1439;
        _1607 = _1438;
        _1608 = _1437;
        _1609 = _1449;
        _1610 = _1448;
        _1611 = _1447;
        _1612 = _1459;
        _1613 = _1458;
        _1614 = _1457;
        _1615 = _1472;
        _1616 = _1471;
        _1617 = _1470;
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    }
    else
    {
        _1606 = _1294;
        _1607 = _1294;
        _1608 = _1294;
        _1609 = _1294;
        _1610 = _1294;
        _1611 = _1294;
        _1612 = _1294;
        _1613 = _1294;
        _1614 = _1294;
        _1615 = _1294;
        _1616 = _1294;
        _1617 = _1294;
        _1618 = 0.0;
        _1619 = 0.0;
        _1620 = 0.0;
    }
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1306)) + _1306;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1307)) + _1307;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1308)) + _1308;
    float _1653 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1656 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1659 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1630));
    float _1674 = _898 * 0.5;
    float _1675 = _899 * 0.5;
    float _1676 = _900 * 0.5;
    float _1677 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1680 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1683 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1717;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1690 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1293, _1297, _1300, _1303));
        float _1694 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1295, _1298, _1301, _1304));
        float _1698 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1296, _1299, _1302, _1305));
        float _1705 = dot(vec4(cbModelParam._m0[39u]), vec4(_1674, _1675, _1676, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1728;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1719 = dot(vec4(cbModelParam._m0[40u]), vec4(_1674, _1675, _1676, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1732 = (_1728 * cbModelParam._m0[1u].x) + (_1717 * (1.0 - cbModelParam._m0[1u].x));
    float _1742 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _805);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1742 : min(cbModelParam._m0[25u].z, _1742));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1790 = fma(_962, cbModelParam._m0[13u].z, fma(_958, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954)) + cbModelParam._m0[13u].w;
        float _1794 = fma(_962, cbModelParam._m0[14u].z, fma(_958, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954)) + cbModelParam._m0[14u].w;
        float _1798 = fma(_962, cbModelParam._m0[15u].z, fma(_958, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954)) + cbModelParam._m0[15u].w;
        float _1801 = fma(_900, cbModelParam._m0[13u].z, fma(_899, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898));
        float _1804 = fma(_900, cbModelParam._m0[14u].z, fma(_899, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898));
        float _1807 = fma(_900, cbModelParam._m0[15u].z, fma(_899, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898));
        float _1835;
        if (_1801 > 0.0)
        {
            _1835 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1835 = frontier_phi_17_15_ladder;
        }
        float _2007;
        if (_1804 > 0.0)
        {
            _2007 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2007 = frontier_phi_26_22_ladder;
        }
        float _2302;
        if (_1807 > 0.0)
        {
            _2302 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2302 = frontier_phi_38_33_ladder;
        }
        float _2304 = isnan(_2007) ? _1835 : (isnan(_1835) ? _2007 : min(_1835, _2007));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1801) + _1790;
        float _2310 = (_2305 * _1804) + _1794;
        float _2311 = (_2305 * _1807) + _1798;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2314 = (-1.0) - _2312;
        float _2316 = _2312 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2311 > _2316) || ((_2311 < _2314) || ((_2310 > _2316) || ((_2310 < _2314) || ((_2309 < _2314) || (_2309 > _2316))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2456 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2311, cbModelParam._m0[9u].z, fma(_2310, cbModelParam._m0[9u].y, _2309 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2311, cbModelParam._m0[10u].z, fma(_2310, cbModelParam._m0[10u].y, _2309 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2311, cbModelParam._m0[11u].z, fma(_2310, cbModelParam._m0[11u].y, _2309 * cbModelParam._m0[11u].x))), _1743);
            frontier_phi_16_38_ladder = _2456.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2456.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2456.x * cbModelParam._m0[1u].y;
        }
        _1823 = frontier_phi_16_38_ladder_2;
        _1825 = frontier_phi_16_38_ladder_1;
        _1827 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_898, _899, _900), _1743);
        _1823 = _1811.x * cbModelParam._m0[1u].y;
        _1825 = _1811.y * cbModelParam._m0[1u].y;
        _1827 = _1811.z * cbModelParam._m0[1u].y;
    }
    float _1831 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _805);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1831 : min(cbModelParam._m0[25u].w, _1831));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1886 = fma(_962, cbModelParam._m0[21u].z, fma(_958, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954)) + cbModelParam._m0[21u].w;
        float _1890 = fma(_962, cbModelParam._m0[22u].z, fma(_958, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954)) + cbModelParam._m0[22u].w;
        float _1894 = fma(_962, cbModelParam._m0[23u].z, fma(_958, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954)) + cbModelParam._m0[23u].w;
        float _1897 = fma(_900, cbModelParam._m0[21u].z, fma(_899, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898));
        float _1900 = fma(_900, cbModelParam._m0[22u].z, fma(_899, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898));
        float _1903 = fma(_900, cbModelParam._m0[23u].z, fma(_899, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898));
        float _2012;
        if (_1897 > 0.0)
        {
            _2012 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2012 = frontier_phi_28_24_ladder;
        }
        float _2329;
        if (_1900 > 0.0)
        {
            _2329 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2329 = frontier_phi_40_35_ladder;
        }
        float _2667;
        if (_1903 > 0.0)
        {
            _2667 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2667 = frontier_phi_50_47_ladder;
        }
        float _2669 = isnan(_2329) ? _2012 : (isnan(_2012) ? _2329 : min(_2012, _2329));
        float _2670 = isnan(_2667) ? _2669 : (isnan(_2669) ? _2667 : min(_2669, _2667));
        float _2674 = (_2670 * _1897) + _1886;
        float _2675 = (_2670 * _1900) + _1890;
        float _2676 = (_2670 * _1903) + _1894;
        float _2677 = _2670 * 9.9999997473787516355514526367188e-05;
        float _2678 = (-1.0) - _2677;
        float _2680 = _2677 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2676 > _2680) || ((_2676 < _2678) || ((_2675 > _2680) || ((_2675 < _2678) || ((_2674 < _2678) || (_2674 > _2680))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2798 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2676, cbModelParam._m0[17u].z, fma(_2675, cbModelParam._m0[17u].y, _2674 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2676, cbModelParam._m0[18u].z, fma(_2675, cbModelParam._m0[18u].y, _2674 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2676, cbModelParam._m0[19u].z, fma(_2675, cbModelParam._m0[19u].y, _2674 * cbModelParam._m0[19u].x))), _1832);
            frontier_phi_25_50_ladder = _2798.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2798.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2798.x * cbModelParam._m0[1u].z;
        }
        _1922 = frontier_phi_25_50_ladder_2;
        _1924 = frontier_phi_25_50_ladder_1;
        _1926 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_898, _899, _900), _1832);
        _1922 = _1906.x * cbModelParam._m0[1u].z;
        _1924 = _1906.y * cbModelParam._m0[1u].z;
        _1926 = _1906.z * cbModelParam._m0[1u].z;
    }
    float _1939 = (((_925 * _875) + _926) * _890) * ((cbModelParam._m0[1u].w * (_1922 - _1823)) + _1823);
    float _1941 = (((_925 * _877) + _926) * _890) * ((cbModelParam._m0[1u].w * (_1924 - _1825)) + _1825);
    float _1943 = (((_925 * _878) + _926) * _890) * ((cbModelParam._m0[1u].w * (_1926 - _1827)) + _1827);
    float _1946 = fma(_1943, cbSceneParam._m0[89u].z, fma(_1941, cbSceneParam._m0[89u].y, _1939 * cbSceneParam._m0[89u].x));
    float _1949 = fma(_1943, cbSceneParam._m0[90u].z, fma(_1941, cbSceneParam._m0[90u].y, _1939 * cbSceneParam._m0[90u].x));
    float _1952 = fma(_1943, cbSceneParam._m0[91u].z, fma(_1941, cbSceneParam._m0[91u].y, _1939 * cbSceneParam._m0[91u].x));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1994 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1998 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1999 = _1986 / _1998;
    float _2000 = _1990 / _1998;
    float _2001 = _1994 / _1998;
    float _2148;
    float _2149;
    float _2150;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2028 = ((uint(_2001 > cbSceneParam._m0[59u].y) + uint(_2001 > cbSceneParam._m0[59u].x)) + uint(_2001 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2029 = _2028 + 43u;
        uint _2037 = _2028 + 44u;
        uint _2045 = _2028 + 45u;
        uint _2053 = _2028 + 46u;
        float _2064 = fma(_1998, cbSceneParam._m0[_2029].w, fma(_1994, cbSceneParam._m0[_2029].z, fma(_1990, cbSceneParam._m0[_2029].y, _1986 * cbSceneParam._m0[_2029].x)));
        float _2068 = fma(_1998, cbSceneParam._m0[_2037].w, fma(_1994, cbSceneParam._m0[_2037].z, fma(_1990, cbSceneParam._m0[_2037].y, _1986 * cbSceneParam._m0[_2037].x)));
        float _2076 = fma(_1998, cbSceneParam._m0[_2053].w, fma(_1994, cbSceneParam._m0[_2053].z, fma(_1990, cbSceneParam._m0[_2053].y, _1986 * cbSceneParam._m0[_2053].x)));
        float _2081 = cbSceneParam._m0[33u].z * _2076;
        float _2083 = cbSceneParam._m0[33u].w * _2076;
        float _2086 = fma(_1998, cbSceneParam._m0[_2045].w, fma(_1994, cbSceneParam._m0[_2045].z, fma(_1990, cbSceneParam._m0[_2045].y, _1986 * cbSceneParam._m0[_2045].x))) / _2076;
        float _2134 = (cbSceneParam._m0[33u].x - sqrt(((_2000 * _2000) + (_1999 * _1999)) + (_2001 * _2001))) * cbSceneParam._m0[33u].y;
        float _4480 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2141 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2081 + _2064) / _2076, (_2083 + _2068) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 + _2064) / _2076, (_2068 - _2081) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 - _2081) / _2076, (_2068 - _2083) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 - _2083) / _2076, (_2081 + _2068) / _2076), _2086), 0.0)).x), vec4(0.25)));
        _2148 = 1.0 - (_2141 * cbSceneParam._m0[34u].x);
        _2149 = 1.0 - (_2141 * cbSceneParam._m0[34u].y);
        _2150 = 1.0 - (_2141 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2148 = 1.0;
        _2149 = 1.0;
        _2150 = 1.0;
    }
    float _2214;
    float _2216;
    float _2218;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2202 = fma(_1998, cbSceneParam._m0[63u].w, fma(_1994, cbSceneParam._m0[63u].z, fma(_1990, cbSceneParam._m0[63u].y, _1986 * cbSceneParam._m0[63u].x)));
        float _2203 = fma(_1998, cbSceneParam._m0[60u].w, fma(_1994, cbSceneParam._m0[60u].z, fma(_1990, cbSceneParam._m0[60u].y, _1986 * cbSceneParam._m0[60u].x))) / _2202;
        float _2204 = fma(_1998, cbSceneParam._m0[61u].w, fma(_1994, cbSceneParam._m0[61u].z, fma(_1990, cbSceneParam._m0[61u].y, _1986 * cbSceneParam._m0[61u].x))) / _2202;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2203 >= cbSceneParam._m0[64u].x) && (_2204 >= cbSceneParam._m0[64u].y)) && (_2203 <= cbSceneParam._m0[64u].z)) && (_2204 <= cbSceneParam._m0[64u].w))
        {
            float _2342 = fma(_1998, cbSceneParam._m0[62u].w, fma(_1994, cbSceneParam._m0[62u].z, fma(_1990, cbSceneParam._m0[62u].y, _1986 * cbSceneParam._m0[62u].x))) / _2202;
            float _2346 = isnan(cbSceneParam._m0[41u].w) ? _2342 : (isnan(_2342) ? cbSceneParam._m0[41u].w : max(_2342, cbSceneParam._m0[41u].w));
            float _2389 = (cbSceneParam._m0[33u].x - sqrt(((_2000 * _2000) + (_1999 * _1999)) + (_2001 * _2001))) * cbSceneParam._m0[33u].y;
            float _4496 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
            float _2396 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2203, cbSceneParam._m0[33u].w + _2204), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2203, _2204 - cbSceneParam._m0[33u].z), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2203 - cbSceneParam._m0[33u].z, _2204 - cbSceneParam._m0[33u].w), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2203 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2204), _2346), 0.0)).x), vec4(0.25)));
            float _2400 = 1.0 - (_2396 * cbSceneParam._m0[34u].x);
            float _2401 = 1.0 - (_2396 * cbSceneParam._m0[34u].y);
            float _2402 = 1.0 - (_2396 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2402) ? _2150 : (isnan(_2150) ? _2402 : min(_2150, _2402));
            frontier_phi_37_36_ladder_1 = isnan(_2401) ? _2149 : (isnan(_2149) ? _2401 : min(_2149, _2401));
            frontier_phi_37_36_ladder_2 = isnan(_2400) ? _2148 : (isnan(_2148) ? _2400 : min(_2148, _2400));
        }
        else
        {
            frontier_phi_37_36_ladder = _2150;
            frontier_phi_37_36_ladder_1 = _2149;
            frontier_phi_37_36_ladder_2 = _2148;
        }
        _2214 = frontier_phi_37_36_ladder_2;
        _2216 = frontier_phi_37_36_ladder_1;
        _2218 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2214 = _2148;
        _2216 = _2149;
        _2218 = _2150;
    }
    uvec4 _2223 = floatBitsToUint(cbInstanceData._m0[_818 + 5u]);
    uint _2225 = _2223.x * 14u;
    uint _2226 = _2225 + 13u;
    float _2233 = _890 + (-1.0);
    float _2238 = (cbLight._m0[_2226].x * _2233) + 1.0;
    float _2239 = (cbLight._m0[_2226].y * _2233) + 1.0;
    float _2240 = (cbLight._m0[_2226].z * _2233) + 1.0;
    float _2241 = (cbLight._m0[_2226].w * _2233) + 1.0;
    uint _2242 = _2225 + 5u;
    float _2248 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
    uint _2252 = _2225 + 4u;
    float _2261 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
    uint _2265 = _2225 | 1u;
    float _2276 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_660, _661, _662));
    float _2279 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_660, _661, _662));
    float _4532 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _4543 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2284 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * 0.3183098733425140380859375;
    float _2286 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * 0.3183098733425140380859375;
    float _2293 = ((cbLight._m0[_2242].x * _2248) * _2286) + (((cbLight._m0[_2252].x * _2214) * _2261) * _2284);
    float _2294 = ((_2248 * cbLight._m0[_2242].y) * _2286) + (((cbLight._m0[_2252].y * _2216) * _2261) * _2284);
    float _2295 = ((_2248 * cbLight._m0[_2242].z) * _2286) + (((cbLight._m0[_2252].z * _2218) * _2261) * _2284);
    uvec4 _2299 = floatBitsToUint(cbLight._m0[_2225 + 12u]);
    bool _2301 = _2299.x == 0u;
    float _2403;
    float _2405;
    float _2407;
    if (_2301)
    {
        _2403 = _2293;
        _2405 = _2294;
        _2407 = _2295;
    }
    else
    {
        uint _2411 = _2225 + 6u;
        float _2427 = (dot(vec3(cbLight._m0[_2225 + 2u].xyz), vec3(_660, _661, _662)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4554 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2430 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2403 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2293;
        _2405 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2294;
        _2407 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2295;
    }
    bool _2410 = _2299.y == 0u;
    float _2465;
    float _2467;
    float _2469;
    if (_2410)
    {
        _2465 = _2403;
        _2467 = _2405;
        _2469 = _2407;
    }
    else
    {
        uint _2638 = _2225 + 7u;
        float _2654 = (dot(vec3(cbLight._m0[_2225 + 3u].xyz), vec3(_660, _661, _662)) * 0.5) + 0.5;
        float _2655 = _2654 * _2654;
        float _4570 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2656 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2657 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2465 = (((cbLight._m0[_2638].x * 0.3183098733425140380859375) * _2656) * _2657) + _2403;
        _2467 = (((cbLight._m0[_2638].y * 0.3183098733425140380859375) * _2656) * _2657) + _2405;
        _2469 = (((cbLight._m0[_2638].z * 0.3183098733425140380859375) * _2656) * _2657) + _2407;
    }
    uint _2472 = _2225 + 8u;
    float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _805) * 0.949999988079071044921875);
    float _2486 = _2485 * _2485;
    float _2487 = cbLight._m0[_2225].x + _741;
    float _2488 = cbLight._m0[_2225].y + _742;
    float _2489 = cbLight._m0[_2225].z + _743;
    float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
    float _2494 = _2493 * _2487;
    float _2495 = _2493 * _2488;
    float _2496 = _2493 * _2489;
    float _2497 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2225].xyz));
    float _4586 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _4597 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _2501 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2502 = dot(vec3(_660, _661, _662), vec3(_2494, _2495, _2496));
    float _4608 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2506 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2494, _2495, _2496));
    float _4619 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2510 = _2486 * _2486;
    float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
    float _2522 = exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0);
    float _2523 = 0.959999978542327880859375 - _872;
    float _2525 = 0.959999978542327880859375 - _873;
    float _2526 = 0.959999978542327880859375 - _874;
    float _2533 = 1.0 - _2486;
    float _2544 = (0.5 / (((_2501 * ((_2500 * _2533) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2533) + _2486) * _2500))) * _2500;
    float _4630 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2546 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
    uint _2560 = _2225 + 9u;
    float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _805) * 0.949999988079071044921875);
    float _2572 = _2571 * _2571;
    float _2573 = cbLight._m0[_2265].x + _741;
    float _2574 = cbLight._m0[_2265].y + _742;
    float _2575 = cbLight._m0[_2265].z + _743;
    float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
    float _2580 = _2579 * _2573;
    float _2581 = _2579 * _2574;
    float _2582 = _2579 * _2575;
    float _2583 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2265].xyz));
    float _4641 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2587 = dot(vec3(_660, _661, _662), vec3(_2580, _2581, _2582));
    float _4652 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2591 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2580, _2581, _2582));
    float _4663 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2595 = _2572 * _2572;
    float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
    float _2606 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
    float _2613 = 1.0 - _2572;
    float _2623 = (0.5 / (((_2501 * ((_2586 * _2613) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2613) + _2572) * _2586))) * _2586;
    float _4674 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2625 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
    float _2635 = (((((_2606 * _2523) + _875) * cbLight._m0[_2560].x) * _2625) * _2248) + ((((cbLight._m0[_2472].x * _2214) * ((_2522 * _2523) + _875)) * _2546) * _2261);
    float _2636 = (((((_2606 * _2525) + _877) * cbLight._m0[_2560].y) * _2625) * _2248) + ((((cbLight._m0[_2472].y * _2216) * ((_2522 * _2525) + _877)) * _2546) * _2261);
    float _2637 = (((((_2606 * _2526) + _878) * cbLight._m0[_2560].z) * _2625) * _2248) + ((((cbLight._m0[_2472].z * _2218) * ((_2522 * _2526) + _878)) * _2546) * _2261);
    float _2693;
    float _2695;
    float _2697;
    if (_2301)
    {
        _2693 = _2635;
        _2695 = _2636;
        _2697 = _2637;
    }
    else
    {
        uint _2699 = _2225 + 2u;
        uint _2703 = _2225 + 10u;
        float _2717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2699].w)) * _805) * 0.949999988079071044921875);
        float _2718 = _2717 * _2717;
        float _2719 = cbLight._m0[_2699].x + _741;
        float _2720 = cbLight._m0[_2699].y + _742;
        float _2721 = cbLight._m0[_2699].z + _743;
        float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
        float _2726 = _2725 * _2719;
        float _2727 = _2725 * _2720;
        float _2728 = _2725 * _2721;
        float _2729 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2699].xyz));
        float _4685 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2733 = dot(vec3(_660, _661, _662), vec3(_2726, _2727, _2728));
        float _4696 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2736 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2737 = dot(vec3(cbLight._m0[_2699].xyz), vec3(_2726, _2727, _2728));
        float _4707 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2741 = _2718 * _2718;
        float _2745 = ((_2736 * _2736) * (_2741 + (-1.0))) + 1.0;
        float _2752 = exp2(log2(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) * 5.0);
        float _2759 = 1.0 - _2718;
        float _2769 = (0.5 / (((_2501 * ((_2732 * _2759) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2759) + _2718) * _2732))) * _2732;
        float _4718 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2771 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2741 / ((_2745 * _2745) * 3.141590118408203125));
        float _2772 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2693 = (((((_2752 * _2523) + _875) * cbLight._m0[_2703].x) * _2771) * _2772) + _2635;
        _2695 = (((((_2752 * _2525) + _877) * cbLight._m0[_2703].y) * _2771) * _2772) + _2636;
        _2697 = (((((_2752 * _2526) + _878) * cbLight._m0[_2703].z) * _2771) * _2772) + _2637;
    }
    float _2803;
    float _2805;
    float _2807;
    if (_2410)
    {
        _2803 = _2693;
        _2805 = _2695;
        _2807 = _2697;
    }
    else
    {
        uint _2814 = _2225 + 3u;
        uint _2818 = _2225 + 11u;
        float _2832 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2814].w)) * _805) * 0.949999988079071044921875);
        float _2833 = _2832 * _2832;
        float _2834 = cbLight._m0[_2814].x + _741;
        float _2835 = cbLight._m0[_2814].y + _742;
        float _2836 = cbLight._m0[_2814].z + _743;
        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
        float _2841 = _2840 * _2834;
        float _2842 = _2840 * _2835;
        float _2843 = _2840 * _2836;
        float _2844 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2814].xyz));
        float _4734 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2847 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2848 = dot(vec3(_660, _661, _662), vec3(_2841, _2842, _2843));
        float _4745 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2851 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2852 = dot(vec3(cbLight._m0[_2814].xyz), vec3(_2841, _2842, _2843));
        float _4756 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2856 = _2833 * _2833;
        float _2860 = ((_2851 * _2851) * (_2856 + (-1.0))) + 1.0;
        float _2867 = exp2(log2(1.0 - (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) * 5.0);
        float _2874 = 1.0 - _2833;
        float _2884 = (0.5 / (((_2501 * ((_2847 * _2874) + _2833)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2874) + _2833) * _2847))) * _2847;
        float _4767 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2886 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2856 / ((_2860 * _2860) * 3.141590118408203125));
        float _2887 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2803 = (((((_2867 * _2523) + _875) * cbLight._m0[_2818].x) * _2886) * _2887) + _2693;
        _2805 = (((((_2867 * _2525) + _877) * cbLight._m0[_2818].y) * _2886) * _2887) + _2695;
        _2807 = (((((_2867 * _2526) + _878) * cbLight._m0[_2818].z) * _2886) * _2887) + _2697;
    }
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    if (_2223.y == 0u)
    {
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.x;
        uint _2920 = uint((float(_2908.y) * floor(float(uint(cbSceneParam._m0[85u].y * _763) / _2909))) + floor(float(uint(cbSceneParam._m0[85u].x * _762) / _2909)));
        float _2930 = (log2(_2001 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2931 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        uint _2934 = uint(isnan(14.0) ? _2931 : (isnan(_2931) ? 14.0 : min(_2931, 14.0)));
        uvec4 _2939 = texelFetch(g_lightClusterGridBuffer, int(((_2934 << 2u) + (_2920 << 6u)) >> 2u));
        uint _2940 = _2939.x;
        uint _2941 = _2908.z;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        if (((((1u << ((_2941 >> 4u) & 15u)) + 4294967295u) & _2940) == 0u) || ((_2941 & 240u) == 0u))
        {
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
        }
        else
        {
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            uint _3179 = 0u;
            uint _3188;
            bool _3189;
            for (;;)
            {
                _3188 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3179 << 2u)) >> 2u)).x;
                _3189 = _3188 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3189)
                {
                    frontier_phi_71_pred = _3178;
                    frontier_phi_71_pred_1 = _3177;
                    frontier_phi_71_pred_2 = _3176;
                    frontier_phi_71_pred_3 = _3175;
                    frontier_phi_71_pred_4 = _3174;
                    frontier_phi_71_pred_5 = _3173;
                }
                else
                {
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    uint _3324;
                    _3318 = _3173;
                    _3319 = _3174;
                    _3320 = _3175;
                    _3321 = _3176;
                    _3322 = _3177;
                    _3323 = _3178;
                    _3324 = _3188;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    for (;;)
                    {
                        uint _3328 = uint(findLSB(_3324)) + (_3179 << 5u);
                        uint _3325 = (_3324 + 4294967295u) & _3324;
                        uint _3330 = _3328 * 48u;
                        vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 3u)).x));
                        uint _3350 = (_3328 * 48u) + 4u;
                        vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3350)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 3u)).x));
                        uint _3369 = (_3328 * 48u) + 8u;
                        vec3 _3380 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3369)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 2u)).x));
                        float _3384 = _3344.x - _1999;
                        float _3385 = _3344.y - _2000;
                        float _3386 = _3344.z - _2001;
                        float _3387 = dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386));
                        float _3390 = inversesqrt(_3387);
                        float _3391 = _3390 * _3384;
                        float _3392 = _3390 * _3385;
                        float _3393 = _3390 * _3386;
                        float _3394 = dot(vec3(_786, _789, _792), vec3(_3391, _3392, _3393));
                        float _3399 = 1.0 - (_3387 * _3344.w);
                        float _4793 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3400 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3401 = sqrt(_3387) * _3363.w;
                        float _3404 = 1.39999997615814208984375 / (_3401 + 1.39999997615814208984375);
                        float _3405 = _3404 * _3404;
                        float _3408 = ((1.0 - _3405) * _3394) + _3405;
                        float _3411 = _3401 * _3401;
                        float _3415 = ((isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))) * _3400) / ((_3411 * 0.699999988079071044921875) + 1.0);
                        float _3419 = (-0.0) - _1999;
                        float _3420 = (-0.0) - _2000;
                        float _3421 = (-0.0) - _2001;
                        float _3425 = inversesqrt(dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421)));
                        float _3426 = _3425 * _3419;
                        float _3427 = _3425 * _3420;
                        float _3428 = _3425 * _3421;
                        float _3435 = exp2(log2(1.0 / ((_3411 * 3.5) + 5.0)) * 0.25);
                        float _3436 = 1.0 - _906;
                        float _3443 = sqrt(1.0 - ((1.0 - (_3436 * _3436)) * (1.0 - (_3435 * _3435))));
                        float _3444 = _3443 * _3443;
                        float _3445 = _3444 * _3444;
                        float _3446 = _3426 + _3391;
                        float _3447 = _3427 + _3392;
                        float _3448 = _3428 + _3393;
                        float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                        float _3456 = dot(vec3(_786, _789, _792), vec3(_3426, _3427, _3428));
                        float _4809 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3459 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3460 = dot(vec3(_786, _789, _792), vec3(_3452 * _3446, _3452 * _3447, _3452 * _3448));
                        float _4820 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3463 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3467 = ((_3463 * _3463) * (_3445 + (-1.0))) + 1.0;
                        float _3468 = _3404 * _3444;
                        float _3469 = _3468 * _3468;
                        float _3472 = ((1.0 - _3469) * _3394) + _3469;
                        float _4831 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3473 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                        float _3474 = 1.0 - _3444;
                        float _3484 = (0.5 / (((_3473 * ((_3459 * _3474) + _3444)) + 9.9999999392252902907785028219223e-09) + (((_3473 * _3474) + _3444) * _3459))) * _3473;
                        float _4842 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3495 = (((_3445 * 3.1415927410125732421875) * (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) / ((_3467 * _3467) * ((_3411 * 2.1991131305694580078125) + 3.141590118408203125))) * _3400;
                        _3248 = (_3415 * _3363.x) + _3321;
                        _3249 = (_3415 * _3363.y) + _3322;
                        _3250 = (_3415 * _3363.z) + _3323;
                        _3245 = (_3495 * _3380.x) + _3318;
                        _3246 = (_3495 * _3380.y) + _3319;
                        _3247 = (_3495 * _3380.z) + _3320;
                        if (_3325 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3318 = _3245;
                            _3319 = _3246;
                            _3320 = _3247;
                            _3321 = _3248;
                            _3322 = _3249;
                            _3323 = _3250;
                            _3324 = _3325;
                        }
                    }
                    frontier_phi_71_pred = _3250;
                    frontier_phi_71_pred_1 = _3249;
                    frontier_phi_71_pred_2 = _3248;
                    frontier_phi_71_pred_3 = _3247;
                    frontier_phi_71_pred_4 = _3246;
                    frontier_phi_71_pred_5 = _3245;
                }
                _3031 = frontier_phi_71_pred;
                _3029 = frontier_phi_71_pred_1;
                _3027 = frontier_phi_71_pred_2;
                _3025 = frontier_phi_71_pred_3;
                _3023 = frontier_phi_71_pred_4;
                _3021 = frontier_phi_71_pred_5;
                uint _3180 = _3179 + 1u;
                if (_3180 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3173 = _3021;
                    _3174 = _3023;
                    _3175 = _3025;
                    _3176 = _3027;
                    _3177 = _3029;
                    _3178 = _3031;
                    _3179 = _3180;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
        }
        uvec4 _3034 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3035 = _3034.z;
        uint _3037 = (_3035 >> 8u) & 15u;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        if (((4294967295u << _3037) & _2940) == 0u)
        {
            _3141 = _3020;
            _3143 = _3022;
            _3145 = _3024;
            _3147 = _3026;
            _3149 = _3028;
            _3151 = _3030;
        }
        else
        {
            float _3166 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
            float _3167 = _3166 * _1999;
            float _3168 = _3166 * _2000;
            float _3169 = _3166 * _2001;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3037 < ((_3035 >> 12u) & 15u))
            {
                float _3142;
                float _3144;
                float _3146;
                float _3148;
                float _3150;
                float _3152;
                float _3301 = _3020;
                float _3302 = _3022;
                float _3303 = _3024;
                float _3304 = _3026;
                float _3305 = _3028;
                float _3306 = _3030;
                uint _3307 = _3037;
                uint _3316;
                bool _3317;
                for (;;)
                {
                    _3316 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3307 << 2u)) >> 2u)).x;
                    _3317 = _3316 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3317)
                    {
                        frontier_phi_82_pred = _3306;
                        frontier_phi_82_pred_1 = _3305;
                        frontier_phi_82_pred_2 = _3304;
                        frontier_phi_82_pred_3 = _3303;
                        frontier_phi_82_pred_4 = _3302;
                        frontier_phi_82_pred_5 = _3301;
                    }
                    else
                    {
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3522 = _3301;
                        float _3523 = _3302;
                        float _3524 = _3303;
                        float _3525 = _3304;
                        float _3526 = _3305;
                        float _3527 = _3306;
                        uint _3528 = _3316;
                        uint _3529;
                        vec4 _3554;
                        float _3555;
                        vec4 _3570;
                        vec3 _3582;
                        vec4 _3597;
                        vec4 _3612;
                        float _3658;
                        bool _3659;
                        for (;;)
                        {
                            uint _3539 = ((_3307 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3528));
                            _3529 = (_3528 + 4294967295u) & _3528;
                            uint _3541 = _3539 * 40u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3555 = _3554.w;
                            uint _3557 = (_3539 * 40u) + 4u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3572 = (_3539 * 40u) + 8u;
                            _3582 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x));
                            uint _3584 = (_3539 * 40u) + 16u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3539 * 40u) + 20u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3614 = (_3539 * 40u) + 24u;
                            vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3633 = (_3539 * 40u) + 28u;
                            vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            _3658 = fma(_2001, _3646.z, fma(_2000, _3646.y, _3646.x * _1999)) + _3646.w;
                            _3659 = !((fma(_2001, _3627.z, fma(_2000, _3627.y, _3627.x * _1999)) + _3627.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3659)
                            {
                                float _3686 = _3554.x - _1999;
                                float _3687 = _3554.y - _2000;
                                float _3688 = _3554.z - _2001;
                                float _3689 = dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688));
                                float _3692 = inversesqrt(_3689);
                                float _3693 = _3692 * _3686;
                                float _3694 = _3692 * _3687;
                                float _3695 = _3692 * _3688;
                                float _3699 = 1.0 - (_3689 / (_3555 * _3555));
                                float _4853 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3704 = sqrt(_3689) * _3570.w;
                                float _3706 = 1.39999997615814208984375 / (_3704 + 1.39999997615814208984375);
                                float _3707 = _3706 * _3706;
                                float _3710 = ((1.0 - _3707) * dot(vec3(_3693, _3694, _3695), vec3(_786, _789, _792))) + _3707;
                                float _3713 = _3704 * _3704;
                                float _3717 = (fma(_2001, _3597.z, fma(_2000, _3597.y, _3597.x * _1999)) + _3597.w) / _3658;
                                float _3718 = (fma(_2001, _3612.z, fma(_2000, _3612.y, _3612.x * _1999)) + _3612.w) / _3658;
                                float _3722 = 1.0 - dot(vec2(_3717, _3718), vec2(_3717, _3718));
                                float _4869 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3724 = _3723 * (((isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0))) * _3700) / ((_3713 * 0.699999988079071044921875) + 1.0));
                                float _3736 = exp2(log2(1.0 / ((_3713 * 3.5) + 5.0)) * 0.25);
                                float _3737 = 1.0 - _906;
                                float _3744 = sqrt(1.0 - ((1.0 - (_3737 * _3737)) * (1.0 - (_3736 * _3736))));
                                float _3745 = _3744 * _3744;
                                float _3746 = _3745 * _3745;
                                float _3747 = _3693 - _3167;
                                float _3748 = _3694 - _3168;
                                float _3749 = _3695 - _3169;
                                float _3753 = inversesqrt(dot(vec3(_3747, _3748, _3749), vec3(_3747, _3748, _3749)));
                                float _3757 = dot(vec3(_786, _789, _792), vec3((-0.0) - _3167, (-0.0) - _3168, (-0.0) - _3169));
                                float _4880 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3760 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3761 = dot(vec3(_786, _789, _792), vec3(_3753 * _3747, _3753 * _3748, _3753 * _3749));
                                float _4891 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3764 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3768 = ((_3764 * _3764) * (_3746 + (-1.0))) + 1.0;
                                float _3769 = _3706 * _3745;
                                float _3770 = _3769 * _3769;
                                float _3776 = ((1.0 - _3770) * dot(vec3(_786, _789, _792), vec3(_3693, _3694, _3695))) + _3770;
                                float _4902 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3777 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3778 = 1.0 - _3745;
                                float _3788 = (0.5 / (((_3777 * ((_3760 * _3778) + _3745)) + 9.9999999392252902907785028219223e-09) + (((_3777 * _3778) + _3745) * _3760))) * _3777;
                                float _4913 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3798 = (_3723 * _3700) * (((_3746 * 3.1415927410125732421875) * (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0)))) / ((_3768 * _3768) * ((_3713 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3724 * _3570.z;
                                frontier_phi_88_pred_1 = _3724 * _3570.y;
                                frontier_phi_88_pred_2 = _3724 * _3570.x;
                                frontier_phi_88_pred_3 = _3798 * _3582.z;
                                frontier_phi_88_pred_4 = _3798 * _3582.y;
                                frontier_phi_88_pred_5 = _3798 * _3582.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3807 = frontier_phi_88_pred;
                            _3806 = frontier_phi_88_pred_1;
                            _3805 = frontier_phi_88_pred_2;
                            _3804 = frontier_phi_88_pred_3;
                            _3803 = frontier_phi_88_pred_4;
                            _3802 = frontier_phi_88_pred_5;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            if (_3529 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3529;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3514;
                        frontier_phi_82_pred_1 = _3513;
                        frontier_phi_82_pred_2 = _3512;
                        frontier_phi_82_pred_3 = _3511;
                        frontier_phi_82_pred_4 = _3510;
                        frontier_phi_82_pred_5 = _3509;
                    }
                    _3152 = frontier_phi_82_pred;
                    _3150 = frontier_phi_82_pred_1;
                    _3148 = frontier_phi_82_pred_2;
                    _3146 = frontier_phi_82_pred_3;
                    _3144 = frontier_phi_82_pred_4;
                    _3142 = frontier_phi_82_pred_5;
                    uint _3308 = _3307 + 1u;
                    if (_3308 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3301 = _3142;
                        _3302 = _3144;
                        _3303 = _3146;
                        _3304 = _3148;
                        _3305 = _3150;
                        _3306 = _3152;
                        _3307 = _3308;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3148;
                frontier_phi_63_64_ladder_1 = _3152;
                frontier_phi_63_64_ladder_2 = _3150;
                frontier_phi_63_64_ladder_3 = _3146;
                frontier_phi_63_64_ladder_4 = _3144;
                frontier_phi_63_64_ladder_5 = _3142;
            }
            else
            {
                frontier_phi_63_64_ladder = _3026;
                frontier_phi_63_64_ladder_1 = _3030;
                frontier_phi_63_64_ladder_2 = _3028;
                frontier_phi_63_64_ladder_3 = _3024;
                frontier_phi_63_64_ladder_4 = _3022;
                frontier_phi_63_64_ladder_5 = _3020;
            }
            _3141 = frontier_phi_63_64_ladder_5;
            _3143 = frontier_phi_63_64_ladder_4;
            _3145 = frontier_phi_63_64_ladder_3;
            _3147 = frontier_phi_63_64_ladder;
            _3149 = frontier_phi_63_64_ladder_2;
            _3151 = frontier_phi_63_64_ladder_1;
        }
        float _3156 = isnan(1.0) ? _890 : (isnan(_890) ? 1.0 : min(_890, 1.0));
        _2953 = (_3156 * _3147) + _2465;
        _2955 = (_3156 * _3149) + _2467;
        _2957 = (_3156 * _3151) + _2469;
        _2959 = ((_3141 * _875) * _3156) + _2803;
        _2961 = ((_3143 * _877) * _3156) + _2805;
        _2963 = ((_3145 * _878) * _3156) + _2807;
    }
    else
    {
        _2953 = _2465;
        _2955 = _2467;
        _2957 = _2469;
        _2959 = _2803;
        _2961 = _2805;
        _2963 = _2807;
    }
    float _4929 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4940 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4951 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _2980 = ((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2953 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _890))) + ((_2959 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    float _2981 = ((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2955 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _890))) + ((_2961 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    float _2982 = ((isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_2957 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _890))) + ((_2963 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    uint _2983 = _818 + 6u;
    float _2991 = _762 / cbSceneParam._m0[86u].x;
    float _2992 = _763 / cbSceneParam._m0[86u].y;
    vec4 _3006 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, (log2((isnan(cbSceneParam._m0[77u].w) ? _683 : (isnan(_683) ? cbSceneParam._m0[77u].w : min(_683, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3008 = _3006.x;
    float _3009 = _3006.y;
    float _3010 = _3006.z;
    float _3011 = _3006.w;
    float _3083;
    float _3085;
    float _3087;
    float _3089;
    if (_683 > cbSceneParam._m0[78u].w)
    {
        float _3045 = isnan(_683) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _683 : min(cbSceneParam._m0[80u].w, _683));
        float _3046 = _3045 / _683;
        float _3057 = _3046 * _734;
        float _3058 = _735 * _3046;
        float _3059 = (-0.0) - _3058;
        float _3061 = _3046 * _736;
        float _3063 = (cbSceneParam._m0[77u].w * _3059) / _3045;
        float _3064 = _3063 + cbSceneParam._m0[79u].w;
        float _3065 = cbSceneParam._m0[79u].w - _3058;
        float _3071 = sqrt(((_3057 * _3057) + (_3058 * _3058)) + (_3061 * _3061));
        float _3074 = (1.0 - (cbSceneParam._m0[77u].w / _3045)) * _3071;
        float _3079 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3081 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3258;
        if (abs((_3059 - _3063) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3258 = ((((_3064 > 0.0) ? exp2(_3079 * _3064) : (2.0 - exp2(_3081 * _3064))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3074;
        }
        else
        {
            float _3202 = 1.0 / cbSceneParam._m0[80u].x;
            float _3203 = isnan(_3065) ? _3064 : (isnan(_3064) ? _3065 : max(_3064, _3065));
            float _3204 = isnan(_3065) ? _3064 : (isnan(_3064) ? _3065 : min(_3064, _3065));
            float _3213 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : min(_3203, 0.0));
            float _3214 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : min(_3204, 0.0));
            _3258 = ((abs(_3071 / _3059) * cbSceneParam._m0[80u].y) * ((((_3213 - _3214) * 2.0) - ((exp2(_3079 * (isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0)))) - exp2(_3079 * (isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0))))) * _3202)) - ((exp2(_3081 * _3213) - exp2(_3081 * _3214)) * _3202))) + (_3074 * cbSceneParam._m0[80u].z);
        }
        vec4 _3260 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, 1.0), 0.0);
        float _3269 = exp2((_3258 * (-1.44269502162933349609375)) * (1.0 - _3260.w));
        float _3270 = log2(_3269);
        float _3286 = log2(_3011);
        _3083 = (exp2(_3286 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3270 * cbSceneParam._m0[78u].x)) * _3260.x) / cbSceneParam._m0[78u].x)) + _3008;
        _3085 = (exp2(_3286 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3270 * cbSceneParam._m0[78u].y)) * _3260.y) / cbSceneParam._m0[78u].y)) + _3009;
        _3087 = (exp2(_3286 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3270 * cbSceneParam._m0[78u].z)) * _3260.z) / cbSceneParam._m0[78u].z)) + _3010;
        _3089 = _3269 * _3011;
    }
    else
    {
        _3083 = _3008;
        _3085 = _3009;
        _3087 = _3010;
        _3089 = _3011;
    }
    bool _3296;
    vec4 _3099;
    vec4 _3121;
    float _3123;
    float _3127;
    float _3128;
    float _3129;
    float _3130;
    bool _3140;
    for (;;)
    {
        _3099 = cbMatDynParam._m0[0u];
        float _3101 = roundEven(_3099.y);
        bool _3102 = _3101 == 3.0;
        float _3103 = log2(_3089);
        float _3110 = exp2(_3103 * cbSceneParam._m0[78u].x) * _2980;
        float _3111 = exp2(_3103 * cbSceneParam._m0[78u].y) * _2981;
        float _3112 = exp2(_3103 * cbSceneParam._m0[78u].z) * _2982;
        float _3119 = _750 + (-0.5);
        _3121 = cbMtdParam._m0[1u];
        _3123 = _3121.y * _3119;
        float _3126 = (_3101 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3127 = _3126 * (_3102 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3083)));
        _3128 = _3126 * (_3102 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3085)));
        _3129 = _3126 * (_3102 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3087)));
        _3130 = _3119 * 0.999000012874603271484375;
        _3140 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3140)
        {
            if ((cbInstanceData._m0[_818 + 7u].x + _3130) < 0.5)
            {
                _3296 = true;
                break;
            }
        }
        uint _3237 = _819 + uint(_3099.w);
        if ((cbInstanceData._m0[_3237].w < 1.0) && ((cbInstanceData._m0[_3237].w + _3130) < 0.5))
        {
            _3296 = true;
            break;
        }
        if ((_3123 + 1.0) < _3121.x)
        {
            _3296 = true;
            break;
        }
        _3296 = false;
        break;
    }
    float _3500;
    if (_3296)
    {
        discard_state = true;
        _3500 = 0.0;
    }
    else
    {
        _3500 = cbInstanceData._m0[_2983].w;
    }
    SV_Target.x = _3127;
    SV_Target.y = _3128;
    SV_Target.z = _3129;
    SV_Target.w = _3500;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2983].w;
    discard_exit();
}


