#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_snp_0_Texture2D_3;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_Enemy_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_Enemy_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_Enemy_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1290;
float _3671;
float _3672;
float _3673;
float _3674;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(C_Enemy_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _260 = log2(0.0);
    float _262 = exp2(_260 * cbMtdParam._m0[21u].y);
    float _263 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _264 = isnan(1.0) ? _263 : (isnan(_263) ? 1.0 : min(_263, 1.0));
    vec4 _278 = texture(sampler2D(C_Enemy_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _278.z;
    float _291 = exp2(log2(_282 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _292 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _293 = isnan(1.0) ? _292 : (isnan(_292) ? 1.0 : min(_292, 1.0));
    vec4 _306 = texture(sampler2D(C_Enemy_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _331 = texture(sampler2D(C_Enemy_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _342 = cbMtdParam._m0[9u].x * _331.x;
    float _343 = cbMtdParam._m0[9u].y * _331.y;
    float _344 = cbMtdParam._m0[9u].z * _331.z;
    float _351 = (((cbMtdParam._m0[10u].x * _306.x) - _342) * _293) + _342;
    float _352 = (((cbMtdParam._m0[10u].y * _306.y) - _343) * _293) + _343;
    float _353 = (((cbMtdParam._m0[10u].z * _306.z) - _344) * _293) + _344;
    float _360 = exp2(log2(_278.w) * cbMtdParam._m0[22u].y);
    vec4 _373 = texture(sampler2D(C_Enemy_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _392 = (((cbMtdParam._m0[12u].x * _373.x) - _351) * _360) + _351;
    float _393 = (((cbMtdParam._m0[12u].y * _373.y) - _352) * _360) + _352;
    float _394 = (((cbMtdParam._m0[12u].z * _373.z) - _353) * _360) + _353;
    vec4 _407 = texture(sampler2D(C_Enemy_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _431 = (_250.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _407.x) - _392) * _264) + _392);
    float _433 = (_250.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _407.y) - _393) * _264) + _393);
    float _435 = (_250.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _407.z) - _394) * _264) + _394);
    float _467 = cbMtdParam._m0[23u].z + texture(sampler2D(C_Enemy_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x;
    float _470 = ((texture(sampler2D(C_Enemy_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _467) * _293) + _467;
    float _490 = (((texture(sampler2D(C_Enemy_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _470) + cbMtdParam._m0[21u].z) * _360) + _470;
    float _513 = (((texture(sampler2D(C_Enemy_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x - _490) + cbMtdParam._m0[24u].z) * _264) + _490;
    vec4 _527 = texture(sampler2D(C_Enemy_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    vec4 _546 = texture(sampler2D(C_Enemy_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _548 = _546.x;
    float _549 = _546.y;
    float _552 = cbMtdParam._m0[20u].x + _546.z;
    float _555 = (((cbMtdParam._m0[21u].x + _527.z) - _552) * _293) + _552;
    vec4 _567 = texture(sampler2D(C_Enemy_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _576 = (((_567.z - _555) + cbMtdParam._m0[24u].x) * _360) + _555;
    float _582 = ((((_282 * 2.0) * _576) - _576) * cbMtdParam._m0[23u].y) + _576;
    vec4 _595 = texture(sampler2D(C_Enemy_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _604 = (((cbMtdParam._m0[22u].x + _595.z) - _582) * _264) + _582;
    float _615 = ((_527.x - _548) * _293) + _548;
    float _616 = ((_527.y - _549) * _293) + _549;
    float _621 = ((_567.x - _615) * _360) + _615;
    float _622 = ((_567.y - _616) * _360) + _616;
    float _631 = ((((_595.x - _621) * _264) + _621) * 2.0) + (-1.0);
    float _632 = ((((_595.y - _622) * _264) + _622) * 2.0) + (-1.0);
    float _633 = dot(vec2(_631, _632), vec2(_631, _632));
    float _3703 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _638 = sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))));
    float _641 = _631 + (cbMtdParam._m0[23u].w * ((_278.x * 2.0) + (-1.0)));
    float _642 = _632 + (cbMtdParam._m0[23u].w * ((_278.y * 2.0) + (-1.0)));
    float _645 = fma(_638, _225 * NORMAL.x, fma(_642, _232 * TANGENT.x, (_218 * _210) * _641));
    float _648 = fma(_638, _225 * NORMAL.y, fma(_642, _232 * TANGENT.y, (_218 * _211) * _641));
    float _651 = fma(_638, _225 * NORMAL.z, fma(_642, _232 * TANGENT.z, (_218 * _212) * _641));
    float _655 = inversesqrt(dot(vec3(_645, _648, _651), vec3(_645, _648, _651)));
    float _656 = _655 * _645;
    float _657 = _655 * _648;
    float _658 = _655 * _651;
    float _3714 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _659 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3736 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3747 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3758 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _663 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _679 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _730 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _720);
    float _731 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _720);
    float _732 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _720);
    float _736 = inversesqrt(dot(vec3(_730, _731, _732), vec3(_730, _731, _732)));
    float _737 = _730 * _736;
    float _738 = _731 * _736;
    float _739 = _732 * _736;
    vec4 _744 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _746 = _744.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _969 = sqrt(((_730 * _730) + (_731 * _731)) + (_732 * _732));
        float _975 = (cbMatDynParam._m0[5u].x * _969) + cbMatDynParam._m0[5u].y;
        float _3769 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _980 = (cbMatDynParam._m0[5u].z * _969) + cbMatDynParam._m0[5u].w;
        float _3780 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) - _976)) + _976) < ((_746 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _758 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _759 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _761 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _763 = _761.w;
    float _782 = fma(_658, cbSceneParam._m0[5u].z, fma(_657, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _656));
    float _785 = fma(_658, cbSceneParam._m0[6u].z, fma(_657, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _656));
    float _788 = fma(_658, cbSceneParam._m0[7u].z, fma(_657, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _656));
    vec4 _790 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _801 = (((_790.y - _659) + (_790.w * _659)) * cbMtdParam._m0[3u].x) + _659;
    uint _814 = uint(roundEven(NORMAL.w)) * 13u;
    uint _815 = _814 + 9u;
    uint _816 = _815 + uint(cbMatDynParam._m0[0u].w);
    float _822 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * cbInstanceData._m0[_816].x;
    float _823 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_816].y;
    float _824 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_816].z;
    float _3791 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    vec4 _828 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _833 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _844 = (((_833.x - _663) + (_833.w * _663)) * cbMtdParam._m0[3u].x) + _663;
    float _857 = (cbMtdParam._m0[3u].x * (((_825 * _763) - _825) + _828.x)) + _825;
    float _858 = (cbMtdParam._m0[3u].x * (((_826 * _763) - _826) + _828.y)) + _826;
    float _859 = (cbMtdParam._m0[3u].x * (((_827 * _763) - _827) + _828.z)) + _827;
    float _860 = 1.0 - _844;
    float _861 = _860 * _857;
    float _862 = _860 * _858;
    float _863 = _860 * _859;
    float _868 = (_857 + (-0.039999999105930328369140625)) * _844;
    float _869 = (_858 + (-0.039999999105930328369140625)) * _844;
    float _870 = (_859 + (-0.039999999105930328369140625)) * _844;
    float _871 = _868 + 0.039999999105930328369140625;
    float _873 = _869 + 0.039999999105930328369140625;
    float _874 = _870 + 0.039999999105930328369140625;
    vec4 _883 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _758, cbSceneParam._m0[86u].y * _759));
    float _886 = _883.x * TEXCOORD_5.w;
    float _887 = dot(vec3(_656, _657, _658), vec3(_737, _738, _739));
    float _890 = _887 * 2.0;
    float _894 = (_890 * _656) - _737;
    float _895 = (_890 * _657) - _738;
    float _896 = (_890 * _658) - _739;
    float _900 = abs(dot(vec3(_737, _738, _739), vec3(_656, _657, _658)));
    float _3824 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _902 = sqrt(_801);
    float _915 = exp2((_902 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_902 * 3.0));
    float _921 = (1.0 - _915) * ((_902 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _922 = _915 * _902;
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1289;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1014 = fma(_958, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950));
        float _1018 = fma(_958, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950));
        float _1022 = fma(_958, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950));
        float _1047 = _950 + _656;
        float _1048 = _954 + _657;
        float _1049 = _958 + _658;
        float _1059 = fma(_1049, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047)) - _1014;
        float _1060 = fma(_1049, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047)) - _1018;
        float _1061 = fma(_1049, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047)) - _1022;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1014 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1018 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[34u].z) + ((((((_1022 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1117 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1083.x + (-0.5));
        float _1119 = _1117 * (_1083.y + (-0.5));
        float _1120 = _1117 * (_1083.z + (-0.5));
        float _1127 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1090.x + (-0.5));
        float _1129 = _1127 * (_1090.y + (-0.5));
        float _1130 = _1127 * (_1090.z + (-0.5));
        float _1137 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1097.x + (-0.5));
        float _1139 = _1137 * (_1097.y + (-0.5));
        float _1140 = _1137 * (_1097.z + (-0.5));
        float _1147 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1104.x + (-0.5));
        float _1149 = _1147 * (_1104.y + (-0.5));
        float _1150 = _1147 * (_1104.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1171 = (dot(vec3(_656, _657, _658), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1181 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3872 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1183 + 1.0))) + _1188) * _1151;
        float _1198 = _1119 * 0.5;
        float _1199 = _1129 * 0.5;
        float _1200 = _1139 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_656, _657, _658), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3905 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1225 + 1.0))) + _1230) * _1152;
        float _1240 = _1120 * 0.5;
        float _1241 = _1130 * 0.5;
        float _1242 = _1140 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_656, _657, _658), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3938 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1267 + 1.0))) + _1272) * _1153;
        _1289 = _1120;
        _1291 = _1119;
        _1292 = _1118;
        _1293 = _1130;
        _1294 = _1129;
        _1295 = _1128;
        _1296 = _1140;
        _1297 = _1139;
        _1298 = _1138;
        _1299 = _1153;
        _1300 = _1152;
        _1301 = _1151;
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _1290;
        _1291 = _1290;
        _1292 = _1290;
        _1293 = _1290;
        _1294 = _1290;
        _1295 = _1290;
        _1296 = _1290;
        _1297 = _1290;
        _1298 = _1290;
        _1299 = _1290;
        _1300 = _1290;
        _1301 = _1290;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1333 = fma(_958, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950));
        float _1337 = fma(_958, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950));
        float _1341 = fma(_958, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950));
        float _1364 = _950 + _656;
        float _1365 = _954 + _657;
        float _1366 = _958 + _658;
        float _1376 = fma(_1366, cbModelParam._m0[30u].z, fma(_1365, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1364)) - _1333;
        float _1377 = fma(_1366, cbModelParam._m0[31u].z, fma(_1365, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1364)) - _1337;
        float _1378 = fma(_1366, cbModelParam._m0[32u].z, fma(_1365, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1364)) - _1341;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1333 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1337 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[35u].z) + ((((((_1341 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1432 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1399.x + (-0.5));
        float _1434 = _1432 * (_1399.y + (-0.5));
        float _1435 = _1432 * (_1399.z + (-0.5));
        float _1442 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1406.x + (-0.5));
        float _1444 = _1442 * (_1406.y + (-0.5));
        float _1445 = _1442 * (_1406.z + (-0.5));
        float _1452 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1413.x + (-0.5));
        float _1454 = _1452 * (_1413.y + (-0.5));
        float _1455 = _1452 * (_1413.z + (-0.5));
        float _1462 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1420.x + (-0.5));
        float _1464 = _1462 * (_1420.y + (-0.5));
        float _1465 = _1462 * (_1420.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_656, _657, _658), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4001 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1496 + 1.0))) + _1501) * _1466;
        float _1511 = _1434 * 0.5;
        float _1512 = _1444 * 0.5;
        float _1513 = _1454 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_656, _657, _658), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4034 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1538 + 1.0))) + _1543) * _1467;
        float _1553 = _1435 * 0.5;
        float _1554 = _1445 * 0.5;
        float _1555 = _1455 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_656, _657, _658), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4067 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1580 + 1.0))) + _1585) * _1468;
        _1602 = _1435;
        _1603 = _1434;
        _1604 = _1433;
        _1605 = _1445;
        _1606 = _1444;
        _1607 = _1443;
        _1608 = _1455;
        _1609 = _1454;
        _1610 = _1453;
        _1611 = _1468;
        _1612 = _1467;
        _1613 = _1466;
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
    }
    else
    {
        _1602 = _1290;
        _1603 = _1290;
        _1604 = _1290;
        _1605 = _1290;
        _1606 = _1290;
        _1607 = _1290;
        _1608 = _1290;
        _1609 = _1290;
        _1610 = _1290;
        _1611 = _1290;
        _1612 = _1290;
        _1613 = _1290;
        _1614 = 0.0;
        _1615 = 0.0;
        _1616 = 0.0;
    }
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1302)) + _1302;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1303)) + _1303;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1304)) + _1304;
    float _1649 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1626));
    float _1670 = _894 * 0.5;
    float _1671 = _895 * 0.5;
    float _1672 = _896 * 0.5;
    float _1673 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1676 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1679 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1713;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1686 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1289, _1293, _1296, _1299));
        float _1690 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1694 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1701 = dot(vec4(cbModelParam._m0[39u]), vec4(_1670, _1671, _1672, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1724;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1715 = dot(vec4(cbModelParam._m0[40u]), vec4(_1670, _1671, _1672, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1728 = (_1724 * cbModelParam._m0[1u].x) + (_1713 * (1.0 - cbModelParam._m0[1u].x));
    float _1738 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _801);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1738 : min(cbModelParam._m0[25u].z, _1738));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1786 = fma(_958, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950)) + cbModelParam._m0[13u].w;
        float _1790 = fma(_958, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950)) + cbModelParam._m0[14u].w;
        float _1794 = fma(_958, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950)) + cbModelParam._m0[15u].w;
        float _1797 = fma(_896, cbModelParam._m0[13u].z, fma(_895, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894));
        float _1800 = fma(_896, cbModelParam._m0[14u].z, fma(_895, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894));
        float _1803 = fma(_896, cbModelParam._m0[15u].z, fma(_895, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894));
        float _1831;
        if (_1797 > 0.0)
        {
            _1831 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1831 = frontier_phi_17_15_ladder;
        }
        float _2034;
        if (_1800 > 0.0)
        {
            _2034 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2034 = frontier_phi_26_22_ladder;
        }
        float _2288;
        if (_1803 > 0.0)
        {
            _2288 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2288 = frontier_phi_38_33_ladder;
        }
        float _2290 = isnan(_2034) ? _1831 : (isnan(_1831) ? _2034 : min(_1831, _2034));
        float _2291 = isnan(_2288) ? _2290 : (isnan(_2290) ? _2288 : min(_2290, _2288));
        float _2295 = (_2291 * _1797) + _1786;
        float _2296 = (_2291 * _1800) + _1790;
        float _2297 = (_2291 * _1803) + _1794;
        float _2298 = _2291 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2298;
        float _2302 = _2298 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 > _2302) || ((_2296 < _2300) || ((_2295 < _2300) || (_2295 > _2302))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2297, cbModelParam._m0[9u].z, fma(_2296, cbModelParam._m0[9u].y, _2295 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2297, cbModelParam._m0[10u].z, fma(_2296, cbModelParam._m0[10u].y, _2295 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2297, cbModelParam._m0[11u].z, fma(_2296, cbModelParam._m0[11u].y, _2295 * cbModelParam._m0[11u].x))), _1739);
            frontier_phi_16_38_ladder = _2425.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2425.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2425.x * cbModelParam._m0[1u].y;
        }
        _1819 = frontier_phi_16_38_ladder_2;
        _1821 = frontier_phi_16_38_ladder_1;
        _1823 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_894, _895, _896), _1739);
        _1819 = _1807.x * cbModelParam._m0[1u].y;
        _1821 = _1807.y * cbModelParam._m0[1u].y;
        _1823 = _1807.z * cbModelParam._m0[1u].y;
    }
    float _1827 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _801);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1827 : min(cbModelParam._m0[25u].w, _1827));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1882 = fma(_958, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950)) + cbModelParam._m0[21u].w;
        float _1886 = fma(_958, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950)) + cbModelParam._m0[22u].w;
        float _1890 = fma(_958, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950)) + cbModelParam._m0[23u].w;
        float _1893 = fma(_896, cbModelParam._m0[21u].z, fma(_895, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894));
        float _1896 = fma(_896, cbModelParam._m0[22u].z, fma(_895, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894));
        float _1899 = fma(_896, cbModelParam._m0[23u].z, fma(_895, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894));
        float _2039;
        if (_1893 > 0.0)
        {
            _2039 = abs((1.0 - _1882) / _1893);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1882 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2039 = frontier_phi_28_24_ladder;
        }
        float _2315;
        if (_1896 > 0.0)
        {
            _2315 = abs((1.0 - _1886) / _1896);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1886 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2315 = frontier_phi_40_35_ladder;
        }
        float _2528;
        if (_1899 > 0.0)
        {
            _2528 = abs((1.0 - _1890) / _1899);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1890 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2528 = frontier_phi_49_46_ladder;
        }
        float _2530 = isnan(_2315) ? _2039 : (isnan(_2039) ? _2315 : min(_2039, _2315));
        float _2531 = isnan(_2528) ? _2530 : (isnan(_2530) ? _2528 : min(_2530, _2528));
        float _2535 = (_2531 * _1893) + _1882;
        float _2536 = (_2531 * _1896) + _1886;
        float _2537 = (_2531 * _1899) + _1890;
        float _2538 = _2531 * 9.9999997473787516355514526367188e-05;
        float _2539 = (-1.0) - _2538;
        float _2541 = _2538 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2537 > _2541) || ((_2537 < _2539) || ((_2536 > _2541) || ((_2536 < _2539) || ((_2535 < _2539) || (_2535 > _2541))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2537, cbModelParam._m0[17u].z, fma(_2536, cbModelParam._m0[17u].y, _2535 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2537, cbModelParam._m0[18u].z, fma(_2536, cbModelParam._m0[18u].y, _2535 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2537, cbModelParam._m0[19u].z, fma(_2536, cbModelParam._m0[19u].y, _2535 * cbModelParam._m0[19u].x))), _1828);
            frontier_phi_25_49_ladder = _2736.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2736.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2736.x * cbModelParam._m0[1u].z;
        }
        _1918 = frontier_phi_25_49_ladder_2;
        _1920 = frontier_phi_25_49_ladder_1;
        _1922 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_894, _895, _896), _1828);
        _1918 = _1902.x * cbModelParam._m0[1u].z;
        _1920 = _1902.y * cbModelParam._m0[1u].z;
        _1922 = _1902.z * cbModelParam._m0[1u].z;
    }
    float _1935 = (((_921 * _871) + _922) * _886) * ((cbModelParam._m0[1u].w * (_1918 - _1819)) + _1819);
    float _1937 = (((_921 * _873) + _922) * _886) * ((cbModelParam._m0[1u].w * (_1920 - _1821)) + _1821);
    float _1939 = (((_921 * _874) + _922) * _886) * ((cbModelParam._m0[1u].w * (_1922 - _1823)) + _1823);
    float _1942 = fma(_1939, cbSceneParam._m0[89u].z, fma(_1937, cbSceneParam._m0[89u].y, _1935 * cbSceneParam._m0[89u].x));
    float _1945 = fma(_1939, cbSceneParam._m0[90u].z, fma(_1937, cbSceneParam._m0[90u].y, _1935 * cbSceneParam._m0[90u].x));
    float _1948 = fma(_1939, cbSceneParam._m0[91u].z, fma(_1937, cbSceneParam._m0[91u].y, _1935 * cbSceneParam._m0[91u].x));
    uvec4 _1958 = floatBitsToUint(cbInstanceData._m0[_814 + 5u]);
    uint _1960 = _1958.x * 14u;
    uint _1961 = _1960 + 13u;
    float _1968 = _886 + (-1.0);
    float _1973 = (cbLight._m0[_1961].x * _1968) + 1.0;
    float _1974 = (cbLight._m0[_1961].y * _1968) + 1.0;
    float _1975 = (cbLight._m0[_1961].z * _1968) + 1.0;
    float _1976 = (cbLight._m0[_1961].w * _1968) + 1.0;
    uint _1977 = _1960 + 5u;
    float _1983 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
    uint _1987 = _1960 + 4u;
    float _1993 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
    uint _1997 = _1960 | 1u;
    float _2008 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_656, _657, _658));
    float _2011 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_656, _657, _658));
    float _4203 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _4214 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2016 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.3183098733425140380859375;
    float _2018 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * 0.3183098733425140380859375;
    float _2025 = ((cbLight._m0[_1977].x * _1983) * _2018) + ((cbLight._m0[_1987].x * _1993) * _2016);
    float _2026 = ((_1983 * cbLight._m0[_1977].y) * _2018) + ((_1993 * cbLight._m0[_1987].y) * _2016);
    float _2027 = ((_1983 * cbLight._m0[_1977].z) * _2018) + ((_1993 * cbLight._m0[_1987].z) * _2016);
    uvec4 _2031 = floatBitsToUint(cbLight._m0[_1960 + 12u]);
    bool _2033 = _2031.x == 0u;
    float _2044;
    float _2046;
    float _2048;
    if (_2033)
    {
        _2044 = _2025;
        _2046 = _2026;
        _2048 = _2027;
    }
    else
    {
        uint _2052 = _1960 + 6u;
        float _2068 = (dot(vec3(cbLight._m0[_1960 + 2u].xyz), vec3(_656, _657, _658)) * 0.5) + 0.5;
        float _2069 = _2068 * _2068;
        float _4225 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2070 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2071 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2044 = (((cbLight._m0[_2052].x * 0.3183098733425140380859375) * _2070) * _2071) + _2025;
        _2046 = (((cbLight._m0[_2052].y * 0.3183098733425140380859375) * _2070) * _2071) + _2026;
        _2048 = (((cbLight._m0[_2052].z * 0.3183098733425140380859375) * _2070) * _2071) + _2027;
    }
    bool _2051 = _2031.y == 0u;
    float _2089;
    float _2091;
    float _2093;
    if (_2051)
    {
        _2089 = _2044;
        _2091 = _2046;
        _2093 = _2048;
    }
    else
    {
        uint _2259 = _1960 + 7u;
        float _2275 = (dot(vec3(cbLight._m0[_1960 + 3u].xyz), vec3(_656, _657, _658)) * 0.5) + 0.5;
        float _2276 = _2275 * _2275;
        float _4241 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2277 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2278 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2089 = (((cbLight._m0[_2259].x * 0.3183098733425140380859375) * _2277) * _2278) + _2044;
        _2091 = (((cbLight._m0[_2259].y * 0.3183098733425140380859375) * _2277) * _2278) + _2046;
        _2093 = (((cbLight._m0[_2259].z * 0.3183098733425140380859375) * _2277) * _2278) + _2048;
    }
    uint _2096 = _1960 + 8u;
    float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _801) * 0.949999988079071044921875);
    float _2110 = _2109 * _2109;
    float _2111 = cbLight._m0[_1960].x + _737;
    float _2112 = cbLight._m0[_1960].y + _738;
    float _2113 = cbLight._m0[_1960].z + _739;
    float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
    float _2118 = _2117 * _2111;
    float _2119 = _2117 * _2112;
    float _2120 = _2117 * _2113;
    float _2121 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_1960].xyz));
    float _4257 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _4268 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2125 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2126 = dot(vec3(_656, _657, _658), vec3(_2118, _2119, _2120));
    float _4279 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2130 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_2118, _2119, _2120));
    float _4290 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2134 = _2110 * _2110;
    float _2138 = ((_2129 * _2129) * (_2134 + (-1.0))) + 1.0;
    float _2146 = exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0);
    float _2147 = 0.959999978542327880859375 - _868;
    float _2149 = 0.959999978542327880859375 - _869;
    float _2150 = 0.959999978542327880859375 - _870;
    float _2157 = 1.0 - _2110;
    float _2168 = (0.5 / (((_2125 * ((_2124 * _2157) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2157) + _2110) * _2124))) * _2124;
    float _4301 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2170 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2134 / ((_2138 * _2138) * 3.141590118408203125));
    uint _2181 = _1960 + 9u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _801) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_1997].x + _737;
    float _2195 = cbLight._m0[_1997].y + _738;
    float _2196 = cbLight._m0[_1997].z + _739;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_1997].xyz));
    float _4312 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2208 = dot(vec3(_656, _657, _658), vec3(_2201, _2202, _2203));
    float _4323 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2201, _2202, _2203));
    float _4334 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2193 * _2193;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2227 = exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0);
    float _2234 = 1.0 - _2193;
    float _2244 = (0.5 / (((_2125 * ((_2207 * _2234) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2234) + _2193) * _2207))) * _2207;
    float _4345 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    float _2256 = (((((_2227 * _2147) + _871) * cbLight._m0[_2181].x) * _2246) * _1983) + (((((_2146 * _2147) + _871) * cbLight._m0[_2096].x) * _2170) * _1993);
    float _2257 = (((((_2227 * _2149) + _873) * cbLight._m0[_2181].y) * _2246) * _1983) + (((((_2146 * _2149) + _873) * cbLight._m0[_2096].y) * _2170) * _1993);
    float _2258 = (((((_2227 * _2150) + _874) * cbLight._m0[_2181].z) * _2246) * _1983) + (((((_2146 * _2150) + _874) * cbLight._m0[_2096].z) * _2170) * _1993);
    float _2320;
    float _2322;
    float _2324;
    if (_2033)
    {
        _2320 = _2256;
        _2322 = _2257;
        _2324 = _2258;
    }
    else
    {
        uint _2326 = _1960 + 2u;
        uint _2330 = _1960 + 10u;
        float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _801) * 0.949999988079071044921875);
        float _2345 = _2344 * _2344;
        float _2346 = cbLight._m0[_2326].x + _737;
        float _2347 = cbLight._m0[_2326].y + _738;
        float _2348 = cbLight._m0[_2326].z + _739;
        float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
        float _2353 = _2352 * _2346;
        float _2354 = _2352 * _2347;
        float _2355 = _2352 * _2348;
        float _2356 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2326].xyz));
        float _4356 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2360 = dot(vec3(_656, _657, _658), vec3(_2353, _2354, _2355));
        float _4367 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2364 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2353, _2354, _2355));
        float _4378 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2368 = _2345 * _2345;
        float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
        float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0);
        float _2386 = 1.0 - _2345;
        float _2396 = (0.5 / (((_2125 * ((_2359 * _2386) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2386) + _2345) * _2359))) * _2359;
        float _4389 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2398 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
        float _2399 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2320 = (((((_2379 * _2147) + _871) * cbLight._m0[_2330].x) * _2398) * _2399) + _2256;
        _2322 = (((((_2379 * _2149) + _873) * cbLight._m0[_2330].y) * _2398) * _2399) + _2257;
        _2324 = (((((_2379 * _2150) + _874) * cbLight._m0[_2330].z) * _2398) * _2399) + _2258;
    }
    float _2434;
    float _2436;
    float _2438;
    if (_2051)
    {
        _2434 = _2320;
        _2436 = _2322;
        _2438 = _2324;
    }
    else
    {
        uint _2445 = _1960 + 3u;
        uint _2449 = _1960 + 11u;
        float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _801) * 0.949999988079071044921875);
        float _2464 = _2463 * _2463;
        float _2465 = cbLight._m0[_2445].x + _737;
        float _2466 = cbLight._m0[_2445].y + _738;
        float _2467 = cbLight._m0[_2445].z + _739;
        float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
        float _2472 = _2471 * _2465;
        float _2473 = _2471 * _2466;
        float _2474 = _2471 * _2467;
        float _2475 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2445].xyz));
        float _4405 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2479 = dot(vec3(_656, _657, _658), vec3(_2472, _2473, _2474));
        float _4416 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2483 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2472, _2473, _2474));
        float _4427 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2487 = _2464 * _2464;
        float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
        float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0);
        float _2505 = 1.0 - _2464;
        float _2515 = (0.5 / (((_2125 * ((_2478 * _2505) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2505) + _2464) * _2478))) * _2478;
        float _4438 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2517 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
        float _2518 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2434 = (((((_2498 * _2147) + _871) * cbLight._m0[_2449].x) * _2517) * _2518) + _2320;
        _2436 = (((((_2498 * _2149) + _873) * cbLight._m0[_2449].y) * _2517) * _2518) + _2322;
        _2438 = (((((_2498 * _2150) + _874) * cbLight._m0[_2449].z) * _2517) * _2518) + _2324;
    }
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    if (_1958.y == 0u)
    {
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2593;
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2593;
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2593;
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.x;
        uint _2620 = uint((float(_2608.y) * floor(float(uint(cbSceneParam._m0[85u].y * _759) / _2609))) + floor(float(uint(cbSceneParam._m0[85u].x * _758) / _2609)));
        float _2630 = (log2(_2596 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2631 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        uint _2634 = uint(isnan(14.0) ? _2631 : (isnan(_2631) ? 14.0 : min(_2631, 14.0)));
        uvec4 _2639 = texelFetch(g_lightClusterGridBuffer, int(((_2634 << 2u) + (_2620 << 6u)) >> 2u));
        uint _2640 = _2639.x;
        uint _2641 = _2608.z;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        if (((((1u << ((_2641 >> 4u) & 15u)) + 4294967295u) & _2640) == 0u) || ((_2641 & 240u) == 0u))
        {
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
        }
        else
        {
            float _2742;
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            uint _2900 = 0u;
            uint _2909;
            bool _2910;
            for (;;)
            {
                _2909 = texelFetch(g_lightClassification, int((((_2634 << 5u) + (_2620 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                _2910 = _2909 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2910)
                {
                    frontier_phi_66_pred = _2894;
                    frontier_phi_66_pred_1 = _2899;
                    frontier_phi_66_pred_2 = _2898;
                    frontier_phi_66_pred_3 = _2897;
                    frontier_phi_66_pred_4 = _2896;
                    frontier_phi_66_pred_5 = _2895;
                }
                else
                {
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    uint _3045;
                    _3039 = _2894;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2897;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2909;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    for (;;)
                    {
                        uint _3049 = uint(findLSB(_3045)) + (_2900 << 5u);
                        uint _3046 = (_3045 + 4294967295u) & _3045;
                        uint _3051 = _3049 * 48u;
                        vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 3u)).x));
                        uint _3071 = (_3049 * 48u) + 4u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 3u)).x));
                        uint _3090 = (_3049 * 48u) + 8u;
                        vec3 _3101 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x));
                        float _3105 = _3065.x - _2594;
                        float _3106 = _3065.y - _2595;
                        float _3107 = _3065.z - _2596;
                        float _3108 = dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107));
                        float _3111 = inversesqrt(_3108);
                        float _3112 = _3111 * _3105;
                        float _3113 = _3111 * _3106;
                        float _3114 = _3111 * _3107;
                        float _3115 = dot(vec3(_782, _785, _788), vec3(_3112, _3113, _3114));
                        float _3120 = 1.0 - (_3108 * _3065.w);
                        float _4464 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3121 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3122 = sqrt(_3108) * _3084.w;
                        float _3125 = 1.39999997615814208984375 / (_3122 + 1.39999997615814208984375);
                        float _3126 = _3125 * _3125;
                        float _3129 = ((1.0 - _3126) * _3115) + _3126;
                        float _3132 = _3122 * _3122;
                        float _3136 = ((isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))) * _3121) / ((_3132 * 0.699999988079071044921875) + 1.0);
                        float _3140 = (-0.0) - _2594;
                        float _3141 = (-0.0) - _2595;
                        float _3142 = (-0.0) - _2596;
                        float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                        float _3147 = _3146 * _3140;
                        float _3148 = _3146 * _3141;
                        float _3149 = _3146 * _3142;
                        float _3157 = exp2(log2(1.0 / ((_3132 * 3.5) + 5.0)) * 0.25);
                        float _3158 = 1.0 - _902;
                        float _3165 = sqrt(1.0 - ((1.0 - (_3158 * _3158)) * (1.0 - (_3157 * _3157))));
                        float _3166 = _3165 * _3165;
                        float _3167 = _3166 * _3166;
                        float _3168 = _3147 + _3112;
                        float _3169 = _3148 + _3113;
                        float _3170 = _3149 + _3114;
                        float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                        float _3178 = dot(vec3(_782, _785, _788), vec3(_3147, _3148, _3149));
                        float _4480 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3181 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3182 = dot(vec3(_782, _785, _788), vec3(_3174 * _3168, _3174 * _3169, _3174 * _3170));
                        float _4491 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3185 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3189 = ((_3185 * _3185) * (_3167 + (-1.0))) + 1.0;
                        float _3190 = _3125 * _3166;
                        float _3191 = _3190 * _3190;
                        float _3194 = ((1.0 - _3191) * _3115) + _3191;
                        float _4502 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3195 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3196 = 1.0 - _3166;
                        float _3206 = (0.5 / (((_3195 * ((_3181 * _3196) + _3166)) + 9.9999999392252902907785028219223e-09) + (((_3195 * _3196) + _3166) * _3181))) * _3195;
                        float _4513 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3217 = (((_3167 * 3.1415927410125732421875) * (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) / ((_3189 * _3189) * ((_3132 * 2.1991131305694580078125) + 3.141590118408203125))) * _3121;
                        _2969 = (_3136 * _3084.x) + _3042;
                        _2970 = (_3136 * _3084.y) + _3043;
                        _2971 = (_3136 * _3084.z) + _3044;
                        _2966 = (_3217 * _3101.x) + _3039;
                        _2967 = (_3217 * _3101.y) + _3040;
                        _2968 = (_3217 * _3101.z) + _3041;
                        if (_3046 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3039 = _2966;
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _2969;
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _3046;
                        }
                    }
                    frontier_phi_66_pred = _2966;
                    frontier_phi_66_pred_1 = _2971;
                    frontier_phi_66_pred_2 = _2970;
                    frontier_phi_66_pred_3 = _2969;
                    frontier_phi_66_pred_4 = _2968;
                    frontier_phi_66_pred_5 = _2967;
                }
                _2742 = frontier_phi_66_pred;
                _2752 = frontier_phi_66_pred_1;
                _2750 = frontier_phi_66_pred_2;
                _2748 = frontier_phi_66_pred_3;
                _2746 = frontier_phi_66_pred_4;
                _2744 = frontier_phi_66_pred_5;
                uint _2901 = _2900 + 1u;
                if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2894 = _2742;
                    _2895 = _2744;
                    _2896 = _2746;
                    _2897 = _2748;
                    _2898 = _2750;
                    _2899 = _2752;
                    _2900 = _2901;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
        }
        uvec4 _2755 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2756 = _2755.z;
        uint _2758 = (_2756 >> 8u) & 15u;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        if (((4294967295u << _2758) & _2640) == 0u)
        {
            _2862 = _2741;
            _2864 = _2743;
            _2866 = _2745;
            _2868 = _2747;
            _2870 = _2749;
            _2872 = _2751;
        }
        else
        {
            float _2887 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
            float _2888 = _2887 * _2594;
            float _2889 = _2887 * _2595;
            float _2890 = _2887 * _2596;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2758 < ((_2756 >> 12u) & 15u))
            {
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _3022 = _2741;
                float _3023 = _2743;
                float _3024 = _2745;
                float _3025 = _2747;
                float _3026 = _2749;
                float _3027 = _2751;
                uint _3028 = _2758;
                uint _3037;
                bool _3038;
                for (;;)
                {
                    _3037 = texelFetch(g_lightClassification, int((((_2634 << 5u) + (_2620 << 9u)) + (_3028 << 2u)) >> 2u)).x;
                    _3038 = _3037 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3038)
                    {
                        frontier_phi_77_pred = _3027;
                        frontier_phi_77_pred_1 = _3026;
                        frontier_phi_77_pred_2 = _3025;
                        frontier_phi_77_pred_3 = _3024;
                        frontier_phi_77_pred_4 = _3023;
                        frontier_phi_77_pred_5 = _3022;
                    }
                    else
                    {
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3244 = _3022;
                        float _3245 = _3023;
                        float _3246 = _3024;
                        float _3247 = _3025;
                        float _3248 = _3026;
                        float _3249 = _3027;
                        uint _3250 = _3037;
                        uint _3251;
                        vec4 _3276;
                        float _3277;
                        vec4 _3292;
                        vec3 _3304;
                        vec4 _3319;
                        vec4 _3334;
                        float _3380;
                        bool _3381;
                        for (;;)
                        {
                            uint _3261 = ((_3028 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3250));
                            _3251 = (_3250 + 4294967295u) & _3250;
                            uint _3263 = _3261 * 40u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3277 = _3276.w;
                            uint _3279 = (_3261 * 40u) + 4u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3261 * 40u) + 8u;
                            _3304 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x));
                            uint _3306 = (_3261 * 40u) + 16u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3261 * 40u) + 20u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3336 = (_3261 * 40u) + 24u;
                            vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3355 = (_3261 * 40u) + 28u;
                            vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            _3380 = fma(_2596, _3368.z, fma(_2595, _3368.y, _3368.x * _2594)) + _3368.w;
                            _3381 = !((fma(_2596, _3349.z, fma(_2595, _3349.y, _3349.x * _2594)) + _3349.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3381)
                            {
                                float _3408 = _3276.x - _2594;
                                float _3409 = _3276.y - _2595;
                                float _3410 = _3276.z - _2596;
                                float _3411 = dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410));
                                float _3414 = inversesqrt(_3411);
                                float _3415 = _3414 * _3408;
                                float _3416 = _3414 * _3409;
                                float _3417 = _3414 * _3410;
                                float _3421 = 1.0 - (_3411 / (_3277 * _3277));
                                float _4524 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3426 = sqrt(_3411) * _3292.w;
                                float _3428 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                                float _3429 = _3428 * _3428;
                                float _3432 = ((1.0 - _3429) * dot(vec3(_3415, _3416, _3417), vec3(_782, _785, _788))) + _3429;
                                float _3435 = _3426 * _3426;
                                float _3439 = (fma(_2596, _3319.z, fma(_2595, _3319.y, _3319.x * _2594)) + _3319.w) / _3380;
                                float _3440 = (fma(_2596, _3334.z, fma(_2595, _3334.y, _3334.x * _2594)) + _3334.w) / _3380;
                                float _3444 = 1.0 - dot(vec2(_3439, _3440), vec2(_3439, _3440));
                                float _4540 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3446 = _3445 * (((isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0))) * _3422) / ((_3435 * 0.699999988079071044921875) + 1.0));
                                float _3458 = exp2(log2(1.0 / ((_3435 * 3.5) + 5.0)) * 0.25);
                                float _3459 = 1.0 - _902;
                                float _3466 = sqrt(1.0 - ((1.0 - (_3459 * _3459)) * (1.0 - (_3458 * _3458))));
                                float _3467 = _3466 * _3466;
                                float _3468 = _3467 * _3467;
                                float _3469 = _3415 - _2888;
                                float _3470 = _3416 - _2889;
                                float _3471 = _3417 - _2890;
                                float _3475 = inversesqrt(dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471)));
                                float _3479 = dot(vec3(_782, _785, _788), vec3((-0.0) - _2888, (-0.0) - _2889, (-0.0) - _2890));
                                float _4551 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3482 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3483 = dot(vec3(_782, _785, _788), vec3(_3475 * _3469, _3475 * _3470, _3475 * _3471));
                                float _4562 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3486 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3490 = ((_3486 * _3486) * (_3468 + (-1.0))) + 1.0;
                                float _3491 = _3428 * _3467;
                                float _3492 = _3491 * _3491;
                                float _3498 = ((1.0 - _3492) * dot(vec3(_782, _785, _788), vec3(_3415, _3416, _3417))) + _3492;
                                float _4573 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3500 = 1.0 - _3467;
                                float _3510 = (0.5 / (((_3499 * ((_3482 * _3500) + _3467)) + 9.9999999392252902907785028219223e-09) + (((_3499 * _3500) + _3467) * _3482))) * _3499;
                                float _4584 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3520 = (_3445 * _3422) * (((_3468 * 3.1415927410125732421875) * (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) / ((_3490 * _3490) * ((_3435 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3446 * _3292.y;
                                frontier_phi_83_pred_1 = _3446 * _3292.x;
                                frontier_phi_83_pred_2 = _3520 * _3304.z;
                                frontier_phi_83_pred_3 = _3520 * _3304.y;
                                frontier_phi_83_pred_4 = _3520 * _3304.x;
                                frontier_phi_83_pred_5 = _3446 * _3292.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3528 = frontier_phi_83_pred;
                            _3527 = frontier_phi_83_pred_1;
                            _3526 = frontier_phi_83_pred_2;
                            _3525 = frontier_phi_83_pred_3;
                            _3524 = frontier_phi_83_pred_4;
                            _3529 = frontier_phi_83_pred_5;
                            _3234 = _3527 + _3247;
                            _3235 = _3528 + _3248;
                            _3236 = _3529 + _3249;
                            _3231 = _3524 + _3244;
                            _3232 = _3525 + _3245;
                            _3233 = _3526 + _3246;
                            if (_3251 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3251;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3236;
                        frontier_phi_77_pred_1 = _3235;
                        frontier_phi_77_pred_2 = _3234;
                        frontier_phi_77_pred_3 = _3233;
                        frontier_phi_77_pred_4 = _3232;
                        frontier_phi_77_pred_5 = _3231;
                    }
                    _2873 = frontier_phi_77_pred;
                    _2871 = frontier_phi_77_pred_1;
                    _2869 = frontier_phi_77_pred_2;
                    _2867 = frontier_phi_77_pred_3;
                    _2865 = frontier_phi_77_pred_4;
                    _2863 = frontier_phi_77_pred_5;
                    uint _3029 = _3028 + 1u;
                    if (_3029 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3022 = _2863;
                        _3023 = _2865;
                        _3024 = _2867;
                        _3025 = _2869;
                        _3026 = _2871;
                        _3027 = _2873;
                        _3028 = _3029;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2867;
                frontier_phi_58_59_ladder_1 = _2873;
                frontier_phi_58_59_ladder_2 = _2871;
                frontier_phi_58_59_ladder_3 = _2869;
                frontier_phi_58_59_ladder_4 = _2865;
                frontier_phi_58_59_ladder_5 = _2863;
            }
            else
            {
                frontier_phi_58_59_ladder = _2745;
                frontier_phi_58_59_ladder_1 = _2751;
                frontier_phi_58_59_ladder_2 = _2749;
                frontier_phi_58_59_ladder_3 = _2747;
                frontier_phi_58_59_ladder_4 = _2743;
                frontier_phi_58_59_ladder_5 = _2741;
            }
            _2862 = frontier_phi_58_59_ladder_5;
            _2864 = frontier_phi_58_59_ladder_4;
            _2866 = frontier_phi_58_59_ladder;
            _2868 = frontier_phi_58_59_ladder_3;
            _2870 = frontier_phi_58_59_ladder_2;
            _2872 = frontier_phi_58_59_ladder_1;
        }
        float _2877 = isnan(1.0) ? _886 : (isnan(_886) ? 1.0 : min(_886, 1.0));
        _2653 = (_2877 * _2868) + _2089;
        _2655 = (_2877 * _2870) + _2091;
        _2657 = (_2877 * _2872) + _2093;
        _2659 = ((_2862 * _871) * _2877) + _2434;
        _2661 = ((_2864 * _873) * _2877) + _2436;
        _2663 = ((_2866 * _874) * _2877) + _2438;
    }
    else
    {
        _2653 = _2089;
        _2655 = _2091;
        _2657 = _2093;
        _2659 = _2434;
        _2661 = _2436;
        _2663 = _2438;
    }
    float _4600 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4611 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4622 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2680 = ((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2653 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _886))) + ((_2659 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2681 = ((isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2655 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _886))) + ((_2661 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2682 = ((isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2657 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _886))) + ((_2663 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    uint _2683 = _814 + 6u;
    float _2691 = _758 / cbSceneParam._m0[86u].x;
    float _2692 = _759 / cbSceneParam._m0[86u].y;
    vec4 _2706 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2691, _2692, (log2((isnan(cbSceneParam._m0[77u].w) ? _679 : (isnan(_679) ? cbSceneParam._m0[77u].w : min(_679, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2708 = _2706.x;
    float _2709 = _2706.y;
    float _2710 = _2706.z;
    float _2711 = _2706.w;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    if (_679 > cbSceneParam._m0[78u].w)
    {
        float _2766 = isnan(_679) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _679 : min(cbSceneParam._m0[80u].w, _679));
        float _2767 = _2766 / _679;
        float _2778 = _2767 * _730;
        float _2779 = _731 * _2767;
        float _2780 = (-0.0) - _2779;
        float _2782 = _2767 * _732;
        float _2784 = (cbSceneParam._m0[77u].w * _2780) / _2766;
        float _2785 = _2784 + cbSceneParam._m0[79u].w;
        float _2786 = cbSceneParam._m0[79u].w - _2779;
        float _2792 = sqrt(((_2778 * _2778) + (_2779 * _2779)) + (_2782 * _2782));
        float _2795 = (1.0 - (cbSceneParam._m0[77u].w / _2766)) * _2792;
        float _2800 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2802 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2979;
        if (abs((_2780 - _2784) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2979 = ((((_2785 > 0.0) ? exp2(_2800 * _2785) : (2.0 - exp2(_2802 * _2785))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2795;
        }
        else
        {
            float _2923 = 1.0 / cbSceneParam._m0[80u].x;
            float _2924 = isnan(_2786) ? _2785 : (isnan(_2785) ? _2786 : max(_2785, _2786));
            float _2925 = isnan(_2786) ? _2785 : (isnan(_2785) ? _2786 : min(_2785, _2786));
            float _2934 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : min(_2924, 0.0));
            float _2935 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : min(_2925, 0.0));
            _2979 = ((abs(_2792 / _2780) * cbSceneParam._m0[80u].y) * ((((_2934 - _2935) * 2.0) - ((exp2(_2800 * (isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0)))) - exp2(_2800 * (isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0))))) * _2923)) - ((exp2(_2802 * _2934) - exp2(_2802 * _2935)) * _2923))) + (_2795 * cbSceneParam._m0[80u].z);
        }
        vec4 _2981 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2691, _2692, 1.0), 0.0);
        float _2990 = exp2((_2979 * (-1.44269502162933349609375)) * (1.0 - _2981.w));
        float _2991 = log2(_2990);
        float _3007 = log2(_2711);
        _2804 = (exp2(_3007 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].x)) * _2981.x) / cbSceneParam._m0[78u].x)) + _2708;
        _2806 = (exp2(_3007 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].y)) * _2981.y) / cbSceneParam._m0[78u].y)) + _2709;
        _2808 = (exp2(_3007 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].z)) * _2981.z) / cbSceneParam._m0[78u].z)) + _2710;
        _2810 = _2990 * _2711;
    }
    else
    {
        _2804 = _2708;
        _2806 = _2709;
        _2808 = _2710;
        _2810 = _2711;
    }
    bool _3017;
    vec4 _2820;
    vec4 _2842;
    float _2844;
    float _2848;
    float _2849;
    float _2850;
    float _2851;
    bool _2861;
    for (;;)
    {
        _2820 = cbMatDynParam._m0[0u];
        float _2822 = roundEven(_2820.y);
        bool _2823 = _2822 == 3.0;
        float _2824 = log2(_2810);
        float _2831 = exp2(_2824 * cbSceneParam._m0[78u].x) * _2680;
        float _2832 = exp2(_2824 * cbSceneParam._m0[78u].y) * _2681;
        float _2833 = exp2(_2824 * cbSceneParam._m0[78u].z) * _2682;
        float _2840 = _746 + (-0.5);
        _2842 = cbMtdParam._m0[1u];
        _2844 = _2842.y * _2840;
        float _2847 = (_2822 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2848 = _2847 * (_2823 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2804)));
        _2849 = _2847 * (_2823 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2806)));
        _2850 = _2847 * (_2823 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2808)));
        _2851 = _2840 * 0.999000012874603271484375;
        _2861 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2861)
        {
            if ((cbInstanceData._m0[_814 + 7u].x + _2851) < 0.5)
            {
                _3017 = true;
                break;
            }
        }
        uint _2958 = _815 + uint(_2820.w);
        if ((cbInstanceData._m0[_2958].w < 1.0) && ((cbInstanceData._m0[_2958].w + _2851) < 0.5))
        {
            _3017 = true;
            break;
        }
        if ((_2844 + 1.0) < _2842.x)
        {
            _3017 = true;
            break;
        }
        _3017 = false;
        break;
    }
    float _3222;
    if (_3017)
    {
        discard_state = true;
        _3222 = 0.0;
    }
    else
    {
        _3222 = cbInstanceData._m0[_2683].w;
    }
    SV_Target.x = _2848;
    SV_Target.y = _2849;
    SV_Target.z = _2850;
    SV_Target.w = _3222;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2683].w;
    discard_exit();
}


