#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_snp_0_Texture2D_3;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_Enemy_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_Enemy_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_Enemy_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_snp_0_Texture2D_13;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1248;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(C_Enemy_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _264 = exp2(log2(_250.w * cbMtdParam._m0[24u].y) * cbMtdParam._m0[21u].y);
    float _265 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _266 = isnan(1.0) ? _265 : (isnan(_265) ? 1.0 : min(_265, 1.0));
    vec4 _280 = texture(sampler2D(C_Enemy_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _280.z;
    float _293 = exp2(log2(_284 * cbMtdParam._m0[21u].w) * cbMtdParam._m0[20u].y);
    float _294 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _295 = isnan(1.0) ? _294 : (isnan(_294) ? 1.0 : min(_294, 1.0));
    vec4 _308 = texture(sampler2D(C_Enemy_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _333 = texture(sampler2D(C_Enemy_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _344 = cbMtdParam._m0[9u].x * _333.x;
    float _345 = cbMtdParam._m0[9u].y * _333.y;
    float _346 = cbMtdParam._m0[9u].z * _333.z;
    float _353 = (((cbMtdParam._m0[10u].x * _308.x) - _344) * _295) + _344;
    float _354 = (((cbMtdParam._m0[10u].y * _308.y) - _345) * _295) + _345;
    float _355 = (((cbMtdParam._m0[10u].z * _308.z) - _346) * _295) + _346;
    float _362 = exp2(log2(_280.w) * cbMtdParam._m0[22u].y);
    vec4 _375 = texture(sampler2D(C_Enemy_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _394 = (((cbMtdParam._m0[12u].x * _375.x) - _353) * _362) + _353;
    float _395 = (((cbMtdParam._m0[12u].y * _375.y) - _354) * _362) + _354;
    float _396 = (((cbMtdParam._m0[12u].z * _375.z) - _355) * _362) + _355;
    vec4 _409 = texture(sampler2D(C_Enemy_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _433 = (_250.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _409.x) - _394) * _266) + _394);
    float _435 = (_250.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _409.y) - _395) * _266) + _395);
    float _437 = (_250.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _409.z) - _396) * _266) + _396);
    float _469 = cbMtdParam._m0[23u].z + texture(sampler2D(C_Enemy_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x;
    float _472 = ((texture(sampler2D(C_Enemy_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _469) * _295) + _469;
    float _492 = (((texture(sampler2D(C_Enemy_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _472) + cbMtdParam._m0[21u].z) * _362) + _472;
    float _512 = (((texture(sampler2D(C_Enemy_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x - _492) + cbMtdParam._m0[24u].z) * _266) + _492;
    vec4 _526 = texture(sampler2D(C_Enemy_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    vec4 _545 = texture(sampler2D(C_Enemy_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _551 = cbMtdParam._m0[20u].x + _545.z;
    float _554 = (((cbMtdParam._m0[21u].x + _526.z) - _551) * _295) + _551;
    vec4 _566 = texture(sampler2D(C_Enemy_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _575 = (((_566.z - _554) + cbMtdParam._m0[24u].x) * _362) + _554;
    float _581 = ((((_284 * 2.0) * _575) - _575) * cbMtdParam._m0[23u].y) + _575;
    vec4 _594 = texture(sampler2D(C_Enemy_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _603 = (((cbMtdParam._m0[22u].x + _594.z) - _581) * _266) + _581;
    float _614 = ((_526.x - _547) * _295) + _547;
    float _615 = ((_526.y - _548) * _295) + _548;
    float _620 = ((_566.x - _614) * _362) + _614;
    float _621 = ((_566.y - _615) * _362) + _615;
    float _630 = ((((_594.x - _620) * _266) + _620) * 2.0) + (-1.0);
    float _631 = ((((_594.y - _621) * _266) + _621) * 2.0) + (-1.0);
    float _632 = dot(vec2(_630, _631), vec2(_630, _631));
    float _3595 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _637 = sqrt(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))));
    float _640 = _630 + (cbMtdParam._m0[23u].w * ((_280.x * 2.0) + (-1.0)));
    float _641 = _631 + (cbMtdParam._m0[23u].w * ((_280.y * 2.0) + (-1.0)));
    float _644 = fma(_637, _221 * NORMAL.x, fma(_641, _228 * TANGENT.x, (_214 * _206) * _640));
    float _647 = fma(_637, _221 * NORMAL.y, fma(_641, _228 * TANGENT.y, (_214 * _207) * _640));
    float _650 = fma(_637, _221 * NORMAL.z, fma(_641, _228 * TANGENT.z, (_214 * _208) * _640));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _3606 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _658 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3628 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3639 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3650 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _662 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _678 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _729 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _719);
    float _730 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _719);
    float _731 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _719);
    float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
    float _736 = _729 * _735;
    float _737 = _730 * _735;
    float _738 = _731 * _735;
    float _744 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _745 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _747 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _749 = _747.w;
    float _769 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _772 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _775 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    vec4 _777 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _788 = (((_777.y - _658) + (_777.w * _658)) * cbMtdParam._m0[3u].x) + _658;
    uint _801 = uint(roundEven(NORMAL.w)) * 13u;
    uint _803 = (_801 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _809 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_803].x;
    float _810 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_803].y;
    float _811 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_803].z;
    float _3661 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    vec4 _815 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _820 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _831 = (((_820.x - _662) + (_820.w * _662)) * cbMtdParam._m0[3u].x) + _662;
    float _844 = (cbMtdParam._m0[3u].x * (((_812 * _749) - _812) + _815.x)) + _812;
    float _845 = (cbMtdParam._m0[3u].x * (((_813 * _749) - _813) + _815.y)) + _813;
    float _846 = (cbMtdParam._m0[3u].x * (((_814 * _749) - _814) + _815.z)) + _814;
    float _847 = 1.0 - _831;
    float _848 = _847 * _844;
    float _849 = _847 * _845;
    float _850 = _847 * _846;
    float _855 = (_844 + (-0.039999999105930328369140625)) * _831;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _831;
    float _857 = (_846 + (-0.039999999105930328369140625)) * _831;
    float _858 = _855 + 0.039999999105930328369140625;
    float _860 = _856 + 0.039999999105930328369140625;
    float _861 = _857 + 0.039999999105930328369140625;
    vec4 _870 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _744, cbSceneParam._m0[86u].y * _745));
    float _873 = _870.x * TEXCOORD_5.w;
    float _874 = dot(vec3(_655, _656, _657), vec3(_736, _737, _738));
    float _877 = _874 * 2.0;
    float _881 = (_877 * _655) - _736;
    float _882 = (_877 * _656) - _737;
    float _883 = (_877 * _657) - _738;
    float _887 = abs(dot(vec3(_736, _737, _738), vec3(_655, _656, _657)));
    float _3694 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _889 = sqrt(_788);
    float _902 = exp2((_889 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_889 * 3.0));
    float _908 = (1.0 - _902) * ((_889 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _909 = _902 * _889;
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1247;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _972 = fma(_945, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937));
        float _976 = fma(_945, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937));
        float _980 = fma(_945, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937));
        float _1005 = _937 + _655;
        float _1006 = _941 + _656;
        float _1007 = _945 + _657;
        float _1017 = fma(_1007, cbModelParam._m0[26u].z, fma(_1006, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1005)) - _972;
        float _1018 = fma(_1007, cbModelParam._m0[27u].z, fma(_1006, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1005)) - _976;
        float _1019 = fma(_1007, cbModelParam._m0[28u].z, fma(_1006, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1005)) - _980;
        float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
        float _1036 = ((_1023 * _1017) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_972 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1023 * _1018) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_976 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1023 * _1019) / cbModelParam._m0[34u].z) + ((((((_980 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        float _1075 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1041.x + (-0.5));
        float _1077 = _1075 * (_1041.y + (-0.5));
        float _1078 = _1075 * (_1041.z + (-0.5));
        float _1085 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1048.x + (-0.5));
        float _1087 = _1085 * (_1048.y + (-0.5));
        float _1088 = _1085 * (_1048.z + (-0.5));
        float _1095 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1055.x + (-0.5));
        float _1097 = _1095 * (_1055.y + (-0.5));
        float _1098 = _1095 * (_1055.z + (-0.5));
        float _1105 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1062.x + (-0.5));
        float _1107 = _1105 * (_1062.y + (-0.5));
        float _1108 = _1105 * (_1062.z + (-0.5));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = _1076 * 0.5;
        float _1113 = _1086 * 0.5;
        float _1114 = _1096 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1129 = (dot(vec3(_655, _656, _657), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1139 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3742 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1141 + 1.0))) + _1146) * _1109;
        float _1156 = _1077 * 0.5;
        float _1157 = _1087 * 0.5;
        float _1158 = _1097 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_655, _656, _657), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3775 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1183 + 1.0))) + _1188) * _1110;
        float _1198 = _1078 * 0.5;
        float _1199 = _1088 * 0.5;
        float _1200 = _1098 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_655, _656, _657), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3808 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1225 + 1.0))) + _1230) * _1111;
        _1247 = _1078;
        _1249 = _1077;
        _1250 = _1076;
        _1251 = _1088;
        _1252 = _1087;
        _1253 = _1086;
        _1254 = _1098;
        _1255 = _1097;
        _1256 = _1096;
        _1257 = _1111;
        _1258 = _1110;
        _1259 = _1109;
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
    }
    else
    {
        _1247 = _1248;
        _1249 = _1248;
        _1250 = _1248;
        _1251 = _1248;
        _1252 = _1248;
        _1253 = _1248;
        _1254 = _1248;
        _1255 = _1248;
        _1256 = _1248;
        _1257 = _1248;
        _1258 = _1248;
        _1259 = _1248;
        _1260 = 0.0;
        _1261 = 0.0;
        _1262 = 0.0;
    }
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1288 = fma(_945, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _937));
        float _1292 = fma(_945, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _937));
        float _1296 = fma(_945, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _937));
        float _1319 = _937 + _655;
        float _1320 = _941 + _656;
        float _1321 = _945 + _657;
        float _1331 = fma(_1321, cbModelParam._m0[30u].z, fma(_1320, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1319)) - _1288;
        float _1332 = fma(_1321, cbModelParam._m0[31u].z, fma(_1320, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1319)) - _1292;
        float _1333 = fma(_1321, cbModelParam._m0[32u].z, fma(_1320, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1319)) - _1296;
        float _1337 = inversesqrt(dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333)));
        float _1350 = ((_1337 * _1331) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1288 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1337 * _1332) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1292 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1337 * _1333) / cbModelParam._m0[35u].z) + ((((((_1296 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        float _1387 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1354.x + (-0.5));
        float _1389 = _1387 * (_1354.y + (-0.5));
        float _1390 = _1387 * (_1354.z + (-0.5));
        float _1397 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1361.x + (-0.5));
        float _1399 = _1397 * (_1361.y + (-0.5));
        float _1400 = _1397 * (_1361.z + (-0.5));
        float _1407 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1368.x + (-0.5));
        float _1409 = _1407 * (_1368.y + (-0.5));
        float _1410 = _1407 * (_1368.z + (-0.5));
        float _1417 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1375.x + (-0.5));
        float _1419 = _1417 * (_1375.y + (-0.5));
        float _1420 = _1417 * (_1375.z + (-0.5));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = _1388 * 0.5;
        float _1425 = _1398 * 0.5;
        float _1426 = _1408 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_655, _656, _657), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3871 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1451 + 1.0))) + _1456) * _1421;
        float _1466 = _1389 * 0.5;
        float _1467 = _1399 * 0.5;
        float _1468 = _1409 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_655, _656, _657), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _3904 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1493 + 1.0))) + _1498) * _1422;
        float _1508 = _1390 * 0.5;
        float _1509 = _1400 * 0.5;
        float _1510 = _1410 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_655, _656, _657), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _3937 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1535 + 1.0))) + _1540) * _1423;
        _1557 = _1390;
        _1558 = _1389;
        _1559 = _1388;
        _1560 = _1400;
        _1561 = _1399;
        _1562 = _1398;
        _1563 = _1410;
        _1564 = _1409;
        _1565 = _1408;
        _1566 = _1423;
        _1567 = _1422;
        _1568 = _1421;
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
    }
    else
    {
        _1557 = _1248;
        _1558 = _1248;
        _1559 = _1248;
        _1560 = _1248;
        _1561 = _1248;
        _1562 = _1248;
        _1563 = _1248;
        _1564 = _1248;
        _1565 = _1248;
        _1566 = _1248;
        _1567 = _1248;
        _1568 = _1248;
        _1569 = 0.0;
        _1570 = 0.0;
        _1571 = 0.0;
    }
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1260)) + _1260;
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1261)) + _1261;
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1262)) + _1262;
    float _1604 = fma(_1583, cbSceneParam._m0[89u].z, fma(_1582, cbSceneParam._m0[89u].y, _1581 * cbSceneParam._m0[89u].x));
    float _1607 = fma(_1583, cbSceneParam._m0[90u].z, fma(_1582, cbSceneParam._m0[90u].y, _1581 * cbSceneParam._m0[90u].x));
    float _1610 = fma(_1583, cbSceneParam._m0[91u].z, fma(_1582, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1581));
    float _1625 = _881 * 0.5;
    float _1626 = _882 * 0.5;
    float _1627 = _883 * 0.5;
    float _1628 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1631 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1634 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1668;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1641 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1247, _1251, _1254, _1257));
        float _1645 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1649 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1250, _1253, _1256, _1259));
        float _1656 = dot(vec4(cbModelParam._m0[39u]), vec4(_1625, _1626, _1627, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1679;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1670 = dot(vec4(cbModelParam._m0[40u]), vec4(_1625, _1626, _1627, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1683 = (_1679 * cbModelParam._m0[1u].x) + (_1668 * (1.0 - cbModelParam._m0[1u].x));
    float _1693 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _788);
    float _1694 = isnan(_1693) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1693 : min(cbModelParam._m0[25u].z, _1693));
    float _1774;
    float _1776;
    float _1778;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1741 = fma(_945, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937)) + cbModelParam._m0[13u].w;
        float _1745 = fma(_945, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937)) + cbModelParam._m0[14u].w;
        float _1749 = fma(_945, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937)) + cbModelParam._m0[15u].w;
        float _1752 = fma(_883, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881));
        float _1755 = fma(_883, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881));
        float _1758 = fma(_883, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881));
        float _1786;
        if (_1752 > 0.0)
        {
            _1786 = abs((1.0 - _1741) / _1752);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1741 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1786 = frontier_phi_14_12_ladder;
        }
        float _1989;
        if (_1755 > 0.0)
        {
            _1989 = abs((1.0 - _1745) / _1755);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1745 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1989 = frontier_phi_23_19_ladder;
        }
        float _2243;
        if (_1758 > 0.0)
        {
            _2243 = abs((1.0 - _1749) / _1758);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1749 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2243 = frontier_phi_35_30_ladder;
        }
        float _2245 = isnan(_1989) ? _1786 : (isnan(_1786) ? _1989 : min(_1786, _1989));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1752) + _1741;
        float _2251 = (_2246 * _1755) + _1745;
        float _2252 = (_2246 * _1758) + _1749;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2253;
        float _2257 = _2253 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 > _2257) || ((_2251 < _2255) || ((_2250 < _2255) || (_2250 > _2257))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2380 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2252, cbModelParam._m0[9u].z, fma(_2251, cbModelParam._m0[9u].y, _2250 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2252, cbModelParam._m0[10u].z, fma(_2251, cbModelParam._m0[10u].y, _2250 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2252, cbModelParam._m0[11u].z, fma(_2251, cbModelParam._m0[11u].y, _2250 * cbModelParam._m0[11u].x))), _1694);
            frontier_phi_13_35_ladder = _2380.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2380.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2380.x * cbModelParam._m0[1u].y;
        }
        _1774 = frontier_phi_13_35_ladder_2;
        _1776 = frontier_phi_13_35_ladder_1;
        _1778 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_881, _882, _883), _1694);
        _1774 = _1762.x * cbModelParam._m0[1u].y;
        _1776 = _1762.y * cbModelParam._m0[1u].y;
        _1778 = _1762.z * cbModelParam._m0[1u].y;
    }
    float _1782 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _788);
    float _1783 = isnan(_1782) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1782 : min(cbModelParam._m0[25u].w, _1782));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1837 = fma(_945, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937)) + cbModelParam._m0[21u].w;
        float _1841 = fma(_945, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937)) + cbModelParam._m0[22u].w;
        float _1845 = fma(_945, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937)) + cbModelParam._m0[23u].w;
        float _1848 = fma(_883, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881));
        float _1851 = fma(_883, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881));
        float _1854 = fma(_883, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881));
        float _1994;
        if (_1848 > 0.0)
        {
            _1994 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1994 = frontier_phi_25_21_ladder;
        }
        float _2270;
        if (_1851 > 0.0)
        {
            _2270 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2270 = frontier_phi_37_32_ladder;
        }
        float _2483;
        if (_1854 > 0.0)
        {
            _2483 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2483 = frontier_phi_46_43_ladder;
        }
        float _2485 = isnan(_2270) ? _1994 : (isnan(_1994) ? _2270 : min(_1994, _2270));
        float _2486 = isnan(_2483) ? _2485 : (isnan(_2485) ? _2483 : min(_2485, _2483));
        float _2490 = (_2486 * _1848) + _1837;
        float _2491 = (_2486 * _1851) + _1841;
        float _2492 = (_2486 * _1854) + _1845;
        float _2493 = _2486 * 9.9999997473787516355514526367188e-05;
        float _2494 = (-1.0) - _2493;
        float _2496 = _2493 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2492 > _2496) || ((_2492 < _2494) || ((_2491 > _2496) || ((_2491 < _2494) || ((_2490 < _2494) || (_2490 > _2496))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2691 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2492, cbModelParam._m0[17u].z, fma(_2491, cbModelParam._m0[17u].y, _2490 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2492, cbModelParam._m0[18u].z, fma(_2491, cbModelParam._m0[18u].y, _2490 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2492, cbModelParam._m0[19u].z, fma(_2491, cbModelParam._m0[19u].y, _2490 * cbModelParam._m0[19u].x))), _1783);
            frontier_phi_22_46_ladder = _2691.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2691.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2691.x * cbModelParam._m0[1u].z;
        }
        _1873 = frontier_phi_22_46_ladder_2;
        _1875 = frontier_phi_22_46_ladder_1;
        _1877 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1857 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_881, _882, _883), _1783);
        _1873 = _1857.x * cbModelParam._m0[1u].z;
        _1875 = _1857.y * cbModelParam._m0[1u].z;
        _1877 = _1857.z * cbModelParam._m0[1u].z;
    }
    float _1890 = (((_908 * _858) + _909) * _873) * ((cbModelParam._m0[1u].w * (_1873 - _1774)) + _1774);
    float _1892 = (((_908 * _860) + _909) * _873) * ((cbModelParam._m0[1u].w * (_1875 - _1776)) + _1776);
    float _1894 = (((_908 * _861) + _909) * _873) * ((cbModelParam._m0[1u].w * (_1877 - _1778)) + _1778);
    float _1897 = fma(_1894, cbSceneParam._m0[89u].z, fma(_1892, cbSceneParam._m0[89u].y, _1890 * cbSceneParam._m0[89u].x));
    float _1900 = fma(_1894, cbSceneParam._m0[90u].z, fma(_1892, cbSceneParam._m0[90u].y, _1890 * cbSceneParam._m0[90u].x));
    float _1903 = fma(_1894, cbSceneParam._m0[91u].z, fma(_1892, cbSceneParam._m0[91u].y, _1890 * cbSceneParam._m0[91u].x));
    uvec4 _1913 = floatBitsToUint(cbInstanceData._m0[_801 + 5u]);
    uint _1915 = _1913.x * 14u;
    uint _1916 = _1915 + 13u;
    float _1923 = _873 + (-1.0);
    float _1928 = (cbLight._m0[_1916].x * _1923) + 1.0;
    float _1929 = (cbLight._m0[_1916].y * _1923) + 1.0;
    float _1930 = (cbLight._m0[_1916].z * _1923) + 1.0;
    float _1931 = (cbLight._m0[_1916].w * _1923) + 1.0;
    uint _1932 = _1915 + 5u;
    float _1938 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
    uint _1942 = _1915 + 4u;
    float _1948 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
    uint _1952 = _1915 | 1u;
    float _1963 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_655, _656, _657));
    float _1966 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_655, _656, _657));
    float _4073 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _4084 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1971 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _1973 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * 0.3183098733425140380859375;
    float _1980 = ((cbLight._m0[_1932].x * _1938) * _1973) + ((cbLight._m0[_1942].x * _1948) * _1971);
    float _1981 = ((_1938 * cbLight._m0[_1932].y) * _1973) + ((_1948 * cbLight._m0[_1942].y) * _1971);
    float _1982 = ((_1938 * cbLight._m0[_1932].z) * _1973) + ((_1948 * cbLight._m0[_1942].z) * _1971);
    uvec4 _1986 = floatBitsToUint(cbLight._m0[_1915 + 12u]);
    bool _1988 = _1986.x == 0u;
    float _1999;
    float _2001;
    float _2003;
    if (_1988)
    {
        _1999 = _1980;
        _2001 = _1981;
        _2003 = _1982;
    }
    else
    {
        uint _2007 = _1915 + 6u;
        float _2023 = (dot(vec3(cbLight._m0[_1915 + 2u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2024 = _2023 * _2023;
        float _4095 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2025 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2026 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
        _1999 = (((cbLight._m0[_2007].x * 0.3183098733425140380859375) * _2025) * _2026) + _1980;
        _2001 = (((cbLight._m0[_2007].y * 0.3183098733425140380859375) * _2025) * _2026) + _1981;
        _2003 = (((cbLight._m0[_2007].z * 0.3183098733425140380859375) * _2025) * _2026) + _1982;
    }
    bool _2006 = _1986.y == 0u;
    float _2044;
    float _2046;
    float _2048;
    if (_2006)
    {
        _2044 = _1999;
        _2046 = _2001;
        _2048 = _2003;
    }
    else
    {
        uint _2214 = _1915 + 7u;
        float _2230 = (dot(vec3(cbLight._m0[_1915 + 3u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2231 = _2230 * _2230;
        float _4111 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2232 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2233 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
        _2044 = (((cbLight._m0[_2214].x * 0.3183098733425140380859375) * _2232) * _2233) + _1999;
        _2046 = (((cbLight._m0[_2214].y * 0.3183098733425140380859375) * _2232) * _2233) + _2001;
        _2048 = (((cbLight._m0[_2214].z * 0.3183098733425140380859375) * _2232) * _2233) + _2003;
    }
    uint _2051 = _1915 + 8u;
    float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1915].w)) * _788) * 0.949999988079071044921875);
    float _2065 = _2064 * _2064;
    float _2066 = cbLight._m0[_1915].x + _736;
    float _2067 = cbLight._m0[_1915].y + _737;
    float _2068 = cbLight._m0[_1915].z + _738;
    float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
    float _2073 = _2072 * _2066;
    float _2074 = _2072 * _2067;
    float _2075 = _2072 * _2068;
    float _2076 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1915].xyz));
    float _4127 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _2080 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2081 = dot(vec3(_655, _656, _657), vec3(_2073, _2074, _2075));
    float _4149 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2085 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_2073, _2074, _2075));
    float _4160 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2089 = _2065 * _2065;
    float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
    float _2101 = exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0);
    float _2102 = 0.959999978542327880859375 - _855;
    float _2104 = 0.959999978542327880859375 - _856;
    float _2105 = 0.959999978542327880859375 - _857;
    float _2112 = 1.0 - _2065;
    float _2123 = (0.5 / (((_2080 * ((_2079 * _2112) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2112) + _2065) * _2079))) * _2079;
    float _4171 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2125 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
    uint _2136 = _1915 + 9u;
    float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1952].w)) * _788) * 0.949999988079071044921875);
    float _2148 = _2147 * _2147;
    float _2149 = cbLight._m0[_1952].x + _736;
    float _2150 = cbLight._m0[_1952].y + _737;
    float _2151 = cbLight._m0[_1952].z + _738;
    float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
    float _2156 = _2155 * _2149;
    float _2157 = _2155 * _2150;
    float _2158 = _2155 * _2151;
    float _2159 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1952].xyz));
    float _4182 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2163 = dot(vec3(_655, _656, _657), vec3(_2156, _2157, _2158));
    float _4193 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2167 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_2156, _2157, _2158));
    float _4204 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2171 = _2148 * _2148;
    float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
    float _2182 = exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0);
    float _2189 = 1.0 - _2148;
    float _2199 = (0.5 / (((_2080 * ((_2162 * _2189) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2189) + _2148) * _2162))) * _2162;
    float _4215 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2201 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
    float _2211 = (((((_2182 * _2102) + _858) * cbLight._m0[_2136].x) * _2201) * _1938) + (((((_2101 * _2102) + _858) * cbLight._m0[_2051].x) * _2125) * _1948);
    float _2212 = (((((_2182 * _2104) + _860) * cbLight._m0[_2136].y) * _2201) * _1938) + (((((_2101 * _2104) + _860) * cbLight._m0[_2051].y) * _2125) * _1948);
    float _2213 = (((((_2182 * _2105) + _861) * cbLight._m0[_2136].z) * _2201) * _1938) + (((((_2101 * _2105) + _861) * cbLight._m0[_2051].z) * _2125) * _1948);
    float _2275;
    float _2277;
    float _2279;
    if (_1988)
    {
        _2275 = _2211;
        _2277 = _2212;
        _2279 = _2213;
    }
    else
    {
        uint _2281 = _1915 + 2u;
        uint _2285 = _1915 + 10u;
        float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _788) * 0.949999988079071044921875);
        float _2300 = _2299 * _2299;
        float _2301 = cbLight._m0[_2281].x + _736;
        float _2302 = cbLight._m0[_2281].y + _737;
        float _2303 = cbLight._m0[_2281].z + _738;
        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
        float _2308 = _2307 * _2301;
        float _2309 = _2307 * _2302;
        float _2310 = _2307 * _2303;
        float _2311 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2281].xyz));
        float _4226 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2315 = dot(vec3(_655, _656, _657), vec3(_2308, _2309, _2310));
        float _4237 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2319 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2308, _2309, _2310));
        float _4248 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2323 = _2300 * _2300;
        float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
        float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0);
        float _2341 = 1.0 - _2300;
        float _2351 = (0.5 / (((_2080 * ((_2314 * _2341) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2341) + _2300) * _2314))) * _2314;
        float _4259 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2353 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
        float _2354 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
        _2275 = (((((_2334 * _2102) + _858) * cbLight._m0[_2285].x) * _2353) * _2354) + _2211;
        _2277 = (((((_2334 * _2104) + _860) * cbLight._m0[_2285].y) * _2353) * _2354) + _2212;
        _2279 = (((((_2334 * _2105) + _861) * cbLight._m0[_2285].z) * _2353) * _2354) + _2213;
    }
    float _2389;
    float _2391;
    float _2393;
    if (_2006)
    {
        _2389 = _2275;
        _2391 = _2277;
        _2393 = _2279;
    }
    else
    {
        uint _2400 = _1915 + 3u;
        uint _2404 = _1915 + 11u;
        float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _788) * 0.949999988079071044921875);
        float _2419 = _2418 * _2418;
        float _2420 = cbLight._m0[_2400].x + _736;
        float _2421 = cbLight._m0[_2400].y + _737;
        float _2422 = cbLight._m0[_2400].z + _738;
        float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
        float _2427 = _2426 * _2420;
        float _2428 = _2426 * _2421;
        float _2429 = _2426 * _2422;
        float _2430 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2400].xyz));
        float _4275 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2434 = dot(vec3(_655, _656, _657), vec3(_2427, _2428, _2429));
        float _4286 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2438 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2427, _2428, _2429));
        float _4297 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2442 = _2419 * _2419;
        float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
        float _2453 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
        float _2460 = 1.0 - _2419;
        float _2470 = (0.5 / (((_2080 * ((_2433 * _2460) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2460) + _2419) * _2433))) * _2433;
        float _4308 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2472 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
        float _2473 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
        _2389 = (((((_2453 * _2102) + _858) * cbLight._m0[_2404].x) * _2472) * _2473) + _2275;
        _2391 = (((((_2453 * _2104) + _860) * cbLight._m0[_2404].y) * _2472) * _2473) + _2277;
        _2393 = (((((_2453 * _2105) + _861) * cbLight._m0[_2404].z) * _2472) * _2473) + _2279;
    }
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    if (_1913.y == 0u)
    {
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2549 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2548;
        float _2550 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2548;
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2548;
        uvec4 _2563 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2564 = _2563.x;
        uint _2575 = uint((float(_2563.y) * floor(float(uint(cbSceneParam._m0[85u].y * _745) / _2564))) + floor(float(uint(cbSceneParam._m0[85u].x * _744) / _2564)));
        float _2585 = (log2(_2551 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2586 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        uint _2589 = uint(isnan(14.0) ? _2586 : (isnan(_2586) ? 14.0 : min(_2586, 14.0)));
        uvec4 _2594 = texelFetch(g_lightClusterGridBuffer, int(((_2589 << 2u) + (_2575 << 6u)) >> 2u));
        uint _2595 = _2594.x;
        uint _2596 = _2563.z;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        if (((((1u << ((_2596 >> 4u) & 15u)) + 4294967295u) & _2595) == 0u) || ((_2596 & 240u) == 0u))
        {
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
        }
        else
        {
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2705;
            float _2707;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            uint _2847 = 0u;
            uint _2856;
            bool _2857;
            for (;;)
            {
                _2856 = texelFetch(g_lightClassification, int((((_2589 << 5u) + (_2575 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                _2857 = _2856 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2857)
                {
                    frontier_phi_61_pred = _2841;
                    frontier_phi_61_pred_1 = _2846;
                    frontier_phi_61_pred_2 = _2845;
                    frontier_phi_61_pred_3 = _2844;
                    frontier_phi_61_pred_4 = _2843;
                    frontier_phi_61_pred_5 = _2842;
                }
                else
                {
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    uint _2971;
                    _2965 = _2841;
                    _2966 = _2842;
                    _2967 = _2843;
                    _2968 = _2844;
                    _2969 = _2845;
                    _2970 = _2846;
                    _2971 = _2856;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    for (;;)
                    {
                        uint _2975 = uint(findLSB(_2971)) + (_2847 << 5u);
                        uint _2972 = (_2971 + 4294967295u) & _2971;
                        uint _2977 = _2975 * 48u;
                        vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 3u)).x));
                        uint _2997 = (_2975 * 48u) + 4u;
                        vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2997)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 3u)).x));
                        uint _3016 = (_2975 * 48u) + 8u;
                        vec3 _3027 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x));
                        float _3031 = _2991.x - _2549;
                        float _3032 = _2991.y - _2550;
                        float _3033 = _2991.z - _2551;
                        float _3034 = dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033));
                        float _3037 = inversesqrt(_3034);
                        float _3038 = _3037 * _3031;
                        float _3039 = _3037 * _3032;
                        float _3040 = _3037 * _3033;
                        float _3041 = dot(vec3(_769, _772, _775), vec3(_3038, _3039, _3040));
                        float _3046 = 1.0 - (_3034 * _2991.w);
                        float _4334 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3047 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3048 = sqrt(_3034) * _3010.w;
                        float _3051 = 1.39999997615814208984375 / (_3048 + 1.39999997615814208984375);
                        float _3052 = _3051 * _3051;
                        float _3055 = ((1.0 - _3052) * _3041) + _3052;
                        float _3058 = _3048 * _3048;
                        float _3062 = ((isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0))) * _3047) / ((_3058 * 0.699999988079071044921875) + 1.0);
                        float _3066 = (-0.0) - _2549;
                        float _3067 = (-0.0) - _2550;
                        float _3068 = (-0.0) - _2551;
                        float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
                        float _3073 = _3072 * _3066;
                        float _3074 = _3072 * _3067;
                        float _3075 = _3072 * _3068;
                        float _3083 = exp2(log2(1.0 / ((_3058 * 3.5) + 5.0)) * 0.25);
                        float _3084 = 1.0 - _889;
                        float _3091 = sqrt(1.0 - ((1.0 - (_3084 * _3084)) * (1.0 - (_3083 * _3083))));
                        float _3092 = _3091 * _3091;
                        float _3093 = _3092 * _3092;
                        float _3094 = _3073 + _3038;
                        float _3095 = _3074 + _3039;
                        float _3096 = _3075 + _3040;
                        float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                        float _3104 = dot(vec3(_769, _772, _775), vec3(_3073, _3074, _3075));
                        float _4350 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3107 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3108 = dot(vec3(_769, _772, _775), vec3(_3100 * _3094, _3100 * _3095, _3100 * _3096));
                        float _4361 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3111 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3115 = ((_3111 * _3111) * (_3093 + (-1.0))) + 1.0;
                        float _3116 = _3051 * _3092;
                        float _3117 = _3116 * _3116;
                        float _3120 = ((1.0 - _3117) * _3041) + _3117;
                        float _4372 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3121 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3122 = 1.0 - _3092;
                        float _3132 = (0.5 / (((_3121 * ((_3107 * _3122) + _3092)) + 9.9999999392252902907785028219223e-09) + (((_3121 * _3122) + _3092) * _3107))) * _3121;
                        float _4383 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3143 = (((_3093 * 3.1415927410125732421875) * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) / ((_3115 * _3115) * ((_3058 * 2.1991131305694580078125) + 3.141590118408203125))) * _3047;
                        _2900 = (_3062 * _3010.x) + _2968;
                        _2901 = (_3062 * _3010.y) + _2969;
                        _2902 = (_3062 * _3010.z) + _2970;
                        _2897 = (_3143 * _3027.x) + _2965;
                        _2898 = (_3143 * _3027.y) + _2966;
                        _2899 = (_3143 * _3027.z) + _2967;
                        if (_2972 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2965 = _2897;
                            _2966 = _2898;
                            _2967 = _2899;
                            _2968 = _2900;
                            _2969 = _2901;
                            _2970 = _2902;
                            _2971 = _2972;
                        }
                    }
                    frontier_phi_61_pred = _2897;
                    frontier_phi_61_pred_1 = _2902;
                    frontier_phi_61_pred_2 = _2901;
                    frontier_phi_61_pred_3 = _2900;
                    frontier_phi_61_pred_4 = _2899;
                    frontier_phi_61_pred_5 = _2898;
                }
                _2697 = frontier_phi_61_pred;
                _2707 = frontier_phi_61_pred_1;
                _2705 = frontier_phi_61_pred_2;
                _2703 = frontier_phi_61_pred_3;
                _2701 = frontier_phi_61_pred_4;
                _2699 = frontier_phi_61_pred_5;
                uint _2848 = _2847 + 1u;
                if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2841 = _2697;
                    _2842 = _2699;
                    _2843 = _2701;
                    _2844 = _2703;
                    _2845 = _2705;
                    _2846 = _2707;
                    _2847 = _2848;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
        }
        uvec4 _2710 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2711 = _2710.z;
        uint _2713 = (_2711 >> 8u) & 15u;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        if (((4294967295u << _2713) & _2595) == 0u)
        {
            _2809 = _2696;
            _2811 = _2698;
            _2813 = _2700;
            _2815 = _2702;
            _2817 = _2704;
            _2819 = _2706;
        }
        else
        {
            float _2834 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
            float _2835 = _2834 * _2549;
            float _2836 = _2834 * _2550;
            float _2837 = _2834 * _2551;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2713 < ((_2711 >> 12u) & 15u))
            {
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2948 = _2696;
                float _2949 = _2698;
                float _2950 = _2700;
                float _2951 = _2702;
                float _2952 = _2704;
                float _2953 = _2706;
                uint _2954 = _2713;
                uint _2963;
                bool _2964;
                for (;;)
                {
                    _2963 = texelFetch(g_lightClassification, int((((_2589 << 5u) + (_2575 << 9u)) + (_2954 << 2u)) >> 2u)).x;
                    _2964 = _2963 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2964)
                    {
                        frontier_phi_67_pred = _2951;
                        frontier_phi_67_pred_1 = _2952;
                        frontier_phi_67_pred_2 = _2953;
                        frontier_phi_67_pred_3 = _2950;
                        frontier_phi_67_pred_4 = _2949;
                        frontier_phi_67_pred_5 = _2948;
                    }
                    else
                    {
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3161 = _2948;
                        float _3162 = _2949;
                        float _3163 = _2950;
                        float _3164 = _2951;
                        float _3165 = _2952;
                        float _3166 = _2953;
                        uint _3167 = _2963;
                        uint _3168;
                        vec4 _3193;
                        float _3194;
                        vec4 _3209;
                        vec3 _3221;
                        vec4 _3236;
                        vec4 _3251;
                        float _3297;
                        bool _3298;
                        for (;;)
                        {
                            uint _3178 = ((_2954 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3167));
                            _3168 = (_3167 + 4294967295u) & _3167;
                            uint _3180 = _3178 * 40u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            _3194 = _3193.w;
                            uint _3196 = (_3178 * 40u) + 4u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3211 = (_3178 * 40u) + 8u;
                            _3221 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x));
                            uint _3223 = (_3178 * 40u) + 16u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3238 = (_3178 * 40u) + 20u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3178 * 40u) + 24u;
                            vec4 _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3272 = (_3178 * 40u) + 28u;
                            vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3297 = fma(_2551, _3285.z, fma(_2550, _3285.y, _3285.x * _2549)) + _3285.w;
                            _3298 = !((fma(_2551, _3266.z, fma(_2550, _3266.y, _3266.x * _2549)) + _3266.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3298)
                            {
                                float _3325 = _3193.x - _2549;
                                float _3326 = _3193.y - _2550;
                                float _3327 = _3193.z - _2551;
                                float _3328 = dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327));
                                float _3331 = inversesqrt(_3328);
                                float _3332 = _3331 * _3325;
                                float _3333 = _3331 * _3326;
                                float _3334 = _3331 * _3327;
                                float _3338 = 1.0 - (_3328 / (_3194 * _3194));
                                float _4394 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3343 = sqrt(_3328) * _3209.w;
                                float _3345 = 1.39999997615814208984375 / (_3343 + 1.39999997615814208984375);
                                float _3346 = _3345 * _3345;
                                float _3349 = ((1.0 - _3346) * dot(vec3(_3332, _3333, _3334), vec3(_769, _772, _775))) + _3346;
                                float _3352 = _3343 * _3343;
                                float _3356 = (fma(_2551, _3236.z, fma(_2550, _3236.y, _3236.x * _2549)) + _3236.w) / _3297;
                                float _3357 = (fma(_2551, _3251.z, fma(_2550, _3251.y, _3251.x * _2549)) + _3251.w) / _3297;
                                float _3361 = 1.0 - dot(vec2(_3356, _3357), vec2(_3356, _3357));
                                float _4410 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3363 = _3362 * (((isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0))) * _3339) / ((_3352 * 0.699999988079071044921875) + 1.0));
                                float _3375 = exp2(log2(1.0 / ((_3352 * 3.5) + 5.0)) * 0.25);
                                float _3376 = 1.0 - _889;
                                float _3383 = sqrt(1.0 - ((1.0 - (_3376 * _3376)) * (1.0 - (_3375 * _3375))));
                                float _3384 = _3383 * _3383;
                                float _3385 = _3384 * _3384;
                                float _3386 = _3332 - _2835;
                                float _3387 = _3333 - _2836;
                                float _3388 = _3334 - _2837;
                                float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                                float _3396 = dot(vec3(_769, _772, _775), vec3((-0.0) - _2835, (-0.0) - _2836, (-0.0) - _2837));
                                float _4421 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3399 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3400 = dot(vec3(_769, _772, _775), vec3(_3392 * _3386, _3392 * _3387, _3392 * _3388));
                                float _4432 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3403 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3407 = ((_3403 * _3403) * (_3385 + (-1.0))) + 1.0;
                                float _3408 = _3345 * _3384;
                                float _3409 = _3408 * _3408;
                                float _3415 = ((1.0 - _3409) * dot(vec3(_769, _772, _775), vec3(_3332, _3333, _3334))) + _3409;
                                float _4443 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3417 = 1.0 - _3384;
                                float _3427 = (0.5 / (((_3416 * ((_3399 * _3417) + _3384)) + 9.9999999392252902907785028219223e-09) + (((_3416 * _3417) + _3384) * _3399))) * _3416;
                                float _4454 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3437 = (_3362 * _3339) * (((_3385 * 3.1415927410125732421875) * (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) / ((_3407 * _3407) * ((_3352 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3437 * _3221.x;
                                frontier_phi_73_pred_1 = _3437 * _3221.y;
                                frontier_phi_73_pred_2 = _3363 * _3209.z;
                                frontier_phi_73_pred_3 = _3363 * _3209.y;
                                frontier_phi_73_pred_4 = _3363 * _3209.x;
                                frontier_phi_73_pred_5 = _3437 * _3221.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3441 = frontier_phi_73_pred;
                            _3442 = frontier_phi_73_pred_1;
                            _3446 = frontier_phi_73_pred_2;
                            _3445 = frontier_phi_73_pred_3;
                            _3444 = frontier_phi_73_pred_4;
                            _3443 = frontier_phi_73_pred_5;
                            _3151 = _3444 + _3164;
                            _3152 = _3445 + _3165;
                            _3153 = _3446 + _3166;
                            _3148 = _3441 + _3161;
                            _3149 = _3442 + _3162;
                            _3150 = _3443 + _3163;
                            if (_3168 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3168;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3151;
                        frontier_phi_67_pred_1 = _3152;
                        frontier_phi_67_pred_2 = _3153;
                        frontier_phi_67_pred_3 = _3150;
                        frontier_phi_67_pred_4 = _3149;
                        frontier_phi_67_pred_5 = _3148;
                    }
                    _2816 = frontier_phi_67_pred;
                    _2818 = frontier_phi_67_pred_1;
                    _2820 = frontier_phi_67_pred_2;
                    _2814 = frontier_phi_67_pred_3;
                    _2812 = frontier_phi_67_pred_4;
                    _2810 = frontier_phi_67_pred_5;
                    uint _2955 = _2954 + 1u;
                    if (_2955 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2948 = _2810;
                        _2949 = _2812;
                        _2950 = _2814;
                        _2951 = _2816;
                        _2952 = _2818;
                        _2953 = _2820;
                        _2954 = _2955;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2818;
                frontier_phi_55_56_ladder_1 = _2820;
                frontier_phi_55_56_ladder_2 = _2816;
                frontier_phi_55_56_ladder_3 = _2814;
                frontier_phi_55_56_ladder_4 = _2812;
                frontier_phi_55_56_ladder_5 = _2810;
            }
            else
            {
                frontier_phi_55_56_ladder = _2704;
                frontier_phi_55_56_ladder_1 = _2706;
                frontier_phi_55_56_ladder_2 = _2702;
                frontier_phi_55_56_ladder_3 = _2700;
                frontier_phi_55_56_ladder_4 = _2698;
                frontier_phi_55_56_ladder_5 = _2696;
            }
            _2809 = frontier_phi_55_56_ladder_5;
            _2811 = frontier_phi_55_56_ladder_4;
            _2813 = frontier_phi_55_56_ladder_3;
            _2815 = frontier_phi_55_56_ladder_2;
            _2817 = frontier_phi_55_56_ladder;
            _2819 = frontier_phi_55_56_ladder_1;
        }
        float _2824 = isnan(1.0) ? _873 : (isnan(_873) ? 1.0 : min(_873, 1.0));
        _2608 = (_2824 * _2815) + _2044;
        _2610 = (_2824 * _2817) + _2046;
        _2612 = (_2824 * _2819) + _2048;
        _2614 = ((_2809 * _858) * _2824) + _2389;
        _2616 = ((_2811 * _860) * _2824) + _2391;
        _2618 = ((_2813 * _861) * _2824) + _2393;
    }
    else
    {
        _2608 = _2044;
        _2610 = _2046;
        _2612 = _2048;
        _2614 = _2389;
        _2616 = _2391;
        _2618 = _2393;
    }
    float _4470 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4481 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4492 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    uint _2638 = _801 + 6u;
    float _2646 = _744 / cbSceneParam._m0[86u].x;
    float _2647 = _745 / cbSceneParam._m0[86u].y;
    vec4 _2661 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, (log2((isnan(cbSceneParam._m0[77u].w) ? _678 : (isnan(_678) ? cbSceneParam._m0[77u].w : min(_678, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2663 = _2661.x;
    float _2664 = _2661.y;
    float _2665 = _2661.z;
    float _2666 = _2661.w;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    if (_678 > cbSceneParam._m0[78u].w)
    {
        float _2721 = isnan(_678) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _678 : min(cbSceneParam._m0[80u].w, _678));
        float _2722 = _2721 / _678;
        float _2733 = _2722 * _729;
        float _2734 = _730 * _2722;
        float _2735 = (-0.0) - _2734;
        float _2737 = _2722 * _731;
        float _2739 = (cbSceneParam._m0[77u].w * _2735) / _2721;
        float _2740 = _2739 + cbSceneParam._m0[79u].w;
        float _2741 = cbSceneParam._m0[79u].w - _2734;
        float _2747 = sqrt(((_2733 * _2733) + (_2734 * _2734)) + (_2737 * _2737));
        float _2750 = (1.0 - (cbSceneParam._m0[77u].w / _2721)) * _2747;
        float _2755 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2757 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2910;
        if (abs((_2735 - _2739) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2910 = ((((_2740 > 0.0) ? exp2(_2755 * _2740) : (2.0 - exp2(_2757 * _2740))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2750;
        }
        else
        {
            float _2870 = 1.0 / cbSceneParam._m0[80u].x;
            float _2871 = isnan(_2741) ? _2740 : (isnan(_2740) ? _2741 : max(_2740, _2741));
            float _2872 = isnan(_2741) ? _2740 : (isnan(_2740) ? _2741 : min(_2740, _2741));
            float _2881 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : min(_2871, 0.0));
            float _2882 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : min(_2872, 0.0));
            _2910 = ((abs(_2747 / _2735) * cbSceneParam._m0[80u].y) * ((((_2881 - _2882) * 2.0) - ((exp2(_2755 * (isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0)))) - exp2(_2755 * (isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0))))) * _2870)) - ((exp2(_2757 * _2881) - exp2(_2757 * _2882)) * _2870))) + (_2750 * cbSceneParam._m0[80u].z);
        }
        vec4 _2912 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, 1.0), 0.0);
        float _2921 = exp2((_2910 * (-1.44269502162933349609375)) * (1.0 - _2912.w));
        float _2922 = log2(_2921);
        float _2938 = log2(_2666);
        _2759 = (exp2(_2938 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].x)) * _2912.x) / cbSceneParam._m0[78u].x)) + _2663;
        _2761 = (exp2(_2938 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].y)) * _2912.y) / cbSceneParam._m0[78u].y)) + _2664;
        _2763 = (exp2(_2938 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].z)) * _2912.z) / cbSceneParam._m0[78u].z)) + _2665;
        _2765 = _2921 * _2666;
    }
    else
    {
        _2759 = _2663;
        _2761 = _2664;
        _2763 = _2665;
        _2765 = _2666;
    }
    float _2777 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2778 = _2777 == 3.0;
    float _2779 = log2(_2765);
    float _2786 = exp2(_2779 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2608 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _873))) + ((_2614 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1683)) * cbPerFrame._m0[3u].x));
    float _2787 = exp2(_2779 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2610 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _873))) + ((_2616 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1683)) * cbPerFrame._m0[3u].x));
    float _2788 = exp2(_2779 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2612 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _873))) + ((_2618 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1683)) * cbPerFrame._m0[3u].x));
    float _2797 = (_2777 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2797 * (_2778 ? _2786 : (_2786 + (cbSceneParam._m0[72u].w * _2759)));
    SV_Target.y = _2797 * (_2778 ? _2787 : (_2787 + (cbSceneParam._m0[72u].w * _2761)));
    SV_Target.z = _2797 * (_2778 ? _2788 : (_2788 + (cbSceneParam._m0[72u].w * _2763)));
    SV_Target.w = cbInstanceData._m0[_2638].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2638].w;
}


