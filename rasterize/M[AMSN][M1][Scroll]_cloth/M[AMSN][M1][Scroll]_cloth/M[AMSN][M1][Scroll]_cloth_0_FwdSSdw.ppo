#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _859;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    float _232 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _233 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _246 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_232 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_233 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.x * cbMtdParam._m0[9u].x;
    float _253 = _246.y * cbMtdParam._m0[9u].y;
    float _254 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _232) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _233) + cbTextureTilingScale._m0[2u].w));
    float _270 = cbMtdParam._m0[10u].x + _266.x;
    vec4 _282 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _232) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _233) + cbTextureTilingScale._m0[1u].w));
    float _286 = _282.z;
    float _290 = (_282.x * 2.0) + (-1.0);
    float _292 = (_282.y * 2.0) + (-1.0);
    float _293 = dot(vec2(_290, _292), vec2(_290, _292));
    float _3219 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _299 = sqrt(1.0 - (isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0))));
    float _302 = fma(_299, _216, fma(_292, _208 * TANGENT.x, (_194 * _187) * _290));
    float _305 = fma(_299, _217, fma(_292, _208 * TANGENT.y, (_194 * _188) * _290));
    float _308 = fma(_299, _218, fma(_292, _208 * TANGENT.z, (_194 * _189) * _290));
    float _312 = inversesqrt(dot(vec3(_302, _305, _308), vec3(_302, _305, _308)));
    float _313 = _312 * _302;
    float _314 = _312 * _305;
    float _315 = _312 * _308;
    float _3230 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _316 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
    float _3241 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3252 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3263 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3274 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _320 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _336 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    float _402 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _403 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _424 = fma(_315, cbSceneParam._m0[5u].z, fma(_314, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _313));
    float _427 = fma(_315, cbSceneParam._m0[6u].z, fma(_314, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _313));
    float _430 = fma(_315, cbSceneParam._m0[7u].z, fma(_314, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _313));
    uint _443 = uint(roundEven(NORMAL.w)) * 13u;
    uint _446 = (_443 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _452 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0)))) * cbInstanceData._m0[_446].x;
    float _453 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0)))) * cbInstanceData._m0[_446].y;
    float _454 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0)))) * cbInstanceData._m0[_446].z;
    float _3285 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _3296 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _3307 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _458 = 1.0 - _320;
    float _459 = _455 * _458;
    float _460 = _456 * _458;
    float _461 = _457 * _458;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _320;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _320;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _320;
    float _469 = _466 + 0.039999999105930328369140625;
    float _471 = _467 + 0.039999999105930328369140625;
    float _472 = _468 + 0.039999999105930328369140625;
    vec4 _481 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _402, cbSceneParam._m0[86u].y * _403));
    float _484 = _481.x * TEXCOORD.z;
    float _485 = dot(vec3(_313, _314, _315), vec3(_394, _395, _396));
    float _488 = _485 * 2.0;
    float _492 = (_488 * _313) - _394;
    float _493 = (_488 * _314) - _395;
    float _494 = (_488 * _315) - _396;
    float _498 = abs(dot(vec3(_394, _395, _396), vec3(_313, _314, _315)));
    float _3318 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _500 = sqrt(_316);
    float _513 = exp2((_500 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_500 * 3.0));
    float _519 = (1.0 - _513) * ((_500 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _520 = _513 * _500;
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _858;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _583 = fma(_556, cbModelParam._m0[26u].z, fma(_552, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _548));
        float _587 = fma(_556, cbModelParam._m0[27u].z, fma(_552, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _548));
        float _591 = fma(_556, cbModelParam._m0[28u].z, fma(_552, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _548));
        float _616 = _548 + _313;
        float _617 = _552 + _314;
        float _618 = _556 + _315;
        float _628 = fma(_618, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616)) - _583;
        float _629 = fma(_618, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616)) - _587;
        float _630 = fma(_618, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616)) - _591;
        float _634 = inversesqrt(dot(vec3(_628, _629, _630), vec3(_628, _629, _630)));
        float _647 = ((_634 * _628) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_583 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_634 * _629) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_587 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _649 = ((_634 * _630) / cbModelParam._m0[34u].z) + ((((((_591 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        float _686 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_652.x + (-0.5));
        float _688 = _686 * (_652.y + (-0.5));
        float _689 = _686 * (_652.z + (-0.5));
        float _696 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_659.x + (-0.5));
        float _698 = _696 * (_659.y + (-0.5));
        float _699 = _696 * (_659.z + (-0.5));
        float _706 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_666.x + (-0.5));
        float _708 = _706 * (_666.y + (-0.5));
        float _709 = _706 * (_666.z + (-0.5));
        float _716 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_673.x + (-0.5));
        float _718 = _716 * (_673.y + (-0.5));
        float _719 = _716 * (_673.z + (-0.5));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = _687 * 0.5;
        float _724 = _697 * 0.5;
        float _725 = _707 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _740 = (dot(vec3(_313, _314, _315), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3344 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _750 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3355 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3366 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * (_752 + 1.0))) + _757) * _720;
        float _767 = _688 * 0.5;
        float _768 = _698 * 0.5;
        float _769 = _708 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _783 = (dot(vec3(_313, _314, _315), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _792 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3399 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_794 + 1.0))) + _799) * _721;
        float _809 = _689 * 0.5;
        float _810 = _699 * 0.5;
        float _811 = _709 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_313, _314, _315), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3432 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_836 + 1.0))) + _841) * _722;
        _858 = _689;
        _860 = _688;
        _861 = _687;
        _862 = _699;
        _863 = _698;
        _864 = _697;
        _865 = _709;
        _866 = _708;
        _867 = _707;
        _868 = _722;
        _869 = _721;
        _870 = _720;
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
    }
    else
    {
        _858 = _859;
        _860 = _859;
        _861 = _859;
        _862 = _859;
        _863 = _859;
        _864 = _859;
        _865 = _859;
        _866 = _859;
        _867 = _859;
        _868 = _859;
        _869 = _859;
        _870 = _859;
        _871 = 0.0;
        _872 = 0.0;
        _873 = 0.0;
    }
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _899 = fma(_556, cbModelParam._m0[30u].z, fma(_552, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _548));
        float _903 = fma(_556, cbModelParam._m0[31u].z, fma(_552, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _548));
        float _907 = fma(_556, cbModelParam._m0[32u].z, fma(_552, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _548));
        float _930 = _548 + _313;
        float _931 = _552 + _314;
        float _932 = _556 + _315;
        float _942 = fma(_932, cbModelParam._m0[30u].z, fma(_931, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930)) - _899;
        float _943 = fma(_932, cbModelParam._m0[31u].z, fma(_931, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930)) - _903;
        float _944 = fma(_932, cbModelParam._m0[32u].z, fma(_931, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930)) - _907;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_899 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_903 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[35u].z) + ((((((_907 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _998 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_965.x + (-0.5));
        float _1000 = _998 * (_965.y + (-0.5));
        float _1001 = _998 * (_965.z + (-0.5));
        float _1008 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_972.x + (-0.5));
        float _1010 = _1008 * (_972.y + (-0.5));
        float _1011 = _1008 * (_972.z + (-0.5));
        float _1018 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_979.x + (-0.5));
        float _1020 = _1018 * (_979.y + (-0.5));
        float _1021 = _1018 * (_979.z + (-0.5));
        float _1028 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_986.x + (-0.5));
        float _1030 = _1028 * (_986.y + (-0.5));
        float _1031 = _1028 * (_986.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_313, _314, _315), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3495 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_1062 + 1.0))) + _1067) * _1032;
        float _1077 = _1000 * 0.5;
        float _1078 = _1010 * 0.5;
        float _1079 = _1020 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_313, _314, _315), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3528 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1104 + 1.0))) + _1109) * _1033;
        float _1119 = _1001 * 0.5;
        float _1120 = _1011 * 0.5;
        float _1121 = _1021 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_313, _314, _315), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3561 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1146 + 1.0))) + _1151) * _1034;
        _1168 = _1001;
        _1169 = _1000;
        _1170 = _999;
        _1171 = _1011;
        _1172 = _1010;
        _1173 = _1009;
        _1174 = _1021;
        _1175 = _1020;
        _1176 = _1019;
        _1177 = _1034;
        _1178 = _1033;
        _1179 = _1032;
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _859;
        _1169 = _859;
        _1170 = _859;
        _1171 = _859;
        _1172 = _859;
        _1173 = _859;
        _1174 = _859;
        _1175 = _859;
        _1176 = _859;
        _1177 = _859;
        _1178 = _859;
        _1179 = _859;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _872)) + _872;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _873)) + _873;
    float _1215 = fma(_1194, cbSceneParam._m0[89u].z, fma(_1193, cbSceneParam._m0[89u].y, _1192 * cbSceneParam._m0[89u].x));
    float _1218 = fma(_1194, cbSceneParam._m0[90u].z, fma(_1193, cbSceneParam._m0[90u].y, _1192 * cbSceneParam._m0[90u].x));
    float _1221 = fma(_1194, cbSceneParam._m0[91u].z, fma(_1193, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1192));
    float _1236 = _492 * 0.5;
    float _1237 = _493 * 0.5;
    float _1238 = _494 * 0.5;
    float _1239 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1242 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1245 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1279;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1252 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_858, _862, _865, _868));
        float _1256 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_860, _863, _866, _869));
        float _1260 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_861, _864, _867, _870));
        float _1267 = dot(vec4(cbModelParam._m0[39u]), vec4(_1236, _1237, _1238, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1290;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1281 = dot(vec4(cbModelParam._m0[40u]), vec4(_1236, _1237, _1238, 1.0));
        _1290 = dot(vec3(isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1281) ? 0.0 : (isnan(0.0) ? _1281 : max(0.0, _1281))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1290 = 1.0;
    }
    float _1294 = (_1290 * cbModelParam._m0[1u].x) + (_1279 * (1.0 - cbModelParam._m0[1u].x));
    float _1304 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _316);
    float _1305 = isnan(_1304) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1304 : min(cbModelParam._m0[25u].z, _1304));
    float _1387;
    float _1389;
    float _1391;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1354 = fma(_556, cbModelParam._m0[13u].z, fma(_552, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _548)) + cbModelParam._m0[13u].w;
        float _1358 = fma(_556, cbModelParam._m0[14u].z, fma(_552, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _548)) + cbModelParam._m0[14u].w;
        float _1362 = fma(_556, cbModelParam._m0[15u].z, fma(_552, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _548)) + cbModelParam._m0[15u].w;
        float _1365 = fma(_494, cbModelParam._m0[13u].z, fma(_493, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _492));
        float _1368 = fma(_494, cbModelParam._m0[14u].z, fma(_493, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _492));
        float _1371 = fma(_494, cbModelParam._m0[15u].z, fma(_493, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _492));
        float _1399;
        if (_1365 > 0.0)
        {
            _1399 = abs((1.0 - _1354) / _1365);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1354 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1399 = frontier_phi_16_14_ladder;
        }
        float _1627;
        if (_1368 > 0.0)
        {
            _1627 = abs((1.0 - _1358) / _1368);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1358 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1627 = frontier_phi_25_21_ladder;
        }
        float _1884;
        if (_1371 > 0.0)
        {
            _1884 = abs((1.0 - _1362) / _1371);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1362 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1884 = frontier_phi_37_32_ladder;
        }
        float _1886 = isnan(_1627) ? _1399 : (isnan(_1399) ? _1627 : min(_1399, _1627));
        float _1887 = isnan(_1884) ? _1886 : (isnan(_1886) ? _1884 : min(_1886, _1884));
        float _1891 = (_1887 * _1365) + _1354;
        float _1892 = (_1887 * _1368) + _1358;
        float _1893 = (_1887 * _1371) + _1362;
        float _1894 = _1887 * 9.9999997473787516355514526367188e-05;
        float _1896 = (-1.0) - _1894;
        float _1898 = _1894 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1893 > _1898) || ((_1893 < _1896) || ((_1892 > _1898) || ((_1892 < _1896) || ((_1891 < _1896) || (_1891 > _1898))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2021 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1893, cbModelParam._m0[9u].z, fma(_1892, cbModelParam._m0[9u].y, _1891 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1893, cbModelParam._m0[10u].z, fma(_1892, cbModelParam._m0[10u].y, _1891 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1893, cbModelParam._m0[11u].z, fma(_1892, cbModelParam._m0[11u].y, _1891 * cbModelParam._m0[11u].x))), _1305);
            frontier_phi_15_37_ladder = _2021.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2021.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2021.x * cbModelParam._m0[1u].y;
        }
        _1387 = frontier_phi_15_37_ladder_2;
        _1389 = frontier_phi_15_37_ladder_1;
        _1391 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1375 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_492, _493, _494), _1305);
        _1387 = _1375.x * cbModelParam._m0[1u].y;
        _1389 = _1375.y * cbModelParam._m0[1u].y;
        _1391 = _1375.z * cbModelParam._m0[1u].y;
    }
    float _1395 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _316);
    float _1396 = isnan(_1395) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1395 : min(cbModelParam._m0[25u].w, _1395));
    float _1488;
    float _1490;
    float _1492;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1452 = fma(_556, cbModelParam._m0[21u].z, fma(_552, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _548)) + cbModelParam._m0[21u].w;
        float _1456 = fma(_556, cbModelParam._m0[22u].z, fma(_552, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _548)) + cbModelParam._m0[22u].w;
        float _1460 = fma(_556, cbModelParam._m0[23u].z, fma(_552, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _548)) + cbModelParam._m0[23u].w;
        float _1463 = fma(_494, cbModelParam._m0[21u].z, fma(_493, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _492));
        float _1466 = fma(_494, cbModelParam._m0[22u].z, fma(_493, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _492));
        float _1469 = fma(_494, cbModelParam._m0[23u].z, fma(_493, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _492));
        float _1632;
        if (_1463 > 0.0)
        {
            _1632 = abs((1.0 - _1452) / _1463);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1452 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1632 = frontier_phi_27_23_ladder;
        }
        float _1911;
        if (_1466 > 0.0)
        {
            _1911 = abs((1.0 - _1456) / _1466);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1456 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1911 = frontier_phi_39_34_ladder;
        }
        float _2124;
        if (_1469 > 0.0)
        {
            _2124 = abs((1.0 - _1460) / _1469);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1460 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2124 = frontier_phi_48_45_ladder;
        }
        float _2126 = isnan(_1911) ? _1632 : (isnan(_1632) ? _1911 : min(_1632, _1911));
        float _2127 = isnan(_2124) ? _2126 : (isnan(_2126) ? _2124 : min(_2126, _2124));
        float _2131 = (_2127 * _1463) + _1452;
        float _2132 = (_2127 * _1466) + _1456;
        float _2133 = (_2127 * _1469) + _1460;
        float _2134 = _2127 * 9.9999997473787516355514526367188e-05;
        float _2135 = (-1.0) - _2134;
        float _2137 = _2134 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2133 > _2137) || ((_2133 < _2135) || ((_2132 > _2137) || ((_2132 < _2135) || ((_2131 < _2135) || (_2131 > _2137))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2331 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2133, cbModelParam._m0[17u].z, fma(_2132, cbModelParam._m0[17u].y, _2131 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2133, cbModelParam._m0[18u].z, fma(_2132, cbModelParam._m0[18u].y, _2131 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2133, cbModelParam._m0[19u].z, fma(_2132, cbModelParam._m0[19u].y, _2131 * cbModelParam._m0[19u].x))), _1396);
            frontier_phi_24_48_ladder = _2331.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2331.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2331.x * cbModelParam._m0[1u].z;
        }
        _1488 = frontier_phi_24_48_ladder_2;
        _1490 = frontier_phi_24_48_ladder_1;
        _1492 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1472 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_492, _493, _494), _1396);
        _1488 = _1472.x * cbModelParam._m0[1u].z;
        _1490 = _1472.y * cbModelParam._m0[1u].z;
        _1492 = _1472.z * cbModelParam._m0[1u].z;
    }
    float _1505 = (((_519 * _469) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1488 - _1387)) + _1387);
    float _1507 = (((_519 * _471) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1490 - _1389)) + _1389);
    float _1509 = (((_519 * _472) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1492 - _1391)) + _1391);
    float _1512 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1507, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1515 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1507, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1518 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1507, cbSceneParam._m0[91u].y, _1505 * cbSceneParam._m0[91u].x));
    vec4 _1526 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_402, _403));
    float _1528 = _1526.w;
    float _1540 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1528);
    float _1541 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1528);
    float _1542 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1528);
    uvec4 _1546 = floatBitsToUint(cbInstanceData._m0[_443 + 5u]);
    uint _1548 = _1546.x * 14u;
    uint _1549 = _1548 + 13u;
    float _1556 = _484 + (-1.0);
    float _1561 = (cbLight._m0[_1549].x * _1556) + 1.0;
    float _1562 = (cbLight._m0[_1549].y * _1556) + 1.0;
    float _1563 = (cbLight._m0[_1549].z * _1556) + 1.0;
    float _1564 = (cbLight._m0[_1549].w * _1556) + 1.0;
    uint _1565 = _1548 + 5u;
    float _1571 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
    uint _1575 = _1548 + 4u;
    float _1585 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
    uint _1589 = _1548 | 1u;
    float _1600 = dot(vec3(cbLight._m0[_1548].xyz), vec3(_313, _314, _315));
    float _1603 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_313, _314, _315));
    float _3697 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _3708 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _1608 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.3183098733425140380859375;
    float _1610 = (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.3183098733425140380859375;
    float _1617 = ((cbLight._m0[_1565].x * _1571) * _1610) + (((cbLight._m0[_1575].x * _1540) * _1585) * _1608);
    float _1618 = ((_1571 * cbLight._m0[_1565].y) * _1610) + (((cbLight._m0[_1575].y * _1541) * _1585) * _1608);
    float _1619 = ((_1571 * cbLight._m0[_1565].z) * _1610) + (((cbLight._m0[_1575].z * _1542) * _1585) * _1608);
    uvec4 _1624 = floatBitsToUint(cbLight._m0[_1548 + 12u]);
    bool _1626 = _1624.x == 0u;
    float _1637;
    float _1639;
    float _1641;
    if (_1626)
    {
        _1637 = _1617;
        _1639 = _1618;
        _1641 = _1619;
    }
    else
    {
        uint _1645 = _1548 + 6u;
        float _1661 = (dot(vec3(cbLight._m0[_1548 + 2u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _1662 = _1661 * _1661;
        float _3719 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1664 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
        _1637 = (((cbLight._m0[_1645].x * 0.3183098733425140380859375) * _1663) * _1664) + _1617;
        _1639 = (((cbLight._m0[_1645].y * 0.3183098733425140380859375) * _1663) * _1664) + _1618;
        _1641 = (((cbLight._m0[_1645].z * 0.3183098733425140380859375) * _1663) * _1664) + _1619;
    }
    bool _1644 = _1624.y == 0u;
    float _1682;
    float _1684;
    float _1686;
    if (_1644)
    {
        _1682 = _1637;
        _1684 = _1639;
        _1686 = _1641;
    }
    else
    {
        uint _1855 = _1548 + 7u;
        float _1871 = (dot(vec3(cbLight._m0[_1548 + 3u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _1872 = _1871 * _1871;
        float _3735 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1874 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
        _1682 = (((cbLight._m0[_1855].x * 0.3183098733425140380859375) * _1873) * _1874) + _1637;
        _1684 = (((cbLight._m0[_1855].y * 0.3183098733425140380859375) * _1873) * _1874) + _1639;
        _1686 = (((cbLight._m0[_1855].z * 0.3183098733425140380859375) * _1873) * _1874) + _1641;
    }
    uint _1689 = _1548 + 8u;
    float _1702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1548].w)) * _316) * 0.949999988079071044921875);
    float _1703 = _1702 * _1702;
    float _1704 = cbLight._m0[_1548].x + _394;
    float _1705 = cbLight._m0[_1548].y + _395;
    float _1706 = cbLight._m0[_1548].z + _396;
    float _1710 = inversesqrt(dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706)));
    float _1711 = _1710 * _1704;
    float _1712 = _1710 * _1705;
    float _1713 = _1710 * _1706;
    float _1714 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1548].xyz));
    float _3751 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1717 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _1718 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _1719 = dot(vec3(_313, _314, _315), vec3(_1711, _1712, _1713));
    float _3773 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1722 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _1723 = dot(vec3(cbLight._m0[_1548].xyz), vec3(_1711, _1712, _1713));
    float _3784 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1727 = _1703 * _1703;
    float _1731 = ((_1722 * _1722) * (_1727 + (-1.0))) + 1.0;
    float _1739 = exp2(log2(1.0 - (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * 5.0);
    float _1740 = 0.959999978542327880859375 - _466;
    float _1742 = 0.959999978542327880859375 - _467;
    float _1743 = 0.959999978542327880859375 - _468;
    float _1750 = 1.0 - _1703;
    float _1761 = (0.5 / (((_1718 * ((_1717 * _1750) + _1703)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _1750) + _1703) * _1717))) * _1717;
    float _3795 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1763 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1727 / ((_1731 * _1731) * 3.141590118408203125));
    uint _1777 = _1548 + 9u;
    float _1788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1589].w)) * _316) * 0.949999988079071044921875);
    float _1789 = _1788 * _1788;
    float _1790 = cbLight._m0[_1589].x + _394;
    float _1791 = cbLight._m0[_1589].y + _395;
    float _1792 = cbLight._m0[_1589].z + _396;
    float _1796 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
    float _1797 = _1796 * _1790;
    float _1798 = _1796 * _1791;
    float _1799 = _1796 * _1792;
    float _1800 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1589].xyz));
    float _3806 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _1804 = dot(vec3(_313, _314, _315), vec3(_1797, _1798, _1799));
    float _3817 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _1808 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_1797, _1798, _1799));
    float _3828 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1812 = _1789 * _1789;
    float _1816 = ((_1807 * _1807) * (_1812 + (-1.0))) + 1.0;
    float _1823 = exp2(log2(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * 5.0);
    float _1830 = 1.0 - _1789;
    float _1840 = (0.5 / (((_1718 * ((_1803 * _1830) + _1789)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _1830) + _1789) * _1803))) * _1803;
    float _3839 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1842 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1812 / ((_1816 * _1816) * 3.141590118408203125));
    float _1852 = (((((_1823 * _1740) + _469) * cbLight._m0[_1777].x) * _1842) * _1571) + ((((cbLight._m0[_1689].x * _1540) * ((_1739 * _1740) + _469)) * _1763) * _1585);
    float _1853 = (((((_1823 * _1742) + _471) * cbLight._m0[_1777].y) * _1842) * _1571) + ((((cbLight._m0[_1689].y * _1541) * ((_1739 * _1742) + _471)) * _1763) * _1585);
    float _1854 = (((((_1823 * _1743) + _472) * cbLight._m0[_1777].z) * _1842) * _1571) + ((((cbLight._m0[_1689].z * _1542) * ((_1739 * _1743) + _472)) * _1763) * _1585);
    float _1916;
    float _1918;
    float _1920;
    if (_1626)
    {
        _1916 = _1852;
        _1918 = _1853;
        _1920 = _1854;
    }
    else
    {
        uint _1922 = _1548 + 2u;
        uint _1926 = _1548 + 10u;
        float _1940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _316) * 0.949999988079071044921875);
        float _1941 = _1940 * _1940;
        float _1942 = cbLight._m0[_1922].x + _394;
        float _1943 = cbLight._m0[_1922].y + _395;
        float _1944 = cbLight._m0[_1922].z + _396;
        float _1948 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
        float _1949 = _1948 * _1942;
        float _1950 = _1948 * _1943;
        float _1951 = _1948 * _1944;
        float _1952 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1922].xyz));
        float _3850 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1955 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1956 = dot(vec3(_313, _314, _315), vec3(_1949, _1950, _1951));
        float _3861 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1959 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1960 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_1949, _1950, _1951));
        float _3872 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1964 = _1941 * _1941;
        float _1968 = ((_1959 * _1959) * (_1964 + (-1.0))) + 1.0;
        float _1975 = exp2(log2(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * 5.0);
        float _1982 = 1.0 - _1941;
        float _1992 = (0.5 / (((_1718 * ((_1955 * _1982) + _1941)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _1982) + _1941) * _1955))) * _1955;
        float _3883 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1994 = (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1964 / ((_1968 * _1968) * 3.141590118408203125));
        float _1995 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
        _1916 = (((((_1975 * _1740) + _469) * cbLight._m0[_1926].x) * _1994) * _1995) + _1852;
        _1918 = (((((_1975 * _1742) + _471) * cbLight._m0[_1926].y) * _1994) * _1995) + _1853;
        _1920 = (((((_1975 * _1743) + _472) * cbLight._m0[_1926].z) * _1994) * _1995) + _1854;
    }
    float _2030;
    float _2032;
    float _2034;
    if (_1644)
    {
        _2030 = _1916;
        _2032 = _1918;
        _2034 = _1920;
    }
    else
    {
        uint _2041 = _1548 + 3u;
        uint _2045 = _1548 + 11u;
        float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _316) * 0.949999988079071044921875);
        float _2060 = _2059 * _2059;
        float _2061 = cbLight._m0[_2041].x + _394;
        float _2062 = cbLight._m0[_2041].y + _395;
        float _2063 = cbLight._m0[_2041].z + _396;
        float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
        float _2068 = _2067 * _2061;
        float _2069 = _2067 * _2062;
        float _2070 = _2067 * _2063;
        float _2071 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_2041].xyz));
        float _3899 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2074 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _2075 = dot(vec3(_313, _314, _315), vec3(_2068, _2069, _2070));
        float _3910 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2078 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _2079 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2068, _2069, _2070));
        float _3921 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2083 = _2060 * _2060;
        float _2087 = ((_2078 * _2078) * (_2083 + (-1.0))) + 1.0;
        float _2094 = exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0);
        float _2101 = 1.0 - _2060;
        float _2111 = (0.5 / (((_1718 * ((_2074 * _2101) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_1718 * _2101) + _2060) * _2074))) * _2074;
        float _3932 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2113 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_2083 / ((_2087 * _2087) * 3.141590118408203125));
        float _2114 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
        _2030 = (((((_2094 * _1740) + _469) * cbLight._m0[_2045].x) * _2113) * _2114) + _1916;
        _2032 = (((((_2094 * _1742) + _471) * cbLight._m0[_2045].y) * _2113) * _2114) + _1918;
        _2034 = (((((_2094 * _1743) + _472) * cbLight._m0[_2045].z) * _2113) * _2114) + _1920;
    }
    float _2248;
    float _2250;
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    if (_1546.y == 0u)
    {
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2189;
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2189;
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2189;
        uvec4 _2204 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2205 = _2204.x;
        uint _2216 = uint((float(_2204.y) * floor(float(uint(cbSceneParam._m0[85u].y * _403) / _2205))) + floor(float(uint(cbSceneParam._m0[85u].x * _402) / _2205)));
        float _2226 = (log2(_2192 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2227 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        uint _2230 = uint(isnan(14.0) ? _2227 : (isnan(_2227) ? 14.0 : min(_2227, 14.0)));
        uvec4 _2235 = texelFetch(g_lightClusterGridBuffer, int(((_2230 << 2u) + (_2216 << 6u)) >> 2u));
        uint _2236 = _2235.x;
        uint _2237 = _2204.z;
        float _2336;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        float _2346;
        if (((((1u << ((_2237 >> 4u) & 15u)) + 4294967295u) & _2236) == 0u) || ((_2237 & 240u) == 0u))
        {
            _2336 = 0.0;
            _2338 = 0.0;
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
        }
        else
        {
            float _2337;
            float _2339;
            float _2341;
            float _2343;
            float _2345;
            float _2347;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            float _2483 = 0.0;
            float _2484 = 0.0;
            float _2485 = 0.0;
            uint _2486 = 0u;
            uint _2495;
            bool _2496;
            for (;;)
            {
                _2495 = texelFetch(g_lightClassification, int((((_2230 << 5u) + (_2216 << 9u)) + (_2486 << 2u)) >> 2u)).x;
                _2496 = _2495 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2496)
                {
                    frontier_phi_63_pred = _2485;
                    frontier_phi_63_pred_1 = _2484;
                    frontier_phi_63_pred_2 = _2483;
                    frontier_phi_63_pred_3 = _2482;
                    frontier_phi_63_pred_4 = _2481;
                    frontier_phi_63_pred_5 = _2480;
                }
                else
                {
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    uint _2610;
                    _2604 = _2480;
                    _2605 = _2481;
                    _2606 = _2482;
                    _2607 = _2483;
                    _2608 = _2484;
                    _2609 = _2485;
                    _2610 = _2495;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    for (;;)
                    {
                        uint _2614 = uint(findLSB(_2610)) + (_2486 << 5u);
                        uint _2611 = (_2610 + 4294967295u) & _2610;
                        uint _2616 = _2614 * 48u;
                        vec4 _2630 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2616)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 3u)).x));
                        uint _2636 = (_2614 * 48u) + 4u;
                        vec4 _2649 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2636)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 3u)).x));
                        uint _2655 = (_2614 * 48u) + 8u;
                        vec3 _2666 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2655)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 2u)).x));
                        float _2670 = _2630.x - _2190;
                        float _2671 = _2630.y - _2191;
                        float _2672 = _2630.z - _2192;
                        float _2673 = dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672));
                        float _2676 = inversesqrt(_2673);
                        float _2677 = _2676 * _2670;
                        float _2678 = _2676 * _2671;
                        float _2679 = _2676 * _2672;
                        float _2680 = dot(vec3(_424, _427, _430), vec3(_2677, _2678, _2679));
                        float _2685 = 1.0 - (_2673 * _2630.w);
                        float _3958 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                        float _2686 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                        float _2687 = sqrt(_2673) * _2649.w;
                        float _2690 = 1.39999997615814208984375 / (_2687 + 1.39999997615814208984375);
                        float _2691 = _2690 * _2690;
                        float _2694 = ((1.0 - _2691) * _2680) + _2691;
                        float _2697 = _2687 * _2687;
                        float _2701 = ((isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0))) * _2686) / ((_2697 * 0.699999988079071044921875) + 1.0);
                        float _2705 = (-0.0) - _2190;
                        float _2706 = (-0.0) - _2191;
                        float _2707 = (-0.0) - _2192;
                        float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
                        float _2712 = _2711 * _2705;
                        float _2713 = _2711 * _2706;
                        float _2714 = _2711 * _2707;
                        float _2722 = exp2(log2(1.0 / ((_2697 * 3.5) + 5.0)) * 0.25);
                        float _2723 = 1.0 - _500;
                        float _2730 = sqrt(1.0 - ((1.0 - (_2723 * _2723)) * (1.0 - (_2722 * _2722))));
                        float _2731 = _2730 * _2730;
                        float _2732 = _2731 * _2731;
                        float _2733 = _2712 + _2677;
                        float _2734 = _2713 + _2678;
                        float _2735 = _2714 + _2679;
                        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
                        float _2743 = dot(vec3(_424, _427, _430), vec3(_2712, _2713, _2714));
                        float _3974 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2746 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                        float _2747 = dot(vec3(_424, _427, _430), vec3(_2739 * _2733, _2739 * _2734, _2739 * _2735));
                        float _3985 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2750 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                        float _2754 = ((_2750 * _2750) * (_2732 + (-1.0))) + 1.0;
                        float _2755 = _2690 * _2731;
                        float _2756 = _2755 * _2755;
                        float _2759 = ((1.0 - _2756) * _2680) + _2756;
                        float _3996 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2760 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                        float _2761 = 1.0 - _2731;
                        float _2771 = (0.5 / (((_2760 * ((_2746 * _2761) + _2731)) + 9.9999999392252902907785028219223e-09) + (((_2760 * _2761) + _2731) * _2746))) * _2760;
                        float _4007 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2782 = (((_2732 * 3.1415927410125732421875) * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) / ((_2754 * _2754) * ((_2697 * 2.1991131305694580078125) + 3.141590118408203125))) * _2686;
                        _2539 = (_2701 * _2649.x) + _2607;
                        _2540 = (_2701 * _2649.y) + _2608;
                        _2541 = (_2701 * _2649.z) + _2609;
                        _2536 = (_2782 * _2666.x) + _2604;
                        _2537 = (_2782 * _2666.y) + _2605;
                        _2538 = (_2782 * _2666.z) + _2606;
                        if (_2611 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2604 = _2536;
                            _2605 = _2537;
                            _2606 = _2538;
                            _2607 = _2539;
                            _2608 = _2540;
                            _2609 = _2541;
                            _2610 = _2611;
                        }
                    }
                    frontier_phi_63_pred = _2541;
                    frontier_phi_63_pred_1 = _2540;
                    frontier_phi_63_pred_2 = _2539;
                    frontier_phi_63_pred_3 = _2538;
                    frontier_phi_63_pred_4 = _2537;
                    frontier_phi_63_pred_5 = _2536;
                }
                _2347 = frontier_phi_63_pred;
                _2345 = frontier_phi_63_pred_1;
                _2343 = frontier_phi_63_pred_2;
                _2341 = frontier_phi_63_pred_3;
                _2339 = frontier_phi_63_pred_4;
                _2337 = frontier_phi_63_pred_5;
                uint _2487 = _2486 + 1u;
                if (_2487 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2480 = _2337;
                    _2481 = _2339;
                    _2482 = _2341;
                    _2483 = _2343;
                    _2484 = _2345;
                    _2485 = _2347;
                    _2486 = _2487;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2336 = _2337;
            _2338 = _2339;
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
        }
        uvec4 _2350 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2351 = _2350.z;
        uint _2353 = (_2351 >> 8u) & 15u;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        if (((4294967295u << _2353) & _2236) == 0u)
        {
            _2448 = _2336;
            _2450 = _2338;
            _2452 = _2340;
            _2454 = _2342;
            _2456 = _2344;
            _2458 = _2346;
        }
        else
        {
            float _2473 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
            float _2474 = _2473 * _2190;
            float _2475 = _2473 * _2191;
            float _2476 = _2473 * _2192;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2353 < ((_2351 >> 12u) & 15u))
            {
                float _2449;
                float _2451;
                float _2453;
                float _2455;
                float _2457;
                float _2459;
                float _2587 = _2336;
                float _2588 = _2338;
                float _2589 = _2340;
                float _2590 = _2342;
                float _2591 = _2344;
                float _2592 = _2346;
                uint _2593 = _2353;
                uint _2602;
                bool _2603;
                for (;;)
                {
                    _2602 = texelFetch(g_lightClassification, int((((_2230 << 5u) + (_2216 << 9u)) + (_2593 << 2u)) >> 2u)).x;
                    _2603 = _2602 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2603)
                    {
                        frontier_phi_69_pred = _2592;
                        frontier_phi_69_pred_1 = _2591;
                        frontier_phi_69_pred_2 = _2590;
                        frontier_phi_69_pred_3 = _2589;
                        frontier_phi_69_pred_4 = _2588;
                        frontier_phi_69_pred_5 = _2587;
                    }
                    else
                    {
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _2800 = _2587;
                        float _2801 = _2588;
                        float _2802 = _2589;
                        float _2803 = _2590;
                        float _2804 = _2591;
                        float _2805 = _2592;
                        uint _2806 = _2602;
                        uint _2807;
                        vec4 _2832;
                        float _2833;
                        vec4 _2848;
                        vec3 _2860;
                        vec4 _2876;
                        vec4 _2892;
                        float _2939;
                        bool _2940;
                        for (;;)
                        {
                            uint _2817 = ((_2593 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2806));
                            _2807 = (_2806 + 4294967295u) & _2806;
                            uint _2819 = _2817 * 40u;
                            _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            _2833 = _2832.w;
                            uint _2835 = (_2817 * 40u) + 4u;
                            _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            uint _2850 = (_2817 * 40u) + 8u;
                            _2860 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x));
                            uint _2863 = (_2817 * 40u) + 16u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2879 = (_2817 * 40u) + 20u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            uint _2895 = (_2817 * 40u) + 24u;
                            vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2914 = (_2817 * 40u) + 28u;
                            vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            _2939 = fma(_2192, _2927.z, fma(_2191, _2927.y, _2927.x * _2190)) + _2927.w;
                            _2940 = !((fma(_2192, _2908.z, fma(_2191, _2908.y, _2908.x * _2190)) + _2908.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2940)
                            {
                                float _2967 = _2832.x - _2190;
                                float _2968 = _2832.y - _2191;
                                float _2969 = _2832.z - _2192;
                                float _2970 = dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969));
                                float _2973 = inversesqrt(_2970);
                                float _2974 = _2973 * _2967;
                                float _2975 = _2973 * _2968;
                                float _2976 = _2973 * _2969;
                                float _2980 = 1.0 - (_2970 / (_2833 * _2833));
                                float _4018 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                                float _2981 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                                float _2985 = sqrt(_2970) * _2848.w;
                                float _2987 = 1.39999997615814208984375 / (_2985 + 1.39999997615814208984375);
                                float _2988 = _2987 * _2987;
                                float _2991 = ((1.0 - _2988) * dot(vec3(_2974, _2975, _2976), vec3(_424, _427, _430))) + _2988;
                                float _2994 = _2985 * _2985;
                                float _2998 = (fma(_2192, _2876.z, fma(_2191, _2876.y, _2876.x * _2190)) + _2876.w) / _2939;
                                float _2999 = (fma(_2192, _2892.z, fma(_2191, _2892.y, _2892.x * _2190)) + _2892.w) / _2939;
                                float _3003 = 1.0 - dot(vec2(_2998, _2999), vec2(_2998, _2999));
                                float _4034 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3004 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                                float _3005 = _3004 * (((isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))) * _2981) / ((_2994 * 0.699999988079071044921875) + 1.0));
                                float _3017 = exp2(log2(1.0 / ((_2994 * 3.5) + 5.0)) * 0.25);
                                float _3018 = 1.0 - _500;
                                float _3025 = sqrt(1.0 - ((1.0 - (_3018 * _3018)) * (1.0 - (_3017 * _3017))));
                                float _3026 = _3025 * _3025;
                                float _3027 = _3026 * _3026;
                                float _3028 = _2974 - _2474;
                                float _3029 = _2975 - _2475;
                                float _3030 = _2976 - _2476;
                                float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                                float _3038 = dot(vec3(_424, _427, _430), vec3((-0.0) - _2474, (-0.0) - _2475, (-0.0) - _2476));
                                float _4045 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3041 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                                float _3042 = dot(vec3(_424, _427, _430), vec3(_3034 * _3028, _3034 * _3029, _3034 * _3030));
                                float _4056 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3045 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                                float _3049 = ((_3045 * _3045) * (_3027 + (-1.0))) + 1.0;
                                float _3050 = _2987 * _3026;
                                float _3051 = _3050 * _3050;
                                float _3057 = ((1.0 - _3051) * dot(vec3(_424, _427, _430), vec3(_2974, _2975, _2976))) + _3051;
                                float _4067 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3058 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3059 = 1.0 - _3026;
                                float _3069 = (0.5 / (((_3058 * ((_3041 * _3059) + _3026)) + 9.9999999392252902907785028219223e-09) + (((_3058 * _3059) + _3026) * _3041))) * _3058;
                                float _4078 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3079 = (_3004 * _2981) * (((_3027 * 3.1415927410125732421875) * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) / ((_3049 * _3049) * ((_2994 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3005 * _2848.z;
                                frontier_phi_75_pred_1 = _3005 * _2848.y;
                                frontier_phi_75_pred_2 = _3005 * _2848.x;
                                frontier_phi_75_pred_3 = _3079 * _2860.z;
                                frontier_phi_75_pred_4 = _3079 * _2860.y;
                                frontier_phi_75_pred_5 = _3079 * _2860.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3088 = frontier_phi_75_pred;
                            _3087 = frontier_phi_75_pred_1;
                            _3086 = frontier_phi_75_pred_2;
                            _3085 = frontier_phi_75_pred_3;
                            _3084 = frontier_phi_75_pred_4;
                            _3083 = frontier_phi_75_pred_5;
                            _2790 = _3086 + _2803;
                            _2791 = _3087 + _2804;
                            _2792 = _3088 + _2805;
                            _2787 = _3083 + _2800;
                            _2788 = _3084 + _2801;
                            _2789 = _3085 + _2802;
                            if (_2807 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2807;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2792;
                        frontier_phi_69_pred_1 = _2791;
                        frontier_phi_69_pred_2 = _2790;
                        frontier_phi_69_pred_3 = _2789;
                        frontier_phi_69_pred_4 = _2788;
                        frontier_phi_69_pred_5 = _2787;
                    }
                    _2459 = frontier_phi_69_pred;
                    _2457 = frontier_phi_69_pred_1;
                    _2455 = frontier_phi_69_pred_2;
                    _2453 = frontier_phi_69_pred_3;
                    _2451 = frontier_phi_69_pred_4;
                    _2449 = frontier_phi_69_pred_5;
                    uint _2594 = _2593 + 1u;
                    if (_2594 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2587 = _2449;
                        _2588 = _2451;
                        _2589 = _2453;
                        _2590 = _2455;
                        _2591 = _2457;
                        _2592 = _2459;
                        _2593 = _2594;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2459;
                frontier_phi_57_58_ladder_1 = _2457;
                frontier_phi_57_58_ladder_2 = _2455;
                frontier_phi_57_58_ladder_3 = _2453;
                frontier_phi_57_58_ladder_4 = _2451;
                frontier_phi_57_58_ladder_5 = _2449;
            }
            else
            {
                frontier_phi_57_58_ladder = _2346;
                frontier_phi_57_58_ladder_1 = _2344;
                frontier_phi_57_58_ladder_2 = _2342;
                frontier_phi_57_58_ladder_3 = _2340;
                frontier_phi_57_58_ladder_4 = _2338;
                frontier_phi_57_58_ladder_5 = _2336;
            }
            _2448 = frontier_phi_57_58_ladder_5;
            _2450 = frontier_phi_57_58_ladder_4;
            _2452 = frontier_phi_57_58_ladder_3;
            _2454 = frontier_phi_57_58_ladder_2;
            _2456 = frontier_phi_57_58_ladder_1;
            _2458 = frontier_phi_57_58_ladder;
        }
        float _2463 = isnan(1.0) ? _484 : (isnan(_484) ? 1.0 : min(_484, 1.0));
        _2248 = (_2463 * _2454) + _1682;
        _2250 = (_2463 * _2456) + _1684;
        _2252 = (_2463 * _2458) + _1686;
        _2254 = ((_2448 * _469) * _2463) + _2030;
        _2256 = ((_2450 * _471) * _2463) + _2032;
        _2258 = ((_2452 * _472) * _2463) + _2034;
    }
    else
    {
        _2248 = _1682;
        _2250 = _1684;
        _2252 = _1686;
        _2254 = _2030;
        _2256 = _2032;
        _2258 = _2034;
    }
    float _4094 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4105 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4116 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    uint _2278 = _443 + 6u;
    float _2286 = _402 / cbSceneParam._m0[86u].x;
    float _2287 = _403 / cbSceneParam._m0[86u].y;
    vec4 _2301 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2286, _2287, (log2((isnan(cbSceneParam._m0[77u].w) ? _336 : (isnan(_336) ? cbSceneParam._m0[77u].w : min(_336, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2303 = _2301.x;
    float _2304 = _2301.y;
    float _2305 = _2301.z;
    float _2306 = _2301.w;
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    if (_336 > cbSceneParam._m0[78u].w)
    {
        float _2361 = isnan(_336) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _336 : min(cbSceneParam._m0[80u].w, _336));
        float _2362 = _2361 / _336;
        float _2373 = _2362 * _387;
        float _2374 = _388 * _2362;
        float _2375 = (-0.0) - _2374;
        float _2376 = _2362 * _389;
        float _2378 = (cbSceneParam._m0[77u].w * _2375) / _2361;
        float _2379 = _2378 + cbSceneParam._m0[79u].w;
        float _2380 = cbSceneParam._m0[79u].w - _2374;
        float _2386 = sqrt(((_2373 * _2373) + (_2374 * _2374)) + (_2376 * _2376));
        float _2389 = (1.0 - (cbSceneParam._m0[77u].w / _2361)) * _2386;
        float _2394 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2396 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2549;
        if (abs((_2375 - _2378) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2549 = ((((_2379 > 0.0) ? exp2(_2394 * _2379) : (2.0 - exp2(_2396 * _2379))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2389;
        }
        else
        {
            float _2509 = 1.0 / cbSceneParam._m0[80u].x;
            float _2510 = isnan(_2380) ? _2379 : (isnan(_2379) ? _2380 : max(_2379, _2380));
            float _2511 = isnan(_2380) ? _2379 : (isnan(_2379) ? _2380 : min(_2379, _2380));
            float _2520 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : min(_2510, 0.0));
            float _2521 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : min(_2511, 0.0));
            _2549 = ((abs(_2386 / _2375) * cbSceneParam._m0[80u].y) * ((((_2520 - _2521) * 2.0) - ((exp2(_2394 * (isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0)))) - exp2(_2394 * (isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0))))) * _2509)) - ((exp2(_2396 * _2520) - exp2(_2396 * _2521)) * _2509))) + (_2389 * cbSceneParam._m0[80u].z);
        }
        vec4 _2551 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2286, _2287, 1.0), 0.0);
        float _2560 = exp2((_2549 * (-1.44269502162933349609375)) * (1.0 - _2551.w));
        float _2561 = log2(_2560);
        float _2577 = log2(_2306);
        _2398 = (exp2(_2577 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].x)) * _2551.x) / cbSceneParam._m0[78u].x)) + _2303;
        _2400 = (exp2(_2577 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].y)) * _2551.y) / cbSceneParam._m0[78u].y)) + _2304;
        _2402 = (exp2(_2577 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].z)) * _2551.z) / cbSceneParam._m0[78u].z)) + _2305;
        _2404 = _2560 * _2306;
    }
    else
    {
        _2398 = _2303;
        _2400 = _2304;
        _2402 = _2305;
        _2404 = _2306;
    }
    float _2416 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2417 = _2416 == 3.0;
    float _2418 = log2(_2404);
    float _2425 = exp2(_2418 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2248 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _484))) + ((_2254 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1294)) * cbPerFrame._m0[3u].x));
    float _2426 = exp2(_2418 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2250 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _484))) + ((_2256 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1294)) * cbPerFrame._m0[3u].x));
    float _2427 = exp2(_2418 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2252 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _484))) + ((_2258 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1294)) * cbPerFrame._m0[3u].x));
    float _2436 = (_2416 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2436 * (_2417 ? _2425 : (_2425 + (cbSceneParam._m0[72u].w * _2398)));
    SV_Target.y = _2436 * (_2417 ? _2426 : (_2426 + (cbSceneParam._m0[72u].w * _2400)));
    SV_Target.z = _2436 * (_2417 ? _2427 : (_2427 + (cbSceneParam._m0[72u].w * _2402)));
    SV_Target.w = cbInstanceData._m0[_2278].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2278].w;
}


