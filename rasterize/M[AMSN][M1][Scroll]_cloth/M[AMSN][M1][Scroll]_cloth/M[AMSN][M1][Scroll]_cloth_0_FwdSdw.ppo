#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _861;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    float _234 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _235 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _248 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_234 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_235 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _254 = _248.x * cbMtdParam._m0[9u].x;
    float _255 = _248.y * cbMtdParam._m0[9u].y;
    float _256 = _248.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _234) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _235) + cbTextureTilingScale._m0[2u].w));
    float _272 = cbMtdParam._m0[10u].x + _268.x;
    vec4 _284 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _234) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _235) + cbTextureTilingScale._m0[1u].w));
    float _288 = _284.z;
    float _292 = (_284.x * 2.0) + (-1.0);
    float _294 = (_284.y * 2.0) + (-1.0);
    float _295 = dot(vec2(_292, _294), vec2(_292, _294));
    float _3480 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _301 = sqrt(1.0 - (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))));
    float _304 = fma(_301, _218, fma(_294, _210 * TANGENT.x, (_196 * _189) * _292));
    float _307 = fma(_301, _219, fma(_294, _210 * TANGENT.y, (_196 * _190) * _292));
    float _310 = fma(_301, _220, fma(_294, _210 * TANGENT.z, (_196 * _191) * _292));
    float _314 = inversesqrt(dot(vec3(_304, _307, _310), vec3(_304, _307, _310)));
    float _315 = _314 * _304;
    float _316 = _314 * _307;
    float _317 = _314 * _310;
    float _3491 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _318 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3513 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3524 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3535 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _322 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _338 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _379 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _389 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _379);
    float _390 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _379);
    float _391 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _379);
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _389 * _395;
    float _397 = _390 * _395;
    float _398 = _391 * _395;
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _426 = fma(_317, cbSceneParam._m0[5u].z, fma(_316, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _315));
    float _429 = fma(_317, cbSceneParam._m0[6u].z, fma(_316, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _315));
    float _432 = fma(_317, cbSceneParam._m0[7u].z, fma(_316, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _315));
    uint _445 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = (_445 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _454 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * cbInstanceData._m0[_448].x;
    float _455 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_448].y;
    float _456 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * cbInstanceData._m0[_448].z;
    float _3546 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _3557 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _3568 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _460 = 1.0 - _322;
    float _461 = _457 * _460;
    float _462 = _458 * _460;
    float _463 = _459 * _460;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _322;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _322;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _322;
    float _471 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _486 = _483.x * TEXCOORD.z;
    float _487 = dot(vec3(_315, _316, _317), vec3(_396, _397, _398));
    float _490 = _487 * 2.0;
    float _494 = (_490 * _315) - _396;
    float _495 = (_490 * _316) - _397;
    float _496 = (_490 * _317) - _398;
    float _500 = abs(dot(vec3(_396, _397, _398), vec3(_315, _316, _317)));
    float _3579 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = sqrt(_318);
    float _515 = exp2((_502 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_502 * 3.0));
    float _521 = (1.0 - _515) * ((_502 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _522 = _515 * _502;
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _860;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _585 = fma(_558, cbModelParam._m0[26u].z, fma(_554, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _550));
        float _589 = fma(_558, cbModelParam._m0[27u].z, fma(_554, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _550));
        float _593 = fma(_558, cbModelParam._m0[28u].z, fma(_554, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _550));
        float _618 = _550 + _315;
        float _619 = _554 + _316;
        float _620 = _558 + _317;
        float _630 = fma(_620, cbModelParam._m0[26u].z, fma(_619, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618)) - _585;
        float _631 = fma(_620, cbModelParam._m0[27u].z, fma(_619, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618)) - _589;
        float _632 = fma(_620, cbModelParam._m0[28u].z, fma(_619, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618)) - _593;
        float _636 = inversesqrt(dot(vec3(_630, _631, _632), vec3(_630, _631, _632)));
        float _649 = ((_636 * _630) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_585 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _650 = ((_636 * _631) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_589 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _651 = ((_636 * _632) / cbModelParam._m0[34u].z) + ((((((_593 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        float _688 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_654.x + (-0.5));
        float _690 = _688 * (_654.y + (-0.5));
        float _691 = _688 * (_654.z + (-0.5));
        float _698 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_661.x + (-0.5));
        float _700 = _698 * (_661.y + (-0.5));
        float _701 = _698 * (_661.z + (-0.5));
        float _708 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_668.x + (-0.5));
        float _710 = _708 * (_668.y + (-0.5));
        float _711 = _708 * (_668.z + (-0.5));
        float _718 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_675.x + (-0.5));
        float _720 = _718 * (_675.y + (-0.5));
        float _721 = _718 * (_675.z + (-0.5));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = _689 * 0.5;
        float _726 = _699 * 0.5;
        float _727 = _709 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _742 = (dot(vec3(_315, _316, _317), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _752 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _3627 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_754 + 1.0))) + _759) * _722;
        float _769 = _690 * 0.5;
        float _770 = _700 * 0.5;
        float _771 = _710 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _785 = (dot(vec3(_315, _316, _317), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _794 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _3660 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_796 + 1.0))) + _801) * _723;
        float _811 = _691 * 0.5;
        float _812 = _701 * 0.5;
        float _813 = _711 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _827 = (dot(vec3(_315, _316, _317), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _836 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _3693 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_838 + 1.0))) + _843) * _724;
        _860 = _691;
        _862 = _690;
        _863 = _689;
        _864 = _701;
        _865 = _700;
        _866 = _699;
        _867 = _711;
        _868 = _710;
        _869 = _709;
        _870 = _724;
        _871 = _723;
        _872 = _722;
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
    }
    else
    {
        _860 = _861;
        _862 = _861;
        _863 = _861;
        _864 = _861;
        _865 = _861;
        _866 = _861;
        _867 = _861;
        _868 = _861;
        _869 = _861;
        _870 = _861;
        _871 = _861;
        _872 = _861;
        _873 = 0.0;
        _874 = 0.0;
        _875 = 0.0;
    }
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _901 = fma(_558, cbModelParam._m0[30u].z, fma(_554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _550));
        float _905 = fma(_558, cbModelParam._m0[31u].z, fma(_554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _550));
        float _909 = fma(_558, cbModelParam._m0[32u].z, fma(_554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _550));
        float _932 = _550 + _315;
        float _933 = _554 + _316;
        float _934 = _558 + _317;
        float _944 = fma(_934, cbModelParam._m0[30u].z, fma(_933, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932)) - _901;
        float _945 = fma(_934, cbModelParam._m0[31u].z, fma(_933, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932)) - _905;
        float _946 = fma(_934, cbModelParam._m0[32u].z, fma(_933, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932)) - _909;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_901 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_905 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[35u].z) + ((((((_909 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1000 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_967.x + (-0.5));
        float _1002 = _1000 * (_967.y + (-0.5));
        float _1003 = _1000 * (_967.z + (-0.5));
        float _1010 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_974.x + (-0.5));
        float _1012 = _1010 * (_974.y + (-0.5));
        float _1013 = _1010 * (_974.z + (-0.5));
        float _1020 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_981.x + (-0.5));
        float _1022 = _1020 * (_981.y + (-0.5));
        float _1023 = _1020 * (_981.z + (-0.5));
        float _1030 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_988.x + (-0.5));
        float _1032 = _1030 * (_988.y + (-0.5));
        float _1033 = _1030 * (_988.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_315, _316, _317), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3756 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1064 + 1.0))) + _1069) * _1034;
        float _1079 = _1002 * 0.5;
        float _1080 = _1012 * 0.5;
        float _1081 = _1022 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_315, _316, _317), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3789 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1106 + 1.0))) + _1111) * _1035;
        float _1121 = _1003 * 0.5;
        float _1122 = _1013 * 0.5;
        float _1123 = _1023 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_315, _316, _317), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3822 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1148 + 1.0))) + _1153) * _1036;
        _1170 = _1003;
        _1171 = _1002;
        _1172 = _1001;
        _1173 = _1013;
        _1174 = _1012;
        _1175 = _1011;
        _1176 = _1023;
        _1177 = _1022;
        _1178 = _1021;
        _1179 = _1036;
        _1180 = _1035;
        _1181 = _1034;
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _861;
        _1171 = _861;
        _1172 = _861;
        _1173 = _861;
        _1174 = _861;
        _1175 = _861;
        _1176 = _861;
        _1177 = _861;
        _1178 = _861;
        _1179 = _861;
        _1180 = _861;
        _1181 = _861;
        _1182 = 0.0;
        _1183 = 0.0;
        _1184 = 0.0;
    }
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _873)) + _873;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _874)) + _874;
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _875)) + _875;
    float _1217 = fma(_1196, cbSceneParam._m0[89u].z, fma(_1195, cbSceneParam._m0[89u].y, _1194 * cbSceneParam._m0[89u].x));
    float _1220 = fma(_1196, cbSceneParam._m0[90u].z, fma(_1195, cbSceneParam._m0[90u].y, _1194 * cbSceneParam._m0[90u].x));
    float _1223 = fma(_1196, cbSceneParam._m0[91u].z, fma(_1195, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1194));
    float _1238 = _494 * 0.5;
    float _1239 = _495 * 0.5;
    float _1240 = _496 * 0.5;
    float _1241 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1244 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1247 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1281;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1254 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_860, _864, _867, _870));
        float _1258 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_862, _865, _868, _871));
        float _1262 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_863, _866, _869, _872));
        float _1269 = dot(vec4(cbModelParam._m0[39u]), vec4(_1238, _1239, _1240, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1292;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1283 = dot(vec4(cbModelParam._m0[40u]), vec4(_1238, _1239, _1240, 1.0));
        _1292 = dot(vec3(isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1283) ? 0.0 : (isnan(0.0) ? _1283 : max(0.0, _1283))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1292 = 1.0;
    }
    float _1296 = (_1292 * cbModelParam._m0[1u].x) + (_1281 * (1.0 - cbModelParam._m0[1u].x));
    float _1306 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _318);
    float _1307 = isnan(_1306) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1306 : min(cbModelParam._m0[25u].z, _1306));
    float _1389;
    float _1391;
    float _1393;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1356 = fma(_558, cbModelParam._m0[13u].z, fma(_554, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _550)) + cbModelParam._m0[13u].w;
        float _1360 = fma(_558, cbModelParam._m0[14u].z, fma(_554, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _550)) + cbModelParam._m0[14u].w;
        float _1364 = fma(_558, cbModelParam._m0[15u].z, fma(_554, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _550)) + cbModelParam._m0[15u].w;
        float _1367 = fma(_496, cbModelParam._m0[13u].z, fma(_495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494));
        float _1370 = fma(_496, cbModelParam._m0[14u].z, fma(_495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494));
        float _1373 = fma(_496, cbModelParam._m0[15u].z, fma(_495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494));
        float _1401;
        if (_1367 > 0.0)
        {
            _1401 = abs((1.0 - _1356) / _1367);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1356 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1401 = frontier_phi_16_14_ladder;
        }
        float _1576;
        if (_1370 > 0.0)
        {
            _1576 = abs((1.0 - _1360) / _1370);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1360 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1576 = frontier_phi_25_21_ladder;
        }
        float _1872;
        if (_1373 > 0.0)
        {
            _1872 = abs((1.0 - _1364) / _1373);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1364 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1872 = frontier_phi_37_32_ladder;
        }
        float _1874 = isnan(_1576) ? _1401 : (isnan(_1401) ? _1576 : min(_1401, _1576));
        float _1875 = isnan(_1872) ? _1874 : (isnan(_1874) ? _1872 : min(_1874, _1872));
        float _1879 = (_1875 * _1367) + _1356;
        float _1880 = (_1875 * _1370) + _1360;
        float _1881 = (_1875 * _1373) + _1364;
        float _1882 = _1875 * 9.9999997473787516355514526367188e-05;
        float _1884 = (-1.0) - _1882;
        float _1886 = _1882 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1881 > _1886) || ((_1881 < _1884) || ((_1880 > _1886) || ((_1880 < _1884) || ((_1879 < _1884) || (_1879 > _1886))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2026 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1881, cbModelParam._m0[9u].z, fma(_1880, cbModelParam._m0[9u].y, _1879 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1881, cbModelParam._m0[10u].z, fma(_1880, cbModelParam._m0[10u].y, _1879 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1881, cbModelParam._m0[11u].z, fma(_1880, cbModelParam._m0[11u].y, _1879 * cbModelParam._m0[11u].x))), _1307);
            frontier_phi_15_37_ladder = _2026.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2026.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2026.z * cbModelParam._m0[1u].y;
        }
        _1389 = frontier_phi_15_37_ladder_1;
        _1391 = frontier_phi_15_37_ladder;
        _1393 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_494, _495, _496), _1307);
        _1389 = _1377.x * cbModelParam._m0[1u].y;
        _1391 = _1377.y * cbModelParam._m0[1u].y;
        _1393 = _1377.z * cbModelParam._m0[1u].y;
    }
    float _1397 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _318);
    float _1398 = isnan(_1397) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1397 : min(cbModelParam._m0[25u].w, _1397));
    float _1490;
    float _1492;
    float _1494;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1454 = fma(_558, cbModelParam._m0[21u].z, fma(_554, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _550)) + cbModelParam._m0[21u].w;
        float _1458 = fma(_558, cbModelParam._m0[22u].z, fma(_554, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _550)) + cbModelParam._m0[22u].w;
        float _1462 = fma(_558, cbModelParam._m0[23u].z, fma(_554, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _550)) + cbModelParam._m0[23u].w;
        float _1465 = fma(_496, cbModelParam._m0[21u].z, fma(_495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494));
        float _1468 = fma(_496, cbModelParam._m0[22u].z, fma(_495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494));
        float _1471 = fma(_496, cbModelParam._m0[23u].z, fma(_495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494));
        float _1581;
        if (_1465 > 0.0)
        {
            _1581 = abs((1.0 - _1454) / _1465);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1454 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1581 = frontier_phi_27_23_ladder;
        }
        float _1899;
        if (_1468 > 0.0)
        {
            _1899 = abs((1.0 - _1458) / _1468);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1458 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1899 = frontier_phi_39_34_ladder;
        }
        float _2237;
        if (_1471 > 0.0)
        {
            _2237 = abs((1.0 - _1462) / _1471);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1462 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2237 = frontier_phi_49_46_ladder;
        }
        float _2239 = isnan(_1899) ? _1581 : (isnan(_1581) ? _1899 : min(_1581, _1899));
        float _2240 = isnan(_2237) ? _2239 : (isnan(_2239) ? _2237 : min(_2239, _2237));
        float _2244 = (_2240 * _1465) + _1454;
        float _2245 = (_2240 * _1468) + _1458;
        float _2246 = (_2240 * _1471) + _1462;
        float _2247 = _2240 * 9.9999997473787516355514526367188e-05;
        float _2248 = (-1.0) - _2247;
        float _2250 = _2247 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2246 > _2250) || ((_2246 < _2248) || ((_2245 > _2250) || ((_2245 < _2248) || ((_2244 < _2248) || (_2244 > _2250))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2368 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2246, cbModelParam._m0[17u].z, fma(_2245, cbModelParam._m0[17u].y, _2244 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2246, cbModelParam._m0[18u].z, fma(_2245, cbModelParam._m0[18u].y, _2244 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2246, cbModelParam._m0[19u].z, fma(_2245, cbModelParam._m0[19u].y, _2244 * cbModelParam._m0[19u].x))), _1398);
            frontier_phi_24_49_ladder = _2368.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2368.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2368.x * cbModelParam._m0[1u].z;
        }
        _1490 = frontier_phi_24_49_ladder_2;
        _1492 = frontier_phi_24_49_ladder_1;
        _1494 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_494, _495, _496), _1398);
        _1490 = _1474.x * cbModelParam._m0[1u].z;
        _1492 = _1474.y * cbModelParam._m0[1u].z;
        _1494 = _1474.z * cbModelParam._m0[1u].z;
    }
    float _1507 = (((_521 * _471) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1490 - _1389)) + _1389);
    float _1509 = (((_521 * _473) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1492 - _1391)) + _1391);
    float _1511 = (((_521 * _474) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1494 - _1393)) + _1393);
    float _1514 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1509, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1517 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1509, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1520 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1509, cbSceneParam._m0[91u].y, _1507 * cbSceneParam._m0[91u].x));
    float _1555 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1559 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1563 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1567 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1568 = _1555 / _1567;
    float _1569 = _1559 / _1567;
    float _1570 = _1563 / _1567;
    float _1717;
    float _1718;
    float _1719;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1597 = ((uint(_1570 > cbSceneParam._m0[59u].y) + uint(_1570 > cbSceneParam._m0[59u].x)) + uint(_1570 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1598 = _1597 + 43u;
        uint _1606 = _1597 + 44u;
        uint _1614 = _1597 + 45u;
        uint _1622 = _1597 + 46u;
        float _1633 = fma(_1567, cbSceneParam._m0[_1598].w, fma(_1563, cbSceneParam._m0[_1598].z, fma(_1559, cbSceneParam._m0[_1598].y, _1555 * cbSceneParam._m0[_1598].x)));
        float _1637 = fma(_1567, cbSceneParam._m0[_1606].w, fma(_1563, cbSceneParam._m0[_1606].z, fma(_1559, cbSceneParam._m0[_1606].y, _1555 * cbSceneParam._m0[_1606].x)));
        float _1645 = fma(_1567, cbSceneParam._m0[_1622].w, fma(_1563, cbSceneParam._m0[_1622].z, fma(_1559, cbSceneParam._m0[_1622].y, _1555 * cbSceneParam._m0[_1622].x)));
        float _1650 = cbSceneParam._m0[33u].z * _1645;
        float _1652 = cbSceneParam._m0[33u].w * _1645;
        float _1655 = fma(_1567, cbSceneParam._m0[_1614].w, fma(_1563, cbSceneParam._m0[_1614].z, fma(_1559, cbSceneParam._m0[_1614].y, _1555 * cbSceneParam._m0[_1614].x))) / _1645;
        float _1703 = (cbSceneParam._m0[33u].x - sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570))) * cbSceneParam._m0[33u].y;
        float _3948 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1710 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1650 + _1633) / _1645, (_1652 + _1637) / _1645), _1655), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1652 + _1633) / _1645, (_1637 - _1650) / _1645), _1655), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1633 - _1650) / _1645, (_1637 - _1652) / _1645), _1655), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1633 - _1652) / _1645, (_1650 + _1637) / _1645), _1655), 0.0)).x), vec4(0.25)));
        _1717 = 1.0 - (_1710 * cbSceneParam._m0[34u].x);
        _1718 = 1.0 - (_1710 * cbSceneParam._m0[34u].y);
        _1719 = 1.0 - (_1710 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1717 = 1.0;
        _1718 = 1.0;
        _1719 = 1.0;
    }
    float _1783;
    float _1785;
    float _1787;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1771 = fma(_1567, cbSceneParam._m0[63u].w, fma(_1563, cbSceneParam._m0[63u].z, fma(_1559, cbSceneParam._m0[63u].y, _1555 * cbSceneParam._m0[63u].x)));
        float _1772 = fma(_1567, cbSceneParam._m0[60u].w, fma(_1563, cbSceneParam._m0[60u].z, fma(_1559, cbSceneParam._m0[60u].y, _1555 * cbSceneParam._m0[60u].x))) / _1771;
        float _1773 = fma(_1567, cbSceneParam._m0[61u].w, fma(_1563, cbSceneParam._m0[61u].z, fma(_1559, cbSceneParam._m0[61u].y, _1555 * cbSceneParam._m0[61u].x))) / _1771;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1772 >= cbSceneParam._m0[64u].x) && (_1773 >= cbSceneParam._m0[64u].y)) && (_1772 <= cbSceneParam._m0[64u].z)) && (_1773 <= cbSceneParam._m0[64u].w))
        {
            float _1912 = fma(_1567, cbSceneParam._m0[62u].w, fma(_1563, cbSceneParam._m0[62u].z, fma(_1559, cbSceneParam._m0[62u].y, _1555 * cbSceneParam._m0[62u].x))) / _1771;
            float _1916 = isnan(cbSceneParam._m0[41u].w) ? _1912 : (isnan(_1912) ? cbSceneParam._m0[41u].w : max(_1912, cbSceneParam._m0[41u].w));
            float _1959 = (cbSceneParam._m0[33u].x - sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570))) * cbSceneParam._m0[33u].y;
            float _3964 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
            float _1966 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1772, cbSceneParam._m0[33u].w + _1773), _1916), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1772, _1773 - cbSceneParam._m0[33u].z), _1916), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1772 - cbSceneParam._m0[33u].z, _1773 - cbSceneParam._m0[33u].w), _1916), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1772 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1773), _1916), 0.0)).x), vec4(0.25)));
            float _1970 = 1.0 - (_1966 * cbSceneParam._m0[34u].x);
            float _1971 = 1.0 - (_1966 * cbSceneParam._m0[34u].y);
            float _1972 = 1.0 - (_1966 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1971) ? _1718 : (isnan(_1718) ? _1971 : min(_1718, _1971));
            frontier_phi_36_35_ladder_1 = isnan(_1972) ? _1719 : (isnan(_1719) ? _1972 : min(_1719, _1972));
            frontier_phi_36_35_ladder_2 = isnan(_1970) ? _1717 : (isnan(_1717) ? _1970 : min(_1717, _1970));
        }
        else
        {
            frontier_phi_36_35_ladder = _1718;
            frontier_phi_36_35_ladder_1 = _1719;
            frontier_phi_36_35_ladder_2 = _1717;
        }
        _1783 = frontier_phi_36_35_ladder_2;
        _1785 = frontier_phi_36_35_ladder;
        _1787 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1783 = _1717;
        _1785 = _1718;
        _1787 = _1719;
    }
    uvec4 _1792 = floatBitsToUint(cbInstanceData._m0[_445 + 5u]);
    uint _1794 = _1792.x * 14u;
    uint _1795 = _1794 + 13u;
    float _1802 = _486 + (-1.0);
    float _1807 = (cbLight._m0[_1795].x * _1802) + 1.0;
    float _1808 = (cbLight._m0[_1795].y * _1802) + 1.0;
    float _1809 = (cbLight._m0[_1795].z * _1802) + 1.0;
    float _1810 = (cbLight._m0[_1795].w * _1802) + 1.0;
    uint _1811 = _1794 + 5u;
    float _1817 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
    uint _1821 = _1794 + 4u;
    float _1831 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
    uint _1835 = _1794 | 1u;
    float _1846 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_315, _316, _317));
    float _1849 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_315, _316, _317));
    float _4000 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _4011 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1854 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * 0.3183098733425140380859375;
    float _1856 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.3183098733425140380859375;
    float _1863 = ((cbLight._m0[_1811].x * _1817) * _1856) + (((cbLight._m0[_1821].x * _1783) * _1831) * _1854);
    float _1864 = ((_1817 * cbLight._m0[_1811].y) * _1856) + (((cbLight._m0[_1821].y * _1785) * _1831) * _1854);
    float _1865 = ((_1817 * cbLight._m0[_1811].z) * _1856) + (((cbLight._m0[_1821].z * _1787) * _1831) * _1854);
    uvec4 _1869 = floatBitsToUint(cbLight._m0[_1794 + 12u]);
    bool _1871 = _1869.x == 0u;
    float _1973;
    float _1975;
    float _1977;
    if (_1871)
    {
        _1973 = _1863;
        _1975 = _1864;
        _1977 = _1865;
    }
    else
    {
        uint _1981 = _1794 + 6u;
        float _1997 = (dot(vec3(cbLight._m0[_1794 + 2u].xyz), vec3(_315, _316, _317)) * 0.5) + 0.5;
        float _1998 = _1997 * _1997;
        float _4022 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _1999 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2000 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _1973 = (((cbLight._m0[_1981].x * 0.3183098733425140380859375) * _1999) * _2000) + _1863;
        _1975 = (((cbLight._m0[_1981].y * 0.3183098733425140380859375) * _1999) * _2000) + _1864;
        _1977 = (((cbLight._m0[_1981].z * 0.3183098733425140380859375) * _1999) * _2000) + _1865;
    }
    bool _1980 = _1869.y == 0u;
    float _2035;
    float _2037;
    float _2039;
    if (_1980)
    {
        _2035 = _1973;
        _2037 = _1975;
        _2039 = _1977;
    }
    else
    {
        uint _2208 = _1794 + 7u;
        float _2224 = (dot(vec3(cbLight._m0[_1794 + 3u].xyz), vec3(_315, _316, _317)) * 0.5) + 0.5;
        float _2225 = _2224 * _2224;
        float _4038 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2226 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2227 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _2035 = (((cbLight._m0[_2208].x * 0.3183098733425140380859375) * _2226) * _2227) + _1973;
        _2037 = (((cbLight._m0[_2208].y * 0.3183098733425140380859375) * _2226) * _2227) + _1975;
        _2039 = (((cbLight._m0[_2208].z * 0.3183098733425140380859375) * _2226) * _2227) + _1977;
    }
    uint _2042 = _1794 + 8u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1794].w)) * _318) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1794].x + _396;
    float _2058 = cbLight._m0[_1794].y + _397;
    float _2059 = cbLight._m0[_1794].z + _398;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1794].xyz));
    float _4054 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _2071 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _2072 = dot(vec3(_315, _316, _317), vec3(_2064, _2065, _2066));
    float _4076 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _2076 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_2064, _2065, _2066));
    float _4087 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2080 = _2056 * _2056;
    float _2084 = ((_2075 * _2075) * (_2080 + (-1.0))) + 1.0;
    float _2092 = exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0);
    float _2093 = 0.959999978542327880859375 - _468;
    float _2095 = 0.959999978542327880859375 - _469;
    float _2096 = 0.959999978542327880859375 - _470;
    float _2103 = 1.0 - _2056;
    float _2114 = (0.5 / (((_2071 * ((_2070 * _2103) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2103) + _2056) * _2070))) * _2070;
    float _4098 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2116 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2080 / ((_2084 * _2084) * 3.141590118408203125));
    uint _2130 = _1794 + 9u;
    float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1835].w)) * _318) * 0.949999988079071044921875);
    float _2142 = _2141 * _2141;
    float _2143 = cbLight._m0[_1835].x + _396;
    float _2144 = cbLight._m0[_1835].y + _397;
    float _2145 = cbLight._m0[_1835].z + _398;
    float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
    float _2150 = _2149 * _2143;
    float _2151 = _2149 * _2144;
    float _2152 = _2149 * _2145;
    float _2153 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1835].xyz));
    float _4109 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _2157 = dot(vec3(_315, _316, _317), vec3(_2150, _2151, _2152));
    float _4120 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2161 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_2150, _2151, _2152));
    float _4131 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2165 = _2142 * _2142;
    float _2169 = ((_2160 * _2160) * (_2165 + (-1.0))) + 1.0;
    float _2176 = exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0);
    float _2183 = 1.0 - _2142;
    float _2193 = (0.5 / (((_2071 * ((_2156 * _2183) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2183) + _2142) * _2156))) * _2156;
    float _4142 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2165 / ((_2169 * _2169) * 3.141590118408203125));
    float _2205 = (((((_2176 * _2093) + _471) * cbLight._m0[_2130].x) * _2195) * _1817) + ((((cbLight._m0[_2042].x * _1783) * ((_2092 * _2093) + _471)) * _2116) * _1831);
    float _2206 = (((((_2176 * _2095) + _473) * cbLight._m0[_2130].y) * _2195) * _1817) + ((((cbLight._m0[_2042].y * _1785) * ((_2092 * _2095) + _473)) * _2116) * _1831);
    float _2207 = (((((_2176 * _2096) + _474) * cbLight._m0[_2130].z) * _2195) * _1817) + ((((cbLight._m0[_2042].z * _1787) * ((_2092 * _2096) + _474)) * _2116) * _1831);
    float _2263;
    float _2265;
    float _2267;
    if (_1871)
    {
        _2263 = _2205;
        _2265 = _2206;
        _2267 = _2207;
    }
    else
    {
        uint _2269 = _1794 + 2u;
        uint _2273 = _1794 + 10u;
        float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2269].w)) * _318) * 0.949999988079071044921875);
        float _2288 = _2287 * _2287;
        float _2289 = cbLight._m0[_2269].x + _396;
        float _2290 = cbLight._m0[_2269].y + _397;
        float _2291 = cbLight._m0[_2269].z + _398;
        float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
        float _2296 = _2295 * _2289;
        float _2297 = _2295 * _2290;
        float _2298 = _2295 * _2291;
        float _2299 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_2269].xyz));
        float _4153 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2303 = dot(vec3(_315, _316, _317), vec3(_2296, _2297, _2298));
        float _4164 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2307 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_2296, _2297, _2298));
        float _4175 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2311 = _2288 * _2288;
        float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
        float _2322 = exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0);
        float _2329 = 1.0 - _2288;
        float _2339 = (0.5 / (((_2071 * ((_2302 * _2329) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2329) + _2288) * _2302))) * _2302;
        float _4186 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2341 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
        float _2342 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _2263 = (((((_2322 * _2093) + _471) * cbLight._m0[_2273].x) * _2341) * _2342) + _2205;
        _2265 = (((((_2322 * _2095) + _473) * cbLight._m0[_2273].y) * _2341) * _2342) + _2206;
        _2267 = (((((_2322 * _2096) + _474) * cbLight._m0[_2273].z) * _2341) * _2342) + _2207;
    }
    float _2373;
    float _2375;
    float _2377;
    if (_1980)
    {
        _2373 = _2263;
        _2375 = _2265;
        _2377 = _2267;
    }
    else
    {
        uint _2384 = _1794 + 3u;
        uint _2388 = _1794 + 11u;
        float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _318) * 0.949999988079071044921875);
        float _2403 = _2402 * _2402;
        float _2404 = cbLight._m0[_2384].x + _396;
        float _2405 = cbLight._m0[_2384].y + _397;
        float _2406 = cbLight._m0[_2384].z + _398;
        float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
        float _2411 = _2410 * _2404;
        float _2412 = _2410 * _2405;
        float _2413 = _2410 * _2406;
        float _2414 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_2384].xyz));
        float _4202 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2418 = dot(vec3(_315, _316, _317), vec3(_2411, _2412, _2413));
        float _4213 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2422 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2411, _2412, _2413));
        float _4224 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2426 = _2403 * _2403;
        float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
        float _2437 = exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0);
        float _2444 = 1.0 - _2403;
        float _2454 = (0.5 / (((_2071 * ((_2417 * _2444) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2444) + _2403) * _2417))) * _2417;
        float _4235 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2456 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
        float _2457 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _2373 = (((((_2437 * _2093) + _471) * cbLight._m0[_2388].x) * _2456) * _2457) + _2263;
        _2375 = (((((_2437 * _2095) + _473) * cbLight._m0[_2388].y) * _2456) * _2457) + _2265;
        _2377 = (((((_2437 * _2096) + _474) * cbLight._m0[_2388].z) * _2456) * _2457) + _2267;
    }
    float _2522;
    float _2524;
    float _2526;
    float _2528;
    float _2530;
    float _2532;
    if (_1792.y == 0u)
    {
        uvec4 _2478 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2479 = _2478.x;
        uint _2490 = uint((float(_2478.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2479))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2479)));
        float _2500 = (log2(_1570 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2501 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        uint _2504 = uint(isnan(14.0) ? _2501 : (isnan(_2501) ? 14.0 : min(_2501, 14.0)));
        uvec4 _2509 = texelFetch(g_lightClusterGridBuffer, int(((_2504 << 2u) + (_2490 << 6u)) >> 2u));
        uint _2510 = _2509.x;
        uint _2511 = _2478.z;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        if (((((1u << ((_2511 >> 4u) & 15u)) + 4294967295u) & _2510) == 0u) || ((_2511 & 240u) == 0u))
        {
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
            _2599 = 0.0;
        }
        else
        {
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2600;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            uint _2739 = 0u;
            uint _2748;
            bool _2749;
            for (;;)
            {
                _2748 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2739 << 2u)) >> 2u)).x;
                _2749 = _2748 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2749)
                {
                    frontier_phi_68_pred = _2738;
                    frontier_phi_68_pred_1 = _2737;
                    frontier_phi_68_pred_2 = _2736;
                    frontier_phi_68_pred_3 = _2734;
                    frontier_phi_68_pred_4 = _2733;
                    frontier_phi_68_pred_5 = _2735;
                }
                else
                {
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    uint _2863;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2737;
                    _2862 = _2738;
                    _2863 = _2748;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    for (;;)
                    {
                        uint _2867 = uint(findLSB(_2863)) + (_2739 << 5u);
                        uint _2864 = (_2863 + 4294967295u) & _2863;
                        uint _2869 = _2867 * 48u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2889 = (_2867 * 48u) + 4u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 3u)).x));
                        uint _2908 = (_2867 * 48u) + 8u;
                        vec3 _2919 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x));
                        float _2923 = _2883.x - _1568;
                        float _2924 = _2883.y - _1569;
                        float _2925 = _2883.z - _1570;
                        float _2926 = dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925));
                        float _2929 = inversesqrt(_2926);
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2933 = dot(vec3(_426, _429, _432), vec3(_2930, _2931, _2932));
                        float _2938 = 1.0 - (_2926 * _2883.w);
                        float _4261 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2939 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _2940 = sqrt(_2926) * _2902.w;
                        float _2943 = 1.39999997615814208984375 / (_2940 + 1.39999997615814208984375);
                        float _2944 = _2943 * _2943;
                        float _2947 = ((1.0 - _2944) * _2933) + _2944;
                        float _2950 = _2940 * _2940;
                        float _2954 = ((isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0))) * _2939) / ((_2950 * 0.699999988079071044921875) + 1.0);
                        float _2958 = (-0.0) - _1568;
                        float _2959 = (-0.0) - _1569;
                        float _2960 = (-0.0) - _1570;
                        float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
                        float _2965 = _2964 * _2958;
                        float _2966 = _2964 * _2959;
                        float _2967 = _2964 * _2960;
                        float _2974 = exp2(log2(1.0 / ((_2950 * 3.5) + 5.0)) * 0.25);
                        float _2975 = 1.0 - _502;
                        float _2982 = sqrt(1.0 - ((1.0 - (_2975 * _2975)) * (1.0 - (_2974 * _2974))));
                        float _2983 = _2982 * _2982;
                        float _2984 = _2983 * _2983;
                        float _2985 = _2965 + _2930;
                        float _2986 = _2966 + _2931;
                        float _2987 = _2967 + _2932;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2995 = dot(vec3(_426, _429, _432), vec3(_2965, _2966, _2967));
                        float _4277 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2998 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _2999 = dot(vec3(_426, _429, _432), vec3(_2991 * _2985, _2991 * _2986, _2991 * _2987));
                        float _4288 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3002 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _3006 = ((_3002 * _3002) * (_2984 + (-1.0))) + 1.0;
                        float _3007 = _2943 * _2983;
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2933) + _3008;
                        float _4299 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _3013 = 1.0 - _2983;
                        float _3023 = (0.5 / (((_3012 * ((_2998 * _3013) + _2983)) + 9.9999999392252902907785028219223e-09) + (((_3012 * _3013) + _2983) * _2998))) * _3012;
                        float _4310 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3034 = (((_2984 * 3.1415927410125732421875) * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) / ((_3006 * _3006) * ((_2950 * 2.1991131305694580078125) + 3.141590118408203125))) * _2939;
                        _2792 = (_2954 * _2902.x) + _2860;
                        _2793 = (_2954 * _2902.y) + _2861;
                        _2794 = (_2954 * _2902.z) + _2862;
                        _2789 = (_3034 * _2919.x) + _2857;
                        _2790 = (_3034 * _2919.y) + _2858;
                        _2791 = (_3034 * _2919.z) + _2859;
                        if (_2864 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2864;
                        }
                    }
                    frontier_phi_68_pred = _2794;
                    frontier_phi_68_pred_1 = _2793;
                    frontier_phi_68_pred_2 = _2792;
                    frontier_phi_68_pred_3 = _2790;
                    frontier_phi_68_pred_4 = _2789;
                    frontier_phi_68_pred_5 = _2791;
                }
                _2600 = frontier_phi_68_pred;
                _2598 = frontier_phi_68_pred_1;
                _2596 = frontier_phi_68_pred_2;
                _2592 = frontier_phi_68_pred_3;
                _2590 = frontier_phi_68_pred_4;
                _2594 = frontier_phi_68_pred_5;
                uint _2740 = _2739 + 1u;
                if (_2740 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2733 = _2590;
                    _2734 = _2592;
                    _2735 = _2594;
                    _2736 = _2596;
                    _2737 = _2598;
                    _2738 = _2600;
                    _2739 = _2740;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
            _2599 = _2600;
        }
        uvec4 _2603 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2604 = _2603.z;
        uint _2606 = (_2604 >> 8u) & 15u;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        if (((4294967295u << _2606) & _2510) == 0u)
        {
            _2701 = _2589;
            _2703 = _2591;
            _2705 = _2593;
            _2707 = _2595;
            _2709 = _2597;
            _2711 = _2599;
        }
        else
        {
            float _2726 = inversesqrt(dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570)));
            float _2727 = _2726 * _1568;
            float _2728 = _2726 * _1569;
            float _2729 = _2726 * _1570;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2606 < ((_2604 >> 12u) & 15u))
            {
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2712;
                float _2840 = _2589;
                float _2841 = _2591;
                float _2842 = _2593;
                float _2843 = _2595;
                float _2844 = _2597;
                float _2845 = _2599;
                uint _2846 = _2606;
                uint _2855;
                bool _2856;
                for (;;)
                {
                    _2855 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2846 << 2u)) >> 2u)).x;
                    _2856 = _2855 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2856)
                    {
                        frontier_phi_74_pred = _2842;
                        frontier_phi_74_pred_1 = _2841;
                        frontier_phi_74_pred_2 = _2840;
                        frontier_phi_74_pred_3 = _2845;
                        frontier_phi_74_pred_4 = _2844;
                        frontier_phi_74_pred_5 = _2843;
                    }
                    else
                    {
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3052 = _2840;
                        float _3053 = _2841;
                        float _3054 = _2842;
                        float _3055 = _2843;
                        float _3056 = _2844;
                        float _3057 = _2845;
                        uint _3058 = _2855;
                        uint _3059;
                        vec4 _3084;
                        float _3085;
                        vec4 _3100;
                        vec3 _3112;
                        vec4 _3128;
                        vec4 _3144;
                        float _3191;
                        bool _3192;
                        for (;;)
                        {
                            uint _3069 = ((_2846 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3058));
                            _3059 = (_3058 + 4294967295u) & _3058;
                            uint _3071 = _3069 * 40u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            _3085 = _3084.w;
                            uint _3087 = (_3069 * 40u) + 4u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3102 = (_3069 * 40u) + 8u;
                            _3112 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x));
                            uint _3115 = (_3069 * 40u) + 16u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3131 = (_3069 * 40u) + 20u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3147 = (_3069 * 40u) + 24u;
                            vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3166 = (_3069 * 40u) + 28u;
                            vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            _3191 = fma(_1570, _3179.z, fma(_1569, _3179.y, _3179.x * _1568)) + _3179.w;
                            _3192 = !((fma(_1570, _3160.z, fma(_1569, _3160.y, _3160.x * _1568)) + _3160.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3192)
                            {
                                float _3219 = _3084.x - _1568;
                                float _3220 = _3084.y - _1569;
                                float _3221 = _3084.z - _1570;
                                float _3222 = dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221));
                                float _3225 = inversesqrt(_3222);
                                float _3226 = _3225 * _3219;
                                float _3227 = _3225 * _3220;
                                float _3228 = _3225 * _3221;
                                float _3232 = 1.0 - (_3222 / (_3085 * _3085));
                                float _4321 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3233 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3237 = sqrt(_3222) * _3100.w;
                                float _3239 = 1.39999997615814208984375 / (_3237 + 1.39999997615814208984375);
                                float _3240 = _3239 * _3239;
                                float _3243 = ((1.0 - _3240) * dot(vec3(_3226, _3227, _3228), vec3(_426, _429, _432))) + _3240;
                                float _3246 = _3237 * _3237;
                                float _3250 = (fma(_1570, _3128.z, fma(_1569, _3128.y, _3128.x * _1568)) + _3128.w) / _3191;
                                float _3251 = (fma(_1570, _3144.z, fma(_1569, _3144.y, _3144.x * _1568)) + _3144.w) / _3191;
                                float _3255 = 1.0 - dot(vec2(_3250, _3251), vec2(_3250, _3251));
                                float _4337 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3257 = _3256 * (((isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))) * _3233) / ((_3246 * 0.699999988079071044921875) + 1.0));
                                float _3269 = exp2(log2(1.0 / ((_3246 * 3.5) + 5.0)) * 0.25);
                                float _3270 = 1.0 - _502;
                                float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                                float _3278 = _3277 * _3277;
                                float _3279 = _3278 * _3278;
                                float _3280 = _3226 - _2727;
                                float _3281 = _3227 - _2728;
                                float _3282 = _3228 - _2729;
                                float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                                float _3290 = dot(vec3(_426, _429, _432), vec3((-0.0) - _2727, (-0.0) - _2728, (-0.0) - _2729));
                                float _4348 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3293 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3294 = dot(vec3(_426, _429, _432), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                                float _4359 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3297 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                                float _3302 = _3239 * _3278;
                                float _3303 = _3302 * _3302;
                                float _3309 = ((1.0 - _3303) * dot(vec3(_426, _429, _432), vec3(_3226, _3227, _3228))) + _3303;
                                float _4370 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3311 = 1.0 - _3278;
                                float _3321 = (0.5 / (((_3310 * ((_3293 * _3311) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3310 * _3311) + _3278) * _3293))) * _3310;
                                float _4381 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3331 = (_3256 * _3233) * (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) / ((_3301 * _3301) * ((_3246 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3331 * _3112.z;
                                frontier_phi_80_pred_1 = _3331 * _3112.y;
                                frontier_phi_80_pred_2 = _3331 * _3112.x;
                                frontier_phi_80_pred_3 = _3257 * _3100.z;
                                frontier_phi_80_pred_4 = _3257 * _3100.y;
                                frontier_phi_80_pred_5 = _3257 * _3100.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3337 = frontier_phi_80_pred;
                            _3336 = frontier_phi_80_pred_1;
                            _3335 = frontier_phi_80_pred_2;
                            _3340 = frontier_phi_80_pred_3;
                            _3339 = frontier_phi_80_pred_4;
                            _3338 = frontier_phi_80_pred_5;
                            _3042 = _3338 + _3055;
                            _3043 = _3339 + _3056;
                            _3044 = _3340 + _3057;
                            _3039 = _3335 + _3052;
                            _3040 = _3336 + _3053;
                            _3041 = _3337 + _3054;
                            if (_3059 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3059;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3041;
                        frontier_phi_74_pred_1 = _3040;
                        frontier_phi_74_pred_2 = _3039;
                        frontier_phi_74_pred_3 = _3044;
                        frontier_phi_74_pred_4 = _3043;
                        frontier_phi_74_pred_5 = _3042;
                    }
                    _2706 = frontier_phi_74_pred;
                    _2704 = frontier_phi_74_pred_1;
                    _2702 = frontier_phi_74_pred_2;
                    _2712 = frontier_phi_74_pred_3;
                    _2710 = frontier_phi_74_pred_4;
                    _2708 = frontier_phi_74_pred_5;
                    uint _2847 = _2846 + 1u;
                    if (_2847 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2840 = _2702;
                        _2841 = _2704;
                        _2842 = _2706;
                        _2843 = _2708;
                        _2844 = _2710;
                        _2845 = _2712;
                        _2846 = _2847;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2710;
                frontier_phi_62_63_ladder_1 = _2708;
                frontier_phi_62_63_ladder_2 = _2706;
                frontier_phi_62_63_ladder_3 = _2712;
                frontier_phi_62_63_ladder_4 = _2704;
                frontier_phi_62_63_ladder_5 = _2702;
            }
            else
            {
                frontier_phi_62_63_ladder = _2597;
                frontier_phi_62_63_ladder_1 = _2595;
                frontier_phi_62_63_ladder_2 = _2593;
                frontier_phi_62_63_ladder_3 = _2599;
                frontier_phi_62_63_ladder_4 = _2591;
                frontier_phi_62_63_ladder_5 = _2589;
            }
            _2701 = frontier_phi_62_63_ladder_5;
            _2703 = frontier_phi_62_63_ladder_4;
            _2705 = frontier_phi_62_63_ladder_2;
            _2707 = frontier_phi_62_63_ladder_1;
            _2709 = frontier_phi_62_63_ladder;
            _2711 = frontier_phi_62_63_ladder_3;
        }
        float _2716 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2522 = (_2716 * _2707) + _2035;
        _2524 = (_2716 * _2709) + _2037;
        _2526 = (_2716 * _2711) + _2039;
        _2528 = ((_2701 * _471) * _2716) + _2373;
        _2530 = ((_2703 * _473) * _2716) + _2375;
        _2532 = ((_2705 * _474) * _2716) + _2377;
    }
    else
    {
        _2522 = _2035;
        _2524 = _2037;
        _2526 = _2039;
        _2528 = _2373;
        _2530 = _2375;
        _2532 = _2377;
    }
    float _4397 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4408 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4419 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    uint _2552 = _445 + 6u;
    float _2560 = _404 / cbSceneParam._m0[86u].x;
    float _2561 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2575 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2560, _2561, (log2((isnan(cbSceneParam._m0[77u].w) ? _338 : (isnan(_338) ? cbSceneParam._m0[77u].w : min(_338, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2577 = _2575.x;
    float _2578 = _2575.y;
    float _2579 = _2575.z;
    float _2580 = _2575.w;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    if (_338 > cbSceneParam._m0[78u].w)
    {
        float _2614 = isnan(_338) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _338 : min(cbSceneParam._m0[80u].w, _338));
        float _2615 = _2614 / _338;
        float _2626 = _2615 * _389;
        float _2627 = _390 * _2615;
        float _2628 = (-0.0) - _2627;
        float _2629 = _2615 * _391;
        float _2631 = (cbSceneParam._m0[77u].w * _2628) / _2614;
        float _2632 = _2631 + cbSceneParam._m0[79u].w;
        float _2633 = cbSceneParam._m0[79u].w - _2627;
        float _2639 = sqrt(((_2626 * _2626) + (_2627 * _2627)) + (_2629 * _2629));
        float _2642 = (1.0 - (cbSceneParam._m0[77u].w / _2614)) * _2639;
        float _2647 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2649 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2802;
        if (abs((_2628 - _2631) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2802 = ((((_2632 > 0.0) ? exp2(_2647 * _2632) : (2.0 - exp2(_2649 * _2632))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2642;
        }
        else
        {
            float _2762 = 1.0 / cbSceneParam._m0[80u].x;
            float _2763 = isnan(_2633) ? _2632 : (isnan(_2632) ? _2633 : max(_2632, _2633));
            float _2764 = isnan(_2633) ? _2632 : (isnan(_2632) ? _2633 : min(_2632, _2633));
            float _2773 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : min(_2763, 0.0));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            _2802 = ((abs(_2639 / _2628) * cbSceneParam._m0[80u].y) * ((((_2773 - _2774) * 2.0) - ((exp2(_2647 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)))) - exp2(_2647 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))))) * _2762)) - ((exp2(_2649 * _2773) - exp2(_2649 * _2774)) * _2762))) + (_2642 * cbSceneParam._m0[80u].z);
        }
        vec4 _2804 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2560, _2561, 1.0), 0.0);
        float _2813 = exp2((_2802 * (-1.44269502162933349609375)) * (1.0 - _2804.w));
        float _2814 = log2(_2813);
        float _2830 = log2(_2580);
        _2651 = (exp2(_2830 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].x)) * _2804.x) / cbSceneParam._m0[78u].x)) + _2577;
        _2653 = (exp2(_2830 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].y)) * _2804.y) / cbSceneParam._m0[78u].y)) + _2578;
        _2655 = (exp2(_2830 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].z)) * _2804.z) / cbSceneParam._m0[78u].z)) + _2579;
        _2657 = _2813 * _2580;
    }
    else
    {
        _2651 = _2577;
        _2653 = _2578;
        _2655 = _2579;
        _2657 = _2580;
    }
    float _2669 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2670 = _2669 == 3.0;
    float _2671 = log2(_2657);
    float _2678 = exp2(_2671 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2522 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _486))) + ((_2528 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1296)) * cbPerFrame._m0[3u].x));
    float _2679 = exp2(_2671 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2524 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _486))) + ((_2530 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1296)) * cbPerFrame._m0[3u].x));
    float _2680 = exp2(_2671 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2526 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _486))) + ((_2532 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1296)) * cbPerFrame._m0[3u].x));
    float _2689 = (_2669 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2689 * (_2670 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2651)));
    SV_Target.y = _2689 * (_2670 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2653)));
    SV_Target.z = _2689 * (_2670 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2655)));
    SV_Target.w = cbInstanceData._m0[_2552].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2552].w;
}


