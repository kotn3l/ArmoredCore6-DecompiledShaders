#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _842;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    float _230 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _231 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _244 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_230 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_231 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _265 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _230) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _231) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3202 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0))));
    float _285 = fma(_282, _214, fma(_275, _206 * TANGENT.x, (_192 * _185) * _273));
    float _288 = fma(_282, _215, fma(_275, _206 * TANGENT.y, (_192 * _186) * _273));
    float _291 = fma(_282, _216, fma(_275, _206 * TANGENT.z, (_192 * _187) * _273));
    float _295 = inversesqrt(dot(vec3(_285, _288, _291), vec3(_285, _288, _291)));
    float _296 = _295 * _285;
    float _297 = _295 * _288;
    float _298 = _295 * _291;
    float _3213 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _299 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
    float _3224 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3235 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3246 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3257 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _303 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _319 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _360 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _370 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _360);
    float _371 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _360);
    float _372 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _360);
    float _376 = inversesqrt(dot(vec3(_370, _371, _372), vec3(_370, _371, _372)));
    float _377 = _370 * _376;
    float _378 = _371 * _376;
    float _379 = _372 * _376;
    float _385 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _386 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _407 = fma(_298, cbSceneParam._m0[5u].z, fma(_297, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _296));
    float _410 = fma(_298, cbSceneParam._m0[6u].z, fma(_297, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _296));
    float _413 = fma(_298, cbSceneParam._m0[7u].z, fma(_297, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _296));
    uint _426 = uint(roundEven(NORMAL.w)) * 13u;
    uint _429 = (_426 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _435 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0)))) * cbInstanceData._m0[_429].x;
    float _436 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0)))) * cbInstanceData._m0[_429].y;
    float _437 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)))) * cbInstanceData._m0[_429].z;
    float _3268 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
    float _3279 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _3290 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _441 = 1.0 - _303;
    float _442 = _438 * _441;
    float _443 = _439 * _441;
    float _444 = _440 * _441;
    float _449 = (_438 + (-0.039999999105930328369140625)) * _303;
    float _450 = (_439 + (-0.039999999105930328369140625)) * _303;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _303;
    float _452 = _449 + 0.039999999105930328369140625;
    float _454 = _450 + 0.039999999105930328369140625;
    float _455 = _451 + 0.039999999105930328369140625;
    vec4 _464 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _385, cbSceneParam._m0[86u].y * _386));
    float _467 = _464.x * TEXCOORD.z;
    float _468 = dot(vec3(_296, _297, _298), vec3(_377, _378, _379));
    float _471 = _468 * 2.0;
    float _475 = (_471 * _296) - _377;
    float _476 = (_471 * _297) - _378;
    float _477 = (_471 * _298) - _379;
    float _481 = abs(dot(vec3(_377, _378, _379), vec3(_296, _297, _298)));
    float _3301 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _483 = sqrt(_299);
    float _496 = exp2((_483 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_483 * 3.0));
    float _502 = (1.0 - _496) * ((_483 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _503 = _496 * _483;
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _841;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _566 = fma(_539, cbModelParam._m0[26u].z, fma(_535, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _531));
        float _570 = fma(_539, cbModelParam._m0[27u].z, fma(_535, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _531));
        float _574 = fma(_539, cbModelParam._m0[28u].z, fma(_535, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _531));
        float _599 = _531 + _296;
        float _600 = _535 + _297;
        float _601 = _539 + _298;
        float _611 = fma(_601, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _599)) - _566;
        float _612 = fma(_601, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _599)) - _570;
        float _613 = fma(_601, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _599)) - _574;
        float _617 = inversesqrt(dot(vec3(_611, _612, _613), vec3(_611, _612, _613)));
        float _630 = ((_617 * _611) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_566 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _631 = ((_617 * _612) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_570 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _632 = ((_617 * _613) / cbModelParam._m0[34u].z) + ((((((_574 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        float _669 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_635.x + (-0.5));
        float _671 = _669 * (_635.y + (-0.5));
        float _672 = _669 * (_635.z + (-0.5));
        float _679 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_642.x + (-0.5));
        float _681 = _679 * (_642.y + (-0.5));
        float _682 = _679 * (_642.z + (-0.5));
        float _689 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_649.x + (-0.5));
        float _691 = _689 * (_649.y + (-0.5));
        float _692 = _689 * (_649.z + (-0.5));
        float _699 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_656.x + (-0.5));
        float _701 = _699 * (_656.y + (-0.5));
        float _702 = _699 * (_656.z + (-0.5));
        float _703 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _704 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = _670 * 0.5;
        float _707 = _680 * 0.5;
        float _708 = _690 * 0.5;
        float _709 = dot(vec3(_706, _707, _708), vec3(_706, _707, _708));
        float _714 = (_709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_709);
        float _723 = (dot(vec3(_296, _297, _298), vec3(_714 * _706, _714 * _707, _714 * _708)) + 1.0) * 0.5;
        float _3327 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _733 = sqrt(((_707 * _707) + (_706 * _706)) + (_708 * _708)) / (_703 + 9.9999997473787516355514526367188e-06);
        float _3338 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _735 = _734 * 2.0;
        float _739 = (1.0 - _734) / (_734 + 1.0);
        float _3349 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _749 = ((((1.0 - _740) * (_735 + 2.0)) * exp2(log2(isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_735 + 1.0))) + _740) * _703;
        float _750 = _671 * 0.5;
        float _751 = _681 * 0.5;
        float _752 = _691 * 0.5;
        float _753 = dot(vec3(_750, _751, _752), vec3(_750, _751, _752));
        float _758 = (_753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_753);
        float _766 = (dot(vec3(_296, _297, _298), vec3(_758 * _750, _758 * _751, _758 * _752)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _775 = sqrt(((_751 * _751) + (_750 * _750)) + (_752 * _752)) / (_704 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _777 = _776 * 2.0;
        float _781 = (1.0 - _776) / (_776 + 1.0);
        float _3382 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _791 = ((((1.0 - _782) * (_777 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_777 + 1.0))) + _782) * _704;
        float _792 = _672 * 0.5;
        float _793 = _682 * 0.5;
        float _794 = _692 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _808 = (dot(vec3(_296, _297, _298), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _817 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3415 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_819 + 1.0))) + _824) * _705;
        _841 = _672;
        _843 = _671;
        _844 = _670;
        _845 = _682;
        _846 = _681;
        _847 = _680;
        _848 = _692;
        _849 = _691;
        _850 = _690;
        _851 = _705;
        _852 = _704;
        _853 = _703;
        _854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0)));
        _855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)));
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
    }
    else
    {
        _841 = _842;
        _843 = _842;
        _844 = _842;
        _845 = _842;
        _846 = _842;
        _847 = _842;
        _848 = _842;
        _849 = _842;
        _850 = _842;
        _851 = _842;
        _852 = _842;
        _853 = _842;
        _854 = 0.0;
        _855 = 0.0;
        _856 = 0.0;
    }
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _882 = fma(_539, cbModelParam._m0[30u].z, fma(_535, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _531));
        float _886 = fma(_539, cbModelParam._m0[31u].z, fma(_535, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _531));
        float _890 = fma(_539, cbModelParam._m0[32u].z, fma(_535, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _531));
        float _913 = _531 + _296;
        float _914 = _535 + _297;
        float _915 = _539 + _298;
        float _925 = fma(_915, cbModelParam._m0[30u].z, fma(_914, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _913)) - _882;
        float _926 = fma(_915, cbModelParam._m0[31u].z, fma(_914, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _913)) - _886;
        float _927 = fma(_915, cbModelParam._m0[32u].z, fma(_914, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _913)) - _890;
        float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
        float _944 = ((_931 * _925) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_882 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_931 * _926) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_886 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_931 * _927) / cbModelParam._m0[35u].z) + ((((((_890 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        float _981 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_948.x + (-0.5));
        float _983 = _981 * (_948.y + (-0.5));
        float _984 = _981 * (_948.z + (-0.5));
        float _991 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_955.x + (-0.5));
        float _993 = _991 * (_955.y + (-0.5));
        float _994 = _991 * (_955.z + (-0.5));
        float _1001 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_962.x + (-0.5));
        float _1003 = _1001 * (_962.y + (-0.5));
        float _1004 = _1001 * (_962.z + (-0.5));
        float _1011 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_969.x + (-0.5));
        float _1013 = _1011 * (_969.y + (-0.5));
        float _1014 = _1011 * (_969.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_296, _297, _298), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3478 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_1045 + 1.0))) + _1050) * _1015;
        float _1060 = _983 * 0.5;
        float _1061 = _993 * 0.5;
        float _1062 = _1003 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_296, _297, _298), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3511 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1087 + 1.0))) + _1092) * _1016;
        float _1102 = _984 * 0.5;
        float _1103 = _994 * 0.5;
        float _1104 = _1004 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_296, _297, _298), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3544 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1129 + 1.0))) + _1134) * _1017;
        _1151 = _984;
        _1152 = _983;
        _1153 = _982;
        _1154 = _994;
        _1155 = _993;
        _1156 = _992;
        _1157 = _1004;
        _1158 = _1003;
        _1159 = _1002;
        _1160 = _1017;
        _1161 = _1016;
        _1162 = _1015;
        _1163 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1164 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
    }
    else
    {
        _1151 = _842;
        _1152 = _842;
        _1153 = _842;
        _1154 = _842;
        _1155 = _842;
        _1156 = _842;
        _1157 = _842;
        _1158 = _842;
        _1159 = _842;
        _1160 = _842;
        _1161 = _842;
        _1162 = _842;
        _1163 = 0.0;
        _1164 = 0.0;
        _1165 = 0.0;
    }
    float _1175 = (cbModelParam._m0[1u].x * (_1163 - _854)) + _854;
    float _1176 = (cbModelParam._m0[1u].x * (_1164 - _855)) + _855;
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _856)) + _856;
    float _1198 = fma(_1177, cbSceneParam._m0[89u].z, fma(_1176, cbSceneParam._m0[89u].y, _1175 * cbSceneParam._m0[89u].x));
    float _1201 = fma(_1177, cbSceneParam._m0[90u].z, fma(_1176, cbSceneParam._m0[90u].y, _1175 * cbSceneParam._m0[90u].x));
    float _1204 = fma(_1177, cbSceneParam._m0[91u].z, fma(_1176, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1175));
    float _1219 = _475 * 0.5;
    float _1220 = _476 * 0.5;
    float _1221 = _477 * 0.5;
    float _1222 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1225 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1152, _1155, _1158, _1161));
    float _1228 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1151, _1154, _1157, _1160));
    float _1262;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1235 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_841, _845, _848, _851));
        float _1239 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_843, _846, _849, _852));
        float _1243 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_844, _847, _850, _853));
        float _1250 = dot(vec4(cbModelParam._m0[39u]), vec4(_1219, _1220, _1221, 1.0));
        _1262 = dot(vec3(isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1250) ? 0.0 : (isnan(0.0) ? _1250 : max(0.0, _1250))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1262 = 1.0;
    }
    float _1273;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1264 = dot(vec4(cbModelParam._m0[40u]), vec4(_1219, _1220, _1221, 1.0));
        _1273 = dot(vec3(isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1264) ? 0.0 : (isnan(0.0) ? _1264 : max(0.0, _1264))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1273 = 1.0;
    }
    float _1277 = (_1273 * cbModelParam._m0[1u].x) + (_1262 * (1.0 - cbModelParam._m0[1u].x));
    float _1287 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _299);
    float _1288 = isnan(_1287) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1287 : min(cbModelParam._m0[25u].z, _1287));
    float _1370;
    float _1372;
    float _1374;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1337 = fma(_539, cbModelParam._m0[13u].z, fma(_535, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _531)) + cbModelParam._m0[13u].w;
        float _1341 = fma(_539, cbModelParam._m0[14u].z, fma(_535, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _531)) + cbModelParam._m0[14u].w;
        float _1345 = fma(_539, cbModelParam._m0[15u].z, fma(_535, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _531)) + cbModelParam._m0[15u].w;
        float _1348 = fma(_477, cbModelParam._m0[13u].z, fma(_476, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _475));
        float _1351 = fma(_477, cbModelParam._m0[14u].z, fma(_476, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _475));
        float _1354 = fma(_477, cbModelParam._m0[15u].z, fma(_476, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _475));
        float _1382;
        if (_1348 > 0.0)
        {
            _1382 = abs((1.0 - _1337) / _1348);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1337 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1382 = frontier_phi_16_14_ladder;
        }
        float _1610;
        if (_1351 > 0.0)
        {
            _1610 = abs((1.0 - _1341) / _1351);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1341 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1610 = frontier_phi_25_21_ladder;
        }
        float _1867;
        if (_1354 > 0.0)
        {
            _1867 = abs((1.0 - _1345) / _1354);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1345 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1867 = frontier_phi_37_32_ladder;
        }
        float _1869 = isnan(_1610) ? _1382 : (isnan(_1382) ? _1610 : min(_1382, _1610));
        float _1870 = isnan(_1867) ? _1869 : (isnan(_1869) ? _1867 : min(_1869, _1867));
        float _1874 = (_1870 * _1348) + _1337;
        float _1875 = (_1870 * _1351) + _1341;
        float _1876 = (_1870 * _1354) + _1345;
        float _1877 = _1870 * 9.9999997473787516355514526367188e-05;
        float _1879 = (-1.0) - _1877;
        float _1881 = _1877 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1876 > _1881) || ((_1876 < _1879) || ((_1875 > _1881) || ((_1875 < _1879) || ((_1874 < _1879) || (_1874 > _1881))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2004 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1876, cbModelParam._m0[9u].z, fma(_1875, cbModelParam._m0[9u].y, _1874 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1876, cbModelParam._m0[10u].z, fma(_1875, cbModelParam._m0[10u].y, _1874 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1876, cbModelParam._m0[11u].z, fma(_1875, cbModelParam._m0[11u].y, _1874 * cbModelParam._m0[11u].x))), _1288);
            frontier_phi_15_37_ladder = _2004.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2004.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2004.x * cbModelParam._m0[1u].y;
        }
        _1370 = frontier_phi_15_37_ladder_2;
        _1372 = frontier_phi_15_37_ladder_1;
        _1374 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1358 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_475, _476, _477), _1288);
        _1370 = _1358.x * cbModelParam._m0[1u].y;
        _1372 = _1358.y * cbModelParam._m0[1u].y;
        _1374 = _1358.z * cbModelParam._m0[1u].y;
    }
    float _1378 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _299);
    float _1379 = isnan(_1378) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1378 : min(cbModelParam._m0[25u].w, _1378));
    float _1471;
    float _1473;
    float _1475;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1435 = fma(_539, cbModelParam._m0[21u].z, fma(_535, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _531)) + cbModelParam._m0[21u].w;
        float _1439 = fma(_539, cbModelParam._m0[22u].z, fma(_535, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _531)) + cbModelParam._m0[22u].w;
        float _1443 = fma(_539, cbModelParam._m0[23u].z, fma(_535, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _531)) + cbModelParam._m0[23u].w;
        float _1446 = fma(_477, cbModelParam._m0[21u].z, fma(_476, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _475));
        float _1449 = fma(_477, cbModelParam._m0[22u].z, fma(_476, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _475));
        float _1452 = fma(_477, cbModelParam._m0[23u].z, fma(_476, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _475));
        float _1615;
        if (_1446 > 0.0)
        {
            _1615 = abs((1.0 - _1435) / _1446);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1435 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1615 = frontier_phi_27_23_ladder;
        }
        float _1894;
        if (_1449 > 0.0)
        {
            _1894 = abs((1.0 - _1439) / _1449);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1439 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1894 = frontier_phi_39_34_ladder;
        }
        float _2107;
        if (_1452 > 0.0)
        {
            _2107 = abs((1.0 - _1443) / _1452);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1443 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2107 = frontier_phi_48_45_ladder;
        }
        float _2109 = isnan(_1894) ? _1615 : (isnan(_1615) ? _1894 : min(_1615, _1894));
        float _2110 = isnan(_2107) ? _2109 : (isnan(_2109) ? _2107 : min(_2109, _2107));
        float _2114 = (_2110 * _1446) + _1435;
        float _2115 = (_2110 * _1449) + _1439;
        float _2116 = (_2110 * _1452) + _1443;
        float _2117 = _2110 * 9.9999997473787516355514526367188e-05;
        float _2118 = (-1.0) - _2117;
        float _2120 = _2117 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2116 > _2120) || ((_2116 < _2118) || ((_2115 > _2120) || ((_2115 < _2118) || ((_2114 < _2118) || (_2114 > _2120))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2116, cbModelParam._m0[17u].z, fma(_2115, cbModelParam._m0[17u].y, _2114 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2116, cbModelParam._m0[18u].z, fma(_2115, cbModelParam._m0[18u].y, _2114 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2116, cbModelParam._m0[19u].z, fma(_2115, cbModelParam._m0[19u].y, _2114 * cbModelParam._m0[19u].x))), _1379);
            frontier_phi_24_48_ladder = _2314.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2314.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2314.x * cbModelParam._m0[1u].z;
        }
        _1471 = frontier_phi_24_48_ladder_2;
        _1473 = frontier_phi_24_48_ladder_1;
        _1475 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1455 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_475, _476, _477), _1379);
        _1471 = _1455.x * cbModelParam._m0[1u].z;
        _1473 = _1455.y * cbModelParam._m0[1u].z;
        _1475 = _1455.z * cbModelParam._m0[1u].z;
    }
    float _1488 = (((_502 * _452) + _503) * _467) * ((cbModelParam._m0[1u].w * (_1471 - _1370)) + _1370);
    float _1490 = (((_502 * _454) + _503) * _467) * ((cbModelParam._m0[1u].w * (_1473 - _1372)) + _1372);
    float _1492 = (((_502 * _455) + _503) * _467) * ((cbModelParam._m0[1u].w * (_1475 - _1374)) + _1374);
    float _1495 = fma(_1492, cbSceneParam._m0[89u].z, fma(_1490, cbSceneParam._m0[89u].y, _1488 * cbSceneParam._m0[89u].x));
    float _1498 = fma(_1492, cbSceneParam._m0[90u].z, fma(_1490, cbSceneParam._m0[90u].y, _1488 * cbSceneParam._m0[90u].x));
    float _1501 = fma(_1492, cbSceneParam._m0[91u].z, fma(_1490, cbSceneParam._m0[91u].y, _1488 * cbSceneParam._m0[91u].x));
    vec4 _1509 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_385, _386));
    float _1511 = _1509.w;
    float _1523 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1511);
    float _1524 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1511);
    float _1525 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1511);
    uvec4 _1529 = floatBitsToUint(cbInstanceData._m0[_426 + 5u]);
    uint _1531 = _1529.x * 14u;
    uint _1532 = _1531 + 13u;
    float _1539 = _467 + (-1.0);
    float _1544 = (cbLight._m0[_1532].x * _1539) + 1.0;
    float _1545 = (cbLight._m0[_1532].y * _1539) + 1.0;
    float _1546 = (cbLight._m0[_1532].z * _1539) + 1.0;
    float _1547 = (cbLight._m0[_1532].w * _1539) + 1.0;
    uint _1548 = _1531 + 5u;
    float _1554 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
    uint _1558 = _1531 + 4u;
    float _1568 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
    uint _1572 = _1531 | 1u;
    float _1583 = dot(vec3(cbLight._m0[_1531].xyz), vec3(_296, _297, _298));
    float _1586 = dot(vec3(cbLight._m0[_1572].xyz), vec3(_296, _297, _298));
    float _3680 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _3691 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _1591 = (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.3183098733425140380859375;
    float _1593 = (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.3183098733425140380859375;
    float _1600 = ((cbLight._m0[_1548].x * _1554) * _1593) + (((cbLight._m0[_1558].x * _1523) * _1568) * _1591);
    float _1601 = ((_1554 * cbLight._m0[_1548].y) * _1593) + (((cbLight._m0[_1558].y * _1524) * _1568) * _1591);
    float _1602 = ((_1554 * cbLight._m0[_1548].z) * _1593) + (((cbLight._m0[_1558].z * _1525) * _1568) * _1591);
    uvec4 _1607 = floatBitsToUint(cbLight._m0[_1531 + 12u]);
    bool _1609 = _1607.x == 0u;
    float _1620;
    float _1622;
    float _1624;
    if (_1609)
    {
        _1620 = _1600;
        _1622 = _1601;
        _1624 = _1602;
    }
    else
    {
        uint _1628 = _1531 + 6u;
        float _1644 = (dot(vec3(cbLight._m0[_1531 + 2u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1645 = _1644 * _1644;
        float _3702 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1647 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1620 = (((cbLight._m0[_1628].x * 0.3183098733425140380859375) * _1646) * _1647) + _1600;
        _1622 = (((cbLight._m0[_1628].y * 0.3183098733425140380859375) * _1646) * _1647) + _1601;
        _1624 = (((cbLight._m0[_1628].z * 0.3183098733425140380859375) * _1646) * _1647) + _1602;
    }
    bool _1627 = _1607.y == 0u;
    float _1665;
    float _1667;
    float _1669;
    if (_1627)
    {
        _1665 = _1620;
        _1667 = _1622;
        _1669 = _1624;
    }
    else
    {
        uint _1838 = _1531 + 7u;
        float _1854 = (dot(vec3(cbLight._m0[_1531 + 3u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1855 = _1854 * _1854;
        float _3718 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1857 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _1665 = (((cbLight._m0[_1838].x * 0.3183098733425140380859375) * _1856) * _1857) + _1620;
        _1667 = (((cbLight._m0[_1838].y * 0.3183098733425140380859375) * _1856) * _1857) + _1622;
        _1669 = (((cbLight._m0[_1838].z * 0.3183098733425140380859375) * _1856) * _1857) + _1624;
    }
    uint _1672 = _1531 + 8u;
    float _1685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1531].w)) * _299) * 0.949999988079071044921875);
    float _1686 = _1685 * _1685;
    float _1687 = cbLight._m0[_1531].x + _377;
    float _1688 = cbLight._m0[_1531].y + _378;
    float _1689 = cbLight._m0[_1531].z + _379;
    float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
    float _1694 = _1693 * _1687;
    float _1695 = _1693 * _1688;
    float _1696 = _1693 * _1689;
    float _1697 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1531].xyz));
    float _3734 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1700 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _1701 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _1702 = dot(vec3(_296, _297, _298), vec3(_1694, _1695, _1696));
    float _3756 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1705 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _1706 = dot(vec3(cbLight._m0[_1531].xyz), vec3(_1694, _1695, _1696));
    float _3767 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1710 = _1686 * _1686;
    float _1714 = ((_1705 * _1705) * (_1710 + (-1.0))) + 1.0;
    float _1722 = exp2(log2(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * 5.0);
    float _1723 = 0.959999978542327880859375 - _449;
    float _1725 = 0.959999978542327880859375 - _450;
    float _1726 = 0.959999978542327880859375 - _451;
    float _1733 = 1.0 - _1686;
    float _1744 = (0.5 / (((_1701 * ((_1700 * _1733) + _1686)) + 9.9999999392252902907785028219223e-09) + (((_1701 * _1733) + _1686) * _1700))) * _1700;
    float _3778 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1746 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1710 / ((_1714 * _1714) * 3.141590118408203125));
    uint _1760 = _1531 + 9u;
    float _1771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1572].w)) * _299) * 0.949999988079071044921875);
    float _1772 = _1771 * _1771;
    float _1773 = cbLight._m0[_1572].x + _377;
    float _1774 = cbLight._m0[_1572].y + _378;
    float _1775 = cbLight._m0[_1572].z + _379;
    float _1779 = inversesqrt(dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775)));
    float _1780 = _1779 * _1773;
    float _1781 = _1779 * _1774;
    float _1782 = _1779 * _1775;
    float _1783 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1572].xyz));
    float _3789 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1786 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1787 = dot(vec3(_296, _297, _298), vec3(_1780, _1781, _1782));
    float _3800 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1791 = dot(vec3(cbLight._m0[_1572].xyz), vec3(_1780, _1781, _1782));
    float _3811 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1795 = _1772 * _1772;
    float _1799 = ((_1790 * _1790) * (_1795 + (-1.0))) + 1.0;
    float _1806 = exp2(log2(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * 5.0);
    float _1813 = 1.0 - _1772;
    float _1823 = (0.5 / (((_1701 * ((_1786 * _1813) + _1772)) + 9.9999999392252902907785028219223e-09) + (((_1701 * _1813) + _1772) * _1786))) * _1786;
    float _3822 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1825 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1795 / ((_1799 * _1799) * 3.141590118408203125));
    float _1835 = (((((_1806 * _1723) + _452) * cbLight._m0[_1760].x) * _1825) * _1554) + ((((cbLight._m0[_1672].x * _1523) * ((_1722 * _1723) + _452)) * _1746) * _1568);
    float _1836 = (((((_1806 * _1725) + _454) * cbLight._m0[_1760].y) * _1825) * _1554) + ((((cbLight._m0[_1672].y * _1524) * ((_1722 * _1725) + _454)) * _1746) * _1568);
    float _1837 = (((((_1806 * _1726) + _455) * cbLight._m0[_1760].z) * _1825) * _1554) + ((((cbLight._m0[_1672].z * _1525) * ((_1722 * _1726) + _455)) * _1746) * _1568);
    float _1899;
    float _1901;
    float _1903;
    if (_1609)
    {
        _1899 = _1835;
        _1901 = _1836;
        _1903 = _1837;
    }
    else
    {
        uint _1905 = _1531 + 2u;
        uint _1909 = _1531 + 10u;
        float _1923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _299) * 0.949999988079071044921875);
        float _1924 = _1923 * _1923;
        float _1925 = cbLight._m0[_1905].x + _377;
        float _1926 = cbLight._m0[_1905].y + _378;
        float _1927 = cbLight._m0[_1905].z + _379;
        float _1931 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
        float _1932 = _1931 * _1925;
        float _1933 = _1931 * _1926;
        float _1934 = _1931 * _1927;
        float _1935 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1905].xyz));
        float _3833 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1938 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1939 = dot(vec3(_296, _297, _298), vec3(_1932, _1933, _1934));
        float _3844 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1942 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1943 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_1932, _1933, _1934));
        float _3855 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1947 = _1924 * _1924;
        float _1951 = ((_1942 * _1942) * (_1947 + (-1.0))) + 1.0;
        float _1958 = exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0);
        float _1965 = 1.0 - _1924;
        float _1975 = (0.5 / (((_1701 * ((_1938 * _1965) + _1924)) + 9.9999999392252902907785028219223e-09) + (((_1701 * _1965) + _1924) * _1938))) * _1938;
        float _3866 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1977 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1947 / ((_1951 * _1951) * 3.141590118408203125));
        float _1978 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1899 = (((((_1958 * _1723) + _452) * cbLight._m0[_1909].x) * _1977) * _1978) + _1835;
        _1901 = (((((_1958 * _1725) + _454) * cbLight._m0[_1909].y) * _1977) * _1978) + _1836;
        _1903 = (((((_1958 * _1726) + _455) * cbLight._m0[_1909].z) * _1977) * _1978) + _1837;
    }
    float _2013;
    float _2015;
    float _2017;
    if (_1627)
    {
        _2013 = _1899;
        _2015 = _1901;
        _2017 = _1903;
    }
    else
    {
        uint _2024 = _1531 + 3u;
        uint _2028 = _1531 + 11u;
        float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _299) * 0.949999988079071044921875);
        float _2043 = _2042 * _2042;
        float _2044 = cbLight._m0[_2024].x + _377;
        float _2045 = cbLight._m0[_2024].y + _378;
        float _2046 = cbLight._m0[_2024].z + _379;
        float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
        float _2051 = _2050 * _2044;
        float _2052 = _2050 * _2045;
        float _2053 = _2050 * _2046;
        float _2054 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_2024].xyz));
        float _3882 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _2058 = dot(vec3(_296, _297, _298), vec3(_2051, _2052, _2053));
        float _3893 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _2062 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2051, _2052, _2053));
        float _3904 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2066 = _2043 * _2043;
        float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
        float _2077 = exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0);
        float _2084 = 1.0 - _2043;
        float _2094 = (0.5 / (((_1701 * ((_2057 * _2084) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1701 * _2084) + _2043) * _2057))) * _2057;
        float _3915 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2096 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
        float _2097 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _2013 = (((((_2077 * _1723) + _452) * cbLight._m0[_2028].x) * _2096) * _2097) + _1899;
        _2015 = (((((_2077 * _1725) + _454) * cbLight._m0[_2028].y) * _2096) * _2097) + _1901;
        _2017 = (((((_2077 * _1726) + _455) * cbLight._m0[_2028].z) * _2096) * _2097) + _1903;
    }
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    float _2241;
    if (_1529.y == 0u)
    {
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2173 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2172;
        float _2174 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2172;
        float _2175 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2172;
        uvec4 _2187 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2188 = _2187.x;
        uint _2199 = uint((float(_2187.y) * floor(float(uint(cbSceneParam._m0[85u].y * _386) / _2188))) + floor(float(uint(cbSceneParam._m0[85u].x * _385) / _2188)));
        float _2209 = (log2(_2175 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2210 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        uint _2213 = uint(isnan(14.0) ? _2210 : (isnan(_2210) ? 14.0 : min(_2210, 14.0)));
        uvec4 _2218 = texelFetch(g_lightClusterGridBuffer, int(((_2213 << 2u) + (_2199 << 6u)) >> 2u));
        uint _2219 = _2218.x;
        uint _2220 = _2187.z;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        float _2327;
        float _2329;
        if (((((1u << ((_2220 >> 4u) & 15u)) + 4294967295u) & _2219) == 0u) || ((_2220 & 240u) == 0u))
        {
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
            _2327 = 0.0;
            _2329 = 0.0;
        }
        else
        {
            float _2320;
            float _2322;
            float _2324;
            float _2326;
            float _2328;
            float _2330;
            float _2463 = 0.0;
            float _2464 = 0.0;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            float _2468 = 0.0;
            uint _2469 = 0u;
            uint _2478;
            bool _2479;
            for (;;)
            {
                _2478 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2469 << 2u)) >> 2u)).x;
                _2479 = _2478 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2479)
                {
                    frontier_phi_63_pred = _2468;
                    frontier_phi_63_pred_1 = _2467;
                    frontier_phi_63_pred_2 = _2466;
                    frontier_phi_63_pred_3 = _2465;
                    frontier_phi_63_pred_4 = _2464;
                    frontier_phi_63_pred_5 = _2463;
                }
                else
                {
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    uint _2593;
                    _2587 = _2463;
                    _2588 = _2464;
                    _2589 = _2465;
                    _2590 = _2466;
                    _2591 = _2467;
                    _2592 = _2468;
                    _2593 = _2478;
                    float _2519;
                    float _2520;
                    float _2521;
                    float _2522;
                    float _2523;
                    float _2524;
                    for (;;)
                    {
                        uint _2597 = uint(findLSB(_2593)) + (_2469 << 5u);
                        uint _2594 = (_2593 + 4294967295u) & _2593;
                        uint _2599 = _2597 * 48u;
                        vec4 _2613 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2599)).x, texelFetch(g_PointLightRenderingBuffer, int(_2599 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2599 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2599 + 3u)).x));
                        uint _2619 = (_2597 * 48u) + 4u;
                        vec4 _2632 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2619)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 3u)).x));
                        uint _2638 = (_2597 * 48u) + 8u;
                        vec3 _2649 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2638)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 2u)).x));
                        float _2653 = _2613.x - _2173;
                        float _2654 = _2613.y - _2174;
                        float _2655 = _2613.z - _2175;
                        float _2656 = dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655));
                        float _2659 = inversesqrt(_2656);
                        float _2660 = _2659 * _2653;
                        float _2661 = _2659 * _2654;
                        float _2662 = _2659 * _2655;
                        float _2663 = dot(vec3(_407, _410, _413), vec3(_2660, _2661, _2662));
                        float _2668 = 1.0 - (_2656 * _2613.w);
                        float _3941 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
                        float _2669 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                        float _2670 = sqrt(_2656) * _2632.w;
                        float _2673 = 1.39999997615814208984375 / (_2670 + 1.39999997615814208984375);
                        float _2674 = _2673 * _2673;
                        float _2677 = ((1.0 - _2674) * _2663) + _2674;
                        float _2680 = _2670 * _2670;
                        float _2684 = ((isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0))) * _2669) / ((_2680 * 0.699999988079071044921875) + 1.0);
                        float _2688 = (-0.0) - _2173;
                        float _2689 = (-0.0) - _2174;
                        float _2690 = (-0.0) - _2175;
                        float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
                        float _2695 = _2694 * _2688;
                        float _2696 = _2694 * _2689;
                        float _2697 = _2694 * _2690;
                        float _2705 = exp2(log2(1.0 / ((_2680 * 3.5) + 5.0)) * 0.25);
                        float _2706 = 1.0 - _483;
                        float _2713 = sqrt(1.0 - ((1.0 - (_2706 * _2706)) * (1.0 - (_2705 * _2705))));
                        float _2714 = _2713 * _2713;
                        float _2715 = _2714 * _2714;
                        float _2716 = _2695 + _2660;
                        float _2717 = _2696 + _2661;
                        float _2718 = _2697 + _2662;
                        float _2722 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
                        float _2726 = dot(vec3(_407, _410, _413), vec3(_2695, _2696, _2697));
                        float _3957 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2729 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
                        float _2730 = dot(vec3(_407, _410, _413), vec3(_2722 * _2716, _2722 * _2717, _2722 * _2718));
                        float _3968 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2733 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                        float _2737 = ((_2733 * _2733) * (_2715 + (-1.0))) + 1.0;
                        float _2738 = _2673 * _2714;
                        float _2739 = _2738 * _2738;
                        float _2742 = ((1.0 - _2739) * _2663) + _2739;
                        float _3979 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2743 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                        float _2744 = 1.0 - _2714;
                        float _2754 = (0.5 / (((_2743 * ((_2729 * _2744) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2743 * _2744) + _2714) * _2729))) * _2743;
                        float _3990 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2765 = (((_2715 * 3.1415927410125732421875) * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) / ((_2737 * _2737) * ((_2680 * 2.1991131305694580078125) + 3.141590118408203125))) * _2669;
                        _2522 = (_2684 * _2632.x) + _2590;
                        _2523 = (_2684 * _2632.y) + _2591;
                        _2524 = (_2684 * _2632.z) + _2592;
                        _2519 = (_2765 * _2649.x) + _2587;
                        _2520 = (_2765 * _2649.y) + _2588;
                        _2521 = (_2765 * _2649.z) + _2589;
                        if (_2594 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2587 = _2519;
                            _2588 = _2520;
                            _2589 = _2521;
                            _2590 = _2522;
                            _2591 = _2523;
                            _2592 = _2524;
                            _2593 = _2594;
                        }
                    }
                    frontier_phi_63_pred = _2524;
                    frontier_phi_63_pred_1 = _2523;
                    frontier_phi_63_pred_2 = _2522;
                    frontier_phi_63_pred_3 = _2521;
                    frontier_phi_63_pred_4 = _2520;
                    frontier_phi_63_pred_5 = _2519;
                }
                _2330 = frontier_phi_63_pred;
                _2328 = frontier_phi_63_pred_1;
                _2326 = frontier_phi_63_pred_2;
                _2324 = frontier_phi_63_pred_3;
                _2322 = frontier_phi_63_pred_4;
                _2320 = frontier_phi_63_pred_5;
                uint _2470 = _2469 + 1u;
                if (_2470 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2463 = _2320;
                    _2464 = _2322;
                    _2465 = _2324;
                    _2466 = _2326;
                    _2467 = _2328;
                    _2468 = _2330;
                    _2469 = _2470;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
            _2327 = _2328;
            _2329 = _2330;
        }
        uvec4 _2333 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2334 = _2333.z;
        uint _2336 = (_2334 >> 8u) & 15u;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        if (((4294967295u << _2336) & _2219) == 0u)
        {
            _2431 = _2319;
            _2433 = _2321;
            _2435 = _2323;
            _2437 = _2325;
            _2439 = _2327;
            _2441 = _2329;
        }
        else
        {
            float _2456 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
            float _2457 = _2456 * _2173;
            float _2458 = _2456 * _2174;
            float _2459 = _2456 * _2175;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2336 < ((_2334 >> 12u) & 15u))
            {
                float _2432;
                float _2434;
                float _2436;
                float _2438;
                float _2440;
                float _2442;
                float _2570 = _2319;
                float _2571 = _2321;
                float _2572 = _2323;
                float _2573 = _2325;
                float _2574 = _2327;
                float _2575 = _2329;
                uint _2576 = _2336;
                uint _2585;
                bool _2586;
                for (;;)
                {
                    _2585 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2576 << 2u)) >> 2u)).x;
                    _2586 = _2585 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2586)
                    {
                        frontier_phi_69_pred = _2575;
                        frontier_phi_69_pred_1 = _2574;
                        frontier_phi_69_pred_2 = _2573;
                        frontier_phi_69_pred_3 = _2572;
                        frontier_phi_69_pred_4 = _2571;
                        frontier_phi_69_pred_5 = _2570;
                    }
                    else
                    {
                        float _2770;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _2783 = _2570;
                        float _2784 = _2571;
                        float _2785 = _2572;
                        float _2786 = _2573;
                        float _2787 = _2574;
                        float _2788 = _2575;
                        uint _2789 = _2585;
                        uint _2790;
                        vec4 _2815;
                        float _2816;
                        vec4 _2831;
                        vec3 _2843;
                        vec4 _2859;
                        vec4 _2875;
                        float _2922;
                        bool _2923;
                        for (;;)
                        {
                            uint _2800 = ((_2576 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2789));
                            _2790 = (_2789 + 4294967295u) & _2789;
                            uint _2802 = _2800 * 40u;
                            _2815 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 3u)).x));
                            _2816 = _2815.w;
                            uint _2818 = (_2800 * 40u) + 4u;
                            _2831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 3u)).x));
                            uint _2833 = (_2800 * 40u) + 8u;
                            _2843 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x));
                            uint _2846 = (_2800 * 40u) + 16u;
                            _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            uint _2862 = (_2800 * 40u) + 20u;
                            _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            uint _2878 = (_2800 * 40u) + 24u;
                            vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2897 = (_2800 * 40u) + 28u;
                            vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            _2922 = fma(_2175, _2910.z, fma(_2174, _2910.y, _2910.x * _2173)) + _2910.w;
                            _2923 = !((fma(_2175, _2891.z, fma(_2174, _2891.y, _2891.x * _2173)) + _2891.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2923)
                            {
                                float _2950 = _2815.x - _2173;
                                float _2951 = _2815.y - _2174;
                                float _2952 = _2815.z - _2175;
                                float _2953 = dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952));
                                float _2956 = inversesqrt(_2953);
                                float _2957 = _2956 * _2950;
                                float _2958 = _2956 * _2951;
                                float _2959 = _2956 * _2952;
                                float _2963 = 1.0 - (_2953 / (_2816 * _2816));
                                float _4001 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                                float _2964 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                                float _2968 = sqrt(_2953) * _2831.w;
                                float _2970 = 1.39999997615814208984375 / (_2968 + 1.39999997615814208984375);
                                float _2971 = _2970 * _2970;
                                float _2974 = ((1.0 - _2971) * dot(vec3(_2957, _2958, _2959), vec3(_407, _410, _413))) + _2971;
                                float _2977 = _2968 * _2968;
                                float _2981 = (fma(_2175, _2859.z, fma(_2174, _2859.y, _2859.x * _2173)) + _2859.w) / _2922;
                                float _2982 = (fma(_2175, _2875.z, fma(_2174, _2875.y, _2875.x * _2173)) + _2875.w) / _2922;
                                float _2986 = 1.0 - dot(vec2(_2981, _2982), vec2(_2981, _2982));
                                float _4017 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2987 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                                float _2988 = _2987 * (((isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))) * _2964) / ((_2977 * 0.699999988079071044921875) + 1.0));
                                float _3000 = exp2(log2(1.0 / ((_2977 * 3.5) + 5.0)) * 0.25);
                                float _3001 = 1.0 - _483;
                                float _3008 = sqrt(1.0 - ((1.0 - (_3001 * _3001)) * (1.0 - (_3000 * _3000))));
                                float _3009 = _3008 * _3008;
                                float _3010 = _3009 * _3009;
                                float _3011 = _2957 - _2457;
                                float _3012 = _2958 - _2458;
                                float _3013 = _2959 - _2459;
                                float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
                                float _3021 = dot(vec3(_407, _410, _413), vec3((-0.0) - _2457, (-0.0) - _2458, (-0.0) - _2459));
                                float _4028 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3024 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                                float _3025 = dot(vec3(_407, _410, _413), vec3(_3017 * _3011, _3017 * _3012, _3017 * _3013));
                                float _4039 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3028 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                                float _3032 = ((_3028 * _3028) * (_3010 + (-1.0))) + 1.0;
                                float _3033 = _2970 * _3009;
                                float _3034 = _3033 * _3033;
                                float _3040 = ((1.0 - _3034) * dot(vec3(_407, _410, _413), vec3(_2957, _2958, _2959))) + _3034;
                                float _4050 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3041 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3042 = 1.0 - _3009;
                                float _3052 = (0.5 / (((_3041 * ((_3024 * _3042) + _3009)) + 9.9999999392252902907785028219223e-09) + (((_3041 * _3042) + _3009) * _3024))) * _3041;
                                float _4061 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3062 = (_2987 * _2964) * (((_3010 * 3.1415927410125732421875) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) / ((_3032 * _3032) * ((_2977 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2988 * _2831.z;
                                frontier_phi_75_pred_1 = _2988 * _2831.y;
                                frontier_phi_75_pred_2 = _2988 * _2831.x;
                                frontier_phi_75_pred_3 = _3062 * _2843.z;
                                frontier_phi_75_pred_4 = _3062 * _2843.y;
                                frontier_phi_75_pred_5 = _3062 * _2843.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3071 = frontier_phi_75_pred;
                            _3070 = frontier_phi_75_pred_1;
                            _3069 = frontier_phi_75_pred_2;
                            _3068 = frontier_phi_75_pred_3;
                            _3067 = frontier_phi_75_pred_4;
                            _3066 = frontier_phi_75_pred_5;
                            _2773 = _3069 + _2786;
                            _2774 = _3070 + _2787;
                            _2775 = _3071 + _2788;
                            _2770 = _3066 + _2783;
                            _2771 = _3067 + _2784;
                            _2772 = _3068 + _2785;
                            if (_2790 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2790;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2775;
                        frontier_phi_69_pred_1 = _2774;
                        frontier_phi_69_pred_2 = _2773;
                        frontier_phi_69_pred_3 = _2772;
                        frontier_phi_69_pred_4 = _2771;
                        frontier_phi_69_pred_5 = _2770;
                    }
                    _2442 = frontier_phi_69_pred;
                    _2440 = frontier_phi_69_pred_1;
                    _2438 = frontier_phi_69_pred_2;
                    _2436 = frontier_phi_69_pred_3;
                    _2434 = frontier_phi_69_pred_4;
                    _2432 = frontier_phi_69_pred_5;
                    uint _2577 = _2576 + 1u;
                    if (_2577 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2570 = _2432;
                        _2571 = _2434;
                        _2572 = _2436;
                        _2573 = _2438;
                        _2574 = _2440;
                        _2575 = _2442;
                        _2576 = _2577;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2442;
                frontier_phi_57_58_ladder_1 = _2440;
                frontier_phi_57_58_ladder_2 = _2438;
                frontier_phi_57_58_ladder_3 = _2436;
                frontier_phi_57_58_ladder_4 = _2434;
                frontier_phi_57_58_ladder_5 = _2432;
            }
            else
            {
                frontier_phi_57_58_ladder = _2329;
                frontier_phi_57_58_ladder_1 = _2327;
                frontier_phi_57_58_ladder_2 = _2325;
                frontier_phi_57_58_ladder_3 = _2323;
                frontier_phi_57_58_ladder_4 = _2321;
                frontier_phi_57_58_ladder_5 = _2319;
            }
            _2431 = frontier_phi_57_58_ladder_5;
            _2433 = frontier_phi_57_58_ladder_4;
            _2435 = frontier_phi_57_58_ladder_3;
            _2437 = frontier_phi_57_58_ladder_2;
            _2439 = frontier_phi_57_58_ladder_1;
            _2441 = frontier_phi_57_58_ladder;
        }
        float _2446 = isnan(1.0) ? _467 : (isnan(_467) ? 1.0 : min(_467, 1.0));
        _2231 = (_2446 * _2437) + _1665;
        _2233 = (_2446 * _2439) + _1667;
        _2235 = (_2446 * _2441) + _1669;
        _2237 = ((_2431 * _452) * _2446) + _2013;
        _2239 = ((_2433 * _454) * _2446) + _2015;
        _2241 = ((_2435 * _455) * _2446) + _2017;
    }
    else
    {
        _2231 = _1665;
        _2233 = _1667;
        _2235 = _1669;
        _2237 = _2013;
        _2239 = _2015;
        _2241 = _2017;
    }
    float _4077 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4088 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4099 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    uint _2261 = _426 + 6u;
    float _2269 = _385 / cbSceneParam._m0[86u].x;
    float _2270 = _386 / cbSceneParam._m0[86u].y;
    vec4 _2284 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2269, _2270, (log2((isnan(cbSceneParam._m0[77u].w) ? _319 : (isnan(_319) ? cbSceneParam._m0[77u].w : min(_319, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2286 = _2284.x;
    float _2287 = _2284.y;
    float _2288 = _2284.z;
    float _2289 = _2284.w;
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    if (_319 > cbSceneParam._m0[78u].w)
    {
        float _2344 = isnan(_319) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _319 : min(cbSceneParam._m0[80u].w, _319));
        float _2345 = _2344 / _319;
        float _2356 = _2345 * _370;
        float _2357 = _371 * _2345;
        float _2358 = (-0.0) - _2357;
        float _2359 = _2345 * _372;
        float _2361 = (cbSceneParam._m0[77u].w * _2358) / _2344;
        float _2362 = _2361 + cbSceneParam._m0[79u].w;
        float _2363 = cbSceneParam._m0[79u].w - _2357;
        float _2369 = sqrt(((_2356 * _2356) + (_2357 * _2357)) + (_2359 * _2359));
        float _2372 = (1.0 - (cbSceneParam._m0[77u].w / _2344)) * _2369;
        float _2377 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2379 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2532;
        if (abs((_2358 - _2361) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2532 = ((((_2362 > 0.0) ? exp2(_2377 * _2362) : (2.0 - exp2(_2379 * _2362))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2372;
        }
        else
        {
            float _2492 = 1.0 / cbSceneParam._m0[80u].x;
            float _2493 = isnan(_2363) ? _2362 : (isnan(_2362) ? _2363 : max(_2362, _2363));
            float _2494 = isnan(_2363) ? _2362 : (isnan(_2362) ? _2363 : min(_2362, _2363));
            float _2503 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : min(_2493, 0.0));
            float _2504 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : min(_2494, 0.0));
            _2532 = ((abs(_2369 / _2358) * cbSceneParam._m0[80u].y) * ((((_2503 - _2504) * 2.0) - ((exp2(_2377 * (isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0)))) - exp2(_2377 * (isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0))))) * _2492)) - ((exp2(_2379 * _2503) - exp2(_2379 * _2504)) * _2492))) + (_2372 * cbSceneParam._m0[80u].z);
        }
        vec4 _2534 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2269, _2270, 1.0), 0.0);
        float _2543 = exp2((_2532 * (-1.44269502162933349609375)) * (1.0 - _2534.w));
        float _2544 = log2(_2543);
        float _2560 = log2(_2289);
        _2381 = (exp2(_2560 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2544 * cbSceneParam._m0[78u].x)) * _2534.x) / cbSceneParam._m0[78u].x)) + _2286;
        _2383 = (exp2(_2560 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2544 * cbSceneParam._m0[78u].y)) * _2534.y) / cbSceneParam._m0[78u].y)) + _2287;
        _2385 = (exp2(_2560 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2544 * cbSceneParam._m0[78u].z)) * _2534.z) / cbSceneParam._m0[78u].z)) + _2288;
        _2387 = _2543 * _2289;
    }
    else
    {
        _2381 = _2286;
        _2383 = _2287;
        _2385 = _2288;
        _2387 = _2289;
    }
    float _2399 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2400 = _2399 == 3.0;
    float _2401 = log2(_2387);
    float _2408 = exp2(_2401 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2231 + ((isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))) * _467))) + ((_2237 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _1277)) * cbPerFrame._m0[3u].x));
    float _2409 = exp2(_2401 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2233 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _467))) + ((_2239 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1277)) * cbPerFrame._m0[3u].x));
    float _2410 = exp2(_2401 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2235 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _467))) + ((_2241 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1277)) * cbPerFrame._m0[3u].x));
    float _2419 = (_2399 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2419 * (_2400 ? _2408 : (_2408 + (cbSceneParam._m0[72u].w * _2381)));
    SV_Target.y = _2419 * (_2400 ? _2409 : (_2409 + (cbSceneParam._m0[72u].w * _2383)));
    SV_Target.z = _2419 * (_2400 ? _2410 : (_2410 + (cbSceneParam._m0[72u].w * _2385)));
    SV_Target.w = cbInstanceData._m0[_2261].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2261].w;
}


