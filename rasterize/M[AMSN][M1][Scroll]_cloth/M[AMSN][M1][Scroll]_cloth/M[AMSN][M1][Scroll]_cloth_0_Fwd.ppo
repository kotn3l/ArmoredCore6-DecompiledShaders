#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _857;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    float _230 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _231 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _244 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_230 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_231 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _230) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _231) + cbTextureTilingScale._m0[2u].w));
    float _268 = cbMtdParam._m0[10u].x + _264.x;
    vec4 _280 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _230) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _231) + cbTextureTilingScale._m0[1u].w));
    float _284 = _280.z;
    float _288 = (_280.x * 2.0) + (-1.0);
    float _290 = (_280.y * 2.0) + (-1.0);
    float _291 = dot(vec2(_288, _290), vec2(_288, _290));
    float _3193 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _297 = sqrt(1.0 - (isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0))));
    float _300 = fma(_297, _214, fma(_290, _206 * TANGENT.x, (_192 * _185) * _288));
    float _303 = fma(_297, _215, fma(_290, _206 * TANGENT.y, (_192 * _186) * _288));
    float _306 = fma(_297, _216, fma(_290, _206 * TANGENT.z, (_192 * _187) * _288));
    float _310 = inversesqrt(dot(vec3(_300, _303, _306), vec3(_300, _303, _306)));
    float _311 = _310 * _300;
    float _312 = _310 * _303;
    float _313 = _310 * _306;
    float _3204 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _314 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
    float _3215 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3226 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3237 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3248 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _318 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
    float _334 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _375 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _385 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _375);
    float _386 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _375);
    float _387 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _375);
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _392 = _385 * _391;
    float _393 = _386 * _391;
    float _394 = _387 * _391;
    float _400 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _401 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _422 = fma(_313, cbSceneParam._m0[5u].z, fma(_312, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _311));
    float _425 = fma(_313, cbSceneParam._m0[6u].z, fma(_312, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _311));
    float _428 = fma(_313, cbSceneParam._m0[7u].z, fma(_312, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _311));
    uint _441 = uint(roundEven(NORMAL.w)) * 13u;
    uint _444 = (_441 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _450 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0)))) * cbInstanceData._m0[_444].x;
    float _451 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_444].y;
    float _452 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0)))) * cbInstanceData._m0[_444].z;
    float _3259 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    float _3270 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
    float _3281 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
    float _456 = 1.0 - _318;
    float _457 = _453 * _456;
    float _458 = _454 * _456;
    float _459 = _455 * _456;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _318;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _318;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _318;
    float _467 = _464 + 0.039999999105930328369140625;
    float _469 = _465 + 0.039999999105930328369140625;
    float _470 = _466 + 0.039999999105930328369140625;
    vec4 _479 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _400, cbSceneParam._m0[86u].y * _401));
    float _482 = _479.x * TEXCOORD.z;
    float _483 = dot(vec3(_311, _312, _313), vec3(_392, _393, _394));
    float _486 = _483 * 2.0;
    float _490 = (_486 * _311) - _392;
    float _491 = (_486 * _312) - _393;
    float _492 = (_486 * _313) - _394;
    float _496 = abs(dot(vec3(_392, _393, _394), vec3(_311, _312, _313)));
    float _3292 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _498 = sqrt(_314);
    float _511 = exp2((_498 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_498 * 3.0));
    float _517 = (1.0 - _511) * ((_498 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _518 = _511 * _498;
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _856;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _581 = fma(_554, cbModelParam._m0[26u].z, fma(_550, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _546));
        float _585 = fma(_554, cbModelParam._m0[27u].z, fma(_550, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _546));
        float _589 = fma(_554, cbModelParam._m0[28u].z, fma(_550, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _546));
        float _614 = _546 + _311;
        float _615 = _550 + _312;
        float _616 = _554 + _313;
        float _626 = fma(_616, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614)) - _581;
        float _627 = fma(_616, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614)) - _585;
        float _628 = fma(_616, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614)) - _589;
        float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
        float _645 = ((_632 * _626) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_581 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_632 * _627) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_585 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_632 * _628) / cbModelParam._m0[34u].z) + ((((((_589 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        float _684 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_650.x + (-0.5));
        float _686 = _684 * (_650.y + (-0.5));
        float _687 = _684 * (_650.z + (-0.5));
        float _694 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_657.x + (-0.5));
        float _696 = _694 * (_657.y + (-0.5));
        float _697 = _694 * (_657.z + (-0.5));
        float _704 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_664.x + (-0.5));
        float _706 = _704 * (_664.y + (-0.5));
        float _707 = _704 * (_664.z + (-0.5));
        float _714 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_671.x + (-0.5));
        float _716 = _714 * (_671.y + (-0.5));
        float _717 = _714 * (_671.z + (-0.5));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = _685 * 0.5;
        float _722 = _695 * 0.5;
        float _723 = _705 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _738 = (dot(vec3(_311, _312, _313), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3318 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _748 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3329 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3340 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (_750 + 1.0))) + _755) * _718;
        float _765 = _686 * 0.5;
        float _766 = _696 * 0.5;
        float _767 = _706 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _781 = (dot(vec3(_311, _312, _313), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3351 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _790 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3362 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3373 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * (_792 + 1.0))) + _797) * _719;
        float _807 = _687 * 0.5;
        float _808 = _697 * 0.5;
        float _809 = _707 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_311, _312, _313), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3384 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3395 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3406 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * (_834 + 1.0))) + _839) * _720;
        _856 = _687;
        _858 = _686;
        _859 = _685;
        _860 = _697;
        _861 = _696;
        _862 = _695;
        _863 = _707;
        _864 = _706;
        _865 = _705;
        _866 = _720;
        _867 = _719;
        _868 = _718;
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
    }
    else
    {
        _856 = _857;
        _858 = _857;
        _859 = _857;
        _860 = _857;
        _861 = _857;
        _862 = _857;
        _863 = _857;
        _864 = _857;
        _865 = _857;
        _866 = _857;
        _867 = _857;
        _868 = _857;
        _869 = 0.0;
        _870 = 0.0;
        _871 = 0.0;
    }
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _897 = fma(_554, cbModelParam._m0[30u].z, fma(_550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _546));
        float _901 = fma(_554, cbModelParam._m0[31u].z, fma(_550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _546));
        float _905 = fma(_554, cbModelParam._m0[32u].z, fma(_550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _546));
        float _928 = _546 + _311;
        float _929 = _550 + _312;
        float _930 = _554 + _313;
        float _940 = fma(_930, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_897 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_901 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[35u].z) + ((((((_905 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _996 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_963.x + (-0.5));
        float _998 = _996 * (_963.y + (-0.5));
        float _999 = _996 * (_963.z + (-0.5));
        float _1006 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_970.x + (-0.5));
        float _1008 = _1006 * (_970.y + (-0.5));
        float _1009 = _1006 * (_970.z + (-0.5));
        float _1016 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_977.x + (-0.5));
        float _1018 = _1016 * (_977.y + (-0.5));
        float _1019 = _1016 * (_977.z + (-0.5));
        float _1026 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_984.x + (-0.5));
        float _1028 = _1026 * (_984.y + (-0.5));
        float _1029 = _1026 * (_984.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_311, _312, _313), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3469 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_1060 + 1.0))) + _1065) * _1030;
        float _1075 = _998 * 0.5;
        float _1076 = _1008 * 0.5;
        float _1077 = _1018 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_311, _312, _313), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3502 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_1102 + 1.0))) + _1107) * _1031;
        float _1117 = _999 * 0.5;
        float _1118 = _1009 * 0.5;
        float _1119 = _1019 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_311, _312, _313), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3535 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_1144 + 1.0))) + _1149) * _1032;
        _1166 = _999;
        _1167 = _998;
        _1168 = _997;
        _1169 = _1009;
        _1170 = _1008;
        _1171 = _1007;
        _1172 = _1019;
        _1173 = _1018;
        _1174 = _1017;
        _1175 = _1032;
        _1176 = _1031;
        _1177 = _1030;
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _857;
        _1167 = _857;
        _1168 = _857;
        _1169 = _857;
        _1170 = _857;
        _1171 = _857;
        _1172 = _857;
        _1173 = _857;
        _1174 = _857;
        _1175 = _857;
        _1176 = _857;
        _1177 = _857;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _870)) + _870;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1213 = fma(_1192, cbSceneParam._m0[89u].z, fma(_1191, cbSceneParam._m0[89u].y, _1190 * cbSceneParam._m0[89u].x));
    float _1216 = fma(_1192, cbSceneParam._m0[90u].z, fma(_1191, cbSceneParam._m0[90u].y, _1190 * cbSceneParam._m0[90u].x));
    float _1219 = fma(_1192, cbSceneParam._m0[91u].z, fma(_1191, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1190));
    float _1234 = _490 * 0.5;
    float _1235 = _491 * 0.5;
    float _1236 = _492 * 0.5;
    float _1237 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1240 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1243 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1277;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1250 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_856, _860, _863, _866));
        float _1254 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_858, _861, _864, _867));
        float _1258 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_859, _862, _865, _868));
        float _1265 = dot(vec4(cbModelParam._m0[39u]), vec4(_1234, _1235, _1236, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1265) ? 0.0 : (isnan(0.0) ? _1265 : max(0.0, _1265))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1288;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1279 = dot(vec4(cbModelParam._m0[40u]), vec4(_1234, _1235, _1236, 1.0));
        _1288 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1288 = 1.0;
    }
    float _1292 = (_1288 * cbModelParam._m0[1u].x) + (_1277 * (1.0 - cbModelParam._m0[1u].x));
    float _1302 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _314);
    float _1303 = isnan(_1302) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1302 : min(cbModelParam._m0[25u].z, _1302));
    float _1385;
    float _1387;
    float _1389;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1352 = fma(_554, cbModelParam._m0[13u].z, fma(_550, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546)) + cbModelParam._m0[13u].w;
        float _1356 = fma(_554, cbModelParam._m0[14u].z, fma(_550, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546)) + cbModelParam._m0[14u].w;
        float _1360 = fma(_554, cbModelParam._m0[15u].z, fma(_550, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546)) + cbModelParam._m0[15u].w;
        float _1363 = fma(_492, cbModelParam._m0[13u].z, fma(_491, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _490));
        float _1366 = fma(_492, cbModelParam._m0[14u].z, fma(_491, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _490));
        float _1369 = fma(_492, cbModelParam._m0[15u].z, fma(_491, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _490));
        float _1397;
        if (_1363 > 0.0)
        {
            _1397 = abs((1.0 - _1352) / _1363);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1352 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1397 = frontier_phi_16_14_ladder;
        }
        float _1604;
        if (_1366 > 0.0)
        {
            _1604 = abs((1.0 - _1356) / _1366);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1356 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1604 = frontier_phi_25_21_ladder;
        }
        float _1858;
        if (_1369 > 0.0)
        {
            _1858 = abs((1.0 - _1360) / _1369);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1360 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1858 = frontier_phi_37_32_ladder;
        }
        float _1860 = isnan(_1604) ? _1397 : (isnan(_1397) ? _1604 : min(_1397, _1604));
        float _1861 = isnan(_1858) ? _1860 : (isnan(_1860) ? _1858 : min(_1860, _1858));
        float _1865 = (_1861 * _1363) + _1352;
        float _1866 = (_1861 * _1366) + _1356;
        float _1867 = (_1861 * _1369) + _1360;
        float _1868 = _1861 * 9.9999997473787516355514526367188e-05;
        float _1870 = (-1.0) - _1868;
        float _1872 = _1868 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1867 > _1872) || ((_1867 < _1870) || ((_1866 > _1872) || ((_1866 < _1870) || ((_1865 < _1870) || (_1865 > _1872))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1995 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1867, cbModelParam._m0[9u].z, fma(_1866, cbModelParam._m0[9u].y, _1865 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1867, cbModelParam._m0[10u].z, fma(_1866, cbModelParam._m0[10u].y, _1865 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1867, cbModelParam._m0[11u].z, fma(_1866, cbModelParam._m0[11u].y, _1865 * cbModelParam._m0[11u].x))), _1303);
            frontier_phi_15_37_ladder = _1995.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1995.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1995.x * cbModelParam._m0[1u].y;
        }
        _1385 = frontier_phi_15_37_ladder_2;
        _1387 = frontier_phi_15_37_ladder_1;
        _1389 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_490, _491, _492), _1303);
        _1385 = _1373.x * cbModelParam._m0[1u].y;
        _1387 = _1373.y * cbModelParam._m0[1u].y;
        _1389 = _1373.z * cbModelParam._m0[1u].y;
    }
    float _1393 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _314);
    float _1394 = isnan(_1393) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1393 : min(cbModelParam._m0[25u].w, _1393));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1450 = fma(_554, cbModelParam._m0[21u].z, fma(_550, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546)) + cbModelParam._m0[21u].w;
        float _1454 = fma(_554, cbModelParam._m0[22u].z, fma(_550, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546)) + cbModelParam._m0[22u].w;
        float _1458 = fma(_554, cbModelParam._m0[23u].z, fma(_550, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546)) + cbModelParam._m0[23u].w;
        float _1461 = fma(_492, cbModelParam._m0[21u].z, fma(_491, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _490));
        float _1464 = fma(_492, cbModelParam._m0[22u].z, fma(_491, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _490));
        float _1467 = fma(_492, cbModelParam._m0[23u].z, fma(_491, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _490));
        float _1609;
        if (_1461 > 0.0)
        {
            _1609 = abs((1.0 - _1450) / _1461);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1450 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1609 = frontier_phi_27_23_ladder;
        }
        float _1885;
        if (_1464 > 0.0)
        {
            _1885 = abs((1.0 - _1454) / _1464);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1454 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1885 = frontier_phi_39_34_ladder;
        }
        float _2098;
        if (_1467 > 0.0)
        {
            _2098 = abs((1.0 - _1458) / _1467);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1458 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2098 = frontier_phi_48_45_ladder;
        }
        float _2100 = isnan(_1885) ? _1609 : (isnan(_1609) ? _1885 : min(_1609, _1885));
        float _2101 = isnan(_2098) ? _2100 : (isnan(_2100) ? _2098 : min(_2100, _2098));
        float _2105 = (_2101 * _1461) + _1450;
        float _2106 = (_2101 * _1464) + _1454;
        float _2107 = (_2101 * _1467) + _1458;
        float _2108 = _2101 * 9.9999997473787516355514526367188e-05;
        float _2109 = (-1.0) - _2108;
        float _2111 = _2108 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2107 > _2111) || ((_2107 < _2109) || ((_2106 > _2111) || ((_2106 < _2109) || ((_2105 < _2109) || (_2105 > _2111))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2305 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2107, cbModelParam._m0[17u].z, fma(_2106, cbModelParam._m0[17u].y, _2105 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2107, cbModelParam._m0[18u].z, fma(_2106, cbModelParam._m0[18u].y, _2105 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2107, cbModelParam._m0[19u].z, fma(_2106, cbModelParam._m0[19u].y, _2105 * cbModelParam._m0[19u].x))), _1394);
            frontier_phi_24_48_ladder = _2305.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2305.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2305.x * cbModelParam._m0[1u].z;
        }
        _1486 = frontier_phi_24_48_ladder_2;
        _1488 = frontier_phi_24_48_ladder_1;
        _1490 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1470 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_490, _491, _492), _1394);
        _1486 = _1470.x * cbModelParam._m0[1u].z;
        _1488 = _1470.y * cbModelParam._m0[1u].z;
        _1490 = _1470.z * cbModelParam._m0[1u].z;
    }
    float _1503 = (((_517 * _467) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1486 - _1385)) + _1385);
    float _1505 = (((_517 * _469) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1488 - _1387)) + _1387);
    float _1507 = (((_517 * _470) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1490 - _1389)) + _1389);
    float _1510 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1505, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1513 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1505, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1516 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1505, cbSceneParam._m0[91u].y, _1503 * cbSceneParam._m0[91u].x));
    uvec4 _1526 = floatBitsToUint(cbInstanceData._m0[_441 + 5u]);
    uint _1528 = _1526.x * 14u;
    uint _1529 = _1528 + 13u;
    float _1536 = _482 + (-1.0);
    float _1541 = (cbLight._m0[_1529].x * _1536) + 1.0;
    float _1542 = (cbLight._m0[_1529].y * _1536) + 1.0;
    float _1543 = (cbLight._m0[_1529].z * _1536) + 1.0;
    float _1544 = (cbLight._m0[_1529].w * _1536) + 1.0;
    uint _1545 = _1528 + 5u;
    float _1551 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
    uint _1555 = _1528 + 4u;
    float _1562 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
    uint _1566 = _1528 | 1u;
    float _1577 = dot(vec3(cbLight._m0[_1528].xyz), vec3(_311, _312, _313));
    float _1580 = dot(vec3(cbLight._m0[_1566].xyz), vec3(_311, _312, _313));
    float _3671 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
    float _3682 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
    float _1585 = (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * 0.3183098733425140380859375;
    float _1587 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.3183098733425140380859375;
    float _1594 = ((cbLight._m0[_1545].x * _1551) * _1587) + ((cbLight._m0[_1555].x * _1562) * _1585);
    float _1595 = ((_1551 * cbLight._m0[_1545].y) * _1587) + ((_1562 * cbLight._m0[_1555].y) * _1585);
    float _1596 = ((_1551 * cbLight._m0[_1545].z) * _1587) + ((_1562 * cbLight._m0[_1555].z) * _1585);
    uvec4 _1601 = floatBitsToUint(cbLight._m0[_1528 + 12u]);
    bool _1603 = _1601.x == 0u;
    float _1614;
    float _1616;
    float _1618;
    if (_1603)
    {
        _1614 = _1594;
        _1616 = _1595;
        _1618 = _1596;
    }
    else
    {
        uint _1622 = _1528 + 6u;
        float _1638 = (dot(vec3(cbLight._m0[_1528 + 2u].xyz), vec3(_311, _312, _313)) * 0.5) + 0.5;
        float _1639 = _1638 * _1638;
        float _3693 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1641 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _1614 = (((cbLight._m0[_1622].x * 0.3183098733425140380859375) * _1640) * _1641) + _1594;
        _1616 = (((cbLight._m0[_1622].y * 0.3183098733425140380859375) * _1640) * _1641) + _1595;
        _1618 = (((cbLight._m0[_1622].z * 0.3183098733425140380859375) * _1640) * _1641) + _1596;
    }
    bool _1621 = _1601.y == 0u;
    float _1659;
    float _1661;
    float _1663;
    if (_1621)
    {
        _1659 = _1614;
        _1661 = _1616;
        _1663 = _1618;
    }
    else
    {
        uint _1829 = _1528 + 7u;
        float _1845 = (dot(vec3(cbLight._m0[_1528 + 3u].xyz), vec3(_311, _312, _313)) * 0.5) + 0.5;
        float _1846 = _1845 * _1845;
        float _3709 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1848 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
        _1659 = (((cbLight._m0[_1829].x * 0.3183098733425140380859375) * _1847) * _1848) + _1614;
        _1661 = (((cbLight._m0[_1829].y * 0.3183098733425140380859375) * _1847) * _1848) + _1616;
        _1663 = (((cbLight._m0[_1829].z * 0.3183098733425140380859375) * _1847) * _1848) + _1618;
    }
    uint _1666 = _1528 + 8u;
    float _1679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1528].w)) * _314) * 0.949999988079071044921875);
    float _1680 = _1679 * _1679;
    float _1681 = cbLight._m0[_1528].x + _392;
    float _1682 = cbLight._m0[_1528].y + _393;
    float _1683 = cbLight._m0[_1528].z + _394;
    float _1687 = inversesqrt(dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683)));
    float _1688 = _1687 * _1681;
    float _1689 = _1687 * _1682;
    float _1690 = _1687 * _1683;
    float _1691 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1528].xyz));
    float _3725 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1694 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _1695 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _1696 = dot(vec3(_311, _312, _313), vec3(_1688, _1689, _1690));
    float _3747 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1699 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _1700 = dot(vec3(cbLight._m0[_1528].xyz), vec3(_1688, _1689, _1690));
    float _3758 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1704 = _1680 * _1680;
    float _1708 = ((_1699 * _1699) * (_1704 + (-1.0))) + 1.0;
    float _1716 = exp2(log2(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * 5.0);
    float _1717 = 0.959999978542327880859375 - _464;
    float _1719 = 0.959999978542327880859375 - _465;
    float _1720 = 0.959999978542327880859375 - _466;
    float _1727 = 1.0 - _1680;
    float _1738 = (0.5 / (((_1695 * ((_1694 * _1727) + _1680)) + 9.9999999392252902907785028219223e-09) + (((_1695 * _1727) + _1680) * _1694))) * _1694;
    float _3769 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1740 = (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1704 / ((_1708 * _1708) * 3.141590118408203125));
    uint _1751 = _1528 + 9u;
    float _1762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1566].w)) * _314) * 0.949999988079071044921875);
    float _1763 = _1762 * _1762;
    float _1764 = cbLight._m0[_1566].x + _392;
    float _1765 = cbLight._m0[_1566].y + _393;
    float _1766 = cbLight._m0[_1566].z + _394;
    float _1770 = inversesqrt(dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766)));
    float _1771 = _1770 * _1764;
    float _1772 = _1770 * _1765;
    float _1773 = _1770 * _1766;
    float _1774 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1566].xyz));
    float _3780 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1777 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _1778 = dot(vec3(_311, _312, _313), vec3(_1771, _1772, _1773));
    float _3791 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1781 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _1782 = dot(vec3(cbLight._m0[_1566].xyz), vec3(_1771, _1772, _1773));
    float _3802 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1786 = _1763 * _1763;
    float _1790 = ((_1781 * _1781) * (_1786 + (-1.0))) + 1.0;
    float _1797 = exp2(log2(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * 5.0);
    float _1804 = 1.0 - _1763;
    float _1814 = (0.5 / (((_1695 * ((_1777 * _1804) + _1763)) + 9.9999999392252902907785028219223e-09) + (((_1695 * _1804) + _1763) * _1777))) * _1777;
    float _3813 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1816 = (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1786 / ((_1790 * _1790) * 3.141590118408203125));
    float _1826 = (((((_1797 * _1717) + _467) * cbLight._m0[_1751].x) * _1816) * _1551) + (((((_1716 * _1717) + _467) * cbLight._m0[_1666].x) * _1740) * _1562);
    float _1827 = (((((_1797 * _1719) + _469) * cbLight._m0[_1751].y) * _1816) * _1551) + (((((_1716 * _1719) + _469) * cbLight._m0[_1666].y) * _1740) * _1562);
    float _1828 = (((((_1797 * _1720) + _470) * cbLight._m0[_1751].z) * _1816) * _1551) + (((((_1716 * _1720) + _470) * cbLight._m0[_1666].z) * _1740) * _1562);
    float _1890;
    float _1892;
    float _1894;
    if (_1603)
    {
        _1890 = _1826;
        _1892 = _1827;
        _1894 = _1828;
    }
    else
    {
        uint _1896 = _1528 + 2u;
        uint _1900 = _1528 + 10u;
        float _1914 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1896].w)) * _314) * 0.949999988079071044921875);
        float _1915 = _1914 * _1914;
        float _1916 = cbLight._m0[_1896].x + _392;
        float _1917 = cbLight._m0[_1896].y + _393;
        float _1918 = cbLight._m0[_1896].z + _394;
        float _1922 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
        float _1923 = _1922 * _1916;
        float _1924 = _1922 * _1917;
        float _1925 = _1922 * _1918;
        float _1926 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1896].xyz));
        float _3824 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1929 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1930 = dot(vec3(_311, _312, _313), vec3(_1923, _1924, _1925));
        float _3835 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1933 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1934 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_1923, _1924, _1925));
        float _3846 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1938 = _1915 * _1915;
        float _1942 = ((_1933 * _1933) * (_1938 + (-1.0))) + 1.0;
        float _1949 = exp2(log2(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * 5.0);
        float _1956 = 1.0 - _1915;
        float _1966 = (0.5 / (((_1695 * ((_1929 * _1956) + _1915)) + 9.9999999392252902907785028219223e-09) + (((_1695 * _1956) + _1915) * _1929))) * _1929;
        float _3857 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1968 = (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1938 / ((_1942 * _1942) * 3.141590118408203125));
        float _1969 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _1890 = (((((_1949 * _1717) + _467) * cbLight._m0[_1900].x) * _1968) * _1969) + _1826;
        _1892 = (((((_1949 * _1719) + _469) * cbLight._m0[_1900].y) * _1968) * _1969) + _1827;
        _1894 = (((((_1949 * _1720) + _470) * cbLight._m0[_1900].z) * _1968) * _1969) + _1828;
    }
    float _2004;
    float _2006;
    float _2008;
    if (_1621)
    {
        _2004 = _1890;
        _2006 = _1892;
        _2008 = _1894;
    }
    else
    {
        uint _2015 = _1528 + 3u;
        uint _2019 = _1528 + 11u;
        float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _314) * 0.949999988079071044921875);
        float _2034 = _2033 * _2033;
        float _2035 = cbLight._m0[_2015].x + _392;
        float _2036 = cbLight._m0[_2015].y + _393;
        float _2037 = cbLight._m0[_2015].z + _394;
        float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
        float _2042 = _2041 * _2035;
        float _2043 = _2041 * _2036;
        float _2044 = _2041 * _2037;
        float _2045 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_2015].xyz));
        float _3873 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2048 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _2049 = dot(vec3(_311, _312, _313), vec3(_2042, _2043, _2044));
        float _3884 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _2053 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2042, _2043, _2044));
        float _3895 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2057 = _2034 * _2034;
        float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
        float _2068 = exp2(log2(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * 5.0);
        float _2075 = 1.0 - _2034;
        float _2085 = (0.5 / (((_1695 * ((_2048 * _2075) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_1695 * _2075) + _2034) * _2048))) * _2048;
        float _3906 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2087 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
        float _2088 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
        _2004 = (((((_2068 * _1717) + _467) * cbLight._m0[_2019].x) * _2087) * _2088) + _1890;
        _2006 = (((((_2068 * _1719) + _469) * cbLight._m0[_2019].y) * _2087) * _2088) + _1892;
        _2008 = (((((_2068 * _1720) + _470) * cbLight._m0[_2019].z) * _2087) * _2088) + _1894;
    }
    float _2222;
    float _2224;
    float _2226;
    float _2228;
    float _2230;
    float _2232;
    if (_1526.y == 0u)
    {
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2163;
        float _2165 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2163;
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2163;
        uvec4 _2178 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2179 = _2178.x;
        uint _2190 = uint((float(_2178.y) * floor(float(uint(cbSceneParam._m0[85u].y * _401) / _2179))) + floor(float(uint(cbSceneParam._m0[85u].x * _400) / _2179)));
        float _2200 = (log2(_2166 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2201 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        uint _2204 = uint(isnan(14.0) ? _2201 : (isnan(_2201) ? 14.0 : min(_2201, 14.0)));
        uvec4 _2209 = texelFetch(g_lightClusterGridBuffer, int(((_2204 << 2u) + (_2190 << 6u)) >> 2u));
        uint _2210 = _2209.x;
        uint _2211 = _2178.z;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        float _2318;
        float _2320;
        if (((((1u << ((_2211 >> 4u) & 15u)) + 4294967295u) & _2210) == 0u) || ((_2211 & 240u) == 0u))
        {
            _2310 = 0.0;
            _2312 = 0.0;
            _2314 = 0.0;
            _2316 = 0.0;
            _2318 = 0.0;
            _2320 = 0.0;
        }
        else
        {
            float _2311;
            float _2313;
            float _2315;
            float _2317;
            float _2319;
            float _2321;
            float _2454 = 0.0;
            float _2455 = 0.0;
            float _2456 = 0.0;
            float _2457 = 0.0;
            float _2458 = 0.0;
            float _2459 = 0.0;
            uint _2460 = 0u;
            uint _2469;
            bool _2470;
            for (;;)
            {
                _2469 = texelFetch(g_lightClassification, int((((_2204 << 5u) + (_2190 << 9u)) + (_2460 << 2u)) >> 2u)).x;
                _2470 = _2469 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2470)
                {
                    frontier_phi_63_pred = _2459;
                    frontier_phi_63_pred_1 = _2458;
                    frontier_phi_63_pred_2 = _2457;
                    frontier_phi_63_pred_3 = _2456;
                    frontier_phi_63_pred_4 = _2455;
                    frontier_phi_63_pred_5 = _2454;
                }
                else
                {
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    uint _2584;
                    _2578 = _2454;
                    _2579 = _2455;
                    _2580 = _2456;
                    _2581 = _2457;
                    _2582 = _2458;
                    _2583 = _2459;
                    _2584 = _2469;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    float _2514;
                    float _2515;
                    for (;;)
                    {
                        uint _2588 = uint(findLSB(_2584)) + (_2460 << 5u);
                        uint _2585 = (_2584 + 4294967295u) & _2584;
                        uint _2590 = _2588 * 48u;
                        vec4 _2604 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2590)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 3u)).x));
                        uint _2610 = (_2588 * 48u) + 4u;
                        vec4 _2623 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2610)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 3u)).x));
                        uint _2629 = (_2588 * 48u) + 8u;
                        vec3 _2640 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2629)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 2u)).x));
                        float _2644 = _2604.x - _2164;
                        float _2645 = _2604.y - _2165;
                        float _2646 = _2604.z - _2166;
                        float _2647 = dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646));
                        float _2650 = inversesqrt(_2647);
                        float _2651 = _2650 * _2644;
                        float _2652 = _2650 * _2645;
                        float _2653 = _2650 * _2646;
                        float _2654 = dot(vec3(_422, _425, _428), vec3(_2651, _2652, _2653));
                        float _2659 = 1.0 - (_2647 * _2604.w);
                        float _3932 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                        float _2660 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                        float _2661 = sqrt(_2647) * _2623.w;
                        float _2664 = 1.39999997615814208984375 / (_2661 + 1.39999997615814208984375);
                        float _2665 = _2664 * _2664;
                        float _2668 = ((1.0 - _2665) * _2654) + _2665;
                        float _2671 = _2661 * _2661;
                        float _2675 = ((isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0))) * _2660) / ((_2671 * 0.699999988079071044921875) + 1.0);
                        float _2679 = (-0.0) - _2164;
                        float _2680 = (-0.0) - _2165;
                        float _2681 = (-0.0) - _2166;
                        float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
                        float _2686 = _2685 * _2679;
                        float _2687 = _2685 * _2680;
                        float _2688 = _2685 * _2681;
                        float _2696 = exp2(log2(1.0 / ((_2671 * 3.5) + 5.0)) * 0.25);
                        float _2697 = 1.0 - _498;
                        float _2704 = sqrt(1.0 - ((1.0 - (_2697 * _2697)) * (1.0 - (_2696 * _2696))));
                        float _2705 = _2704 * _2704;
                        float _2706 = _2705 * _2705;
                        float _2707 = _2686 + _2651;
                        float _2708 = _2687 + _2652;
                        float _2709 = _2688 + _2653;
                        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
                        float _2717 = dot(vec3(_422, _425, _428), vec3(_2686, _2687, _2688));
                        float _3948 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2720 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                        float _2721 = dot(vec3(_422, _425, _428), vec3(_2713 * _2707, _2713 * _2708, _2713 * _2709));
                        float _3959 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                        float _2724 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                        float _2728 = ((_2724 * _2724) * (_2706 + (-1.0))) + 1.0;
                        float _2729 = _2664 * _2705;
                        float _2730 = _2729 * _2729;
                        float _2733 = ((1.0 - _2730) * _2654) + _2730;
                        float _3970 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2734 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
                        float _2735 = 1.0 - _2705;
                        float _2745 = (0.5 / (((_2734 * ((_2720 * _2735) + _2705)) + 9.9999999392252902907785028219223e-09) + (((_2734 * _2735) + _2705) * _2720))) * _2734;
                        float _3981 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                        float _2756 = (((_2706 * 3.1415927410125732421875) * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) / ((_2728 * _2728) * ((_2671 * 2.1991131305694580078125) + 3.141590118408203125))) * _2660;
                        _2513 = (_2675 * _2623.x) + _2581;
                        _2514 = (_2675 * _2623.y) + _2582;
                        _2515 = (_2675 * _2623.z) + _2583;
                        _2510 = (_2756 * _2640.x) + _2578;
                        _2511 = (_2756 * _2640.y) + _2579;
                        _2512 = (_2756 * _2640.z) + _2580;
                        if (_2585 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2578 = _2510;
                            _2579 = _2511;
                            _2580 = _2512;
                            _2581 = _2513;
                            _2582 = _2514;
                            _2583 = _2515;
                            _2584 = _2585;
                        }
                    }
                    frontier_phi_63_pred = _2515;
                    frontier_phi_63_pred_1 = _2514;
                    frontier_phi_63_pred_2 = _2513;
                    frontier_phi_63_pred_3 = _2512;
                    frontier_phi_63_pred_4 = _2511;
                    frontier_phi_63_pred_5 = _2510;
                }
                _2321 = frontier_phi_63_pred;
                _2319 = frontier_phi_63_pred_1;
                _2317 = frontier_phi_63_pred_2;
                _2315 = frontier_phi_63_pred_3;
                _2313 = frontier_phi_63_pred_4;
                _2311 = frontier_phi_63_pred_5;
                uint _2461 = _2460 + 1u;
                if (_2461 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2454 = _2311;
                    _2455 = _2313;
                    _2456 = _2315;
                    _2457 = _2317;
                    _2458 = _2319;
                    _2459 = _2321;
                    _2460 = _2461;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2310 = _2311;
            _2312 = _2313;
            _2314 = _2315;
            _2316 = _2317;
            _2318 = _2319;
            _2320 = _2321;
        }
        uvec4 _2324 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2325 = _2324.z;
        uint _2327 = (_2325 >> 8u) & 15u;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        if (((4294967295u << _2327) & _2210) == 0u)
        {
            _2422 = _2310;
            _2424 = _2312;
            _2426 = _2314;
            _2428 = _2316;
            _2430 = _2318;
            _2432 = _2320;
        }
        else
        {
            float _2447 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
            float _2448 = _2447 * _2164;
            float _2449 = _2447 * _2165;
            float _2450 = _2447 * _2166;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2327 < ((_2325 >> 12u) & 15u))
            {
                float _2423;
                float _2425;
                float _2427;
                float _2429;
                float _2431;
                float _2433;
                float _2561 = _2310;
                float _2562 = _2312;
                float _2563 = _2314;
                float _2564 = _2316;
                float _2565 = _2318;
                float _2566 = _2320;
                uint _2567 = _2327;
                uint _2576;
                bool _2577;
                for (;;)
                {
                    _2576 = texelFetch(g_lightClassification, int((((_2204 << 5u) + (_2190 << 9u)) + (_2567 << 2u)) >> 2u)).x;
                    _2577 = _2576 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2577)
                    {
                        frontier_phi_69_pred = _2566;
                        frontier_phi_69_pred_1 = _2565;
                        frontier_phi_69_pred_2 = _2564;
                        frontier_phi_69_pred_3 = _2563;
                        frontier_phi_69_pred_4 = _2562;
                        frontier_phi_69_pred_5 = _2561;
                    }
                    else
                    {
                        float _2761;
                        float _2762;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _2774 = _2561;
                        float _2775 = _2562;
                        float _2776 = _2563;
                        float _2777 = _2564;
                        float _2778 = _2565;
                        float _2779 = _2566;
                        uint _2780 = _2576;
                        uint _2781;
                        vec4 _2806;
                        float _2807;
                        vec4 _2822;
                        vec3 _2834;
                        vec4 _2850;
                        vec4 _2866;
                        float _2913;
                        bool _2914;
                        for (;;)
                        {
                            uint _2791 = ((_2567 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2780));
                            _2781 = (_2780 + 4294967295u) & _2780;
                            uint _2793 = _2791 * 40u;
                            _2806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 3u)).x));
                            _2807 = _2806.w;
                            uint _2809 = (_2791 * 40u) + 4u;
                            _2822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 3u)).x));
                            uint _2824 = (_2791 * 40u) + 8u;
                            _2834 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x));
                            uint _2837 = (_2791 * 40u) + 16u;
                            _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            uint _2853 = (_2791 * 40u) + 20u;
                            _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            uint _2869 = (_2791 * 40u) + 24u;
                            vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2888 = (_2791 * 40u) + 28u;
                            vec4 _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            _2913 = fma(_2166, _2901.z, fma(_2165, _2901.y, _2901.x * _2164)) + _2901.w;
                            _2914 = !((fma(_2166, _2882.z, fma(_2165, _2882.y, _2882.x * _2164)) + _2882.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2914)
                            {
                                float _2941 = _2806.x - _2164;
                                float _2942 = _2806.y - _2165;
                                float _2943 = _2806.z - _2166;
                                float _2944 = dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943));
                                float _2947 = inversesqrt(_2944);
                                float _2948 = _2947 * _2941;
                                float _2949 = _2947 * _2942;
                                float _2950 = _2947 * _2943;
                                float _2954 = 1.0 - (_2944 / (_2807 * _2807));
                                float _3992 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                                float _2955 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
                                float _2959 = sqrt(_2944) * _2822.w;
                                float _2961 = 1.39999997615814208984375 / (_2959 + 1.39999997615814208984375);
                                float _2962 = _2961 * _2961;
                                float _2965 = ((1.0 - _2962) * dot(vec3(_2948, _2949, _2950), vec3(_422, _425, _428))) + _2962;
                                float _2968 = _2959 * _2959;
                                float _2972 = (fma(_2166, _2850.z, fma(_2165, _2850.y, _2850.x * _2164)) + _2850.w) / _2913;
                                float _2973 = (fma(_2166, _2866.z, fma(_2165, _2866.y, _2866.x * _2164)) + _2866.w) / _2913;
                                float _2977 = 1.0 - dot(vec2(_2972, _2973), vec2(_2972, _2973));
                                float _4008 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2978 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                                float _2979 = _2978 * (((isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))) * _2955) / ((_2968 * 0.699999988079071044921875) + 1.0));
                                float _2991 = exp2(log2(1.0 / ((_2968 * 3.5) + 5.0)) * 0.25);
                                float _2992 = 1.0 - _498;
                                float _2999 = sqrt(1.0 - ((1.0 - (_2992 * _2992)) * (1.0 - (_2991 * _2991))));
                                float _3000 = _2999 * _2999;
                                float _3001 = _3000 * _3000;
                                float _3002 = _2948 - _2448;
                                float _3003 = _2949 - _2449;
                                float _3004 = _2950 - _2450;
                                float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                                float _3012 = dot(vec3(_422, _425, _428), vec3((-0.0) - _2448, (-0.0) - _2449, (-0.0) - _2450));
                                float _4019 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3015 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                                float _3016 = dot(vec3(_422, _425, _428), vec3(_3008 * _3002, _3008 * _3003, _3008 * _3004));
                                float _4030 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3019 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                                float _3023 = ((_3019 * _3019) * (_3001 + (-1.0))) + 1.0;
                                float _3024 = _2961 * _3000;
                                float _3025 = _3024 * _3024;
                                float _3031 = ((1.0 - _3025) * dot(vec3(_422, _425, _428), vec3(_2948, _2949, _2950))) + _3025;
                                float _4041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3032 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                                float _3033 = 1.0 - _3000;
                                float _3043 = (0.5 / (((_3032 * ((_3015 * _3033) + _3000)) + 9.9999999392252902907785028219223e-09) + (((_3032 * _3033) + _3000) * _3015))) * _3032;
                                float _4052 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3053 = (_2978 * _2955) * (((_3001 * 3.1415927410125732421875) * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) / ((_3023 * _3023) * ((_2968 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2979 * _2822.z;
                                frontier_phi_75_pred_1 = _2979 * _2822.y;
                                frontier_phi_75_pred_2 = _2979 * _2822.x;
                                frontier_phi_75_pred_3 = _3053 * _2834.z;
                                frontier_phi_75_pred_4 = _3053 * _2834.y;
                                frontier_phi_75_pred_5 = _3053 * _2834.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3062 = frontier_phi_75_pred;
                            _3061 = frontier_phi_75_pred_1;
                            _3060 = frontier_phi_75_pred_2;
                            _3059 = frontier_phi_75_pred_3;
                            _3058 = frontier_phi_75_pred_4;
                            _3057 = frontier_phi_75_pred_5;
                            _2764 = _3060 + _2777;
                            _2765 = _3061 + _2778;
                            _2766 = _3062 + _2779;
                            _2761 = _3057 + _2774;
                            _2762 = _3058 + _2775;
                            _2763 = _3059 + _2776;
                            if (_2781 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2781;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2766;
                        frontier_phi_69_pred_1 = _2765;
                        frontier_phi_69_pred_2 = _2764;
                        frontier_phi_69_pred_3 = _2763;
                        frontier_phi_69_pred_4 = _2762;
                        frontier_phi_69_pred_5 = _2761;
                    }
                    _2433 = frontier_phi_69_pred;
                    _2431 = frontier_phi_69_pred_1;
                    _2429 = frontier_phi_69_pred_2;
                    _2427 = frontier_phi_69_pred_3;
                    _2425 = frontier_phi_69_pred_4;
                    _2423 = frontier_phi_69_pred_5;
                    uint _2568 = _2567 + 1u;
                    if (_2568 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2561 = _2423;
                        _2562 = _2425;
                        _2563 = _2427;
                        _2564 = _2429;
                        _2565 = _2431;
                        _2566 = _2433;
                        _2567 = _2568;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2433;
                frontier_phi_57_58_ladder_1 = _2431;
                frontier_phi_57_58_ladder_2 = _2429;
                frontier_phi_57_58_ladder_3 = _2427;
                frontier_phi_57_58_ladder_4 = _2425;
                frontier_phi_57_58_ladder_5 = _2423;
            }
            else
            {
                frontier_phi_57_58_ladder = _2320;
                frontier_phi_57_58_ladder_1 = _2318;
                frontier_phi_57_58_ladder_2 = _2316;
                frontier_phi_57_58_ladder_3 = _2314;
                frontier_phi_57_58_ladder_4 = _2312;
                frontier_phi_57_58_ladder_5 = _2310;
            }
            _2422 = frontier_phi_57_58_ladder_5;
            _2424 = frontier_phi_57_58_ladder_4;
            _2426 = frontier_phi_57_58_ladder_3;
            _2428 = frontier_phi_57_58_ladder_2;
            _2430 = frontier_phi_57_58_ladder_1;
            _2432 = frontier_phi_57_58_ladder;
        }
        float _2437 = isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0));
        _2222 = (_2437 * _2428) + _1659;
        _2224 = (_2437 * _2430) + _1661;
        _2226 = (_2437 * _2432) + _1663;
        _2228 = ((_2422 * _467) * _2437) + _2004;
        _2230 = ((_2424 * _469) * _2437) + _2006;
        _2232 = ((_2426 * _470) * _2437) + _2008;
    }
    else
    {
        _2222 = _1659;
        _2224 = _1661;
        _2226 = _1663;
        _2228 = _2004;
        _2230 = _2006;
        _2232 = _2008;
    }
    float _4068 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4079 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4090 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    uint _2252 = _441 + 6u;
    float _2260 = _400 / cbSceneParam._m0[86u].x;
    float _2261 = _401 / cbSceneParam._m0[86u].y;
    vec4 _2275 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2260, _2261, (log2((isnan(cbSceneParam._m0[77u].w) ? _334 : (isnan(_334) ? cbSceneParam._m0[77u].w : min(_334, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2277 = _2275.x;
    float _2278 = _2275.y;
    float _2279 = _2275.z;
    float _2280 = _2275.w;
    float _2372;
    float _2374;
    float _2376;
    float _2378;
    if (_334 > cbSceneParam._m0[78u].w)
    {
        float _2335 = isnan(_334) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _334 : min(cbSceneParam._m0[80u].w, _334));
        float _2336 = _2335 / _334;
        float _2347 = _2336 * _385;
        float _2348 = _386 * _2336;
        float _2349 = (-0.0) - _2348;
        float _2350 = _2336 * _387;
        float _2352 = (cbSceneParam._m0[77u].w * _2349) / _2335;
        float _2353 = _2352 + cbSceneParam._m0[79u].w;
        float _2354 = cbSceneParam._m0[79u].w - _2348;
        float _2360 = sqrt(((_2347 * _2347) + (_2348 * _2348)) + (_2350 * _2350));
        float _2363 = (1.0 - (cbSceneParam._m0[77u].w / _2335)) * _2360;
        float _2368 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2370 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2523;
        if (abs((_2349 - _2352) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2523 = ((((_2353 > 0.0) ? exp2(_2368 * _2353) : (2.0 - exp2(_2370 * _2353))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2363;
        }
        else
        {
            float _2483 = 1.0 / cbSceneParam._m0[80u].x;
            float _2484 = isnan(_2354) ? _2353 : (isnan(_2353) ? _2354 : max(_2353, _2354));
            float _2485 = isnan(_2354) ? _2353 : (isnan(_2353) ? _2354 : min(_2353, _2354));
            float _2494 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : min(_2484, 0.0));
            float _2495 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : min(_2485, 0.0));
            _2523 = ((abs(_2360 / _2349) * cbSceneParam._m0[80u].y) * ((((_2494 - _2495) * 2.0) - ((exp2(_2368 * (isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0)))) - exp2(_2368 * (isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0))))) * _2483)) - ((exp2(_2370 * _2494) - exp2(_2370 * _2495)) * _2483))) + (_2363 * cbSceneParam._m0[80u].z);
        }
        vec4 _2525 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2260, _2261, 1.0), 0.0);
        float _2534 = exp2((_2523 * (-1.44269502162933349609375)) * (1.0 - _2525.w));
        float _2535 = log2(_2534);
        float _2551 = log2(_2280);
        _2372 = (exp2(_2551 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2535 * cbSceneParam._m0[78u].x)) * _2525.x) / cbSceneParam._m0[78u].x)) + _2277;
        _2374 = (exp2(_2551 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2535 * cbSceneParam._m0[78u].y)) * _2525.y) / cbSceneParam._m0[78u].y)) + _2278;
        _2376 = (exp2(_2551 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2535 * cbSceneParam._m0[78u].z)) * _2525.z) / cbSceneParam._m0[78u].z)) + _2279;
        _2378 = _2534 * _2280;
    }
    else
    {
        _2372 = _2277;
        _2374 = _2278;
        _2376 = _2279;
        _2378 = _2280;
    }
    float _2390 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2391 = _2390 == 3.0;
    float _2392 = log2(_2378);
    float _2399 = exp2(_2392 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2222 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _482))) + ((_2228 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1292)) * cbPerFrame._m0[3u].x));
    float _2400 = exp2(_2392 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_2224 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _482))) + ((_2230 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1292)) * cbPerFrame._m0[3u].x));
    float _2401 = exp2(_2392 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_2226 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _482))) + ((_2232 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1292)) * cbPerFrame._m0[3u].x));
    float _2410 = (_2390 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2410 * (_2391 ? _2399 : (_2399 + (cbSceneParam._m0[72u].w * _2372)));
    SV_Target.y = _2410 * (_2391 ? _2400 : (_2400 + (cbSceneParam._m0[72u].w * _2374)));
    SV_Target.z = _2410 * (_2391 ? _2401 : (_2401 + (cbSceneParam._m0[72u].w * _2376)));
    SV_Target.w = cbInstanceData._m0[_2252].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2252].w;
}


