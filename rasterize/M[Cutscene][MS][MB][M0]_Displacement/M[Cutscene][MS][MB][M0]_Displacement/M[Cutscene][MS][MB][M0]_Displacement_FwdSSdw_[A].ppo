#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_22;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_26;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 7, component = 3) in float TEXCOORD_11;
layout(location = 8) in float TEXCOORD_12;
layout(location = 8, component = 1) in float TEXCOORD_13;
layout(location = 8, component = 2) in float TEXCOORD_14;
layout(location = 8, component = 3) in float TEXCOORD_15;
layout(location = 9) in float TEXCOORD_16;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1283;
float _3666;
float _3667;
float _3668;
float _3669;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = 1.0 - (cbMtdParam._m0[17u].w * TEXCOORD_14);
    float _254 = 1.0 - (cbMtdParam._m0[17u].w * TEXCOORD_15);
    float _255 = 1.0 - (cbMtdParam._m0[17u].w * TEXCOORD_16);
    float _3678 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3689 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3700 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    vec4 _278 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _284 = _278.x * cbMtdParam._m0[11u].x;
    float _285 = _278.y * cbMtdParam._m0[11u].y;
    float _286 = _278.z * cbMtdParam._m0[11u].z;
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _325 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _358 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].x * TEXCOORD.z) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((cbMtdParam._m0[20u].y * TEXCOORD.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[22u].zw, cbMtdParam._m0[23u].x, 0.0));
    float _389 = ((cbMtdParam._m0[14u].z * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[18u].y) + _372) * cbMtdParam._m0[18u].x))) + 1.0;
    float _3711 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _397 = (_390 * ((_325.x * cbMtdParam._m0[12u].x) - _284)) + _284;
    float _398 = (_390 * ((_325.y * cbMtdParam._m0[12u].y) - _285)) + _285;
    float _399 = (_390 * ((_325.z * cbMtdParam._m0[12u].z) - _286)) + _286;
    vec4 _417 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _312) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _313) + cbTextureTilingScale._m0[7u].w));
    float _425 = ((_397 * 4.55000019073486328125) * cbMtdParam._m0[13u].x) * _417.x;
    float _428 = ((_398 * 4.55000019073486328125) * cbMtdParam._m0[13u].y) * _417.y;
    float _431 = ((_399 * 4.55000019073486328125) * cbMtdParam._m0[13u].z) * _417.z;
    float _452 = ((cbMtdParam._m0[14u].w * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_8) * 2.0) - texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w)).x)) + 1.0;
    float _3722 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _455 = cbMtdParam._m0[17u].z * _453;
    float _472 = sin(cbMtdParam._m0[19u].x);
    float _473 = cos(cbMtdParam._m0[19u].x);
    float _474 = TEXCOORD.x + (-0.5);
    float _476 = _474 + cbMtdParam._m0[19u].z;
    float _477 = TEXCOORD.y + (-0.5);
    float _478 = _477 + cbMtdParam._m0[19u].w;
    vec4 _500 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * (fma(_478, (-0.0) - _472, _476 * _473) + 0.5)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (fma(_478, _473, _476 * _472) + 0.5)) + cbTextureTilingScale._m0[6u].w));
    float _511 = exp2(log2((1.0 - _500.w) * cbMtdParam._m0[18u].z) * cbMtdParam._m0[18u].w);
    float _3733 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _516 = _512 * ((cbMtdParam._m0[9u].x * _397) - _397);
    float _517 = _512 * ((cbMtdParam._m0[9u].y * _398) - _398);
    float _518 = _512 * ((cbMtdParam._m0[9u].z * _399) - _399);
    float _525 = (_516 + _397) - (_455 * _516);
    float _526 = (_517 + _398) - (_455 * _517);
    float _527 = (_518 + _399) - (_455 * _518);
    float _544 = sin(cbMtdParam._m0[16u].x);
    float _545 = cos(cbMtdParam._m0[16u].x);
    float _546 = _474 + cbMtdParam._m0[20u].z;
    float _547 = _477 + cbMtdParam._m0[20u].w;
    vec4 _566 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * (fma(_547, (-0.0) - _544, _546 * _545) + 0.5)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_547, _545, _546 * _544) + 0.5)) + cbTextureTilingScale._m0[1u].w));
    float _576 = exp2(log2((1.0 - _566.w) * cbMtdParam._m0[17u].y) * cbMtdParam._m0[16u].w);
    float _3744 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _596 = (((_525 - _425) + ((((cbMtdParam._m0[10u].x * _397) - _525) * _453) * _577)) * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) + _425;
    float _597 = (((_526 - _428) + ((((cbMtdParam._m0[10u].y * _398) - _526) * _453) * _577)) * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) + _428;
    float _598 = (((_527 - _431) + ((((cbMtdParam._m0[10u].z * _399) - _527) * _453) * _577)) * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) + _431;
    vec4 _610 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    vec4 _627 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _629 = _627.x;
    float _630 = _627.y;
    float _631 = _627.z;
    float _640 = ((_610.z - _631) * _390) + _631;
    float _643 = ((((_610.x - _629) * _390) + _629) * 2.0) + (-1.0);
    float _645 = ((((_610.y - _630) * _390) + _630) * 2.0) + (-1.0);
    float _646 = dot(vec2(_643, _645), vec2(_643, _645));
    float _3755 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _651 = sqrt(1.0 - (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))));
    vec4 _663 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w));
    float _679 = (((_663.z - _640) * TEXCOORD_11) * cbMtdParam._m0[15u].z) + _640;
    float _687 = ((_500.z - _679) * cbMtdParam._m0[15u].x) + _679;
    float _697 = cbMtdParam._m0[19u].y - (cbMtdParam._m0[19u].y * _453);
    float _703 = cbMtdParam._m0[17u].x * _453;
    float _710 = ((((((_663.x * 2.0) + (-1.0)) * TEXCOORD_11) * cbMtdParam._m0[15u].y) + _643) + (_697 * ((_500.x * 2.0) + (-1.0)))) + (_703 * ((_566.x * 2.0) + (-1.0)));
    float _711 = ((((((_663.y * 2.0) + (-1.0)) * TEXCOORD_12) * cbMtdParam._m0[15u].y) + _645) + (_697 * ((_500.y * 2.0) + (-1.0)))) + (_703 * ((_566.y * 2.0) + (-1.0)));
    float _714 = fma(_651, _232 * NORMAL.x, fma(_711, _239 * TANGENT.x, (_225 * _217) * _710));
    float _717 = fma(_651, _232 * NORMAL.y, fma(_711, _239 * TANGENT.y, (_225 * _218) * _710));
    float _720 = fma(_651, _232 * NORMAL.z, fma(_711, _239 * TANGENT.z, (_225 * _219) * _710));
    float _724 = inversesqrt(dot(vec3(_714, _717, _720), vec3(_714, _717, _720)));
    float _725 = _724 * _714;
    float _726 = _724 * _717;
    float _727 = _724 * _720;
    float _3766 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _728 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3788 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3799 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _745 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _795 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _785);
    float _796 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _785);
    float _797 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _785);
    float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
    float _802 = _795 * _801;
    float _803 = _796 * _801;
    float _804 = _797 * _801;
    vec4 _809 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _811 = _809.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _964 = sqrt(((_795 * _795) + (_796 * _796)) + (_797 * _797));
        float _970 = (cbMatDynParam._m0[5u].x * _964) + cbMatDynParam._m0[5u].y;
        float _3810 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _975 = (cbMatDynParam._m0[5u].z * _964) + cbMatDynParam._m0[5u].w;
        float _3821 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) - _971)) + _971) < ((_811 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _822 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _823 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _841 = fma(_727, cbSceneParam._m0[5u].z, fma(_726, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _725));
    float _844 = fma(_727, cbSceneParam._m0[6u].z, fma(_726, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _725));
    float _847 = fma(_727, cbSceneParam._m0[7u].z, fma(_726, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _725));
    uint _860 = _293 + 9u;
    uint _861 = _860 + uint(cbMatDynParam._m0[0u].w);
    float _867 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_861].x;
    float _868 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * cbInstanceData._m0[_861].y;
    float _869 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * cbInstanceData._m0[_861].z;
    float _3832 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    vec4 _881 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _822, cbSceneParam._m0[86u].y * _823));
    float _884 = _881.x * TEXCOORD_5.w;
    float _885 = dot(vec3(_725, _726, _727), vec3(_802, _803, _804));
    float _888 = _885 * 2.0;
    float _892 = (_888 * _725) - _802;
    float _893 = (_888 * _726) - _803;
    float _894 = (_888 * _727) - _804;
    float _898 = abs(dot(vec3(_802, _803, _804), vec3(_725, _726, _727)));
    float _3865 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _900 = sqrt(_728);
    float _913 = exp2((_900 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_900 * 3.0));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1282;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1009 = fma(_953, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945));
        float _1013 = fma(_953, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945));
        float _1017 = fma(_953, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945));
        float _1040 = _945 + _725;
        float _1041 = _949 + _726;
        float _1042 = _953 + _727;
        float _1052 = fma(_1042, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040)) - _1009;
        float _1053 = fma(_1042, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040)) - _1013;
        float _1054 = fma(_1042, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040)) - _1017;
        float _1058 = inversesqrt(dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054)));
        float _1071 = ((_1058 * _1052) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1009 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1058 * _1053) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1013 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1058 * _1054) / cbModelParam._m0[34u].z) + ((((((_1017 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        float _1110 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1076.x + (-0.5));
        float _1112 = _1110 * (_1076.y + (-0.5));
        float _1113 = _1110 * (_1076.z + (-0.5));
        float _1120 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1083.x + (-0.5));
        float _1122 = _1120 * (_1083.y + (-0.5));
        float _1123 = _1120 * (_1083.z + (-0.5));
        float _1130 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1090.x + (-0.5));
        float _1132 = _1130 * (_1090.y + (-0.5));
        float _1133 = _1130 * (_1090.z + (-0.5));
        float _1140 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1097.x + (-0.5));
        float _1142 = _1140 * (_1097.y + (-0.5));
        float _1143 = _1140 * (_1097.z + (-0.5));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = _1111 * 0.5;
        float _1148 = _1121 * 0.5;
        float _1149 = _1131 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1164 = (dot(vec3(_725, _726, _727), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1174 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3913 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1176 + 1.0))) + _1181) * _1144;
        float _1191 = _1112 * 0.5;
        float _1192 = _1122 * 0.5;
        float _1193 = _1132 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_725, _726, _727), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3946 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1218 + 1.0))) + _1223) * _1145;
        float _1233 = _1113 * 0.5;
        float _1234 = _1123 * 0.5;
        float _1235 = _1133 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_725, _726, _727), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3979 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1260 + 1.0))) + _1265) * _1146;
        _1282 = _1113;
        _1284 = _1112;
        _1285 = _1111;
        _1286 = _1123;
        _1287 = _1122;
        _1288 = _1121;
        _1289 = _1133;
        _1290 = _1132;
        _1291 = _1131;
        _1292 = _1146;
        _1293 = _1145;
        _1294 = _1144;
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
    }
    else
    {
        _1282 = _1283;
        _1284 = _1283;
        _1285 = _1283;
        _1286 = _1283;
        _1287 = _1283;
        _1288 = _1283;
        _1289 = _1283;
        _1290 = _1283;
        _1291 = _1283;
        _1292 = _1283;
        _1293 = _1283;
        _1294 = _1283;
        _1295 = 0.0;
        _1296 = 0.0;
        _1297 = 0.0;
    }
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1326 = fma(_953, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945));
        float _1330 = fma(_953, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945));
        float _1334 = fma(_953, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945));
        float _1357 = _945 + _725;
        float _1358 = _949 + _726;
        float _1359 = _953 + _727;
        float _1369 = fma(_1359, cbModelParam._m0[30u].z, fma(_1358, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1357)) - _1326;
        float _1370 = fma(_1359, cbModelParam._m0[31u].z, fma(_1358, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1357)) - _1330;
        float _1371 = fma(_1359, cbModelParam._m0[32u].z, fma(_1358, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1357)) - _1334;
        float _1375 = inversesqrt(dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371)));
        float _1388 = ((_1375 * _1369) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1326 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1375 * _1370) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1330 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1375 * _1371) / cbModelParam._m0[35u].z) + ((((((_1334 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        float _1425 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1392.x + (-0.5));
        float _1427 = _1425 * (_1392.y + (-0.5));
        float _1428 = _1425 * (_1392.z + (-0.5));
        float _1435 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1399.x + (-0.5));
        float _1437 = _1435 * (_1399.y + (-0.5));
        float _1438 = _1435 * (_1399.z + (-0.5));
        float _1445 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1406.x + (-0.5));
        float _1447 = _1445 * (_1406.y + (-0.5));
        float _1448 = _1445 * (_1406.z + (-0.5));
        float _1455 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1413.x + (-0.5));
        float _1457 = _1455 * (_1413.y + (-0.5));
        float _1458 = _1455 * (_1413.z + (-0.5));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = _1426 * 0.5;
        float _1463 = _1436 * 0.5;
        float _1464 = _1446 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_725, _726, _727), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4042 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1489 + 1.0))) + _1494) * _1459;
        float _1504 = _1427 * 0.5;
        float _1505 = _1437 * 0.5;
        float _1506 = _1447 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_725, _726, _727), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4075 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1531 + 1.0))) + _1536) * _1460;
        float _1546 = _1428 * 0.5;
        float _1547 = _1438 * 0.5;
        float _1548 = _1448 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_725, _726, _727), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4108 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1573 + 1.0))) + _1578) * _1461;
        _1595 = _1428;
        _1596 = _1427;
        _1597 = _1426;
        _1598 = _1438;
        _1599 = _1437;
        _1600 = _1436;
        _1601 = _1448;
        _1602 = _1447;
        _1603 = _1446;
        _1604 = _1461;
        _1605 = _1460;
        _1606 = _1459;
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
    }
    else
    {
        _1595 = _1283;
        _1596 = _1283;
        _1597 = _1283;
        _1598 = _1283;
        _1599 = _1283;
        _1600 = _1283;
        _1601 = _1283;
        _1602 = _1283;
        _1603 = _1283;
        _1604 = _1283;
        _1605 = _1283;
        _1606 = _1283;
        _1607 = 0.0;
        _1608 = 0.0;
        _1609 = 0.0;
    }
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1295)) + _1295;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1296)) + _1296;
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1297)) + _1297;
    float _1642 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1619));
    float _1663 = _892 * 0.5;
    float _1664 = _893 * 0.5;
    float _1665 = _894 * 0.5;
    float _1666 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1669 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1672 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1706;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1679 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1282, _1286, _1289, _1292));
        float _1683 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1687 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1694 = dot(vec4(cbModelParam._m0[39u]), vec4(_1663, _1664, _1665, 1.0));
        _1706 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1706 = 1.0;
    }
    float _1717;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1708 = dot(vec4(cbModelParam._m0[40u]), vec4(_1663, _1664, _1665, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1708) ? 0.0 : (isnan(0.0) ? _1708 : max(0.0, _1708))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1721 = (_1717 * cbModelParam._m0[1u].x) + (_1706 * (1.0 - cbModelParam._m0[1u].x));
    float _1731 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _728);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1731 : min(cbModelParam._m0[25u].z, _1731));
    float _1812;
    float _1814;
    float _1816;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1779 = fma(_953, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945)) + cbModelParam._m0[13u].w;
        float _1783 = fma(_953, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945)) + cbModelParam._m0[14u].w;
        float _1787 = fma(_953, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945)) + cbModelParam._m0[15u].w;
        float _1790 = fma(_894, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _892));
        float _1793 = fma(_894, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _892));
        float _1796 = fma(_894, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _892));
        float _1824;
        if (_1790 > 0.0)
        {
            _1824 = abs((1.0 - _1779) / _1790);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1779 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1824 = frontier_phi_17_15_ladder;
        }
        float _2046;
        if (_1793 > 0.0)
        {
            _2046 = abs((1.0 - _1783) / _1793);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1783 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2046 = frontier_phi_26_22_ladder;
        }
        float _2292;
        if (_1796 > 0.0)
        {
            _2292 = abs((1.0 - _1787) / _1796);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1787 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2292 = frontier_phi_38_33_ladder;
        }
        float _2294 = isnan(_2046) ? _1824 : (isnan(_1824) ? _2046 : min(_1824, _2046));
        float _2295 = isnan(_2292) ? _2294 : (isnan(_2294) ? _2292 : min(_2294, _2292));
        float _2299 = (_2295 * _1790) + _1779;
        float _2300 = (_2295 * _1793) + _1783;
        float _2301 = (_2295 * _1796) + _1787;
        float _2302 = _2295 * 9.9999997473787516355514526367188e-05;
        float _2304 = (-1.0) - _2302;
        float _2306 = _2302 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2301 > _2306) || ((_2301 < _2304) || ((_2300 > _2306) || ((_2300 < _2304) || ((_2299 < _2304) || (_2299 > _2306))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2301, cbModelParam._m0[9u].z, fma(_2300, cbModelParam._m0[9u].y, _2299 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2301, cbModelParam._m0[10u].z, fma(_2300, cbModelParam._m0[10u].y, _2299 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2301, cbModelParam._m0[11u].z, fma(_2300, cbModelParam._m0[11u].y, _2299 * cbModelParam._m0[11u].x))), _1732);
            frontier_phi_16_38_ladder = _2425.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2425.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2425.x * cbModelParam._m0[1u].y;
        }
        _1812 = frontier_phi_16_38_ladder_2;
        _1814 = frontier_phi_16_38_ladder_1;
        _1816 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1800 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_892, _893, _894), _1732);
        _1812 = _1800.x * cbModelParam._m0[1u].y;
        _1814 = _1800.y * cbModelParam._m0[1u].y;
        _1816 = _1800.z * cbModelParam._m0[1u].y;
    }
    float _1820 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _728);
    float _1821 = isnan(_1820) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1820 : min(cbModelParam._m0[25u].w, _1820));
    float _1911;
    float _1913;
    float _1915;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1875 = fma(_953, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945)) + cbModelParam._m0[21u].w;
        float _1879 = fma(_953, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945)) + cbModelParam._m0[22u].w;
        float _1883 = fma(_953, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945)) + cbModelParam._m0[23u].w;
        float _1886 = fma(_894, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _892));
        float _1889 = fma(_894, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _892));
        float _1892 = fma(_894, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _892));
        float _2051;
        if (_1886 > 0.0)
        {
            _2051 = abs((1.0 - _1875) / _1886);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1875 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2051 = frontier_phi_28_24_ladder;
        }
        float _2319;
        if (_1889 > 0.0)
        {
            _2319 = abs((1.0 - _1879) / _1889);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1879 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2319 = frontier_phi_40_35_ladder;
        }
        float _2524;
        if (_1892 > 0.0)
        {
            _2524 = abs((1.0 - _1883) / _1892);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1883 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2524 = frontier_phi_49_46_ladder;
        }
        float _2526 = isnan(_2319) ? _2051 : (isnan(_2051) ? _2319 : min(_2051, _2319));
        float _2527 = isnan(_2524) ? _2526 : (isnan(_2526) ? _2524 : min(_2526, _2524));
        float _2531 = (_2527 * _1886) + _1875;
        float _2532 = (_2527 * _1889) + _1879;
        float _2533 = (_2527 * _1892) + _1883;
        float _2534 = _2527 * 9.9999997473787516355514526367188e-05;
        float _2535 = (-1.0) - _2534;
        float _2537 = _2534 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2533 > _2537) || ((_2533 < _2535) || ((_2532 > _2537) || ((_2532 < _2535) || ((_2531 < _2535) || (_2531 > _2537))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2732 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2533, cbModelParam._m0[17u].z, fma(_2532, cbModelParam._m0[17u].y, _2531 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2533, cbModelParam._m0[18u].z, fma(_2532, cbModelParam._m0[18u].y, _2531 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2533, cbModelParam._m0[19u].z, fma(_2532, cbModelParam._m0[19u].y, _2531 * cbModelParam._m0[19u].x))), _1821);
            frontier_phi_25_49_ladder = _2732.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2732.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2732.x * cbModelParam._m0[1u].z;
        }
        _1911 = frontier_phi_25_49_ladder_2;
        _1913 = frontier_phi_25_49_ladder_1;
        _1915 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_892, _893, _894), _1821);
        _1911 = _1895.x * cbModelParam._m0[1u].z;
        _1913 = _1895.y * cbModelParam._m0[1u].z;
        _1915 = _1895.z * cbModelParam._m0[1u].z;
    }
    float _1927 = ((((1.0 - _913) * ((_900 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_913 * _900)) * _884;
    float _1928 = _1927 * ((cbModelParam._m0[1u].w * (_1911 - _1812)) + _1812);
    float _1929 = _1927 * ((cbModelParam._m0[1u].w * (_1913 - _1814)) + _1814);
    float _1930 = _1927 * ((cbModelParam._m0[1u].w * (_1915 - _1816)) + _1816);
    float _1933 = fma(_1930, cbSceneParam._m0[89u].z, fma(_1929, cbSceneParam._m0[89u].y, _1928 * cbSceneParam._m0[89u].x));
    float _1936 = fma(_1930, cbSceneParam._m0[90u].z, fma(_1929, cbSceneParam._m0[90u].y, _1928 * cbSceneParam._m0[90u].x));
    float _1939 = fma(_1930, cbSceneParam._m0[91u].z, fma(_1929, cbSceneParam._m0[91u].y, _1928 * cbSceneParam._m0[91u].x));
    vec4 _1947 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_822, _823));
    float _1949 = _1947.w;
    float _1961 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1949);
    float _1962 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1949);
    float _1963 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1949);
    uvec4 _1967 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _1969 = _1967.x * 14u;
    uint _1970 = _1969 + 13u;
    float _1977 = _884 + (-1.0);
    float _1982 = (cbLight._m0[_1970].x * _1977) + 1.0;
    float _1983 = (cbLight._m0[_1970].y * _1977) + 1.0;
    float _1984 = (cbLight._m0[_1970].z * _1977) + 1.0;
    float _1985 = (cbLight._m0[_1970].w * _1977) + 1.0;
    uint _1986 = _1969 + 5u;
    float _1992 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
    uint _1996 = _1969 + 4u;
    float _2005 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
    uint _2009 = _1969 | 1u;
    float _2020 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_725, _726, _727));
    float _2023 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_725, _726, _727));
    float _4244 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _4255 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2028 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * 0.3183098733425140380859375;
    float _2030 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.3183098733425140380859375;
    float _2037 = ((cbLight._m0[_1986].x * _1992) * _2030) + (((cbLight._m0[_1996].x * _1961) * _2005) * _2028);
    float _2038 = ((_1992 * cbLight._m0[_1986].y) * _2030) + (((cbLight._m0[_1996].y * _1962) * _2005) * _2028);
    float _2039 = ((_1992 * cbLight._m0[_1986].z) * _2030) + (((cbLight._m0[_1996].z * _1963) * _2005) * _2028);
    uvec4 _2043 = floatBitsToUint(cbLight._m0[_1969 + 12u]);
    bool _2045 = _2043.x == 0u;
    float _2056;
    float _2058;
    float _2060;
    if (_2045)
    {
        _2056 = _2037;
        _2058 = _2038;
        _2060 = _2039;
    }
    else
    {
        uint _2064 = _1969 + 6u;
        float _2080 = (dot(vec3(cbLight._m0[_1969 + 2u].xyz), vec3(_725, _726, _727)) * 0.5) + 0.5;
        float _2081 = _2080 * _2080;
        float _4266 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2082 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2083 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2056 = (((cbLight._m0[_2064].x * 0.3183098733425140380859375) * _2082) * _2083) + _2037;
        _2058 = (((cbLight._m0[_2064].y * 0.3183098733425140380859375) * _2082) * _2083) + _2038;
        _2060 = (((cbLight._m0[_2064].z * 0.3183098733425140380859375) * _2082) * _2083) + _2039;
    }
    bool _2063 = _2043.y == 0u;
    float _2101;
    float _2103;
    float _2105;
    if (_2063)
    {
        _2101 = _2056;
        _2103 = _2058;
        _2105 = _2060;
    }
    else
    {
        uint _2263 = _1969 + 7u;
        float _2279 = (dot(vec3(cbLight._m0[_1969 + 3u].xyz), vec3(_725, _726, _727)) * 0.5) + 0.5;
        float _2280 = _2279 * _2279;
        float _4282 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2281 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2282 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2101 = (((cbLight._m0[_2263].x * 0.3183098733425140380859375) * _2281) * _2282) + _2056;
        _2103 = (((cbLight._m0[_2263].y * 0.3183098733425140380859375) * _2281) * _2282) + _2058;
        _2105 = (((cbLight._m0[_2263].z * 0.3183098733425140380859375) * _2281) * _2282) + _2060;
    }
    uint _2108 = _1969 + 8u;
    float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _728) * 0.949999988079071044921875);
    float _2122 = _2121 * _2121;
    float _2123 = cbLight._m0[_1969].x + _802;
    float _2124 = cbLight._m0[_1969].y + _803;
    float _2125 = cbLight._m0[_1969].z + _804;
    float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
    float _2130 = _2129 * _2123;
    float _2131 = _2129 * _2124;
    float _2132 = _2129 * _2125;
    float _2133 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_1969].xyz));
    float _4298 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _4309 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _2137 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2138 = dot(vec3(_725, _726, _727), vec3(_2130, _2131, _2132));
    float _4320 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2142 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_2130, _2131, _2132));
    float _4331 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2146 = _2122 * _2122;
    float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
    float _2161 = (exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2162 = 1.0 - _2122;
    float _2173 = (0.5 / (((_2137 * ((_2136 * _2162) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2162) + _2122) * _2136))) * _2136;
    float _4342 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2175 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
    uint _2189 = _1969 + 9u;
    float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _728) * 0.949999988079071044921875);
    float _2201 = _2200 * _2200;
    float _2202 = cbLight._m0[_2009].x + _802;
    float _2203 = cbLight._m0[_2009].y + _803;
    float _2204 = cbLight._m0[_2009].z + _804;
    float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
    float _2209 = _2208 * _2202;
    float _2210 = _2208 * _2203;
    float _2211 = _2208 * _2204;
    float _2212 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_2009].xyz));
    float _4353 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2216 = dot(vec3(_725, _726, _727), vec3(_2209, _2210, _2211));
    float _4364 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2220 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2209, _2210, _2211));
    float _4375 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2224 = _2201 * _2201;
    float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
    float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2238 = 1.0 - _2201;
    float _2248 = (0.5 / (((_2137 * ((_2215 * _2238) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2238) + _2201) * _2215))) * _2215;
    float _4386 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2250 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
    float _2260 = (((_2237 * cbLight._m0[_2189].x) * _2250) * _1992) + ((((cbLight._m0[_2108].x * _1961) * _2161) * _2175) * _2005);
    float _2261 = (((_2237 * cbLight._m0[_2189].y) * _2250) * _1992) + ((((cbLight._m0[_2108].y * _1962) * _2161) * _2175) * _2005);
    float _2262 = (((_2237 * cbLight._m0[_2189].z) * _2250) * _1992) + ((((cbLight._m0[_2108].z * _1963) * _2161) * _2175) * _2005);
    float _2324;
    float _2326;
    float _2328;
    if (_2045)
    {
        _2324 = _2260;
        _2326 = _2261;
        _2328 = _2262;
    }
    else
    {
        uint _2330 = _1969 + 2u;
        uint _2334 = _1969 + 10u;
        float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _728) * 0.949999988079071044921875);
        float _2349 = _2348 * _2348;
        float _2350 = cbLight._m0[_2330].x + _802;
        float _2351 = cbLight._m0[_2330].y + _803;
        float _2352 = cbLight._m0[_2330].z + _804;
        float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
        float _2357 = _2356 * _2350;
        float _2358 = _2356 * _2351;
        float _2359 = _2356 * _2352;
        float _2360 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_2330].xyz));
        float _4397 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2364 = dot(vec3(_725, _726, _727), vec3(_2357, _2358, _2359));
        float _4408 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2368 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2357, _2358, _2359));
        float _4419 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2372 = _2349 * _2349;
        float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
        float _2385 = (exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2386 = 1.0 - _2349;
        float _2396 = (0.5 / (((_2137 * ((_2363 * _2386) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2386) + _2349) * _2363))) * _2363;
        float _4430 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2398 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
        float _2399 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2324 = (((_2385 * cbLight._m0[_2334].x) * _2398) * _2399) + _2260;
        _2326 = (((_2385 * cbLight._m0[_2334].y) * _2398) * _2399) + _2261;
        _2328 = (((_2385 * cbLight._m0[_2334].z) * _2398) * _2399) + _2262;
    }
    float _2434;
    float _2436;
    float _2438;
    if (_2063)
    {
        _2434 = _2324;
        _2436 = _2326;
        _2438 = _2328;
    }
    else
    {
        uint _2445 = _1969 + 3u;
        uint _2449 = _1969 + 11u;
        float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _728) * 0.949999988079071044921875);
        float _2464 = _2463 * _2463;
        float _2465 = cbLight._m0[_2445].x + _802;
        float _2466 = cbLight._m0[_2445].y + _803;
        float _2467 = cbLight._m0[_2445].z + _804;
        float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
        float _2472 = _2471 * _2465;
        float _2473 = _2471 * _2466;
        float _2474 = _2471 * _2467;
        float _2475 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_2445].xyz));
        float _4446 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2479 = dot(vec3(_725, _726, _727), vec3(_2472, _2473, _2474));
        float _4457 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2483 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2472, _2473, _2474));
        float _4468 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2487 = _2464 * _2464;
        float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
        float _2500 = (exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2501 = 1.0 - _2464;
        float _2511 = (0.5 / (((_2137 * ((_2478 * _2501) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2137 * _2501) + _2464) * _2478))) * _2478;
        float _4479 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2513 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
        float _2514 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2434 = (((_2500 * cbLight._m0[_2449].x) * _2513) * _2514) + _2324;
        _2436 = (((_2500 * cbLight._m0[_2449].y) * _2513) * _2514) + _2326;
        _2438 = (((_2500 * cbLight._m0[_2449].z) * _2513) * _2514) + _2328;
    }
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    if (_1967.y == 0u)
    {
        float _2589 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2590 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2589;
        float _2591 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2589;
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2589;
        uvec4 _2604 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2605 = _2604.x;
        uint _2616 = uint((float(_2604.y) * floor(float(uint(cbSceneParam._m0[85u].y * _823) / _2605))) + floor(float(uint(cbSceneParam._m0[85u].x * _822) / _2605)));
        float _2626 = (log2(_2592 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2627 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        uint _2630 = uint(isnan(14.0) ? _2627 : (isnan(_2627) ? 14.0 : min(_2627, 14.0)));
        uvec4 _2635 = texelFetch(g_lightClusterGridBuffer, int(((_2630 << 2u) + (_2616 << 6u)) >> 2u));
        uint _2636 = _2635.x;
        uint _2637 = _2604.z;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        if (((((1u << ((_2637 >> 4u) & 15u)) + 4294967295u) & _2636) == 0u) || ((_2637 & 240u) == 0u))
        {
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
        }
        else
        {
            float _2738;
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2748;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            uint _2895 = 0u;
            uint _2904;
            bool _2905;
            for (;;)
            {
                _2904 = texelFetch(g_lightClassification, int((((_2630 << 5u) + (_2616 << 9u)) + (_2895 << 2u)) >> 2u)).x;
                _2905 = _2904 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2905)
                {
                    frontier_phi_66_pred = _2889;
                    frontier_phi_66_pred_1 = _2894;
                    frontier_phi_66_pred_2 = _2893;
                    frontier_phi_66_pred_3 = _2892;
                    frontier_phi_66_pred_4 = _2891;
                    frontier_phi_66_pred_5 = _2890;
                }
                else
                {
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    uint _3040;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2891;
                    _3037 = _2892;
                    _3038 = _2893;
                    _3039 = _2894;
                    _3040 = _2904;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    for (;;)
                    {
                        uint _3044 = uint(findLSB(_3040)) + (_2895 << 5u);
                        uint _3041 = (_3040 + 4294967295u) & _3040;
                        uint _3046 = _3044 * 48u;
                        vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 3u)).x));
                        uint _3066 = (_3044 * 48u) + 4u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 3u)).x));
                        uint _3085 = (_3044 * 48u) + 8u;
                        vec3 _3096 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x));
                        float _3100 = _3060.x - _2590;
                        float _3101 = _3060.y - _2591;
                        float _3102 = _3060.z - _2592;
                        float _3103 = dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102));
                        float _3106 = inversesqrt(_3103);
                        float _3107 = _3106 * _3100;
                        float _3108 = _3106 * _3101;
                        float _3109 = _3106 * _3102;
                        float _3110 = dot(vec3(_841, _844, _847), vec3(_3107, _3108, _3109));
                        float _3115 = 1.0 - (_3103 * _3060.w);
                        float _4505 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3116 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3117 = sqrt(_3103) * _3079.w;
                        float _3120 = 1.39999997615814208984375 / (_3117 + 1.39999997615814208984375);
                        float _3121 = _3120 * _3120;
                        float _3124 = ((1.0 - _3121) * _3110) + _3121;
                        float _3127 = _3117 * _3117;
                        float _3131 = ((isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))) * _3116) / ((_3127 * 0.699999988079071044921875) + 1.0);
                        float _3135 = (-0.0) - _2590;
                        float _3136 = (-0.0) - _2591;
                        float _3137 = (-0.0) - _2592;
                        float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                        float _3142 = _3141 * _3135;
                        float _3143 = _3141 * _3136;
                        float _3144 = _3141 * _3137;
                        float _3152 = exp2(log2(1.0 / ((_3127 * 3.5) + 5.0)) * 0.25);
                        float _3153 = 1.0 - _900;
                        float _3160 = sqrt(1.0 - ((1.0 - (_3153 * _3153)) * (1.0 - (_3152 * _3152))));
                        float _3161 = _3160 * _3160;
                        float _3162 = _3161 * _3161;
                        float _3163 = _3142 + _3107;
                        float _3164 = _3143 + _3108;
                        float _3165 = _3144 + _3109;
                        float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                        float _3173 = dot(vec3(_841, _844, _847), vec3(_3142, _3143, _3144));
                        float _4521 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3176 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3177 = dot(vec3(_841, _844, _847), vec3(_3169 * _3163, _3169 * _3164, _3169 * _3165));
                        float _4532 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3180 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3184 = ((_3180 * _3180) * (_3162 + (-1.0))) + 1.0;
                        float _3185 = _3120 * _3161;
                        float _3186 = _3185 * _3185;
                        float _3189 = ((1.0 - _3186) * _3110) + _3186;
                        float _4543 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3190 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3191 = 1.0 - _3161;
                        float _3201 = (0.5 / (((_3190 * ((_3176 * _3191) + _3161)) + 9.9999999392252902907785028219223e-09) + (((_3190 * _3191) + _3161) * _3176))) * _3190;
                        float _4554 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3212 = (((_3162 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3184 * _3184) * ((_3127 * 2.1991131305694580078125) + 3.141590118408203125))) * _3116;
                        _2964 = (_3131 * _3079.x) + _3037;
                        _2965 = (_3131 * _3079.y) + _3038;
                        _2966 = (_3131 * _3079.z) + _3039;
                        _2961 = (_3212 * _3096.x) + _3034;
                        _2962 = (_3212 * _3096.y) + _3035;
                        _2963 = (_3212 * _3096.z) + _3036;
                        if (_3041 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _2963;
                            _3037 = _2964;
                            _3038 = _2965;
                            _3039 = _2966;
                            _3040 = _3041;
                        }
                    }
                    frontier_phi_66_pred = _2961;
                    frontier_phi_66_pred_1 = _2966;
                    frontier_phi_66_pred_2 = _2965;
                    frontier_phi_66_pred_3 = _2964;
                    frontier_phi_66_pred_4 = _2963;
                    frontier_phi_66_pred_5 = _2962;
                }
                _2738 = frontier_phi_66_pred;
                _2748 = frontier_phi_66_pred_1;
                _2746 = frontier_phi_66_pred_2;
                _2744 = frontier_phi_66_pred_3;
                _2742 = frontier_phi_66_pred_4;
                _2740 = frontier_phi_66_pred_5;
                uint _2896 = _2895 + 1u;
                if (_2896 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2889 = _2738;
                    _2890 = _2740;
                    _2891 = _2742;
                    _2892 = _2744;
                    _2893 = _2746;
                    _2894 = _2748;
                    _2895 = _2896;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
        }
        uvec4 _2751 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2752 = _2751.z;
        uint _2754 = (_2752 >> 8u) & 15u;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        if (((4294967295u << _2754) & _2636) == 0u)
        {
            _2857 = _2737;
            _2859 = _2739;
            _2861 = _2741;
            _2863 = _2743;
            _2865 = _2745;
            _2867 = _2747;
        }
        else
        {
            float _2882 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
            float _2883 = _2882 * _2590;
            float _2884 = _2882 * _2591;
            float _2885 = _2882 * _2592;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2754 < ((_2752 >> 12u) & 15u))
            {
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _3017 = _2737;
                float _3018 = _2739;
                float _3019 = _2741;
                float _3020 = _2743;
                float _3021 = _2745;
                float _3022 = _2747;
                uint _3023 = _2754;
                uint _3032;
                bool _3033;
                for (;;)
                {
                    _3032 = texelFetch(g_lightClassification, int((((_2630 << 5u) + (_2616 << 9u)) + (_3023 << 2u)) >> 2u)).x;
                    _3033 = _3032 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3033)
                    {
                        frontier_phi_77_pred = _3022;
                        frontier_phi_77_pred_1 = _3021;
                        frontier_phi_77_pred_2 = _3020;
                        frontier_phi_77_pred_3 = _3019;
                        frontier_phi_77_pred_4 = _3018;
                        frontier_phi_77_pred_5 = _3017;
                    }
                    else
                    {
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3239 = _3017;
                        float _3240 = _3018;
                        float _3241 = _3019;
                        float _3242 = _3020;
                        float _3243 = _3021;
                        float _3244 = _3022;
                        uint _3245 = _3032;
                        uint _3246;
                        vec4 _3271;
                        float _3272;
                        vec4 _3287;
                        vec3 _3299;
                        vec4 _3314;
                        vec4 _3329;
                        float _3375;
                        bool _3376;
                        for (;;)
                        {
                            uint _3256 = ((_3023 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3245));
                            _3246 = (_3245 + 4294967295u) & _3245;
                            uint _3258 = _3256 * 40u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            _3272 = _3271.w;
                            uint _3274 = (_3256 * 40u) + 4u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3289 = (_3256 * 40u) + 8u;
                            _3299 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x));
                            uint _3301 = (_3256 * 40u) + 16u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3316 = (_3256 * 40u) + 20u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3331 = (_3256 * 40u) + 24u;
                            vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3350 = (_3256 * 40u) + 28u;
                            vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            _3375 = fma(_2592, _3363.z, fma(_2591, _3363.y, _3363.x * _2590)) + _3363.w;
                            _3376 = !((fma(_2592, _3344.z, fma(_2591, _3344.y, _3344.x * _2590)) + _3344.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3376)
                            {
                                float _3403 = _3271.x - _2590;
                                float _3404 = _3271.y - _2591;
                                float _3405 = _3271.z - _2592;
                                float _3406 = dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405));
                                float _3409 = inversesqrt(_3406);
                                float _3410 = _3409 * _3403;
                                float _3411 = _3409 * _3404;
                                float _3412 = _3409 * _3405;
                                float _3416 = 1.0 - (_3406 / (_3272 * _3272));
                                float _4565 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3417 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3421 = sqrt(_3406) * _3287.w;
                                float _3423 = 1.39999997615814208984375 / (_3421 + 1.39999997615814208984375);
                                float _3424 = _3423 * _3423;
                                float _3427 = ((1.0 - _3424) * dot(vec3(_3410, _3411, _3412), vec3(_841, _844, _847))) + _3424;
                                float _3430 = _3421 * _3421;
                                float _3434 = (fma(_2592, _3314.z, fma(_2591, _3314.y, _3314.x * _2590)) + _3314.w) / _3375;
                                float _3435 = (fma(_2592, _3329.z, fma(_2591, _3329.y, _3329.x * _2590)) + _3329.w) / _3375;
                                float _3439 = 1.0 - dot(vec2(_3434, _3435), vec2(_3434, _3435));
                                float _4581 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3441 = _3440 * (((isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0))) * _3417) / ((_3430 * 0.699999988079071044921875) + 1.0));
                                float _3453 = exp2(log2(1.0 / ((_3430 * 3.5) + 5.0)) * 0.25);
                                float _3454 = 1.0 - _900;
                                float _3461 = sqrt(1.0 - ((1.0 - (_3454 * _3454)) * (1.0 - (_3453 * _3453))));
                                float _3462 = _3461 * _3461;
                                float _3463 = _3462 * _3462;
                                float _3464 = _3410 - _2883;
                                float _3465 = _3411 - _2884;
                                float _3466 = _3412 - _2885;
                                float _3470 = inversesqrt(dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466)));
                                float _3474 = dot(vec3(_841, _844, _847), vec3((-0.0) - _2883, (-0.0) - _2884, (-0.0) - _2885));
                                float _4592 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3477 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3478 = dot(vec3(_841, _844, _847), vec3(_3470 * _3464, _3470 * _3465, _3470 * _3466));
                                float _4603 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3481 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3485 = ((_3481 * _3481) * (_3463 + (-1.0))) + 1.0;
                                float _3486 = _3423 * _3462;
                                float _3487 = _3486 * _3486;
                                float _3493 = ((1.0 - _3487) * dot(vec3(_841, _844, _847), vec3(_3410, _3411, _3412))) + _3487;
                                float _4614 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3494 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3495 = 1.0 - _3462;
                                float _3505 = (0.5 / (((_3494 * ((_3477 * _3495) + _3462)) + 9.9999999392252902907785028219223e-09) + (((_3494 * _3495) + _3462) * _3477))) * _3494;
                                float _4625 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3515 = (_3440 * _3417) * (((_3463 * 3.1415927410125732421875) * (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) / ((_3485 * _3485) * ((_3430 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3441 * _3287.y;
                                frontier_phi_83_pred_1 = _3441 * _3287.x;
                                frontier_phi_83_pred_2 = _3515 * _3299.z;
                                frontier_phi_83_pred_3 = _3515 * _3299.y;
                                frontier_phi_83_pred_4 = _3515 * _3299.x;
                                frontier_phi_83_pred_5 = _3441 * _3287.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3523 = frontier_phi_83_pred;
                            _3522 = frontier_phi_83_pred_1;
                            _3521 = frontier_phi_83_pred_2;
                            _3520 = frontier_phi_83_pred_3;
                            _3519 = frontier_phi_83_pred_4;
                            _3524 = frontier_phi_83_pred_5;
                            _3229 = _3522 + _3242;
                            _3230 = _3523 + _3243;
                            _3231 = _3524 + _3244;
                            _3226 = _3519 + _3239;
                            _3227 = _3520 + _3240;
                            _3228 = _3521 + _3241;
                            if (_3246 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3246;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3231;
                        frontier_phi_77_pred_1 = _3230;
                        frontier_phi_77_pred_2 = _3229;
                        frontier_phi_77_pred_3 = _3228;
                        frontier_phi_77_pred_4 = _3227;
                        frontier_phi_77_pred_5 = _3226;
                    }
                    _2868 = frontier_phi_77_pred;
                    _2866 = frontier_phi_77_pred_1;
                    _2864 = frontier_phi_77_pred_2;
                    _2862 = frontier_phi_77_pred_3;
                    _2860 = frontier_phi_77_pred_4;
                    _2858 = frontier_phi_77_pred_5;
                    uint _3024 = _3023 + 1u;
                    if (_3024 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3017 = _2858;
                        _3018 = _2860;
                        _3019 = _2862;
                        _3020 = _2864;
                        _3021 = _2866;
                        _3022 = _2868;
                        _3023 = _3024;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2862;
                frontier_phi_58_59_ladder_1 = _2868;
                frontier_phi_58_59_ladder_2 = _2866;
                frontier_phi_58_59_ladder_3 = _2864;
                frontier_phi_58_59_ladder_4 = _2860;
                frontier_phi_58_59_ladder_5 = _2858;
            }
            else
            {
                frontier_phi_58_59_ladder = _2741;
                frontier_phi_58_59_ladder_1 = _2747;
                frontier_phi_58_59_ladder_2 = _2745;
                frontier_phi_58_59_ladder_3 = _2743;
                frontier_phi_58_59_ladder_4 = _2739;
                frontier_phi_58_59_ladder_5 = _2737;
            }
            _2857 = frontier_phi_58_59_ladder_5;
            _2859 = frontier_phi_58_59_ladder_4;
            _2861 = frontier_phi_58_59_ladder;
            _2863 = frontier_phi_58_59_ladder_3;
            _2865 = frontier_phi_58_59_ladder_2;
            _2867 = frontier_phi_58_59_ladder_1;
        }
        float _2872 = isnan(1.0) ? _884 : (isnan(_884) ? 1.0 : min(_884, 1.0));
        _2649 = (_2872 * _2863) + _2101;
        _2651 = (_2872 * _2865) + _2103;
        _2653 = (_2872 * _2867) + _2105;
        _2655 = ((_2857 * 0.039999999105930328369140625) * _2872) + _2434;
        _2657 = ((_2859 * 0.039999999105930328369140625) * _2872) + _2436;
        _2659 = ((_2861 * 0.039999999105930328369140625) * _2872) + _2438;
    }
    else
    {
        _2649 = _2101;
        _2651 = _2103;
        _2653 = _2105;
        _2655 = _2434;
        _2657 = _2436;
        _2659 = _2438;
    }
    float _4641 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4652 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4663 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _2676 = ((isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2649 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _884))) + ((_2655 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    float _2677 = ((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2651 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _884))) + ((_2657 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    float _2678 = ((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2653 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _884))) + ((_2659 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    uint _2679 = _293 + 6u;
    float _2687 = _822 / cbSceneParam._m0[86u].x;
    float _2688 = _823 / cbSceneParam._m0[86u].y;
    vec4 _2702 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2687, _2688, (log2((isnan(cbSceneParam._m0[77u].w) ? _745 : (isnan(_745) ? cbSceneParam._m0[77u].w : min(_745, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2704 = _2702.x;
    float _2705 = _2702.y;
    float _2706 = _2702.z;
    float _2707 = _2702.w;
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    if (_745 > cbSceneParam._m0[78u].w)
    {
        float _2762 = isnan(_745) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _745 : min(cbSceneParam._m0[80u].w, _745));
        float _2763 = _2762 / _745;
        float _2774 = _2763 * _795;
        float _2775 = _796 * _2763;
        float _2776 = (-0.0) - _2775;
        float _2777 = _2763 * _797;
        float _2779 = (cbSceneParam._m0[77u].w * _2776) / _2762;
        float _2780 = _2779 + cbSceneParam._m0[79u].w;
        float _2781 = cbSceneParam._m0[79u].w - _2775;
        float _2787 = sqrt(((_2774 * _2774) + (_2775 * _2775)) + (_2777 * _2777));
        float _2790 = (1.0 - (cbSceneParam._m0[77u].w / _2762)) * _2787;
        float _2795 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2797 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2974;
        if (abs((_2776 - _2779) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2974 = ((((_2780 > 0.0) ? exp2(_2795 * _2780) : (2.0 - exp2(_2797 * _2780))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2790;
        }
        else
        {
            float _2918 = 1.0 / cbSceneParam._m0[80u].x;
            float _2919 = isnan(_2781) ? _2780 : (isnan(_2780) ? _2781 : max(_2780, _2781));
            float _2920 = isnan(_2781) ? _2780 : (isnan(_2780) ? _2781 : min(_2780, _2781));
            float _2929 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : min(_2919, 0.0));
            float _2930 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : min(_2920, 0.0));
            _2974 = ((abs(_2787 / _2776) * cbSceneParam._m0[80u].y) * ((((_2929 - _2930) * 2.0) - ((exp2(_2795 * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0)))) - exp2(_2795 * (isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0))))) * _2918)) - ((exp2(_2797 * _2929) - exp2(_2797 * _2930)) * _2918))) + (_2790 * cbSceneParam._m0[80u].z);
        }
        vec4 _2976 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2687, _2688, 1.0), 0.0);
        float _2985 = exp2((_2974 * (-1.44269502162933349609375)) * (1.0 - _2976.w));
        float _2986 = log2(_2985);
        float _3002 = log2(_2707);
        _2799 = (exp2(_3002 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].x)) * _2976.x) / cbSceneParam._m0[78u].x)) + _2704;
        _2801 = (exp2(_3002 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].y)) * _2976.y) / cbSceneParam._m0[78u].y)) + _2705;
        _2803 = (exp2(_3002 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].z)) * _2976.z) / cbSceneParam._m0[78u].z)) + _2706;
        _2805 = _2985 * _2707;
    }
    else
    {
        _2799 = _2704;
        _2801 = _2705;
        _2803 = _2706;
        _2805 = _2707;
    }
    bool _3012;
    vec4 _2815;
    vec4 _2837;
    float _2839;
    float _2843;
    float _2844;
    float _2845;
    float _2846;
    bool _2856;
    for (;;)
    {
        _2815 = cbMatDynParam._m0[0u];
        float _2817 = roundEven(_2815.y);
        bool _2818 = _2817 == 3.0;
        float _2819 = log2(_2805);
        float _2826 = exp2(_2819 * cbSceneParam._m0[78u].x) * _2676;
        float _2827 = exp2(_2819 * cbSceneParam._m0[78u].y) * _2677;
        float _2828 = exp2(_2819 * cbSceneParam._m0[78u].z) * _2678;
        float _2835 = _811 + (-0.5);
        _2837 = cbMtdParam._m0[1u];
        _2839 = _2837.y * _2835;
        float _2842 = (_2817 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2843 = _2842 * (_2818 ? _2826 : (_2826 + (cbSceneParam._m0[72u].w * _2799)));
        _2844 = _2842 * (_2818 ? _2827 : (_2827 + (cbSceneParam._m0[72u].w * _2801)));
        _2845 = _2842 * (_2818 ? _2828 : (_2828 + (cbSceneParam._m0[72u].w * _2803)));
        _2846 = _2835 * 0.999000012874603271484375;
        _2856 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2856)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _2846) < 0.5)
            {
                _3012 = true;
                break;
            }
        }
        uint _2953 = _860 + uint(_2815.w);
        if ((cbInstanceData._m0[_2953].w < 1.0) && ((cbInstanceData._m0[_2953].w + _2846) < 0.5))
        {
            _3012 = true;
            break;
        }
        if ((_2839 + 1.0) < _2837.x)
        {
            _3012 = true;
            break;
        }
        _3012 = false;
        break;
    }
    float _3217;
    if (_3012)
    {
        discard_state = true;
        _3217 = 0.0;
    }
    else
    {
        _3217 = cbInstanceData._m0[_2679].w;
    }
    SV_Target.x = _2843;
    SV_Target.y = _2844;
    SV_Target.z = _2845;
    SV_Target.w = _3217;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2679].w;
    discard_exit();
}


