#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_22;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_26;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 7, component = 3) in float TEXCOORD_11;
layout(location = 8) in float TEXCOORD_12;
layout(location = 8, component = 1) in float TEXCOORD_13;
layout(location = 8, component = 2) in float TEXCOORD_14;
layout(location = 8, component = 3) in float TEXCOORD_15;
layout(location = 9) in float TEXCOORD_16;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1240;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = 1.0 - (cbMtdParam._m0[17u].w * TEXCOORD_14);
    float _252 = 1.0 - (cbMtdParam._m0[17u].w * TEXCOORD_15);
    float _253 = 1.0 - (cbMtdParam._m0[17u].w * TEXCOORD_16);
    float _3828 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3839 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3850 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    vec4 _276 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _282 = _276.x * cbMtdParam._m0[11u].x;
    float _283 = _276.y * cbMtdParam._m0[11u].y;
    float _284 = _276.z * cbMtdParam._m0[11u].z;
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _323 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _356 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].x * TEXCOORD.z) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((cbMtdParam._m0[20u].y * TEXCOORD.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[22u].zw, cbMtdParam._m0[23u].x, 0.0));
    float _387 = ((cbMtdParam._m0[14u].z * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[18u].y) + _370) * cbMtdParam._m0[18u].x))) + 1.0;
    float _3861 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _395 = (_388 * ((_323.x * cbMtdParam._m0[12u].x) - _282)) + _282;
    float _396 = (_388 * ((_323.y * cbMtdParam._m0[12u].y) - _283)) + _283;
    float _397 = (_388 * ((_323.z * cbMtdParam._m0[12u].z) - _284)) + _284;
    vec4 _415 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _310) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _311) + cbTextureTilingScale._m0[7u].w));
    float _423 = ((_395 * 4.55000019073486328125) * cbMtdParam._m0[13u].x) * _415.x;
    float _426 = ((_396 * 4.55000019073486328125) * cbMtdParam._m0[13u].y) * _415.y;
    float _429 = ((_397 * 4.55000019073486328125) * cbMtdParam._m0[13u].z) * _415.z;
    float _450 = ((cbMtdParam._m0[14u].w * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_8) * 2.0) - texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w)).x)) + 1.0;
    float _3872 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _453 = cbMtdParam._m0[17u].z * _451;
    float _470 = sin(cbMtdParam._m0[19u].x);
    float _471 = cos(cbMtdParam._m0[19u].x);
    float _472 = TEXCOORD.x + (-0.5);
    float _474 = _472 + cbMtdParam._m0[19u].z;
    float _475 = TEXCOORD.y + (-0.5);
    float _476 = _475 + cbMtdParam._m0[19u].w;
    vec4 _498 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * (fma(_476, (-0.0) - _470, _474 * _471) + 0.5)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (fma(_476, _471, _474 * _470) + 0.5)) + cbTextureTilingScale._m0[6u].w));
    float _509 = exp2(log2((1.0 - _498.w) * cbMtdParam._m0[18u].z) * cbMtdParam._m0[18u].w);
    float _3883 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _514 = _510 * ((cbMtdParam._m0[9u].x * _395) - _395);
    float _515 = _510 * ((cbMtdParam._m0[9u].y * _396) - _396);
    float _516 = _510 * ((cbMtdParam._m0[9u].z * _397) - _397);
    float _523 = (_514 + _395) - (_453 * _514);
    float _524 = (_515 + _396) - (_453 * _515);
    float _525 = (_516 + _397) - (_453 * _516);
    float _542 = sin(cbMtdParam._m0[16u].x);
    float _543 = cos(cbMtdParam._m0[16u].x);
    float _544 = _472 + cbMtdParam._m0[20u].z;
    float _545 = _475 + cbMtdParam._m0[20u].w;
    vec4 _564 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * (fma(_545, (-0.0) - _542, _544 * _543) + 0.5)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_545, _543, _544 * _542) + 0.5)) + cbTextureTilingScale._m0[1u].w));
    float _574 = exp2(log2((1.0 - _564.w) * cbMtdParam._m0[17u].y) * cbMtdParam._m0[16u].w);
    float _3894 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _594 = (((_523 - _423) + ((((cbMtdParam._m0[10u].x * _395) - _523) * _451) * _575)) * (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) + _423;
    float _595 = (((_524 - _426) + ((((cbMtdParam._m0[10u].y * _396) - _524) * _451) * _575)) * (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) + _426;
    float _596 = (((_525 - _429) + ((((cbMtdParam._m0[10u].z * _397) - _525) * _451) * _575)) * (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) + _429;
    vec4 _608 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    vec4 _625 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _627 = _625.x;
    float _628 = _625.y;
    float _629 = _625.z;
    float _638 = ((_608.z - _629) * _388) + _629;
    float _641 = ((((_608.x - _627) * _388) + _627) * 2.0) + (-1.0);
    float _643 = ((((_608.y - _628) * _388) + _628) * 2.0) + (-1.0);
    float _644 = dot(vec2(_641, _643), vec2(_641, _643));
    float _3905 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _649 = sqrt(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))));
    vec4 _661 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w));
    float _677 = (((_661.z - _638) * TEXCOORD_11) * cbMtdParam._m0[15u].z) + _638;
    float _685 = ((_498.z - _677) * cbMtdParam._m0[15u].x) + _677;
    float _695 = cbMtdParam._m0[19u].y - (cbMtdParam._m0[19u].y * _451);
    float _701 = cbMtdParam._m0[17u].x * _451;
    float _708 = ((((((_661.x * 2.0) + (-1.0)) * TEXCOORD_11) * cbMtdParam._m0[15u].y) + _641) + (_695 * ((_498.x * 2.0) + (-1.0)))) + (_701 * ((_564.x * 2.0) + (-1.0)));
    float _709 = ((((((_661.y * 2.0) + (-1.0)) * TEXCOORD_12) * cbMtdParam._m0[15u].y) + _643) + (_695 * ((_498.y * 2.0) + (-1.0)))) + (_701 * ((_564.y * 2.0) + (-1.0)));
    float _712 = fma(_649, _230 * NORMAL.x, fma(_709, _237 * TANGENT.x, (_223 * _215) * _708));
    float _715 = fma(_649, _230 * NORMAL.y, fma(_709, _237 * TANGENT.y, (_223 * _216) * _708));
    float _718 = fma(_649, _230 * NORMAL.z, fma(_709, _237 * TANGENT.z, (_223 * _217) * _708));
    float _722 = inversesqrt(dot(vec3(_712, _715, _718), vec3(_712, _715, _718)));
    float _723 = _722 * _712;
    float _724 = _722 * _715;
    float _725 = _722 * _718;
    float _3916 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _726 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3938 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3949 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _743 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _793 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _783);
    float _794 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _783);
    float _795 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _783);
    float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
    float _800 = _793 * _799;
    float _801 = _794 * _799;
    float _802 = _795 * _799;
    float _808 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _809 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _827 = fma(_725, cbSceneParam._m0[5u].z, fma(_724, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _723));
    float _830 = fma(_725, cbSceneParam._m0[6u].z, fma(_724, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _723));
    float _833 = fma(_725, cbSceneParam._m0[7u].z, fma(_724, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _723));
    uint _847 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _853 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * cbInstanceData._m0[_847].x;
    float _854 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * cbInstanceData._m0[_847].y;
    float _855 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * cbInstanceData._m0[_847].z;
    float _3960 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    vec4 _867 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _808, cbSceneParam._m0[86u].y * _809));
    float _870 = _867.x * TEXCOORD_5.w;
    float _871 = dot(vec3(_723, _724, _725), vec3(_800, _801, _802));
    float _874 = _871 * 2.0;
    float _878 = (_874 * _723) - _800;
    float _879 = (_874 * _724) - _801;
    float _880 = (_874 * _725) - _802;
    float _884 = abs(dot(vec3(_800, _801, _802), vec3(_723, _724, _725)));
    float _3993 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _886 = sqrt(_726);
    float _899 = exp2((_886 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_886 * 3.0));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1239;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _966 = fma(_939, cbModelParam._m0[26u].z, fma(_935, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931));
        float _970 = fma(_939, cbModelParam._m0[27u].z, fma(_935, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931));
        float _974 = fma(_939, cbModelParam._m0[28u].z, fma(_935, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931));
        float _997 = _931 + _723;
        float _998 = _935 + _724;
        float _999 = _939 + _725;
        float _1009 = fma(_999, cbModelParam._m0[26u].z, fma(_998, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997)) - _966;
        float _1010 = fma(_999, cbModelParam._m0[27u].z, fma(_998, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997)) - _970;
        float _1011 = fma(_999, cbModelParam._m0[28u].z, fma(_998, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997)) - _974;
        float _1015 = inversesqrt(dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011)));
        float _1028 = ((_1015 * _1009) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_966 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1015 * _1010) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_970 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1015 * _1011) / cbModelParam._m0[34u].z) + ((((((_974 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        float _1067 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1033.x + (-0.5));
        float _1069 = _1067 * (_1033.y + (-0.5));
        float _1070 = _1067 * (_1033.z + (-0.5));
        float _1077 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1040.x + (-0.5));
        float _1079 = _1077 * (_1040.y + (-0.5));
        float _1080 = _1077 * (_1040.z + (-0.5));
        float _1087 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1047.x + (-0.5));
        float _1089 = _1087 * (_1047.y + (-0.5));
        float _1090 = _1087 * (_1047.z + (-0.5));
        float _1097 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1054.x + (-0.5));
        float _1099 = _1097 * (_1054.y + (-0.5));
        float _1100 = _1097 * (_1054.z + (-0.5));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = _1068 * 0.5;
        float _1105 = _1078 * 0.5;
        float _1106 = _1088 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1121 = (dot(vec3(_723, _724, _725), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1131 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _4041 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1133 + 1.0))) + _1138) * _1101;
        float _1148 = _1069 * 0.5;
        float _1149 = _1079 * 0.5;
        float _1150 = _1089 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_723, _724, _725), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4074 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1175 + 1.0))) + _1180) * _1102;
        float _1190 = _1070 * 0.5;
        float _1191 = _1080 * 0.5;
        float _1192 = _1090 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_723, _724, _725), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _4107 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1217 + 1.0))) + _1222) * _1103;
        _1239 = _1070;
        _1241 = _1069;
        _1242 = _1068;
        _1243 = _1080;
        _1244 = _1079;
        _1245 = _1078;
        _1246 = _1090;
        _1247 = _1089;
        _1248 = _1088;
        _1249 = _1103;
        _1250 = _1102;
        _1251 = _1101;
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
    }
    else
    {
        _1239 = _1240;
        _1241 = _1240;
        _1242 = _1240;
        _1243 = _1240;
        _1244 = _1240;
        _1245 = _1240;
        _1246 = _1240;
        _1247 = _1240;
        _1248 = _1240;
        _1249 = _1240;
        _1250 = _1240;
        _1251 = _1240;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1280 = fma(_939, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931));
        float _1284 = fma(_939, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931));
        float _1288 = fma(_939, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931));
        float _1311 = _931 + _723;
        float _1312 = _935 + _724;
        float _1313 = _939 + _725;
        float _1323 = fma(_1313, cbModelParam._m0[30u].z, fma(_1312, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1311)) - _1280;
        float _1324 = fma(_1313, cbModelParam._m0[31u].z, fma(_1312, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1311)) - _1284;
        float _1325 = fma(_1313, cbModelParam._m0[32u].z, fma(_1312, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1311)) - _1288;
        float _1329 = inversesqrt(dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325)));
        float _1342 = ((_1329 * _1323) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1280 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1329 * _1324) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1284 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1329 * _1325) / cbModelParam._m0[35u].z) + ((((((_1288 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        float _1379 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1346.x + (-0.5));
        float _1381 = _1379 * (_1346.y + (-0.5));
        float _1382 = _1379 * (_1346.z + (-0.5));
        float _1389 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1353.x + (-0.5));
        float _1391 = _1389 * (_1353.y + (-0.5));
        float _1392 = _1389 * (_1353.z + (-0.5));
        float _1399 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1360.x + (-0.5));
        float _1401 = _1399 * (_1360.y + (-0.5));
        float _1402 = _1399 * (_1360.z + (-0.5));
        float _1409 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1367.x + (-0.5));
        float _1411 = _1409 * (_1367.y + (-0.5));
        float _1412 = _1409 * (_1367.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_723, _724, _725), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4170 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1443 + 1.0))) + _1448) * _1413;
        float _1458 = _1381 * 0.5;
        float _1459 = _1391 * 0.5;
        float _1460 = _1401 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_723, _724, _725), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4203 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1485 + 1.0))) + _1490) * _1414;
        float _1500 = _1382 * 0.5;
        float _1501 = _1392 * 0.5;
        float _1502 = _1402 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_723, _724, _725), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4236 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1527 + 1.0))) + _1532) * _1415;
        _1549 = _1382;
        _1550 = _1381;
        _1551 = _1380;
        _1552 = _1392;
        _1553 = _1391;
        _1554 = _1390;
        _1555 = _1402;
        _1556 = _1401;
        _1557 = _1400;
        _1558 = _1415;
        _1559 = _1414;
        _1560 = _1413;
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
    }
    else
    {
        _1549 = _1240;
        _1550 = _1240;
        _1551 = _1240;
        _1552 = _1240;
        _1553 = _1240;
        _1554 = _1240;
        _1555 = _1240;
        _1556 = _1240;
        _1557 = _1240;
        _1558 = _1240;
        _1559 = _1240;
        _1560 = _1240;
        _1561 = 0.0;
        _1562 = 0.0;
        _1563 = 0.0;
    }
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1252)) + _1252;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1253)) + _1253;
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1254)) + _1254;
    float _1596 = fma(_1575, cbSceneParam._m0[89u].z, fma(_1574, cbSceneParam._m0[89u].y, _1573 * cbSceneParam._m0[89u].x));
    float _1599 = fma(_1575, cbSceneParam._m0[90u].z, fma(_1574, cbSceneParam._m0[90u].y, _1573 * cbSceneParam._m0[90u].x));
    float _1602 = fma(_1575, cbSceneParam._m0[91u].z, fma(_1574, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1573));
    float _1617 = _878 * 0.5;
    float _1618 = _879 * 0.5;
    float _1619 = _880 * 0.5;
    float _1620 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1623 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1626 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1660;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1633 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1239, _1243, _1246, _1249));
        float _1637 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1641 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1648 = dot(vec4(cbModelParam._m0[39u]), vec4(_1617, _1618, _1619, 1.0));
        _1660 = dot(vec3(isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1648) ? 0.0 : (isnan(0.0) ? _1648 : max(0.0, _1648))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1660 = 1.0;
    }
    float _1671;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1662 = dot(vec4(cbModelParam._m0[40u]), vec4(_1617, _1618, _1619, 1.0));
        _1671 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1662) ? 0.0 : (isnan(0.0) ? _1662 : max(0.0, _1662))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1671 = 1.0;
    }
    float _1675 = (_1671 * cbModelParam._m0[1u].x) + (_1660 * (1.0 - cbModelParam._m0[1u].x));
    float _1685 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _726);
    float _1686 = isnan(_1685) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1685 : min(cbModelParam._m0[25u].z, _1685));
    float _1766;
    float _1768;
    float _1770;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1733 = fma(_939, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931)) + cbModelParam._m0[13u].w;
        float _1737 = fma(_939, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931)) + cbModelParam._m0[14u].w;
        float _1741 = fma(_939, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931)) + cbModelParam._m0[15u].w;
        float _1744 = fma(_880, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878));
        float _1747 = fma(_880, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878));
        float _1750 = fma(_880, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878));
        float _1778;
        if (_1744 > 0.0)
        {
            _1778 = abs((1.0 - _1733) / _1744);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1733 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1778 = frontier_phi_14_12_ladder;
        }
        float _1948;
        if (_1747 > 0.0)
        {
            _1948 = abs((1.0 - _1737) / _1747);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1737 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1948 = frontier_phi_23_19_ladder;
        }
        float _2243;
        if (_1750 > 0.0)
        {
            _2243 = abs((1.0 - _1741) / _1750);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1741 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2243 = frontier_phi_35_30_ladder;
        }
        float _2245 = isnan(_1948) ? _1778 : (isnan(_1778) ? _1948 : min(_1778, _1948));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1744) + _1733;
        float _2251 = (_2246 * _1747) + _1737;
        float _2252 = (_2246 * _1750) + _1741;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2253;
        float _2257 = _2253 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 > _2257) || ((_2251 < _2255) || ((_2250 < _2255) || (_2250 > _2257))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2252, cbModelParam._m0[9u].z, fma(_2251, cbModelParam._m0[9u].y, _2250 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2252, cbModelParam._m0[10u].z, fma(_2251, cbModelParam._m0[10u].y, _2250 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2252, cbModelParam._m0[11u].z, fma(_2251, cbModelParam._m0[11u].y, _2250 * cbModelParam._m0[11u].x))), _1686);
            frontier_phi_13_35_ladder = _2397.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2397.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2397.x * cbModelParam._m0[1u].y;
        }
        _1766 = frontier_phi_13_35_ladder_2;
        _1768 = frontier_phi_13_35_ladder_1;
        _1770 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1754 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_878, _879, _880), _1686);
        _1766 = _1754.x * cbModelParam._m0[1u].y;
        _1768 = _1754.y * cbModelParam._m0[1u].y;
        _1770 = _1754.z * cbModelParam._m0[1u].y;
    }
    float _1774 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _726);
    float _1775 = isnan(_1774) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1774 : min(cbModelParam._m0[25u].w, _1774));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1829 = fma(_939, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931)) + cbModelParam._m0[21u].w;
        float _1833 = fma(_939, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931)) + cbModelParam._m0[22u].w;
        float _1837 = fma(_939, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931)) + cbModelParam._m0[23u].w;
        float _1840 = fma(_880, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878));
        float _1843 = fma(_880, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878));
        float _1846 = fma(_880, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878));
        float _1953;
        if (_1840 > 0.0)
        {
            _1953 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1953 = frontier_phi_25_21_ladder;
        }
        float _2270;
        if (_1843 > 0.0)
        {
            _2270 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2270 = frontier_phi_37_32_ladder;
        }
        float _2597;
        if (_1846 > 0.0)
        {
            _2597 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2597 = frontier_phi_47_44_ladder;
        }
        float _2599 = isnan(_2270) ? _1953 : (isnan(_1953) ? _2270 : min(_1953, _2270));
        float _2600 = isnan(_2597) ? _2599 : (isnan(_2599) ? _2597 : min(_2599, _2597));
        float _2604 = (_2600 * _1840) + _1829;
        float _2605 = (_2600 * _1843) + _1833;
        float _2606 = (_2600 * _1846) + _1837;
        float _2607 = _2600 * 9.9999997473787516355514526367188e-05;
        float _2608 = (-1.0) - _2607;
        float _2610 = _2607 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2606 > _2610) || ((_2606 < _2608) || ((_2605 > _2610) || ((_2605 < _2608) || ((_2604 < _2608) || (_2604 > _2610))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2606, cbModelParam._m0[17u].z, fma(_2605, cbModelParam._m0[17u].y, _2604 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2606, cbModelParam._m0[18u].z, fma(_2605, cbModelParam._m0[18u].y, _2604 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2606, cbModelParam._m0[19u].z, fma(_2605, cbModelParam._m0[19u].y, _2604 * cbModelParam._m0[19u].x))), _1775);
            frontier_phi_22_47_ladder = _2724.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2724.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2724.x * cbModelParam._m0[1u].z;
        }
        _1865 = frontier_phi_22_47_ladder_2;
        _1867 = frontier_phi_22_47_ladder_1;
        _1869 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_878, _879, _880), _1775);
        _1865 = _1849.x * cbModelParam._m0[1u].z;
        _1867 = _1849.y * cbModelParam._m0[1u].z;
        _1869 = _1849.z * cbModelParam._m0[1u].z;
    }
    float _1881 = ((((1.0 - _899) * ((_886 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_899 * _886)) * _870;
    float _1882 = _1881 * ((cbModelParam._m0[1u].w * (_1865 - _1766)) + _1766);
    float _1883 = _1881 * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1884 = _1881 * ((cbModelParam._m0[1u].w * (_1869 - _1770)) + _1770);
    float _1887 = fma(_1884, cbSceneParam._m0[89u].z, fma(_1883, cbSceneParam._m0[89u].y, _1882 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1884, cbSceneParam._m0[90u].z, fma(_1883, cbSceneParam._m0[90u].y, _1882 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1884, cbSceneParam._m0[91u].z, fma(_1883, cbSceneParam._m0[91u].y, _1882 * cbSceneParam._m0[91u].x));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1940 = _1927 / _1939;
    float _1941 = _1931 / _1939;
    float _1942 = _1935 / _1939;
    float _2089;
    float _2090;
    float _2091;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1969 = ((uint(_1942 > cbSceneParam._m0[59u].y) + uint(_1942 > cbSceneParam._m0[59u].x)) + uint(_1942 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1970 = _1969 + 43u;
        uint _1978 = _1969 + 44u;
        uint _1986 = _1969 + 45u;
        uint _1994 = _1969 + 46u;
        float _2005 = fma(_1939, cbSceneParam._m0[_1970].w, fma(_1935, cbSceneParam._m0[_1970].z, fma(_1931, cbSceneParam._m0[_1970].y, _1927 * cbSceneParam._m0[_1970].x)));
        float _2009 = fma(_1939, cbSceneParam._m0[_1978].w, fma(_1935, cbSceneParam._m0[_1978].z, fma(_1931, cbSceneParam._m0[_1978].y, _1927 * cbSceneParam._m0[_1978].x)));
        float _2017 = fma(_1939, cbSceneParam._m0[_1994].w, fma(_1935, cbSceneParam._m0[_1994].z, fma(_1931, cbSceneParam._m0[_1994].y, _1927 * cbSceneParam._m0[_1994].x)));
        float _2022 = cbSceneParam._m0[33u].z * _2017;
        float _2024 = cbSceneParam._m0[33u].w * _2017;
        float _2027 = fma(_1939, cbSceneParam._m0[_1986].w, fma(_1935, cbSceneParam._m0[_1986].z, fma(_1931, cbSceneParam._m0[_1986].y, _1927 * cbSceneParam._m0[_1986].x))) / _2017;
        float _2075 = (cbSceneParam._m0[33u].x - sqrt(((_1941 * _1941) + (_1940 * _1940)) + (_1942 * _1942))) * cbSceneParam._m0[33u].y;
        float _4362 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2082 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2022 + _2005) / _2017, (_2024 + _2009) / _2017), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2024 + _2005) / _2017, (_2009 - _2022) / _2017), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 - _2022) / _2017, (_2009 - _2024) / _2017), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 - _2024) / _2017, (_2022 + _2009) / _2017), _2027), 0.0)).x), vec4(0.25)));
        _2089 = 1.0 - (_2082 * cbSceneParam._m0[34u].x);
        _2090 = 1.0 - (_2082 * cbSceneParam._m0[34u].y);
        _2091 = 1.0 - (_2082 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2089 = 1.0;
        _2090 = 1.0;
        _2091 = 1.0;
    }
    float _2155;
    float _2157;
    float _2159;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2143 = fma(_1939, cbSceneParam._m0[63u].w, fma(_1935, cbSceneParam._m0[63u].z, fma(_1931, cbSceneParam._m0[63u].y, _1927 * cbSceneParam._m0[63u].x)));
        float _2144 = fma(_1939, cbSceneParam._m0[60u].w, fma(_1935, cbSceneParam._m0[60u].z, fma(_1931, cbSceneParam._m0[60u].y, _1927 * cbSceneParam._m0[60u].x))) / _2143;
        float _2145 = fma(_1939, cbSceneParam._m0[61u].w, fma(_1935, cbSceneParam._m0[61u].z, fma(_1931, cbSceneParam._m0[61u].y, _1927 * cbSceneParam._m0[61u].x))) / _2143;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2144 >= cbSceneParam._m0[64u].x) && (_2145 >= cbSceneParam._m0[64u].y)) && (_2144 <= cbSceneParam._m0[64u].z)) && (_2145 <= cbSceneParam._m0[64u].w))
        {
            float _2283 = fma(_1939, cbSceneParam._m0[62u].w, fma(_1935, cbSceneParam._m0[62u].z, fma(_1931, cbSceneParam._m0[62u].y, _1927 * cbSceneParam._m0[62u].x))) / _2143;
            float _2287 = isnan(cbSceneParam._m0[41u].w) ? _2283 : (isnan(_2283) ? cbSceneParam._m0[41u].w : max(_2283, cbSceneParam._m0[41u].w));
            float _2330 = (cbSceneParam._m0[33u].x - sqrt(((_1941 * _1941) + (_1940 * _1940)) + (_1942 * _1942))) * cbSceneParam._m0[33u].y;
            float _4378 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
            float _2337 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2144, cbSceneParam._m0[33u].w + _2145), _2287), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2144, _2145 - cbSceneParam._m0[33u].z), _2287), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2144 - cbSceneParam._m0[33u].z, _2145 - cbSceneParam._m0[33u].w), _2287), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2144 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2145), _2287), 0.0)).x), vec4(0.25)));
            float _2341 = 1.0 - (_2337 * cbSceneParam._m0[34u].x);
            float _2342 = 1.0 - (_2337 * cbSceneParam._m0[34u].y);
            float _2343 = 1.0 - (_2337 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2343) ? _2091 : (isnan(_2091) ? _2343 : min(_2091, _2343));
            frontier_phi_34_33_ladder_1 = isnan(_2342) ? _2090 : (isnan(_2090) ? _2342 : min(_2090, _2342));
            frontier_phi_34_33_ladder_2 = isnan(_2341) ? _2089 : (isnan(_2089) ? _2341 : min(_2089, _2341));
        }
        else
        {
            frontier_phi_34_33_ladder = _2091;
            frontier_phi_34_33_ladder_1 = _2090;
            frontier_phi_34_33_ladder_2 = _2089;
        }
        _2155 = frontier_phi_34_33_ladder_2;
        _2157 = frontier_phi_34_33_ladder_1;
        _2159 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2155 = _2089;
        _2157 = _2090;
        _2159 = _2091;
    }
    uvec4 _2164 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2166 = _2164.x * 14u;
    uint _2167 = _2166 + 13u;
    float _2174 = _870 + (-1.0);
    float _2179 = (cbLight._m0[_2167].x * _2174) + 1.0;
    float _2180 = (cbLight._m0[_2167].y * _2174) + 1.0;
    float _2181 = (cbLight._m0[_2167].z * _2174) + 1.0;
    float _2182 = (cbLight._m0[_2167].w * _2174) + 1.0;
    uint _2183 = _2166 + 5u;
    float _2189 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
    uint _2193 = _2166 + 4u;
    float _2202 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2206 = _2166 | 1u;
    float _2217 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_723, _724, _725));
    float _2220 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_723, _724, _725));
    float _4414 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _4425 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2225 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * 0.3183098733425140380859375;
    float _2227 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * 0.3183098733425140380859375;
    float _2234 = ((cbLight._m0[_2183].x * _2189) * _2227) + (((cbLight._m0[_2193].x * _2155) * _2202) * _2225);
    float _2235 = ((_2189 * cbLight._m0[_2183].y) * _2227) + (((cbLight._m0[_2193].y * _2157) * _2202) * _2225);
    float _2236 = ((_2189 * cbLight._m0[_2183].z) * _2227) + (((cbLight._m0[_2193].z * _2159) * _2202) * _2225);
    uvec4 _2240 = floatBitsToUint(cbLight._m0[_2166 + 12u]);
    bool _2242 = _2240.x == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2242)
    {
        _2344 = _2234;
        _2346 = _2235;
        _2348 = _2236;
    }
    else
    {
        uint _2352 = _2166 + 6u;
        float _2368 = (dot(vec3(cbLight._m0[_2166 + 2u].xyz), vec3(_723, _724, _725)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4436 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2371 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2344 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2234;
        _2346 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2235;
        _2348 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2236;
    }
    bool _2351 = _2240.y == 0u;
    float _2406;
    float _2408;
    float _2410;
    if (_2351)
    {
        _2406 = _2344;
        _2408 = _2346;
        _2410 = _2348;
    }
    else
    {
        uint _2568 = _2166 + 7u;
        float _2584 = (dot(vec3(cbLight._m0[_2166 + 3u].xyz), vec3(_723, _724, _725)) * 0.5) + 0.5;
        float _2585 = _2584 * _2584;
        float _4452 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2586 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2587 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2406 = (((cbLight._m0[_2568].x * 0.3183098733425140380859375) * _2586) * _2587) + _2344;
        _2408 = (((cbLight._m0[_2568].y * 0.3183098733425140380859375) * _2586) * _2587) + _2346;
        _2410 = (((cbLight._m0[_2568].z * 0.3183098733425140380859375) * _2586) * _2587) + _2348;
    }
    uint _2413 = _2166 + 8u;
    float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _726) * 0.949999988079071044921875);
    float _2427 = _2426 * _2426;
    float _2428 = cbLight._m0[_2166].x + _800;
    float _2429 = cbLight._m0[_2166].y + _801;
    float _2430 = cbLight._m0[_2166].z + _802;
    float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
    float _2435 = _2434 * _2428;
    float _2436 = _2434 * _2429;
    float _2437 = _2434 * _2430;
    float _2438 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2166].xyz));
    float _4468 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _4479 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2442 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2443 = dot(vec3(_723, _724, _725), vec3(_2435, _2436, _2437));
    float _4490 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2447 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2435, _2436, _2437));
    float _4501 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2451 = _2427 * _2427;
    float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
    float _2466 = (exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2467 = 1.0 - _2427;
    float _2478 = (0.5 / (((_2442 * ((_2441 * _2467) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2467) + _2427) * _2441))) * _2441;
    float _4512 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2480 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
    uint _2494 = _2166 + 9u;
    float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _726) * 0.949999988079071044921875);
    float _2506 = _2505 * _2505;
    float _2507 = cbLight._m0[_2206].x + _800;
    float _2508 = cbLight._m0[_2206].y + _801;
    float _2509 = cbLight._m0[_2206].z + _802;
    float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
    float _2514 = _2513 * _2507;
    float _2515 = _2513 * _2508;
    float _2516 = _2513 * _2509;
    float _2517 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2206].xyz));
    float _4523 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2520 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2521 = dot(vec3(_723, _724, _725), vec3(_2514, _2515, _2516));
    float _4534 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2524 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2525 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2514, _2515, _2516));
    float _4545 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2529 = _2506 * _2506;
    float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
    float _2542 = (exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2543 = 1.0 - _2506;
    float _2553 = (0.5 / (((_2442 * ((_2520 * _2543) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2543) + _2506) * _2520))) * _2520;
    float _4556 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2555 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
    float _2565 = (((_2542 * cbLight._m0[_2494].x) * _2555) * _2189) + ((((cbLight._m0[_2413].x * _2155) * _2466) * _2480) * _2202);
    float _2566 = (((_2542 * cbLight._m0[_2494].y) * _2555) * _2189) + ((((cbLight._m0[_2413].y * _2157) * _2466) * _2480) * _2202);
    float _2567 = (((_2542 * cbLight._m0[_2494].z) * _2555) * _2189) + ((((cbLight._m0[_2413].z * _2159) * _2466) * _2480) * _2202);
    float _2623;
    float _2625;
    float _2627;
    if (_2242)
    {
        _2623 = _2565;
        _2625 = _2566;
        _2627 = _2567;
    }
    else
    {
        uint _2629 = _2166 + 2u;
        uint _2633 = _2166 + 10u;
        float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2629].w)) * _726) * 0.949999988079071044921875);
        float _2648 = _2647 * _2647;
        float _2649 = cbLight._m0[_2629].x + _800;
        float _2650 = cbLight._m0[_2629].y + _801;
        float _2651 = cbLight._m0[_2629].z + _802;
        float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
        float _2656 = _2655 * _2649;
        float _2657 = _2655 * _2650;
        float _2658 = _2655 * _2651;
        float _2659 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2629].xyz));
        float _4567 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2663 = dot(vec3(_723, _724, _725), vec3(_2656, _2657, _2658));
        float _4578 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2667 = dot(vec3(cbLight._m0[_2629].xyz), vec3(_2656, _2657, _2658));
        float _4589 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2671 = _2648 * _2648;
        float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
        float _2684 = (exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2685 = 1.0 - _2648;
        float _2695 = (0.5 / (((_2442 * ((_2662 * _2685) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2685) + _2648) * _2662))) * _2662;
        float _4600 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2697 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
        float _2698 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2623 = (((_2684 * cbLight._m0[_2633].x) * _2697) * _2698) + _2565;
        _2625 = (((_2684 * cbLight._m0[_2633].y) * _2697) * _2698) + _2566;
        _2627 = (((_2684 * cbLight._m0[_2633].z) * _2697) * _2698) + _2567;
    }
    float _2729;
    float _2731;
    float _2733;
    if (_2351)
    {
        _2729 = _2623;
        _2731 = _2625;
        _2733 = _2627;
    }
    else
    {
        uint _2740 = _2166 + 3u;
        uint _2744 = _2166 + 11u;
        float _2758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2740].w)) * _726) * 0.949999988079071044921875);
        float _2759 = _2758 * _2758;
        float _2760 = cbLight._m0[_2740].x + _800;
        float _2761 = cbLight._m0[_2740].y + _801;
        float _2762 = cbLight._m0[_2740].z + _802;
        float _2766 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
        float _2767 = _2766 * _2760;
        float _2768 = _2766 * _2761;
        float _2769 = _2766 * _2762;
        float _2770 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2740].xyz));
        float _4616 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2773 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2774 = dot(vec3(_723, _724, _725), vec3(_2767, _2768, _2769));
        float _4627 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2777 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2778 = dot(vec3(cbLight._m0[_2740].xyz), vec3(_2767, _2768, _2769));
        float _4638 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2782 = _2759 * _2759;
        float _2786 = ((_2777 * _2777) * (_2782 + (-1.0))) + 1.0;
        float _2795 = (exp2(log2(1.0 - (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2796 = 1.0 - _2759;
        float _2806 = (0.5 / (((_2442 * ((_2773 * _2796) + _2759)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2796) + _2759) * _2773))) * _2773;
        float _4649 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2808 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2782 / ((_2786 * _2786) * 3.141590118408203125));
        float _2809 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2729 = (((_2795 * cbLight._m0[_2744].x) * _2808) * _2809) + _2623;
        _2731 = (((_2795 * cbLight._m0[_2744].y) * _2808) * _2809) + _2625;
        _2733 = (((_2795 * cbLight._m0[_2744].z) * _2808) * _2809) + _2627;
    }
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_2164.y == 0u)
    {
        uvec4 _2830 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2831 = _2830.x;
        uint _2842 = uint((float(_2830.y) * floor(float(uint(cbSceneParam._m0[85u].y * _809) / _2831))) + floor(float(uint(cbSceneParam._m0[85u].x * _808) / _2831)));
        float _2852 = (log2(_1942 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2853 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        uint _2856 = uint(isnan(14.0) ? _2853 : (isnan(_2853) ? 14.0 : min(_2853, 14.0)));
        uvec4 _2861 = texelFetch(g_lightClusterGridBuffer, int(((_2856 << 2u) + (_2842 << 6u)) >> 2u));
        uint _2862 = _2861.x;
        uint _2863 = _2830.z;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        if (((((1u << ((_2863 >> 4u) & 15u)) + 4294967295u) & _2862) == 0u) || ((_2863 & 240u) == 0u))
        {
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
        }
        else
        {
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            uint _3092 = 0u;
            uint _3101;
            bool _3102;
            for (;;)
            {
                _3101 = texelFetch(g_lightClassification, int((((_2856 << 5u) + (_2842 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                _3102 = _3101 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3102)
                {
                    frontier_phi_66_pred = _3091;
                    frontier_phi_66_pred_1 = _3090;
                    frontier_phi_66_pred_2 = _3089;
                    frontier_phi_66_pred_3 = _3088;
                    frontier_phi_66_pred_4 = _3087;
                    frontier_phi_66_pred_5 = _3086;
                }
                else
                {
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    uint _3216;
                    _3210 = _3086;
                    _3211 = _3087;
                    _3212 = _3088;
                    _3213 = _3089;
                    _3214 = _3090;
                    _3215 = _3091;
                    _3216 = _3101;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    for (;;)
                    {
                        uint _3220 = uint(findLSB(_3216)) + (_3092 << 5u);
                        uint _3217 = (_3216 + 4294967295u) & _3216;
                        uint _3222 = _3220 * 48u;
                        vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3222)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 3u)).x));
                        uint _3242 = (_3220 * 48u) + 4u;
                        vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3242)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 3u)).x));
                        uint _3261 = (_3220 * 48u) + 8u;
                        vec3 _3272 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x));
                        float _3276 = _3236.x - _1940;
                        float _3277 = _3236.y - _1941;
                        float _3278 = _3236.z - _1942;
                        float _3279 = dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278));
                        float _3282 = inversesqrt(_3279);
                        float _3283 = _3282 * _3276;
                        float _3284 = _3282 * _3277;
                        float _3285 = _3282 * _3278;
                        float _3286 = dot(vec3(_827, _830, _833), vec3(_3283, _3284, _3285));
                        float _3291 = 1.0 - (_3279 * _3236.w);
                        float _4675 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3292 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3293 = sqrt(_3279) * _3255.w;
                        float _3296 = 1.39999997615814208984375 / (_3293 + 1.39999997615814208984375);
                        float _3297 = _3296 * _3296;
                        float _3300 = ((1.0 - _3297) * _3286) + _3297;
                        float _3303 = _3293 * _3293;
                        float _3307 = ((isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0))) * _3292) / ((_3303 * 0.699999988079071044921875) + 1.0);
                        float _3311 = (-0.0) - _1940;
                        float _3312 = (-0.0) - _1941;
                        float _3313 = (-0.0) - _1942;
                        float _3317 = inversesqrt(dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313)));
                        float _3318 = _3317 * _3311;
                        float _3319 = _3317 * _3312;
                        float _3320 = _3317 * _3313;
                        float _3327 = exp2(log2(1.0 / ((_3303 * 3.5) + 5.0)) * 0.25);
                        float _3328 = 1.0 - _886;
                        float _3335 = sqrt(1.0 - ((1.0 - (_3328 * _3328)) * (1.0 - (_3327 * _3327))));
                        float _3336 = _3335 * _3335;
                        float _3337 = _3336 * _3336;
                        float _3338 = _3318 + _3283;
                        float _3339 = _3319 + _3284;
                        float _3340 = _3320 + _3285;
                        float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                        float _3348 = dot(vec3(_827, _830, _833), vec3(_3318, _3319, _3320));
                        float _4691 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3351 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3352 = dot(vec3(_827, _830, _833), vec3(_3344 * _3338, _3344 * _3339, _3344 * _3340));
                        float _4702 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3355 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                        float _3359 = ((_3355 * _3355) * (_3337 + (-1.0))) + 1.0;
                        float _3360 = _3296 * _3336;
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3286) + _3361;
                        float _4713 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                        float _3366 = 1.0 - _3336;
                        float _3376 = (0.5 / (((_3365 * ((_3351 * _3366) + _3336)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3336) * _3351))) * _3365;
                        float _4724 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3387 = (((_3337 * 3.1415927410125732421875) * (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) / ((_3359 * _3359) * ((_3303 * 2.1991131305694580078125) + 3.141590118408203125))) * _3292;
                        _3145 = (_3307 * _3255.x) + _3213;
                        _3146 = (_3307 * _3255.y) + _3214;
                        _3147 = (_3307 * _3255.z) + _3215;
                        _3142 = (_3387 * _3272.x) + _3210;
                        _3143 = (_3387 * _3272.y) + _3211;
                        _3144 = (_3387 * _3272.z) + _3212;
                        if (_3217 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3210 = _3142;
                            _3211 = _3143;
                            _3212 = _3144;
                            _3213 = _3145;
                            _3214 = _3146;
                            _3215 = _3147;
                            _3216 = _3217;
                        }
                    }
                    frontier_phi_66_pred = _3147;
                    frontier_phi_66_pred_1 = _3146;
                    frontier_phi_66_pred_2 = _3145;
                    frontier_phi_66_pred_3 = _3144;
                    frontier_phi_66_pred_4 = _3143;
                    frontier_phi_66_pred_5 = _3142;
                }
                _2953 = frontier_phi_66_pred;
                _2951 = frontier_phi_66_pred_1;
                _2949 = frontier_phi_66_pred_2;
                _2947 = frontier_phi_66_pred_3;
                _2945 = frontier_phi_66_pred_4;
                _2943 = frontier_phi_66_pred_5;
                uint _3093 = _3092 + 1u;
                if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3086 = _2943;
                    _3087 = _2945;
                    _3088 = _2947;
                    _3089 = _2949;
                    _3090 = _2951;
                    _3091 = _2953;
                    _3092 = _3093;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
        }
        uvec4 _2956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2957 = _2956.z;
        uint _2959 = (_2957 >> 8u) & 15u;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        if (((4294967295u << _2959) & _2862) == 0u)
        {
            _3054 = _2942;
            _3056 = _2944;
            _3058 = _2946;
            _3060 = _2948;
            _3062 = _2950;
            _3064 = _2952;
        }
        else
        {
            float _3079 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
            float _3080 = _3079 * _1940;
            float _3081 = _3079 * _1941;
            float _3082 = _3079 * _1942;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2959 < ((_2957 >> 12u) & 15u))
            {
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3193 = _2942;
                float _3194 = _2944;
                float _3195 = _2946;
                float _3196 = _2948;
                float _3197 = _2950;
                float _3198 = _2952;
                uint _3199 = _2959;
                uint _3208;
                bool _3209;
                for (;;)
                {
                    _3208 = texelFetch(g_lightClassification, int((((_2856 << 5u) + (_2842 << 9u)) + (_3199 << 2u)) >> 2u)).x;
                    _3209 = _3208 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3209)
                    {
                        frontier_phi_72_pred = _3198;
                        frontier_phi_72_pred_1 = _3197;
                        frontier_phi_72_pred_2 = _3196;
                        frontier_phi_72_pred_3 = _3195;
                        frontier_phi_72_pred_4 = _3194;
                        frontier_phi_72_pred_5 = _3193;
                    }
                    else
                    {
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3405 = _3193;
                        float _3406 = _3194;
                        float _3407 = _3195;
                        float _3408 = _3196;
                        float _3409 = _3197;
                        float _3410 = _3198;
                        uint _3411 = _3208;
                        uint _3412;
                        vec4 _3437;
                        float _3438;
                        vec4 _3453;
                        vec3 _3465;
                        vec4 _3480;
                        vec4 _3495;
                        float _3541;
                        bool _3542;
                        for (;;)
                        {
                            uint _3422 = ((_3199 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3411));
                            _3412 = (_3411 + 4294967295u) & _3411;
                            uint _3424 = _3422 * 40u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            _3438 = _3437.w;
                            uint _3440 = (_3422 * 40u) + 4u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3422 * 40u) + 8u;
                            _3465 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x));
                            uint _3467 = (_3422 * 40u) + 16u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3422 * 40u) + 20u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3422 * 40u) + 24u;
                            vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3516 = (_3422 * 40u) + 28u;
                            vec4 _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            _3541 = fma(_1942, _3529.z, fma(_1941, _3529.y, _3529.x * _1940)) + _3529.w;
                            _3542 = !((fma(_1942, _3510.z, fma(_1941, _3510.y, _3510.x * _1940)) + _3510.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3542)
                            {
                                float _3569 = _3437.x - _1940;
                                float _3570 = _3437.y - _1941;
                                float _3571 = _3437.z - _1942;
                                float _3572 = dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571));
                                float _3575 = inversesqrt(_3572);
                                float _3576 = _3575 * _3569;
                                float _3577 = _3575 * _3570;
                                float _3578 = _3575 * _3571;
                                float _3582 = 1.0 - (_3572 / (_3438 * _3438));
                                float _4735 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3583 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3587 = sqrt(_3572) * _3453.w;
                                float _3589 = 1.39999997615814208984375 / (_3587 + 1.39999997615814208984375);
                                float _3590 = _3589 * _3589;
                                float _3593 = ((1.0 - _3590) * dot(vec3(_3576, _3577, _3578), vec3(_827, _830, _833))) + _3590;
                                float _3596 = _3587 * _3587;
                                float _3600 = (fma(_1942, _3480.z, fma(_1941, _3480.y, _3480.x * _1940)) + _3480.w) / _3541;
                                float _3601 = (fma(_1942, _3495.z, fma(_1941, _3495.y, _3495.x * _1940)) + _3495.w) / _3541;
                                float _3605 = 1.0 - dot(vec2(_3600, _3601), vec2(_3600, _3601));
                                float _4751 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3607 = _3606 * (((isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0))) * _3583) / ((_3596 * 0.699999988079071044921875) + 1.0));
                                float _3619 = exp2(log2(1.0 / ((_3596 * 3.5) + 5.0)) * 0.25);
                                float _3620 = 1.0 - _886;
                                float _3627 = sqrt(1.0 - ((1.0 - (_3620 * _3620)) * (1.0 - (_3619 * _3619))));
                                float _3628 = _3627 * _3627;
                                float _3629 = _3628 * _3628;
                                float _3630 = _3576 - _3080;
                                float _3631 = _3577 - _3081;
                                float _3632 = _3578 - _3082;
                                float _3636 = inversesqrt(dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632)));
                                float _3640 = dot(vec3(_827, _830, _833), vec3((-0.0) - _3080, (-0.0) - _3081, (-0.0) - _3082));
                                float _4762 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3643 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3644 = dot(vec3(_827, _830, _833), vec3(_3636 * _3630, _3636 * _3631, _3636 * _3632));
                                float _4773 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3647 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3651 = ((_3647 * _3647) * (_3629 + (-1.0))) + 1.0;
                                float _3652 = _3589 * _3628;
                                float _3653 = _3652 * _3652;
                                float _3659 = ((1.0 - _3653) * dot(vec3(_827, _830, _833), vec3(_3576, _3577, _3578))) + _3653;
                                float _4784 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3661 = 1.0 - _3628;
                                float _3671 = (0.5 / (((_3660 * ((_3643 * _3661) + _3628)) + 9.9999999392252902907785028219223e-09) + (((_3660 * _3661) + _3628) * _3643))) * _3660;
                                float _4795 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3681 = (_3606 * _3583) * (((_3629 * 3.1415927410125732421875) * (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) / ((_3651 * _3651) * ((_3596 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3607 * _3453.y;
                                frontier_phi_78_pred_1 = _3607 * _3453.x;
                                frontier_phi_78_pred_2 = _3681 * _3465.z;
                                frontier_phi_78_pred_3 = _3681 * _3465.y;
                                frontier_phi_78_pred_4 = _3681 * _3465.x;
                                frontier_phi_78_pred_5 = _3607 * _3453.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3689 = frontier_phi_78_pred;
                            _3688 = frontier_phi_78_pred_1;
                            _3687 = frontier_phi_78_pred_2;
                            _3686 = frontier_phi_78_pred_3;
                            _3685 = frontier_phi_78_pred_4;
                            _3690 = frontier_phi_78_pred_5;
                            _3395 = _3688 + _3408;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            if (_3412 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3412;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3397;
                        frontier_phi_72_pred_1 = _3396;
                        frontier_phi_72_pred_2 = _3395;
                        frontier_phi_72_pred_3 = _3394;
                        frontier_phi_72_pred_4 = _3393;
                        frontier_phi_72_pred_5 = _3392;
                    }
                    _3065 = frontier_phi_72_pred;
                    _3063 = frontier_phi_72_pred_1;
                    _3061 = frontier_phi_72_pred_2;
                    _3059 = frontier_phi_72_pred_3;
                    _3057 = frontier_phi_72_pred_4;
                    _3055 = frontier_phi_72_pred_5;
                    uint _3200 = _3199 + 1u;
                    if (_3200 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3193 = _3055;
                        _3194 = _3057;
                        _3195 = _3059;
                        _3196 = _3061;
                        _3197 = _3063;
                        _3198 = _3065;
                        _3199 = _3200;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3065;
                frontier_phi_60_61_ladder_1 = _3063;
                frontier_phi_60_61_ladder_2 = _3059;
                frontier_phi_60_61_ladder_3 = _3057;
                frontier_phi_60_61_ladder_4 = _3055;
                frontier_phi_60_61_ladder_5 = _3061;
            }
            else
            {
                frontier_phi_60_61_ladder = _2952;
                frontier_phi_60_61_ladder_1 = _2950;
                frontier_phi_60_61_ladder_2 = _2946;
                frontier_phi_60_61_ladder_3 = _2944;
                frontier_phi_60_61_ladder_4 = _2942;
                frontier_phi_60_61_ladder_5 = _2948;
            }
            _3054 = frontier_phi_60_61_ladder_4;
            _3056 = frontier_phi_60_61_ladder_3;
            _3058 = frontier_phi_60_61_ladder_2;
            _3060 = frontier_phi_60_61_ladder_5;
            _3062 = frontier_phi_60_61_ladder_1;
            _3064 = frontier_phi_60_61_ladder;
        }
        float _3069 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2875 = (_3069 * _3060) + _2406;
        _2877 = (_3069 * _3062) + _2408;
        _2879 = (_3069 * _3064) + _2410;
        _2881 = ((_3054 * 0.039999999105930328369140625) * _3069) + _2729;
        _2883 = ((_3056 * 0.039999999105930328369140625) * _3069) + _2731;
        _2885 = ((_3058 * 0.039999999105930328369140625) * _3069) + _2733;
    }
    else
    {
        _2875 = _2406;
        _2877 = _2408;
        _2879 = _2410;
        _2881 = _2729;
        _2883 = _2731;
        _2885 = _2733;
    }
    float _4811 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4822 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4833 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    uint _2905 = _291 + 6u;
    float _2913 = _808 / cbSceneParam._m0[86u].x;
    float _2914 = _809 / cbSceneParam._m0[86u].y;
    vec4 _2928 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2913, _2914, (log2((isnan(cbSceneParam._m0[77u].w) ? _743 : (isnan(_743) ? cbSceneParam._m0[77u].w : min(_743, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2930 = _2928.x;
    float _2931 = _2928.y;
    float _2932 = _2928.z;
    float _2933 = _2928.w;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    if (_743 > cbSceneParam._m0[78u].w)
    {
        float _2967 = isnan(_743) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _743 : min(cbSceneParam._m0[80u].w, _743));
        float _2968 = _2967 / _743;
        float _2979 = _2968 * _793;
        float _2980 = _794 * _2968;
        float _2981 = (-0.0) - _2980;
        float _2982 = _2968 * _795;
        float _2984 = (cbSceneParam._m0[77u].w * _2981) / _2967;
        float _2985 = _2984 + cbSceneParam._m0[79u].w;
        float _2986 = cbSceneParam._m0[79u].w - _2980;
        float _2992 = sqrt(((_2979 * _2979) + (_2980 * _2980)) + (_2982 * _2982));
        float _2995 = (1.0 - (cbSceneParam._m0[77u].w / _2967)) * _2992;
        float _3000 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3002 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3155;
        if (abs((_2981 - _2984) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3155 = ((((_2985 > 0.0) ? exp2(_3000 * _2985) : (2.0 - exp2(_3002 * _2985))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2995;
        }
        else
        {
            float _3115 = 1.0 / cbSceneParam._m0[80u].x;
            float _3116 = isnan(_2986) ? _2985 : (isnan(_2985) ? _2986 : max(_2985, _2986));
            float _3117 = isnan(_2986) ? _2985 : (isnan(_2985) ? _2986 : min(_2985, _2986));
            float _3126 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : min(_3116, 0.0));
            float _3127 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : min(_3117, 0.0));
            _3155 = ((abs(_2992 / _2981) * cbSceneParam._m0[80u].y) * ((((_3126 - _3127) * 2.0) - ((exp2(_3000 * (isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0)))) - exp2(_3000 * (isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))))) * _3115)) - ((exp2(_3002 * _3126) - exp2(_3002 * _3127)) * _3115))) + (_2995 * cbSceneParam._m0[80u].z);
        }
        vec4 _3157 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2913, _2914, 1.0), 0.0);
        float _3166 = exp2((_3155 * (-1.44269502162933349609375)) * (1.0 - _3157.w));
        float _3167 = log2(_3166);
        float _3183 = log2(_2933);
        _3004 = (exp2(_3183 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3167 * cbSceneParam._m0[78u].x)) * _3157.x) / cbSceneParam._m0[78u].x)) + _2930;
        _3006 = (exp2(_3183 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3167 * cbSceneParam._m0[78u].y)) * _3157.y) / cbSceneParam._m0[78u].y)) + _2931;
        _3008 = (exp2(_3183 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3167 * cbSceneParam._m0[78u].z)) * _3157.z) / cbSceneParam._m0[78u].z)) + _2932;
        _3010 = _3166 * _2933;
    }
    else
    {
        _3004 = _2930;
        _3006 = _2931;
        _3008 = _2932;
        _3010 = _2933;
    }
    float _3022 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3023 = _3022 == 3.0;
    float _3024 = log2(_3010);
    float _3031 = exp2(_3024 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2875 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _870))) + ((_2881 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1675)) * cbPerFrame._m0[3u].x));
    float _3032 = exp2(_3024 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2877 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _870))) + ((_2883 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1675)) * cbPerFrame._m0[3u].x));
    float _3033 = exp2(_3024 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2879 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _870))) + ((_2885 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1675)) * cbPerFrame._m0[3u].x));
    float _3042 = (_3022 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3042 * (_3023 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3004)));
    SV_Target.y = _3042 * (_3023 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3006)));
    SV_Target.z = _3042 * (_3023 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3008)));
    SV_Target.w = cbInstanceData._m0[_2905].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2905].w;
}


