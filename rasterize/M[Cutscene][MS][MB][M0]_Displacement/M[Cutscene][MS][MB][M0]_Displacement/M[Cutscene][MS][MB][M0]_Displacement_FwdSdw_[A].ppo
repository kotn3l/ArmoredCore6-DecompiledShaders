#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_22;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_26;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 7, component = 3) in float TEXCOORD_11;
layout(location = 8) in float TEXCOORD_12;
layout(location = 8, component = 1) in float TEXCOORD_13;
layout(location = 8, component = 2) in float TEXCOORD_14;
layout(location = 8, component = 3) in float TEXCOORD_15;
layout(location = 9) in float TEXCOORD_16;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1285;
float _3927;
float _3928;
float _3929;
float _3930;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = 1.0 - (cbMtdParam._m0[17u].w * TEXCOORD_14);
    float _256 = 1.0 - (cbMtdParam._m0[17u].w * TEXCOORD_15);
    float _257 = 1.0 - (cbMtdParam._m0[17u].w * TEXCOORD_16);
    float _3939 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3950 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3961 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    vec4 _280 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _286 = _280.x * cbMtdParam._m0[11u].x;
    float _287 = _280.y * cbMtdParam._m0[11u].y;
    float _288 = _280.z * cbMtdParam._m0[11u].z;
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _327 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _360 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].x * TEXCOORD.z) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((cbMtdParam._m0[20u].y * TEXCOORD.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[22u].zw, cbMtdParam._m0[23u].x, 0.0));
    float _391 = ((cbMtdParam._m0[14u].z * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[18u].y) + _374) * cbMtdParam._m0[18u].x))) + 1.0;
    float _3972 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _399 = (_392 * ((_327.x * cbMtdParam._m0[12u].x) - _286)) + _286;
    float _400 = (_392 * ((_327.y * cbMtdParam._m0[12u].y) - _287)) + _287;
    float _401 = (_392 * ((_327.z * cbMtdParam._m0[12u].z) - _288)) + _288;
    vec4 _419 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _314) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _315) + cbTextureTilingScale._m0[7u].w));
    float _427 = ((_399 * 4.55000019073486328125) * cbMtdParam._m0[13u].x) * _419.x;
    float _430 = ((_400 * 4.55000019073486328125) * cbMtdParam._m0[13u].y) * _419.y;
    float _433 = ((_401 * 4.55000019073486328125) * cbMtdParam._m0[13u].z) * _419.z;
    float _454 = ((cbMtdParam._m0[14u].w * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_8) * 2.0) - texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w)).x)) + 1.0;
    float _3983 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _457 = cbMtdParam._m0[17u].z * _455;
    float _474 = sin(cbMtdParam._m0[19u].x);
    float _475 = cos(cbMtdParam._m0[19u].x);
    float _476 = TEXCOORD.x + (-0.5);
    float _478 = _476 + cbMtdParam._m0[19u].z;
    float _479 = TEXCOORD.y + (-0.5);
    float _480 = _479 + cbMtdParam._m0[19u].w;
    vec4 _502 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * (fma(_480, (-0.0) - _474, _478 * _475) + 0.5)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (fma(_480, _475, _478 * _474) + 0.5)) + cbTextureTilingScale._m0[6u].w));
    float _513 = exp2(log2((1.0 - _502.w) * cbMtdParam._m0[18u].z) * cbMtdParam._m0[18u].w);
    float _3994 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _518 = _514 * ((cbMtdParam._m0[9u].x * _399) - _399);
    float _519 = _514 * ((cbMtdParam._m0[9u].y * _400) - _400);
    float _520 = _514 * ((cbMtdParam._m0[9u].z * _401) - _401);
    float _527 = (_518 + _399) - (_457 * _518);
    float _528 = (_519 + _400) - (_457 * _519);
    float _529 = (_520 + _401) - (_457 * _520);
    float _546 = sin(cbMtdParam._m0[16u].x);
    float _547 = cos(cbMtdParam._m0[16u].x);
    float _548 = _476 + cbMtdParam._m0[20u].z;
    float _549 = _479 + cbMtdParam._m0[20u].w;
    vec4 _568 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * (fma(_549, (-0.0) - _546, _548 * _547) + 0.5)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_549, _547, _548 * _546) + 0.5)) + cbTextureTilingScale._m0[1u].w));
    float _578 = exp2(log2((1.0 - _568.w) * cbMtdParam._m0[17u].y) * cbMtdParam._m0[16u].w);
    float _4005 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _579 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _598 = (((_527 - _427) + ((((cbMtdParam._m0[10u].x * _399) - _527) * _455) * _579)) * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) + _427;
    float _599 = (((_528 - _430) + ((((cbMtdParam._m0[10u].y * _400) - _528) * _455) * _579)) * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) + _430;
    float _600 = (((_529 - _433) + ((((cbMtdParam._m0[10u].z * _401) - _529) * _455) * _579)) * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) + _433;
    vec4 _612 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    vec4 _629 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _631 = _629.x;
    float _632 = _629.y;
    float _633 = _629.z;
    float _642 = ((_612.z - _633) * _392) + _633;
    float _645 = ((((_612.x - _631) * _392) + _631) * 2.0) + (-1.0);
    float _647 = ((((_612.y - _632) * _392) + _632) * 2.0) + (-1.0);
    float _648 = dot(vec2(_645, _647), vec2(_645, _647));
    float _4016 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _653 = sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))));
    vec4 _665 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w));
    float _681 = (((_665.z - _642) * TEXCOORD_11) * cbMtdParam._m0[15u].z) + _642;
    float _689 = ((_502.z - _681) * cbMtdParam._m0[15u].x) + _681;
    float _699 = cbMtdParam._m0[19u].y - (cbMtdParam._m0[19u].y * _455);
    float _705 = cbMtdParam._m0[17u].x * _455;
    float _712 = ((((((_665.x * 2.0) + (-1.0)) * TEXCOORD_11) * cbMtdParam._m0[15u].y) + _645) + (_699 * ((_502.x * 2.0) + (-1.0)))) + (_705 * ((_568.x * 2.0) + (-1.0)));
    float _713 = ((((((_665.y * 2.0) + (-1.0)) * TEXCOORD_12) * cbMtdParam._m0[15u].y) + _647) + (_699 * ((_502.y * 2.0) + (-1.0)))) + (_705 * ((_568.y * 2.0) + (-1.0)));
    float _716 = fma(_653, _234 * NORMAL.x, fma(_713, _241 * TANGENT.x, (_227 * _219) * _712));
    float _719 = fma(_653, _234 * NORMAL.y, fma(_713, _241 * TANGENT.y, (_227 * _220) * _712));
    float _722 = fma(_653, _234 * NORMAL.z, fma(_713, _241 * TANGENT.z, (_227 * _221) * _712));
    float _726 = inversesqrt(dot(vec3(_716, _719, _722), vec3(_716, _719, _722)));
    float _727 = _726 * _716;
    float _728 = _726 * _719;
    float _729 = _726 * _722;
    float _4027 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _730 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4049 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4060 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _747 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _797 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _787);
    float _798 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _787);
    float _799 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _787);
    float _803 = inversesqrt(dot(vec3(_797, _798, _799), vec3(_797, _798, _799)));
    float _804 = _797 * _803;
    float _805 = _798 * _803;
    float _806 = _799 * _803;
    vec4 _811 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _813 = _811.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _966 = sqrt(((_797 * _797) + (_798 * _798)) + (_799 * _799));
        float _972 = (cbMatDynParam._m0[5u].x * _966) + cbMatDynParam._m0[5u].y;
        float _4071 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _977 = (cbMatDynParam._m0[5u].z * _966) + cbMatDynParam._m0[5u].w;
        float _4082 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) - _973)) + _973) < ((_813 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _824 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _825 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _843 = fma(_729, cbSceneParam._m0[5u].z, fma(_728, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _727));
    float _846 = fma(_729, cbSceneParam._m0[6u].z, fma(_728, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _727));
    float _849 = fma(_729, cbSceneParam._m0[7u].z, fma(_728, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _727));
    uint _862 = _295 + 9u;
    uint _863 = _862 + uint(cbMatDynParam._m0[0u].w);
    float _869 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_863].x;
    float _870 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_863].y;
    float _871 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_863].z;
    float _4093 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    vec4 _883 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _824, cbSceneParam._m0[86u].y * _825));
    float _886 = _883.x * TEXCOORD_5.w;
    float _887 = dot(vec3(_727, _728, _729), vec3(_804, _805, _806));
    float _890 = _887 * 2.0;
    float _894 = (_890 * _727) - _804;
    float _895 = (_890 * _728) - _805;
    float _896 = (_890 * _729) - _806;
    float _900 = abs(dot(vec3(_804, _805, _806), vec3(_727, _728, _729)));
    float _4126 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _902 = sqrt(_730);
    float _915 = exp2((_902 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_902 * 3.0));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1284;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1011 = fma(_955, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _947));
        float _1015 = fma(_955, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _947));
        float _1019 = fma(_955, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _947));
        float _1042 = _947 + _727;
        float _1043 = _951 + _728;
        float _1044 = _955 + _729;
        float _1054 = fma(_1044, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042)) - _1011;
        float _1055 = fma(_1044, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042)) - _1015;
        float _1056 = fma(_1044, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042)) - _1019;
        float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
        float _1073 = ((_1060 * _1054) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1011 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1060 * _1055) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1015 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1060 * _1056) / cbModelParam._m0[34u].z) + ((((((_1019 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        float _1112 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1078.x + (-0.5));
        float _1114 = _1112 * (_1078.y + (-0.5));
        float _1115 = _1112 * (_1078.z + (-0.5));
        float _1122 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1085.x + (-0.5));
        float _1124 = _1122 * (_1085.y + (-0.5));
        float _1125 = _1122 * (_1085.z + (-0.5));
        float _1132 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1092.x + (-0.5));
        float _1134 = _1132 * (_1092.y + (-0.5));
        float _1135 = _1132 * (_1092.z + (-0.5));
        float _1142 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1099.x + (-0.5));
        float _1144 = _1142 * (_1099.y + (-0.5));
        float _1145 = _1142 * (_1099.z + (-0.5));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = _1113 * 0.5;
        float _1150 = _1123 * 0.5;
        float _1151 = _1133 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1166 = (dot(vec3(_727, _728, _729), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1176 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4174 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1178 + 1.0))) + _1183) * _1146;
        float _1193 = _1114 * 0.5;
        float _1194 = _1124 * 0.5;
        float _1195 = _1134 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_727, _728, _729), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4207 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1220 + 1.0))) + _1225) * _1147;
        float _1235 = _1115 * 0.5;
        float _1236 = _1125 * 0.5;
        float _1237 = _1135 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_727, _728, _729), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4240 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1262 + 1.0))) + _1267) * _1148;
        _1284 = _1115;
        _1286 = _1114;
        _1287 = _1113;
        _1288 = _1125;
        _1289 = _1124;
        _1290 = _1123;
        _1291 = _1135;
        _1292 = _1134;
        _1293 = _1133;
        _1294 = _1148;
        _1295 = _1147;
        _1296 = _1146;
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
    }
    else
    {
        _1284 = _1285;
        _1286 = _1285;
        _1287 = _1285;
        _1288 = _1285;
        _1289 = _1285;
        _1290 = _1285;
        _1291 = _1285;
        _1292 = _1285;
        _1293 = _1285;
        _1294 = _1285;
        _1295 = _1285;
        _1296 = _1285;
        _1297 = 0.0;
        _1298 = 0.0;
        _1299 = 0.0;
    }
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1328 = fma(_955, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947));
        float _1332 = fma(_955, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947));
        float _1336 = fma(_955, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947));
        float _1359 = _947 + _727;
        float _1360 = _951 + _728;
        float _1361 = _955 + _729;
        float _1371 = fma(_1361, cbModelParam._m0[30u].z, fma(_1360, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1359)) - _1328;
        float _1372 = fma(_1361, cbModelParam._m0[31u].z, fma(_1360, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1359)) - _1332;
        float _1373 = fma(_1361, cbModelParam._m0[32u].z, fma(_1360, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1359)) - _1336;
        float _1377 = inversesqrt(dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373)));
        float _1390 = ((_1377 * _1371) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1328 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1377 * _1372) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1332 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1377 * _1373) / cbModelParam._m0[35u].z) + ((((((_1336 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        float _1427 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1394.x + (-0.5));
        float _1429 = _1427 * (_1394.y + (-0.5));
        float _1430 = _1427 * (_1394.z + (-0.5));
        float _1437 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1401.x + (-0.5));
        float _1439 = _1437 * (_1401.y + (-0.5));
        float _1440 = _1437 * (_1401.z + (-0.5));
        float _1447 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1408.x + (-0.5));
        float _1449 = _1447 * (_1408.y + (-0.5));
        float _1450 = _1447 * (_1408.z + (-0.5));
        float _1457 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1415.x + (-0.5));
        float _1459 = _1457 * (_1415.y + (-0.5));
        float _1460 = _1457 * (_1415.z + (-0.5));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = _1428 * 0.5;
        float _1465 = _1438 * 0.5;
        float _1466 = _1448 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_727, _728, _729), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4303 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1491 + 1.0))) + _1496) * _1461;
        float _1506 = _1429 * 0.5;
        float _1507 = _1439 * 0.5;
        float _1508 = _1449 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_727, _728, _729), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4336 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1533 + 1.0))) + _1538) * _1462;
        float _1548 = _1430 * 0.5;
        float _1549 = _1440 * 0.5;
        float _1550 = _1450 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_727, _728, _729), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4369 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1575 + 1.0))) + _1580) * _1463;
        _1597 = _1430;
        _1598 = _1429;
        _1599 = _1428;
        _1600 = _1440;
        _1601 = _1439;
        _1602 = _1438;
        _1603 = _1450;
        _1604 = _1449;
        _1605 = _1448;
        _1606 = _1463;
        _1607 = _1462;
        _1608 = _1461;
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
    }
    else
    {
        _1597 = _1285;
        _1598 = _1285;
        _1599 = _1285;
        _1600 = _1285;
        _1601 = _1285;
        _1602 = _1285;
        _1603 = _1285;
        _1604 = _1285;
        _1605 = _1285;
        _1606 = _1285;
        _1607 = _1285;
        _1608 = _1285;
        _1609 = 0.0;
        _1610 = 0.0;
        _1611 = 0.0;
    }
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1297)) + _1297;
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1298)) + _1298;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1299)) + _1299;
    float _1644 = fma(_1623, cbSceneParam._m0[89u].z, fma(_1622, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1623, cbSceneParam._m0[90u].z, fma(_1622, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1623, cbSceneParam._m0[91u].z, fma(_1622, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1621));
    float _1665 = _894 * 0.5;
    float _1666 = _895 * 0.5;
    float _1667 = _896 * 0.5;
    float _1668 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1671 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1674 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1708;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1681 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1284, _1288, _1291, _1294));
        float _1685 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1689 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1696 = dot(vec4(cbModelParam._m0[39u]), vec4(_1665, _1666, _1667, 1.0));
        _1708 = dot(vec3(isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1696) ? 0.0 : (isnan(0.0) ? _1696 : max(0.0, _1696))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1708 = 1.0;
    }
    float _1719;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1710 = dot(vec4(cbModelParam._m0[40u]), vec4(_1665, _1666, _1667, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1723 = (_1719 * cbModelParam._m0[1u].x) + (_1708 * (1.0 - cbModelParam._m0[1u].x));
    float _1733 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _730);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1733 : min(cbModelParam._m0[25u].z, _1733));
    float _1814;
    float _1816;
    float _1818;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1781 = fma(_955, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _947)) + cbModelParam._m0[13u].w;
        float _1785 = fma(_955, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _947)) + cbModelParam._m0[14u].w;
        float _1789 = fma(_955, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _947)) + cbModelParam._m0[15u].w;
        float _1792 = fma(_896, cbModelParam._m0[13u].z, fma(_895, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894));
        float _1795 = fma(_896, cbModelParam._m0[14u].z, fma(_895, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894));
        float _1798 = fma(_896, cbModelParam._m0[15u].z, fma(_895, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894));
        float _1826;
        if (_1792 > 0.0)
        {
            _1826 = abs((1.0 - _1781) / _1792);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1781 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1826 = frontier_phi_17_15_ladder;
        }
        float _1996;
        if (_1795 > 0.0)
        {
            _1996 = abs((1.0 - _1785) / _1795);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1785 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1996 = frontier_phi_26_22_ladder;
        }
        float _2291;
        if (_1798 > 0.0)
        {
            _2291 = abs((1.0 - _1789) / _1798);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1789 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2291 = frontier_phi_38_33_ladder;
        }
        float _2293 = isnan(_1996) ? _1826 : (isnan(_1826) ? _1996 : min(_1826, _1996));
        float _2294 = isnan(_2291) ? _2293 : (isnan(_2293) ? _2291 : min(_2293, _2291));
        float _2298 = (_2294 * _1792) + _1781;
        float _2299 = (_2294 * _1795) + _1785;
        float _2300 = (_2294 * _1798) + _1789;
        float _2301 = _2294 * 9.9999997473787516355514526367188e-05;
        float _2303 = (-1.0) - _2301;
        float _2305 = _2301 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2300 > _2305) || ((_2300 < _2303) || ((_2299 > _2305) || ((_2299 < _2303) || ((_2298 < _2303) || (_2298 > _2305))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2300, cbModelParam._m0[9u].z, fma(_2299, cbModelParam._m0[9u].y, _2298 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2300, cbModelParam._m0[10u].z, fma(_2299, cbModelParam._m0[10u].y, _2298 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2300, cbModelParam._m0[11u].z, fma(_2299, cbModelParam._m0[11u].y, _2298 * cbModelParam._m0[11u].x))), _1734);
            frontier_phi_16_38_ladder = _2445.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2445.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2445.x * cbModelParam._m0[1u].y;
        }
        _1814 = frontier_phi_16_38_ladder_2;
        _1816 = frontier_phi_16_38_ladder_1;
        _1818 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1802 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_894, _895, _896), _1734);
        _1814 = _1802.x * cbModelParam._m0[1u].y;
        _1816 = _1802.y * cbModelParam._m0[1u].y;
        _1818 = _1802.z * cbModelParam._m0[1u].y;
    }
    float _1822 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _730);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1822 : min(cbModelParam._m0[25u].w, _1822));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1877 = fma(_955, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _947)) + cbModelParam._m0[21u].w;
        float _1881 = fma(_955, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _947)) + cbModelParam._m0[22u].w;
        float _1885 = fma(_955, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _947)) + cbModelParam._m0[23u].w;
        float _1888 = fma(_896, cbModelParam._m0[21u].z, fma(_895, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894));
        float _1891 = fma(_896, cbModelParam._m0[22u].z, fma(_895, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894));
        float _1894 = fma(_896, cbModelParam._m0[23u].z, fma(_895, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894));
        float _2001;
        if (_1888 > 0.0)
        {
            _2001 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2001 = frontier_phi_28_24_ladder;
        }
        float _2318;
        if (_1891 > 0.0)
        {
            _2318 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2318 = frontier_phi_40_35_ladder;
        }
        float _2645;
        if (_1894 > 0.0)
        {
            _2645 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2645 = frontier_phi_50_47_ladder;
        }
        float _2647 = isnan(_2318) ? _2001 : (isnan(_2001) ? _2318 : min(_2001, _2318));
        float _2648 = isnan(_2645) ? _2647 : (isnan(_2647) ? _2645 : min(_2647, _2645));
        float _2652 = (_2648 * _1888) + _1877;
        float _2653 = (_2648 * _1891) + _1881;
        float _2654 = (_2648 * _1894) + _1885;
        float _2655 = _2648 * 9.9999997473787516355514526367188e-05;
        float _2656 = (-1.0) - _2655;
        float _2658 = _2655 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2654 > _2658) || ((_2654 < _2656) || ((_2653 > _2658) || ((_2653 < _2656) || ((_2652 < _2656) || (_2652 > _2658))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2772 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2654, cbModelParam._m0[17u].z, fma(_2653, cbModelParam._m0[17u].y, _2652 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2654, cbModelParam._m0[18u].z, fma(_2653, cbModelParam._m0[18u].y, _2652 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2654, cbModelParam._m0[19u].z, fma(_2653, cbModelParam._m0[19u].y, _2652 * cbModelParam._m0[19u].x))), _1823);
            frontier_phi_25_50_ladder = _2772.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2772.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2772.x * cbModelParam._m0[1u].z;
        }
        _1913 = frontier_phi_25_50_ladder_2;
        _1915 = frontier_phi_25_50_ladder_1;
        _1917 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_894, _895, _896), _1823);
        _1913 = _1897.x * cbModelParam._m0[1u].z;
        _1915 = _1897.y * cbModelParam._m0[1u].z;
        _1917 = _1897.z * cbModelParam._m0[1u].z;
    }
    float _1929 = ((((1.0 - _915) * ((_902 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_915 * _902)) * _886;
    float _1930 = _1929 * ((cbModelParam._m0[1u].w * (_1913 - _1814)) + _1814);
    float _1931 = _1929 * ((cbModelParam._m0[1u].w * (_1915 - _1816)) + _1816);
    float _1932 = _1929 * ((cbModelParam._m0[1u].w * (_1917 - _1818)) + _1818);
    float _1935 = fma(_1932, cbSceneParam._m0[89u].z, fma(_1931, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1932, cbSceneParam._m0[90u].z, fma(_1931, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1932, cbSceneParam._m0[91u].z, fma(_1931, cbSceneParam._m0[91u].y, _1930 * cbSceneParam._m0[91u].x));
    float _1975 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1979 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1983 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1987 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1988 = _1975 / _1987;
    float _1989 = _1979 / _1987;
    float _1990 = _1983 / _1987;
    float _2137;
    float _2138;
    float _2139;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2017 = ((uint(_1990 > cbSceneParam._m0[59u].y) + uint(_1990 > cbSceneParam._m0[59u].x)) + uint(_1990 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2018 = _2017 + 43u;
        uint _2026 = _2017 + 44u;
        uint _2034 = _2017 + 45u;
        uint _2042 = _2017 + 46u;
        float _2053 = fma(_1987, cbSceneParam._m0[_2018].w, fma(_1983, cbSceneParam._m0[_2018].z, fma(_1979, cbSceneParam._m0[_2018].y, _1975 * cbSceneParam._m0[_2018].x)));
        float _2057 = fma(_1987, cbSceneParam._m0[_2026].w, fma(_1983, cbSceneParam._m0[_2026].z, fma(_1979, cbSceneParam._m0[_2026].y, _1975 * cbSceneParam._m0[_2026].x)));
        float _2065 = fma(_1987, cbSceneParam._m0[_2042].w, fma(_1983, cbSceneParam._m0[_2042].z, fma(_1979, cbSceneParam._m0[_2042].y, _1975 * cbSceneParam._m0[_2042].x)));
        float _2070 = cbSceneParam._m0[33u].z * _2065;
        float _2072 = cbSceneParam._m0[33u].w * _2065;
        float _2075 = fma(_1987, cbSceneParam._m0[_2034].w, fma(_1983, cbSceneParam._m0[_2034].z, fma(_1979, cbSceneParam._m0[_2034].y, _1975 * cbSceneParam._m0[_2034].x))) / _2065;
        float _2123 = (cbSceneParam._m0[33u].x - sqrt(((_1989 * _1989) + (_1988 * _1988)) + (_1990 * _1990))) * cbSceneParam._m0[33u].y;
        float _4495 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2130 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2070 + _2053) / _2065, (_2072 + _2057) / _2065), _2075), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2072 + _2053) / _2065, (_2057 - _2070) / _2065), _2075), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2053 - _2070) / _2065, (_2057 - _2072) / _2065), _2075), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2053 - _2072) / _2065, (_2070 + _2057) / _2065), _2075), 0.0)).x), vec4(0.25)));
        _2137 = 1.0 - (_2130 * cbSceneParam._m0[34u].x);
        _2138 = 1.0 - (_2130 * cbSceneParam._m0[34u].y);
        _2139 = 1.0 - (_2130 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2137 = 1.0;
        _2138 = 1.0;
        _2139 = 1.0;
    }
    float _2203;
    float _2205;
    float _2207;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2191 = fma(_1987, cbSceneParam._m0[63u].w, fma(_1983, cbSceneParam._m0[63u].z, fma(_1979, cbSceneParam._m0[63u].y, _1975 * cbSceneParam._m0[63u].x)));
        float _2192 = fma(_1987, cbSceneParam._m0[60u].w, fma(_1983, cbSceneParam._m0[60u].z, fma(_1979, cbSceneParam._m0[60u].y, _1975 * cbSceneParam._m0[60u].x))) / _2191;
        float _2193 = fma(_1987, cbSceneParam._m0[61u].w, fma(_1983, cbSceneParam._m0[61u].z, fma(_1979, cbSceneParam._m0[61u].y, _1975 * cbSceneParam._m0[61u].x))) / _2191;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2192 >= cbSceneParam._m0[64u].x) && (_2193 >= cbSceneParam._m0[64u].y)) && (_2192 <= cbSceneParam._m0[64u].z)) && (_2193 <= cbSceneParam._m0[64u].w))
        {
            float _2331 = fma(_1987, cbSceneParam._m0[62u].w, fma(_1983, cbSceneParam._m0[62u].z, fma(_1979, cbSceneParam._m0[62u].y, _1975 * cbSceneParam._m0[62u].x))) / _2191;
            float _2335 = isnan(cbSceneParam._m0[41u].w) ? _2331 : (isnan(_2331) ? cbSceneParam._m0[41u].w : max(_2331, cbSceneParam._m0[41u].w));
            float _2378 = (cbSceneParam._m0[33u].x - sqrt(((_1989 * _1989) + (_1988 * _1988)) + (_1990 * _1990))) * cbSceneParam._m0[33u].y;
            float _4511 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
            float _2385 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2192, cbSceneParam._m0[33u].w + _2193), _2335), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2192, _2193 - cbSceneParam._m0[33u].z), _2335), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2192 - cbSceneParam._m0[33u].z, _2193 - cbSceneParam._m0[33u].w), _2335), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2192 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2193), _2335), 0.0)).x), vec4(0.25)));
            float _2389 = 1.0 - (_2385 * cbSceneParam._m0[34u].x);
            float _2390 = 1.0 - (_2385 * cbSceneParam._m0[34u].y);
            float _2391 = 1.0 - (_2385 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2391) ? _2139 : (isnan(_2139) ? _2391 : min(_2139, _2391));
            frontier_phi_37_36_ladder_1 = isnan(_2390) ? _2138 : (isnan(_2138) ? _2390 : min(_2138, _2390));
            frontier_phi_37_36_ladder_2 = isnan(_2389) ? _2137 : (isnan(_2137) ? _2389 : min(_2137, _2389));
        }
        else
        {
            frontier_phi_37_36_ladder = _2139;
            frontier_phi_37_36_ladder_1 = _2138;
            frontier_phi_37_36_ladder_2 = _2137;
        }
        _2203 = frontier_phi_37_36_ladder_2;
        _2205 = frontier_phi_37_36_ladder_1;
        _2207 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2203 = _2137;
        _2205 = _2138;
        _2207 = _2139;
    }
    uvec4 _2212 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2214 = _2212.x * 14u;
    uint _2215 = _2214 + 13u;
    float _2222 = _886 + (-1.0);
    float _2227 = (cbLight._m0[_2215].x * _2222) + 1.0;
    float _2228 = (cbLight._m0[_2215].y * _2222) + 1.0;
    float _2229 = (cbLight._m0[_2215].z * _2222) + 1.0;
    float _2230 = (cbLight._m0[_2215].w * _2222) + 1.0;
    uint _2231 = _2214 + 5u;
    float _2237 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
    uint _2241 = _2214 + 4u;
    float _2250 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2254 = _2214 | 1u;
    float _2265 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_727, _728, _729));
    float _2268 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_727, _728, _729));
    float _4547 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _4558 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2273 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * 0.3183098733425140380859375;
    float _2275 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * 0.3183098733425140380859375;
    float _2282 = ((cbLight._m0[_2231].x * _2237) * _2275) + (((cbLight._m0[_2241].x * _2203) * _2250) * _2273);
    float _2283 = ((_2237 * cbLight._m0[_2231].y) * _2275) + (((cbLight._m0[_2241].y * _2205) * _2250) * _2273);
    float _2284 = ((_2237 * cbLight._m0[_2231].z) * _2275) + (((cbLight._m0[_2241].z * _2207) * _2250) * _2273);
    uvec4 _2288 = floatBitsToUint(cbLight._m0[_2214 + 12u]);
    bool _2290 = _2288.x == 0u;
    float _2392;
    float _2394;
    float _2396;
    if (_2290)
    {
        _2392 = _2282;
        _2394 = _2283;
        _2396 = _2284;
    }
    else
    {
        uint _2400 = _2214 + 6u;
        float _2416 = (dot(vec3(cbLight._m0[_2214 + 2u].xyz), vec3(_727, _728, _729)) * 0.5) + 0.5;
        float _2417 = _2416 * _2416;
        float _4569 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2418 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2419 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2392 = (((cbLight._m0[_2400].x * 0.3183098733425140380859375) * _2418) * _2419) + _2282;
        _2394 = (((cbLight._m0[_2400].y * 0.3183098733425140380859375) * _2418) * _2419) + _2283;
        _2396 = (((cbLight._m0[_2400].z * 0.3183098733425140380859375) * _2418) * _2419) + _2284;
    }
    bool _2399 = _2288.y == 0u;
    float _2454;
    float _2456;
    float _2458;
    if (_2399)
    {
        _2454 = _2392;
        _2456 = _2394;
        _2458 = _2396;
    }
    else
    {
        uint _2616 = _2214 + 7u;
        float _2632 = (dot(vec3(cbLight._m0[_2214 + 3u].xyz), vec3(_727, _728, _729)) * 0.5) + 0.5;
        float _2633 = _2632 * _2632;
        float _4585 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2634 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2635 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2454 = (((cbLight._m0[_2616].x * 0.3183098733425140380859375) * _2634) * _2635) + _2392;
        _2456 = (((cbLight._m0[_2616].y * 0.3183098733425140380859375) * _2634) * _2635) + _2394;
        _2458 = (((cbLight._m0[_2616].z * 0.3183098733425140380859375) * _2634) * _2635) + _2396;
    }
    uint _2461 = _2214 + 8u;
    float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _730) * 0.949999988079071044921875);
    float _2475 = _2474 * _2474;
    float _2476 = cbLight._m0[_2214].x + _804;
    float _2477 = cbLight._m0[_2214].y + _805;
    float _2478 = cbLight._m0[_2214].z + _806;
    float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
    float _2483 = _2482 * _2476;
    float _2484 = _2482 * _2477;
    float _2485 = _2482 * _2478;
    float _2486 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2214].xyz));
    float _4601 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _4612 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2490 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2491 = dot(vec3(_727, _728, _729), vec3(_2483, _2484, _2485));
    float _4623 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2494 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2495 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2483, _2484, _2485));
    float _4634 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2499 = _2475 * _2475;
    float _2503 = ((_2494 * _2494) * (_2499 + (-1.0))) + 1.0;
    float _2514 = (exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2515 = 1.0 - _2475;
    float _2526 = (0.5 / (((_2490 * ((_2489 * _2515) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2490 * _2515) + _2475) * _2489))) * _2489;
    float _4645 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2499 / ((_2503 * _2503) * 3.141590118408203125));
    uint _2542 = _2214 + 9u;
    float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _730) * 0.949999988079071044921875);
    float _2554 = _2553 * _2553;
    float _2555 = cbLight._m0[_2254].x + _804;
    float _2556 = cbLight._m0[_2254].y + _805;
    float _2557 = cbLight._m0[_2254].z + _806;
    float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
    float _2562 = _2561 * _2555;
    float _2563 = _2561 * _2556;
    float _2564 = _2561 * _2557;
    float _2565 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2254].xyz));
    float _4656 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _2569 = dot(vec3(_727, _728, _729), vec3(_2562, _2563, _2564));
    float _4667 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _2573 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2562, _2563, _2564));
    float _4678 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2577 = _2554 * _2554;
    float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
    float _2590 = (exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2591 = 1.0 - _2554;
    float _2601 = (0.5 / (((_2490 * ((_2568 * _2591) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2490 * _2591) + _2554) * _2568))) * _2568;
    float _4689 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2603 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
    float _2613 = (((_2590 * cbLight._m0[_2542].x) * _2603) * _2237) + ((((cbLight._m0[_2461].x * _2203) * _2514) * _2528) * _2250);
    float _2614 = (((_2590 * cbLight._m0[_2542].y) * _2603) * _2237) + ((((cbLight._m0[_2461].y * _2205) * _2514) * _2528) * _2250);
    float _2615 = (((_2590 * cbLight._m0[_2542].z) * _2603) * _2237) + ((((cbLight._m0[_2461].z * _2207) * _2514) * _2528) * _2250);
    float _2671;
    float _2673;
    float _2675;
    if (_2290)
    {
        _2671 = _2613;
        _2673 = _2614;
        _2675 = _2615;
    }
    else
    {
        uint _2677 = _2214 + 2u;
        uint _2681 = _2214 + 10u;
        float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2677].w)) * _730) * 0.949999988079071044921875);
        float _2696 = _2695 * _2695;
        float _2697 = cbLight._m0[_2677].x + _804;
        float _2698 = cbLight._m0[_2677].y + _805;
        float _2699 = cbLight._m0[_2677].z + _806;
        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
        float _2704 = _2703 * _2697;
        float _2705 = _2703 * _2698;
        float _2706 = _2703 * _2699;
        float _2707 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2677].xyz));
        float _4700 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2711 = dot(vec3(_727, _728, _729), vec3(_2704, _2705, _2706));
        float _4711 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2715 = dot(vec3(cbLight._m0[_2677].xyz), vec3(_2704, _2705, _2706));
        float _4722 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2719 = _2696 * _2696;
        float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
        float _2732 = (exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2733 = 1.0 - _2696;
        float _2743 = (0.5 / (((_2490 * ((_2710 * _2733) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2490 * _2733) + _2696) * _2710))) * _2710;
        float _4733 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2745 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
        float _2746 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2671 = (((_2732 * cbLight._m0[_2681].x) * _2745) * _2746) + _2613;
        _2673 = (((_2732 * cbLight._m0[_2681].y) * _2745) * _2746) + _2614;
        _2675 = (((_2732 * cbLight._m0[_2681].z) * _2745) * _2746) + _2615;
    }
    float _2777;
    float _2779;
    float _2781;
    if (_2399)
    {
        _2777 = _2671;
        _2779 = _2673;
        _2781 = _2675;
    }
    else
    {
        uint _2788 = _2214 + 3u;
        uint _2792 = _2214 + 11u;
        float _2806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2788].w)) * _730) * 0.949999988079071044921875);
        float _2807 = _2806 * _2806;
        float _2808 = cbLight._m0[_2788].x + _804;
        float _2809 = cbLight._m0[_2788].y + _805;
        float _2810 = cbLight._m0[_2788].z + _806;
        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
        float _2815 = _2814 * _2808;
        float _2816 = _2814 * _2809;
        float _2817 = _2814 * _2810;
        float _2818 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2788].xyz));
        float _4749 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2822 = dot(vec3(_727, _728, _729), vec3(_2815, _2816, _2817));
        float _4760 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2825 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2826 = dot(vec3(cbLight._m0[_2788].xyz), vec3(_2815, _2816, _2817));
        float _4771 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2830 = _2807 * _2807;
        float _2834 = ((_2825 * _2825) * (_2830 + (-1.0))) + 1.0;
        float _2843 = (exp2(log2(1.0 - (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2844 = 1.0 - _2807;
        float _2854 = (0.5 / (((_2490 * ((_2821 * _2844) + _2807)) + 9.9999999392252902907785028219223e-09) + (((_2490 * _2844) + _2807) * _2821))) * _2821;
        float _4782 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2856 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2830 / ((_2834 * _2834) * 3.141590118408203125));
        float _2857 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2777 = (((_2843 * cbLight._m0[_2792].x) * _2856) * _2857) + _2671;
        _2779 = (((_2843 * cbLight._m0[_2792].y) * _2856) * _2857) + _2673;
        _2781 = (((_2843 * cbLight._m0[_2792].z) * _2856) * _2857) + _2675;
    }
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    float _2933;
    if (_2212.y == 0u)
    {
        uvec4 _2878 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2879 = _2878.x;
        uint _2890 = uint((float(_2878.y) * floor(float(uint(cbSceneParam._m0[85u].y * _825) / _2879))) + floor(float(uint(cbSceneParam._m0[85u].x * _824) / _2879)));
        float _2900 = (log2(_1990 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2901 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        uint _2904 = uint(isnan(14.0) ? _2901 : (isnan(_2901) ? 14.0 : min(_2901, 14.0)));
        uvec4 _2909 = texelFetch(g_lightClusterGridBuffer, int(((_2904 << 2u) + (_2890 << 6u)) >> 2u));
        uint _2910 = _2909.x;
        uint _2911 = _2878.z;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        if (((((1u << ((_2911 >> 4u) & 15u)) + 4294967295u) & _2910) == 0u) || ((_2911 & 240u) == 0u))
        {
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
        }
        else
        {
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _2999;
            float _3001;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            uint _3148 = 0u;
            uint _3157;
            bool _3158;
            for (;;)
            {
                _3157 = texelFetch(g_lightClassification, int((((_2904 << 5u) + (_2890 << 9u)) + (_3148 << 2u)) >> 2u)).x;
                _3158 = _3157 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3158)
                {
                    frontier_phi_71_pred = _3147;
                    frontier_phi_71_pred_1 = _3146;
                    frontier_phi_71_pred_2 = _3145;
                    frontier_phi_71_pred_3 = _3144;
                    frontier_phi_71_pred_4 = _3143;
                    frontier_phi_71_pred_5 = _3142;
                }
                else
                {
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    uint _3293;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3145;
                    _3291 = _3146;
                    _3292 = _3147;
                    _3293 = _3157;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    for (;;)
                    {
                        uint _3297 = uint(findLSB(_3293)) + (_3148 << 5u);
                        uint _3294 = (_3293 + 4294967295u) & _3293;
                        uint _3299 = _3297 * 48u;
                        vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 3u)).x));
                        uint _3319 = (_3297 * 48u) + 4u;
                        vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3319)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 3u)).x));
                        uint _3338 = (_3297 * 48u) + 8u;
                        vec3 _3349 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x));
                        float _3353 = _3313.x - _1988;
                        float _3354 = _3313.y - _1989;
                        float _3355 = _3313.z - _1990;
                        float _3356 = dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355));
                        float _3359 = inversesqrt(_3356);
                        float _3360 = _3359 * _3353;
                        float _3361 = _3359 * _3354;
                        float _3362 = _3359 * _3355;
                        float _3363 = dot(vec3(_843, _846, _849), vec3(_3360, _3361, _3362));
                        float _3368 = 1.0 - (_3356 * _3313.w);
                        float _4808 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3369 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3370 = sqrt(_3356) * _3332.w;
                        float _3373 = 1.39999997615814208984375 / (_3370 + 1.39999997615814208984375);
                        float _3374 = _3373 * _3373;
                        float _3377 = ((1.0 - _3374) * _3363) + _3374;
                        float _3380 = _3370 * _3370;
                        float _3384 = ((isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0))) * _3369) / ((_3380 * 0.699999988079071044921875) + 1.0);
                        float _3388 = (-0.0) - _1988;
                        float _3389 = (-0.0) - _1989;
                        float _3390 = (-0.0) - _1990;
                        float _3394 = inversesqrt(dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390)));
                        float _3395 = _3394 * _3388;
                        float _3396 = _3394 * _3389;
                        float _3397 = _3394 * _3390;
                        float _3404 = exp2(log2(1.0 / ((_3380 * 3.5) + 5.0)) * 0.25);
                        float _3405 = 1.0 - _902;
                        float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                        float _3413 = _3412 * _3412;
                        float _3414 = _3413 * _3413;
                        float _3415 = _3395 + _3360;
                        float _3416 = _3396 + _3361;
                        float _3417 = _3397 + _3362;
                        float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                        float _3425 = dot(vec3(_843, _846, _849), vec3(_3395, _3396, _3397));
                        float _4824 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                        float _3429 = dot(vec3(_843, _846, _849), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                        float _4835 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3432 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                        float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                        float _3437 = _3373 * _3413;
                        float _3438 = _3437 * _3437;
                        float _3441 = ((1.0 - _3438) * _3363) + _3438;
                        float _4846 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3442 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                        float _3443 = 1.0 - _3413;
                        float _3453 = (0.5 / (((_3442 * ((_3428 * _3443) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3413) * _3428))) * _3442;
                        float _4857 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3464 = (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) / ((_3436 * _3436) * ((_3380 * 2.1991131305694580078125) + 3.141590118408203125))) * _3369;
                        _3217 = (_3384 * _3332.x) + _3290;
                        _3218 = (_3384 * _3332.y) + _3291;
                        _3219 = (_3384 * _3332.z) + _3292;
                        _3214 = (_3464 * _3349.x) + _3287;
                        _3215 = (_3464 * _3349.y) + _3288;
                        _3216 = (_3464 * _3349.z) + _3289;
                        if (_3294 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3217;
                            _3291 = _3218;
                            _3292 = _3219;
                            _3293 = _3294;
                        }
                    }
                    frontier_phi_71_pred = _3219;
                    frontier_phi_71_pred_1 = _3218;
                    frontier_phi_71_pred_2 = _3217;
                    frontier_phi_71_pred_3 = _3216;
                    frontier_phi_71_pred_4 = _3215;
                    frontier_phi_71_pred_5 = _3214;
                }
                _3001 = frontier_phi_71_pred;
                _2999 = frontier_phi_71_pred_1;
                _2997 = frontier_phi_71_pred_2;
                _2995 = frontier_phi_71_pred_3;
                _2993 = frontier_phi_71_pred_4;
                _2991 = frontier_phi_71_pred_5;
                uint _3149 = _3148 + 1u;
                if (_3149 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3142 = _2991;
                    _3143 = _2993;
                    _3144 = _2995;
                    _3145 = _2997;
                    _3146 = _2999;
                    _3147 = _3001;
                    _3148 = _3149;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
        }
        uvec4 _3004 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3005 = _3004.z;
        uint _3007 = (_3005 >> 8u) & 15u;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        if (((4294967295u << _3007) & _2910) == 0u)
        {
            _3110 = _2990;
            _3112 = _2992;
            _3114 = _2994;
            _3116 = _2996;
            _3118 = _2998;
            _3120 = _3000;
        }
        else
        {
            float _3135 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
            float _3136 = _3135 * _1988;
            float _3137 = _3135 * _1989;
            float _3138 = _3135 * _1990;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3007 < ((_3005 >> 12u) & 15u))
            {
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3119;
                float _3121;
                float _3270 = _2990;
                float _3271 = _2992;
                float _3272 = _2994;
                float _3273 = _2996;
                float _3274 = _2998;
                float _3275 = _3000;
                uint _3276 = _3007;
                uint _3285;
                bool _3286;
                for (;;)
                {
                    _3285 = texelFetch(g_lightClassification, int((((_2904 << 5u) + (_2890 << 9u)) + (_3276 << 2u)) >> 2u)).x;
                    _3286 = _3285 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3286)
                    {
                        frontier_phi_82_pred = _3275;
                        frontier_phi_82_pred_1 = _3274;
                        frontier_phi_82_pred_2 = _3273;
                        frontier_phi_82_pred_3 = _3272;
                        frontier_phi_82_pred_4 = _3271;
                        frontier_phi_82_pred_5 = _3270;
                    }
                    else
                    {
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3491 = _3270;
                        float _3492 = _3271;
                        float _3493 = _3272;
                        float _3494 = _3273;
                        float _3495 = _3274;
                        float _3496 = _3275;
                        uint _3497 = _3285;
                        uint _3498;
                        vec4 _3523;
                        float _3524;
                        vec4 _3539;
                        vec3 _3551;
                        vec4 _3566;
                        vec4 _3581;
                        float _3627;
                        bool _3628;
                        for (;;)
                        {
                            uint _3508 = ((_3276 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3497));
                            _3498 = (_3497 + 4294967295u) & _3497;
                            uint _3510 = _3508 * 40u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            _3524 = _3523.w;
                            uint _3526 = (_3508 * 40u) + 4u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3508 * 40u) + 8u;
                            _3551 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x));
                            uint _3553 = (_3508 * 40u) + 16u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3568 = (_3508 * 40u) + 20u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3508 * 40u) + 24u;
                            vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3602 = (_3508 * 40u) + 28u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            _3627 = fma(_1990, _3615.z, fma(_1989, _3615.y, _3615.x * _1988)) + _3615.w;
                            _3628 = !((fma(_1990, _3596.z, fma(_1989, _3596.y, _3596.x * _1988)) + _3596.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3628)
                            {
                                float _3655 = _3523.x - _1988;
                                float _3656 = _3523.y - _1989;
                                float _3657 = _3523.z - _1990;
                                float _3658 = dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657));
                                float _3661 = inversesqrt(_3658);
                                float _3662 = _3661 * _3655;
                                float _3663 = _3661 * _3656;
                                float _3664 = _3661 * _3657;
                                float _3668 = 1.0 - (_3658 / (_3524 * _3524));
                                float _4868 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3673 = sqrt(_3658) * _3539.w;
                                float _3675 = 1.39999997615814208984375 / (_3673 + 1.39999997615814208984375);
                                float _3676 = _3675 * _3675;
                                float _3679 = ((1.0 - _3676) * dot(vec3(_3662, _3663, _3664), vec3(_843, _846, _849))) + _3676;
                                float _3682 = _3673 * _3673;
                                float _3686 = (fma(_1990, _3566.z, fma(_1989, _3566.y, _3566.x * _1988)) + _3566.w) / _3627;
                                float _3687 = (fma(_1990, _3581.z, fma(_1989, _3581.y, _3581.x * _1988)) + _3581.w) / _3627;
                                float _3691 = 1.0 - dot(vec2(_3686, _3687), vec2(_3686, _3687));
                                float _4884 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3693 = _3692 * (((isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0))) * _3669) / ((_3682 * 0.699999988079071044921875) + 1.0));
                                float _3705 = exp2(log2(1.0 / ((_3682 * 3.5) + 5.0)) * 0.25);
                                float _3706 = 1.0 - _902;
                                float _3713 = sqrt(1.0 - ((1.0 - (_3706 * _3706)) * (1.0 - (_3705 * _3705))));
                                float _3714 = _3713 * _3713;
                                float _3715 = _3714 * _3714;
                                float _3716 = _3662 - _3136;
                                float _3717 = _3663 - _3137;
                                float _3718 = _3664 - _3138;
                                float _3722 = inversesqrt(dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718)));
                                float _3726 = dot(vec3(_843, _846, _849), vec3((-0.0) - _3136, (-0.0) - _3137, (-0.0) - _3138));
                                float _4895 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3730 = dot(vec3(_843, _846, _849), vec3(_3722 * _3716, _3722 * _3717, _3722 * _3718));
                                float _4906 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3733 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3737 = ((_3733 * _3733) * (_3715 + (-1.0))) + 1.0;
                                float _3738 = _3675 * _3714;
                                float _3739 = _3738 * _3738;
                                float _3745 = ((1.0 - _3739) * dot(vec3(_843, _846, _849), vec3(_3662, _3663, _3664))) + _3739;
                                float _4917 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3747 = 1.0 - _3714;
                                float _3757 = (0.5 / (((_3746 * ((_3729 * _3747) + _3714)) + 9.9999999392252902907785028219223e-09) + (((_3746 * _3747) + _3714) * _3729))) * _3746;
                                float _4928 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3767 = (_3692 * _3669) * (((_3715 * 3.1415927410125732421875) * (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0)))) / ((_3737 * _3737) * ((_3682 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3693 * _3539.z;
                                frontier_phi_88_pred_1 = _3693 * _3539.y;
                                frontier_phi_88_pred_2 = _3693 * _3539.x;
                                frontier_phi_88_pred_3 = _3767 * _3551.z;
                                frontier_phi_88_pred_4 = _3767 * _3551.y;
                                frontier_phi_88_pred_5 = _3767 * _3551.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3776 = frontier_phi_88_pred;
                            _3775 = frontier_phi_88_pred_1;
                            _3774 = frontier_phi_88_pred_2;
                            _3773 = frontier_phi_88_pred_3;
                            _3772 = frontier_phi_88_pred_4;
                            _3771 = frontier_phi_88_pred_5;
                            _3481 = _3774 + _3494;
                            _3482 = _3775 + _3495;
                            _3483 = _3776 + _3496;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            if (_3498 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3498;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3483;
                        frontier_phi_82_pred_1 = _3482;
                        frontier_phi_82_pred_2 = _3481;
                        frontier_phi_82_pred_3 = _3480;
                        frontier_phi_82_pred_4 = _3479;
                        frontier_phi_82_pred_5 = _3478;
                    }
                    _3121 = frontier_phi_82_pred;
                    _3119 = frontier_phi_82_pred_1;
                    _3117 = frontier_phi_82_pred_2;
                    _3115 = frontier_phi_82_pred_3;
                    _3113 = frontier_phi_82_pred_4;
                    _3111 = frontier_phi_82_pred_5;
                    uint _3277 = _3276 + 1u;
                    if (_3277 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3270 = _3111;
                        _3271 = _3113;
                        _3272 = _3115;
                        _3273 = _3117;
                        _3274 = _3119;
                        _3275 = _3121;
                        _3276 = _3277;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3117;
                frontier_phi_63_64_ladder_1 = _3121;
                frontier_phi_63_64_ladder_2 = _3119;
                frontier_phi_63_64_ladder_3 = _3115;
                frontier_phi_63_64_ladder_4 = _3113;
                frontier_phi_63_64_ladder_5 = _3111;
            }
            else
            {
                frontier_phi_63_64_ladder = _2996;
                frontier_phi_63_64_ladder_1 = _3000;
                frontier_phi_63_64_ladder_2 = _2998;
                frontier_phi_63_64_ladder_3 = _2994;
                frontier_phi_63_64_ladder_4 = _2992;
                frontier_phi_63_64_ladder_5 = _2990;
            }
            _3110 = frontier_phi_63_64_ladder_5;
            _3112 = frontier_phi_63_64_ladder_4;
            _3114 = frontier_phi_63_64_ladder_3;
            _3116 = frontier_phi_63_64_ladder;
            _3118 = frontier_phi_63_64_ladder_2;
            _3120 = frontier_phi_63_64_ladder_1;
        }
        float _3125 = isnan(1.0) ? _886 : (isnan(_886) ? 1.0 : min(_886, 1.0));
        _2923 = (_3125 * _3116) + _2454;
        _2925 = (_3125 * _3118) + _2456;
        _2927 = (_3125 * _3120) + _2458;
        _2929 = ((_3110 * 0.039999999105930328369140625) * _3125) + _2777;
        _2931 = ((_3112 * 0.039999999105930328369140625) * _3125) + _2779;
        _2933 = ((_3114 * 0.039999999105930328369140625) * _3125) + _2781;
    }
    else
    {
        _2923 = _2454;
        _2925 = _2456;
        _2927 = _2458;
        _2929 = _2777;
        _2931 = _2779;
        _2933 = _2781;
    }
    float _4944 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4955 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4966 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _2950 = ((isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2923 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _886))) + ((_2929 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1723)) * cbPerFrame._m0[3u].x);
    float _2951 = ((isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2925 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _886))) + ((_2931 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1723)) * cbPerFrame._m0[3u].x);
    float _2952 = ((isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * (_2927 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _886))) + ((_2933 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1723)) * cbPerFrame._m0[3u].x);
    uint _2953 = _295 + 6u;
    float _2961 = _824 / cbSceneParam._m0[86u].x;
    float _2962 = _825 / cbSceneParam._m0[86u].y;
    vec4 _2976 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2961, _2962, (log2((isnan(cbSceneParam._m0[77u].w) ? _747 : (isnan(_747) ? cbSceneParam._m0[77u].w : min(_747, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2978 = _2976.x;
    float _2979 = _2976.y;
    float _2980 = _2976.z;
    float _2981 = _2976.w;
    float _3052;
    float _3054;
    float _3056;
    float _3058;
    if (_747 > cbSceneParam._m0[78u].w)
    {
        float _3015 = isnan(_747) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _747 : min(cbSceneParam._m0[80u].w, _747));
        float _3016 = _3015 / _747;
        float _3027 = _3016 * _797;
        float _3028 = _798 * _3016;
        float _3029 = (-0.0) - _3028;
        float _3030 = _3016 * _799;
        float _3032 = (cbSceneParam._m0[77u].w * _3029) / _3015;
        float _3033 = _3032 + cbSceneParam._m0[79u].w;
        float _3034 = cbSceneParam._m0[79u].w - _3028;
        float _3040 = sqrt(((_3027 * _3027) + (_3028 * _3028)) + (_3030 * _3030));
        float _3043 = (1.0 - (cbSceneParam._m0[77u].w / _3015)) * _3040;
        float _3048 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3050 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3227;
        if (abs((_3029 - _3032) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3227 = ((((_3033 > 0.0) ? exp2(_3048 * _3033) : (2.0 - exp2(_3050 * _3033))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3043;
        }
        else
        {
            float _3171 = 1.0 / cbSceneParam._m0[80u].x;
            float _3172 = isnan(_3034) ? _3033 : (isnan(_3033) ? _3034 : max(_3033, _3034));
            float _3173 = isnan(_3034) ? _3033 : (isnan(_3033) ? _3034 : min(_3033, _3034));
            float _3182 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : min(_3172, 0.0));
            float _3183 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : min(_3173, 0.0));
            _3227 = ((abs(_3040 / _3029) * cbSceneParam._m0[80u].y) * ((((_3182 - _3183) * 2.0) - ((exp2(_3048 * (isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0)))) - exp2(_3048 * (isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0))))) * _3171)) - ((exp2(_3050 * _3182) - exp2(_3050 * _3183)) * _3171))) + (_3043 * cbSceneParam._m0[80u].z);
        }
        vec4 _3229 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2961, _2962, 1.0), 0.0);
        float _3238 = exp2((_3227 * (-1.44269502162933349609375)) * (1.0 - _3229.w));
        float _3239 = log2(_3238);
        float _3255 = log2(_2981);
        _3052 = (exp2(_3255 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3239 * cbSceneParam._m0[78u].x)) * _3229.x) / cbSceneParam._m0[78u].x)) + _2978;
        _3054 = (exp2(_3255 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3239 * cbSceneParam._m0[78u].y)) * _3229.y) / cbSceneParam._m0[78u].y)) + _2979;
        _3056 = (exp2(_3255 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3239 * cbSceneParam._m0[78u].z)) * _3229.z) / cbSceneParam._m0[78u].z)) + _2980;
        _3058 = _3238 * _2981;
    }
    else
    {
        _3052 = _2978;
        _3054 = _2979;
        _3056 = _2980;
        _3058 = _2981;
    }
    bool _3265;
    vec4 _3068;
    vec4 _3090;
    float _3092;
    float _3096;
    float _3097;
    float _3098;
    float _3099;
    bool _3109;
    for (;;)
    {
        _3068 = cbMatDynParam._m0[0u];
        float _3070 = roundEven(_3068.y);
        bool _3071 = _3070 == 3.0;
        float _3072 = log2(_3058);
        float _3079 = exp2(_3072 * cbSceneParam._m0[78u].x) * _2950;
        float _3080 = exp2(_3072 * cbSceneParam._m0[78u].y) * _2951;
        float _3081 = exp2(_3072 * cbSceneParam._m0[78u].z) * _2952;
        float _3088 = _813 + (-0.5);
        _3090 = cbMtdParam._m0[1u];
        _3092 = _3090.y * _3088;
        float _3095 = (_3070 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3096 = _3095 * (_3071 ? _3079 : (_3079 + (cbSceneParam._m0[72u].w * _3052)));
        _3097 = _3095 * (_3071 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3054)));
        _3098 = _3095 * (_3071 ? _3081 : (_3081 + (cbSceneParam._m0[72u].w * _3056)));
        _3099 = _3088 * 0.999000012874603271484375;
        _3109 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3109)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3099) < 0.5)
            {
                _3265 = true;
                break;
            }
        }
        uint _3206 = _862 + uint(_3068.w);
        if ((cbInstanceData._m0[_3206].w < 1.0) && ((cbInstanceData._m0[_3206].w + _3099) < 0.5))
        {
            _3265 = true;
            break;
        }
        if ((_3092 + 1.0) < _3090.x)
        {
            _3265 = true;
            break;
        }
        _3265 = false;
        break;
    }
    float _3469;
    if (_3265)
    {
        discard_state = true;
        _3469 = 0.0;
    }
    else
    {
        _3469 = cbInstanceData._m0[_2953].w;
    }
    SV_Target.x = _3096;
    SV_Target.y = _3097;
    SV_Target.z = _3098;
    SV_Target.w = _3469;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2953].w;
    discard_exit();
}


