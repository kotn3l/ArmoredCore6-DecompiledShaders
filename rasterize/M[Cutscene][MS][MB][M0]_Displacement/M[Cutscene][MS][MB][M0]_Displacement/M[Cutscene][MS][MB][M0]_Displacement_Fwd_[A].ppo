#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_22;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_26;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 7, component = 3) in float TEXCOORD_11;
layout(location = 8) in float TEXCOORD_12;
layout(location = 8, component = 1) in float TEXCOORD_13;
layout(location = 8, component = 2) in float TEXCOORD_14;
layout(location = 8, component = 3) in float TEXCOORD_15;
layout(location = 9) in float TEXCOORD_16;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1281;
float _3640;
float _3641;
float _3642;
float _3643;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = 1.0 - (cbMtdParam._m0[17u].w * TEXCOORD_14);
    float _252 = 1.0 - (cbMtdParam._m0[17u].w * TEXCOORD_15);
    float _253 = 1.0 - (cbMtdParam._m0[17u].w * TEXCOORD_16);
    float _3652 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3663 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3674 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    vec4 _276 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _282 = _276.x * cbMtdParam._m0[11u].x;
    float _283 = _276.y * cbMtdParam._m0[11u].y;
    float _284 = _276.z * cbMtdParam._m0[11u].z;
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _323 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _356 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[20u].x * TEXCOORD.z) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((cbMtdParam._m0[20u].y * TEXCOORD.w) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[22u].zw, cbMtdParam._m0[23u].x, 0.0));
    float _387 = ((cbMtdParam._m0[14u].z * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[18u].y) + _370) * cbMtdParam._m0[18u].x))) + 1.0;
    float _3685 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _395 = (_388 * ((_323.x * cbMtdParam._m0[12u].x) - _282)) + _282;
    float _396 = (_388 * ((_323.y * cbMtdParam._m0[12u].y) - _283)) + _283;
    float _397 = (_388 * ((_323.z * cbMtdParam._m0[12u].z) - _284)) + _284;
    vec4 _415 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _310) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _311) + cbTextureTilingScale._m0[7u].w));
    float _423 = ((_395 * 4.55000019073486328125) * cbMtdParam._m0[13u].x) * _415.x;
    float _426 = ((_396 * 4.55000019073486328125) * cbMtdParam._m0[13u].y) * _415.y;
    float _429 = ((_397 * 4.55000019073486328125) * cbMtdParam._m0[13u].z) * _415.z;
    float _450 = ((cbMtdParam._m0[14u].w * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_8) * 2.0) - texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w)).x)) + 1.0;
    float _3696 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _453 = cbMtdParam._m0[17u].z * _451;
    float _470 = sin(cbMtdParam._m0[19u].x);
    float _471 = cos(cbMtdParam._m0[19u].x);
    float _472 = TEXCOORD.x + (-0.5);
    float _474 = _472 + cbMtdParam._m0[19u].z;
    float _475 = TEXCOORD.y + (-0.5);
    float _476 = _475 + cbMtdParam._m0[19u].w;
    vec4 _498 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * (fma(_476, (-0.0) - _470, _474 * _471) + 0.5)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (fma(_476, _471, _474 * _470) + 0.5)) + cbTextureTilingScale._m0[6u].w));
    float _509 = exp2(log2((1.0 - _498.w) * cbMtdParam._m0[18u].z) * cbMtdParam._m0[18u].w);
    float _3707 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _514 = _510 * ((cbMtdParam._m0[9u].x * _395) - _395);
    float _515 = _510 * ((cbMtdParam._m0[9u].y * _396) - _396);
    float _516 = _510 * ((cbMtdParam._m0[9u].z * _397) - _397);
    float _523 = (_514 + _395) - (_453 * _514);
    float _524 = (_515 + _396) - (_453 * _515);
    float _525 = (_516 + _397) - (_453 * _516);
    float _542 = sin(cbMtdParam._m0[16u].x);
    float _543 = cos(cbMtdParam._m0[16u].x);
    float _544 = _472 + cbMtdParam._m0[20u].z;
    float _545 = _475 + cbMtdParam._m0[20u].w;
    vec4 _564 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * (fma(_545, (-0.0) - _542, _544 * _543) + 0.5)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_545, _543, _544 * _542) + 0.5)) + cbTextureTilingScale._m0[1u].w));
    float _574 = exp2(log2((1.0 - _564.w) * cbMtdParam._m0[17u].y) * cbMtdParam._m0[16u].w);
    float _3718 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _594 = (((_523 - _423) + ((((cbMtdParam._m0[10u].x * _395) - _523) * _451) * _575)) * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) + _423;
    float _595 = (((_524 - _426) + ((((cbMtdParam._m0[10u].y * _396) - _524) * _451) * _575)) * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) + _426;
    float _596 = (((_525 - _429) + ((((cbMtdParam._m0[10u].z * _397) - _525) * _451) * _575)) * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) + _429;
    vec4 _608 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    vec4 _625 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _627 = _625.x;
    float _628 = _625.y;
    float _629 = _625.z;
    float _638 = ((_608.z - _629) * _388) + _629;
    float _641 = ((((_608.x - _627) * _388) + _627) * 2.0) + (-1.0);
    float _643 = ((((_608.y - _628) * _388) + _628) * 2.0) + (-1.0);
    float _644 = dot(vec2(_641, _643), vec2(_641, _643));
    float _3729 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _649 = sqrt(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))));
    vec4 _661 = texture(sampler2D(M_Cutscene_MS_MB_M0_Displacement_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w));
    float _677 = (((_661.z - _638) * TEXCOORD_11) * cbMtdParam._m0[15u].z) + _638;
    float _685 = ((_498.z - _677) * cbMtdParam._m0[15u].x) + _677;
    float _695 = cbMtdParam._m0[19u].y - (cbMtdParam._m0[19u].y * _451);
    float _701 = cbMtdParam._m0[17u].x * _451;
    float _708 = ((((((_661.x * 2.0) + (-1.0)) * TEXCOORD_11) * cbMtdParam._m0[15u].y) + _641) + (_695 * ((_498.x * 2.0) + (-1.0)))) + (_701 * ((_564.x * 2.0) + (-1.0)));
    float _709 = ((((((_661.y * 2.0) + (-1.0)) * TEXCOORD_12) * cbMtdParam._m0[15u].y) + _643) + (_695 * ((_498.y * 2.0) + (-1.0)))) + (_701 * ((_564.y * 2.0) + (-1.0)));
    float _712 = fma(_649, _230 * NORMAL.x, fma(_709, _237 * TANGENT.x, (_223 * _215) * _708));
    float _715 = fma(_649, _230 * NORMAL.y, fma(_709, _237 * TANGENT.y, (_223 * _216) * _708));
    float _718 = fma(_649, _230 * NORMAL.z, fma(_709, _237 * TANGENT.z, (_223 * _217) * _708));
    float _722 = inversesqrt(dot(vec3(_712, _715, _718), vec3(_712, _715, _718)));
    float _723 = _722 * _712;
    float _724 = _722 * _715;
    float _725 = _722 * _718;
    float _3740 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _726 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3762 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3773 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _743 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _793 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _783);
    float _794 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _783);
    float _795 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _783);
    float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
    float _800 = _793 * _799;
    float _801 = _794 * _799;
    float _802 = _795 * _799;
    vec4 _807 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _809 = _807.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _962 = sqrt(((_793 * _793) + (_794 * _794)) + (_795 * _795));
        float _968 = (cbMatDynParam._m0[5u].x * _962) + cbMatDynParam._m0[5u].y;
        float _3784 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _973 = (cbMatDynParam._m0[5u].z * _962) + cbMatDynParam._m0[5u].w;
        float _3795 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) - _969)) + _969) < ((_809 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _820 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _821 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _839 = fma(_725, cbSceneParam._m0[5u].z, fma(_724, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _723));
    float _842 = fma(_725, cbSceneParam._m0[6u].z, fma(_724, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _723));
    float _845 = fma(_725, cbSceneParam._m0[7u].z, fma(_724, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _723));
    uint _858 = _291 + 9u;
    uint _859 = _858 + uint(cbMatDynParam._m0[0u].w);
    float _865 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_859].x;
    float _866 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_859].y;
    float _867 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_859].z;
    float _3806 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    vec4 _879 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _820, cbSceneParam._m0[86u].y * _821));
    float _882 = _879.x * TEXCOORD_5.w;
    float _883 = dot(vec3(_723, _724, _725), vec3(_800, _801, _802));
    float _886 = _883 * 2.0;
    float _890 = (_886 * _723) - _800;
    float _891 = (_886 * _724) - _801;
    float _892 = (_886 * _725) - _802;
    float _896 = abs(dot(vec3(_800, _801, _802), vec3(_723, _724, _725)));
    float _3839 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _898 = sqrt(_726);
    float _911 = exp2((_898 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_898 * 3.0));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1280;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1007 = fma(_951, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943));
        float _1011 = fma(_951, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943));
        float _1015 = fma(_951, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943));
        float _1038 = _943 + _723;
        float _1039 = _947 + _724;
        float _1040 = _951 + _725;
        float _1050 = fma(_1040, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1038)) - _1007;
        float _1051 = fma(_1040, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1038)) - _1011;
        float _1052 = fma(_1040, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1038)) - _1015;
        float _1056 = inversesqrt(dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052)));
        float _1069 = ((_1056 * _1050) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1007 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1056 * _1051) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1011 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1056 * _1052) / cbModelParam._m0[34u].z) + ((((((_1015 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        float _1108 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1074.x + (-0.5));
        float _1110 = _1108 * (_1074.y + (-0.5));
        float _1111 = _1108 * (_1074.z + (-0.5));
        float _1118 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1081.x + (-0.5));
        float _1120 = _1118 * (_1081.y + (-0.5));
        float _1121 = _1118 * (_1081.z + (-0.5));
        float _1128 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1088.x + (-0.5));
        float _1130 = _1128 * (_1088.y + (-0.5));
        float _1131 = _1128 * (_1088.z + (-0.5));
        float _1138 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1095.x + (-0.5));
        float _1140 = _1138 * (_1095.y + (-0.5));
        float _1141 = _1138 * (_1095.z + (-0.5));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = _1109 * 0.5;
        float _1146 = _1119 * 0.5;
        float _1147 = _1129 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1162 = (dot(vec3(_723, _724, _725), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1172 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3887 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1174 + 1.0))) + _1179) * _1142;
        float _1189 = _1110 * 0.5;
        float _1190 = _1120 * 0.5;
        float _1191 = _1130 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_723, _724, _725), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3920 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1216 + 1.0))) + _1221) * _1143;
        float _1231 = _1111 * 0.5;
        float _1232 = _1121 * 0.5;
        float _1233 = _1131 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_723, _724, _725), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3953 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1258 + 1.0))) + _1263) * _1144;
        _1280 = _1111;
        _1282 = _1110;
        _1283 = _1109;
        _1284 = _1121;
        _1285 = _1120;
        _1286 = _1119;
        _1287 = _1131;
        _1288 = _1130;
        _1289 = _1129;
        _1290 = _1144;
        _1291 = _1143;
        _1292 = _1142;
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
    }
    else
    {
        _1280 = _1281;
        _1282 = _1281;
        _1283 = _1281;
        _1284 = _1281;
        _1285 = _1281;
        _1286 = _1281;
        _1287 = _1281;
        _1288 = _1281;
        _1289 = _1281;
        _1290 = _1281;
        _1291 = _1281;
        _1292 = _1281;
        _1293 = 0.0;
        _1294 = 0.0;
        _1295 = 0.0;
    }
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1324 = fma(_951, cbModelParam._m0[30u].z, fma(_947, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943));
        float _1328 = fma(_951, cbModelParam._m0[31u].z, fma(_947, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943));
        float _1332 = fma(_951, cbModelParam._m0[32u].z, fma(_947, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943));
        float _1355 = _943 + _723;
        float _1356 = _947 + _724;
        float _1357 = _951 + _725;
        float _1367 = fma(_1357, cbModelParam._m0[30u].z, fma(_1356, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1355)) - _1324;
        float _1368 = fma(_1357, cbModelParam._m0[31u].z, fma(_1356, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1355)) - _1328;
        float _1369 = fma(_1357, cbModelParam._m0[32u].z, fma(_1356, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1355)) - _1332;
        float _1373 = inversesqrt(dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369)));
        float _1386 = ((_1373 * _1367) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1324 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1373 * _1368) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1328 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1373 * _1369) / cbModelParam._m0[35u].z) + ((((((_1332 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        float _1423 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1390.x + (-0.5));
        float _1425 = _1423 * (_1390.y + (-0.5));
        float _1426 = _1423 * (_1390.z + (-0.5));
        float _1433 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1397.x + (-0.5));
        float _1435 = _1433 * (_1397.y + (-0.5));
        float _1436 = _1433 * (_1397.z + (-0.5));
        float _1443 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1404.x + (-0.5));
        float _1445 = _1443 * (_1404.y + (-0.5));
        float _1446 = _1443 * (_1404.z + (-0.5));
        float _1453 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1411.x + (-0.5));
        float _1455 = _1453 * (_1411.y + (-0.5));
        float _1456 = _1453 * (_1411.z + (-0.5));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = _1424 * 0.5;
        float _1461 = _1434 * 0.5;
        float _1462 = _1444 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_723, _724, _725), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4016 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1487 + 1.0))) + _1492) * _1457;
        float _1502 = _1425 * 0.5;
        float _1503 = _1435 * 0.5;
        float _1504 = _1445 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_723, _724, _725), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4049 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1529 + 1.0))) + _1534) * _1458;
        float _1544 = _1426 * 0.5;
        float _1545 = _1436 * 0.5;
        float _1546 = _1446 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_723, _724, _725), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4082 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1571 + 1.0))) + _1576) * _1459;
        _1593 = _1426;
        _1594 = _1425;
        _1595 = _1424;
        _1596 = _1436;
        _1597 = _1435;
        _1598 = _1434;
        _1599 = _1446;
        _1600 = _1445;
        _1601 = _1444;
        _1602 = _1459;
        _1603 = _1458;
        _1604 = _1457;
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
    }
    else
    {
        _1593 = _1281;
        _1594 = _1281;
        _1595 = _1281;
        _1596 = _1281;
        _1597 = _1281;
        _1598 = _1281;
        _1599 = _1281;
        _1600 = _1281;
        _1601 = _1281;
        _1602 = _1281;
        _1603 = _1281;
        _1604 = _1281;
        _1605 = 0.0;
        _1606 = 0.0;
        _1607 = 0.0;
    }
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1293)) + _1293;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1294)) + _1294;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1295)) + _1295;
    float _1640 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1617));
    float _1661 = _890 * 0.5;
    float _1662 = _891 * 0.5;
    float _1663 = _892 * 0.5;
    float _1664 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1667 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1670 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1704;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1677 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1280, _1284, _1287, _1290));
        float _1681 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1685 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1692 = dot(vec4(cbModelParam._m0[39u]), vec4(_1661, _1662, _1663, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1715;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1706 = dot(vec4(cbModelParam._m0[40u]), vec4(_1661, _1662, _1663, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1719 = (_1715 * cbModelParam._m0[1u].x) + (_1704 * (1.0 - cbModelParam._m0[1u].x));
    float _1729 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _726);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1729 : min(cbModelParam._m0[25u].z, _1729));
    float _1810;
    float _1812;
    float _1814;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1777 = fma(_951, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943)) + cbModelParam._m0[13u].w;
        float _1781 = fma(_951, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943)) + cbModelParam._m0[14u].w;
        float _1785 = fma(_951, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943)) + cbModelParam._m0[15u].w;
        float _1788 = fma(_892, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890));
        float _1791 = fma(_892, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890));
        float _1794 = fma(_892, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890));
        float _1822;
        if (_1788 > 0.0)
        {
            _1822 = abs((1.0 - _1777) / _1788);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1777 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1822 = frontier_phi_17_15_ladder;
        }
        float _2023;
        if (_1791 > 0.0)
        {
            _2023 = abs((1.0 - _1781) / _1791);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1781 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2023 = frontier_phi_26_22_ladder;
        }
        float _2266;
        if (_1794 > 0.0)
        {
            _2266 = abs((1.0 - _1785) / _1794);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1785 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2266 = frontier_phi_38_33_ladder;
        }
        float _2268 = isnan(_2023) ? _1822 : (isnan(_1822) ? _2023 : min(_1822, _2023));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1788) + _1777;
        float _2274 = (_2269 * _1791) + _1781;
        float _2275 = (_2269 * _1794) + _1785;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2278 = (-1.0) - _2276;
        float _2280 = _2276 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2275 > _2280) || ((_2275 < _2278) || ((_2274 > _2280) || ((_2274 < _2278) || ((_2273 < _2278) || (_2273 > _2280))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2399 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2275, cbModelParam._m0[9u].z, fma(_2274, cbModelParam._m0[9u].y, _2273 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2275, cbModelParam._m0[10u].z, fma(_2274, cbModelParam._m0[10u].y, _2273 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2275, cbModelParam._m0[11u].z, fma(_2274, cbModelParam._m0[11u].y, _2273 * cbModelParam._m0[11u].x))), _1730);
            frontier_phi_16_38_ladder = _2399.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2399.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2399.x * cbModelParam._m0[1u].y;
        }
        _1810 = frontier_phi_16_38_ladder_2;
        _1812 = frontier_phi_16_38_ladder_1;
        _1814 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1798 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_890, _891, _892), _1730);
        _1810 = _1798.x * cbModelParam._m0[1u].y;
        _1812 = _1798.y * cbModelParam._m0[1u].y;
        _1814 = _1798.z * cbModelParam._m0[1u].y;
    }
    float _1818 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _726);
    float _1819 = isnan(_1818) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1818 : min(cbModelParam._m0[25u].w, _1818));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1873 = fma(_951, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943)) + cbModelParam._m0[21u].w;
        float _1877 = fma(_951, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943)) + cbModelParam._m0[22u].w;
        float _1881 = fma(_951, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943)) + cbModelParam._m0[23u].w;
        float _1884 = fma(_892, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890));
        float _1887 = fma(_892, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890));
        float _1890 = fma(_892, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890));
        float _2028;
        if (_1884 > 0.0)
        {
            _2028 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2028 = frontier_phi_28_24_ladder;
        }
        float _2293;
        if (_1887 > 0.0)
        {
            _2293 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2293 = frontier_phi_40_35_ladder;
        }
        float _2498;
        if (_1890 > 0.0)
        {
            _2498 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2498 = frontier_phi_49_46_ladder;
        }
        float _2500 = isnan(_2293) ? _2028 : (isnan(_2028) ? _2293 : min(_2028, _2293));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _1884) + _1873;
        float _2506 = (_2501 * _1887) + _1877;
        float _2507 = (_2501 * _1890) + _1881;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2509 = (-1.0) - _2508;
        float _2511 = _2508 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2507 > _2511) || ((_2507 < _2509) || ((_2506 > _2511) || ((_2506 < _2509) || ((_2505 < _2509) || (_2505 > _2511))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2706 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2507, cbModelParam._m0[17u].z, fma(_2506, cbModelParam._m0[17u].y, _2505 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2507, cbModelParam._m0[18u].z, fma(_2506, cbModelParam._m0[18u].y, _2505 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2507, cbModelParam._m0[19u].z, fma(_2506, cbModelParam._m0[19u].y, _2505 * cbModelParam._m0[19u].x))), _1819);
            frontier_phi_25_49_ladder = _2706.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2706.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2706.x * cbModelParam._m0[1u].z;
        }
        _1909 = frontier_phi_25_49_ladder_2;
        _1911 = frontier_phi_25_49_ladder_1;
        _1913 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_890, _891, _892), _1819);
        _1909 = _1893.x * cbModelParam._m0[1u].z;
        _1911 = _1893.y * cbModelParam._m0[1u].z;
        _1913 = _1893.z * cbModelParam._m0[1u].z;
    }
    float _1925 = ((((1.0 - _911) * ((_898 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_911 * _898)) * _882;
    float _1926 = _1925 * ((cbModelParam._m0[1u].w * (_1909 - _1810)) + _1810);
    float _1927 = _1925 * ((cbModelParam._m0[1u].w * (_1911 - _1812)) + _1812);
    float _1928 = _1925 * ((cbModelParam._m0[1u].w * (_1913 - _1814)) + _1814);
    float _1931 = fma(_1928, cbSceneParam._m0[89u].z, fma(_1927, cbSceneParam._m0[89u].y, _1926 * cbSceneParam._m0[89u].x));
    float _1934 = fma(_1928, cbSceneParam._m0[90u].z, fma(_1927, cbSceneParam._m0[90u].y, _1926 * cbSceneParam._m0[90u].x));
    float _1937 = fma(_1928, cbSceneParam._m0[91u].z, fma(_1927, cbSceneParam._m0[91u].y, _1926 * cbSceneParam._m0[91u].x));
    uvec4 _1947 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _1949 = _1947.x * 14u;
    uint _1950 = _1949 + 13u;
    float _1957 = _882 + (-1.0);
    float _1962 = (cbLight._m0[_1950].x * _1957) + 1.0;
    float _1963 = (cbLight._m0[_1950].y * _1957) + 1.0;
    float _1964 = (cbLight._m0[_1950].z * _1957) + 1.0;
    float _1965 = (cbLight._m0[_1950].w * _1957) + 1.0;
    uint _1966 = _1949 + 5u;
    float _1972 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
    uint _1976 = _1949 + 4u;
    float _1982 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
    uint _1986 = _1949 | 1u;
    float _1997 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_723, _724, _725));
    float _2000 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_723, _724, _725));
    float _4218 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _4229 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2005 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _2007 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _2014 = ((cbLight._m0[_1966].x * _1972) * _2007) + ((cbLight._m0[_1976].x * _1982) * _2005);
    float _2015 = ((_1972 * cbLight._m0[_1966].y) * _2007) + ((_1982 * cbLight._m0[_1976].y) * _2005);
    float _2016 = ((_1972 * cbLight._m0[_1966].z) * _2007) + ((_1982 * cbLight._m0[_1976].z) * _2005);
    uvec4 _2020 = floatBitsToUint(cbLight._m0[_1949 + 12u]);
    bool _2022 = _2020.x == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_2022)
    {
        _2033 = _2014;
        _2035 = _2015;
        _2037 = _2016;
    }
    else
    {
        uint _2041 = _1949 + 6u;
        float _2057 = (dot(vec3(cbLight._m0[_1949 + 2u].xyz), vec3(_723, _724, _725)) * 0.5) + 0.5;
        float _2058 = _2057 * _2057;
        float _4240 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2059 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2060 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2033 = (((cbLight._m0[_2041].x * 0.3183098733425140380859375) * _2059) * _2060) + _2014;
        _2035 = (((cbLight._m0[_2041].y * 0.3183098733425140380859375) * _2059) * _2060) + _2015;
        _2037 = (((cbLight._m0[_2041].z * 0.3183098733425140380859375) * _2059) * _2060) + _2016;
    }
    bool _2040 = _2020.y == 0u;
    float _2078;
    float _2080;
    float _2082;
    if (_2040)
    {
        _2078 = _2033;
        _2080 = _2035;
        _2082 = _2037;
    }
    else
    {
        uint _2237 = _1949 + 7u;
        float _2253 = (dot(vec3(cbLight._m0[_1949 + 3u].xyz), vec3(_723, _724, _725)) * 0.5) + 0.5;
        float _2254 = _2253 * _2253;
        float _4256 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2255 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2256 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2078 = (((cbLight._m0[_2237].x * 0.3183098733425140380859375) * _2255) * _2256) + _2033;
        _2080 = (((cbLight._m0[_2237].y * 0.3183098733425140380859375) * _2255) * _2256) + _2035;
        _2082 = (((cbLight._m0[_2237].z * 0.3183098733425140380859375) * _2255) * _2256) + _2037;
    }
    uint _2085 = _1949 + 8u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _726) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1949].x + _800;
    float _2101 = cbLight._m0[_1949].y + _801;
    float _2102 = cbLight._m0[_1949].z + _802;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_1949].xyz));
    float _4272 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _2114 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2115 = dot(vec3(_723, _724, _725), vec3(_2107, _2108, _2109));
    float _4294 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2119 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_2107, _2108, _2109));
    float _4305 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2123 = _2099 * _2099;
    float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
    float _2138 = (exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2139 = 1.0 - _2099;
    float _2150 = (0.5 / (((_2114 * ((_2113 * _2139) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2139) + _2099) * _2113))) * _2113;
    float _4316 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
    uint _2163 = _1949 + 9u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _726) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_1986].x + _800;
    float _2177 = cbLight._m0[_1986].y + _801;
    float _2178 = cbLight._m0[_1986].z + _802;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_1986].xyz));
    float _4327 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2190 = dot(vec3(_723, _724, _725), vec3(_2183, _2184, _2185));
    float _4338 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2183, _2184, _2185));
    float _4349 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2175 * _2175;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2211 = (exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2212 = 1.0 - _2175;
    float _2222 = (0.5 / (((_2114 * ((_2189 * _2212) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2212) + _2175) * _2189))) * _2189;
    float _4360 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2224 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    float _2234 = (((_2211 * cbLight._m0[_2163].x) * _2224) * _1972) + (((_2138 * cbLight._m0[_2085].x) * _2152) * _1982);
    float _2235 = (((_2211 * cbLight._m0[_2163].y) * _2224) * _1972) + (((_2138 * cbLight._m0[_2085].y) * _2152) * _1982);
    float _2236 = (((_2211 * cbLight._m0[_2163].z) * _2224) * _1972) + (((_2138 * cbLight._m0[_2085].z) * _2152) * _1982);
    float _2298;
    float _2300;
    float _2302;
    if (_2022)
    {
        _2298 = _2234;
        _2300 = _2235;
        _2302 = _2236;
    }
    else
    {
        uint _2304 = _1949 + 2u;
        uint _2308 = _1949 + 10u;
        float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _726) * 0.949999988079071044921875);
        float _2323 = _2322 * _2322;
        float _2324 = cbLight._m0[_2304].x + _800;
        float _2325 = cbLight._m0[_2304].y + _801;
        float _2326 = cbLight._m0[_2304].z + _802;
        float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
        float _2331 = _2330 * _2324;
        float _2332 = _2330 * _2325;
        float _2333 = _2330 * _2326;
        float _2334 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2304].xyz));
        float _4371 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2338 = dot(vec3(_723, _724, _725), vec3(_2331, _2332, _2333));
        float _4382 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2342 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2331, _2332, _2333));
        float _4393 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2346 = _2323 * _2323;
        float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
        float _2359 = (exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2360 = 1.0 - _2323;
        float _2370 = (0.5 / (((_2114 * ((_2337 * _2360) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2360) + _2323) * _2337))) * _2337;
        float _4404 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2372 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
        float _2373 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2298 = (((_2359 * cbLight._m0[_2308].x) * _2372) * _2373) + _2234;
        _2300 = (((_2359 * cbLight._m0[_2308].y) * _2372) * _2373) + _2235;
        _2302 = (((_2359 * cbLight._m0[_2308].z) * _2372) * _2373) + _2236;
    }
    float _2408;
    float _2410;
    float _2412;
    if (_2040)
    {
        _2408 = _2298;
        _2410 = _2300;
        _2412 = _2302;
    }
    else
    {
        uint _2419 = _1949 + 3u;
        uint _2423 = _1949 + 11u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _726) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _800;
        float _2440 = cbLight._m0[_2419].y + _801;
        float _2441 = cbLight._m0[_2419].z + _802;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2419].xyz));
        float _4420 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2453 = dot(vec3(_723, _724, _725), vec3(_2446, _2447, _2448));
        float _4431 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4442 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2474 = (exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2475 = 1.0 - _2438;
        float _2485 = (0.5 / (((_2114 * ((_2452 * _2475) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2475) + _2438) * _2452))) * _2452;
        float _4453 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2408 = (((_2474 * cbLight._m0[_2423].x) * _2487) * _2488) + _2298;
        _2410 = (((_2474 * cbLight._m0[_2423].y) * _2487) * _2488) + _2300;
        _2412 = (((_2474 * cbLight._m0[_2423].z) * _2487) * _2488) + _2302;
    }
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    if (_1947.y == 0u)
    {
        float _2563 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2563;
        float _2565 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2563;
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2563;
        uvec4 _2578 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2579 = _2578.x;
        uint _2590 = uint((float(_2578.y) * floor(float(uint(cbSceneParam._m0[85u].y * _821) / _2579))) + floor(float(uint(cbSceneParam._m0[85u].x * _820) / _2579)));
        float _2600 = (log2(_2566 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2601 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        uint _2604 = uint(isnan(14.0) ? _2601 : (isnan(_2601) ? 14.0 : min(_2601, 14.0)));
        uvec4 _2609 = texelFetch(g_lightClusterGridBuffer, int(((_2604 << 2u) + (_2590 << 6u)) >> 2u));
        uint _2610 = _2609.x;
        uint _2611 = _2578.z;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((((1u << ((_2611 >> 4u) & 15u)) + 4294967295u) & _2610) == 0u) || ((_2611 & 240u) == 0u))
        {
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
        }
        else
        {
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            uint _2869 = 0u;
            uint _2878;
            bool _2879;
            for (;;)
            {
                _2878 = texelFetch(g_lightClassification, int((((_2604 << 5u) + (_2590 << 9u)) + (_2869 << 2u)) >> 2u)).x;
                _2879 = _2878 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2879)
                {
                    frontier_phi_66_pred = _2863;
                    frontier_phi_66_pred_1 = _2868;
                    frontier_phi_66_pred_2 = _2867;
                    frontier_phi_66_pred_3 = _2866;
                    frontier_phi_66_pred_4 = _2865;
                    frontier_phi_66_pred_5 = _2864;
                }
                else
                {
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    uint _3014;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2878;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    for (;;)
                    {
                        uint _3018 = uint(findLSB(_3014)) + (_2869 << 5u);
                        uint _3015 = (_3014 + 4294967295u) & _3014;
                        uint _3020 = _3018 * 48u;
                        vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 3u)).x));
                        uint _3040 = (_3018 * 48u) + 4u;
                        vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 3u)).x));
                        uint _3059 = (_3018 * 48u) + 8u;
                        vec3 _3070 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x));
                        float _3074 = _3034.x - _2564;
                        float _3075 = _3034.y - _2565;
                        float _3076 = _3034.z - _2566;
                        float _3077 = dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076));
                        float _3080 = inversesqrt(_3077);
                        float _3081 = _3080 * _3074;
                        float _3082 = _3080 * _3075;
                        float _3083 = _3080 * _3076;
                        float _3084 = dot(vec3(_839, _842, _845), vec3(_3081, _3082, _3083));
                        float _3089 = 1.0 - (_3077 * _3034.w);
                        float _4479 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3090 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3091 = sqrt(_3077) * _3053.w;
                        float _3094 = 1.39999997615814208984375 / (_3091 + 1.39999997615814208984375);
                        float _3095 = _3094 * _3094;
                        float _3098 = ((1.0 - _3095) * _3084) + _3095;
                        float _3101 = _3091 * _3091;
                        float _3105 = ((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3090) / ((_3101 * 0.699999988079071044921875) + 1.0);
                        float _3109 = (-0.0) - _2564;
                        float _3110 = (-0.0) - _2565;
                        float _3111 = (-0.0) - _2566;
                        float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                        float _3116 = _3115 * _3109;
                        float _3117 = _3115 * _3110;
                        float _3118 = _3115 * _3111;
                        float _3126 = exp2(log2(1.0 / ((_3101 * 3.5) + 5.0)) * 0.25);
                        float _3127 = 1.0 - _898;
                        float _3134 = sqrt(1.0 - ((1.0 - (_3127 * _3127)) * (1.0 - (_3126 * _3126))));
                        float _3135 = _3134 * _3134;
                        float _3136 = _3135 * _3135;
                        float _3137 = _3116 + _3081;
                        float _3138 = _3117 + _3082;
                        float _3139 = _3118 + _3083;
                        float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                        float _3147 = dot(vec3(_839, _842, _845), vec3(_3116, _3117, _3118));
                        float _4495 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3150 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3151 = dot(vec3(_839, _842, _845), vec3(_3143 * _3137, _3143 * _3138, _3143 * _3139));
                        float _4506 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3154 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3158 = ((_3154 * _3154) * (_3136 + (-1.0))) + 1.0;
                        float _3159 = _3094 * _3135;
                        float _3160 = _3159 * _3159;
                        float _3163 = ((1.0 - _3160) * _3084) + _3160;
                        float _4517 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3164 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3165 = 1.0 - _3135;
                        float _3175 = (0.5 / (((_3164 * ((_3150 * _3165) + _3135)) + 9.9999999392252902907785028219223e-09) + (((_3164 * _3165) + _3135) * _3150))) * _3164;
                        float _4528 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3186 = (((_3136 * 3.1415927410125732421875) * (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) / ((_3158 * _3158) * ((_3101 * 2.1991131305694580078125) + 3.141590118408203125))) * _3090;
                        _2938 = (_3105 * _3053.x) + _3011;
                        _2939 = (_3105 * _3053.y) + _3012;
                        _2940 = (_3105 * _3053.z) + _3013;
                        _2935 = (_3186 * _3070.x) + _3008;
                        _2936 = (_3186 * _3070.y) + _3009;
                        _2937 = (_3186 * _3070.z) + _3010;
                        if (_3015 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _3015;
                        }
                    }
                    frontier_phi_66_pred = _2935;
                    frontier_phi_66_pred_1 = _2940;
                    frontier_phi_66_pred_2 = _2939;
                    frontier_phi_66_pred_3 = _2938;
                    frontier_phi_66_pred_4 = _2937;
                    frontier_phi_66_pred_5 = _2936;
                }
                _2712 = frontier_phi_66_pred;
                _2722 = frontier_phi_66_pred_1;
                _2720 = frontier_phi_66_pred_2;
                _2718 = frontier_phi_66_pred_3;
                _2716 = frontier_phi_66_pred_4;
                _2714 = frontier_phi_66_pred_5;
                uint _2870 = _2869 + 1u;
                if (_2870 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2863 = _2712;
                    _2864 = _2714;
                    _2865 = _2716;
                    _2866 = _2718;
                    _2867 = _2720;
                    _2868 = _2722;
                    _2869 = _2870;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
        }
        uvec4 _2725 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2726 = _2725.z;
        uint _2728 = (_2726 >> 8u) & 15u;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        if (((4294967295u << _2728) & _2610) == 0u)
        {
            _2831 = _2711;
            _2833 = _2713;
            _2835 = _2715;
            _2837 = _2717;
            _2839 = _2719;
            _2841 = _2721;
        }
        else
        {
            float _2856 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
            float _2857 = _2856 * _2564;
            float _2858 = _2856 * _2565;
            float _2859 = _2856 * _2566;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2728 < ((_2726 >> 12u) & 15u))
            {
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2991 = _2711;
                float _2992 = _2713;
                float _2993 = _2715;
                float _2994 = _2717;
                float _2995 = _2719;
                float _2996 = _2721;
                uint _2997 = _2728;
                uint _3006;
                bool _3007;
                for (;;)
                {
                    _3006 = texelFetch(g_lightClassification, int((((_2604 << 5u) + (_2590 << 9u)) + (_2997 << 2u)) >> 2u)).x;
                    _3007 = _3006 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3007)
                    {
                        frontier_phi_77_pred = _2996;
                        frontier_phi_77_pred_1 = _2995;
                        frontier_phi_77_pred_2 = _2994;
                        frontier_phi_77_pred_3 = _2993;
                        frontier_phi_77_pred_4 = _2992;
                        frontier_phi_77_pred_5 = _2991;
                    }
                    else
                    {
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3213 = _2991;
                        float _3214 = _2992;
                        float _3215 = _2993;
                        float _3216 = _2994;
                        float _3217 = _2995;
                        float _3218 = _2996;
                        uint _3219 = _3006;
                        uint _3220;
                        vec4 _3245;
                        float _3246;
                        vec4 _3261;
                        vec3 _3273;
                        vec4 _3288;
                        vec4 _3303;
                        float _3349;
                        bool _3350;
                        for (;;)
                        {
                            uint _3230 = ((_2997 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3219));
                            _3220 = (_3219 + 4294967295u) & _3219;
                            uint _3232 = _3230 * 40u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            _3246 = _3245.w;
                            uint _3248 = (_3230 * 40u) + 4u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3263 = (_3230 * 40u) + 8u;
                            _3273 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x));
                            uint _3275 = (_3230 * 40u) + 16u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            uint _3290 = (_3230 * 40u) + 20u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3305 = (_3230 * 40u) + 24u;
                            vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3324 = (_3230 * 40u) + 28u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            _3349 = fma(_2566, _3337.z, fma(_2565, _3337.y, _3337.x * _2564)) + _3337.w;
                            _3350 = !((fma(_2566, _3318.z, fma(_2565, _3318.y, _3318.x * _2564)) + _3318.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3350)
                            {
                                float _3377 = _3245.x - _2564;
                                float _3378 = _3245.y - _2565;
                                float _3379 = _3245.z - _2566;
                                float _3380 = dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379));
                                float _3383 = inversesqrt(_3380);
                                float _3384 = _3383 * _3377;
                                float _3385 = _3383 * _3378;
                                float _3386 = _3383 * _3379;
                                float _3390 = 1.0 - (_3380 / (_3246 * _3246));
                                float _4539 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3395 = sqrt(_3380) * _3261.w;
                                float _3397 = 1.39999997615814208984375 / (_3395 + 1.39999997615814208984375);
                                float _3398 = _3397 * _3397;
                                float _3401 = ((1.0 - _3398) * dot(vec3(_3384, _3385, _3386), vec3(_839, _842, _845))) + _3398;
                                float _3404 = _3395 * _3395;
                                float _3408 = (fma(_2566, _3288.z, fma(_2565, _3288.y, _3288.x * _2564)) + _3288.w) / _3349;
                                float _3409 = (fma(_2566, _3303.z, fma(_2565, _3303.y, _3303.x * _2564)) + _3303.w) / _3349;
                                float _3413 = 1.0 - dot(vec2(_3408, _3409), vec2(_3408, _3409));
                                float _4555 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3414 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3415 = _3414 * (((isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0))) * _3391) / ((_3404 * 0.699999988079071044921875) + 1.0));
                                float _3427 = exp2(log2(1.0 / ((_3404 * 3.5) + 5.0)) * 0.25);
                                float _3428 = 1.0 - _898;
                                float _3435 = sqrt(1.0 - ((1.0 - (_3428 * _3428)) * (1.0 - (_3427 * _3427))));
                                float _3436 = _3435 * _3435;
                                float _3437 = _3436 * _3436;
                                float _3438 = _3384 - _2857;
                                float _3439 = _3385 - _2858;
                                float _3440 = _3386 - _2859;
                                float _3444 = inversesqrt(dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440)));
                                float _3448 = dot(vec3(_839, _842, _845), vec3((-0.0) - _2857, (-0.0) - _2858, (-0.0) - _2859));
                                float _4566 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3451 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3452 = dot(vec3(_839, _842, _845), vec3(_3444 * _3438, _3444 * _3439, _3444 * _3440));
                                float _4577 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3455 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3459 = ((_3455 * _3455) * (_3437 + (-1.0))) + 1.0;
                                float _3460 = _3397 * _3436;
                                float _3461 = _3460 * _3460;
                                float _3467 = ((1.0 - _3461) * dot(vec3(_839, _842, _845), vec3(_3384, _3385, _3386))) + _3461;
                                float _4588 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3469 = 1.0 - _3436;
                                float _3479 = (0.5 / (((_3468 * ((_3451 * _3469) + _3436)) + 9.9999999392252902907785028219223e-09) + (((_3468 * _3469) + _3436) * _3451))) * _3468;
                                float _4599 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3489 = (_3414 * _3391) * (((_3437 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3459 * _3459) * ((_3404 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3415 * _3261.y;
                                frontier_phi_83_pred_1 = _3415 * _3261.x;
                                frontier_phi_83_pred_2 = _3489 * _3273.z;
                                frontier_phi_83_pred_3 = _3489 * _3273.y;
                                frontier_phi_83_pred_4 = _3489 * _3273.x;
                                frontier_phi_83_pred_5 = _3415 * _3261.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3497 = frontier_phi_83_pred;
                            _3496 = frontier_phi_83_pred_1;
                            _3495 = frontier_phi_83_pred_2;
                            _3494 = frontier_phi_83_pred_3;
                            _3493 = frontier_phi_83_pred_4;
                            _3498 = frontier_phi_83_pred_5;
                            _3203 = _3496 + _3216;
                            _3204 = _3497 + _3217;
                            _3205 = _3498 + _3218;
                            _3200 = _3493 + _3213;
                            _3201 = _3494 + _3214;
                            _3202 = _3495 + _3215;
                            if (_3220 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3220;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3205;
                        frontier_phi_77_pred_1 = _3204;
                        frontier_phi_77_pred_2 = _3203;
                        frontier_phi_77_pred_3 = _3202;
                        frontier_phi_77_pred_4 = _3201;
                        frontier_phi_77_pred_5 = _3200;
                    }
                    _2842 = frontier_phi_77_pred;
                    _2840 = frontier_phi_77_pred_1;
                    _2838 = frontier_phi_77_pred_2;
                    _2836 = frontier_phi_77_pred_3;
                    _2834 = frontier_phi_77_pred_4;
                    _2832 = frontier_phi_77_pred_5;
                    uint _2998 = _2997 + 1u;
                    if (_2998 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2991 = _2832;
                        _2992 = _2834;
                        _2993 = _2836;
                        _2994 = _2838;
                        _2995 = _2840;
                        _2996 = _2842;
                        _2997 = _2998;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2836;
                frontier_phi_58_59_ladder_1 = _2842;
                frontier_phi_58_59_ladder_2 = _2840;
                frontier_phi_58_59_ladder_3 = _2838;
                frontier_phi_58_59_ladder_4 = _2834;
                frontier_phi_58_59_ladder_5 = _2832;
            }
            else
            {
                frontier_phi_58_59_ladder = _2715;
                frontier_phi_58_59_ladder_1 = _2721;
                frontier_phi_58_59_ladder_2 = _2719;
                frontier_phi_58_59_ladder_3 = _2717;
                frontier_phi_58_59_ladder_4 = _2713;
                frontier_phi_58_59_ladder_5 = _2711;
            }
            _2831 = frontier_phi_58_59_ladder_5;
            _2833 = frontier_phi_58_59_ladder_4;
            _2835 = frontier_phi_58_59_ladder;
            _2837 = frontier_phi_58_59_ladder_3;
            _2839 = frontier_phi_58_59_ladder_2;
            _2841 = frontier_phi_58_59_ladder_1;
        }
        float _2846 = isnan(1.0) ? _882 : (isnan(_882) ? 1.0 : min(_882, 1.0));
        _2623 = (_2846 * _2837) + _2078;
        _2625 = (_2846 * _2839) + _2080;
        _2627 = (_2846 * _2841) + _2082;
        _2629 = ((_2831 * 0.039999999105930328369140625) * _2846) + _2408;
        _2631 = ((_2833 * 0.039999999105930328369140625) * _2846) + _2410;
        _2633 = ((_2835 * 0.039999999105930328369140625) * _2846) + _2412;
    }
    else
    {
        _2623 = _2078;
        _2625 = _2080;
        _2627 = _2082;
        _2629 = _2408;
        _2631 = _2410;
        _2633 = _2412;
    }
    float _4615 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4626 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4637 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _2650 = ((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2623 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _882))) + ((_2629 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    float _2651 = ((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2625 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _882))) + ((_2631 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    float _2652 = ((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2627 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _882))) + ((_2633 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    uint _2653 = _291 + 6u;
    float _2661 = _820 / cbSceneParam._m0[86u].x;
    float _2662 = _821 / cbSceneParam._m0[86u].y;
    vec4 _2676 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2661, _2662, (log2((isnan(cbSceneParam._m0[77u].w) ? _743 : (isnan(_743) ? cbSceneParam._m0[77u].w : min(_743, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2678 = _2676.x;
    float _2679 = _2676.y;
    float _2680 = _2676.z;
    float _2681 = _2676.w;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    if (_743 > cbSceneParam._m0[78u].w)
    {
        float _2736 = isnan(_743) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _743 : min(cbSceneParam._m0[80u].w, _743));
        float _2737 = _2736 / _743;
        float _2748 = _2737 * _793;
        float _2749 = _794 * _2737;
        float _2750 = (-0.0) - _2749;
        float _2751 = _2737 * _795;
        float _2753 = (cbSceneParam._m0[77u].w * _2750) / _2736;
        float _2754 = _2753 + cbSceneParam._m0[79u].w;
        float _2755 = cbSceneParam._m0[79u].w - _2749;
        float _2761 = sqrt(((_2748 * _2748) + (_2749 * _2749)) + (_2751 * _2751));
        float _2764 = (1.0 - (cbSceneParam._m0[77u].w / _2736)) * _2761;
        float _2769 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2771 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2948;
        if (abs((_2750 - _2753) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2948 = ((((_2754 > 0.0) ? exp2(_2769 * _2754) : (2.0 - exp2(_2771 * _2754))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2764;
        }
        else
        {
            float _2892 = 1.0 / cbSceneParam._m0[80u].x;
            float _2893 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : max(_2754, _2755));
            float _2894 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : min(_2754, _2755));
            float _2903 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : min(_2893, 0.0));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            _2948 = ((abs(_2761 / _2750) * cbSceneParam._m0[80u].y) * ((((_2903 - _2904) * 2.0) - ((exp2(_2769 * (isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0)))) - exp2(_2769 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))))) * _2892)) - ((exp2(_2771 * _2903) - exp2(_2771 * _2904)) * _2892))) + (_2764 * cbSceneParam._m0[80u].z);
        }
        vec4 _2950 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2661, _2662, 1.0), 0.0);
        float _2959 = exp2((_2948 * (-1.44269502162933349609375)) * (1.0 - _2950.w));
        float _2960 = log2(_2959);
        float _2976 = log2(_2681);
        _2773 = (exp2(_2976 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].x)) * _2950.x) / cbSceneParam._m0[78u].x)) + _2678;
        _2775 = (exp2(_2976 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].y)) * _2950.y) / cbSceneParam._m0[78u].y)) + _2679;
        _2777 = (exp2(_2976 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].z)) * _2950.z) / cbSceneParam._m0[78u].z)) + _2680;
        _2779 = _2959 * _2681;
    }
    else
    {
        _2773 = _2678;
        _2775 = _2679;
        _2777 = _2680;
        _2779 = _2681;
    }
    bool _2986;
    vec4 _2789;
    vec4 _2811;
    float _2813;
    float _2817;
    float _2818;
    float _2819;
    float _2820;
    bool _2830;
    for (;;)
    {
        _2789 = cbMatDynParam._m0[0u];
        float _2791 = roundEven(_2789.y);
        bool _2792 = _2791 == 3.0;
        float _2793 = log2(_2779);
        float _2800 = exp2(_2793 * cbSceneParam._m0[78u].x) * _2650;
        float _2801 = exp2(_2793 * cbSceneParam._m0[78u].y) * _2651;
        float _2802 = exp2(_2793 * cbSceneParam._m0[78u].z) * _2652;
        float _2809 = _809 + (-0.5);
        _2811 = cbMtdParam._m0[1u];
        _2813 = _2811.y * _2809;
        float _2816 = (_2791 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2817 = _2816 * (_2792 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2773)));
        _2818 = _2816 * (_2792 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2775)));
        _2819 = _2816 * (_2792 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2777)));
        _2820 = _2809 * 0.999000012874603271484375;
        _2830 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2830)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _2820) < 0.5)
            {
                _2986 = true;
                break;
            }
        }
        uint _2927 = _858 + uint(_2789.w);
        if ((cbInstanceData._m0[_2927].w < 1.0) && ((cbInstanceData._m0[_2927].w + _2820) < 0.5))
        {
            _2986 = true;
            break;
        }
        if ((_2813 + 1.0) < _2811.x)
        {
            _2986 = true;
            break;
        }
        _2986 = false;
        break;
    }
    float _3191;
    if (_2986)
    {
        discard_state = true;
        _3191 = 0.0;
    }
    else
    {
        _3191 = cbInstanceData._m0[_2653].w;
    }
    SV_Target.x = _2817;
    SV_Target.y = _2818;
    SV_Target.z = _2819;
    SV_Target.w = _3191;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2653].w;
    discard_exit();
}


