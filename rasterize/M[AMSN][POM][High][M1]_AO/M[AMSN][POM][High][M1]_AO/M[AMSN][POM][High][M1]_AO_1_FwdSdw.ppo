#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _991;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    float _280 = dot(vec3(_269, _270, _271), vec3(_192, _193, _194));
    float _283 = dot(vec3(_269, _270, _271), vec3(_206, _207, _208));
    float _286 = dot(vec3(_269, _270, _271), vec3(_213, _214, _215));
    float _289 = (-0.0) - _280;
    float _290 = (-0.0) - _283;
    float _300 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _301 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _302 = (-0.0) - _269;
    float _303 = (-0.0) - _270;
    float _304 = (-0.0) - _271;
    float _309 = inversesqrt(dot(vec2(_289, _290), vec2(_289, _290)));
    float _313 = _286 * _286;
    float _315 = sqrt(((_283 * _283) + (_280 * _280)) + _313);
    float _319 = sqrt((_315 * _315) - _313) / ((-0.0) - _286);
    float _322 = ((cbMtdParam._m0[10u].y * _289) * _309) * _319;
    float _325 = ((cbMtdParam._m0[10u].y * _290) * _309) * _319;
    float _329 = inversesqrt(dot(vec3(_302, _303, _304), vec3(_302, _303, _304)));
    float _333 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _334 = dFdxCoarse(_300);
    float _335 = dFdxCoarse(_301);
    float _336 = dFdyCoarse(_300);
    float _337 = dFdyCoarse(_301);
    uvec2 _345 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _349 = float(_345.y) * (abs(_337) + abs(_335));
    float _351 = float(_345.x) * (abs(_336) + abs(_334));
    float _353 = log2(isnan(_349) ? _351 : (isnan(_351) ? _349 : max(_351, _349)));
    float _354 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _357;
    float _360;
    if (!(_354 <= 4.0))
    {
        _357 = _300;
        _360 = _301;
    }
    else
    {
        uint _687 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_329 * _302, _329 * _303, _329 * _304), vec3(_333 * _213, _333 * _214, _333 * _215))) * 12.0)))), int(32u)));
        float _690 = 1.0 / float(int(_687));
        float _691 = _690 * _322;
        float _692 = _690 * _325;
        float _1008;
        float _1010;
        float _1012;
        float _1014;
        if (int(_687) > int(0u))
        {
            float _1009;
            float _1011;
            float _1013;
            float _1015;
            uint _1461;
            float _1402 = 1.0;
            uint _1404 = 0u;
            float _1406 = _300;
            float _1408 = _301;
            float _1410 = 1.0;
            float _1412 = 0.0;
            float _1413 = 0.0;
            float _1414 = 0.0;
            float _1415 = 0.0;
            float _1403;
            float _1407;
            float _1409;
            float _1411;
            bool _1427;
            for (;;)
            {
                _1407 = _1406 - _691;
                _1409 = _1408 - _692;
                _1403 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_1407, _1409), vec2(_334, _335), vec2(_336, _337))), vec4(1.0, 0.0, 0.0, 0.0));
                _1411 = _1410 - _690;
                _1427 = _1403 > _1411;
                float frontier_phi_16_pred;
                float frontier_phi_16_pred_1;
                float frontier_phi_16_pred_2;
                float frontier_phi_16_pred_3;
                uint frontier_phi_16_pred_4;
                if (_1427)
                {
                    frontier_phi_16_pred = _1402;
                    frontier_phi_16_pred_1 = _1410;
                    frontier_phi_16_pred_2 = _1403;
                    frontier_phi_16_pred_3 = _1411;
                    frontier_phi_16_pred_4 = _687;
                }
                else
                {
                    frontier_phi_16_pred = _1415;
                    frontier_phi_16_pred_1 = _1414;
                    frontier_phi_16_pred_2 = _1413;
                    frontier_phi_16_pred_3 = _1412;
                    frontier_phi_16_pred_4 = _1404;
                }
                _1015 = frontier_phi_16_pred;
                _1013 = frontier_phi_16_pred_1;
                _1011 = frontier_phi_16_pred_2;
                _1009 = frontier_phi_16_pred_3;
                _1461 = frontier_phi_16_pred_4;
                uint _1405 = _1461 + 1u;
                if (int(_1405) < int(_687))
                {
                    _1402 = _1403;
                    _1404 = _1405;
                    _1406 = _1407;
                    _1408 = _1409;
                    _1410 = _1411;
                    _1412 = _1009;
                    _1413 = _1011;
                    _1414 = _1013;
                    _1415 = _1015;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1008 = _1009;
            _1010 = _1011;
            _1012 = _1013;
            _1014 = _1015;
        }
        else
        {
            _1008 = 0.0;
            _1010 = 0.0;
            _1012 = 0.0;
            _1014 = 0.0;
        }
        float _1016 = _1012 - _1014;
        float _1017 = _1008 - _1010;
        float _1023 = 1.0 - (((_1016 * _1008) - (_1012 * _1017)) / (_1016 - _1017));
        float _1024 = _1023 * _322;
        float _1025 = _1023 * _325;
        float _359 = _300 - _1024;
        float _362 = _301 - _1025;
        float frontier_phi_3_8_ladder;
        float frontier_phi_3_8_ladder_1;
        if (_354 > 3.0)
        {
            float _1429 = _354 - trunc(_354);
            frontier_phi_3_8_ladder = (_1429 * _1024) + _359;
            frontier_phi_3_8_ladder_1 = (_1429 * _1025) + _362;
        }
        else
        {
            frontier_phi_3_8_ladder = _359;
            frontier_phi_3_8_ladder_1 = _362;
        }
        _357 = frontier_phi_3_8_ladder;
        _360 = frontier_phi_3_8_ladder_1;
    }
    float _367 = ((_357 - _300) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _368 = ((_360 - _301) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _381 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _367) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _368) + cbTextureTilingScale._m0[3u].w));
    float _386 = _381.x * cbMtdParam._m0[9u].x;
    float _387 = _381.y * cbMtdParam._m0[9u].y;
    float _388 = _381.z * cbMtdParam._m0[9u].z;
    vec4 _400 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _367) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _368) + cbTextureTilingScale._m0[1u].w));
    float _404 = _400.z;
    float _409 = (_400.x * 2.0) + (-1.0);
    float _411 = (_400.y * 2.0) + (-1.0);
    float _412 = dot(vec2(_409, _411), vec2(_409, _411));
    float _3669 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _418 = sqrt(1.0 - (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))));
    float _421 = fma(_418, _213, fma(_411, _206, _409 * _192));
    float _424 = fma(_418, _214, fma(_411, _207, _409 * _193));
    float _427 = fma(_418, _215, fma(_411, _208, _409 * _194));
    float _431 = inversesqrt(dot(vec3(_421, _424, _427), vec3(_421, _424, _427)));
    float _432 = _431 * _421;
    float _433 = _431 * _424;
    float _434 = _431 * _427;
    float _438 = cbMtdParam._m0[10u].x + _400.w;
    float _442 = inversesqrt(dot(vec3(_432, _433, _434), vec3(_432, _433, _434)));
    float _443 = _442 * _432;
    float _444 = _442 * _433;
    float _445 = _442 * _434;
    float _3680 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _446 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3702 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3713 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3724 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _466 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _515 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _506);
    float _516 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _506);
    float _517 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _506);
    float _521 = inversesqrt(dot(vec3(_515, _516, _517), vec3(_515, _516, _517)));
    float _522 = _515 * _521;
    float _523 = _516 * _521;
    float _524 = _517 * _521;
    float _530 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _531 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _552 = fma(_445, cbSceneParam._m0[5u].z, fma(_444, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _443));
    float _555 = fma(_445, cbSceneParam._m0[6u].z, fma(_444, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _443));
    float _558 = fma(_445, cbSceneParam._m0[7u].z, fma(_444, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _443));
    uint _571 = uint(roundEven(NORMAL.w)) * 13u;
    uint _574 = (_571 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _580 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_574].x;
    float _581 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * cbInstanceData._m0[_574].y;
    float _582 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * cbInstanceData._m0[_574].z;
    float _3735 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    vec4 _594 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _530, cbSceneParam._m0[86u].y * _531));
    float _598 = ((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * TEXCOORD.z) * _594.x;
    float _599 = dot(vec3(_443, _444, _445), vec3(_522, _523, _524));
    float _602 = _599 * 2.0;
    float _606 = (_602 * _443) - _522;
    float _607 = (_602 * _444) - _523;
    float _608 = (_602 * _445) - _524;
    float _612 = abs(dot(vec3(_522, _523, _524), vec3(_443, _444, _445)));
    float _3768 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _614 = sqrt(_446);
    float _626 = exp2((_614 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_614 * 3.0));
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _990;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _715 = fma(_666, cbModelParam._m0[26u].z, fma(_662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _658));
        float _719 = fma(_666, cbModelParam._m0[27u].z, fma(_662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _658));
        float _723 = fma(_666, cbModelParam._m0[28u].z, fma(_662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _658));
        float _748 = _658 + _443;
        float _749 = _662 + _444;
        float _750 = _666 + _445;
        float _760 = fma(_750, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _748)) - _715;
        float _761 = fma(_750, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _748)) - _719;
        float _762 = fma(_750, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _748)) - _723;
        float _766 = inversesqrt(dot(vec3(_760, _761, _762), vec3(_760, _761, _762)));
        float _779 = ((_766 * _760) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_715 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _780 = ((_766 * _761) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_719 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _781 = ((_766 * _762) / cbModelParam._m0[34u].z) + ((((((_723 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        float _818 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_784.x + (-0.5));
        float _820 = _818 * (_784.y + (-0.5));
        float _821 = _818 * (_784.z + (-0.5));
        float _828 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_791.x + (-0.5));
        float _830 = _828 * (_791.y + (-0.5));
        float _831 = _828 * (_791.z + (-0.5));
        float _838 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_798.x + (-0.5));
        float _840 = _838 * (_798.y + (-0.5));
        float _841 = _838 * (_798.z + (-0.5));
        float _848 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_805.x + (-0.5));
        float _850 = _848 * (_805.y + (-0.5));
        float _851 = _848 * (_805.z + (-0.5));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = _819 * 0.5;
        float _856 = _829 * 0.5;
        float _857 = _839 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _872 = (dot(vec3(_443, _444, _445), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _882 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3816 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_884 + 1.0))) + _889) * _852;
        float _899 = _820 * 0.5;
        float _900 = _830 * 0.5;
        float _901 = _840 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _915 = (dot(vec3(_443, _444, _445), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _924 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3849 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_926 + 1.0))) + _931) * _853;
        float _941 = _821 * 0.5;
        float _942 = _831 * 0.5;
        float _943 = _841 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_443, _444, _445), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3882 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_968 + 1.0))) + _973) * _854;
        _990 = _821;
        _992 = _820;
        _993 = _819;
        _994 = _831;
        _995 = _830;
        _996 = _829;
        _997 = _841;
        _998 = _840;
        _999 = _839;
        _1000 = _854;
        _1001 = _853;
        _1002 = _852;
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
    }
    else
    {
        _990 = _991;
        _992 = _991;
        _993 = _991;
        _994 = _991;
        _995 = _991;
        _996 = _991;
        _997 = _991;
        _998 = _991;
        _999 = _991;
        _1000 = _991;
        _1001 = _991;
        _1002 = _991;
        _1003 = 0.0;
        _1004 = 0.0;
        _1005 = 0.0;
    }
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1049 = fma(_666, cbModelParam._m0[30u].z, fma(_662, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _658));
        float _1053 = fma(_666, cbModelParam._m0[31u].z, fma(_662, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _658));
        float _1057 = fma(_666, cbModelParam._m0[32u].z, fma(_662, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _658));
        float _1080 = _658 + _443;
        float _1081 = _662 + _444;
        float _1082 = _666 + _445;
        float _1092 = fma(_1082, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1080)) - _1049;
        float _1093 = fma(_1082, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1080)) - _1053;
        float _1094 = fma(_1082, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1080)) - _1057;
        float _1098 = inversesqrt(dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094)));
        float _1111 = ((_1098 * _1092) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1049 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1098 * _1093) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1053 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1098 * _1094) / cbModelParam._m0[35u].z) + ((((((_1057 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        float _1148 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1115.x + (-0.5));
        float _1150 = _1148 * (_1115.y + (-0.5));
        float _1151 = _1148 * (_1115.z + (-0.5));
        float _1158 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1122.x + (-0.5));
        float _1160 = _1158 * (_1122.y + (-0.5));
        float _1161 = _1158 * (_1122.z + (-0.5));
        float _1168 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1129.x + (-0.5));
        float _1170 = _1168 * (_1129.y + (-0.5));
        float _1171 = _1168 * (_1129.z + (-0.5));
        float _1178 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1136.x + (-0.5));
        float _1180 = _1178 * (_1136.y + (-0.5));
        float _1181 = _1178 * (_1136.z + (-0.5));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = _1149 * 0.5;
        float _1186 = _1159 * 0.5;
        float _1187 = _1169 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_443, _444, _445), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3945 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1212 + 1.0))) + _1217) * _1182;
        float _1227 = _1150 * 0.5;
        float _1228 = _1160 * 0.5;
        float _1229 = _1170 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_443, _444, _445), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3978 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1254 + 1.0))) + _1259) * _1183;
        float _1269 = _1151 * 0.5;
        float _1270 = _1161 * 0.5;
        float _1271 = _1171 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_443, _444, _445), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4011 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1296 + 1.0))) + _1301) * _1184;
        _1318 = _1151;
        _1319 = _1150;
        _1320 = _1149;
        _1321 = _1161;
        _1322 = _1160;
        _1323 = _1159;
        _1324 = _1171;
        _1325 = _1170;
        _1326 = _1169;
        _1327 = _1184;
        _1328 = _1183;
        _1329 = _1182;
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _991;
        _1319 = _991;
        _1320 = _991;
        _1321 = _991;
        _1322 = _991;
        _1323 = _991;
        _1324 = _991;
        _1325 = _991;
        _1326 = _991;
        _1327 = _991;
        _1328 = _991;
        _1329 = _991;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
    }
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1003)) + _1003;
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1004)) + _1004;
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1005)) + _1005;
    float _1365 = fma(_1344, cbSceneParam._m0[89u].z, fma(_1343, cbSceneParam._m0[89u].y, _1342 * cbSceneParam._m0[89u].x));
    float _1368 = fma(_1344, cbSceneParam._m0[90u].z, fma(_1343, cbSceneParam._m0[90u].y, _1342 * cbSceneParam._m0[90u].x));
    float _1371 = fma(_1344, cbSceneParam._m0[91u].z, fma(_1343, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1342));
    float _1386 = _606 * 0.5;
    float _1387 = _607 * 0.5;
    float _1388 = _608 * 0.5;
    float _1389 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1392 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1395 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1459;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1432 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_990, _994, _997, _1000));
        float _1436 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_992, _995, _998, _1001));
        float _1440 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_993, _996, _999, _1002));
        float _1447 = dot(vec4(cbModelParam._m0[39u]), vec4(_1386, _1387, _1388, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1447) ? 0.0 : (isnan(0.0) ? _1447 : max(0.0, _1447))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1472;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1463 = dot(vec4(cbModelParam._m0[40u]), vec4(_1386, _1387, _1388, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1463) ? 0.0 : (isnan(0.0) ? _1463 : max(0.0, _1463))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1476 = (_1472 * cbModelParam._m0[1u].x) + (_1459 * (1.0 - cbModelParam._m0[1u].x));
    float _1486 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _446);
    float _1487 = isnan(_1486) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1486 : min(cbModelParam._m0[25u].z, _1486));
    float _1569;
    float _1571;
    float _1573;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1536 = fma(_666, cbModelParam._m0[13u].z, fma(_662, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _658)) + cbModelParam._m0[13u].w;
        float _1540 = fma(_666, cbModelParam._m0[14u].z, fma(_662, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _658)) + cbModelParam._m0[14u].w;
        float _1544 = fma(_666, cbModelParam._m0[15u].z, fma(_662, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _658)) + cbModelParam._m0[15u].w;
        float _1547 = fma(_608, cbModelParam._m0[13u].z, fma(_607, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _606));
        float _1550 = fma(_608, cbModelParam._m0[14u].z, fma(_607, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _606));
        float _1553 = fma(_608, cbModelParam._m0[15u].z, fma(_607, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _606));
        float _1581;
        if (_1547 > 0.0)
        {
            _1581 = abs((1.0 - _1536) / _1547);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1536 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1581 = frontier_phi_25_23_ladder;
        }
        float _1755;
        if (_1550 > 0.0)
        {
            _1755 = abs((1.0 - _1540) / _1550);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1540 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1755 = frontier_phi_34_30_ladder;
        }
        float _2051;
        if (_1553 > 0.0)
        {
            _2051 = abs((1.0 - _1544) / _1553);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1544 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2051 = frontier_phi_46_41_ladder;
        }
        float _2053 = isnan(_1755) ? _1581 : (isnan(_1581) ? _1755 : min(_1581, _1755));
        float _2054 = isnan(_2051) ? _2053 : (isnan(_2053) ? _2051 : min(_2053, _2051));
        float _2058 = (_2054 * _1547) + _1536;
        float _2059 = (_2054 * _1550) + _1540;
        float _2060 = (_2054 * _1553) + _1544;
        float _2061 = _2054 * 9.9999997473787516355514526367188e-05;
        float _2063 = (-1.0) - _2061;
        float _2065 = _2061 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2060 > _2065) || ((_2060 < _2063) || ((_2059 > _2065) || ((_2059 < _2063) || ((_2058 < _2063) || (_2058 > _2065))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2205 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2060, cbModelParam._m0[9u].z, fma(_2059, cbModelParam._m0[9u].y, _2058 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2060, cbModelParam._m0[10u].z, fma(_2059, cbModelParam._m0[10u].y, _2058 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2060, cbModelParam._m0[11u].z, fma(_2059, cbModelParam._m0[11u].y, _2058 * cbModelParam._m0[11u].x))), _1487);
            frontier_phi_24_46_ladder = _2205.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2205.x * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2205.y * cbModelParam._m0[1u].y;
        }
        _1569 = frontier_phi_24_46_ladder_1;
        _1571 = frontier_phi_24_46_ladder_2;
        _1573 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_606, _607, _608), _1487);
        _1569 = _1557.x * cbModelParam._m0[1u].y;
        _1571 = _1557.y * cbModelParam._m0[1u].y;
        _1573 = _1557.z * cbModelParam._m0[1u].y;
    }
    float _1577 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _446);
    float _1578 = isnan(_1577) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1577 : min(cbModelParam._m0[25u].w, _1577));
    float _1671;
    float _1673;
    float _1675;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1635 = fma(_666, cbModelParam._m0[21u].z, fma(_662, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _658)) + cbModelParam._m0[21u].w;
        float _1639 = fma(_666, cbModelParam._m0[22u].z, fma(_662, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _658)) + cbModelParam._m0[22u].w;
        float _1643 = fma(_666, cbModelParam._m0[23u].z, fma(_662, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _658)) + cbModelParam._m0[23u].w;
        float _1646 = fma(_608, cbModelParam._m0[21u].z, fma(_607, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _606));
        float _1649 = fma(_608, cbModelParam._m0[22u].z, fma(_607, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _606));
        float _1652 = fma(_608, cbModelParam._m0[23u].z, fma(_607, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _606));
        float _1760;
        if (_1646 > 0.0)
        {
            _1760 = abs((1.0 - _1635) / _1646);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1635 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1760 = frontier_phi_36_32_ladder;
        }
        float _2078;
        if (_1649 > 0.0)
        {
            _2078 = abs((1.0 - _1639) / _1649);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1639 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2078 = frontier_phi_48_43_ladder;
        }
        float _2405;
        if (_1652 > 0.0)
        {
            _2405 = abs((1.0 - _1643) / _1652);
        }
        else
        {
            float frontier_phi_58_55_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_58_55_ladder = abs((_1643 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_58_55_ladder = 5000.0;
            }
            _2405 = frontier_phi_58_55_ladder;
        }
        float _2407 = isnan(_2078) ? _1760 : (isnan(_1760) ? _2078 : min(_1760, _2078));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1646) + _1635;
        float _2413 = (_2408 * _1649) + _1639;
        float _2414 = (_2408 * _1652) + _1643;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2415;
        float _2418 = _2415 + 1.0;
        float frontier_phi_33_58_ladder;
        float frontier_phi_33_58_ladder_1;
        float frontier_phi_33_58_ladder_2;
        if ((_2414 > _2418) || ((_2414 < _2416) || ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 < _2416) || (_2412 > _2418))))))
        {
            frontier_phi_33_58_ladder = 0.0;
            frontier_phi_33_58_ladder_1 = 0.0;
            frontier_phi_33_58_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2414, cbModelParam._m0[17u].z, fma(_2413, cbModelParam._m0[17u].y, _2412 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2414, cbModelParam._m0[18u].z, fma(_2413, cbModelParam._m0[18u].y, _2412 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2414, cbModelParam._m0[19u].z, fma(_2413, cbModelParam._m0[19u].y, _2412 * cbModelParam._m0[19u].x))), _1578);
            frontier_phi_33_58_ladder = _2532.z * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_1 = _2532.y * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_2 = _2532.x * cbModelParam._m0[1u].z;
        }
        _1671 = frontier_phi_33_58_ladder_2;
        _1673 = frontier_phi_33_58_ladder_1;
        _1675 = frontier_phi_33_58_ladder;
    }
    else
    {
        vec4 _1655 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_606, _607, _608), _1578);
        _1671 = _1655.x * cbModelParam._m0[1u].z;
        _1673 = _1655.y * cbModelParam._m0[1u].z;
        _1675 = _1655.z * cbModelParam._m0[1u].z;
    }
    float _1687 = ((((1.0 - _626) * ((_614 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_626 * _614)) * _598;
    float _1688 = _1687 * ((cbModelParam._m0[1u].w * (_1671 - _1569)) + _1569);
    float _1689 = _1687 * ((cbModelParam._m0[1u].w * (_1673 - _1571)) + _1571);
    float _1690 = _1687 * ((cbModelParam._m0[1u].w * (_1675 - _1573)) + _1573);
    float _1693 = fma(_1690, cbSceneParam._m0[89u].z, fma(_1689, cbSceneParam._m0[89u].y, _1688 * cbSceneParam._m0[89u].x));
    float _1696 = fma(_1690, cbSceneParam._m0[90u].z, fma(_1689, cbSceneParam._m0[90u].y, _1688 * cbSceneParam._m0[90u].x));
    float _1699 = fma(_1690, cbSceneParam._m0[91u].z, fma(_1689, cbSceneParam._m0[91u].y, _1688 * cbSceneParam._m0[91u].x));
    float _1734 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1738 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1742 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1746 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1747 = _1734 / _1746;
    float _1748 = _1738 / _1746;
    float _1749 = _1742 / _1746;
    float _1896;
    float _1897;
    float _1898;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1776 = ((uint(_1749 > cbSceneParam._m0[59u].y) + uint(_1749 > cbSceneParam._m0[59u].x)) + uint(_1749 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1777 = _1776 + 43u;
        uint _1785 = _1776 + 44u;
        uint _1793 = _1776 + 45u;
        uint _1801 = _1776 + 46u;
        float _1812 = fma(_1746, cbSceneParam._m0[_1777].w, fma(_1742, cbSceneParam._m0[_1777].z, fma(_1738, cbSceneParam._m0[_1777].y, _1734 * cbSceneParam._m0[_1777].x)));
        float _1816 = fma(_1746, cbSceneParam._m0[_1785].w, fma(_1742, cbSceneParam._m0[_1785].z, fma(_1738, cbSceneParam._m0[_1785].y, _1734 * cbSceneParam._m0[_1785].x)));
        float _1824 = fma(_1746, cbSceneParam._m0[_1801].w, fma(_1742, cbSceneParam._m0[_1801].z, fma(_1738, cbSceneParam._m0[_1801].y, _1734 * cbSceneParam._m0[_1801].x)));
        float _1829 = cbSceneParam._m0[33u].z * _1824;
        float _1831 = cbSceneParam._m0[33u].w * _1824;
        float _1834 = fma(_1746, cbSceneParam._m0[_1793].w, fma(_1742, cbSceneParam._m0[_1793].z, fma(_1738, cbSceneParam._m0[_1793].y, _1734 * cbSceneParam._m0[_1793].x))) / _1824;
        float _1882 = (cbSceneParam._m0[33u].x - sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749))) * cbSceneParam._m0[33u].y;
        float _4137 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1889 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1829 + _1812) / _1824, (_1831 + _1816) / _1824), _1834), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1831 + _1812) / _1824, (_1816 - _1829) / _1824), _1834), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1812 - _1829) / _1824, (_1816 - _1831) / _1824), _1834), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1812 - _1831) / _1824, (_1829 + _1816) / _1824), _1834), 0.0)).x), vec4(0.25)));
        _1896 = 1.0 - (_1889 * cbSceneParam._m0[34u].x);
        _1897 = 1.0 - (_1889 * cbSceneParam._m0[34u].y);
        _1898 = 1.0 - (_1889 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1896 = 1.0;
        _1897 = 1.0;
        _1898 = 1.0;
    }
    float _1962;
    float _1964;
    float _1966;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1950 = fma(_1746, cbSceneParam._m0[63u].w, fma(_1742, cbSceneParam._m0[63u].z, fma(_1738, cbSceneParam._m0[63u].y, _1734 * cbSceneParam._m0[63u].x)));
        float _1951 = fma(_1746, cbSceneParam._m0[60u].w, fma(_1742, cbSceneParam._m0[60u].z, fma(_1738, cbSceneParam._m0[60u].y, _1734 * cbSceneParam._m0[60u].x))) / _1950;
        float _1952 = fma(_1746, cbSceneParam._m0[61u].w, fma(_1742, cbSceneParam._m0[61u].z, fma(_1738, cbSceneParam._m0[61u].y, _1734 * cbSceneParam._m0[61u].x))) / _1950;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1951 >= cbSceneParam._m0[64u].x) && (_1952 >= cbSceneParam._m0[64u].y)) && (_1951 <= cbSceneParam._m0[64u].z)) && (_1952 <= cbSceneParam._m0[64u].w))
        {
            float _2091 = fma(_1746, cbSceneParam._m0[62u].w, fma(_1742, cbSceneParam._m0[62u].z, fma(_1738, cbSceneParam._m0[62u].y, _1734 * cbSceneParam._m0[62u].x))) / _1950;
            float _2095 = isnan(cbSceneParam._m0[41u].w) ? _2091 : (isnan(_2091) ? cbSceneParam._m0[41u].w : max(_2091, cbSceneParam._m0[41u].w));
            float _2138 = (cbSceneParam._m0[33u].x - sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749))) * cbSceneParam._m0[33u].y;
            float _4153 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
            float _2145 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1951, cbSceneParam._m0[33u].w + _1952), _2095), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1951, _1952 - cbSceneParam._m0[33u].z), _2095), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1951 - cbSceneParam._m0[33u].z, _1952 - cbSceneParam._m0[33u].w), _2095), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1951 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1952), _2095), 0.0)).x), vec4(0.25)));
            float _2149 = 1.0 - (_2145 * cbSceneParam._m0[34u].x);
            float _2150 = 1.0 - (_2145 * cbSceneParam._m0[34u].y);
            float _2151 = 1.0 - (_2145 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2151) ? _1898 : (isnan(_1898) ? _2151 : min(_1898, _2151));
            frontier_phi_45_44_ladder_1 = isnan(_2150) ? _1897 : (isnan(_1897) ? _2150 : min(_1897, _2150));
            frontier_phi_45_44_ladder_2 = isnan(_2149) ? _1896 : (isnan(_1896) ? _2149 : min(_1896, _2149));
        }
        else
        {
            frontier_phi_45_44_ladder = _1898;
            frontier_phi_45_44_ladder_1 = _1897;
            frontier_phi_45_44_ladder_2 = _1896;
        }
        _1962 = frontier_phi_45_44_ladder_2;
        _1964 = frontier_phi_45_44_ladder_1;
        _1966 = frontier_phi_45_44_ladder;
    }
    else
    {
        _1962 = _1896;
        _1964 = _1897;
        _1966 = _1898;
    }
    uvec4 _1971 = floatBitsToUint(cbInstanceData._m0[_571 + 5u]);
    uint _1973 = _1971.x * 14u;
    uint _1974 = _1973 + 13u;
    float _1981 = _598 + (-1.0);
    float _1986 = (cbLight._m0[_1974].x * _1981) + 1.0;
    float _1987 = (cbLight._m0[_1974].y * _1981) + 1.0;
    float _1988 = (cbLight._m0[_1974].z * _1981) + 1.0;
    float _1989 = (cbLight._m0[_1974].w * _1981) + 1.0;
    uint _1990 = _1973 + 5u;
    float _1996 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
    uint _2000 = _1973 + 4u;
    float _2010 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
    uint _2014 = _1973 | 1u;
    float _2025 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_443, _444, _445));
    float _2028 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_443, _444, _445));
    float _4189 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _4200 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2033 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * 0.3183098733425140380859375;
    float _2035 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * 0.3183098733425140380859375;
    float _2042 = ((cbLight._m0[_1990].x * _1996) * _2035) + (((cbLight._m0[_2000].x * _1962) * _2010) * _2033);
    float _2043 = ((_1996 * cbLight._m0[_1990].y) * _2035) + (((cbLight._m0[_2000].y * _1964) * _2010) * _2033);
    float _2044 = ((_1996 * cbLight._m0[_1990].z) * _2035) + (((cbLight._m0[_2000].z * _1966) * _2010) * _2033);
    uvec4 _2048 = floatBitsToUint(cbLight._m0[_1973 + 12u]);
    bool _2050 = _2048.x == 0u;
    float _2152;
    float _2154;
    float _2156;
    if (_2050)
    {
        _2152 = _2042;
        _2154 = _2043;
        _2156 = _2044;
    }
    else
    {
        uint _2160 = _1973 + 6u;
        float _2176 = (dot(vec3(cbLight._m0[_1973 + 2u].xyz), vec3(_443, _444, _445)) * 0.5) + 0.5;
        float _2177 = _2176 * _2176;
        float _4211 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2178 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2179 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2152 = (((cbLight._m0[_2160].x * 0.3183098733425140380859375) * _2178) * _2179) + _2042;
        _2154 = (((cbLight._m0[_2160].y * 0.3183098733425140380859375) * _2178) * _2179) + _2043;
        _2156 = (((cbLight._m0[_2160].z * 0.3183098733425140380859375) * _2178) * _2179) + _2044;
    }
    bool _2159 = _2048.y == 0u;
    float _2214;
    float _2216;
    float _2218;
    if (_2159)
    {
        _2214 = _2152;
        _2216 = _2154;
        _2218 = _2156;
    }
    else
    {
        uint _2376 = _1973 + 7u;
        float _2392 = (dot(vec3(cbLight._m0[_1973 + 3u].xyz), vec3(_443, _444, _445)) * 0.5) + 0.5;
        float _2393 = _2392 * _2392;
        float _4227 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2394 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2395 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2214 = (((cbLight._m0[_2376].x * 0.3183098733425140380859375) * _2394) * _2395) + _2152;
        _2216 = (((cbLight._m0[_2376].y * 0.3183098733425140380859375) * _2394) * _2395) + _2154;
        _2218 = (((cbLight._m0[_2376].z * 0.3183098733425140380859375) * _2394) * _2395) + _2156;
    }
    uint _2221 = _1973 + 8u;
    float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _446) * 0.949999988079071044921875);
    float _2235 = _2234 * _2234;
    float _2236 = cbLight._m0[_1973].x + _522;
    float _2237 = cbLight._m0[_1973].y + _523;
    float _2238 = cbLight._m0[_1973].z + _524;
    float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
    float _2243 = _2242 * _2236;
    float _2244 = _2242 * _2237;
    float _2245 = _2242 * _2238;
    float _2246 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_1973].xyz));
    float _4243 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _4254 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _2250 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _2251 = dot(vec3(_443, _444, _445), vec3(_2243, _2244, _2245));
    float _4265 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2255 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2243, _2244, _2245));
    float _4276 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2259 = _2235 * _2235;
    float _2263 = ((_2254 * _2254) * (_2259 + (-1.0))) + 1.0;
    float _2274 = (exp2(log2(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2275 = 1.0 - _2235;
    float _2286 = (0.5 / (((_2250 * ((_2249 * _2275) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_2250 * _2275) + _2235) * _2249))) * _2249;
    float _4287 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2288 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2259 / ((_2263 * _2263) * 3.141590118408203125));
    uint _2302 = _1973 + 9u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _446) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2014].x + _522;
    float _2316 = cbLight._m0[_2014].y + _523;
    float _2317 = cbLight._m0[_2014].z + _524;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_2014].xyz));
    float _4298 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2329 = dot(vec3(_443, _444, _445), vec3(_2322, _2323, _2324));
    float _4309 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2333 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2322, _2323, _2324));
    float _4320 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2337 = _2314 * _2314;
    float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
    float _2350 = (exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2351 = 1.0 - _2314;
    float _2361 = (0.5 / (((_2250 * ((_2328 * _2351) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2250 * _2351) + _2314) * _2328))) * _2328;
    float _4331 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2363 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
    float _2373 = (((_2350 * cbLight._m0[_2302].x) * _2363) * _1996) + ((((cbLight._m0[_2221].x * _1962) * _2274) * _2288) * _2010);
    float _2374 = (((_2350 * cbLight._m0[_2302].y) * _2363) * _1996) + ((((cbLight._m0[_2221].y * _1964) * _2274) * _2288) * _2010);
    float _2375 = (((_2350 * cbLight._m0[_2302].z) * _2363) * _1996) + ((((cbLight._m0[_2221].z * _1966) * _2274) * _2288) * _2010);
    float _2431;
    float _2433;
    float _2435;
    if (_2050)
    {
        _2431 = _2373;
        _2433 = _2374;
        _2435 = _2375;
    }
    else
    {
        uint _2437 = _1973 + 2u;
        uint _2441 = _1973 + 10u;
        float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _446) * 0.949999988079071044921875);
        float _2456 = _2455 * _2455;
        float _2457 = cbLight._m0[_2437].x + _522;
        float _2458 = cbLight._m0[_2437].y + _523;
        float _2459 = cbLight._m0[_2437].z + _524;
        float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
        float _2464 = _2463 * _2457;
        float _2465 = _2463 * _2458;
        float _2466 = _2463 * _2459;
        float _2467 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_2437].xyz));
        float _4342 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2471 = dot(vec3(_443, _444, _445), vec3(_2464, _2465, _2466));
        float _4353 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2475 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2464, _2465, _2466));
        float _4364 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2479 = _2456 * _2456;
        float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
        float _2492 = (exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2493 = 1.0 - _2456;
        float _2503 = (0.5 / (((_2250 * ((_2470 * _2493) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2250 * _2493) + _2456) * _2470))) * _2470;
        float _4375 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2505 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
        float _2506 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2431 = (((_2492 * cbLight._m0[_2441].x) * _2505) * _2506) + _2373;
        _2433 = (((_2492 * cbLight._m0[_2441].y) * _2505) * _2506) + _2374;
        _2435 = (((_2492 * cbLight._m0[_2441].z) * _2505) * _2506) + _2375;
    }
    float _2537;
    float _2539;
    float _2541;
    if (_2159)
    {
        _2537 = _2431;
        _2539 = _2433;
        _2541 = _2435;
    }
    else
    {
        uint _2548 = _1973 + 3u;
        uint _2552 = _1973 + 11u;
        float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2548].w)) * _446) * 0.949999988079071044921875);
        float _2567 = _2566 * _2566;
        float _2568 = cbLight._m0[_2548].x + _522;
        float _2569 = cbLight._m0[_2548].y + _523;
        float _2570 = cbLight._m0[_2548].z + _524;
        float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
        float _2575 = _2574 * _2568;
        float _2576 = _2574 * _2569;
        float _2577 = _2574 * _2570;
        float _2578 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_2548].xyz));
        float _4391 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2581 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2582 = dot(vec3(_443, _444, _445), vec3(_2575, _2576, _2577));
        float _4402 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2586 = dot(vec3(cbLight._m0[_2548].xyz), vec3(_2575, _2576, _2577));
        float _4413 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2590 = _2567 * _2567;
        float _2594 = ((_2585 * _2585) * (_2590 + (-1.0))) + 1.0;
        float _2603 = (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2604 = 1.0 - _2567;
        float _2614 = (0.5 / (((_2250 * ((_2581 * _2604) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2250 * _2604) + _2567) * _2581))) * _2581;
        float _4424 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2616 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2590 / ((_2594 * _2594) * 3.141590118408203125));
        float _2617 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2537 = (((_2603 * cbLight._m0[_2552].x) * _2616) * _2617) + _2431;
        _2539 = (((_2603 * cbLight._m0[_2552].y) * _2616) * _2617) + _2433;
        _2541 = (((_2603 * cbLight._m0[_2552].z) * _2616) * _2617) + _2435;
    }
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    if (_1971.y == 0u)
    {
        uvec4 _2638 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2639 = _2638.x;
        uint _2650 = uint((float(_2638.y) * floor(float(uint(cbSceneParam._m0[85u].y * _531) / _2639))) + floor(float(uint(cbSceneParam._m0[85u].x * _530) / _2639)));
        float _2660 = (log2(_1749 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2661 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        uint _2664 = uint(isnan(14.0) ? _2661 : (isnan(_2661) ? 14.0 : min(_2661, 14.0)));
        uvec4 _2669 = texelFetch(g_lightClusterGridBuffer, int(((_2664 << 2u) + (_2650 << 6u)) >> 2u));
        uint _2670 = _2669.x;
        uint _2671 = _2638.z;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((((1u << ((_2671 >> 4u) & 15u)) + 4294967295u) & _2670) == 0u) || ((_2671 & 240u) == 0u))
        {
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
        }
        else
        {
            float _2750;
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            uint _2899 = 0u;
            uint _2908;
            bool _2909;
            for (;;)
            {
                _2908 = texelFetch(g_lightClassification, int((((_2664 << 5u) + (_2650 << 9u)) + (_2899 << 2u)) >> 2u)).x;
                _2909 = _2908 == 0u;
                float frontier_phi_77_pred;
                float frontier_phi_77_pred_1;
                float frontier_phi_77_pred_2;
                float frontier_phi_77_pred_3;
                float frontier_phi_77_pred_4;
                float frontier_phi_77_pred_5;
                if (_2909)
                {
                    frontier_phi_77_pred = _2898;
                    frontier_phi_77_pred_1 = _2897;
                    frontier_phi_77_pred_2 = _2896;
                    frontier_phi_77_pred_3 = _2895;
                    frontier_phi_77_pred_4 = _2894;
                    frontier_phi_77_pred_5 = _2893;
                }
                else
                {
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    uint _3023;
                    _3017 = _2893;
                    _3018 = _2894;
                    _3019 = _2895;
                    _3020 = _2896;
                    _3021 = _2897;
                    _3022 = _2898;
                    _3023 = _2908;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    for (;;)
                    {
                        uint _3027 = uint(findLSB(_3023)) + (_2899 << 5u);
                        uint _3024 = (_3023 + 4294967295u) & _3023;
                        uint _3029 = _3027 * 48u;
                        vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 3u)).x));
                        uint _3049 = (_3027 * 48u) + 4u;
                        vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3049)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 3u)).x));
                        uint _3068 = (_3027 * 48u) + 8u;
                        vec3 _3079 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x));
                        float _3083 = _3043.x - _1747;
                        float _3084 = _3043.y - _1748;
                        float _3085 = _3043.z - _1749;
                        float _3086 = dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085));
                        float _3089 = inversesqrt(_3086);
                        float _3090 = _3089 * _3083;
                        float _3091 = _3089 * _3084;
                        float _3092 = _3089 * _3085;
                        float _3093 = dot(vec3(_552, _555, _558), vec3(_3090, _3091, _3092));
                        float _3098 = 1.0 - (_3086 * _3043.w);
                        float _4450 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3099 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3100 = sqrt(_3086) * _3062.w;
                        float _3103 = 1.39999997615814208984375 / (_3100 + 1.39999997615814208984375);
                        float _3104 = _3103 * _3103;
                        float _3107 = ((1.0 - _3104) * _3093) + _3104;
                        float _3110 = _3100 * _3100;
                        float _3114 = ((isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0))) * _3099) / ((_3110 * 0.699999988079071044921875) + 1.0);
                        float _3118 = (-0.0) - _1747;
                        float _3119 = (-0.0) - _1748;
                        float _3120 = (-0.0) - _1749;
                        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                        float _3125 = _3124 * _3118;
                        float _3126 = _3124 * _3119;
                        float _3127 = _3124 * _3120;
                        float _3134 = exp2(log2(1.0 / ((_3110 * 3.5) + 5.0)) * 0.25);
                        float _3135 = 1.0 - _614;
                        float _3142 = sqrt(1.0 - ((1.0 - (_3135 * _3135)) * (1.0 - (_3134 * _3134))));
                        float _3143 = _3142 * _3142;
                        float _3144 = _3143 * _3143;
                        float _3145 = _3125 + _3090;
                        float _3146 = _3126 + _3091;
                        float _3147 = _3127 + _3092;
                        float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
                        float _3155 = dot(vec3(_552, _555, _558), vec3(_3125, _3126, _3127));
                        float _4466 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3158 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                        float _3159 = dot(vec3(_552, _555, _558), vec3(_3151 * _3145, _3151 * _3146, _3151 * _3147));
                        float _4477 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3162 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3166 = ((_3162 * _3162) * (_3144 + (-1.0))) + 1.0;
                        float _3167 = _3103 * _3143;
                        float _3168 = _3167 * _3167;
                        float _3171 = ((1.0 - _3168) * _3093) + _3168;
                        float _4488 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3172 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3173 = 1.0 - _3143;
                        float _3183 = (0.5 / (((_3172 * ((_3158 * _3173) + _3143)) + 9.9999999392252902907785028219223e-09) + (((_3172 * _3173) + _3143) * _3158))) * _3172;
                        float _4499 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3194 = (((_3144 * 3.1415927410125732421875) * (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) / ((_3166 * _3166) * ((_3110 * 2.1991131305694580078125) + 3.141590118408203125))) * _3099;
                        _2952 = (_3114 * _3062.x) + _3020;
                        _2953 = (_3114 * _3062.y) + _3021;
                        _2954 = (_3114 * _3062.z) + _3022;
                        _2949 = (_3194 * _3079.x) + _3017;
                        _2950 = (_3194 * _3079.y) + _3018;
                        _2951 = (_3194 * _3079.z) + _3019;
                        if (_3024 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3017 = _2949;
                            _3018 = _2950;
                            _3019 = _2951;
                            _3020 = _2952;
                            _3021 = _2953;
                            _3022 = _2954;
                            _3023 = _3024;
                        }
                    }
                    frontier_phi_77_pred = _2954;
                    frontier_phi_77_pred_1 = _2953;
                    frontier_phi_77_pred_2 = _2952;
                    frontier_phi_77_pred_3 = _2951;
                    frontier_phi_77_pred_4 = _2950;
                    frontier_phi_77_pred_5 = _2949;
                }
                _2760 = frontier_phi_77_pred;
                _2758 = frontier_phi_77_pred_1;
                _2756 = frontier_phi_77_pred_2;
                _2754 = frontier_phi_77_pred_3;
                _2752 = frontier_phi_77_pred_4;
                _2750 = frontier_phi_77_pred_5;
                uint _2900 = _2899 + 1u;
                if (_2900 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2893 = _2750;
                    _2894 = _2752;
                    _2895 = _2754;
                    _2896 = _2756;
                    _2897 = _2758;
                    _2898 = _2760;
                    _2899 = _2900;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
        }
        uvec4 _2763 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2764 = _2763.z;
        uint _2766 = (_2764 >> 8u) & 15u;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        if (((4294967295u << _2766) & _2670) == 0u)
        {
            _2861 = _2749;
            _2863 = _2751;
            _2865 = _2753;
            _2867 = _2755;
            _2869 = _2757;
            _2871 = _2759;
        }
        else
        {
            float _2886 = inversesqrt(dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749)));
            float _2887 = _2886 * _1747;
            float _2888 = _2886 * _1748;
            float _2889 = _2886 * _1749;
            float frontier_phi_71_72_ladder;
            float frontier_phi_71_72_ladder_1;
            float frontier_phi_71_72_ladder_2;
            float frontier_phi_71_72_ladder_3;
            float frontier_phi_71_72_ladder_4;
            float frontier_phi_71_72_ladder_5;
            if (_2766 < ((_2764 >> 12u) & 15u))
            {
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _2870;
                float _2872;
                float _3000 = _2749;
                float _3001 = _2751;
                float _3002 = _2753;
                float _3003 = _2755;
                float _3004 = _2757;
                float _3005 = _2759;
                uint _3006 = _2766;
                uint _3015;
                bool _3016;
                for (;;)
                {
                    _3015 = texelFetch(g_lightClassification, int((((_2664 << 5u) + (_2650 << 9u)) + (_3006 << 2u)) >> 2u)).x;
                    _3016 = _3015 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_3016)
                    {
                        frontier_phi_83_pred = _3005;
                        frontier_phi_83_pred_1 = _3004;
                        frontier_phi_83_pred_2 = _3003;
                        frontier_phi_83_pred_3 = _3001;
                        frontier_phi_83_pred_4 = _3002;
                        frontier_phi_83_pred_5 = _3000;
                    }
                    else
                    {
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3212 = _3000;
                        float _3213 = _3001;
                        float _3214 = _3002;
                        float _3215 = _3003;
                        float _3216 = _3004;
                        float _3217 = _3005;
                        uint _3218 = _3015;
                        uint _3219;
                        vec4 _3244;
                        float _3245;
                        vec4 _3260;
                        vec3 _3272;
                        vec4 _3288;
                        vec4 _3304;
                        float _3351;
                        bool _3352;
                        for (;;)
                        {
                            uint _3229 = ((_3006 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3218));
                            _3219 = (_3218 + 4294967295u) & _3218;
                            uint _3231 = _3229 * 40u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            _3245 = _3244.w;
                            uint _3247 = (_3229 * 40u) + 4u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3262 = (_3229 * 40u) + 8u;
                            _3272 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x));
                            uint _3275 = (_3229 * 40u) + 16u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            uint _3291 = (_3229 * 40u) + 20u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3307 = (_3229 * 40u) + 24u;
                            vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3326 = (_3229 * 40u) + 28u;
                            vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            _3351 = fma(_1749, _3339.z, fma(_1748, _3339.y, _3339.x * _1747)) + _3339.w;
                            _3352 = !((fma(_1749, _3320.z, fma(_1748, _3320.y, _3320.x * _1747)) + _3320.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3352)
                            {
                                float _3379 = _3244.x - _1747;
                                float _3380 = _3244.y - _1748;
                                float _3381 = _3244.z - _1749;
                                float _3382 = dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381));
                                float _3385 = inversesqrt(_3382);
                                float _3386 = _3385 * _3379;
                                float _3387 = _3385 * _3380;
                                float _3388 = _3385 * _3381;
                                float _3392 = 1.0 - (_3382 / (_3245 * _3245));
                                float _4510 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3397 = sqrt(_3382) * _3260.w;
                                float _3399 = 1.39999997615814208984375 / (_3397 + 1.39999997615814208984375);
                                float _3400 = _3399 * _3399;
                                float _3403 = ((1.0 - _3400) * dot(vec3(_3386, _3387, _3388), vec3(_552, _555, _558))) + _3400;
                                float _3406 = _3397 * _3397;
                                float _3410 = (fma(_1749, _3288.z, fma(_1748, _3288.y, _3288.x * _1747)) + _3288.w) / _3351;
                                float _3411 = (fma(_1749, _3304.z, fma(_1748, _3304.y, _3304.x * _1747)) + _3304.w) / _3351;
                                float _3415 = 1.0 - dot(vec2(_3410, _3411), vec2(_3410, _3411));
                                float _4526 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3417 = _3416 * (((isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0))) * _3393) / ((_3406 * 0.699999988079071044921875) + 1.0));
                                float _3429 = exp2(log2(1.0 / ((_3406 * 3.5) + 5.0)) * 0.25);
                                float _3430 = 1.0 - _614;
                                float _3437 = sqrt(1.0 - ((1.0 - (_3430 * _3430)) * (1.0 - (_3429 * _3429))));
                                float _3438 = _3437 * _3437;
                                float _3439 = _3438 * _3438;
                                float _3440 = _3386 - _2887;
                                float _3441 = _3387 - _2888;
                                float _3442 = _3388 - _2889;
                                float _3446 = inversesqrt(dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442)));
                                float _3450 = dot(vec3(_552, _555, _558), vec3((-0.0) - _2887, (-0.0) - _2888, (-0.0) - _2889));
                                float _4537 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3453 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3454 = dot(vec3(_552, _555, _558), vec3(_3446 * _3440, _3446 * _3441, _3446 * _3442));
                                float _4548 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3457 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3461 = ((_3457 * _3457) * (_3439 + (-1.0))) + 1.0;
                                float _3462 = _3399 * _3438;
                                float _3463 = _3462 * _3462;
                                float _3469 = ((1.0 - _3463) * dot(vec3(_552, _555, _558), vec3(_3386, _3387, _3388))) + _3463;
                                float _4559 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3471 = 1.0 - _3438;
                                float _3481 = (0.5 / (((_3470 * ((_3453 * _3471) + _3438)) + 9.9999999392252902907785028219223e-09) + (((_3470 * _3471) + _3438) * _3453))) * _3470;
                                float _4570 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3491 = (_3416 * _3393) * (((_3439 * 3.1415927410125732421875) * (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) / ((_3461 * _3461) * ((_3406 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3417 * _3260.z;
                                frontier_phi_89_pred_1 = _3417 * _3260.y;
                                frontier_phi_89_pred_2 = _3417 * _3260.x;
                                frontier_phi_89_pred_3 = _3491 * _3272.z;
                                frontier_phi_89_pred_4 = _3491 * _3272.y;
                                frontier_phi_89_pred_5 = _3491 * _3272.x;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3500 = frontier_phi_89_pred;
                            _3499 = frontier_phi_89_pred_1;
                            _3498 = frontier_phi_89_pred_2;
                            _3497 = frontier_phi_89_pred_3;
                            _3496 = frontier_phi_89_pred_4;
                            _3495 = frontier_phi_89_pred_5;
                            _3202 = _3498 + _3215;
                            _3203 = _3499 + _3216;
                            _3204 = _3500 + _3217;
                            _3199 = _3495 + _3212;
                            _3200 = _3496 + _3213;
                            _3201 = _3497 + _3214;
                            if (_3219 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3219;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _3204;
                        frontier_phi_83_pred_1 = _3203;
                        frontier_phi_83_pred_2 = _3202;
                        frontier_phi_83_pred_3 = _3200;
                        frontier_phi_83_pred_4 = _3201;
                        frontier_phi_83_pred_5 = _3199;
                    }
                    _2872 = frontier_phi_83_pred;
                    _2870 = frontier_phi_83_pred_1;
                    _2868 = frontier_phi_83_pred_2;
                    _2864 = frontier_phi_83_pred_3;
                    _2866 = frontier_phi_83_pred_4;
                    _2862 = frontier_phi_83_pred_5;
                    uint _3007 = _3006 + 1u;
                    if (_3007 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3000 = _2862;
                        _3001 = _2864;
                        _3002 = _2866;
                        _3003 = _2868;
                        _3004 = _2870;
                        _3005 = _2872;
                        _3006 = _3007;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_71_72_ladder = _2870;
                frontier_phi_71_72_ladder_1 = _2868;
                frontier_phi_71_72_ladder_2 = _2866;
                frontier_phi_71_72_ladder_3 = _2864;
                frontier_phi_71_72_ladder_4 = _2862;
                frontier_phi_71_72_ladder_5 = _2872;
            }
            else
            {
                frontier_phi_71_72_ladder = _2757;
                frontier_phi_71_72_ladder_1 = _2755;
                frontier_phi_71_72_ladder_2 = _2753;
                frontier_phi_71_72_ladder_3 = _2751;
                frontier_phi_71_72_ladder_4 = _2749;
                frontier_phi_71_72_ladder_5 = _2759;
            }
            _2861 = frontier_phi_71_72_ladder_4;
            _2863 = frontier_phi_71_72_ladder_3;
            _2865 = frontier_phi_71_72_ladder_2;
            _2867 = frontier_phi_71_72_ladder_1;
            _2869 = frontier_phi_71_72_ladder;
            _2871 = frontier_phi_71_72_ladder_5;
        }
        float _2876 = isnan(1.0) ? _598 : (isnan(_598) ? 1.0 : min(_598, 1.0));
        _2682 = (_2876 * _2867) + _2214;
        _2684 = (_2876 * _2869) + _2216;
        _2686 = (_2876 * _2871) + _2218;
        _2688 = ((_2861 * 0.039999999105930328369140625) * _2876) + _2537;
        _2690 = ((_2863 * 0.039999999105930328369140625) * _2876) + _2539;
        _2692 = ((_2865 * 0.039999999105930328369140625) * _2876) + _2541;
    }
    else
    {
        _2682 = _2214;
        _2684 = _2216;
        _2686 = _2218;
        _2688 = _2537;
        _2690 = _2539;
        _2692 = _2541;
    }
    float _4586 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _4597 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _4608 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    uint _2712 = _571 + 6u;
    float _2720 = _530 / cbSceneParam._m0[86u].x;
    float _2721 = _531 / cbSceneParam._m0[86u].y;
    vec4 _2735 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2720, _2721, (log2((isnan(cbSceneParam._m0[77u].w) ? _466 : (isnan(_466) ? cbSceneParam._m0[77u].w : min(_466, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2737 = _2735.x;
    float _2738 = _2735.y;
    float _2739 = _2735.z;
    float _2740 = _2735.w;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    if (_466 > cbSceneParam._m0[78u].w)
    {
        float _2774 = isnan(_466) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _466 : min(cbSceneParam._m0[80u].w, _466));
        float _2775 = _2774 / _466;
        float _2786 = _2775 * _515;
        float _2787 = _516 * _2775;
        float _2788 = (-0.0) - _2787;
        float _2789 = _2775 * _517;
        float _2791 = (cbSceneParam._m0[77u].w * _2788) / _2774;
        float _2792 = _2791 + cbSceneParam._m0[79u].w;
        float _2793 = cbSceneParam._m0[79u].w - _2787;
        float _2799 = sqrt(((_2786 * _2786) + (_2787 * _2787)) + (_2789 * _2789));
        float _2802 = (1.0 - (cbSceneParam._m0[77u].w / _2774)) * _2799;
        float _2807 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2809 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2962;
        if (abs((_2788 - _2791) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2962 = ((((_2792 > 0.0) ? exp2(_2807 * _2792) : (2.0 - exp2(_2809 * _2792))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2802;
        }
        else
        {
            float _2922 = 1.0 / cbSceneParam._m0[80u].x;
            float _2923 = isnan(_2793) ? _2792 : (isnan(_2792) ? _2793 : max(_2792, _2793));
            float _2924 = isnan(_2793) ? _2792 : (isnan(_2792) ? _2793 : min(_2792, _2793));
            float _2933 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : min(_2923, 0.0));
            float _2934 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : min(_2924, 0.0));
            _2962 = ((abs(_2799 / _2788) * cbSceneParam._m0[80u].y) * ((((_2933 - _2934) * 2.0) - ((exp2(_2807 * (isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0)))) - exp2(_2807 * (isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0))))) * _2922)) - ((exp2(_2809 * _2933) - exp2(_2809 * _2934)) * _2922))) + (_2802 * cbSceneParam._m0[80u].z);
        }
        vec4 _2964 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2720, _2721, 1.0), 0.0);
        float _2973 = exp2((_2962 * (-1.44269502162933349609375)) * (1.0 - _2964.w));
        float _2974 = log2(_2973);
        float _2990 = log2(_2740);
        _2811 = (exp2(_2990 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2974 * cbSceneParam._m0[78u].x)) * _2964.x) / cbSceneParam._m0[78u].x)) + _2737;
        _2813 = (exp2(_2990 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2974 * cbSceneParam._m0[78u].y)) * _2964.y) / cbSceneParam._m0[78u].y)) + _2738;
        _2815 = (exp2(_2990 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2974 * cbSceneParam._m0[78u].z)) * _2964.z) / cbSceneParam._m0[78u].z)) + _2739;
        _2817 = _2973 * _2740;
    }
    else
    {
        _2811 = _2737;
        _2813 = _2738;
        _2815 = _2739;
        _2817 = _2740;
    }
    float _2829 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2830 = _2829 == 3.0;
    float _2831 = log2(_2817);
    float _2838 = exp2(_2831 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2682 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _598))) + ((_2688 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1476)) * cbPerFrame._m0[3u].x));
    float _2839 = exp2(_2831 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2684 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _598))) + ((_2690 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1476)) * cbPerFrame._m0[3u].x));
    float _2840 = exp2(_2831 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2686 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _598))) + ((_2692 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1476)) * cbPerFrame._m0[3u].x));
    float _2849 = (_2829 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2849 * (_2830 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2811)));
    SV_Target.y = _2849 * (_2830 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2813)));
    SV_Target.z = _2849 * (_2830 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2815)));
    SV_Target.w = cbInstanceData._m0[_2712].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2712].w;
}


