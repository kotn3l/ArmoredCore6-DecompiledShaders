#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1088;
float _3553;
float _3554;
float _3555;
float _3556;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    float _284 = dot(vec3(_273, _274, _275), vec3(_196, _197, _198));
    float _287 = dot(vec3(_273, _274, _275), vec3(_210, _211, _212));
    float _290 = dot(vec3(_273, _274, _275), vec3(_217, _218, _219));
    float _293 = (-0.0) - _284;
    float _294 = (-0.0) - _287;
    float _304 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _305 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _306 = (-0.0) - _273;
    float _307 = (-0.0) - _274;
    float _308 = (-0.0) - _275;
    float _313 = inversesqrt(dot(vec2(_293, _294), vec2(_293, _294)));
    float _317 = _290 * _290;
    float _319 = sqrt(((_287 * _287) + (_284 * _284)) + _317);
    float _323 = sqrt((_319 * _319) - _317) / ((-0.0) - _290);
    float _326 = ((cbMtdParam._m0[10u].y * _293) * _313) * _323;
    float _329 = ((cbMtdParam._m0[10u].y * _294) * _313) * _323;
    float _333 = inversesqrt(dot(vec3(_306, _307, _308), vec3(_306, _307, _308)));
    float _337 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _338 = dFdxCoarse(_304);
    float _339 = dFdxCoarse(_305);
    float _340 = dFdyCoarse(_304);
    float _341 = dFdyCoarse(_305);
    uvec2 _349 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _353 = float(_349.y) * (abs(_341) + abs(_339));
    float _355 = float(_349.x) * (abs(_340) + abs(_338));
    float _357 = log2(isnan(_353) ? _355 : (isnan(_355) ? _353 : max(_355, _353)));
    float _358 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _361;
    float _364;
    if (!(_358 <= 4.0))
    {
        _361 = _304;
        _364 = _305;
    }
    else
    {
        uint _572 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_333 * _306, _333 * _307, _333 * _308), vec3(_337 * _217, _337 * _218, _337 * _219))) * 12.0)))), int(32u)));
        float _575 = 1.0 / float(int(_572));
        float _576 = _575 * _326;
        float _577 = _575 * _329;
        float _772;
        float _774;
        float _776;
        float _778;
        if (int(_572) > int(0u))
        {
            float _773;
            float _775;
            float _777;
            float _779;
            uint _1513;
            float _1108 = 1.0;
            uint _1110 = 0u;
            float _1112 = _304;
            float _1114 = _305;
            float _1116 = 1.0;
            float _1118 = 0.0;
            float _1119 = 0.0;
            float _1120 = 0.0;
            float _1121 = 0.0;
            float _1109;
            float _1113;
            float _1115;
            float _1117;
            bool _1133;
            for (;;)
            {
                _1113 = _1112 - _576;
                _1115 = _1114 - _577;
                _1109 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_1113, _1115), vec2(_338, _339), vec2(_340, _341))), vec4(1.0, 0.0, 0.0, 0.0));
                _1117 = _1116 - _575;
                _1133 = _1109 > _1117;
                float frontier_phi_17_pred;
                float frontier_phi_17_pred_1;
                float frontier_phi_17_pred_2;
                float frontier_phi_17_pred_3;
                uint frontier_phi_17_pred_4;
                if (_1133)
                {
                    frontier_phi_17_pred = _1108;
                    frontier_phi_17_pred_1 = _1116;
                    frontier_phi_17_pred_2 = _1109;
                    frontier_phi_17_pred_3 = _1117;
                    frontier_phi_17_pred_4 = _572;
                }
                else
                {
                    frontier_phi_17_pred = _1121;
                    frontier_phi_17_pred_1 = _1120;
                    frontier_phi_17_pred_2 = _1119;
                    frontier_phi_17_pred_3 = _1118;
                    frontier_phi_17_pred_4 = _1110;
                }
                _779 = frontier_phi_17_pred;
                _777 = frontier_phi_17_pred_1;
                _775 = frontier_phi_17_pred_2;
                _773 = frontier_phi_17_pred_3;
                _1513 = frontier_phi_17_pred_4;
                uint _1111 = _1513 + 1u;
                if (int(_1111) < int(_572))
                {
                    _1108 = _1109;
                    _1110 = _1111;
                    _1112 = _1113;
                    _1114 = _1115;
                    _1116 = _1117;
                    _1118 = _773;
                    _1119 = _775;
                    _1120 = _777;
                    _1121 = _779;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _772 = _773;
            _774 = _775;
            _776 = _777;
            _778 = _779;
        }
        else
        {
            _772 = 0.0;
            _774 = 0.0;
            _776 = 0.0;
            _778 = 0.0;
        }
        float _780 = _776 - _778;
        float _781 = _772 - _774;
        float _787 = 1.0 - (((_780 * _772) - (_776 * _781)) / (_780 - _781));
        float _788 = _787 * _326;
        float _789 = _787 * _329;
        float _363 = _304 - _788;
        float _366 = _305 - _789;
        float frontier_phi_3_8_ladder;
        float frontier_phi_3_8_ladder_1;
        if (_358 > 3.0)
        {
            float _1135 = _358 - trunc(_358);
            frontier_phi_3_8_ladder = (_1135 * _788) + _363;
            frontier_phi_3_8_ladder_1 = (_1135 * _789) + _366;
        }
        else
        {
            frontier_phi_3_8_ladder = _363;
            frontier_phi_3_8_ladder_1 = _366;
        }
        _361 = frontier_phi_3_8_ladder;
        _364 = frontier_phi_3_8_ladder_1;
    }
    float _371 = ((_361 - _304) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _372 = ((_364 - _305) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _385 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _371) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _372) + cbTextureTilingScale._m0[3u].w));
    float _390 = _385.x * cbMtdParam._m0[9u].x;
    float _391 = _385.y * cbMtdParam._m0[9u].y;
    float _392 = _385.z * cbMtdParam._m0[9u].z;
    vec4 _404 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _406 = _404.x;
    vec4 _418 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _371) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _372) + cbTextureTilingScale._m0[1u].w));
    float _422 = _418.z;
    float _427 = (_418.x * 2.0) + (-1.0);
    float _429 = (_418.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_427, _429), vec2(_427, _429));
    float _3575 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _436 = sqrt(1.0 - (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))));
    float _439 = fma(_436, _217, fma(_429, _210, _427 * _196));
    float _442 = fma(_436, _218, fma(_429, _211, _427 * _197));
    float _445 = fma(_436, _219, fma(_429, _212, _427 * _198));
    float _449 = inversesqrt(dot(vec3(_439, _442, _445), vec3(_439, _442, _445)));
    float _450 = _449 * _439;
    float _451 = _449 * _442;
    float _452 = _449 * _445;
    float _456 = cbMtdParam._m0[10u].x + _418.w;
    float _460 = inversesqrt(dot(vec3(_450, _451, _452), vec3(_450, _451, _452)));
    float _461 = _460 * _450;
    float _462 = _460 * _451;
    float _463 = _460 * _452;
    float _3586 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _464 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3608 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3619 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3630 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3641 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _469 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _485 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _534 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _525);
    float _535 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _525);
    float _536 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _525);
    float _540 = inversesqrt(dot(vec3(_534, _535, _536), vec3(_534, _535, _536)));
    float _541 = _534 * _540;
    float _542 = _535 * _540;
    float _543 = _536 * _540;
    vec4 _548 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _550 = _548.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _748 = sqrt(((_534 * _534) + (_535 * _535)) + (_536 * _536));
        float _754 = (cbMatDynParam._m0[5u].x * _748) + cbMatDynParam._m0[5u].y;
        float _3652 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _759 = (cbMatDynParam._m0[5u].z * _748) + cbMatDynParam._m0[5u].w;
        float _3663 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) - _755)) + _755) < ((_550 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _584 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _585 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _605 = fma(_463, cbSceneParam._m0[5u].z, fma(_462, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _461));
    float _608 = fma(_463, cbSceneParam._m0[6u].z, fma(_462, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _461));
    float _611 = fma(_463, cbSceneParam._m0[7u].z, fma(_462, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _461));
    uint _624 = uint(roundEven(NORMAL.w)) * 13u;
    uint _626 = _624 + 9u;
    uint _627 = _626 + uint(cbMatDynParam._m0[0u].w);
    float _633 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_627].x;
    float _634 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_627].y;
    float _635 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_627].z;
    float _3674 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _3696 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _639 = 1.0 - _469;
    float _640 = _636 * _639;
    float _641 = _637 * _639;
    float _642 = _638 * _639;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _469;
    float _648 = (_637 + (-0.039999999105930328369140625)) * _469;
    float _649 = (_638 + (-0.039999999105930328369140625)) * _469;
    float _650 = _647 + 0.039999999105930328369140625;
    float _652 = _648 + 0.039999999105930328369140625;
    float _653 = _649 + 0.039999999105930328369140625;
    vec4 _662 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _584, cbSceneParam._m0[86u].y * _585));
    float _666 = ((isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * TEXCOORD.z) * _662.x;
    float _667 = dot(vec3(_461, _462, _463), vec3(_541, _542, _543));
    float _670 = _667 * 2.0;
    float _674 = (_670 * _461) - _541;
    float _675 = (_670 * _462) - _542;
    float _676 = (_670 * _463) - _543;
    float _680 = abs(dot(vec3(_541, _542, _543), vec3(_461, _462, _463)));
    float _3707 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _682 = sqrt(_464);
    float _694 = exp2((_682 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_682 * 3.0));
    float _700 = (1.0 - _694) * ((_682 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _701 = _694 * _682;
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1087;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _812 = fma(_737, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729));
        float _816 = fma(_737, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729));
        float _820 = fma(_737, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729));
        float _845 = _729 + _461;
        float _846 = _733 + _462;
        float _847 = _737 + _463;
        float _857 = fma(_847, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _845)) - _812;
        float _858 = fma(_847, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _845)) - _816;
        float _859 = fma(_847, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _845)) - _820;
        float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
        float _876 = ((_863 * _857) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_812 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_863 * _858) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_816 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_863 * _859) / cbModelParam._m0[34u].z) + ((((((_820 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        float _915 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_881.x + (-0.5));
        float _917 = _915 * (_881.y + (-0.5));
        float _918 = _915 * (_881.z + (-0.5));
        float _925 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_888.x + (-0.5));
        float _927 = _925 * (_888.y + (-0.5));
        float _928 = _925 * (_888.z + (-0.5));
        float _935 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_895.x + (-0.5));
        float _937 = _935 * (_895.y + (-0.5));
        float _938 = _935 * (_895.z + (-0.5));
        float _945 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_902.x + (-0.5));
        float _947 = _945 * (_902.y + (-0.5));
        float _948 = _945 * (_902.z + (-0.5));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = _916 * 0.5;
        float _953 = _926 * 0.5;
        float _954 = _936 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _969 = (dot(vec3(_461, _462, _463), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _979 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3755 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_981 + 1.0))) + _986) * _949;
        float _996 = _917 * 0.5;
        float _997 = _927 * 0.5;
        float _998 = _937 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_461, _462, _463), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3788 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1023 + 1.0))) + _1028) * _950;
        float _1038 = _918 * 0.5;
        float _1039 = _928 * 0.5;
        float _1040 = _938 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_461, _462, _463), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3821 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1065 + 1.0))) + _1070) * _951;
        _1087 = _918;
        _1089 = _917;
        _1090 = _916;
        _1091 = _928;
        _1092 = _927;
        _1093 = _926;
        _1094 = _938;
        _1095 = _937;
        _1096 = _936;
        _1097 = _951;
        _1098 = _950;
        _1099 = _949;
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
    }
    else
    {
        _1087 = _1088;
        _1089 = _1088;
        _1090 = _1088;
        _1091 = _1088;
        _1092 = _1088;
        _1093 = _1088;
        _1094 = _1088;
        _1095 = _1088;
        _1096 = _1088;
        _1097 = _1088;
        _1098 = _1088;
        _1099 = _1088;
        _1100 = 0.0;
        _1101 = 0.0;
        _1102 = 0.0;
    }
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1160 = fma(_737, cbModelParam._m0[30u].z, fma(_733, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _729));
        float _1164 = fma(_737, cbModelParam._m0[31u].z, fma(_733, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _729));
        float _1168 = fma(_737, cbModelParam._m0[32u].z, fma(_733, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _729));
        float _1191 = _729 + _461;
        float _1192 = _733 + _462;
        float _1193 = _737 + _463;
        float _1203 = fma(_1193, cbModelParam._m0[30u].z, fma(_1192, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191)) - _1160;
        float _1204 = fma(_1193, cbModelParam._m0[31u].z, fma(_1192, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191)) - _1164;
        float _1205 = fma(_1193, cbModelParam._m0[32u].z, fma(_1192, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191)) - _1168;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1160 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1164 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[35u].z) + ((((((_1168 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1259 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1226.x + (-0.5));
        float _1261 = _1259 * (_1226.y + (-0.5));
        float _1262 = _1259 * (_1226.z + (-0.5));
        float _1269 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1233.x + (-0.5));
        float _1271 = _1269 * (_1233.y + (-0.5));
        float _1272 = _1269 * (_1233.z + (-0.5));
        float _1279 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1240.x + (-0.5));
        float _1281 = _1279 * (_1240.y + (-0.5));
        float _1282 = _1279 * (_1240.z + (-0.5));
        float _1289 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1247.x + (-0.5));
        float _1291 = _1289 * (_1247.y + (-0.5));
        float _1292 = _1289 * (_1247.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_461, _462, _463), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3884 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1323 + 1.0))) + _1328) * _1293;
        float _1338 = _1261 * 0.5;
        float _1339 = _1271 * 0.5;
        float _1340 = _1281 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_461, _462, _463), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3917 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1365 + 1.0))) + _1370) * _1294;
        float _1380 = _1262 * 0.5;
        float _1381 = _1272 * 0.5;
        float _1382 = _1282 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_461, _462, _463), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3950 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1407 + 1.0))) + _1412) * _1295;
        _1429 = _1262;
        _1430 = _1261;
        _1431 = _1260;
        _1432 = _1272;
        _1433 = _1271;
        _1434 = _1270;
        _1435 = _1282;
        _1436 = _1281;
        _1437 = _1280;
        _1438 = _1295;
        _1439 = _1294;
        _1440 = _1293;
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1088;
        _1430 = _1088;
        _1431 = _1088;
        _1432 = _1088;
        _1433 = _1088;
        _1434 = _1088;
        _1435 = _1088;
        _1436 = _1088;
        _1437 = _1088;
        _1438 = _1088;
        _1439 = _1088;
        _1440 = _1088;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1100)) + _1100;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1101)) + _1101;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1102)) + _1102;
    float _1476 = fma(_1455, cbSceneParam._m0[89u].z, fma(_1454, cbSceneParam._m0[89u].y, _1453 * cbSceneParam._m0[89u].x));
    float _1479 = fma(_1455, cbSceneParam._m0[90u].z, fma(_1454, cbSceneParam._m0[90u].y, _1453 * cbSceneParam._m0[90u].x));
    float _1482 = fma(_1455, cbSceneParam._m0[91u].z, fma(_1454, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1453));
    float _1497 = _674 * 0.5;
    float _1498 = _675 * 0.5;
    float _1499 = _676 * 0.5;
    float _1500 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1503 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1506 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1542;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1515 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1087, _1091, _1094, _1097));
        float _1519 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1089, _1092, _1095, _1098));
        float _1523 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1090, _1093, _1096, _1099));
        float _1530 = dot(vec4(cbModelParam._m0[39u]), vec4(_1497, _1498, _1499, 1.0));
        _1542 = dot(vec3(isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1542 = 1.0;
    }
    float _1553;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1544 = dot(vec4(cbModelParam._m0[40u]), vec4(_1497, _1498, _1499, 1.0));
        _1553 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1544) ? 0.0 : (isnan(0.0) ? _1544 : max(0.0, _1544))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1553 = 1.0;
    }
    float _1557 = (_1553 * cbModelParam._m0[1u].x) + (_1542 * (1.0 - cbModelParam._m0[1u].x));
    float _1567 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _464);
    float _1568 = isnan(_1567) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1567 : min(cbModelParam._m0[25u].z, _1567));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1617 = fma(_737, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729)) + cbModelParam._m0[13u].w;
        float _1621 = fma(_737, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729)) + cbModelParam._m0[14u].w;
        float _1625 = fma(_737, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729)) + cbModelParam._m0[15u].w;
        float _1628 = fma(_676, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _674));
        float _1631 = fma(_676, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _674));
        float _1634 = fma(_676, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _674));
        float _1662;
        if (_1628 > 0.0)
        {
            _1662 = abs((1.0 - _1617) / _1628);
        }
        else
        {
            float frontier_phi_28_26_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_28_26_ladder = abs((_1617 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_28_26_ladder = 5000.0;
            }
            _1662 = frontier_phi_28_26_ladder;
        }
        float _1891;
        if (_1631 > 0.0)
        {
            _1891 = abs((1.0 - _1621) / _1631);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1621 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1891 = frontier_phi_37_33_ladder;
        }
        float _2148;
        if (_1634 > 0.0)
        {
            _2148 = abs((1.0 - _1625) / _1634);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1625 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2148 = frontier_phi_49_44_ladder;
        }
        float _2150 = isnan(_1891) ? _1662 : (isnan(_1662) ? _1891 : min(_1662, _1891));
        float _2151 = isnan(_2148) ? _2150 : (isnan(_2150) ? _2148 : min(_2150, _2148));
        float _2155 = (_2151 * _1628) + _1617;
        float _2156 = (_2151 * _1631) + _1621;
        float _2157 = (_2151 * _1634) + _1625;
        float _2158 = _2151 * 9.9999997473787516355514526367188e-05;
        float _2160 = (-1.0) - _2158;
        float _2162 = _2158 + 1.0;
        float frontier_phi_27_49_ladder;
        float frontier_phi_27_49_ladder_1;
        float frontier_phi_27_49_ladder_2;
        if ((_2157 > _2162) || ((_2157 < _2160) || ((_2156 > _2162) || ((_2156 < _2160) || ((_2155 < _2160) || (_2155 > _2162))))))
        {
            frontier_phi_27_49_ladder = 0.0;
            frontier_phi_27_49_ladder_1 = 0.0;
            frontier_phi_27_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2285 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2157, cbModelParam._m0[9u].z, fma(_2156, cbModelParam._m0[9u].y, _2155 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2157, cbModelParam._m0[10u].z, fma(_2156, cbModelParam._m0[10u].y, _2155 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2157, cbModelParam._m0[11u].z, fma(_2156, cbModelParam._m0[11u].y, _2155 * cbModelParam._m0[11u].x))), _1568);
            frontier_phi_27_49_ladder = _2285.z * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_1 = _2285.y * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_2 = _2285.x * cbModelParam._m0[1u].y;
        }
        _1650 = frontier_phi_27_49_ladder_2;
        _1652 = frontier_phi_27_49_ladder_1;
        _1654 = frontier_phi_27_49_ladder;
    }
    else
    {
        vec4 _1638 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_674, _675, _676), _1568);
        _1650 = _1638.x * cbModelParam._m0[1u].y;
        _1652 = _1638.y * cbModelParam._m0[1u].y;
        _1654 = _1638.z * cbModelParam._m0[1u].y;
    }
    float _1658 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _464);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1658 : min(cbModelParam._m0[25u].w, _1658));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1716 = fma(_737, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729)) + cbModelParam._m0[21u].w;
        float _1720 = fma(_737, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729)) + cbModelParam._m0[22u].w;
        float _1724 = fma(_737, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729)) + cbModelParam._m0[23u].w;
        float _1727 = fma(_676, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _674));
        float _1730 = fma(_676, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _674));
        float _1733 = fma(_676, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _674));
        float _1896;
        if (_1727 > 0.0)
        {
            _1896 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1896 = frontier_phi_39_35_ladder;
        }
        float _2175;
        if (_1730 > 0.0)
        {
            _2175 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _2175 = frontier_phi_51_46_ladder;
        }
        float _2388;
        if (_1733 > 0.0)
        {
            _2388 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_60_57_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_60_57_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_60_57_ladder = 5000.0;
            }
            _2388 = frontier_phi_60_57_ladder;
        }
        float _2390 = isnan(_2175) ? _1896 : (isnan(_1896) ? _2175 : min(_1896, _2175));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1727) + _1716;
        float _2396 = (_2391 * _1730) + _1720;
        float _2397 = (_2391 * _1733) + _1724;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2398;
        float _2401 = _2398 + 1.0;
        float frontier_phi_36_60_ladder;
        float frontier_phi_36_60_ladder_1;
        float frontier_phi_36_60_ladder_2;
        if ((_2397 > _2401) || ((_2397 < _2399) || ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 < _2399) || (_2395 > _2401))))))
        {
            frontier_phi_36_60_ladder = 0.0;
            frontier_phi_36_60_ladder_1 = 0.0;
            frontier_phi_36_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2397, cbModelParam._m0[17u].z, fma(_2396, cbModelParam._m0[17u].y, _2395 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2397, cbModelParam._m0[18u].z, fma(_2396, cbModelParam._m0[18u].y, _2395 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2397, cbModelParam._m0[19u].z, fma(_2396, cbModelParam._m0[19u].y, _2395 * cbModelParam._m0[19u].x))), _1659);
            frontier_phi_36_60_ladder = _2595.z * cbModelParam._m0[1u].z;
            frontier_phi_36_60_ladder_1 = _2595.y * cbModelParam._m0[1u].z;
            frontier_phi_36_60_ladder_2 = _2595.x * cbModelParam._m0[1u].z;
        }
        _1752 = frontier_phi_36_60_ladder_2;
        _1754 = frontier_phi_36_60_ladder_1;
        _1756 = frontier_phi_36_60_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_674, _675, _676), _1659);
        _1752 = _1736.x * cbModelParam._m0[1u].z;
        _1754 = _1736.y * cbModelParam._m0[1u].z;
        _1756 = _1736.z * cbModelParam._m0[1u].z;
    }
    float _1769 = (((_700 * _650) + _701) * _666) * ((cbModelParam._m0[1u].w * (_1752 - _1650)) + _1650);
    float _1771 = (((_700 * _652) + _701) * _666) * ((cbModelParam._m0[1u].w * (_1754 - _1652)) + _1652);
    float _1773 = (((_700 * _653) + _701) * _666) * ((cbModelParam._m0[1u].w * (_1756 - _1654)) + _1654);
    float _1776 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, _1769 * cbSceneParam._m0[91u].x));
    vec4 _1790 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_584, _585));
    float _1792 = _1790.w;
    float _1804 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1792);
    float _1805 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1792);
    float _1806 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1792);
    uvec4 _1810 = floatBitsToUint(cbInstanceData._m0[_624 + 5u]);
    uint _1812 = _1810.x * 14u;
    uint _1813 = _1812 + 13u;
    float _1820 = _666 + (-1.0);
    float _1825 = (cbLight._m0[_1813].x * _1820) + 1.0;
    float _1826 = (cbLight._m0[_1813].y * _1820) + 1.0;
    float _1827 = (cbLight._m0[_1813].z * _1820) + 1.0;
    float _1828 = (cbLight._m0[_1813].w * _1820) + 1.0;
    uint _1829 = _1812 + 5u;
    float _1835 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
    uint _1839 = _1812 + 4u;
    float _1849 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1853 = _1812 | 1u;
    float _1864 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_461, _462, _463));
    float _1867 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_461, _462, _463));
    float _4086 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _4097 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1872 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.3183098733425140380859375;
    float _1874 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.3183098733425140380859375;
    float _1881 = ((cbLight._m0[_1829].x * _1835) * _1874) + (((cbLight._m0[_1839].x * _1804) * _1849) * _1872);
    float _1882 = ((_1835 * cbLight._m0[_1829].y) * _1874) + (((cbLight._m0[_1839].y * _1805) * _1849) * _1872);
    float _1883 = ((_1835 * cbLight._m0[_1829].z) * _1874) + (((cbLight._m0[_1839].z * _1806) * _1849) * _1872);
    uvec4 _1888 = floatBitsToUint(cbLight._m0[_1812 + 12u]);
    bool _1890 = _1888.x == 0u;
    float _1901;
    float _1903;
    float _1905;
    if (_1890)
    {
        _1901 = _1881;
        _1903 = _1882;
        _1905 = _1883;
    }
    else
    {
        uint _1909 = _1812 + 6u;
        float _1925 = (dot(vec3(cbLight._m0[_1812 + 2u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _1926 = _1925 * _1925;
        float _4108 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1927 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1928 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _1901 = (((cbLight._m0[_1909].x * 0.3183098733425140380859375) * _1927) * _1928) + _1881;
        _1903 = (((cbLight._m0[_1909].y * 0.3183098733425140380859375) * _1927) * _1928) + _1882;
        _1905 = (((cbLight._m0[_1909].z * 0.3183098733425140380859375) * _1927) * _1928) + _1883;
    }
    bool _1908 = _1888.y == 0u;
    float _1946;
    float _1948;
    float _1950;
    if (_1908)
    {
        _1946 = _1901;
        _1948 = _1903;
        _1950 = _1905;
    }
    else
    {
        uint _2119 = _1812 + 7u;
        float _2135 = (dot(vec3(cbLight._m0[_1812 + 3u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _2136 = _2135 * _2135;
        float _4124 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2137 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2138 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _1946 = (((cbLight._m0[_2119].x * 0.3183098733425140380859375) * _2137) * _2138) + _1901;
        _1948 = (((cbLight._m0[_2119].y * 0.3183098733425140380859375) * _2137) * _2138) + _1903;
        _1950 = (((cbLight._m0[_2119].z * 0.3183098733425140380859375) * _2137) * _2138) + _1905;
    }
    uint _1953 = _1812 + 8u;
    float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _464) * 0.949999988079071044921875);
    float _1967 = _1966 * _1966;
    float _1968 = cbLight._m0[_1812].x + _541;
    float _1969 = cbLight._m0[_1812].y + _542;
    float _1970 = cbLight._m0[_1812].z + _543;
    float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
    float _1975 = _1974 * _1968;
    float _1976 = _1974 * _1969;
    float _1977 = _1974 * _1970;
    float _1978 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1812].xyz));
    float _4140 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _1982 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _1983 = dot(vec3(_461, _462, _463), vec3(_1975, _1976, _1977));
    float _4162 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _1987 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_1975, _1976, _1977));
    float _4173 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1991 = _1967 * _1967;
    float _1995 = ((_1986 * _1986) * (_1991 + (-1.0))) + 1.0;
    float _2003 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
    float _2004 = 0.959999978542327880859375 - _647;
    float _2006 = 0.959999978542327880859375 - _648;
    float _2007 = 0.959999978542327880859375 - _649;
    float _2014 = 1.0 - _1967;
    float _2025 = (0.5 / (((_1982 * ((_1981 * _2014) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2014) + _1967) * _1981))) * _1981;
    float _4184 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2027 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1991 / ((_1995 * _1995) * 3.141590118408203125));
    uint _2041 = _1812 + 9u;
    float _2052 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _464) * 0.949999988079071044921875);
    float _2053 = _2052 * _2052;
    float _2054 = cbLight._m0[_1853].x + _541;
    float _2055 = cbLight._m0[_1853].y + _542;
    float _2056 = cbLight._m0[_1853].z + _543;
    float _2060 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
    float _2061 = _2060 * _2054;
    float _2062 = _2060 * _2055;
    float _2063 = _2060 * _2056;
    float _2064 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1853].xyz));
    float _4195 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2068 = dot(vec3(_461, _462, _463), vec3(_2061, _2062, _2063));
    float _4206 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2072 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2061, _2062, _2063));
    float _4217 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = _2053 * _2053;
    float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
    float _2087 = exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0);
    float _2094 = 1.0 - _2053;
    float _2104 = (0.5 / (((_1982 * ((_2067 * _2094) + _2053)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2094) + _2053) * _2067))) * _2067;
    float _4228 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2106 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
    float _2116 = (((((_2087 * _2004) + _650) * cbLight._m0[_2041].x) * _2106) * _1835) + ((((cbLight._m0[_1953].x * _1804) * ((_2003 * _2004) + _650)) * _2027) * _1849);
    float _2117 = (((((_2087 * _2006) + _652) * cbLight._m0[_2041].y) * _2106) * _1835) + ((((cbLight._m0[_1953].y * _1805) * ((_2003 * _2006) + _652)) * _2027) * _1849);
    float _2118 = (((((_2087 * _2007) + _653) * cbLight._m0[_2041].z) * _2106) * _1835) + ((((cbLight._m0[_1953].z * _1806) * ((_2003 * _2007) + _653)) * _2027) * _1849);
    float _2180;
    float _2182;
    float _2184;
    if (_1890)
    {
        _2180 = _2116;
        _2182 = _2117;
        _2184 = _2118;
    }
    else
    {
        uint _2186 = _1812 + 2u;
        uint _2190 = _1812 + 10u;
        float _2204 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _464) * 0.949999988079071044921875);
        float _2205 = _2204 * _2204;
        float _2206 = cbLight._m0[_2186].x + _541;
        float _2207 = cbLight._m0[_2186].y + _542;
        float _2208 = cbLight._m0[_2186].z + _543;
        float _2212 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
        float _2213 = _2212 * _2206;
        float _2214 = _2212 * _2207;
        float _2215 = _2212 * _2208;
        float _2216 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2186].xyz));
        float _4239 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2219 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2220 = dot(vec3(_461, _462, _463), vec3(_2213, _2214, _2215));
        float _4250 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2223 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2224 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2213, _2214, _2215));
        float _4261 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2228 = _2205 * _2205;
        float _2232 = ((_2223 * _2223) * (_2228 + (-1.0))) + 1.0;
        float _2239 = exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0);
        float _2246 = 1.0 - _2205;
        float _2256 = (0.5 / (((_1982 * ((_2219 * _2246) + _2205)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2246) + _2205) * _2219))) * _2219;
        float _4272 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2258 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2228 / ((_2232 * _2232) * 3.141590118408203125));
        float _2259 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2180 = (((((_2239 * _2004) + _650) * cbLight._m0[_2190].x) * _2258) * _2259) + _2116;
        _2182 = (((((_2239 * _2006) + _652) * cbLight._m0[_2190].y) * _2258) * _2259) + _2117;
        _2184 = (((((_2239 * _2007) + _653) * cbLight._m0[_2190].z) * _2258) * _2259) + _2118;
    }
    float _2294;
    float _2296;
    float _2298;
    if (_1908)
    {
        _2294 = _2180;
        _2296 = _2182;
        _2298 = _2184;
    }
    else
    {
        uint _2305 = _1812 + 3u;
        uint _2309 = _1812 + 11u;
        float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _464) * 0.949999988079071044921875);
        float _2324 = _2323 * _2323;
        float _2325 = cbLight._m0[_2305].x + _541;
        float _2326 = cbLight._m0[_2305].y + _542;
        float _2327 = cbLight._m0[_2305].z + _543;
        float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
        float _2332 = _2331 * _2325;
        float _2333 = _2331 * _2326;
        float _2334 = _2331 * _2327;
        float _2335 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2305].xyz));
        float _4288 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2339 = dot(vec3(_461, _462, _463), vec3(_2332, _2333, _2334));
        float _4299 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2343 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2332, _2333, _2334));
        float _4310 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2347 = _2324 * _2324;
        float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
        float _2358 = exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0);
        float _2365 = 1.0 - _2324;
        float _2375 = (0.5 / (((_1982 * ((_2338 * _2365) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2365) + _2324) * _2338))) * _2338;
        float _4321 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2377 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
        float _2378 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2294 = (((((_2358 * _2004) + _650) * cbLight._m0[_2309].x) * _2377) * _2378) + _2180;
        _2296 = (((((_2358 * _2006) + _652) * cbLight._m0[_2309].y) * _2377) * _2378) + _2182;
        _2298 = (((((_2358 * _2007) + _653) * cbLight._m0[_2309].z) * _2377) * _2378) + _2184;
    }
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_1810.y == 0u)
    {
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2453;
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2453;
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2453;
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.x;
        uint _2480 = uint((float(_2468.y) * floor(float(uint(cbSceneParam._m0[85u].y * _585) / _2469))) + floor(float(uint(cbSceneParam._m0[85u].x * _584) / _2469)));
        float _2490 = (log2(_2456 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2491 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        uint _2494 = uint(isnan(14.0) ? _2491 : (isnan(_2491) ? 14.0 : min(_2491, 14.0)));
        uvec4 _2499 = texelFetch(g_lightClusterGridBuffer, int(((_2494 << 2u) + (_2480 << 6u)) >> 2u));
        uint _2500 = _2499.x;
        uint _2501 = _2468.z;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        if (((((1u << ((_2501 >> 4u) & 15u)) + 4294967295u) & _2500) == 0u) || ((_2501 & 240u) == 0u))
        {
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
        }
        else
        {
            float _2601;
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            uint _2758 = 0u;
            uint _2767;
            bool _2768;
            for (;;)
            {
                _2767 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2758 << 2u)) >> 2u)).x;
                _2768 = _2767 == 0u;
                float frontier_phi_77_pred;
                float frontier_phi_77_pred_1;
                float frontier_phi_77_pred_2;
                float frontier_phi_77_pred_3;
                float frontier_phi_77_pred_4;
                float frontier_phi_77_pred_5;
                if (_2768)
                {
                    frontier_phi_77_pred = _2757;
                    frontier_phi_77_pred_1 = _2756;
                    frontier_phi_77_pred_2 = _2755;
                    frontier_phi_77_pred_3 = _2754;
                    frontier_phi_77_pred_4 = _2753;
                    frontier_phi_77_pred_5 = _2752;
                }
                else
                {
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    uint _2903;
                    _2897 = _2752;
                    _2898 = _2753;
                    _2899 = _2754;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2767;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    for (;;)
                    {
                        uint _2907 = uint(findLSB(_2903)) + (_2758 << 5u);
                        uint _2904 = (_2903 + 4294967295u) & _2903;
                        uint _2909 = _2907 * 48u;
                        vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 3u)).x));
                        uint _2929 = (_2907 * 48u) + 4u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 3u)).x));
                        uint _2948 = (_2907 * 48u) + 8u;
                        vec3 _2959 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x));
                        float _2963 = _2923.x - _2454;
                        float _2964 = _2923.y - _2455;
                        float _2965 = _2923.z - _2456;
                        float _2966 = dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965));
                        float _2969 = inversesqrt(_2966);
                        float _2970 = _2969 * _2963;
                        float _2971 = _2969 * _2964;
                        float _2972 = _2969 * _2965;
                        float _2973 = dot(vec3(_605, _608, _611), vec3(_2970, _2971, _2972));
                        float _2978 = 1.0 - (_2966 * _2923.w);
                        float _4347 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2979 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _2980 = sqrt(_2966) * _2942.w;
                        float _2983 = 1.39999997615814208984375 / (_2980 + 1.39999997615814208984375);
                        float _2984 = _2983 * _2983;
                        float _2987 = ((1.0 - _2984) * _2973) + _2984;
                        float _2990 = _2980 * _2980;
                        float _2994 = ((isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))) * _2979) / ((_2990 * 0.699999988079071044921875) + 1.0);
                        float _2998 = (-0.0) - _2454;
                        float _2999 = (-0.0) - _2455;
                        float _3000 = (-0.0) - _2456;
                        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
                        float _3005 = _3004 * _2998;
                        float _3006 = _3004 * _2999;
                        float _3007 = _3004 * _3000;
                        float _3015 = exp2(log2(1.0 / ((_2990 * 3.5) + 5.0)) * 0.25);
                        float _3016 = 1.0 - _682;
                        float _3023 = sqrt(1.0 - ((1.0 - (_3016 * _3016)) * (1.0 - (_3015 * _3015))));
                        float _3024 = _3023 * _3023;
                        float _3025 = _3024 * _3024;
                        float _3026 = _3005 + _2970;
                        float _3027 = _3006 + _2971;
                        float _3028 = _3007 + _2972;
                        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                        float _3036 = dot(vec3(_605, _608, _611), vec3(_3005, _3006, _3007));
                        float _4363 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3039 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3040 = dot(vec3(_605, _608, _611), vec3(_3032 * _3026, _3032 * _3027, _3032 * _3028));
                        float _4374 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3043 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3047 = ((_3043 * _3043) * (_3025 + (-1.0))) + 1.0;
                        float _3048 = _2983 * _3024;
                        float _3049 = _3048 * _3048;
                        float _3052 = ((1.0 - _3049) * _2973) + _3049;
                        float _4385 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3053 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3054 = 1.0 - _3024;
                        float _3064 = (0.5 / (((_3053 * ((_3039 * _3054) + _3024)) + 9.9999999392252902907785028219223e-09) + (((_3053 * _3054) + _3024) * _3039))) * _3053;
                        float _4396 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3075 = (((_3025 * 3.1415927410125732421875) * (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) / ((_3047 * _3047) * ((_2990 * 2.1991131305694580078125) + 3.141590118408203125))) * _2979;
                        _2827 = (_2994 * _2942.x) + _2900;
                        _2828 = (_2994 * _2942.y) + _2901;
                        _2829 = (_2994 * _2942.z) + _2902;
                        _2824 = (_3075 * _2959.x) + _2897;
                        _2825 = (_3075 * _2959.y) + _2898;
                        _2826 = (_3075 * _2959.z) + _2899;
                        if (_2904 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2897 = _2824;
                            _2898 = _2825;
                            _2899 = _2826;
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2904;
                        }
                    }
                    frontier_phi_77_pred = _2829;
                    frontier_phi_77_pred_1 = _2828;
                    frontier_phi_77_pred_2 = _2827;
                    frontier_phi_77_pred_3 = _2826;
                    frontier_phi_77_pred_4 = _2825;
                    frontier_phi_77_pred_5 = _2824;
                }
                _2611 = frontier_phi_77_pred;
                _2609 = frontier_phi_77_pred_1;
                _2607 = frontier_phi_77_pred_2;
                _2605 = frontier_phi_77_pred_3;
                _2603 = frontier_phi_77_pred_4;
                _2601 = frontier_phi_77_pred_5;
                uint _2759 = _2758 + 1u;
                if (_2759 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2752 = _2601;
                    _2753 = _2603;
                    _2754 = _2605;
                    _2755 = _2607;
                    _2756 = _2609;
                    _2757 = _2611;
                    _2758 = _2759;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
        }
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.z;
        uint _2617 = (_2615 >> 8u) & 15u;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        if (((4294967295u << _2617) & _2500) == 0u)
        {
            _2720 = _2600;
            _2722 = _2602;
            _2724 = _2604;
            _2726 = _2606;
            _2728 = _2608;
            _2730 = _2610;
        }
        else
        {
            float _2745 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
            float _2746 = _2745 * _2454;
            float _2747 = _2745 * _2455;
            float _2748 = _2745 * _2456;
            float frontier_phi_69_70_ladder;
            float frontier_phi_69_70_ladder_1;
            float frontier_phi_69_70_ladder_2;
            float frontier_phi_69_70_ladder_3;
            float frontier_phi_69_70_ladder_4;
            float frontier_phi_69_70_ladder_5;
            if (_2617 < ((_2615 >> 12u) & 15u))
            {
                float _2721;
                float _2723;
                float _2725;
                float _2727;
                float _2729;
                float _2731;
                float _2880 = _2600;
                float _2881 = _2602;
                float _2882 = _2604;
                float _2883 = _2606;
                float _2884 = _2608;
                float _2885 = _2610;
                uint _2886 = _2617;
                uint _2895;
                bool _2896;
                for (;;)
                {
                    _2895 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2886 << 2u)) >> 2u)).x;
                    _2896 = _2895 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2896)
                    {
                        frontier_phi_88_pred = _2885;
                        frontier_phi_88_pred_1 = _2884;
                        frontier_phi_88_pred_2 = _2883;
                        frontier_phi_88_pred_3 = _2882;
                        frontier_phi_88_pred_4 = _2881;
                        frontier_phi_88_pred_5 = _2880;
                    }
                    else
                    {
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3102 = _2880;
                        float _3103 = _2881;
                        float _3104 = _2882;
                        float _3105 = _2883;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        uint _3108 = _2895;
                        uint _3109;
                        vec4 _3134;
                        float _3135;
                        vec4 _3150;
                        vec3 _3162;
                        vec4 _3178;
                        vec4 _3194;
                        float _3241;
                        bool _3242;
                        for (;;)
                        {
                            uint _3119 = ((_2886 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3108));
                            _3109 = (_3108 + 4294967295u) & _3108;
                            uint _3121 = _3119 * 40u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            _3135 = _3134.w;
                            uint _3137 = (_3119 * 40u) + 4u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3152 = (_3119 * 40u) + 8u;
                            _3162 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x));
                            uint _3165 = (_3119 * 40u) + 16u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3181 = (_3119 * 40u) + 20u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3197 = (_3119 * 40u) + 24u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3216 = (_3119 * 40u) + 28u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3241 = fma(_2456, _3229.z, fma(_2455, _3229.y, _3229.x * _2454)) + _3229.w;
                            _3242 = !((fma(_2456, _3210.z, fma(_2455, _3210.y, _3210.x * _2454)) + _3210.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3242)
                            {
                                float _3269 = _3134.x - _2454;
                                float _3270 = _3134.y - _2455;
                                float _3271 = _3134.z - _2456;
                                float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                                float _3275 = inversesqrt(_3272);
                                float _3276 = _3275 * _3269;
                                float _3277 = _3275 * _3270;
                                float _3278 = _3275 * _3271;
                                float _3282 = 1.0 - (_3272 / (_3135 * _3135));
                                float _4407 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3287 = sqrt(_3272) * _3150.w;
                                float _3289 = 1.39999997615814208984375 / (_3287 + 1.39999997615814208984375);
                                float _3290 = _3289 * _3289;
                                float _3293 = ((1.0 - _3290) * dot(vec3(_3276, _3277, _3278), vec3(_605, _608, _611))) + _3290;
                                float _3296 = _3287 * _3287;
                                float _3300 = (fma(_2456, _3178.z, fma(_2455, _3178.y, _3178.x * _2454)) + _3178.w) / _3241;
                                float _3301 = (fma(_2456, _3194.z, fma(_2455, _3194.y, _3194.x * _2454)) + _3194.w) / _3241;
                                float _3305 = 1.0 - dot(vec2(_3300, _3301), vec2(_3300, _3301));
                                float _4423 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3307 = _3306 * (((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3283) / ((_3296 * 0.699999988079071044921875) + 1.0));
                                float _3319 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                                float _3320 = 1.0 - _682;
                                float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                                float _3328 = _3327 * _3327;
                                float _3329 = _3328 * _3328;
                                float _3330 = _3276 - _2746;
                                float _3331 = _3277 - _2747;
                                float _3332 = _3278 - _2748;
                                float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                                float _3340 = dot(vec3(_605, _608, _611), vec3((-0.0) - _2746, (-0.0) - _2747, (-0.0) - _2748));
                                float _4434 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3344 = dot(vec3(_605, _608, _611), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                                float _4445 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                                float _3352 = _3289 * _3328;
                                float _3353 = _3352 * _3352;
                                float _3359 = ((1.0 - _3353) * dot(vec3(_605, _608, _611), vec3(_3276, _3277, _3278))) + _3353;
                                float _4456 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3361 = 1.0 - _3328;
                                float _3371 = (0.5 / (((_3360 * ((_3343 * _3361) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3328) * _3343))) * _3360;
                                float _4467 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3381 = (_3306 * _3283) * (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) / ((_3351 * _3351) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3307 * _3150.z;
                                frontier_phi_94_pred_1 = _3307 * _3150.y;
                                frontier_phi_94_pred_2 = _3307 * _3150.x;
                                frontier_phi_94_pred_3 = _3381 * _3162.z;
                                frontier_phi_94_pred_4 = _3381 * _3162.y;
                                frontier_phi_94_pred_5 = _3381 * _3162.x;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3390 = frontier_phi_94_pred;
                            _3389 = frontier_phi_94_pred_1;
                            _3388 = frontier_phi_94_pred_2;
                            _3387 = frontier_phi_94_pred_3;
                            _3386 = frontier_phi_94_pred_4;
                            _3385 = frontier_phi_94_pred_5;
                            _3092 = _3388 + _3105;
                            _3093 = _3389 + _3106;
                            _3094 = _3390 + _3107;
                            _3089 = _3385 + _3102;
                            _3090 = _3386 + _3103;
                            _3091 = _3387 + _3104;
                            if (_3109 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3109;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3094;
                        frontier_phi_88_pred_1 = _3093;
                        frontier_phi_88_pred_2 = _3092;
                        frontier_phi_88_pred_3 = _3091;
                        frontier_phi_88_pred_4 = _3090;
                        frontier_phi_88_pred_5 = _3089;
                    }
                    _2731 = frontier_phi_88_pred;
                    _2729 = frontier_phi_88_pred_1;
                    _2727 = frontier_phi_88_pred_2;
                    _2725 = frontier_phi_88_pred_3;
                    _2723 = frontier_phi_88_pred_4;
                    _2721 = frontier_phi_88_pred_5;
                    uint _2887 = _2886 + 1u;
                    if (_2887 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2880 = _2721;
                        _2881 = _2723;
                        _2882 = _2725;
                        _2883 = _2727;
                        _2884 = _2729;
                        _2885 = _2731;
                        _2886 = _2887;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_69_70_ladder = _2731;
                frontier_phi_69_70_ladder_1 = _2729;
                frontier_phi_69_70_ladder_2 = _2727;
                frontier_phi_69_70_ladder_3 = _2725;
                frontier_phi_69_70_ladder_4 = _2723;
                frontier_phi_69_70_ladder_5 = _2721;
            }
            else
            {
                frontier_phi_69_70_ladder = _2610;
                frontier_phi_69_70_ladder_1 = _2608;
                frontier_phi_69_70_ladder_2 = _2606;
                frontier_phi_69_70_ladder_3 = _2604;
                frontier_phi_69_70_ladder_4 = _2602;
                frontier_phi_69_70_ladder_5 = _2600;
            }
            _2720 = frontier_phi_69_70_ladder_5;
            _2722 = frontier_phi_69_70_ladder_4;
            _2724 = frontier_phi_69_70_ladder_3;
            _2726 = frontier_phi_69_70_ladder_2;
            _2728 = frontier_phi_69_70_ladder_1;
            _2730 = frontier_phi_69_70_ladder;
        }
        float _2735 = isnan(1.0) ? _666 : (isnan(_666) ? 1.0 : min(_666, 1.0));
        _2512 = (_2735 * _2726) + _1946;
        _2514 = (_2735 * _2728) + _1948;
        _2516 = (_2735 * _2730) + _1950;
        _2518 = ((_2720 * _650) * _2735) + _2294;
        _2520 = ((_2722 * _652) * _2735) + _2296;
        _2522 = ((_2724 * _653) * _2735) + _2298;
    }
    else
    {
        _2512 = _1946;
        _2514 = _1948;
        _2516 = _1950;
        _2518 = _2294;
        _2520 = _2296;
        _2522 = _2298;
    }
    float _4483 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4494 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4505 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _2539 = ((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2512 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _666))) + ((_2518 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1557)) * cbPerFrame._m0[3u].x);
    float _2540 = ((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2514 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _666))) + ((_2520 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1557)) * cbPerFrame._m0[3u].x);
    float _2541 = ((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2516 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _666))) + ((_2522 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1557)) * cbPerFrame._m0[3u].x);
    uint _2542 = _624 + 6u;
    float _2550 = _584 / cbSceneParam._m0[86u].x;
    float _2551 = _585 / cbSceneParam._m0[86u].y;
    vec4 _2565 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, (log2((isnan(cbSceneParam._m0[77u].w) ? _485 : (isnan(_485) ? cbSceneParam._m0[77u].w : min(_485, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2567 = _2565.x;
    float _2568 = _2565.y;
    float _2569 = _2565.z;
    float _2570 = _2565.w;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    if (_485 > cbSceneParam._m0[78u].w)
    {
        float _2625 = isnan(_485) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _485 : min(cbSceneParam._m0[80u].w, _485));
        float _2626 = _2625 / _485;
        float _2637 = _2626 * _534;
        float _2638 = _535 * _2626;
        float _2639 = (-0.0) - _2638;
        float _2640 = _2626 * _536;
        float _2642 = (cbSceneParam._m0[77u].w * _2639) / _2625;
        float _2643 = _2642 + cbSceneParam._m0[79u].w;
        float _2644 = cbSceneParam._m0[79u].w - _2638;
        float _2650 = sqrt(((_2637 * _2637) + (_2638 * _2638)) + (_2640 * _2640));
        float _2653 = (1.0 - (cbSceneParam._m0[77u].w / _2625)) * _2650;
        float _2658 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2660 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2837;
        if (abs((_2639 - _2642) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2837 = ((((_2643 > 0.0) ? exp2(_2658 * _2643) : (2.0 - exp2(_2660 * _2643))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2653;
        }
        else
        {
            float _2781 = 1.0 / cbSceneParam._m0[80u].x;
            float _2782 = isnan(_2644) ? _2643 : (isnan(_2643) ? _2644 : max(_2643, _2644));
            float _2783 = isnan(_2644) ? _2643 : (isnan(_2643) ? _2644 : min(_2643, _2644));
            float _2792 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : min(_2782, 0.0));
            float _2793 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : min(_2783, 0.0));
            _2837 = ((abs(_2650 / _2639) * cbSceneParam._m0[80u].y) * ((((_2792 - _2793) * 2.0) - ((exp2(_2658 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0)))) - exp2(_2658 * (isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0))))) * _2781)) - ((exp2(_2660 * _2792) - exp2(_2660 * _2793)) * _2781))) + (_2653 * cbSceneParam._m0[80u].z);
        }
        vec4 _2839 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, 1.0), 0.0);
        float _2848 = exp2((_2837 * (-1.44269502162933349609375)) * (1.0 - _2839.w));
        float _2849 = log2(_2848);
        float _2865 = log2(_2570);
        _2662 = (exp2(_2865 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2849 * cbSceneParam._m0[78u].x)) * _2839.x) / cbSceneParam._m0[78u].x)) + _2567;
        _2664 = (exp2(_2865 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2849 * cbSceneParam._m0[78u].y)) * _2839.y) / cbSceneParam._m0[78u].y)) + _2568;
        _2666 = (exp2(_2865 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2849 * cbSceneParam._m0[78u].z)) * _2839.z) / cbSceneParam._m0[78u].z)) + _2569;
        _2668 = _2848 * _2570;
    }
    else
    {
        _2662 = _2567;
        _2664 = _2568;
        _2666 = _2569;
        _2668 = _2570;
    }
    bool _2875;
    vec4 _2678;
    vec4 _2700;
    float _2702;
    float _2706;
    float _2707;
    float _2708;
    float _2709;
    bool _2719;
    for (;;)
    {
        _2678 = cbMatDynParam._m0[0u];
        float _2680 = roundEven(_2678.y);
        bool _2681 = _2680 == 3.0;
        float _2682 = log2(_2668);
        float _2689 = exp2(_2682 * cbSceneParam._m0[78u].x) * _2539;
        float _2690 = exp2(_2682 * cbSceneParam._m0[78u].y) * _2540;
        float _2691 = exp2(_2682 * cbSceneParam._m0[78u].z) * _2541;
        float _2698 = _550 + (-0.5);
        _2700 = cbMtdParam._m0[1u];
        _2702 = _2700.y * _2698;
        float _2705 = (_2680 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2706 = _2705 * (_2681 ? _2689 : (_2689 + (cbSceneParam._m0[72u].w * _2662)));
        _2707 = _2705 * (_2681 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2664)));
        _2708 = _2705 * (_2681 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2666)));
        _2709 = _2698 * 0.999000012874603271484375;
        _2719 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2719)
        {
            if ((cbInstanceData._m0[_624 + 7u].x + _2709) < 0.5)
            {
                _2875 = true;
                break;
            }
        }
        uint _2816 = _626 + uint(_2678.w);
        if ((cbInstanceData._m0[_2816].w < 1.0) && ((cbInstanceData._m0[_2816].w + _2709) < 0.5))
        {
            _2875 = true;
            break;
        }
        if ((_2702 + 1.0) < _2700.x)
        {
            _2875 = true;
            break;
        }
        _2875 = false;
        break;
    }
    float _3080;
    if (_2875)
    {
        discard_state = true;
        _3080 = 0.0;
    }
    else
    {
        _3080 = cbInstanceData._m0[_2542].w;
    }
    SV_Target.x = _2706;
    SV_Target.y = _2707;
    SV_Target.z = _2708;
    SV_Target.w = _3080;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2542].w;
    discard_exit();
}


