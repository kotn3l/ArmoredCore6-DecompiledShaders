#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1022;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    float _278 = dot(vec3(_267, _268, _269), vec3(_190, _191, _192));
    float _281 = dot(vec3(_267, _268, _269), vec3(_204, _205, _206));
    float _284 = dot(vec3(_267, _268, _269), vec3(_211, _212, _213));
    float _287 = (-0.0) - _278;
    float _288 = (-0.0) - _281;
    float _298 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _299 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _300 = (-0.0) - _267;
    float _301 = (-0.0) - _268;
    float _302 = (-0.0) - _269;
    float _307 = inversesqrt(dot(vec2(_287, _288), vec2(_287, _288)));
    float _311 = _284 * _284;
    float _313 = sqrt(((_281 * _281) + (_278 * _278)) + _311);
    float _317 = sqrt((_313 * _313) - _311) / ((-0.0) - _284);
    float _320 = ((cbMtdParam._m0[10u].y * _287) * _307) * _317;
    float _323 = ((cbMtdParam._m0[10u].y * _288) * _307) * _317;
    float _327 = inversesqrt(dot(vec3(_300, _301, _302), vec3(_300, _301, _302)));
    float _331 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _332 = dFdxCoarse(_298);
    float _333 = dFdxCoarse(_299);
    float _334 = dFdyCoarse(_298);
    float _335 = dFdyCoarse(_299);
    uvec2 _343 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _347 = float(_343.y) * (abs(_335) + abs(_333));
    float _349 = float(_343.x) * (abs(_334) + abs(_332));
    float _351 = log2(isnan(_347) ? _349 : (isnan(_349) ? _347 : max(_349, _347)));
    float _352 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _355;
    float _358;
    if (!(_352 <= 4.0))
    {
        _355 = _298;
        _358 = _299;
    }
    else
    {
        uint _718 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_327 * _300, _327 * _301, _327 * _302), vec3(_331 * _211, _331 * _212, _331 * _213))) * 12.0)))), int(32u)));
        float _721 = 1.0 / float(int(_718));
        float _722 = _721 * _320;
        float _723 = _721 * _323;
        float _1039;
        float _1041;
        float _1043;
        float _1045;
        if (int(_718) > int(0u))
        {
            float _1040;
            float _1042;
            float _1044;
            float _1046;
            uint _1492;
            float _1433 = 1.0;
            uint _1435 = 0u;
            float _1437 = _298;
            float _1439 = _299;
            float _1441 = 1.0;
            float _1443 = 0.0;
            float _1444 = 0.0;
            float _1445 = 0.0;
            float _1446 = 0.0;
            float _1434;
            float _1438;
            float _1440;
            float _1442;
            bool _1458;
            for (;;)
            {
                _1438 = _1437 - _722;
                _1440 = _1439 - _723;
                _1434 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_1438, _1440), vec2(_332, _333), vec2(_334, _335))), vec4(1.0, 0.0, 0.0, 0.0));
                _1442 = _1441 - _721;
                _1458 = _1434 > _1442;
                float frontier_phi_16_pred;
                float frontier_phi_16_pred_1;
                float frontier_phi_16_pred_2;
                float frontier_phi_16_pred_3;
                uint frontier_phi_16_pred_4;
                if (_1458)
                {
                    frontier_phi_16_pred = _1433;
                    frontier_phi_16_pred_1 = _1441;
                    frontier_phi_16_pred_2 = _1434;
                    frontier_phi_16_pred_3 = _1442;
                    frontier_phi_16_pred_4 = _718;
                }
                else
                {
                    frontier_phi_16_pred = _1446;
                    frontier_phi_16_pred_1 = _1445;
                    frontier_phi_16_pred_2 = _1444;
                    frontier_phi_16_pred_3 = _1443;
                    frontier_phi_16_pred_4 = _1435;
                }
                _1046 = frontier_phi_16_pred;
                _1044 = frontier_phi_16_pred_1;
                _1042 = frontier_phi_16_pred_2;
                _1040 = frontier_phi_16_pred_3;
                _1492 = frontier_phi_16_pred_4;
                uint _1436 = _1492 + 1u;
                if (int(_1436) < int(_718))
                {
                    _1433 = _1434;
                    _1435 = _1436;
                    _1437 = _1438;
                    _1439 = _1440;
                    _1441 = _1442;
                    _1443 = _1040;
                    _1444 = _1042;
                    _1445 = _1044;
                    _1446 = _1046;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1039 = _1040;
            _1041 = _1042;
            _1043 = _1044;
            _1045 = _1046;
        }
        else
        {
            _1039 = 0.0;
            _1041 = 0.0;
            _1043 = 0.0;
            _1045 = 0.0;
        }
        float _1047 = _1043 - _1045;
        float _1048 = _1039 - _1041;
        float _1054 = 1.0 - (((_1047 * _1039) - (_1043 * _1048)) / (_1047 - _1048));
        float _1055 = _1054 * _320;
        float _1056 = _1054 * _323;
        float _357 = _298 - _1055;
        float _360 = _299 - _1056;
        float frontier_phi_3_8_ladder;
        float frontier_phi_3_8_ladder_1;
        if (_352 > 3.0)
        {
            float _1460 = _352 - trunc(_352);
            frontier_phi_3_8_ladder = (_1460 * _1056) + _360;
            frontier_phi_3_8_ladder_1 = (_1460 * _1055) + _357;
        }
        else
        {
            frontier_phi_3_8_ladder = _360;
            frontier_phi_3_8_ladder_1 = _357;
        }
        _355 = frontier_phi_3_8_ladder_1;
        _358 = frontier_phi_3_8_ladder;
    }
    float _365 = ((_355 - _298) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _366 = ((_358 - _299) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _379 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _365) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _366) + cbTextureTilingScale._m0[3u].w));
    float _384 = _379.x * cbMtdParam._m0[9u].x;
    float _385 = _379.y * cbMtdParam._m0[9u].y;
    float _386 = _379.z * cbMtdParam._m0[9u].z;
    vec4 _398 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _400 = _398.x;
    vec4 _412 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _365) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _366) + cbTextureTilingScale._m0[1u].w));
    float _416 = _412.z;
    float _421 = (_412.x * 2.0) + (-1.0);
    float _423 = (_412.y * 2.0) + (-1.0);
    float _424 = dot(vec2(_421, _423), vec2(_421, _423));
    float _3438 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _430 = sqrt(1.0 - (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))));
    float _433 = fma(_430, _211, fma(_423, _204, _421 * _190));
    float _436 = fma(_430, _212, fma(_423, _205, _421 * _191));
    float _439 = fma(_430, _213, fma(_423, _206, _421 * _192));
    float _443 = inversesqrt(dot(vec3(_433, _436, _439), vec3(_433, _436, _439)));
    float _444 = _443 * _433;
    float _445 = _443 * _436;
    float _446 = _443 * _439;
    float _450 = cbMtdParam._m0[10u].x + _412.w;
    float _454 = inversesqrt(dot(vec3(_444, _445, _446), vec3(_444, _445, _446)));
    float _455 = _454 * _444;
    float _456 = _454 * _445;
    float _457 = _454 * _446;
    float _3449 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _458 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3471 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3482 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3493 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3504 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _463 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _479 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _528 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _519);
    float _529 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _519);
    float _530 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _519);
    float _534 = inversesqrt(dot(vec3(_528, _529, _530), vec3(_528, _529, _530)));
    float _535 = _528 * _534;
    float _536 = _529 * _534;
    float _537 = _530 * _534;
    float _543 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _544 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _565 = fma(_457, cbSceneParam._m0[5u].z, fma(_456, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _455));
    float _568 = fma(_457, cbSceneParam._m0[6u].z, fma(_456, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _455));
    float _571 = fma(_457, cbSceneParam._m0[7u].z, fma(_456, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _455));
    uint _584 = uint(roundEven(NORMAL.w)) * 13u;
    uint _587 = (_584 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _593 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_587].x;
    float _594 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_587].y;
    float _595 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_587].z;
    float _3515 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _3526 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _599 = 1.0 - _463;
    float _600 = _596 * _599;
    float _601 = _597 * _599;
    float _602 = _598 * _599;
    float _607 = (_596 + (-0.039999999105930328369140625)) * _463;
    float _608 = (_597 + (-0.039999999105930328369140625)) * _463;
    float _609 = (_598 + (-0.039999999105930328369140625)) * _463;
    float _610 = _607 + 0.039999999105930328369140625;
    float _612 = _608 + 0.039999999105930328369140625;
    float _613 = _609 + 0.039999999105930328369140625;
    vec4 _622 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _543, cbSceneParam._m0[86u].y * _544));
    float _626 = ((isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * TEXCOORD.z) * _622.x;
    float _627 = dot(vec3(_455, _456, _457), vec3(_535, _536, _537));
    float _630 = _627 * 2.0;
    float _634 = (_630 * _455) - _535;
    float _635 = (_630 * _456) - _536;
    float _636 = (_630 * _457) - _537;
    float _640 = abs(dot(vec3(_535, _536, _537), vec3(_455, _456, _457)));
    float _3548 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _642 = sqrt(_458);
    float _654 = exp2((_642 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_642 * 3.0));
    float _660 = (1.0 - _654) * ((_642 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _661 = _654 * _642;
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1021;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _746 = fma(_697, cbModelParam._m0[26u].z, fma(_693, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689));
        float _750 = fma(_697, cbModelParam._m0[27u].z, fma(_693, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689));
        float _754 = fma(_697, cbModelParam._m0[28u].z, fma(_693, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689));
        float _779 = _689 + _455;
        float _780 = _693 + _456;
        float _781 = _697 + _457;
        float _791 = fma(_781, cbModelParam._m0[26u].z, fma(_780, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779)) - _746;
        float _792 = fma(_781, cbModelParam._m0[27u].z, fma(_780, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779)) - _750;
        float _793 = fma(_781, cbModelParam._m0[28u].z, fma(_780, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779)) - _754;
        float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
        float _810 = ((_797 * _791) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_746 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_797 * _792) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_750 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _812 = ((_797 * _793) / cbModelParam._m0[34u].z) + ((((((_754 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        float _849 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_815.x + (-0.5));
        float _851 = _849 * (_815.y + (-0.5));
        float _852 = _849 * (_815.z + (-0.5));
        float _859 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_822.x + (-0.5));
        float _861 = _859 * (_822.y + (-0.5));
        float _862 = _859 * (_822.z + (-0.5));
        float _869 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_829.x + (-0.5));
        float _871 = _869 * (_829.y + (-0.5));
        float _872 = _869 * (_829.z + (-0.5));
        float _879 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_836.x + (-0.5));
        float _881 = _879 * (_836.y + (-0.5));
        float _882 = _879 * (_836.z + (-0.5));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = _850 * 0.5;
        float _887 = _860 * 0.5;
        float _888 = _870 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _903 = (dot(vec3(_455, _456, _457), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _913 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3596 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_915 + 1.0))) + _920) * _883;
        float _930 = _851 * 0.5;
        float _931 = _861 * 0.5;
        float _932 = _871 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_455, _456, _457), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3629 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_957 + 1.0))) + _962) * _884;
        float _972 = _852 * 0.5;
        float _973 = _862 * 0.5;
        float _974 = _872 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_455, _456, _457), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3662 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_999 + 1.0))) + _1004) * _885;
        _1021 = _852;
        _1023 = _851;
        _1024 = _850;
        _1025 = _862;
        _1026 = _861;
        _1027 = _860;
        _1028 = _872;
        _1029 = _871;
        _1030 = _870;
        _1031 = _885;
        _1032 = _884;
        _1033 = _883;
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
    }
    else
    {
        _1021 = _1022;
        _1023 = _1022;
        _1024 = _1022;
        _1025 = _1022;
        _1026 = _1022;
        _1027 = _1022;
        _1028 = _1022;
        _1029 = _1022;
        _1030 = _1022;
        _1031 = _1022;
        _1032 = _1022;
        _1033 = _1022;
        _1034 = 0.0;
        _1035 = 0.0;
        _1036 = 0.0;
    }
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1080 = fma(_697, cbModelParam._m0[30u].z, fma(_693, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _689));
        float _1084 = fma(_697, cbModelParam._m0[31u].z, fma(_693, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _689));
        float _1088 = fma(_697, cbModelParam._m0[32u].z, fma(_693, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _689));
        float _1111 = _689 + _455;
        float _1112 = _693 + _456;
        float _1113 = _697 + _457;
        float _1123 = fma(_1113, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1111)) - _1080;
        float _1124 = fma(_1113, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1111)) - _1084;
        float _1125 = fma(_1113, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1111)) - _1088;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1080 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1084 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[35u].z) + ((((((_1088 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1179 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1146.x + (-0.5));
        float _1181 = _1179 * (_1146.y + (-0.5));
        float _1182 = _1179 * (_1146.z + (-0.5));
        float _1189 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1153.x + (-0.5));
        float _1191 = _1189 * (_1153.y + (-0.5));
        float _1192 = _1189 * (_1153.z + (-0.5));
        float _1199 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1160.x + (-0.5));
        float _1201 = _1199 * (_1160.y + (-0.5));
        float _1202 = _1199 * (_1160.z + (-0.5));
        float _1209 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1167.x + (-0.5));
        float _1211 = _1209 * (_1167.y + (-0.5));
        float _1212 = _1209 * (_1167.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_455, _456, _457), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3725 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1243 + 1.0))) + _1248) * _1213;
        float _1258 = _1181 * 0.5;
        float _1259 = _1191 * 0.5;
        float _1260 = _1201 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_455, _456, _457), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3758 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1285 + 1.0))) + _1290) * _1214;
        float _1300 = _1182 * 0.5;
        float _1301 = _1192 * 0.5;
        float _1302 = _1202 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_455, _456, _457), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3791 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1327 + 1.0))) + _1332) * _1215;
        _1349 = _1182;
        _1350 = _1181;
        _1351 = _1180;
        _1352 = _1192;
        _1353 = _1191;
        _1354 = _1190;
        _1355 = _1202;
        _1356 = _1201;
        _1357 = _1200;
        _1358 = _1215;
        _1359 = _1214;
        _1360 = _1213;
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
    }
    else
    {
        _1349 = _1022;
        _1350 = _1022;
        _1351 = _1022;
        _1352 = _1022;
        _1353 = _1022;
        _1354 = _1022;
        _1355 = _1022;
        _1356 = _1022;
        _1357 = _1022;
        _1358 = _1022;
        _1359 = _1022;
        _1360 = _1022;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1034)) + _1034;
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1035)) + _1035;
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1036)) + _1036;
    float _1396 = fma(_1375, cbSceneParam._m0[89u].z, fma(_1374, cbSceneParam._m0[89u].y, _1373 * cbSceneParam._m0[89u].x));
    float _1399 = fma(_1375, cbSceneParam._m0[90u].z, fma(_1374, cbSceneParam._m0[90u].y, _1373 * cbSceneParam._m0[90u].x));
    float _1402 = fma(_1375, cbSceneParam._m0[91u].z, fma(_1374, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1373));
    float _1417 = _634 * 0.5;
    float _1418 = _635 * 0.5;
    float _1419 = _636 * 0.5;
    float _1420 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1423 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1426 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1490;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1463 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1021, _1025, _1028, _1031));
        float _1467 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1471 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1478 = dot(vec4(cbModelParam._m0[39u]), vec4(_1417, _1418, _1419, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1478) ? 0.0 : (isnan(0.0) ? _1478 : max(0.0, _1478))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1503;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1494 = dot(vec4(cbModelParam._m0[40u]), vec4(_1417, _1418, _1419, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1494) ? 0.0 : (isnan(0.0) ? _1494 : max(0.0, _1494))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1507 = (_1503 * cbModelParam._m0[1u].x) + (_1490 * (1.0 - cbModelParam._m0[1u].x));
    float _1517 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _458);
    float _1518 = isnan(_1517) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1517 : min(cbModelParam._m0[25u].z, _1517));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1567 = fma(_697, cbModelParam._m0[13u].z, fma(_693, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689)) + cbModelParam._m0[13u].w;
        float _1571 = fma(_697, cbModelParam._m0[14u].z, fma(_693, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689)) + cbModelParam._m0[14u].w;
        float _1575 = fma(_697, cbModelParam._m0[15u].z, fma(_693, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689)) + cbModelParam._m0[15u].w;
        float _1578 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1581 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1584 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1612;
        if (_1578 > 0.0)
        {
            _1612 = abs((1.0 - _1567) / _1578);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1567 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1612 = frontier_phi_25_23_ladder;
        }
        float _1820;
        if (_1581 > 0.0)
        {
            _1820 = abs((1.0 - _1571) / _1581);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1571 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1820 = frontier_phi_34_30_ladder;
        }
        float _2074;
        if (_1584 > 0.0)
        {
            _2074 = abs((1.0 - _1575) / _1584);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1575 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2074 = frontier_phi_46_41_ladder;
        }
        float _2076 = isnan(_1820) ? _1612 : (isnan(_1612) ? _1820 : min(_1612, _1820));
        float _2077 = isnan(_2074) ? _2076 : (isnan(_2076) ? _2074 : min(_2076, _2074));
        float _2081 = (_2077 * _1578) + _1567;
        float _2082 = (_2077 * _1581) + _1571;
        float _2083 = (_2077 * _1584) + _1575;
        float _2084 = _2077 * 9.9999997473787516355514526367188e-05;
        float _2086 = (-1.0) - _2084;
        float _2088 = _2084 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2083 > _2088) || ((_2083 < _2086) || ((_2082 > _2088) || ((_2082 < _2086) || ((_2081 < _2086) || (_2081 > _2088))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2211 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2083, cbModelParam._m0[9u].z, fma(_2082, cbModelParam._m0[9u].y, _2081 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2083, cbModelParam._m0[10u].z, fma(_2082, cbModelParam._m0[10u].y, _2081 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2083, cbModelParam._m0[11u].z, fma(_2082, cbModelParam._m0[11u].y, _2081 * cbModelParam._m0[11u].x))), _1518);
            frontier_phi_24_46_ladder = _2211.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2211.x * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2211.z * cbModelParam._m0[1u].y;
        }
        _1600 = frontier_phi_24_46_ladder_1;
        _1602 = frontier_phi_24_46_ladder;
        _1604 = frontier_phi_24_46_ladder_2;
    }
    else
    {
        vec4 _1588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1518);
        _1600 = _1588.x * cbModelParam._m0[1u].y;
        _1602 = _1588.y * cbModelParam._m0[1u].y;
        _1604 = _1588.z * cbModelParam._m0[1u].y;
    }
    float _1608 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _458);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1608 : min(cbModelParam._m0[25u].w, _1608));
    float _1702;
    float _1704;
    float _1706;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1666 = fma(_697, cbModelParam._m0[21u].z, fma(_693, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689)) + cbModelParam._m0[21u].w;
        float _1670 = fma(_697, cbModelParam._m0[22u].z, fma(_693, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689)) + cbModelParam._m0[22u].w;
        float _1674 = fma(_697, cbModelParam._m0[23u].z, fma(_693, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689)) + cbModelParam._m0[23u].w;
        float _1677 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1680 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1683 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1825;
        if (_1677 > 0.0)
        {
            _1825 = abs((1.0 - _1666) / _1677);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1666 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1825 = frontier_phi_36_32_ladder;
        }
        float _2101;
        if (_1680 > 0.0)
        {
            _2101 = abs((1.0 - _1670) / _1680);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1670 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2101 = frontier_phi_48_43_ladder;
        }
        float _2314;
        if (_1683 > 0.0)
        {
            _2314 = abs((1.0 - _1674) / _1683);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1674 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2314 = frontier_phi_57_54_ladder;
        }
        float _2316 = isnan(_2101) ? _1825 : (isnan(_1825) ? _2101 : min(_1825, _2101));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1677) + _1666;
        float _2322 = (_2317 * _1680) + _1670;
        float _2323 = (_2317 * _1683) + _1674;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2325 = (-1.0) - _2324;
        float _2327 = _2324 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2323 > _2327) || ((_2323 < _2325) || ((_2322 > _2327) || ((_2322 < _2325) || ((_2321 < _2325) || (_2321 > _2327))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2323, cbModelParam._m0[17u].z, fma(_2322, cbModelParam._m0[17u].y, _2321 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2323, cbModelParam._m0[18u].z, fma(_2322, cbModelParam._m0[18u].y, _2321 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2323, cbModelParam._m0[19u].z, fma(_2322, cbModelParam._m0[19u].y, _2321 * cbModelParam._m0[19u].x))), _1609);
            frontier_phi_33_57_ladder = _2521.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2521.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2521.z * cbModelParam._m0[1u].z;
        }
        _1702 = frontier_phi_33_57_ladder_1;
        _1704 = frontier_phi_33_57_ladder;
        _1706 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1609);
        _1702 = _1686.x * cbModelParam._m0[1u].z;
        _1704 = _1686.y * cbModelParam._m0[1u].z;
        _1706 = _1686.z * cbModelParam._m0[1u].z;
    }
    float _1719 = (((_660 * _610) + _661) * _626) * ((cbModelParam._m0[1u].w * (_1702 - _1600)) + _1600);
    float _1721 = (((_660 * _612) + _661) * _626) * ((cbModelParam._m0[1u].w * (_1704 - _1602)) + _1602);
    float _1723 = (((_660 * _613) + _661) * _626) * ((cbModelParam._m0[1u].w * (_1706 - _1604)) + _1604);
    float _1726 = fma(_1723, cbSceneParam._m0[89u].z, fma(_1721, cbSceneParam._m0[89u].y, _1719 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1723, cbSceneParam._m0[90u].z, fma(_1721, cbSceneParam._m0[90u].y, _1719 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1723, cbSceneParam._m0[91u].z, fma(_1721, cbSceneParam._m0[91u].y, _1719 * cbSceneParam._m0[91u].x));
    uvec4 _1742 = floatBitsToUint(cbInstanceData._m0[_584 + 5u]);
    uint _1744 = _1742.x * 14u;
    uint _1745 = _1744 + 13u;
    float _1752 = _626 + (-1.0);
    float _1757 = (cbLight._m0[_1745].x * _1752) + 1.0;
    float _1758 = (cbLight._m0[_1745].y * _1752) + 1.0;
    float _1759 = (cbLight._m0[_1745].z * _1752) + 1.0;
    float _1760 = (cbLight._m0[_1745].w * _1752) + 1.0;
    uint _1761 = _1744 + 5u;
    float _1767 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
    uint _1771 = _1744 + 4u;
    float _1778 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
    uint _1782 = _1744 | 1u;
    float _1793 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_455, _456, _457));
    float _1796 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_455, _456, _457));
    float _3927 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _3938 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1801 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * 0.3183098733425140380859375;
    float _1803 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.3183098733425140380859375;
    float _1810 = ((cbLight._m0[_1761].x * _1767) * _1803) + ((cbLight._m0[_1771].x * _1778) * _1801);
    float _1811 = ((_1767 * cbLight._m0[_1761].y) * _1803) + ((_1778 * cbLight._m0[_1771].y) * _1801);
    float _1812 = ((_1767 * cbLight._m0[_1761].z) * _1803) + ((_1778 * cbLight._m0[_1771].z) * _1801);
    uvec4 _1817 = floatBitsToUint(cbLight._m0[_1744 + 12u]);
    bool _1819 = _1817.x == 0u;
    float _1830;
    float _1832;
    float _1834;
    if (_1819)
    {
        _1830 = _1810;
        _1832 = _1811;
        _1834 = _1812;
    }
    else
    {
        uint _1838 = _1744 + 6u;
        float _1854 = (dot(vec3(cbLight._m0[_1744 + 2u].xyz), vec3(_455, _456, _457)) * 0.5) + 0.5;
        float _1855 = _1854 * _1854;
        float _3949 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1857 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _1830 = (((cbLight._m0[_1838].x * 0.3183098733425140380859375) * _1856) * _1857) + _1810;
        _1832 = (((cbLight._m0[_1838].y * 0.3183098733425140380859375) * _1856) * _1857) + _1811;
        _1834 = (((cbLight._m0[_1838].z * 0.3183098733425140380859375) * _1856) * _1857) + _1812;
    }
    bool _1837 = _1817.y == 0u;
    float _1875;
    float _1877;
    float _1879;
    if (_1837)
    {
        _1875 = _1830;
        _1877 = _1832;
        _1879 = _1834;
    }
    else
    {
        uint _2045 = _1744 + 7u;
        float _2061 = (dot(vec3(cbLight._m0[_1744 + 3u].xyz), vec3(_455, _456, _457)) * 0.5) + 0.5;
        float _2062 = _2061 * _2061;
        float _3965 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2063 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _2064 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _1875 = (((cbLight._m0[_2045].x * 0.3183098733425140380859375) * _2063) * _2064) + _1830;
        _1877 = (((cbLight._m0[_2045].y * 0.3183098733425140380859375) * _2063) * _2064) + _1832;
        _1879 = (((cbLight._m0[_2045].z * 0.3183098733425140380859375) * _2063) * _2064) + _1834;
    }
    uint _1882 = _1744 + 8u;
    float _1895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1744].w)) * _458) * 0.949999988079071044921875);
    float _1896 = _1895 * _1895;
    float _1897 = cbLight._m0[_1744].x + _535;
    float _1898 = cbLight._m0[_1744].y + _536;
    float _1899 = cbLight._m0[_1744].z + _537;
    float _1903 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
    float _1904 = _1903 * _1897;
    float _1905 = _1903 * _1898;
    float _1906 = _1903 * _1899;
    float _1907 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_1744].xyz));
    float _3981 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _1911 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _1912 = dot(vec3(_455, _456, _457), vec3(_1904, _1905, _1906));
    float _4003 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1916 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1904, _1905, _1906));
    float _4014 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1920 = _1896 * _1896;
    float _1924 = ((_1915 * _1915) * (_1920 + (-1.0))) + 1.0;
    float _1932 = exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0);
    float _1933 = 0.959999978542327880859375 - _607;
    float _1935 = 0.959999978542327880859375 - _608;
    float _1936 = 0.959999978542327880859375 - _609;
    float _1943 = 1.0 - _1896;
    float _1954 = (0.5 / (((_1911 * ((_1910 * _1943) + _1896)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _1943) + _1896) * _1910))) * _1910;
    float _4025 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1956 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1920 / ((_1924 * _1924) * 3.141590118408203125));
    uint _1967 = _1744 + 9u;
    float _1978 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _458) * 0.949999988079071044921875);
    float _1979 = _1978 * _1978;
    float _1980 = cbLight._m0[_1782].x + _535;
    float _1981 = cbLight._m0[_1782].y + _536;
    float _1982 = cbLight._m0[_1782].z + _537;
    float _1986 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
    float _1987 = _1986 * _1980;
    float _1988 = _1986 * _1981;
    float _1989 = _1986 * _1982;
    float _1990 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_1782].xyz));
    float _4036 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _1994 = dot(vec3(_455, _456, _457), vec3(_1987, _1988, _1989));
    float _4047 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _1998 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_1987, _1988, _1989));
    float _4058 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2002 = _1979 * _1979;
    float _2006 = ((_1997 * _1997) * (_2002 + (-1.0))) + 1.0;
    float _2013 = exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0);
    float _2020 = 1.0 - _1979;
    float _2030 = (0.5 / (((_1911 * ((_1993 * _2020) + _1979)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2020) + _1979) * _1993))) * _1993;
    float _4069 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2032 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2002 / ((_2006 * _2006) * 3.141590118408203125));
    float _2042 = (((((_2013 * _1933) + _610) * cbLight._m0[_1967].x) * _2032) * _1767) + (((((_1932 * _1933) + _610) * cbLight._m0[_1882].x) * _1956) * _1778);
    float _2043 = (((((_2013 * _1935) + _612) * cbLight._m0[_1967].y) * _2032) * _1767) + (((((_1932 * _1935) + _612) * cbLight._m0[_1882].y) * _1956) * _1778);
    float _2044 = (((((_2013 * _1936) + _613) * cbLight._m0[_1967].z) * _2032) * _1767) + (((((_1932 * _1936) + _613) * cbLight._m0[_1882].z) * _1956) * _1778);
    float _2106;
    float _2108;
    float _2110;
    if (_1819)
    {
        _2106 = _2042;
        _2108 = _2043;
        _2110 = _2044;
    }
    else
    {
        uint _2112 = _1744 + 2u;
        uint _2116 = _1744 + 10u;
        float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _458) * 0.949999988079071044921875);
        float _2131 = _2130 * _2130;
        float _2132 = cbLight._m0[_2112].x + _535;
        float _2133 = cbLight._m0[_2112].y + _536;
        float _2134 = cbLight._m0[_2112].z + _537;
        float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
        float _2139 = _2138 * _2132;
        float _2140 = _2138 * _2133;
        float _2141 = _2138 * _2134;
        float _2142 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_2112].xyz));
        float _4080 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2146 = dot(vec3(_455, _456, _457), vec3(_2139, _2140, _2141));
        float _4091 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2150 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2139, _2140, _2141));
        float _4102 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2154 = _2131 * _2131;
        float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
        float _2165 = exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0);
        float _2172 = 1.0 - _2131;
        float _2182 = (0.5 / (((_1911 * ((_2145 * _2172) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2172) + _2131) * _2145))) * _2145;
        float _4113 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2184 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
        float _2185 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _2106 = (((((_2165 * _1933) + _610) * cbLight._m0[_2116].x) * _2184) * _2185) + _2042;
        _2108 = (((((_2165 * _1935) + _612) * cbLight._m0[_2116].y) * _2184) * _2185) + _2043;
        _2110 = (((((_2165 * _1936) + _613) * cbLight._m0[_2116].z) * _2184) * _2185) + _2044;
    }
    float _2220;
    float _2222;
    float _2224;
    if (_1837)
    {
        _2220 = _2106;
        _2222 = _2108;
        _2224 = _2110;
    }
    else
    {
        uint _2231 = _1744 + 3u;
        uint _2235 = _1744 + 11u;
        float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _458) * 0.949999988079071044921875);
        float _2250 = _2249 * _2249;
        float _2251 = cbLight._m0[_2231].x + _535;
        float _2252 = cbLight._m0[_2231].y + _536;
        float _2253 = cbLight._m0[_2231].z + _537;
        float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
        float _2258 = _2257 * _2251;
        float _2259 = _2257 * _2252;
        float _2260 = _2257 * _2253;
        float _2261 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_2231].xyz));
        float _4129 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2265 = dot(vec3(_455, _456, _457), vec3(_2258, _2259, _2260));
        float _4140 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2269 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2258, _2259, _2260));
        float _4151 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2273 = _2250 * _2250;
        float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
        float _2284 = exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0);
        float _2291 = 1.0 - _2250;
        float _2301 = (0.5 / (((_1911 * ((_2264 * _2291) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2291) + _2250) * _2264))) * _2264;
        float _4162 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2303 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
        float _2304 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _2220 = (((((_2284 * _1933) + _610) * cbLight._m0[_2235].x) * _2303) * _2304) + _2106;
        _2222 = (((((_2284 * _1935) + _612) * cbLight._m0[_2235].y) * _2303) * _2304) + _2108;
        _2224 = (((((_2284 * _1936) + _613) * cbLight._m0[_2235].z) * _2303) * _2304) + _2110;
    }
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    if (_1742.y == 0u)
    {
        float _2379 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2380 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2379;
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2379;
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2379;
        uvec4 _2394 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2395 = _2394.x;
        uint _2406 = uint((float(_2394.y) * floor(float(uint(cbSceneParam._m0[85u].y * _544) / _2395))) + floor(float(uint(cbSceneParam._m0[85u].x * _543) / _2395)));
        float _2416 = (log2(_2382 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2417 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        uint _2420 = uint(isnan(14.0) ? _2417 : (isnan(_2417) ? 14.0 : min(_2417, 14.0)));
        uvec4 _2425 = texelFetch(g_lightClusterGridBuffer, int(((_2420 << 2u) + (_2406 << 6u)) >> 2u));
        uint _2426 = _2425.x;
        uint _2427 = _2394.z;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        if (((((1u << ((_2427 >> 4u) & 15u)) + 4294967295u) & _2426) == 0u) || ((_2427 & 240u) == 0u))
        {
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
            _2536 = 0.0;
        }
        else
        {
            float _2527;
            float _2529;
            float _2531;
            float _2533;
            float _2535;
            float _2537;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            uint _2676 = 0u;
            uint _2685;
            bool _2686;
            for (;;)
            {
                _2685 = texelFetch(g_lightClassification, int((((_2420 << 5u) + (_2406 << 9u)) + (_2676 << 2u)) >> 2u)).x;
                _2686 = _2685 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2686)
                {
                    frontier_phi_72_pred = _2674;
                    frontier_phi_72_pred_1 = _2673;
                    frontier_phi_72_pred_2 = _2672;
                    frontier_phi_72_pred_3 = _2671;
                    frontier_phi_72_pred_4 = _2670;
                    frontier_phi_72_pred_5 = _2675;
                }
                else
                {
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    uint _2800;
                    _2794 = _2670;
                    _2795 = _2671;
                    _2796 = _2672;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2685;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    for (;;)
                    {
                        uint _2804 = uint(findLSB(_2800)) + (_2676 << 5u);
                        uint _2801 = (_2800 + 4294967295u) & _2800;
                        uint _2806 = _2804 * 48u;
                        vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 3u)).x));
                        uint _2826 = (_2804 * 48u) + 4u;
                        vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 3u)).x));
                        uint _2845 = (_2804 * 48u) + 8u;
                        vec3 _2856 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x));
                        float _2860 = _2820.x - _2380;
                        float _2861 = _2820.y - _2381;
                        float _2862 = _2820.z - _2382;
                        float _2863 = dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862));
                        float _2866 = inversesqrt(_2863);
                        float _2867 = _2866 * _2860;
                        float _2868 = _2866 * _2861;
                        float _2869 = _2866 * _2862;
                        float _2870 = dot(vec3(_565, _568, _571), vec3(_2867, _2868, _2869));
                        float _2875 = 1.0 - (_2863 * _2820.w);
                        float _4188 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2876 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2877 = sqrt(_2863) * _2839.w;
                        float _2880 = 1.39999997615814208984375 / (_2877 + 1.39999997615814208984375);
                        float _2881 = _2880 * _2880;
                        float _2884 = ((1.0 - _2881) * _2870) + _2881;
                        float _2887 = _2877 * _2877;
                        float _2891 = ((isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0))) * _2876) / ((_2887 * 0.699999988079071044921875) + 1.0);
                        float _2895 = (-0.0) - _2380;
                        float _2896 = (-0.0) - _2381;
                        float _2897 = (-0.0) - _2382;
                        float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
                        float _2902 = _2901 * _2895;
                        float _2903 = _2901 * _2896;
                        float _2904 = _2901 * _2897;
                        float _2912 = exp2(log2(1.0 / ((_2887 * 3.5) + 5.0)) * 0.25);
                        float _2913 = 1.0 - _642;
                        float _2920 = sqrt(1.0 - ((1.0 - (_2913 * _2913)) * (1.0 - (_2912 * _2912))));
                        float _2921 = _2920 * _2920;
                        float _2922 = _2921 * _2921;
                        float _2923 = _2902 + _2867;
                        float _2924 = _2903 + _2868;
                        float _2925 = _2904 + _2869;
                        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                        float _2933 = dot(vec3(_565, _568, _571), vec3(_2902, _2903, _2904));
                        float _4204 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2936 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2937 = dot(vec3(_565, _568, _571), vec3(_2929 * _2923, _2929 * _2924, _2929 * _2925));
                        float _4215 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2940 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2944 = ((_2940 * _2940) * (_2922 + (-1.0))) + 1.0;
                        float _2945 = _2880 * _2921;
                        float _2946 = _2945 * _2945;
                        float _2949 = ((1.0 - _2946) * _2870) + _2946;
                        float _4226 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2950 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2951 = 1.0 - _2921;
                        float _2961 = (0.5 / (((_2950 * ((_2936 * _2951) + _2921)) + 9.9999999392252902907785028219223e-09) + (((_2950 * _2951) + _2921) * _2936))) * _2950;
                        float _4237 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2972 = (((_2922 * 3.1415927410125732421875) * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) / ((_2944 * _2944) * ((_2887 * 2.1991131305694580078125) + 3.141590118408203125))) * _2876;
                        _2729 = (_2891 * _2839.x) + _2797;
                        _2730 = (_2891 * _2839.y) + _2798;
                        _2731 = (_2891 * _2839.z) + _2799;
                        _2726 = (_2972 * _2856.x) + _2794;
                        _2727 = (_2972 * _2856.y) + _2795;
                        _2728 = (_2972 * _2856.z) + _2796;
                        if (_2801 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2794 = _2726;
                            _2795 = _2727;
                            _2796 = _2728;
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2801;
                        }
                    }
                    frontier_phi_72_pred = _2730;
                    frontier_phi_72_pred_1 = _2729;
                    frontier_phi_72_pred_2 = _2728;
                    frontier_phi_72_pred_3 = _2727;
                    frontier_phi_72_pred_4 = _2726;
                    frontier_phi_72_pred_5 = _2731;
                }
                _2535 = frontier_phi_72_pred;
                _2533 = frontier_phi_72_pred_1;
                _2531 = frontier_phi_72_pred_2;
                _2529 = frontier_phi_72_pred_3;
                _2527 = frontier_phi_72_pred_4;
                _2537 = frontier_phi_72_pred_5;
                uint _2677 = _2676 + 1u;
                if (_2677 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2670 = _2527;
                    _2671 = _2529;
                    _2672 = _2531;
                    _2673 = _2533;
                    _2674 = _2535;
                    _2675 = _2537;
                    _2676 = _2677;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
            _2536 = _2537;
        }
        uvec4 _2540 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2541 = _2540.z;
        uint _2543 = (_2541 >> 8u) & 15u;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        if (((4294967295u << _2543) & _2426) == 0u)
        {
            _2638 = _2526;
            _2640 = _2528;
            _2642 = _2530;
            _2644 = _2532;
            _2646 = _2534;
            _2648 = _2536;
        }
        else
        {
            float _2663 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
            float _2664 = _2663 * _2380;
            float _2665 = _2663 * _2381;
            float _2666 = _2663 * _2382;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2543 < ((_2541 >> 12u) & 15u))
            {
                float _2639;
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2777 = _2526;
                float _2778 = _2528;
                float _2779 = _2530;
                float _2780 = _2532;
                float _2781 = _2534;
                float _2782 = _2536;
                uint _2783 = _2543;
                uint _2792;
                bool _2793;
                for (;;)
                {
                    _2792 = texelFetch(g_lightClassification, int((((_2420 << 5u) + (_2406 << 9u)) + (_2783 << 2u)) >> 2u)).x;
                    _2793 = _2792 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2793)
                    {
                        frontier_phi_78_pred = _2782;
                        frontier_phi_78_pred_1 = _2781;
                        frontier_phi_78_pred_2 = _2780;
                        frontier_phi_78_pred_3 = _2779;
                        frontier_phi_78_pred_4 = _2777;
                        frontier_phi_78_pred_5 = _2778;
                    }
                    else
                    {
                        float _2977;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _2990 = _2777;
                        float _2991 = _2778;
                        float _2992 = _2779;
                        float _2993 = _2780;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        uint _2996 = _2792;
                        uint _2997;
                        vec4 _3022;
                        float _3023;
                        vec4 _3038;
                        vec3 _3050;
                        vec4 _3066;
                        vec4 _3082;
                        float _3129;
                        bool _3130;
                        for (;;)
                        {
                            uint _3007 = ((_2783 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2996));
                            _2997 = (_2996 + 4294967295u) & _2996;
                            uint _3009 = _3007 * 40u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            _3023 = _3022.w;
                            uint _3025 = (_3007 * 40u) + 4u;
                            _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            uint _3040 = (_3007 * 40u) + 8u;
                            _3050 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x));
                            uint _3053 = (_3007 * 40u) + 16u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3069 = (_3007 * 40u) + 20u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3085 = (_3007 * 40u) + 24u;
                            vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3104 = (_3007 * 40u) + 28u;
                            vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            _3129 = fma(_2382, _3117.z, fma(_2381, _3117.y, _3117.x * _2380)) + _3117.w;
                            _3130 = !((fma(_2382, _3098.z, fma(_2381, _3098.y, _3098.x * _2380)) + _3098.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3130)
                            {
                                float _3157 = _3022.x - _2380;
                                float _3158 = _3022.y - _2381;
                                float _3159 = _3022.z - _2382;
                                float _3160 = dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159));
                                float _3163 = inversesqrt(_3160);
                                float _3164 = _3163 * _3157;
                                float _3165 = _3163 * _3158;
                                float _3166 = _3163 * _3159;
                                float _3170 = 1.0 - (_3160 / (_3023 * _3023));
                                float _4248 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3175 = sqrt(_3160) * _3038.w;
                                float _3177 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                                float _3178 = _3177 * _3177;
                                float _3181 = ((1.0 - _3178) * dot(vec3(_3164, _3165, _3166), vec3(_565, _568, _571))) + _3178;
                                float _3184 = _3175 * _3175;
                                float _3188 = (fma(_2382, _3066.z, fma(_2381, _3066.y, _3066.x * _2380)) + _3066.w) / _3129;
                                float _3189 = (fma(_2382, _3082.z, fma(_2381, _3082.y, _3082.x * _2380)) + _3082.w) / _3129;
                                float _3193 = 1.0 - dot(vec2(_3188, _3189), vec2(_3188, _3189));
                                float _4264 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3194 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3195 = _3194 * (((isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))) * _3171) / ((_3184 * 0.699999988079071044921875) + 1.0));
                                float _3207 = exp2(log2(1.0 / ((_3184 * 3.5) + 5.0)) * 0.25);
                                float _3208 = 1.0 - _642;
                                float _3215 = sqrt(1.0 - ((1.0 - (_3208 * _3208)) * (1.0 - (_3207 * _3207))));
                                float _3216 = _3215 * _3215;
                                float _3217 = _3216 * _3216;
                                float _3218 = _3164 - _2664;
                                float _3219 = _3165 - _2665;
                                float _3220 = _3166 - _2666;
                                float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                                float _3228 = dot(vec3(_565, _568, _571), vec3((-0.0) - _2664, (-0.0) - _2665, (-0.0) - _2666));
                                float _4275 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3231 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3232 = dot(vec3(_565, _568, _571), vec3(_3224 * _3218, _3224 * _3219, _3224 * _3220));
                                float _4286 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3235 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3239 = ((_3235 * _3235) * (_3217 + (-1.0))) + 1.0;
                                float _3240 = _3177 * _3216;
                                float _3241 = _3240 * _3240;
                                float _3247 = ((1.0 - _3241) * dot(vec3(_565, _568, _571), vec3(_3164, _3165, _3166))) + _3241;
                                float _4297 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3249 = 1.0 - _3216;
                                float _3259 = (0.5 / (((_3248 * ((_3231 * _3249) + _3216)) + 9.9999999392252902907785028219223e-09) + (((_3248 * _3249) + _3216) * _3231))) * _3248;
                                float _4308 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3269 = (_3194 * _3171) * (((_3217 * 3.1415927410125732421875) * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) / ((_3239 * _3239) * ((_3184 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3195 * _3038.y;
                                frontier_phi_84_pred_1 = _3195 * _3038.x;
                                frontier_phi_84_pred_2 = _3269 * _3050.z;
                                frontier_phi_84_pred_3 = _3269 * _3050.y;
                                frontier_phi_84_pred_4 = _3269 * _3050.x;
                                frontier_phi_84_pred_5 = _3195 * _3038.z;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3277 = frontier_phi_84_pred;
                            _3276 = frontier_phi_84_pred_1;
                            _3275 = frontier_phi_84_pred_2;
                            _3274 = frontier_phi_84_pred_3;
                            _3273 = frontier_phi_84_pred_4;
                            _3278 = frontier_phi_84_pred_5;
                            _2980 = _3276 + _2993;
                            _2981 = _3277 + _2994;
                            _2982 = _3278 + _2995;
                            _2977 = _3273 + _2990;
                            _2978 = _3274 + _2991;
                            _2979 = _3275 + _2992;
                            if (_2997 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2997;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2982;
                        frontier_phi_78_pred_1 = _2981;
                        frontier_phi_78_pred_2 = _2980;
                        frontier_phi_78_pred_3 = _2979;
                        frontier_phi_78_pred_4 = _2977;
                        frontier_phi_78_pred_5 = _2978;
                    }
                    _2649 = frontier_phi_78_pred;
                    _2647 = frontier_phi_78_pred_1;
                    _2645 = frontier_phi_78_pred_2;
                    _2643 = frontier_phi_78_pred_3;
                    _2639 = frontier_phi_78_pred_4;
                    _2641 = frontier_phi_78_pred_5;
                    uint _2784 = _2783 + 1u;
                    if (_2784 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2777 = _2639;
                        _2778 = _2641;
                        _2779 = _2643;
                        _2780 = _2645;
                        _2781 = _2647;
                        _2782 = _2649;
                        _2783 = _2784;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2649;
                frontier_phi_66_67_ladder_1 = _2647;
                frontier_phi_66_67_ladder_2 = _2645;
                frontier_phi_66_67_ladder_3 = _2643;
                frontier_phi_66_67_ladder_4 = _2641;
                frontier_phi_66_67_ladder_5 = _2639;
            }
            else
            {
                frontier_phi_66_67_ladder = _2536;
                frontier_phi_66_67_ladder_1 = _2534;
                frontier_phi_66_67_ladder_2 = _2532;
                frontier_phi_66_67_ladder_3 = _2530;
                frontier_phi_66_67_ladder_4 = _2528;
                frontier_phi_66_67_ladder_5 = _2526;
            }
            _2638 = frontier_phi_66_67_ladder_5;
            _2640 = frontier_phi_66_67_ladder_4;
            _2642 = frontier_phi_66_67_ladder_3;
            _2644 = frontier_phi_66_67_ladder_2;
            _2646 = frontier_phi_66_67_ladder_1;
            _2648 = frontier_phi_66_67_ladder;
        }
        float _2653 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
        _2438 = (_2653 * _2644) + _1875;
        _2440 = (_2653 * _2646) + _1877;
        _2442 = (_2653 * _2648) + _1879;
        _2444 = ((_2638 * _610) * _2653) + _2220;
        _2446 = ((_2640 * _612) * _2653) + _2222;
        _2448 = ((_2642 * _613) * _2653) + _2224;
    }
    else
    {
        _2438 = _1875;
        _2440 = _1877;
        _2442 = _1879;
        _2444 = _2220;
        _2446 = _2222;
        _2448 = _2224;
    }
    float _4324 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4335 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4346 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    uint _2468 = _584 + 6u;
    float _2476 = _543 / cbSceneParam._m0[86u].x;
    float _2477 = _544 / cbSceneParam._m0[86u].y;
    vec4 _2491 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2476, _2477, (log2((isnan(cbSceneParam._m0[77u].w) ? _479 : (isnan(_479) ? cbSceneParam._m0[77u].w : min(_479, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2493 = _2491.x;
    float _2494 = _2491.y;
    float _2495 = _2491.z;
    float _2496 = _2491.w;
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    if (_479 > cbSceneParam._m0[78u].w)
    {
        float _2551 = isnan(_479) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _479 : min(cbSceneParam._m0[80u].w, _479));
        float _2552 = _2551 / _479;
        float _2563 = _2552 * _528;
        float _2564 = _529 * _2552;
        float _2565 = (-0.0) - _2564;
        float _2566 = _2552 * _530;
        float _2568 = (cbSceneParam._m0[77u].w * _2565) / _2551;
        float _2569 = _2568 + cbSceneParam._m0[79u].w;
        float _2570 = cbSceneParam._m0[79u].w - _2564;
        float _2576 = sqrt(((_2563 * _2563) + (_2564 * _2564)) + (_2566 * _2566));
        float _2579 = (1.0 - (cbSceneParam._m0[77u].w / _2551)) * _2576;
        float _2584 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2586 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2739;
        if (abs((_2565 - _2568) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2739 = ((((_2569 > 0.0) ? exp2(_2584 * _2569) : (2.0 - exp2(_2586 * _2569))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2579;
        }
        else
        {
            float _2699 = 1.0 / cbSceneParam._m0[80u].x;
            float _2700 = isnan(_2570) ? _2569 : (isnan(_2569) ? _2570 : max(_2569, _2570));
            float _2701 = isnan(_2570) ? _2569 : (isnan(_2569) ? _2570 : min(_2569, _2570));
            float _2710 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : min(_2700, 0.0));
            float _2711 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : min(_2701, 0.0));
            _2739 = ((abs(_2576 / _2565) * cbSceneParam._m0[80u].y) * ((((_2710 - _2711) * 2.0) - ((exp2(_2584 * (isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0)))) - exp2(_2584 * (isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0))))) * _2699)) - ((exp2(_2586 * _2710) - exp2(_2586 * _2711)) * _2699))) + (_2579 * cbSceneParam._m0[80u].z);
        }
        vec4 _2741 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2476, _2477, 1.0), 0.0);
        float _2750 = exp2((_2739 * (-1.44269502162933349609375)) * (1.0 - _2741.w));
        float _2751 = log2(_2750);
        float _2767 = log2(_2496);
        _2588 = (exp2(_2767 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].x)) * _2741.x) / cbSceneParam._m0[78u].x)) + _2493;
        _2590 = (exp2(_2767 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].y)) * _2741.y) / cbSceneParam._m0[78u].y)) + _2494;
        _2592 = (exp2(_2767 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].z)) * _2741.z) / cbSceneParam._m0[78u].z)) + _2495;
        _2594 = _2750 * _2496;
    }
    else
    {
        _2588 = _2493;
        _2590 = _2494;
        _2592 = _2495;
        _2594 = _2496;
    }
    float _2606 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2607 = _2606 == 3.0;
    float _2608 = log2(_2594);
    float _2615 = exp2(_2608 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2438 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _626))) + ((_2444 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2616 = exp2(_2608 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2440 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _626))) + ((_2446 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2617 = exp2(_2608 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2442 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _626))) + ((_2448 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2626 = (_2606 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2626 * (_2607 ? _2615 : (_2615 + (cbSceneParam._m0[72u].w * _2588)));
    SV_Target.y = _2626 * (_2607 ? _2616 : (_2616 + (cbSceneParam._m0[72u].w * _2590)));
    SV_Target.z = _2626 * (_2607 ? _2617 : (_2617 + (cbSceneParam._m0[72u].w * _2592)));
    SV_Target.w = cbInstanceData._m0[_2468].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2468].w;
}


