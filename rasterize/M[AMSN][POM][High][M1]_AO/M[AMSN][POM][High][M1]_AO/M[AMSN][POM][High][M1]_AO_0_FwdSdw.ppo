#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1026;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _282 = dot(vec3(_271, _272, _273), vec3(_194, _195, _196));
    float _285 = dot(vec3(_271, _272, _273), vec3(_208, _209, _210));
    float _288 = dot(vec3(_271, _272, _273), vec3(_215, _216, _217));
    float _291 = (-0.0) - _282;
    float _292 = (-0.0) - _285;
    float _302 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _303 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _304 = (-0.0) - _271;
    float _305 = (-0.0) - _272;
    float _306 = (-0.0) - _273;
    float _311 = inversesqrt(dot(vec2(_291, _292), vec2(_291, _292)));
    float _315 = _288 * _288;
    float _317 = sqrt(((_285 * _285) + (_282 * _282)) + _315);
    float _321 = sqrt((_317 * _317) - _315) / ((-0.0) - _288);
    float _324 = ((cbMtdParam._m0[10u].y * _291) * _311) * _321;
    float _327 = ((cbMtdParam._m0[10u].y * _292) * _311) * _321;
    float _331 = inversesqrt(dot(vec3(_304, _305, _306), vec3(_304, _305, _306)));
    float _335 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _336 = dFdxCoarse(_302);
    float _337 = dFdxCoarse(_303);
    float _338 = dFdyCoarse(_302);
    float _339 = dFdyCoarse(_303);
    uvec2 _347 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _351 = float(_347.y) * (abs(_339) + abs(_337));
    float _353 = float(_347.x) * (abs(_338) + abs(_336));
    float _355 = log2(isnan(_351) ? _353 : (isnan(_353) ? _351 : max(_353, _351)));
    float _356 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _359;
    float _362;
    if (!(_356 <= 4.0))
    {
        _359 = _302;
        _362 = _303;
    }
    else
    {
        uint _722 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_331 * _304, _331 * _305, _331 * _306), vec3(_335 * _215, _335 * _216, _335 * _217))) * 12.0)))), int(32u)));
        float _725 = 1.0 / float(int(_722));
        float _726 = _725 * _324;
        float _727 = _725 * _327;
        float _1043;
        float _1045;
        float _1047;
        float _1049;
        if (int(_722) > int(0u))
        {
            float _1044;
            float _1046;
            float _1048;
            float _1050;
            uint _1496;
            float _1437 = 1.0;
            uint _1439 = 0u;
            float _1441 = _302;
            float _1443 = _303;
            float _1445 = 1.0;
            float _1447 = 0.0;
            float _1448 = 0.0;
            float _1449 = 0.0;
            float _1450 = 0.0;
            float _1438;
            float _1442;
            float _1444;
            float _1446;
            bool _1462;
            for (;;)
            {
                _1442 = _1441 - _726;
                _1444 = _1443 - _727;
                _1438 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_1442, _1444), vec2(_336, _337), vec2(_338, _339))), vec4(1.0, 0.0, 0.0, 0.0));
                _1446 = _1445 - _725;
                _1462 = _1438 > _1446;
                float frontier_phi_16_pred;
                float frontier_phi_16_pred_1;
                float frontier_phi_16_pred_2;
                float frontier_phi_16_pred_3;
                uint frontier_phi_16_pred_4;
                if (_1462)
                {
                    frontier_phi_16_pred = _1437;
                    frontier_phi_16_pred_1 = _1445;
                    frontier_phi_16_pred_2 = _1438;
                    frontier_phi_16_pred_3 = _1446;
                    frontier_phi_16_pred_4 = _722;
                }
                else
                {
                    frontier_phi_16_pred = _1450;
                    frontier_phi_16_pred_1 = _1449;
                    frontier_phi_16_pred_2 = _1448;
                    frontier_phi_16_pred_3 = _1447;
                    frontier_phi_16_pred_4 = _1439;
                }
                _1050 = frontier_phi_16_pred;
                _1048 = frontier_phi_16_pred_1;
                _1046 = frontier_phi_16_pred_2;
                _1044 = frontier_phi_16_pred_3;
                _1496 = frontier_phi_16_pred_4;
                uint _1440 = _1496 + 1u;
                if (int(_1440) < int(_722))
                {
                    _1437 = _1438;
                    _1439 = _1440;
                    _1441 = _1442;
                    _1443 = _1444;
                    _1445 = _1446;
                    _1447 = _1044;
                    _1448 = _1046;
                    _1449 = _1048;
                    _1450 = _1050;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1043 = _1044;
            _1045 = _1046;
            _1047 = _1048;
            _1049 = _1050;
        }
        else
        {
            _1043 = 0.0;
            _1045 = 0.0;
            _1047 = 0.0;
            _1049 = 0.0;
        }
        float _1051 = _1047 - _1049;
        float _1052 = _1043 - _1045;
        float _1058 = 1.0 - (((_1051 * _1043) - (_1047 * _1052)) / (_1051 - _1052));
        float _1059 = _1058 * _324;
        float _1060 = _1058 * _327;
        float _361 = _302 - _1059;
        float _364 = _303 - _1060;
        float frontier_phi_3_8_ladder;
        float frontier_phi_3_8_ladder_1;
        if (_356 > 3.0)
        {
            float _1464 = _356 - trunc(_356);
            frontier_phi_3_8_ladder = (_1464 * _1059) + _361;
            frontier_phi_3_8_ladder_1 = (_1464 * _1060) + _364;
        }
        else
        {
            frontier_phi_3_8_ladder = _361;
            frontier_phi_3_8_ladder_1 = _364;
        }
        _359 = frontier_phi_3_8_ladder;
        _362 = frontier_phi_3_8_ladder_1;
    }
    float _369 = ((_359 - _302) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _370 = ((_362 - _303) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _383 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _369) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _370) + cbTextureTilingScale._m0[3u].w));
    float _388 = _383.x * cbMtdParam._m0[9u].x;
    float _389 = _383.y * cbMtdParam._m0[9u].y;
    float _390 = _383.z * cbMtdParam._m0[9u].z;
    vec4 _402 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _404 = _402.x;
    vec4 _416 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _369) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _370) + cbTextureTilingScale._m0[1u].w));
    float _420 = _416.z;
    float _425 = (_416.x * 2.0) + (-1.0);
    float _427 = (_416.y * 2.0) + (-1.0);
    float _428 = dot(vec2(_425, _427), vec2(_425, _427));
    float _3725 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _434 = sqrt(1.0 - (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))));
    float _437 = fma(_434, _215, fma(_427, _208, _425 * _194));
    float _440 = fma(_434, _216, fma(_427, _209, _425 * _195));
    float _443 = fma(_434, _217, fma(_427, _210, _425 * _196));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    float _454 = cbMtdParam._m0[10u].x + _416.w;
    float _458 = inversesqrt(dot(vec3(_448, _449, _450), vec3(_448, _449, _450)));
    float _459 = _458 * _448;
    float _460 = _458 * _449;
    float _461 = _458 * _450;
    float _3736 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _462 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3758 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3769 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3780 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3791 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _467 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _483 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _532 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _523);
    float _533 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _523);
    float _534 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _523);
    float _538 = inversesqrt(dot(vec3(_532, _533, _534), vec3(_532, _533, _534)));
    float _539 = _532 * _538;
    float _540 = _533 * _538;
    float _541 = _534 * _538;
    float _547 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _548 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _569 = fma(_461, cbSceneParam._m0[5u].z, fma(_460, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _459));
    float _572 = fma(_461, cbSceneParam._m0[6u].z, fma(_460, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _459));
    float _575 = fma(_461, cbSceneParam._m0[7u].z, fma(_460, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _459));
    uint _588 = uint(roundEven(NORMAL.w)) * 13u;
    uint _591 = (_588 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _597 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_591].x;
    float _598 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_591].y;
    float _599 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_591].z;
    float _3802 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _603 = 1.0 - _467;
    float _604 = _600 * _603;
    float _605 = _601 * _603;
    float _606 = _602 * _603;
    float _611 = (_600 + (-0.039999999105930328369140625)) * _467;
    float _612 = (_601 + (-0.039999999105930328369140625)) * _467;
    float _613 = (_602 + (-0.039999999105930328369140625)) * _467;
    float _614 = _611 + 0.039999999105930328369140625;
    float _616 = _612 + 0.039999999105930328369140625;
    float _617 = _613 + 0.039999999105930328369140625;
    vec4 _626 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _547, cbSceneParam._m0[86u].y * _548));
    float _630 = ((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * TEXCOORD.z) * _626.x;
    float _631 = dot(vec3(_459, _460, _461), vec3(_539, _540, _541));
    float _634 = _631 * 2.0;
    float _638 = (_634 * _459) - _539;
    float _639 = (_634 * _460) - _540;
    float _640 = (_634 * _461) - _541;
    float _644 = abs(dot(vec3(_539, _540, _541), vec3(_459, _460, _461)));
    float _3835 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _646 = sqrt(_462);
    float _658 = exp2((_646 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_646 * 3.0));
    float _664 = (1.0 - _658) * ((_646 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _665 = _658 * _646;
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1025;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _750 = fma(_701, cbModelParam._m0[26u].z, fma(_697, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693));
        float _754 = fma(_701, cbModelParam._m0[27u].z, fma(_697, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693));
        float _758 = fma(_701, cbModelParam._m0[28u].z, fma(_697, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693));
        float _783 = _693 + _459;
        float _784 = _697 + _460;
        float _785 = _701 + _461;
        float _795 = fma(_785, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783)) - _750;
        float _796 = fma(_785, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783)) - _754;
        float _797 = fma(_785, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783)) - _758;
        float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
        float _814 = ((_801 * _795) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_750 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_801 * _796) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_754 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_801 * _797) / cbModelParam._m0[34u].z) + ((((((_758 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        float _853 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_819.x + (-0.5));
        float _855 = _853 * (_819.y + (-0.5));
        float _856 = _853 * (_819.z + (-0.5));
        float _863 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_826.x + (-0.5));
        float _865 = _863 * (_826.y + (-0.5));
        float _866 = _863 * (_826.z + (-0.5));
        float _873 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_833.x + (-0.5));
        float _875 = _873 * (_833.y + (-0.5));
        float _876 = _873 * (_833.z + (-0.5));
        float _883 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_840.x + (-0.5));
        float _885 = _883 * (_840.y + (-0.5));
        float _886 = _883 * (_840.z + (-0.5));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = _854 * 0.5;
        float _891 = _864 * 0.5;
        float _892 = _874 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _907 = (dot(vec3(_459, _460, _461), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _917 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3883 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_919 + 1.0))) + _924) * _887;
        float _934 = _855 * 0.5;
        float _935 = _865 * 0.5;
        float _936 = _875 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_459, _460, _461), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3916 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_961 + 1.0))) + _966) * _888;
        float _976 = _856 * 0.5;
        float _977 = _866 * 0.5;
        float _978 = _876 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_459, _460, _461), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3949 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1003 + 1.0))) + _1008) * _889;
        _1025 = _856;
        _1027 = _855;
        _1028 = _854;
        _1029 = _866;
        _1030 = _865;
        _1031 = _864;
        _1032 = _876;
        _1033 = _875;
        _1034 = _874;
        _1035 = _889;
        _1036 = _888;
        _1037 = _887;
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
    }
    else
    {
        _1025 = _1026;
        _1027 = _1026;
        _1028 = _1026;
        _1029 = _1026;
        _1030 = _1026;
        _1031 = _1026;
        _1032 = _1026;
        _1033 = _1026;
        _1034 = _1026;
        _1035 = _1026;
        _1036 = _1026;
        _1037 = _1026;
        _1038 = 0.0;
        _1039 = 0.0;
        _1040 = 0.0;
    }
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1084 = fma(_701, cbModelParam._m0[30u].z, fma(_697, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _693));
        float _1088 = fma(_701, cbModelParam._m0[31u].z, fma(_697, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _693));
        float _1092 = fma(_701, cbModelParam._m0[32u].z, fma(_697, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _693));
        float _1115 = _693 + _459;
        float _1116 = _697 + _460;
        float _1117 = _701 + _461;
        float _1127 = fma(_1117, cbModelParam._m0[30u].z, fma(_1116, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1115)) - _1084;
        float _1128 = fma(_1117, cbModelParam._m0[31u].z, fma(_1116, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1115)) - _1088;
        float _1129 = fma(_1117, cbModelParam._m0[32u].z, fma(_1116, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1115)) - _1092;
        float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
        float _1146 = ((_1133 * _1127) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1084 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1133 * _1128) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1088 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1133 * _1129) / cbModelParam._m0[35u].z) + ((((((_1092 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        float _1183 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1150.x + (-0.5));
        float _1185 = _1183 * (_1150.y + (-0.5));
        float _1186 = _1183 * (_1150.z + (-0.5));
        float _1193 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1157.x + (-0.5));
        float _1195 = _1193 * (_1157.y + (-0.5));
        float _1196 = _1193 * (_1157.z + (-0.5));
        float _1203 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1164.x + (-0.5));
        float _1205 = _1203 * (_1164.y + (-0.5));
        float _1206 = _1203 * (_1164.z + (-0.5));
        float _1213 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1171.x + (-0.5));
        float _1215 = _1213 * (_1171.y + (-0.5));
        float _1216 = _1213 * (_1171.z + (-0.5));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = _1184 * 0.5;
        float _1221 = _1194 * 0.5;
        float _1222 = _1204 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_459, _460, _461), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _4012 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1247 + 1.0))) + _1252) * _1217;
        float _1262 = _1185 * 0.5;
        float _1263 = _1195 * 0.5;
        float _1264 = _1205 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_459, _460, _461), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4045 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1289 + 1.0))) + _1294) * _1218;
        float _1304 = _1186 * 0.5;
        float _1305 = _1196 * 0.5;
        float _1306 = _1206 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_459, _460, _461), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4078 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1331 + 1.0))) + _1336) * _1219;
        _1353 = _1186;
        _1354 = _1185;
        _1355 = _1184;
        _1356 = _1196;
        _1357 = _1195;
        _1358 = _1194;
        _1359 = _1206;
        _1360 = _1205;
        _1361 = _1204;
        _1362 = _1219;
        _1363 = _1218;
        _1364 = _1217;
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
    }
    else
    {
        _1353 = _1026;
        _1354 = _1026;
        _1355 = _1026;
        _1356 = _1026;
        _1357 = _1026;
        _1358 = _1026;
        _1359 = _1026;
        _1360 = _1026;
        _1361 = _1026;
        _1362 = _1026;
        _1363 = _1026;
        _1364 = _1026;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1038)) + _1038;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1039)) + _1039;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1040)) + _1040;
    float _1400 = fma(_1379, cbSceneParam._m0[89u].z, fma(_1378, cbSceneParam._m0[89u].y, _1377 * cbSceneParam._m0[89u].x));
    float _1403 = fma(_1379, cbSceneParam._m0[90u].z, fma(_1378, cbSceneParam._m0[90u].y, _1377 * cbSceneParam._m0[90u].x));
    float _1406 = fma(_1379, cbSceneParam._m0[91u].z, fma(_1378, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1377));
    float _1421 = _638 * 0.5;
    float _1422 = _639 * 0.5;
    float _1423 = _640 * 0.5;
    float _1424 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1427 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1430 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1494;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1467 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1025, _1029, _1032, _1035));
        float _1471 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1475 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1482 = dot(vec4(cbModelParam._m0[39u]), vec4(_1421, _1422, _1423, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1482) ? 0.0 : (isnan(0.0) ? _1482 : max(0.0, _1482))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1507;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1498 = dot(vec4(cbModelParam._m0[40u]), vec4(_1421, _1422, _1423, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1498) ? 0.0 : (isnan(0.0) ? _1498 : max(0.0, _1498))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1511 = (_1507 * cbModelParam._m0[1u].x) + (_1494 * (1.0 - cbModelParam._m0[1u].x));
    float _1521 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _462);
    float _1522 = isnan(_1521) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1521 : min(cbModelParam._m0[25u].z, _1521));
    float _1604;
    float _1606;
    float _1608;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1571 = fma(_701, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693)) + cbModelParam._m0[13u].w;
        float _1575 = fma(_701, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693)) + cbModelParam._m0[14u].w;
        float _1579 = fma(_701, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693)) + cbModelParam._m0[15u].w;
        float _1582 = fma(_640, cbModelParam._m0[13u].z, fma(_639, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _638));
        float _1585 = fma(_640, cbModelParam._m0[14u].z, fma(_639, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _638));
        float _1588 = fma(_640, cbModelParam._m0[15u].z, fma(_639, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _638));
        float _1616;
        if (_1582 > 0.0)
        {
            _1616 = abs((1.0 - _1571) / _1582);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1571 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1616 = frontier_phi_25_23_ladder;
        }
        float _1792;
        if (_1585 > 0.0)
        {
            _1792 = abs((1.0 - _1575) / _1585);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1575 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1792 = frontier_phi_34_30_ladder;
        }
        float _2088;
        if (_1588 > 0.0)
        {
            _2088 = abs((1.0 - _1579) / _1588);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1579 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2088 = frontier_phi_46_41_ladder;
        }
        float _2090 = isnan(_1792) ? _1616 : (isnan(_1616) ? _1792 : min(_1616, _1792));
        float _2091 = isnan(_2088) ? _2090 : (isnan(_2090) ? _2088 : min(_2090, _2088));
        float _2095 = (_2091 * _1582) + _1571;
        float _2096 = (_2091 * _1585) + _1575;
        float _2097 = (_2091 * _1588) + _1579;
        float _2098 = _2091 * 9.9999997473787516355514526367188e-05;
        float _2100 = (-1.0) - _2098;
        float _2102 = _2098 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2097 > _2102) || ((_2097 < _2100) || ((_2096 > _2102) || ((_2096 < _2100) || ((_2095 < _2100) || (_2095 > _2102))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2242 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2097, cbModelParam._m0[9u].z, fma(_2096, cbModelParam._m0[9u].y, _2095 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2097, cbModelParam._m0[10u].z, fma(_2096, cbModelParam._m0[10u].y, _2095 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2097, cbModelParam._m0[11u].z, fma(_2096, cbModelParam._m0[11u].y, _2095 * cbModelParam._m0[11u].x))), _1522);
            frontier_phi_24_46_ladder = _2242.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2242.x * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2242.y * cbModelParam._m0[1u].y;
        }
        _1604 = frontier_phi_24_46_ladder_1;
        _1606 = frontier_phi_24_46_ladder_2;
        _1608 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1592 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_638, _639, _640), _1522);
        _1604 = _1592.x * cbModelParam._m0[1u].y;
        _1606 = _1592.y * cbModelParam._m0[1u].y;
        _1608 = _1592.z * cbModelParam._m0[1u].y;
    }
    float _1612 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _462);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1612 : min(cbModelParam._m0[25u].w, _1612));
    float _1706;
    float _1708;
    float _1710;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1670 = fma(_701, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693)) + cbModelParam._m0[21u].w;
        float _1674 = fma(_701, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693)) + cbModelParam._m0[22u].w;
        float _1678 = fma(_701, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693)) + cbModelParam._m0[23u].w;
        float _1681 = fma(_640, cbModelParam._m0[21u].z, fma(_639, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _638));
        float _1684 = fma(_640, cbModelParam._m0[22u].z, fma(_639, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _638));
        float _1687 = fma(_640, cbModelParam._m0[23u].z, fma(_639, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _638));
        float _1797;
        if (_1681 > 0.0)
        {
            _1797 = abs((1.0 - _1670) / _1681);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1670 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1797 = frontier_phi_36_32_ladder;
        }
        float _2115;
        if (_1684 > 0.0)
        {
            _2115 = abs((1.0 - _1674) / _1684);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1674 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2115 = frontier_phi_48_43_ladder;
        }
        float _2453;
        if (_1687 > 0.0)
        {
            _2453 = abs((1.0 - _1678) / _1687);
        }
        else
        {
            float frontier_phi_58_55_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_58_55_ladder = abs((_1678 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_58_55_ladder = 5000.0;
            }
            _2453 = frontier_phi_58_55_ladder;
        }
        float _2455 = isnan(_2115) ? _1797 : (isnan(_1797) ? _2115 : min(_1797, _2115));
        float _2456 = isnan(_2453) ? _2455 : (isnan(_2455) ? _2453 : min(_2455, _2453));
        float _2460 = (_2456 * _1681) + _1670;
        float _2461 = (_2456 * _1684) + _1674;
        float _2462 = (_2456 * _1687) + _1678;
        float _2463 = _2456 * 9.9999997473787516355514526367188e-05;
        float _2464 = (-1.0) - _2463;
        float _2466 = _2463 + 1.0;
        float frontier_phi_33_58_ladder;
        float frontier_phi_33_58_ladder_1;
        float frontier_phi_33_58_ladder_2;
        if ((_2462 > _2466) || ((_2462 < _2464) || ((_2461 > _2466) || ((_2461 < _2464) || ((_2460 < _2464) || (_2460 > _2466))))))
        {
            frontier_phi_33_58_ladder = 0.0;
            frontier_phi_33_58_ladder_1 = 0.0;
            frontier_phi_33_58_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2462, cbModelParam._m0[17u].z, fma(_2461, cbModelParam._m0[17u].y, _2460 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2462, cbModelParam._m0[18u].z, fma(_2461, cbModelParam._m0[18u].y, _2460 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2462, cbModelParam._m0[19u].z, fma(_2461, cbModelParam._m0[19u].y, _2460 * cbModelParam._m0[19u].x))), _1613);
            frontier_phi_33_58_ladder = _2584.z * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_1 = _2584.y * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_2 = _2584.x * cbModelParam._m0[1u].z;
        }
        _1706 = frontier_phi_33_58_ladder_2;
        _1708 = frontier_phi_33_58_ladder_1;
        _1710 = frontier_phi_33_58_ladder;
    }
    else
    {
        vec4 _1690 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_638, _639, _640), _1613);
        _1706 = _1690.x * cbModelParam._m0[1u].z;
        _1708 = _1690.y * cbModelParam._m0[1u].z;
        _1710 = _1690.z * cbModelParam._m0[1u].z;
    }
    float _1723 = (((_664 * _614) + _665) * _630) * ((cbModelParam._m0[1u].w * (_1706 - _1604)) + _1604);
    float _1725 = (((_664 * _616) + _665) * _630) * ((cbModelParam._m0[1u].w * (_1708 - _1606)) + _1606);
    float _1727 = (((_664 * _617) + _665) * _630) * ((cbModelParam._m0[1u].w * (_1710 - _1608)) + _1608);
    float _1730 = fma(_1727, cbSceneParam._m0[89u].z, fma(_1725, cbSceneParam._m0[89u].y, _1723 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1727, cbSceneParam._m0[90u].z, fma(_1725, cbSceneParam._m0[90u].y, _1723 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1727, cbSceneParam._m0[91u].z, fma(_1725, cbSceneParam._m0[91u].y, _1723 * cbSceneParam._m0[91u].x));
    float _1771 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1775 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1779 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1783 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1784 = _1771 / _1783;
    float _1785 = _1775 / _1783;
    float _1786 = _1779 / _1783;
    float _1933;
    float _1934;
    float _1935;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1813 = ((uint(_1786 > cbSceneParam._m0[59u].y) + uint(_1786 > cbSceneParam._m0[59u].x)) + uint(_1786 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1814 = _1813 + 43u;
        uint _1822 = _1813 + 44u;
        uint _1830 = _1813 + 45u;
        uint _1838 = _1813 + 46u;
        float _1849 = fma(_1783, cbSceneParam._m0[_1814].w, fma(_1779, cbSceneParam._m0[_1814].z, fma(_1775, cbSceneParam._m0[_1814].y, _1771 * cbSceneParam._m0[_1814].x)));
        float _1853 = fma(_1783, cbSceneParam._m0[_1822].w, fma(_1779, cbSceneParam._m0[_1822].z, fma(_1775, cbSceneParam._m0[_1822].y, _1771 * cbSceneParam._m0[_1822].x)));
        float _1861 = fma(_1783, cbSceneParam._m0[_1838].w, fma(_1779, cbSceneParam._m0[_1838].z, fma(_1775, cbSceneParam._m0[_1838].y, _1771 * cbSceneParam._m0[_1838].x)));
        float _1866 = cbSceneParam._m0[33u].z * _1861;
        float _1868 = cbSceneParam._m0[33u].w * _1861;
        float _1871 = fma(_1783, cbSceneParam._m0[_1830].w, fma(_1779, cbSceneParam._m0[_1830].z, fma(_1775, cbSceneParam._m0[_1830].y, _1771 * cbSceneParam._m0[_1830].x))) / _1861;
        float _1919 = (cbSceneParam._m0[33u].x - sqrt(((_1785 * _1785) + (_1784 * _1784)) + (_1786 * _1786))) * cbSceneParam._m0[33u].y;
        float _4204 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1926 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1866 + _1849) / _1861, (_1868 + _1853) / _1861), _1871), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1868 + _1849) / _1861, (_1853 - _1866) / _1861), _1871), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1849 - _1866) / _1861, (_1853 - _1868) / _1861), _1871), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1849 - _1868) / _1861, (_1866 + _1853) / _1861), _1871), 0.0)).x), vec4(0.25)));
        _1933 = 1.0 - (_1926 * cbSceneParam._m0[34u].x);
        _1934 = 1.0 - (_1926 * cbSceneParam._m0[34u].y);
        _1935 = 1.0 - (_1926 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1933 = 1.0;
        _1934 = 1.0;
        _1935 = 1.0;
    }
    float _1999;
    float _2001;
    float _2003;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1987 = fma(_1783, cbSceneParam._m0[63u].w, fma(_1779, cbSceneParam._m0[63u].z, fma(_1775, cbSceneParam._m0[63u].y, _1771 * cbSceneParam._m0[63u].x)));
        float _1988 = fma(_1783, cbSceneParam._m0[60u].w, fma(_1779, cbSceneParam._m0[60u].z, fma(_1775, cbSceneParam._m0[60u].y, _1771 * cbSceneParam._m0[60u].x))) / _1987;
        float _1989 = fma(_1783, cbSceneParam._m0[61u].w, fma(_1779, cbSceneParam._m0[61u].z, fma(_1775, cbSceneParam._m0[61u].y, _1771 * cbSceneParam._m0[61u].x))) / _1987;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1988 >= cbSceneParam._m0[64u].x) && (_1989 >= cbSceneParam._m0[64u].y)) && (_1988 <= cbSceneParam._m0[64u].z)) && (_1989 <= cbSceneParam._m0[64u].w))
        {
            float _2128 = fma(_1783, cbSceneParam._m0[62u].w, fma(_1779, cbSceneParam._m0[62u].z, fma(_1775, cbSceneParam._m0[62u].y, _1771 * cbSceneParam._m0[62u].x))) / _1987;
            float _2132 = isnan(cbSceneParam._m0[41u].w) ? _2128 : (isnan(_2128) ? cbSceneParam._m0[41u].w : max(_2128, cbSceneParam._m0[41u].w));
            float _2175 = (cbSceneParam._m0[33u].x - sqrt(((_1785 * _1785) + (_1784 * _1784)) + (_1786 * _1786))) * cbSceneParam._m0[33u].y;
            float _4220 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
            float _2182 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1988, cbSceneParam._m0[33u].w + _1989), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1988, _1989 - cbSceneParam._m0[33u].z), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1988 - cbSceneParam._m0[33u].z, _1989 - cbSceneParam._m0[33u].w), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1988 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1989), _2132), 0.0)).x), vec4(0.25)));
            float _2186 = 1.0 - (_2182 * cbSceneParam._m0[34u].x);
            float _2187 = 1.0 - (_2182 * cbSceneParam._m0[34u].y);
            float _2188 = 1.0 - (_2182 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2188) ? _1935 : (isnan(_1935) ? _2188 : min(_1935, _2188));
            frontier_phi_45_44_ladder_1 = isnan(_2187) ? _1934 : (isnan(_1934) ? _2187 : min(_1934, _2187));
            frontier_phi_45_44_ladder_2 = isnan(_2186) ? _1933 : (isnan(_1933) ? _2186 : min(_1933, _2186));
        }
        else
        {
            frontier_phi_45_44_ladder = _1935;
            frontier_phi_45_44_ladder_1 = _1934;
            frontier_phi_45_44_ladder_2 = _1933;
        }
        _1999 = frontier_phi_45_44_ladder_2;
        _2001 = frontier_phi_45_44_ladder_1;
        _2003 = frontier_phi_45_44_ladder;
    }
    else
    {
        _1999 = _1933;
        _2001 = _1934;
        _2003 = _1935;
    }
    uvec4 _2008 = floatBitsToUint(cbInstanceData._m0[_588 + 5u]);
    uint _2010 = _2008.x * 14u;
    uint _2011 = _2010 + 13u;
    float _2018 = _630 + (-1.0);
    float _2023 = (cbLight._m0[_2011].x * _2018) + 1.0;
    float _2024 = (cbLight._m0[_2011].y * _2018) + 1.0;
    float _2025 = (cbLight._m0[_2011].z * _2018) + 1.0;
    float _2026 = (cbLight._m0[_2011].w * _2018) + 1.0;
    uint _2027 = _2010 + 5u;
    float _2033 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
    uint _2037 = _2010 + 4u;
    float _2047 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
    uint _2051 = _2010 | 1u;
    float _2062 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_459, _460, _461));
    float _2065 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_459, _460, _461));
    float _4256 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _4267 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2070 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.3183098733425140380859375;
    float _2072 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * 0.3183098733425140380859375;
    float _2079 = ((cbLight._m0[_2027].x * _2033) * _2072) + (((cbLight._m0[_2037].x * _1999) * _2047) * _2070);
    float _2080 = ((_2033 * cbLight._m0[_2027].y) * _2072) + (((cbLight._m0[_2037].y * _2001) * _2047) * _2070);
    float _2081 = ((_2033 * cbLight._m0[_2027].z) * _2072) + (((cbLight._m0[_2037].z * _2003) * _2047) * _2070);
    uvec4 _2085 = floatBitsToUint(cbLight._m0[_2010 + 12u]);
    bool _2087 = _2085.x == 0u;
    float _2189;
    float _2191;
    float _2193;
    if (_2087)
    {
        _2189 = _2079;
        _2191 = _2080;
        _2193 = _2081;
    }
    else
    {
        uint _2197 = _2010 + 6u;
        float _2213 = (dot(vec3(cbLight._m0[_2010 + 2u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _2214 = _2213 * _2213;
        float _4278 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2215 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2216 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2189 = (((cbLight._m0[_2197].x * 0.3183098733425140380859375) * _2215) * _2216) + _2079;
        _2191 = (((cbLight._m0[_2197].y * 0.3183098733425140380859375) * _2215) * _2216) + _2080;
        _2193 = (((cbLight._m0[_2197].z * 0.3183098733425140380859375) * _2215) * _2216) + _2081;
    }
    bool _2196 = _2085.y == 0u;
    float _2251;
    float _2253;
    float _2255;
    if (_2196)
    {
        _2251 = _2189;
        _2253 = _2191;
        _2255 = _2193;
    }
    else
    {
        uint _2424 = _2010 + 7u;
        float _2440 = (dot(vec3(cbLight._m0[_2010 + 3u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _2441 = _2440 * _2440;
        float _4294 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2442 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2443 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2251 = (((cbLight._m0[_2424].x * 0.3183098733425140380859375) * _2442) * _2443) + _2189;
        _2253 = (((cbLight._m0[_2424].y * 0.3183098733425140380859375) * _2442) * _2443) + _2191;
        _2255 = (((cbLight._m0[_2424].z * 0.3183098733425140380859375) * _2442) * _2443) + _2193;
    }
    uint _2258 = _2010 + 8u;
    float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _462) * 0.949999988079071044921875);
    float _2272 = _2271 * _2271;
    float _2273 = cbLight._m0[_2010].x + _539;
    float _2274 = cbLight._m0[_2010].y + _540;
    float _2275 = cbLight._m0[_2010].z + _541;
    float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
    float _2280 = _2279 * _2273;
    float _2281 = _2279 * _2274;
    float _2282 = _2279 * _2275;
    float _2283 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2010].xyz));
    float _4310 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _4321 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _2287 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _2288 = dot(vec3(_459, _460, _461), vec3(_2280, _2281, _2282));
    float _4332 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2292 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2280, _2281, _2282));
    float _4343 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2296 = _2272 * _2272;
    float _2300 = ((_2291 * _2291) * (_2296 + (-1.0))) + 1.0;
    float _2308 = exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0);
    float _2309 = 0.959999978542327880859375 - _611;
    float _2311 = 0.959999978542327880859375 - _612;
    float _2312 = 0.959999978542327880859375 - _613;
    float _2319 = 1.0 - _2272;
    float _2330 = (0.5 / (((_2287 * ((_2286 * _2319) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2319) + _2272) * _2286))) * _2286;
    float _4354 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2332 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2296 / ((_2300 * _2300) * 3.141590118408203125));
    uint _2346 = _2010 + 9u;
    float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _462) * 0.949999988079071044921875);
    float _2358 = _2357 * _2357;
    float _2359 = cbLight._m0[_2051].x + _539;
    float _2360 = cbLight._m0[_2051].y + _540;
    float _2361 = cbLight._m0[_2051].z + _541;
    float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
    float _2366 = _2365 * _2359;
    float _2367 = _2365 * _2360;
    float _2368 = _2365 * _2361;
    float _2369 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2051].xyz));
    float _4365 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2373 = dot(vec3(_459, _460, _461), vec3(_2366, _2367, _2368));
    float _4376 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2377 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2366, _2367, _2368));
    float _4387 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2381 = _2358 * _2358;
    float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
    float _2392 = exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0);
    float _2399 = 1.0 - _2358;
    float _2409 = (0.5 / (((_2287 * ((_2372 * _2399) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2399) + _2358) * _2372))) * _2372;
    float _4398 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2411 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
    float _2421 = (((((_2392 * _2309) + _614) * cbLight._m0[_2346].x) * _2411) * _2033) + ((((cbLight._m0[_2258].x * _1999) * ((_2308 * _2309) + _614)) * _2332) * _2047);
    float _2422 = (((((_2392 * _2311) + _616) * cbLight._m0[_2346].y) * _2411) * _2033) + ((((cbLight._m0[_2258].y * _2001) * ((_2308 * _2311) + _616)) * _2332) * _2047);
    float _2423 = (((((_2392 * _2312) + _617) * cbLight._m0[_2346].z) * _2411) * _2033) + ((((cbLight._m0[_2258].z * _2003) * ((_2308 * _2312) + _617)) * _2332) * _2047);
    float _2479;
    float _2481;
    float _2483;
    if (_2087)
    {
        _2479 = _2421;
        _2481 = _2422;
        _2483 = _2423;
    }
    else
    {
        uint _2485 = _2010 + 2u;
        uint _2489 = _2010 + 10u;
        float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2485].w)) * _462) * 0.949999988079071044921875);
        float _2504 = _2503 * _2503;
        float _2505 = cbLight._m0[_2485].x + _539;
        float _2506 = cbLight._m0[_2485].y + _540;
        float _2507 = cbLight._m0[_2485].z + _541;
        float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
        float _2512 = _2511 * _2505;
        float _2513 = _2511 * _2506;
        float _2514 = _2511 * _2507;
        float _2515 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2485].xyz));
        float _4409 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2519 = dot(vec3(_459, _460, _461), vec3(_2512, _2513, _2514));
        float _4420 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2523 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_2512, _2513, _2514));
        float _4431 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2527 = _2504 * _2504;
        float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
        float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) * 5.0);
        float _2545 = 1.0 - _2504;
        float _2555 = (0.5 / (((_2287 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2545) + _2504) * _2518))) * _2518;
        float _4442 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2557 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
        float _2558 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2479 = (((((_2538 * _2309) + _614) * cbLight._m0[_2489].x) * _2557) * _2558) + _2421;
        _2481 = (((((_2538 * _2311) + _616) * cbLight._m0[_2489].y) * _2557) * _2558) + _2422;
        _2483 = (((((_2538 * _2312) + _617) * cbLight._m0[_2489].z) * _2557) * _2558) + _2423;
    }
    float _2589;
    float _2591;
    float _2593;
    if (_2196)
    {
        _2589 = _2479;
        _2591 = _2481;
        _2593 = _2483;
    }
    else
    {
        uint _2600 = _2010 + 3u;
        uint _2604 = _2010 + 11u;
        float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2600].w)) * _462) * 0.949999988079071044921875);
        float _2619 = _2618 * _2618;
        float _2620 = cbLight._m0[_2600].x + _539;
        float _2621 = cbLight._m0[_2600].y + _540;
        float _2622 = cbLight._m0[_2600].z + _541;
        float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
        float _2627 = _2626 * _2620;
        float _2628 = _2626 * _2621;
        float _2629 = _2626 * _2622;
        float _2630 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2600].xyz));
        float _4458 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2634 = dot(vec3(_459, _460, _461), vec3(_2627, _2628, _2629));
        float _4469 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2638 = dot(vec3(cbLight._m0[_2600].xyz), vec3(_2627, _2628, _2629));
        float _4480 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2642 = _2619 * _2619;
        float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
        float _2653 = exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0);
        float _2660 = 1.0 - _2619;
        float _2670 = (0.5 / (((_2287 * ((_2633 * _2660) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2660) + _2619) * _2633))) * _2633;
        float _4491 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2672 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
        float _2673 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2589 = (((((_2653 * _2309) + _614) * cbLight._m0[_2604].x) * _2672) * _2673) + _2479;
        _2591 = (((((_2653 * _2311) + _616) * cbLight._m0[_2604].y) * _2672) * _2673) + _2481;
        _2593 = (((((_2653 * _2312) + _617) * cbLight._m0[_2604].z) * _2672) * _2673) + _2483;
    }
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    if (_2008.y == 0u)
    {
        uvec4 _2694 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2695 = _2694.x;
        uint _2706 = uint((float(_2694.y) * floor(float(uint(cbSceneParam._m0[85u].y * _548) / _2695))) + floor(float(uint(cbSceneParam._m0[85u].x * _547) / _2695)));
        float _2716 = (log2(_1786 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2717 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        uint _2720 = uint(isnan(14.0) ? _2717 : (isnan(_2717) ? 14.0 : min(_2717, 14.0)));
        uvec4 _2725 = texelFetch(g_lightClusterGridBuffer, int(((_2720 << 2u) + (_2706 << 6u)) >> 2u));
        uint _2726 = _2725.x;
        uint _2727 = _2694.z;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        if (((((1u << ((_2727 >> 4u) & 15u)) + 4294967295u) & _2726) == 0u) || ((_2727 & 240u) == 0u))
        {
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
        }
        else
        {
            float _2806;
            float _2808;
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            uint _2955 = 0u;
            uint _2964;
            bool _2965;
            for (;;)
            {
                _2964 = texelFetch(g_lightClassification, int((((_2720 << 5u) + (_2706 << 9u)) + (_2955 << 2u)) >> 2u)).x;
                _2965 = _2964 == 0u;
                float frontier_phi_77_pred;
                float frontier_phi_77_pred_1;
                float frontier_phi_77_pred_2;
                float frontier_phi_77_pred_3;
                float frontier_phi_77_pred_4;
                float frontier_phi_77_pred_5;
                if (_2965)
                {
                    frontier_phi_77_pred = _2954;
                    frontier_phi_77_pred_1 = _2953;
                    frontier_phi_77_pred_2 = _2952;
                    frontier_phi_77_pred_3 = _2951;
                    frontier_phi_77_pred_4 = _2950;
                    frontier_phi_77_pred_5 = _2949;
                }
                else
                {
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    uint _3079;
                    _3073 = _2949;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2964;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    for (;;)
                    {
                        uint _3083 = uint(findLSB(_3079)) + (_2955 << 5u);
                        uint _3080 = (_3079 + 4294967295u) & _3079;
                        uint _3085 = _3083 * 48u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3105 = (_3083 * 48u) + 4u;
                        vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 3u)).x));
                        uint _3124 = (_3083 * 48u) + 8u;
                        vec3 _3135 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x));
                        float _3139 = _3099.x - _1784;
                        float _3140 = _3099.y - _1785;
                        float _3141 = _3099.z - _1786;
                        float _3142 = dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141));
                        float _3145 = inversesqrt(_3142);
                        float _3146 = _3145 * _3139;
                        float _3147 = _3145 * _3140;
                        float _3148 = _3145 * _3141;
                        float _3149 = dot(vec3(_569, _572, _575), vec3(_3146, _3147, _3148));
                        float _3154 = 1.0 - (_3142 * _3099.w);
                        float _4517 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3155 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3156 = sqrt(_3142) * _3118.w;
                        float _3159 = 1.39999997615814208984375 / (_3156 + 1.39999997615814208984375);
                        float _3160 = _3159 * _3159;
                        float _3163 = ((1.0 - _3160) * _3149) + _3160;
                        float _3166 = _3156 * _3156;
                        float _3170 = ((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3155) / ((_3166 * 0.699999988079071044921875) + 1.0);
                        float _3174 = (-0.0) - _1784;
                        float _3175 = (-0.0) - _1785;
                        float _3176 = (-0.0) - _1786;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3181 = _3180 * _3174;
                        float _3182 = _3180 * _3175;
                        float _3183 = _3180 * _3176;
                        float _3190 = exp2(log2(1.0 / ((_3166 * 3.5) + 5.0)) * 0.25);
                        float _3191 = 1.0 - _646;
                        float _3198 = sqrt(1.0 - ((1.0 - (_3191 * _3191)) * (1.0 - (_3190 * _3190))));
                        float _3199 = _3198 * _3198;
                        float _3200 = _3199 * _3199;
                        float _3201 = _3181 + _3146;
                        float _3202 = _3182 + _3147;
                        float _3203 = _3183 + _3148;
                        float _3207 = inversesqrt(dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203)));
                        float _3211 = dot(vec3(_569, _572, _575), vec3(_3181, _3182, _3183));
                        float _4533 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3214 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3215 = dot(vec3(_569, _572, _575), vec3(_3207 * _3201, _3207 * _3202, _3207 * _3203));
                        float _4544 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3218 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3222 = ((_3218 * _3218) * (_3200 + (-1.0))) + 1.0;
                        float _3223 = _3159 * _3199;
                        float _3224 = _3223 * _3223;
                        float _3227 = ((1.0 - _3224) * _3149) + _3224;
                        float _4555 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3228 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3229 = 1.0 - _3199;
                        float _3239 = (0.5 / (((_3228 * ((_3214 * _3229) + _3199)) + 9.9999999392252902907785028219223e-09) + (((_3228 * _3229) + _3199) * _3214))) * _3228;
                        float _4566 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3250 = (((_3200 * 3.1415927410125732421875) * (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) / ((_3222 * _3222) * ((_3166 * 2.1991131305694580078125) + 3.141590118408203125))) * _3155;
                        _3008 = (_3170 * _3118.x) + _3076;
                        _3009 = (_3170 * _3118.y) + _3077;
                        _3010 = (_3170 * _3118.z) + _3078;
                        _3005 = (_3250 * _3135.x) + _3073;
                        _3006 = (_3250 * _3135.y) + _3074;
                        _3007 = (_3250 * _3135.z) + _3075;
                        if (_3080 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3073 = _3005;
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3080;
                        }
                    }
                    frontier_phi_77_pred = _3010;
                    frontier_phi_77_pred_1 = _3009;
                    frontier_phi_77_pred_2 = _3008;
                    frontier_phi_77_pred_3 = _3007;
                    frontier_phi_77_pred_4 = _3006;
                    frontier_phi_77_pred_5 = _3005;
                }
                _2816 = frontier_phi_77_pred;
                _2814 = frontier_phi_77_pred_1;
                _2812 = frontier_phi_77_pred_2;
                _2810 = frontier_phi_77_pred_3;
                _2808 = frontier_phi_77_pred_4;
                _2806 = frontier_phi_77_pred_5;
                uint _2956 = _2955 + 1u;
                if (_2956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2949 = _2806;
                    _2950 = _2808;
                    _2951 = _2810;
                    _2952 = _2812;
                    _2953 = _2814;
                    _2954 = _2816;
                    _2955 = _2956;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
        }
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.z;
        uint _2822 = (_2820 >> 8u) & 15u;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        if (((4294967295u << _2822) & _2726) == 0u)
        {
            _2917 = _2805;
            _2919 = _2807;
            _2921 = _2809;
            _2923 = _2811;
            _2925 = _2813;
            _2927 = _2815;
        }
        else
        {
            float _2942 = inversesqrt(dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786)));
            float _2943 = _2942 * _1784;
            float _2944 = _2942 * _1785;
            float _2945 = _2942 * _1786;
            float frontier_phi_71_72_ladder;
            float frontier_phi_71_72_ladder_1;
            float frontier_phi_71_72_ladder_2;
            float frontier_phi_71_72_ladder_3;
            float frontier_phi_71_72_ladder_4;
            float frontier_phi_71_72_ladder_5;
            if (_2822 < ((_2820 >> 12u) & 15u))
            {
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _3056 = _2805;
                float _3057 = _2807;
                float _3058 = _2809;
                float _3059 = _2811;
                float _3060 = _2813;
                float _3061 = _2815;
                uint _3062 = _2822;
                uint _3071;
                bool _3072;
                for (;;)
                {
                    _3071 = texelFetch(g_lightClassification, int((((_2720 << 5u) + (_2706 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                    _3072 = _3071 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_3072)
                    {
                        frontier_phi_83_pred = _3061;
                        frontier_phi_83_pred_1 = _3060;
                        frontier_phi_83_pred_2 = _3059;
                        frontier_phi_83_pred_3 = _3057;
                        frontier_phi_83_pred_4 = _3058;
                        frontier_phi_83_pred_5 = _3056;
                    }
                    else
                    {
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3268 = _3056;
                        float _3269 = _3057;
                        float _3270 = _3058;
                        float _3271 = _3059;
                        float _3272 = _3060;
                        float _3273 = _3061;
                        uint _3274 = _3071;
                        uint _3275;
                        vec4 _3300;
                        float _3301;
                        vec4 _3316;
                        vec3 _3328;
                        vec4 _3344;
                        vec4 _3360;
                        float _3407;
                        bool _3408;
                        for (;;)
                        {
                            uint _3285 = ((_3062 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3274));
                            _3275 = (_3274 + 4294967295u) & _3274;
                            uint _3287 = _3285 * 40u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            _3301 = _3300.w;
                            uint _3303 = (_3285 * 40u) + 4u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3318 = (_3285 * 40u) + 8u;
                            _3328 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x));
                            uint _3331 = (_3285 * 40u) + 16u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3347 = (_3285 * 40u) + 20u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3363 = (_3285 * 40u) + 24u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3382 = (_3285 * 40u) + 28u;
                            vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3407 = fma(_1786, _3395.z, fma(_1785, _3395.y, _3395.x * _1784)) + _3395.w;
                            _3408 = !((fma(_1786, _3376.z, fma(_1785, _3376.y, _3376.x * _1784)) + _3376.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3408)
                            {
                                float _3435 = _3300.x - _1784;
                                float _3436 = _3300.y - _1785;
                                float _3437 = _3300.z - _1786;
                                float _3438 = dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437));
                                float _3441 = inversesqrt(_3438);
                                float _3442 = _3441 * _3435;
                                float _3443 = _3441 * _3436;
                                float _3444 = _3441 * _3437;
                                float _3448 = 1.0 - (_3438 / (_3301 * _3301));
                                float _4577 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3453 = sqrt(_3438) * _3316.w;
                                float _3455 = 1.39999997615814208984375 / (_3453 + 1.39999997615814208984375);
                                float _3456 = _3455 * _3455;
                                float _3459 = ((1.0 - _3456) * dot(vec3(_3442, _3443, _3444), vec3(_569, _572, _575))) + _3456;
                                float _3462 = _3453 * _3453;
                                float _3466 = (fma(_1786, _3344.z, fma(_1785, _3344.y, _3344.x * _1784)) + _3344.w) / _3407;
                                float _3467 = (fma(_1786, _3360.z, fma(_1785, _3360.y, _3360.x * _1784)) + _3360.w) / _3407;
                                float _3471 = 1.0 - dot(vec2(_3466, _3467), vec2(_3466, _3467));
                                float _4593 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3473 = _3472 * (((isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0))) * _3449) / ((_3462 * 0.699999988079071044921875) + 1.0));
                                float _3485 = exp2(log2(1.0 / ((_3462 * 3.5) + 5.0)) * 0.25);
                                float _3486 = 1.0 - _646;
                                float _3493 = sqrt(1.0 - ((1.0 - (_3486 * _3486)) * (1.0 - (_3485 * _3485))));
                                float _3494 = _3493 * _3493;
                                float _3495 = _3494 * _3494;
                                float _3496 = _3442 - _2943;
                                float _3497 = _3443 - _2944;
                                float _3498 = _3444 - _2945;
                                float _3502 = inversesqrt(dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498)));
                                float _3506 = dot(vec3(_569, _572, _575), vec3((-0.0) - _2943, (-0.0) - _2944, (-0.0) - _2945));
                                float _4604 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3509 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3510 = dot(vec3(_569, _572, _575), vec3(_3502 * _3496, _3502 * _3497, _3502 * _3498));
                                float _4615 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3513 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3517 = ((_3513 * _3513) * (_3495 + (-1.0))) + 1.0;
                                float _3518 = _3455 * _3494;
                                float _3519 = _3518 * _3518;
                                float _3525 = ((1.0 - _3519) * dot(vec3(_569, _572, _575), vec3(_3442, _3443, _3444))) + _3519;
                                float _4626 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3527 = 1.0 - _3494;
                                float _3537 = (0.5 / (((_3526 * ((_3509 * _3527) + _3494)) + 9.9999999392252902907785028219223e-09) + (((_3526 * _3527) + _3494) * _3509))) * _3526;
                                float _4637 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3547 = (_3472 * _3449) * (((_3495 * 3.1415927410125732421875) * (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) / ((_3517 * _3517) * ((_3462 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3473 * _3316.z;
                                frontier_phi_89_pred_1 = _3473 * _3316.y;
                                frontier_phi_89_pred_2 = _3473 * _3316.x;
                                frontier_phi_89_pred_3 = _3547 * _3328.z;
                                frontier_phi_89_pred_4 = _3547 * _3328.y;
                                frontier_phi_89_pred_5 = _3547 * _3328.x;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3556 = frontier_phi_89_pred;
                            _3555 = frontier_phi_89_pred_1;
                            _3554 = frontier_phi_89_pred_2;
                            _3553 = frontier_phi_89_pred_3;
                            _3552 = frontier_phi_89_pred_4;
                            _3551 = frontier_phi_89_pred_5;
                            _3258 = _3554 + _3271;
                            _3259 = _3555 + _3272;
                            _3260 = _3556 + _3273;
                            _3255 = _3551 + _3268;
                            _3256 = _3552 + _3269;
                            _3257 = _3553 + _3270;
                            if (_3275 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3275;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _3260;
                        frontier_phi_83_pred_1 = _3259;
                        frontier_phi_83_pred_2 = _3258;
                        frontier_phi_83_pred_3 = _3256;
                        frontier_phi_83_pred_4 = _3257;
                        frontier_phi_83_pred_5 = _3255;
                    }
                    _2928 = frontier_phi_83_pred;
                    _2926 = frontier_phi_83_pred_1;
                    _2924 = frontier_phi_83_pred_2;
                    _2920 = frontier_phi_83_pred_3;
                    _2922 = frontier_phi_83_pred_4;
                    _2918 = frontier_phi_83_pred_5;
                    uint _3063 = _3062 + 1u;
                    if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3056 = _2918;
                        _3057 = _2920;
                        _3058 = _2922;
                        _3059 = _2924;
                        _3060 = _2926;
                        _3061 = _2928;
                        _3062 = _3063;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_71_72_ladder = _2926;
                frontier_phi_71_72_ladder_1 = _2924;
                frontier_phi_71_72_ladder_2 = _2922;
                frontier_phi_71_72_ladder_3 = _2920;
                frontier_phi_71_72_ladder_4 = _2918;
                frontier_phi_71_72_ladder_5 = _2928;
            }
            else
            {
                frontier_phi_71_72_ladder = _2813;
                frontier_phi_71_72_ladder_1 = _2811;
                frontier_phi_71_72_ladder_2 = _2809;
                frontier_phi_71_72_ladder_3 = _2807;
                frontier_phi_71_72_ladder_4 = _2805;
                frontier_phi_71_72_ladder_5 = _2815;
            }
            _2917 = frontier_phi_71_72_ladder_4;
            _2919 = frontier_phi_71_72_ladder_3;
            _2921 = frontier_phi_71_72_ladder_2;
            _2923 = frontier_phi_71_72_ladder_1;
            _2925 = frontier_phi_71_72_ladder;
            _2927 = frontier_phi_71_72_ladder_5;
        }
        float _2932 = isnan(1.0) ? _630 : (isnan(_630) ? 1.0 : min(_630, 1.0));
        _2738 = (_2932 * _2923) + _2251;
        _2740 = (_2932 * _2925) + _2253;
        _2742 = (_2932 * _2927) + _2255;
        _2744 = ((_2917 * _614) * _2932) + _2589;
        _2746 = ((_2919 * _616) * _2932) + _2591;
        _2748 = ((_2921 * _617) * _2932) + _2593;
    }
    else
    {
        _2738 = _2251;
        _2740 = _2253;
        _2742 = _2255;
        _2744 = _2589;
        _2746 = _2591;
        _2748 = _2593;
    }
    float _4653 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4664 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4675 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    uint _2768 = _588 + 6u;
    float _2776 = _547 / cbSceneParam._m0[86u].x;
    float _2777 = _548 / cbSceneParam._m0[86u].y;
    vec4 _2791 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2776, _2777, (log2((isnan(cbSceneParam._m0[77u].w) ? _483 : (isnan(_483) ? cbSceneParam._m0[77u].w : min(_483, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2793 = _2791.x;
    float _2794 = _2791.y;
    float _2795 = _2791.z;
    float _2796 = _2791.w;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    if (_483 > cbSceneParam._m0[78u].w)
    {
        float _2830 = isnan(_483) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _483 : min(cbSceneParam._m0[80u].w, _483));
        float _2831 = _2830 / _483;
        float _2842 = _2831 * _532;
        float _2843 = _533 * _2831;
        float _2844 = (-0.0) - _2843;
        float _2845 = _2831 * _534;
        float _2847 = (cbSceneParam._m0[77u].w * _2844) / _2830;
        float _2848 = _2847 + cbSceneParam._m0[79u].w;
        float _2849 = cbSceneParam._m0[79u].w - _2843;
        float _2855 = sqrt(((_2842 * _2842) + (_2843 * _2843)) + (_2845 * _2845));
        float _2858 = (1.0 - (cbSceneParam._m0[77u].w / _2830)) * _2855;
        float _2863 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2865 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3018;
        if (abs((_2844 - _2847) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3018 = ((((_2848 > 0.0) ? exp2(_2863 * _2848) : (2.0 - exp2(_2865 * _2848))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2858;
        }
        else
        {
            float _2978 = 1.0 / cbSceneParam._m0[80u].x;
            float _2979 = isnan(_2849) ? _2848 : (isnan(_2848) ? _2849 : max(_2848, _2849));
            float _2980 = isnan(_2849) ? _2848 : (isnan(_2848) ? _2849 : min(_2848, _2849));
            float _2989 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : min(_2979, 0.0));
            float _2990 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : min(_2980, 0.0));
            _3018 = ((abs(_2855 / _2844) * cbSceneParam._m0[80u].y) * ((((_2989 - _2990) * 2.0) - ((exp2(_2863 * (isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0)))) - exp2(_2863 * (isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))))) * _2978)) - ((exp2(_2865 * _2989) - exp2(_2865 * _2990)) * _2978))) + (_2858 * cbSceneParam._m0[80u].z);
        }
        vec4 _3020 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2776, _2777, 1.0), 0.0);
        float _3029 = exp2((_3018 * (-1.44269502162933349609375)) * (1.0 - _3020.w));
        float _3030 = log2(_3029);
        float _3046 = log2(_2796);
        _2867 = (exp2(_3046 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3030 * cbSceneParam._m0[78u].x)) * _3020.x) / cbSceneParam._m0[78u].x)) + _2793;
        _2869 = (exp2(_3046 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3030 * cbSceneParam._m0[78u].y)) * _3020.y) / cbSceneParam._m0[78u].y)) + _2794;
        _2871 = (exp2(_3046 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3030 * cbSceneParam._m0[78u].z)) * _3020.z) / cbSceneParam._m0[78u].z)) + _2795;
        _2873 = _3029 * _2796;
    }
    else
    {
        _2867 = _2793;
        _2869 = _2794;
        _2871 = _2795;
        _2873 = _2796;
    }
    float _2885 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2886 = _2885 == 3.0;
    float _2887 = log2(_2873);
    float _2894 = exp2(_2887 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2738 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _630))) + ((_2744 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1511)) * cbPerFrame._m0[3u].x));
    float _2895 = exp2(_2887 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2740 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _630))) + ((_2746 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1511)) * cbPerFrame._m0[3u].x));
    float _2896 = exp2(_2887 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2742 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _630))) + ((_2748 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1511)) * cbPerFrame._m0[3u].x));
    float _2905 = (_2885 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2905 * (_2886 ? _2894 : (_2894 + (cbSceneParam._m0[72u].w * _2867)));
    SV_Target.y = _2905 * (_2886 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2869)));
    SV_Target.z = _2905 * (_2886 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2871)));
    SV_Target.w = cbInstanceData._m0[_2768].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2768].w;
}


