#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _989;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    float _278 = dot(vec3(_267, _268, _269), vec3(_190, _191, _192));
    float _281 = dot(vec3(_267, _268, _269), vec3(_204, _205, _206));
    float _284 = dot(vec3(_267, _268, _269), vec3(_211, _212, _213));
    float _287 = (-0.0) - _278;
    float _288 = (-0.0) - _281;
    float _298 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _299 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _300 = (-0.0) - _267;
    float _301 = (-0.0) - _268;
    float _302 = (-0.0) - _269;
    float _307 = inversesqrt(dot(vec2(_287, _288), vec2(_287, _288)));
    float _311 = _284 * _284;
    float _313 = sqrt(((_281 * _281) + (_278 * _278)) + _311);
    float _317 = sqrt((_313 * _313) - _311) / ((-0.0) - _284);
    float _320 = ((cbMtdParam._m0[10u].y * _287) * _307) * _317;
    float _323 = ((cbMtdParam._m0[10u].y * _288) * _307) * _317;
    float _327 = inversesqrt(dot(vec3(_300, _301, _302), vec3(_300, _301, _302)));
    float _331 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _332 = dFdxCoarse(_298);
    float _333 = dFdxCoarse(_299);
    float _334 = dFdyCoarse(_298);
    float _335 = dFdyCoarse(_299);
    uvec2 _343 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _347 = float(_343.y) * (abs(_335) + abs(_333));
    float _349 = float(_343.x) * (abs(_334) + abs(_332));
    float _351 = log2(isnan(_347) ? _349 : (isnan(_349) ? _347 : max(_349, _347)));
    float _352 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _355;
    float _358;
    if (!(_352 <= 4.0))
    {
        _355 = _298;
        _358 = _299;
    }
    else
    {
        uint _685 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_327 * _300, _327 * _301, _327 * _302), vec3(_331 * _211, _331 * _212, _331 * _213))) * 12.0)))), int(32u)));
        float _688 = 1.0 / float(int(_685));
        float _689 = _688 * _320;
        float _690 = _688 * _323;
        float _1006;
        float _1008;
        float _1010;
        float _1012;
        if (int(_685) > int(0u))
        {
            float _1007;
            float _1009;
            float _1011;
            float _1013;
            uint _1459;
            float _1400 = 1.0;
            uint _1402 = 0u;
            float _1404 = _298;
            float _1406 = _299;
            float _1408 = 1.0;
            float _1410 = 0.0;
            float _1411 = 0.0;
            float _1412 = 0.0;
            float _1413 = 0.0;
            float _1401;
            float _1405;
            float _1407;
            float _1409;
            bool _1425;
            for (;;)
            {
                _1405 = _1404 - _689;
                _1407 = _1406 - _690;
                _1401 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_1405, _1407), vec2(_332, _333), vec2(_334, _335))), vec4(1.0, 0.0, 0.0, 0.0));
                _1409 = _1408 - _688;
                _1425 = _1401 > _1409;
                float frontier_phi_16_pred;
                float frontier_phi_16_pred_1;
                float frontier_phi_16_pred_2;
                float frontier_phi_16_pred_3;
                uint frontier_phi_16_pred_4;
                if (_1425)
                {
                    frontier_phi_16_pred = _1400;
                    frontier_phi_16_pred_1 = _1408;
                    frontier_phi_16_pred_2 = _1401;
                    frontier_phi_16_pred_3 = _1409;
                    frontier_phi_16_pred_4 = _685;
                }
                else
                {
                    frontier_phi_16_pred = _1413;
                    frontier_phi_16_pred_1 = _1412;
                    frontier_phi_16_pred_2 = _1411;
                    frontier_phi_16_pred_3 = _1410;
                    frontier_phi_16_pred_4 = _1402;
                }
                _1013 = frontier_phi_16_pred;
                _1011 = frontier_phi_16_pred_1;
                _1009 = frontier_phi_16_pred_2;
                _1007 = frontier_phi_16_pred_3;
                _1459 = frontier_phi_16_pred_4;
                uint _1403 = _1459 + 1u;
                if (int(_1403) < int(_685))
                {
                    _1400 = _1401;
                    _1402 = _1403;
                    _1404 = _1405;
                    _1406 = _1407;
                    _1408 = _1409;
                    _1410 = _1007;
                    _1411 = _1009;
                    _1412 = _1011;
                    _1413 = _1013;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1006 = _1007;
            _1008 = _1009;
            _1010 = _1011;
            _1012 = _1013;
        }
        else
        {
            _1006 = 0.0;
            _1008 = 0.0;
            _1010 = 0.0;
            _1012 = 0.0;
        }
        float _1014 = _1010 - _1012;
        float _1015 = _1006 - _1008;
        float _1021 = 1.0 - (((_1014 * _1006) - (_1010 * _1015)) / (_1014 - _1015));
        float _1022 = _1021 * _320;
        float _1023 = _1021 * _323;
        float _357 = _298 - _1022;
        float _360 = _299 - _1023;
        float frontier_phi_3_8_ladder;
        float frontier_phi_3_8_ladder_1;
        if (_352 > 3.0)
        {
            float _1427 = _352 - trunc(_352);
            frontier_phi_3_8_ladder = (_1427 * _1023) + _360;
            frontier_phi_3_8_ladder_1 = (_1427 * _1022) + _357;
        }
        else
        {
            frontier_phi_3_8_ladder = _360;
            frontier_phi_3_8_ladder_1 = _357;
        }
        _355 = frontier_phi_3_8_ladder_1;
        _358 = frontier_phi_3_8_ladder;
    }
    float _365 = ((_355 - _298) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _366 = ((_358 - _299) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _379 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _365) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _366) + cbTextureTilingScale._m0[3u].w));
    float _384 = _379.x * cbMtdParam._m0[9u].x;
    float _385 = _379.y * cbMtdParam._m0[9u].y;
    float _386 = _379.z * cbMtdParam._m0[9u].z;
    vec4 _398 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _365) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _366) + cbTextureTilingScale._m0[1u].w));
    float _402 = _398.z;
    float _407 = (_398.x * 2.0) + (-1.0);
    float _409 = (_398.y * 2.0) + (-1.0);
    float _410 = dot(vec2(_407, _409), vec2(_407, _409));
    float _3408 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _416 = sqrt(1.0 - (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))));
    float _419 = fma(_416, _211, fma(_409, _204, _407 * _190));
    float _422 = fma(_416, _212, fma(_409, _205, _407 * _191));
    float _425 = fma(_416, _213, fma(_409, _206, _407 * _192));
    float _429 = inversesqrt(dot(vec3(_419, _422, _425), vec3(_419, _422, _425)));
    float _430 = _429 * _419;
    float _431 = _429 * _422;
    float _432 = _429 * _425;
    float _436 = cbMtdParam._m0[10u].x + _398.w;
    float _440 = inversesqrt(dot(vec3(_430, _431, _432), vec3(_430, _431, _432)));
    float _441 = _440 * _430;
    float _442 = _440 * _431;
    float _443 = _440 * _432;
    float _3419 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _444 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3441 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3452 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3463 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _464 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _513 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _504);
    float _514 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _504);
    float _515 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _504);
    float _519 = inversesqrt(dot(vec3(_513, _514, _515), vec3(_513, _514, _515)));
    float _520 = _513 * _519;
    float _521 = _514 * _519;
    float _522 = _515 * _519;
    float _528 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _529 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _550 = fma(_443, cbSceneParam._m0[5u].z, fma(_442, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _441));
    float _553 = fma(_443, cbSceneParam._m0[6u].z, fma(_442, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _441));
    float _556 = fma(_443, cbSceneParam._m0[7u].z, fma(_442, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _441));
    uint _569 = uint(roundEven(NORMAL.w)) * 13u;
    uint _572 = (_569 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _578 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_572].x;
    float _579 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_572].y;
    float _580 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_572].z;
    float _3474 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    vec4 _592 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _528, cbSceneParam._m0[86u].y * _529));
    float _596 = ((isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * TEXCOORD.z) * _592.x;
    float _597 = dot(vec3(_441, _442, _443), vec3(_520, _521, _522));
    float _600 = _597 * 2.0;
    float _604 = (_600 * _441) - _520;
    float _605 = (_600 * _442) - _521;
    float _606 = (_600 * _443) - _522;
    float _610 = abs(dot(vec3(_520, _521, _522), vec3(_441, _442, _443)));
    float _3507 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _612 = sqrt(_444);
    float _624 = exp2((_612 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_612 * 3.0));
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _988;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _713 = fma(_664, cbModelParam._m0[26u].z, fma(_660, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _656));
        float _717 = fma(_664, cbModelParam._m0[27u].z, fma(_660, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _656));
        float _721 = fma(_664, cbModelParam._m0[28u].z, fma(_660, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _656));
        float _746 = _656 + _441;
        float _747 = _660 + _442;
        float _748 = _664 + _443;
        float _758 = fma(_748, cbModelParam._m0[26u].z, fma(_747, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _746)) - _713;
        float _759 = fma(_748, cbModelParam._m0[27u].z, fma(_747, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _746)) - _717;
        float _760 = fma(_748, cbModelParam._m0[28u].z, fma(_747, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _746)) - _721;
        float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
        float _777 = ((_764 * _758) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_713 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _778 = ((_764 * _759) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_717 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _779 = ((_764 * _760) / cbModelParam._m0[34u].z) + ((((((_721 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_777, _778, _779), 0.0);
        float _816 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_782.x + (-0.5));
        float _818 = _816 * (_782.y + (-0.5));
        float _819 = _816 * (_782.z + (-0.5));
        float _826 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_789.x + (-0.5));
        float _828 = _826 * (_789.y + (-0.5));
        float _829 = _826 * (_789.z + (-0.5));
        float _836 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_796.x + (-0.5));
        float _838 = _836 * (_796.y + (-0.5));
        float _839 = _836 * (_796.z + (-0.5));
        float _846 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_803.x + (-0.5));
        float _848 = _846 * (_803.y + (-0.5));
        float _849 = _846 * (_803.z + (-0.5));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = _817 * 0.5;
        float _854 = _827 * 0.5;
        float _855 = _837 * 0.5;
        float _856 = dot(vec3(_853, _854, _855), vec3(_853, _854, _855));
        float _861 = (_856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_856);
        float _870 = (dot(vec3(_441, _442, _443), vec3(_861 * _853, _861 * _854, _861 * _855)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _880 = sqrt(((_854 * _854) + (_853 * _853)) + (_855 * _855)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _882 = _881 * 2.0;
        float _886 = (1.0 - _881) / (_881 + 1.0);
        float _3555 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _896 = ((((1.0 - _887) * (_882 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_882 + 1.0))) + _887) * _850;
        float _897 = _818 * 0.5;
        float _898 = _828 * 0.5;
        float _899 = _838 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _913 = (dot(vec3(_441, _442, _443), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _922 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3588 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_924 + 1.0))) + _929) * _851;
        float _939 = _819 * 0.5;
        float _940 = _829 * 0.5;
        float _941 = _839 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _955 = (dot(vec3(_441, _442, _443), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _964 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3621 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_966 + 1.0))) + _971) * _852;
        _988 = _819;
        _990 = _818;
        _991 = _817;
        _992 = _829;
        _993 = _828;
        _994 = _827;
        _995 = _839;
        _996 = _838;
        _997 = _837;
        _998 = _852;
        _999 = _851;
        _1000 = _850;
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)));
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
    }
    else
    {
        _988 = _989;
        _990 = _989;
        _991 = _989;
        _992 = _989;
        _993 = _989;
        _994 = _989;
        _995 = _989;
        _996 = _989;
        _997 = _989;
        _998 = _989;
        _999 = _989;
        _1000 = _989;
        _1001 = 0.0;
        _1002 = 0.0;
        _1003 = 0.0;
    }
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1047 = fma(_664, cbModelParam._m0[30u].z, fma(_660, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _656));
        float _1051 = fma(_664, cbModelParam._m0[31u].z, fma(_660, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _656));
        float _1055 = fma(_664, cbModelParam._m0[32u].z, fma(_660, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _656));
        float _1078 = _656 + _441;
        float _1079 = _660 + _442;
        float _1080 = _664 + _443;
        float _1090 = fma(_1080, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1078)) - _1047;
        float _1091 = fma(_1080, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1078)) - _1051;
        float _1092 = fma(_1080, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1078)) - _1055;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1047 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1051 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[35u].z) + ((((((_1055 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1146 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1113.x + (-0.5));
        float _1148 = _1146 * (_1113.y + (-0.5));
        float _1149 = _1146 * (_1113.z + (-0.5));
        float _1156 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1120.x + (-0.5));
        float _1158 = _1156 * (_1120.y + (-0.5));
        float _1159 = _1156 * (_1120.z + (-0.5));
        float _1166 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1127.x + (-0.5));
        float _1168 = _1166 * (_1127.y + (-0.5));
        float _1169 = _1166 * (_1127.z + (-0.5));
        float _1176 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1134.x + (-0.5));
        float _1178 = _1176 * (_1134.y + (-0.5));
        float _1179 = _1176 * (_1134.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_441, _442, _443), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3684 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1210 + 1.0))) + _1215) * _1180;
        float _1225 = _1148 * 0.5;
        float _1226 = _1158 * 0.5;
        float _1227 = _1168 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_441, _442, _443), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3717 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1252 + 1.0))) + _1257) * _1181;
        float _1267 = _1149 * 0.5;
        float _1268 = _1159 * 0.5;
        float _1269 = _1169 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_441, _442, _443), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3750 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1294 + 1.0))) + _1299) * _1182;
        _1316 = _1149;
        _1317 = _1148;
        _1318 = _1147;
        _1319 = _1159;
        _1320 = _1158;
        _1321 = _1157;
        _1322 = _1169;
        _1323 = _1168;
        _1324 = _1167;
        _1325 = _1182;
        _1326 = _1181;
        _1327 = _1180;
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _989;
        _1317 = _989;
        _1318 = _989;
        _1319 = _989;
        _1320 = _989;
        _1321 = _989;
        _1322 = _989;
        _1323 = _989;
        _1324 = _989;
        _1325 = _989;
        _1326 = _989;
        _1327 = _989;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1001)) + _1001;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1002)) + _1002;
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1003)) + _1003;
    float _1363 = fma(_1342, cbSceneParam._m0[89u].z, fma(_1341, cbSceneParam._m0[89u].y, _1340 * cbSceneParam._m0[89u].x));
    float _1366 = fma(_1342, cbSceneParam._m0[90u].z, fma(_1341, cbSceneParam._m0[90u].y, _1340 * cbSceneParam._m0[90u].x));
    float _1369 = fma(_1342, cbSceneParam._m0[91u].z, fma(_1341, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1340));
    float _1384 = _604 * 0.5;
    float _1385 = _605 * 0.5;
    float _1386 = _606 * 0.5;
    float _1387 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1390 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1393 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1457;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1430 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_988, _992, _995, _998));
        float _1434 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_990, _993, _996, _999));
        float _1438 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_991, _994, _997, _1000));
        float _1445 = dot(vec4(cbModelParam._m0[39u]), vec4(_1384, _1385, _1386, 1.0));
        _1457 = dot(vec3(isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1445) ? 0.0 : (isnan(0.0) ? _1445 : max(0.0, _1445))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1457 = 1.0;
    }
    float _1470;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1461 = dot(vec4(cbModelParam._m0[40u]), vec4(_1384, _1385, _1386, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1461) ? 0.0 : (isnan(0.0) ? _1461 : max(0.0, _1461))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1474 = (_1470 * cbModelParam._m0[1u].x) + (_1457 * (1.0 - cbModelParam._m0[1u].x));
    float _1484 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _444);
    float _1485 = isnan(_1484) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1484 : min(cbModelParam._m0[25u].z, _1484));
    float _1567;
    float _1569;
    float _1571;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1534 = fma(_664, cbModelParam._m0[13u].z, fma(_660, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _656)) + cbModelParam._m0[13u].w;
        float _1538 = fma(_664, cbModelParam._m0[14u].z, fma(_660, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _656)) + cbModelParam._m0[14u].w;
        float _1542 = fma(_664, cbModelParam._m0[15u].z, fma(_660, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _656)) + cbModelParam._m0[15u].w;
        float _1545 = fma(_606, cbModelParam._m0[13u].z, fma(_605, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _604));
        float _1548 = fma(_606, cbModelParam._m0[14u].z, fma(_605, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _604));
        float _1551 = fma(_606, cbModelParam._m0[15u].z, fma(_605, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _604));
        float _1579;
        if (_1545 > 0.0)
        {
            _1579 = abs((1.0 - _1534) / _1545);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1534 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1579 = frontier_phi_25_23_ladder;
        }
        float _1806;
        if (_1548 > 0.0)
        {
            _1806 = abs((1.0 - _1538) / _1548);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1538 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1806 = frontier_phi_34_30_ladder;
        }
        float _2052;
        if (_1551 > 0.0)
        {
            _2052 = abs((1.0 - _1542) / _1551);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1542 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2052 = frontier_phi_46_41_ladder;
        }
        float _2054 = isnan(_1806) ? _1579 : (isnan(_1579) ? _1806 : min(_1579, _1806));
        float _2055 = isnan(_2052) ? _2054 : (isnan(_2054) ? _2052 : min(_2054, _2052));
        float _2059 = (_2055 * _1545) + _1534;
        float _2060 = (_2055 * _1548) + _1538;
        float _2061 = (_2055 * _1551) + _1542;
        float _2062 = _2055 * 9.9999997473787516355514526367188e-05;
        float _2064 = (-1.0) - _2062;
        float _2066 = _2062 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2061 > _2066) || ((_2061 < _2064) || ((_2060 > _2066) || ((_2060 < _2064) || ((_2059 < _2064) || (_2059 > _2066))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2185 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2061, cbModelParam._m0[9u].z, fma(_2060, cbModelParam._m0[9u].y, _2059 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2061, cbModelParam._m0[10u].z, fma(_2060, cbModelParam._m0[10u].y, _2059 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2061, cbModelParam._m0[11u].z, fma(_2060, cbModelParam._m0[11u].y, _2059 * cbModelParam._m0[11u].x))), _1485);
            frontier_phi_24_46_ladder = _2185.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2185.x * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2185.z * cbModelParam._m0[1u].y;
        }
        _1567 = frontier_phi_24_46_ladder_1;
        _1569 = frontier_phi_24_46_ladder;
        _1571 = frontier_phi_24_46_ladder_2;
    }
    else
    {
        vec4 _1555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_604, _605, _606), _1485);
        _1567 = _1555.x * cbModelParam._m0[1u].y;
        _1569 = _1555.y * cbModelParam._m0[1u].y;
        _1571 = _1555.z * cbModelParam._m0[1u].y;
    }
    float _1575 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _444);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1575 : min(cbModelParam._m0[25u].w, _1575));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1633 = fma(_664, cbModelParam._m0[21u].z, fma(_660, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _656)) + cbModelParam._m0[21u].w;
        float _1637 = fma(_664, cbModelParam._m0[22u].z, fma(_660, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _656)) + cbModelParam._m0[22u].w;
        float _1641 = fma(_664, cbModelParam._m0[23u].z, fma(_660, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _656)) + cbModelParam._m0[23u].w;
        float _1644 = fma(_606, cbModelParam._m0[21u].z, fma(_605, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _604));
        float _1647 = fma(_606, cbModelParam._m0[22u].z, fma(_605, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _604));
        float _1650 = fma(_606, cbModelParam._m0[23u].z, fma(_605, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _604));
        float _1811;
        if (_1644 > 0.0)
        {
            _1811 = abs((1.0 - _1633) / _1644);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1633 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1811 = frontier_phi_36_32_ladder;
        }
        float _2079;
        if (_1647 > 0.0)
        {
            _2079 = abs((1.0 - _1637) / _1647);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1637 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2079 = frontier_phi_48_43_ladder;
        }
        float _2284;
        if (_1650 > 0.0)
        {
            _2284 = abs((1.0 - _1641) / _1650);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1641 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2284 = frontier_phi_57_54_ladder;
        }
        float _2286 = isnan(_2079) ? _1811 : (isnan(_1811) ? _2079 : min(_1811, _2079));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1644) + _1633;
        float _2292 = (_2287 * _1647) + _1637;
        float _2293 = (_2287 * _1650) + _1641;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2294;
        float _2297 = _2294 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2293 > _2297) || ((_2293 < _2295) || ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 < _2295) || (_2291 > _2297))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2491 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2293, cbModelParam._m0[17u].z, fma(_2292, cbModelParam._m0[17u].y, _2291 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2293, cbModelParam._m0[18u].z, fma(_2292, cbModelParam._m0[18u].y, _2291 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2293, cbModelParam._m0[19u].z, fma(_2292, cbModelParam._m0[19u].y, _2291 * cbModelParam._m0[19u].x))), _1576);
            frontier_phi_33_57_ladder = _2491.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2491.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2491.z * cbModelParam._m0[1u].z;
        }
        _1669 = frontier_phi_33_57_ladder_1;
        _1671 = frontier_phi_33_57_ladder;
        _1673 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1653 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_604, _605, _606), _1576);
        _1669 = _1653.x * cbModelParam._m0[1u].z;
        _1671 = _1653.y * cbModelParam._m0[1u].z;
        _1673 = _1653.z * cbModelParam._m0[1u].z;
    }
    float _1685 = ((((1.0 - _624) * ((_612 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_624 * _612)) * _596;
    float _1686 = _1685 * ((cbModelParam._m0[1u].w * (_1669 - _1567)) + _1567);
    float _1687 = _1685 * ((cbModelParam._m0[1u].w * (_1671 - _1569)) + _1569);
    float _1688 = _1685 * ((cbModelParam._m0[1u].w * (_1673 - _1571)) + _1571);
    float _1691 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, _1686 * cbSceneParam._m0[91u].x));
    vec4 _1705 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_528, _529));
    float _1707 = _1705.w;
    float _1719 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1707);
    float _1720 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1707);
    float _1721 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1707);
    uvec4 _1725 = floatBitsToUint(cbInstanceData._m0[_569 + 5u]);
    uint _1727 = _1725.x * 14u;
    uint _1728 = _1727 + 13u;
    float _1735 = _596 + (-1.0);
    float _1740 = (cbLight._m0[_1728].x * _1735) + 1.0;
    float _1741 = (cbLight._m0[_1728].y * _1735) + 1.0;
    float _1742 = (cbLight._m0[_1728].z * _1735) + 1.0;
    float _1743 = (cbLight._m0[_1728].w * _1735) + 1.0;
    uint _1744 = _1727 + 5u;
    float _1750 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
    uint _1754 = _1727 + 4u;
    float _1764 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
    uint _1768 = _1727 | 1u;
    float _1779 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_441, _442, _443));
    float _1782 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_441, _442, _443));
    float _3886 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _3897 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1787 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.3183098733425140380859375;
    float _1789 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
    float _1796 = ((cbLight._m0[_1744].x * _1750) * _1789) + (((cbLight._m0[_1754].x * _1719) * _1764) * _1787);
    float _1797 = ((_1750 * cbLight._m0[_1744].y) * _1789) + (((cbLight._m0[_1754].y * _1720) * _1764) * _1787);
    float _1798 = ((_1750 * cbLight._m0[_1744].z) * _1789) + (((cbLight._m0[_1754].z * _1721) * _1764) * _1787);
    uvec4 _1803 = floatBitsToUint(cbLight._m0[_1727 + 12u]);
    bool _1805 = _1803.x == 0u;
    float _1816;
    float _1818;
    float _1820;
    if (_1805)
    {
        _1816 = _1796;
        _1818 = _1797;
        _1820 = _1798;
    }
    else
    {
        uint _1824 = _1727 + 6u;
        float _1840 = (dot(vec3(cbLight._m0[_1727 + 2u].xyz), vec3(_441, _442, _443)) * 0.5) + 0.5;
        float _1841 = _1840 * _1840;
        float _3908 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1843 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _1816 = (((cbLight._m0[_1824].x * 0.3183098733425140380859375) * _1842) * _1843) + _1796;
        _1818 = (((cbLight._m0[_1824].y * 0.3183098733425140380859375) * _1842) * _1843) + _1797;
        _1820 = (((cbLight._m0[_1824].z * 0.3183098733425140380859375) * _1842) * _1843) + _1798;
    }
    bool _1823 = _1803.y == 0u;
    float _1861;
    float _1863;
    float _1865;
    if (_1823)
    {
        _1861 = _1816;
        _1863 = _1818;
        _1865 = _1820;
    }
    else
    {
        uint _2023 = _1727 + 7u;
        float _2039 = (dot(vec3(cbLight._m0[_1727 + 3u].xyz), vec3(_441, _442, _443)) * 0.5) + 0.5;
        float _2040 = _2039 * _2039;
        float _3924 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _2042 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
        _1861 = (((cbLight._m0[_2023].x * 0.3183098733425140380859375) * _2041) * _2042) + _1816;
        _1863 = (((cbLight._m0[_2023].y * 0.3183098733425140380859375) * _2041) * _2042) + _1818;
        _1865 = (((cbLight._m0[_2023].z * 0.3183098733425140380859375) * _2041) * _2042) + _1820;
    }
    uint _1868 = _1727 + 8u;
    float _1881 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1727].w)) * _444) * 0.949999988079071044921875);
    float _1882 = _1881 * _1881;
    float _1883 = cbLight._m0[_1727].x + _520;
    float _1884 = cbLight._m0[_1727].y + _521;
    float _1885 = cbLight._m0[_1727].z + _522;
    float _1889 = inversesqrt(dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885)));
    float _1890 = _1889 * _1883;
    float _1891 = _1889 * _1884;
    float _1892 = _1889 * _1885;
    float _1893 = dot(vec3(_441, _442, _443), vec3(cbLight._m0[_1727].xyz));
    float _3940 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _1897 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _1898 = dot(vec3(_441, _442, _443), vec3(_1890, _1891, _1892));
    float _3962 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1902 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_1890, _1891, _1892));
    float _3973 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1906 = _1882 * _1882;
    float _1910 = ((_1901 * _1901) * (_1906 + (-1.0))) + 1.0;
    float _1921 = (exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1922 = 1.0 - _1882;
    float _1933 = (0.5 / (((_1897 * ((_1896 * _1922) + _1882)) + 9.9999999392252902907785028219223e-09) + (((_1897 * _1922) + _1882) * _1896))) * _1896;
    float _3984 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1935 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1906 / ((_1910 * _1910) * 3.141590118408203125));
    uint _1949 = _1727 + 9u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1768].w)) * _444) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1768].x + _520;
    float _1963 = cbLight._m0[_1768].y + _521;
    float _1964 = cbLight._m0[_1768].z + _522;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_441, _442, _443), vec3(cbLight._m0[_1768].xyz));
    float _3995 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _1976 = dot(vec3(_441, _442, _443), vec3(_1969, _1970, _1971));
    float _4006 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_1969, _1970, _1971));
    float _4017 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1984 = _1961 * _1961;
    float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
    float _1997 = (exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1998 = 1.0 - _1961;
    float _2008 = (0.5 / (((_1897 * ((_1975 * _1998) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1897 * _1998) + _1961) * _1975))) * _1975;
    float _4028 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2010 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
    float _2020 = (((_1997 * cbLight._m0[_1949].x) * _2010) * _1750) + ((((cbLight._m0[_1868].x * _1719) * _1921) * _1935) * _1764);
    float _2021 = (((_1997 * cbLight._m0[_1949].y) * _2010) * _1750) + ((((cbLight._m0[_1868].y * _1720) * _1921) * _1935) * _1764);
    float _2022 = (((_1997 * cbLight._m0[_1949].z) * _2010) * _1750) + ((((cbLight._m0[_1868].z * _1721) * _1921) * _1935) * _1764);
    float _2084;
    float _2086;
    float _2088;
    if (_1805)
    {
        _2084 = _2020;
        _2086 = _2021;
        _2088 = _2022;
    }
    else
    {
        uint _2090 = _1727 + 2u;
        uint _2094 = _1727 + 10u;
        float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _444) * 0.949999988079071044921875);
        float _2109 = _2108 * _2108;
        float _2110 = cbLight._m0[_2090].x + _520;
        float _2111 = cbLight._m0[_2090].y + _521;
        float _2112 = cbLight._m0[_2090].z + _522;
        float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
        float _2117 = _2116 * _2110;
        float _2118 = _2116 * _2111;
        float _2119 = _2116 * _2112;
        float _2120 = dot(vec3(_441, _442, _443), vec3(cbLight._m0[_2090].xyz));
        float _4039 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _2124 = dot(vec3(_441, _442, _443), vec3(_2117, _2118, _2119));
        float _4050 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2128 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2117, _2118, _2119));
        float _4061 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2132 = _2109 * _2109;
        float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
        float _2145 = (exp2(log2(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2146 = 1.0 - _2109;
        float _2156 = (0.5 / (((_1897 * ((_2123 * _2146) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_1897 * _2146) + _2109) * _2123))) * _2123;
        float _4072 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2158 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
        float _2159 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _2084 = (((_2145 * cbLight._m0[_2094].x) * _2158) * _2159) + _2020;
        _2086 = (((_2145 * cbLight._m0[_2094].y) * _2158) * _2159) + _2021;
        _2088 = (((_2145 * cbLight._m0[_2094].z) * _2158) * _2159) + _2022;
    }
    float _2194;
    float _2196;
    float _2198;
    if (_1823)
    {
        _2194 = _2084;
        _2196 = _2086;
        _2198 = _2088;
    }
    else
    {
        uint _2205 = _1727 + 3u;
        uint _2209 = _1727 + 11u;
        float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _444) * 0.949999988079071044921875);
        float _2224 = _2223 * _2223;
        float _2225 = cbLight._m0[_2205].x + _520;
        float _2226 = cbLight._m0[_2205].y + _521;
        float _2227 = cbLight._m0[_2205].z + _522;
        float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
        float _2232 = _2231 * _2225;
        float _2233 = _2231 * _2226;
        float _2234 = _2231 * _2227;
        float _2235 = dot(vec3(_441, _442, _443), vec3(cbLight._m0[_2205].xyz));
        float _4088 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2239 = dot(vec3(_441, _442, _443), vec3(_2232, _2233, _2234));
        float _4099 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2243 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2232, _2233, _2234));
        float _4110 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2247 = _2224 * _2224;
        float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
        float _2260 = (exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2261 = 1.0 - _2224;
        float _2271 = (0.5 / (((_1897 * ((_2238 * _2261) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_1897 * _2261) + _2224) * _2238))) * _2238;
        float _4121 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2273 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
        float _2274 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
        _2194 = (((_2260 * cbLight._m0[_2209].x) * _2273) * _2274) + _2084;
        _2196 = (((_2260 * cbLight._m0[_2209].y) * _2273) * _2274) + _2086;
        _2198 = (((_2260 * cbLight._m0[_2209].z) * _2273) * _2274) + _2088;
    }
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    if (_1725.y == 0u)
    {
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2349;
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2349;
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2349;
        uvec4 _2364 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2365 = _2364.x;
        uint _2376 = uint((float(_2364.y) * floor(float(uint(cbSceneParam._m0[85u].y * _529) / _2365))) + floor(float(uint(cbSceneParam._m0[85u].x * _528) / _2365)));
        float _2386 = (log2(_2352 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2387 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        uint _2390 = uint(isnan(14.0) ? _2387 : (isnan(_2387) ? 14.0 : min(_2387, 14.0)));
        uvec4 _2395 = texelFetch(g_lightClusterGridBuffer, int(((_2390 << 2u) + (_2376 << 6u)) >> 2u));
        uint _2396 = _2395.x;
        uint _2397 = _2364.z;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        if (((((1u << ((_2397 >> 4u) & 15u)) + 4294967295u) & _2396) == 0u) || ((_2397 & 240u) == 0u))
        {
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
        }
        else
        {
            float _2497;
            float _2499;
            float _2501;
            float _2503;
            float _2505;
            float _2507;
            float _2640 = 0.0;
            float _2641 = 0.0;
            float _2642 = 0.0;
            float _2643 = 0.0;
            float _2644 = 0.0;
            float _2645 = 0.0;
            uint _2646 = 0u;
            uint _2655;
            bool _2656;
            for (;;)
            {
                _2655 = texelFetch(g_lightClassification, int((((_2390 << 5u) + (_2376 << 9u)) + (_2646 << 2u)) >> 2u)).x;
                _2656 = _2655 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2656)
                {
                    frontier_phi_72_pred = _2644;
                    frontier_phi_72_pred_1 = _2643;
                    frontier_phi_72_pred_2 = _2642;
                    frontier_phi_72_pred_3 = _2641;
                    frontier_phi_72_pred_4 = _2640;
                    frontier_phi_72_pred_5 = _2645;
                }
                else
                {
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    uint _2770;
                    _2764 = _2640;
                    _2765 = _2641;
                    _2766 = _2642;
                    _2767 = _2643;
                    _2768 = _2644;
                    _2769 = _2645;
                    _2770 = _2655;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    for (;;)
                    {
                        uint _2774 = uint(findLSB(_2770)) + (_2646 << 5u);
                        uint _2771 = (_2770 + 4294967295u) & _2770;
                        uint _2776 = _2774 * 48u;
                        vec4 _2790 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2776)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 3u)).x));
                        uint _2796 = (_2774 * 48u) + 4u;
                        vec4 _2809 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2796)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 3u)).x));
                        uint _2815 = (_2774 * 48u) + 8u;
                        vec3 _2826 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2815)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 2u)).x));
                        float _2830 = _2790.x - _2350;
                        float _2831 = _2790.y - _2351;
                        float _2832 = _2790.z - _2352;
                        float _2833 = dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832));
                        float _2836 = inversesqrt(_2833);
                        float _2837 = _2836 * _2830;
                        float _2838 = _2836 * _2831;
                        float _2839 = _2836 * _2832;
                        float _2840 = dot(vec3(_550, _553, _556), vec3(_2837, _2838, _2839));
                        float _2845 = 1.0 - (_2833 * _2790.w);
                        float _4147 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2846 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                        float _2847 = sqrt(_2833) * _2809.w;
                        float _2850 = 1.39999997615814208984375 / (_2847 + 1.39999997615814208984375);
                        float _2851 = _2850 * _2850;
                        float _2854 = ((1.0 - _2851) * _2840) + _2851;
                        float _2857 = _2847 * _2847;
                        float _2861 = ((isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0))) * _2846) / ((_2857 * 0.699999988079071044921875) + 1.0);
                        float _2865 = (-0.0) - _2350;
                        float _2866 = (-0.0) - _2351;
                        float _2867 = (-0.0) - _2352;
                        float _2871 = inversesqrt(dot(vec3(_2865, _2866, _2867), vec3(_2865, _2866, _2867)));
                        float _2872 = _2871 * _2865;
                        float _2873 = _2871 * _2866;
                        float _2874 = _2871 * _2867;
                        float _2882 = exp2(log2(1.0 / ((_2857 * 3.5) + 5.0)) * 0.25);
                        float _2883 = 1.0 - _612;
                        float _2890 = sqrt(1.0 - ((1.0 - (_2883 * _2883)) * (1.0 - (_2882 * _2882))));
                        float _2891 = _2890 * _2890;
                        float _2892 = _2891 * _2891;
                        float _2893 = _2872 + _2837;
                        float _2894 = _2873 + _2838;
                        float _2895 = _2874 + _2839;
                        float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
                        float _2903 = dot(vec3(_550, _553, _556), vec3(_2872, _2873, _2874));
                        float _4163 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2906 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _2907 = dot(vec3(_550, _553, _556), vec3(_2899 * _2893, _2899 * _2894, _2899 * _2895));
                        float _4174 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2910 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2914 = ((_2910 * _2910) * (_2892 + (-1.0))) + 1.0;
                        float _2915 = _2850 * _2891;
                        float _2916 = _2915 * _2915;
                        float _2919 = ((1.0 - _2916) * _2840) + _2916;
                        float _4185 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2920 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2921 = 1.0 - _2891;
                        float _2931 = (0.5 / (((_2920 * ((_2906 * _2921) + _2891)) + 9.9999999392252902907785028219223e-09) + (((_2920 * _2921) + _2891) * _2906))) * _2920;
                        float _4196 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2942 = (((_2892 * 3.1415927410125732421875) * (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) / ((_2914 * _2914) * ((_2857 * 2.1991131305694580078125) + 3.141590118408203125))) * _2846;
                        _2699 = (_2861 * _2809.x) + _2767;
                        _2700 = (_2861 * _2809.y) + _2768;
                        _2701 = (_2861 * _2809.z) + _2769;
                        _2696 = (_2942 * _2826.x) + _2764;
                        _2697 = (_2942 * _2826.y) + _2765;
                        _2698 = (_2942 * _2826.z) + _2766;
                        if (_2771 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2764 = _2696;
                            _2765 = _2697;
                            _2766 = _2698;
                            _2767 = _2699;
                            _2768 = _2700;
                            _2769 = _2701;
                            _2770 = _2771;
                        }
                    }
                    frontier_phi_72_pred = _2700;
                    frontier_phi_72_pred_1 = _2699;
                    frontier_phi_72_pred_2 = _2698;
                    frontier_phi_72_pred_3 = _2697;
                    frontier_phi_72_pred_4 = _2696;
                    frontier_phi_72_pred_5 = _2701;
                }
                _2505 = frontier_phi_72_pred;
                _2503 = frontier_phi_72_pred_1;
                _2501 = frontier_phi_72_pred_2;
                _2499 = frontier_phi_72_pred_3;
                _2497 = frontier_phi_72_pred_4;
                _2507 = frontier_phi_72_pred_5;
                uint _2647 = _2646 + 1u;
                if (_2647 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2640 = _2497;
                    _2641 = _2499;
                    _2642 = _2501;
                    _2643 = _2503;
                    _2644 = _2505;
                    _2645 = _2507;
                    _2646 = _2647;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
        }
        uvec4 _2510 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2511 = _2510.z;
        uint _2513 = (_2511 >> 8u) & 15u;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        if (((4294967295u << _2513) & _2396) == 0u)
        {
            _2608 = _2496;
            _2610 = _2498;
            _2612 = _2500;
            _2614 = _2502;
            _2616 = _2504;
            _2618 = _2506;
        }
        else
        {
            float _2633 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
            float _2634 = _2633 * _2350;
            float _2635 = _2633 * _2351;
            float _2636 = _2633 * _2352;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2513 < ((_2511 >> 12u) & 15u))
            {
                float _2609;
                float _2611;
                float _2613;
                float _2615;
                float _2617;
                float _2619;
                float _2747 = _2496;
                float _2748 = _2498;
                float _2749 = _2500;
                float _2750 = _2502;
                float _2751 = _2504;
                float _2752 = _2506;
                uint _2753 = _2513;
                uint _2762;
                bool _2763;
                for (;;)
                {
                    _2762 = texelFetch(g_lightClassification, int((((_2390 << 5u) + (_2376 << 9u)) + (_2753 << 2u)) >> 2u)).x;
                    _2763 = _2762 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2763)
                    {
                        frontier_phi_78_pred = _2752;
                        frontier_phi_78_pred_1 = _2751;
                        frontier_phi_78_pred_2 = _2750;
                        frontier_phi_78_pred_3 = _2749;
                        frontier_phi_78_pred_4 = _2747;
                        frontier_phi_78_pred_5 = _2748;
                    }
                    else
                    {
                        float _2947;
                        float _2948;
                        float _2949;
                        float _2950;
                        float _2951;
                        float _2952;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _2960 = _2747;
                        float _2961 = _2748;
                        float _2962 = _2749;
                        float _2963 = _2750;
                        float _2964 = _2751;
                        float _2965 = _2752;
                        uint _2966 = _2762;
                        uint _2967;
                        vec4 _2992;
                        float _2993;
                        vec4 _3008;
                        vec3 _3020;
                        vec4 _3036;
                        vec4 _3052;
                        float _3099;
                        bool _3100;
                        for (;;)
                        {
                            uint _2977 = ((_2753 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2966));
                            _2967 = (_2966 + 4294967295u) & _2966;
                            uint _2979 = _2977 * 40u;
                            _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            _2993 = _2992.w;
                            uint _2995 = (_2977 * 40u) + 4u;
                            _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            uint _3010 = (_2977 * 40u) + 8u;
                            _3020 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x));
                            uint _3023 = (_2977 * 40u) + 16u;
                            _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            uint _3039 = (_2977 * 40u) + 20u;
                            _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            uint _3055 = (_2977 * 40u) + 24u;
                            vec4 _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            uint _3074 = (_2977 * 40u) + 28u;
                            vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            _3099 = fma(_2352, _3087.z, fma(_2351, _3087.y, _3087.x * _2350)) + _3087.w;
                            _3100 = !((fma(_2352, _3068.z, fma(_2351, _3068.y, _3068.x * _2350)) + _3068.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3100)
                            {
                                float _3127 = _2992.x - _2350;
                                float _3128 = _2992.y - _2351;
                                float _3129 = _2992.z - _2352;
                                float _3130 = dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129));
                                float _3133 = inversesqrt(_3130);
                                float _3134 = _3133 * _3127;
                                float _3135 = _3133 * _3128;
                                float _3136 = _3133 * _3129;
                                float _3140 = 1.0 - (_3130 / (_2993 * _2993));
                                float _4207 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3141 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                                float _3145 = sqrt(_3130) * _3008.w;
                                float _3147 = 1.39999997615814208984375 / (_3145 + 1.39999997615814208984375);
                                float _3148 = _3147 * _3147;
                                float _3151 = ((1.0 - _3148) * dot(vec3(_3134, _3135, _3136), vec3(_550, _553, _556))) + _3148;
                                float _3154 = _3145 * _3145;
                                float _3158 = (fma(_2352, _3036.z, fma(_2351, _3036.y, _3036.x * _2350)) + _3036.w) / _3099;
                                float _3159 = (fma(_2352, _3052.z, fma(_2351, _3052.y, _3052.x * _2350)) + _3052.w) / _3099;
                                float _3163 = 1.0 - dot(vec2(_3158, _3159), vec2(_3158, _3159));
                                float _4223 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3164 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3165 = _3164 * (((isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0))) * _3141) / ((_3154 * 0.699999988079071044921875) + 1.0));
                                float _3177 = exp2(log2(1.0 / ((_3154 * 3.5) + 5.0)) * 0.25);
                                float _3178 = 1.0 - _612;
                                float _3185 = sqrt(1.0 - ((1.0 - (_3178 * _3178)) * (1.0 - (_3177 * _3177))));
                                float _3186 = _3185 * _3185;
                                float _3187 = _3186 * _3186;
                                float _3188 = _3134 - _2634;
                                float _3189 = _3135 - _2635;
                                float _3190 = _3136 - _2636;
                                float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                                float _3198 = dot(vec3(_550, _553, _556), vec3((-0.0) - _2634, (-0.0) - _2635, (-0.0) - _2636));
                                float _4234 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3201 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3202 = dot(vec3(_550, _553, _556), vec3(_3194 * _3188, _3194 * _3189, _3194 * _3190));
                                float _4245 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3205 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3209 = ((_3205 * _3205) * (_3187 + (-1.0))) + 1.0;
                                float _3210 = _3147 * _3186;
                                float _3211 = _3210 * _3210;
                                float _3217 = ((1.0 - _3211) * dot(vec3(_550, _553, _556), vec3(_3134, _3135, _3136))) + _3211;
                                float _4256 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3218 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3219 = 1.0 - _3186;
                                float _3229 = (0.5 / (((_3218 * ((_3201 * _3219) + _3186)) + 9.9999999392252902907785028219223e-09) + (((_3218 * _3219) + _3186) * _3201))) * _3218;
                                float _4267 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3239 = (_3164 * _3141) * (((_3187 * 3.1415927410125732421875) * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) / ((_3209 * _3209) * ((_3154 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3165 * _3008.y;
                                frontier_phi_84_pred_1 = _3165 * _3008.x;
                                frontier_phi_84_pred_2 = _3239 * _3020.z;
                                frontier_phi_84_pred_3 = _3239 * _3020.y;
                                frontier_phi_84_pred_4 = _3239 * _3020.x;
                                frontier_phi_84_pred_5 = _3165 * _3008.z;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3247 = frontier_phi_84_pred;
                            _3246 = frontier_phi_84_pred_1;
                            _3245 = frontier_phi_84_pred_2;
                            _3244 = frontier_phi_84_pred_3;
                            _3243 = frontier_phi_84_pred_4;
                            _3248 = frontier_phi_84_pred_5;
                            _2950 = _3246 + _2963;
                            _2951 = _3247 + _2964;
                            _2952 = _3248 + _2965;
                            _2947 = _3243 + _2960;
                            _2948 = _3244 + _2961;
                            _2949 = _3245 + _2962;
                            if (_2967 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2950;
                                _2964 = _2951;
                                _2965 = _2952;
                                _2966 = _2967;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2952;
                        frontier_phi_78_pred_1 = _2951;
                        frontier_phi_78_pred_2 = _2950;
                        frontier_phi_78_pred_3 = _2949;
                        frontier_phi_78_pred_4 = _2947;
                        frontier_phi_78_pred_5 = _2948;
                    }
                    _2619 = frontier_phi_78_pred;
                    _2617 = frontier_phi_78_pred_1;
                    _2615 = frontier_phi_78_pred_2;
                    _2613 = frontier_phi_78_pred_3;
                    _2609 = frontier_phi_78_pred_4;
                    _2611 = frontier_phi_78_pred_5;
                    uint _2754 = _2753 + 1u;
                    if (_2754 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2747 = _2609;
                        _2748 = _2611;
                        _2749 = _2613;
                        _2750 = _2615;
                        _2751 = _2617;
                        _2752 = _2619;
                        _2753 = _2754;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2619;
                frontier_phi_66_67_ladder_1 = _2617;
                frontier_phi_66_67_ladder_2 = _2615;
                frontier_phi_66_67_ladder_3 = _2613;
                frontier_phi_66_67_ladder_4 = _2611;
                frontier_phi_66_67_ladder_5 = _2609;
            }
            else
            {
                frontier_phi_66_67_ladder = _2506;
                frontier_phi_66_67_ladder_1 = _2504;
                frontier_phi_66_67_ladder_2 = _2502;
                frontier_phi_66_67_ladder_3 = _2500;
                frontier_phi_66_67_ladder_4 = _2498;
                frontier_phi_66_67_ladder_5 = _2496;
            }
            _2608 = frontier_phi_66_67_ladder_5;
            _2610 = frontier_phi_66_67_ladder_4;
            _2612 = frontier_phi_66_67_ladder_3;
            _2614 = frontier_phi_66_67_ladder_2;
            _2616 = frontier_phi_66_67_ladder_1;
            _2618 = frontier_phi_66_67_ladder;
        }
        float _2623 = isnan(1.0) ? _596 : (isnan(_596) ? 1.0 : min(_596, 1.0));
        _2408 = (_2623 * _2614) + _1861;
        _2410 = (_2623 * _2616) + _1863;
        _2412 = (_2623 * _2618) + _1865;
        _2414 = ((_2608 * 0.039999999105930328369140625) * _2623) + _2194;
        _2416 = ((_2610 * 0.039999999105930328369140625) * _2623) + _2196;
        _2418 = ((_2612 * 0.039999999105930328369140625) * _2623) + _2198;
    }
    else
    {
        _2408 = _1861;
        _2410 = _1863;
        _2412 = _1865;
        _2414 = _2194;
        _2416 = _2196;
        _2418 = _2198;
    }
    float _4283 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _4294 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _4305 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    uint _2438 = _569 + 6u;
    float _2446 = _528 / cbSceneParam._m0[86u].x;
    float _2447 = _529 / cbSceneParam._m0[86u].y;
    vec4 _2461 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2446, _2447, (log2((isnan(cbSceneParam._m0[77u].w) ? _464 : (isnan(_464) ? cbSceneParam._m0[77u].w : min(_464, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2463 = _2461.x;
    float _2464 = _2461.y;
    float _2465 = _2461.z;
    float _2466 = _2461.w;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_464 > cbSceneParam._m0[78u].w)
    {
        float _2521 = isnan(_464) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _464 : min(cbSceneParam._m0[80u].w, _464));
        float _2522 = _2521 / _464;
        float _2533 = _2522 * _513;
        float _2534 = _514 * _2522;
        float _2535 = (-0.0) - _2534;
        float _2536 = _2522 * _515;
        float _2538 = (cbSceneParam._m0[77u].w * _2535) / _2521;
        float _2539 = _2538 + cbSceneParam._m0[79u].w;
        float _2540 = cbSceneParam._m0[79u].w - _2534;
        float _2546 = sqrt(((_2533 * _2533) + (_2534 * _2534)) + (_2536 * _2536));
        float _2549 = (1.0 - (cbSceneParam._m0[77u].w / _2521)) * _2546;
        float _2554 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2556 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2709;
        if (abs((_2535 - _2538) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2709 = ((((_2539 > 0.0) ? exp2(_2554 * _2539) : (2.0 - exp2(_2556 * _2539))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2549;
        }
        else
        {
            float _2669 = 1.0 / cbSceneParam._m0[80u].x;
            float _2670 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : max(_2539, _2540));
            float _2671 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : min(_2539, _2540));
            float _2680 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : min(_2670, 0.0));
            float _2681 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : min(_2671, 0.0));
            _2709 = ((abs(_2546 / _2535) * cbSceneParam._m0[80u].y) * ((((_2680 - _2681) * 2.0) - ((exp2(_2554 * (isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0)))) - exp2(_2554 * (isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0))))) * _2669)) - ((exp2(_2556 * _2680) - exp2(_2556 * _2681)) * _2669))) + (_2549 * cbSceneParam._m0[80u].z);
        }
        vec4 _2711 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2446, _2447, 1.0), 0.0);
        float _2720 = exp2((_2709 * (-1.44269502162933349609375)) * (1.0 - _2711.w));
        float _2721 = log2(_2720);
        float _2737 = log2(_2466);
        _2558 = (exp2(_2737 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].x)) * _2711.x) / cbSceneParam._m0[78u].x)) + _2463;
        _2560 = (exp2(_2737 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].y)) * _2711.y) / cbSceneParam._m0[78u].y)) + _2464;
        _2562 = (exp2(_2737 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].z)) * _2711.z) / cbSceneParam._m0[78u].z)) + _2465;
        _2564 = _2720 * _2466;
    }
    else
    {
        _2558 = _2463;
        _2560 = _2464;
        _2562 = _2465;
        _2564 = _2466;
    }
    float _2576 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2577 = _2576 == 3.0;
    float _2578 = log2(_2564);
    float _2585 = exp2(_2578 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2408 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _596))) + ((_2414 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1474)) * cbPerFrame._m0[3u].x));
    float _2586 = exp2(_2578 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2410 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _596))) + ((_2416 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1474)) * cbPerFrame._m0[3u].x));
    float _2587 = exp2(_2578 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2412 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _596))) + ((_2418 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1474)) * cbPerFrame._m0[3u].x));
    float _2596 = (_2576 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2596 * (_2577 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2558)));
    SV_Target.y = _2596 * (_2577 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2560)));
    SV_Target.z = _2596 * (_2577 ? _2587 : (_2587 + (cbSceneParam._m0[72u].w * _2562)));
    SV_Target.w = cbInstanceData._m0[_2438].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2438].w;
}


