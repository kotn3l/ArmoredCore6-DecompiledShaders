#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
layout(location = 2) out vec4 SV_Target_2;
layout(location = 3) out vec4 SV_Target_3;
layout(location = 4) out vec4 SV_Target_4;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    SV_Target_2.x = 0.0;
    SV_Target_2.y = 0.0;
    SV_Target_2.z = 0.0;
    SV_Target_2.w = 0.0;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = 0.0;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = 0.0;
    float _149 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _150 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _151 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _156 = inversesqrt(dot(vec3(_149, _150, _151), vec3(_149, _150, _151)));
    float _157 = _156 * _149;
    float _158 = _156 * _150;
    float _159 = _156 * _151;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    float _170 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _171 = _170 * TANGENT.x;
    float _172 = _170 * TANGENT.y;
    float _173 = _170 * TANGENT.z;
    float _178;
    float _179;
    float _180;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _178 = (-0.0) - _164;
        _179 = (-0.0) - _165;
        _180 = (-0.0) - _166;
    }
    else
    {
        _178 = _164;
        _179 = _165;
        _180 = _166;
    }
    float _224 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _234 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _224);
    float _235 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _224);
    float _236 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _224);
    float _245 = dot(vec3(_234, _235, _236), vec3(_157, _158, _159));
    float _248 = dot(vec3(_234, _235, _236), vec3(_171, _172, _173));
    float _251 = dot(vec3(_234, _235, _236), vec3(_178, _179, _180));
    float _254 = (-0.0) - _245;
    float _255 = (-0.0) - _248;
    float _265 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _266 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _267 = (-0.0) - _234;
    float _268 = (-0.0) - _235;
    float _269 = (-0.0) - _236;
    float _274 = inversesqrt(dot(vec2(_254, _255), vec2(_254, _255)));
    float _278 = _251 * _251;
    float _280 = sqrt(((_248 * _248) + (_245 * _245)) + _278);
    float _284 = sqrt((_280 * _280) - _278) / ((-0.0) - _251);
    float _287 = ((cbMtdParam._m0[10u].y * _254) * _274) * _284;
    float _290 = ((cbMtdParam._m0[10u].y * _255) * _274) * _284;
    float _294 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _298 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _299 = dFdxCoarse(_265);
    float _300 = dFdxCoarse(_266);
    float _301 = dFdyCoarse(_265);
    float _302 = dFdyCoarse(_266);
    uvec2 _310 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _314 = float(_310.y) * (abs(_302) + abs(_300));
    float _316 = float(_310.x) * (abs(_301) + abs(_299));
    float _318 = log2(isnan(_314) ? _316 : (isnan(_316) ? _314 : max(_316, _314)));
    float _319 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _322;
    float _325;
    if (!(_319 <= 4.0))
    {
        _322 = _265;
        _325 = _266;
    }
    else
    {
        uint _495 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_294 * _267, _294 * _268, _294 * _269), vec3(_298 * _178, _298 * _179, _298 * _180))) * 12.0)))), int(32u)));
        float _498 = 1.0 / float(int(_495));
        float _499 = _498 * _287;
        float _500 = _498 * _290;
        float _582;
        float _584;
        float _586;
        float _588;
        if (int(_495) > int(0u))
        {
            float _583;
            float _585;
            float _587;
            float _589;
            uint _653;
            float _618 = 1.0;
            uint _620 = 0u;
            float _622 = _265;
            float _624 = _266;
            float _626 = 1.0;
            float _628 = 0.0;
            float _629 = 0.0;
            float _630 = 0.0;
            float _631 = 0.0;
            float _619;
            float _623;
            float _625;
            float _627;
            bool _643;
            for (;;)
            {
                _623 = _622 - _499;
                _625 = _624 - _500;
                _619 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_623, _625), vec2(_299, _300), vec2(_301, _302))), vec4(1.0, 0.0, 0.0, 0.0));
                _627 = _626 - _498;
                _643 = _619 > _627;
                uint frontier_phi_17_pred;
                float frontier_phi_17_pred_1;
                float frontier_phi_17_pred_2;
                float frontier_phi_17_pred_3;
                float frontier_phi_17_pred_4;
                if (_643)
                {
                    frontier_phi_17_pred = _495;
                    frontier_phi_17_pred_1 = _627;
                    frontier_phi_17_pred_2 = _619;
                    frontier_phi_17_pred_3 = _626;
                    frontier_phi_17_pred_4 = _618;
                }
                else
                {
                    frontier_phi_17_pred = _620;
                    frontier_phi_17_pred_1 = _628;
                    frontier_phi_17_pred_2 = _629;
                    frontier_phi_17_pred_3 = _630;
                    frontier_phi_17_pred_4 = _631;
                }
                _653 = frontier_phi_17_pred;
                _583 = frontier_phi_17_pred_1;
                _585 = frontier_phi_17_pred_2;
                _587 = frontier_phi_17_pred_3;
                _589 = frontier_phi_17_pred_4;
                uint _621 = _653 + 1u;
                if (int(_621) < int(_495))
                {
                    _618 = _619;
                    _620 = _621;
                    _622 = _623;
                    _624 = _625;
                    _626 = _627;
                    _628 = _583;
                    _629 = _585;
                    _630 = _587;
                    _631 = _589;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _582 = _583;
            _584 = _585;
            _586 = _587;
            _588 = _589;
        }
        else
        {
            _582 = 0.0;
            _584 = 0.0;
            _586 = 0.0;
            _588 = 0.0;
        }
        float _590 = _586 - _588;
        float _591 = _582 - _584;
        float _597 = 1.0 - (((_590 * _582) - (_586 * _591)) / (_590 - _591));
        float _598 = _597 * _287;
        float _599 = _597 * _290;
        float _324 = _265 - _598;
        float _327 = _266 - _599;
        float frontier_phi_3_8_ladder;
        float frontier_phi_3_8_ladder_1;
        if (_319 > 3.0)
        {
            float _645 = _319 - trunc(_319);
            frontier_phi_3_8_ladder = (_645 * _598) + _324;
            frontier_phi_3_8_ladder_1 = (_645 * _599) + _327;
        }
        else
        {
            frontier_phi_3_8_ladder = _324;
            frontier_phi_3_8_ladder_1 = _327;
        }
        _322 = frontier_phi_3_8_ladder;
        _325 = frontier_phi_3_8_ladder_1;
    }
    float _332 = ((_322 - _265) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _333 = ((_325 - _266) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _346 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _332) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _333) + cbTextureTilingScale._m0[3u].w));
    float _351 = _346.x * cbMtdParam._m0[9u].x;
    float _352 = _346.y * cbMtdParam._m0[9u].y;
    float _353 = _346.z * cbMtdParam._m0[9u].z;
    vec4 _365 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _332) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _333) + cbTextureTilingScale._m0[1u].w));
    float _369 = _365.z;
    float _374 = (_365.x * 2.0) + (-1.0);
    float _376 = (_365.y * 2.0) + (-1.0);
    float _377 = dot(vec2(_374, _376), vec2(_374, _376));
    float _754 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _383 = sqrt(1.0 - (isnan(1.0) ? _754 : (isnan(_754) ? 1.0 : min(_754, 1.0))));
    float _386 = fma(_383, _178, fma(_376, _171, _374 * _157));
    float _389 = fma(_383, _179, fma(_376, _172, _374 * _158));
    float _392 = fma(_383, _180, fma(_376, _173, _374 * _159));
    float _396 = inversesqrt(dot(vec3(_386, _389, _392), vec3(_386, _389, _392)));
    float _397 = _396 * _386;
    float _398 = _396 * _389;
    float _399 = _396 * _392;
    float _403 = cbMtdParam._m0[10u].x + _365.w;
    float _407 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _765 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _776 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _409 = isnan(1.0) ? _776 : (isnan(_776) ? 1.0 : min(_776, 1.0));
    float _787 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _410 = isnan(1.0) ? _787 : (isnan(_787) ? 1.0 : min(_787, 1.0));
    float _798 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _411 = isnan(1.0) ? _798 : (isnan(_798) ? 1.0 : min(_798, 1.0));
    float _809 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _412 = isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0));
    uint _414 = uint(roundEven(NORMAL.w));
    float _454 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _463 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _454);
    float _464 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _454);
    float _465 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _454);
    vec4 _470 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _472 = _470.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _557 = sqrt(((_463 * _463) + (_464 * _464)) + (_465 * _465));
        float _564 = (cbMatDynParam._m0[5u].x * _557) + cbMatDynParam._m0[5u].y;
        float _820 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
        float _565 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
        float _569 = (cbMatDynParam._m0[5u].z * _557) + cbMatDynParam._m0[5u].w;
        float _831 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _831 : (isnan(_831) ? 1.0 : min(_831, 1.0))) - _565)) + _565) < ((_472 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _648;
    uint _514;
    vec4 _519;
    float _526;
    float _527;
    float _528;
    float _529;
    float _533;
    vec4 _537;
    float _539;
    float _540;
    bool _551;
    for (;;)
    {
        _514 = _414 * 13u;
        _519 = cbInstanceData._m0[(_514 + 9u) + uint(cbMatDynParam._m0[0u].w)];
        float _523 = (cbMtdParam._m0[0u].x * _410) * _519.x;
        float _524 = (cbMtdParam._m0[0u].y * _411) * _519.y;
        float _525 = (cbMtdParam._m0[0u].z * _412) * _519.z;
        float _842 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
        _526 = isnan(1.0) ? _842 : (isnan(_842) ? 1.0 : min(_842, 1.0));
        float _853 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
        _527 = isnan(1.0) ? _853 : (isnan(_853) ? 1.0 : min(_853, 1.0));
        float _864 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
        _528 = isnan(1.0) ? _864 : (isnan(_864) ? 1.0 : min(_864, 1.0));
        _529 = _409 * TEXCOORD.z;
        _533 = cbInstanceData._m0[_514 + 6u].w;
        float _534 = _472 + (-0.5);
        _537 = cbMtdParam._m0[1u];
        _539 = _537.y * _534;
        _540 = _534 * 0.999000012874603271484375;
        _551 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_551)
        {
            if ((cbInstanceData._m0[_514 + 7u].x + _540) < 0.5)
            {
                _648 = true;
                break;
            }
        }
        if ((_519.w < 1.0) && ((_519.w + _540) < 0.5))
        {
            _648 = true;
            break;
        }
        if ((_539 + 1.0) < _537.x)
        {
            _648 = true;
            break;
        }
        _648 = false;
        break;
    }
    if (_648)
    {
        discard_state = true;
    }
    bool _676 = cbMtdParam._m0[1u].z != 0.0;
    float _677 = _676 ? _533 : 0.0;
    SV_Target.x = ((_397 * 0.5) * _407) + 0.500488758087158203125;
    SV_Target.y = ((_398 * 0.5) * _407) + 0.500488758087158203125;
    SV_Target.z = ((_399 * 0.5) * _407) + 0.500488758087158203125;
    SV_Target.w = _677;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = isnan(1.0) ? _765 : (isnan(_765) ? 1.0 : min(_765, 1.0));
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _676 ? _533 : _529;
    SV_Target_2.x = _526;
    SV_Target_2.y = _527;
    SV_Target_2.z = _528;
    SV_Target_2.w = _676 ? _533 : (float(floatBitsToUint(cbInstanceData._m0[_514 + 5u]).x) * 0.0039215688593685626983642578125);
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = _677;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = _677;
    discard_exit();
}


