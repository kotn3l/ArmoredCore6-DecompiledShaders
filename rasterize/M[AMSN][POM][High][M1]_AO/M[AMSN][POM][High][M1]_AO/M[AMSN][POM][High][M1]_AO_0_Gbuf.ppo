#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
layout(location = 2) out vec4 SV_Target_2;
layout(location = 3) out vec4 SV_Target_3;
layout(location = 4) out vec4 SV_Target_4;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    SV_Target_2.x = 0.0;
    SV_Target_2.y = 0.0;
    SV_Target_2.z = 0.0;
    SV_Target_2.w = 0.0;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = 0.0;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = 0.0;
    float _138 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _139 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _140 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _145 = inversesqrt(dot(vec3(_138, _139, _140), vec3(_138, _139, _140)));
    float _146 = _145 * _138;
    float _147 = _145 * _139;
    float _148 = _145 * _140;
    float _152 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _153 = _152 * NORMAL.x;
    float _154 = _152 * NORMAL.y;
    float _155 = _152 * NORMAL.z;
    float _159 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _160 = _159 * TANGENT.x;
    float _161 = _159 * TANGENT.y;
    float _162 = _159 * TANGENT.z;
    float _167;
    float _168;
    float _169;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _167 = (-0.0) - _153;
        _168 = (-0.0) - _154;
        _169 = (-0.0) - _155;
    }
    else
    {
        _167 = _153;
        _168 = _154;
        _169 = _155;
    }
    float _213 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _223 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _213);
    float _224 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _213);
    float _225 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _213);
    float _234 = dot(vec3(_223, _224, _225), vec3(_146, _147, _148));
    float _237 = dot(vec3(_223, _224, _225), vec3(_160, _161, _162));
    float _240 = dot(vec3(_223, _224, _225), vec3(_167, _168, _169));
    float _243 = (-0.0) - _234;
    float _244 = (-0.0) - _237;
    float _254 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _255 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _256 = (-0.0) - _223;
    float _257 = (-0.0) - _224;
    float _258 = (-0.0) - _225;
    float _263 = inversesqrt(dot(vec2(_243, _244), vec2(_243, _244)));
    float _267 = _240 * _240;
    float _269 = sqrt(((_237 * _237) + (_234 * _234)) + _267);
    float _273 = sqrt((_269 * _269) - _267) / ((-0.0) - _240);
    float _276 = ((cbMtdParam._m0[10u].y * _243) * _263) * _273;
    float _279 = ((cbMtdParam._m0[10u].y * _244) * _263) * _273;
    float _283 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _287 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _288 = dFdxCoarse(_254);
    float _289 = dFdxCoarse(_255);
    float _290 = dFdyCoarse(_254);
    float _291 = dFdyCoarse(_255);
    uvec2 _299 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _303 = float(_299.y) * (abs(_291) + abs(_289));
    float _305 = float(_299.x) * (abs(_290) + abs(_288));
    float _307 = log2(isnan(_303) ? _305 : (isnan(_305) ? _303 : max(_305, _303)));
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _311;
    float _314;
    if (!(_308 <= 4.0))
    {
        _311 = _254;
        _314 = _255;
    }
    else
    {
        uint _515 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_283 * _256, _283 * _257, _283 * _258), vec3(_287 * _167, _287 * _168, _287 * _169))) * 12.0)))), int(32u)));
        float _518 = 1.0 / float(int(_515));
        float _519 = _518 * _276;
        float _520 = _518 * _279;
        float _522;
        float _524;
        float _526;
        float _528;
        if (int(_515) > int(0u))
        {
            float _523;
            float _525;
            float _527;
            float _529;
            uint _572;
            float _542 = 1.0;
            uint _544 = 0u;
            float _546 = _254;
            float _548 = _255;
            float _550 = 1.0;
            float _552 = 0.0;
            float _553 = 0.0;
            float _554 = 0.0;
            float _555 = 0.0;
            float _543;
            float _547;
            float _549;
            float _551;
            bool _567;
            for (;;)
            {
                _547 = _546 - _519;
                _549 = _548 - _520;
                _543 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_547, _549), vec2(_288, _289), vec2(_290, _291))), vec4(1.0, 0.0, 0.0, 0.0));
                _551 = _550 - _518;
                _567 = _543 > _551;
                uint frontier_phi_10_pred;
                float frontier_phi_10_pred_1;
                float frontier_phi_10_pred_2;
                float frontier_phi_10_pred_3;
                float frontier_phi_10_pred_4;
                if (_567)
                {
                    frontier_phi_10_pred = _515;
                    frontier_phi_10_pred_1 = _551;
                    frontier_phi_10_pred_2 = _543;
                    frontier_phi_10_pred_3 = _550;
                    frontier_phi_10_pred_4 = _542;
                }
                else
                {
                    frontier_phi_10_pred = _544;
                    frontier_phi_10_pred_1 = _552;
                    frontier_phi_10_pred_2 = _553;
                    frontier_phi_10_pred_3 = _554;
                    frontier_phi_10_pred_4 = _555;
                }
                _572 = frontier_phi_10_pred;
                _523 = frontier_phi_10_pred_1;
                _525 = frontier_phi_10_pred_2;
                _527 = frontier_phi_10_pred_3;
                _529 = frontier_phi_10_pred_4;
                uint _545 = _572 + 1u;
                if (int(_545) < int(_515))
                {
                    _542 = _543;
                    _544 = _545;
                    _546 = _547;
                    _548 = _549;
                    _550 = _551;
                    _552 = _523;
                    _553 = _525;
                    _554 = _527;
                    _555 = _529;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _522 = _523;
            _524 = _525;
            _526 = _527;
            _528 = _529;
        }
        else
        {
            _522 = 0.0;
            _524 = 0.0;
            _526 = 0.0;
            _528 = 0.0;
        }
        float _530 = _526 - _528;
        float _531 = _522 - _524;
        float _537 = 1.0 - (((_530 * _522) - (_526 * _531)) / (_530 - _531));
        float _538 = _537 * _276;
        float _539 = _537 * _279;
        float _313 = _254 - _538;
        float _316 = _255 - _539;
        float frontier_phi_3_6_ladder;
        float frontier_phi_3_6_ladder_1;
        if (_308 > 3.0)
        {
            float _569 = _308 - trunc(_308);
            frontier_phi_3_6_ladder = (_569 * _538) + _313;
            frontier_phi_3_6_ladder_1 = (_569 * _539) + _316;
        }
        else
        {
            frontier_phi_3_6_ladder = _313;
            frontier_phi_3_6_ladder_1 = _316;
        }
        _311 = frontier_phi_3_6_ladder;
        _314 = frontier_phi_3_6_ladder_1;
    }
    float _321 = ((_311 - _254) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _322 = ((_314 - _255) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _335 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _321) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _322) + cbTextureTilingScale._m0[3u].w));
    float _340 = _335.x * cbMtdParam._m0[9u].x;
    float _341 = _335.y * cbMtdParam._m0[9u].y;
    float _342 = _335.z * cbMtdParam._m0[9u].z;
    vec4 _354 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _356 = _354.x;
    vec4 _368 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _321) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _322) + cbTextureTilingScale._m0[1u].w));
    float _372 = _368.z;
    float _377 = (_368.x * 2.0) + (-1.0);
    float _379 = (_368.y * 2.0) + (-1.0);
    float _380 = dot(vec2(_377, _379), vec2(_377, _379));
    float _607 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _386 = sqrt(1.0 - (isnan(1.0) ? _607 : (isnan(_607) ? 1.0 : min(_607, 1.0))));
    float _389 = fma(_386, _167, fma(_379, _160, _377 * _146));
    float _392 = fma(_386, _168, fma(_379, _161, _377 * _147));
    float _395 = fma(_386, _169, fma(_379, _162, _377 * _148));
    float _399 = inversesqrt(dot(vec3(_389, _392, _395), vec3(_389, _392, _395)));
    float _400 = _399 * _389;
    float _401 = _399 * _392;
    float _402 = _399 * _395;
    float _406 = cbMtdParam._m0[10u].x + _368.w;
    float _410 = inversesqrt(dot(vec3(_400, _401, _402), vec3(_400, _401, _402)));
    float _618 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _629 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _640 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _651 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _662 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _673 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    uint _431 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = (_431 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _440 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _640 : (isnan(_640) ? 1.0 : min(_640, 1.0)))) * cbInstanceData._m0[_434].x;
    float _441 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _651 : (isnan(_651) ? 1.0 : min(_651, 1.0)))) * cbInstanceData._m0[_434].y;
    float _442 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _662 : (isnan(_662) ? 1.0 : min(_662, 1.0)))) * cbInstanceData._m0[_434].z;
    float _684 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _695 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _706 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    uint _447 = _431 + 6u;
    bool _476 = cbMtdParam._m0[1u].z != 0.0;
    float _477 = _476 ? cbInstanceData._m0[_447].w : 0.0;
    SV_Target.x = ((_400 * 0.5) * _410) + 0.500488758087158203125;
    SV_Target.y = ((_401 * 0.5) * _410) + 0.500488758087158203125;
    SV_Target.z = ((_402 * 0.5) * _410) + 0.500488758087158203125;
    SV_Target.w = _477;
    SV_Target_1.x = isnan(1.0) ? _673 : (isnan(_673) ? 1.0 : min(_673, 1.0));
    SV_Target_1.y = isnan(1.0) ? _618 : (isnan(_618) ? 1.0 : min(_618, 1.0));
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _476 ? cbInstanceData._m0[_447].w : ((isnan(1.0) ? _629 : (isnan(_629) ? 1.0 : min(_629, 1.0))) * TEXCOORD.z);
    SV_Target_2.x = isnan(1.0) ? _684 : (isnan(_684) ? 1.0 : min(_684, 1.0));
    SV_Target_2.y = isnan(1.0) ? _695 : (isnan(_695) ? 1.0 : min(_695, 1.0));
    SV_Target_2.z = isnan(1.0) ? _706 : (isnan(_706) ? 1.0 : min(_706, 1.0));
    SV_Target_2.w = _476 ? cbInstanceData._m0[_447].w : (float(floatBitsToUint(cbInstanceData._m0[_431 + 5u]).x) * 0.0039215688593685626983642578125);
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = _477;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = _477;
}


