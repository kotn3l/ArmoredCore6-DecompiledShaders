#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1053;
float _3497;
float _3498;
float _3499;
float _3500;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _282 = dot(vec3(_271, _272, _273), vec3(_194, _195, _196));
    float _285 = dot(vec3(_271, _272, _273), vec3(_208, _209, _210));
    float _288 = dot(vec3(_271, _272, _273), vec3(_215, _216, _217));
    float _291 = (-0.0) - _282;
    float _292 = (-0.0) - _285;
    float _302 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _303 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _304 = (-0.0) - _271;
    float _305 = (-0.0) - _272;
    float _306 = (-0.0) - _273;
    float _311 = inversesqrt(dot(vec2(_291, _292), vec2(_291, _292)));
    float _315 = _288 * _288;
    float _317 = sqrt(((_285 * _285) + (_282 * _282)) + _315);
    float _321 = sqrt((_317 * _317) - _315) / ((-0.0) - _288);
    float _324 = ((cbMtdParam._m0[10u].y * _291) * _311) * _321;
    float _327 = ((cbMtdParam._m0[10u].y * _292) * _311) * _321;
    float _331 = inversesqrt(dot(vec3(_304, _305, _306), vec3(_304, _305, _306)));
    float _335 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _336 = dFdxCoarse(_302);
    float _337 = dFdxCoarse(_303);
    float _338 = dFdyCoarse(_302);
    float _339 = dFdyCoarse(_303);
    uvec2 _347 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _351 = float(_347.y) * (abs(_339) + abs(_337));
    float _353 = float(_347.x) * (abs(_338) + abs(_336));
    float _355 = log2(isnan(_351) ? _353 : (isnan(_353) ? _351 : max(_353, _351)));
    float _356 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _359;
    float _362;
    if (!(_356 <= 4.0))
    {
        _359 = _302;
        _362 = _303;
    }
    else
    {
        uint _555 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_331 * _304, _331 * _305, _331 * _306), vec3(_335 * _215, _335 * _216, _335 * _217))) * 12.0)))), int(32u)));
        float _558 = 1.0 / float(int(_555));
        float _559 = _558 * _324;
        float _560 = _558 * _327;
        float _737;
        float _739;
        float _741;
        float _743;
        if (int(_555) > int(0u))
        {
            float _738;
            float _740;
            float _742;
            float _744;
            uint _1478;
            float _1073 = 1.0;
            uint _1075 = 0u;
            float _1077 = _302;
            float _1079 = _303;
            float _1081 = 1.0;
            float _1083 = 0.0;
            float _1084 = 0.0;
            float _1085 = 0.0;
            float _1086 = 0.0;
            float _1074;
            float _1078;
            float _1080;
            float _1082;
            bool _1098;
            for (;;)
            {
                _1078 = _1077 - _559;
                _1080 = _1079 - _560;
                _1074 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_1078, _1080), vec2(_336, _337), vec2(_338, _339))), vec4(1.0, 0.0, 0.0, 0.0));
                _1082 = _1081 - _558;
                _1098 = _1074 > _1082;
                float frontier_phi_17_pred;
                float frontier_phi_17_pred_1;
                float frontier_phi_17_pred_2;
                float frontier_phi_17_pred_3;
                uint frontier_phi_17_pred_4;
                if (_1098)
                {
                    frontier_phi_17_pred = _1073;
                    frontier_phi_17_pred_1 = _1081;
                    frontier_phi_17_pred_2 = _1074;
                    frontier_phi_17_pred_3 = _1082;
                    frontier_phi_17_pred_4 = _555;
                }
                else
                {
                    frontier_phi_17_pred = _1086;
                    frontier_phi_17_pred_1 = _1085;
                    frontier_phi_17_pred_2 = _1084;
                    frontier_phi_17_pred_3 = _1083;
                    frontier_phi_17_pred_4 = _1075;
                }
                _744 = frontier_phi_17_pred;
                _742 = frontier_phi_17_pred_1;
                _740 = frontier_phi_17_pred_2;
                _738 = frontier_phi_17_pred_3;
                _1478 = frontier_phi_17_pred_4;
                uint _1076 = _1478 + 1u;
                if (int(_1076) < int(_555))
                {
                    _1073 = _1074;
                    _1075 = _1076;
                    _1077 = _1078;
                    _1079 = _1080;
                    _1081 = _1082;
                    _1083 = _738;
                    _1084 = _740;
                    _1085 = _742;
                    _1086 = _744;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _737 = _738;
            _739 = _740;
            _741 = _742;
            _743 = _744;
        }
        else
        {
            _737 = 0.0;
            _739 = 0.0;
            _741 = 0.0;
            _743 = 0.0;
        }
        float _745 = _741 - _743;
        float _746 = _737 - _739;
        float _752 = 1.0 - (((_745 * _737) - (_741 * _746)) / (_745 - _746));
        float _753 = _752 * _324;
        float _754 = _752 * _327;
        float _361 = _302 - _753;
        float _364 = _303 - _754;
        float frontier_phi_3_8_ladder;
        float frontier_phi_3_8_ladder_1;
        if (_356 > 3.0)
        {
            float _1100 = _356 - trunc(_356);
            frontier_phi_3_8_ladder = (_1100 * _753) + _361;
            frontier_phi_3_8_ladder_1 = (_1100 * _754) + _364;
        }
        else
        {
            frontier_phi_3_8_ladder = _361;
            frontier_phi_3_8_ladder_1 = _364;
        }
        _359 = frontier_phi_3_8_ladder;
        _362 = frontier_phi_3_8_ladder_1;
    }
    float _369 = ((_359 - _302) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _370 = ((_362 - _303) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _383 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _369) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _370) + cbTextureTilingScale._m0[3u].w));
    float _388 = _383.x * cbMtdParam._m0[9u].x;
    float _389 = _383.y * cbMtdParam._m0[9u].y;
    float _390 = _383.z * cbMtdParam._m0[9u].z;
    vec4 _402 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _369) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _370) + cbTextureTilingScale._m0[1u].w));
    float _406 = _402.z;
    float _411 = (_402.x * 2.0) + (-1.0);
    float _413 = (_402.y * 2.0) + (-1.0);
    float _414 = dot(vec2(_411, _413), vec2(_411, _413));
    float _3519 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _420 = sqrt(1.0 - (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))));
    float _423 = fma(_420, _215, fma(_413, _208, _411 * _194));
    float _426 = fma(_420, _216, fma(_413, _209, _411 * _195));
    float _429 = fma(_420, _217, fma(_413, _210, _411 * _196));
    float _433 = inversesqrt(dot(vec3(_423, _426, _429), vec3(_423, _426, _429)));
    float _434 = _433 * _423;
    float _435 = _433 * _426;
    float _436 = _433 * _429;
    float _440 = cbMtdParam._m0[10u].x + _402.w;
    float _444 = inversesqrt(dot(vec3(_434, _435, _436), vec3(_434, _435, _436)));
    float _445 = _444 * _434;
    float _446 = _444 * _435;
    float _447 = _444 * _436;
    float _3530 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _448 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3552 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3563 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3574 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _468 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _517 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _508);
    float _518 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _508);
    float _519 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _508);
    float _523 = inversesqrt(dot(vec3(_517, _518, _519), vec3(_517, _518, _519)));
    float _524 = _517 * _523;
    float _525 = _518 * _523;
    float _526 = _519 * _523;
    vec4 _531 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _533 = _531.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _713 = sqrt(((_517 * _517) + (_518 * _518)) + (_519 * _519));
        float _719 = (cbMatDynParam._m0[5u].x * _713) + cbMatDynParam._m0[5u].y;
        float _3585 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _724 = (cbMatDynParam._m0[5u].z * _713) + cbMatDynParam._m0[5u].w;
        float _3596 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) - _720)) + _720) < ((_533 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _567 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _568 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _588 = fma(_447, cbSceneParam._m0[5u].z, fma(_446, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _445));
    float _591 = fma(_447, cbSceneParam._m0[6u].z, fma(_446, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _445));
    float _594 = fma(_447, cbSceneParam._m0[7u].z, fma(_446, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _445));
    uint _607 = uint(roundEven(NORMAL.w)) * 13u;
    uint _609 = _607 + 9u;
    uint _610 = _609 + uint(cbMatDynParam._m0[0u].w);
    float _616 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_610].x;
    float _617 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_610].y;
    float _618 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * cbInstanceData._m0[_610].z;
    float _3607 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    vec4 _630 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _567, cbSceneParam._m0[86u].y * _568));
    float _634 = ((isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * TEXCOORD.z) * _630.x;
    float _635 = dot(vec3(_445, _446, _447), vec3(_524, _525, _526));
    float _638 = _635 * 2.0;
    float _642 = (_638 * _445) - _524;
    float _643 = (_638 * _446) - _525;
    float _644 = (_638 * _447) - _526;
    float _648 = abs(dot(vec3(_524, _525, _526), vec3(_445, _446, _447)));
    float _3640 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _650 = sqrt(_448);
    float _662 = exp2((_650 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_650 * 3.0));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1052;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _777 = fma(_702, cbModelParam._m0[26u].z, fma(_698, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _694));
        float _781 = fma(_702, cbModelParam._m0[27u].z, fma(_698, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _694));
        float _785 = fma(_702, cbModelParam._m0[28u].z, fma(_698, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _694));
        float _810 = _694 + _445;
        float _811 = _698 + _446;
        float _812 = _702 + _447;
        float _822 = fma(_812, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _810)) - _777;
        float _823 = fma(_812, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _810)) - _781;
        float _824 = fma(_812, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _810)) - _785;
        float _828 = inversesqrt(dot(vec3(_822, _823, _824), vec3(_822, _823, _824)));
        float _841 = ((_828 * _822) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_777 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_828 * _823) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_781 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_828 * _824) / cbModelParam._m0[34u].z) + ((((((_785 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        float _880 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_846.x + (-0.5));
        float _882 = _880 * (_846.y + (-0.5));
        float _883 = _880 * (_846.z + (-0.5));
        float _890 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_853.x + (-0.5));
        float _892 = _890 * (_853.y + (-0.5));
        float _893 = _890 * (_853.z + (-0.5));
        float _900 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_860.x + (-0.5));
        float _902 = _900 * (_860.y + (-0.5));
        float _903 = _900 * (_860.z + (-0.5));
        float _910 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_867.x + (-0.5));
        float _912 = _910 * (_867.y + (-0.5));
        float _913 = _910 * (_867.z + (-0.5));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = _881 * 0.5;
        float _918 = _891 * 0.5;
        float _919 = _901 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _934 = (dot(vec3(_445, _446, _447), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _944 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3688 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_946 + 1.0))) + _951) * _914;
        float _961 = _882 * 0.5;
        float _962 = _892 * 0.5;
        float _963 = _902 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _977 = (dot(vec3(_445, _446, _447), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _986 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3721 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_988 + 1.0))) + _993) * _915;
        float _1003 = _883 * 0.5;
        float _1004 = _893 * 0.5;
        float _1005 = _903 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_445, _446, _447), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3754 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1030 + 1.0))) + _1035) * _916;
        _1052 = _883;
        _1054 = _882;
        _1055 = _881;
        _1056 = _893;
        _1057 = _892;
        _1058 = _891;
        _1059 = _903;
        _1060 = _902;
        _1061 = _901;
        _1062 = _916;
        _1063 = _915;
        _1064 = _914;
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
    }
    else
    {
        _1052 = _1053;
        _1054 = _1053;
        _1055 = _1053;
        _1056 = _1053;
        _1057 = _1053;
        _1058 = _1053;
        _1059 = _1053;
        _1060 = _1053;
        _1061 = _1053;
        _1062 = _1053;
        _1063 = _1053;
        _1064 = _1053;
        _1065 = 0.0;
        _1066 = 0.0;
        _1067 = 0.0;
    }
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1125 = fma(_702, cbModelParam._m0[30u].z, fma(_698, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _694));
        float _1129 = fma(_702, cbModelParam._m0[31u].z, fma(_698, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _694));
        float _1133 = fma(_702, cbModelParam._m0[32u].z, fma(_698, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _694));
        float _1156 = _694 + _445;
        float _1157 = _698 + _446;
        float _1158 = _702 + _447;
        float _1168 = fma(_1158, cbModelParam._m0[30u].z, fma(_1157, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156)) - _1125;
        float _1169 = fma(_1158, cbModelParam._m0[31u].z, fma(_1157, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156)) - _1129;
        float _1170 = fma(_1158, cbModelParam._m0[32u].z, fma(_1157, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156)) - _1133;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1125 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1129 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[35u].z) + ((((((_1133 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1224 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1191.x + (-0.5));
        float _1226 = _1224 * (_1191.y + (-0.5));
        float _1227 = _1224 * (_1191.z + (-0.5));
        float _1234 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1198.x + (-0.5));
        float _1236 = _1234 * (_1198.y + (-0.5));
        float _1237 = _1234 * (_1198.z + (-0.5));
        float _1244 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1205.x + (-0.5));
        float _1246 = _1244 * (_1205.y + (-0.5));
        float _1247 = _1244 * (_1205.z + (-0.5));
        float _1254 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1212.x + (-0.5));
        float _1256 = _1254 * (_1212.y + (-0.5));
        float _1257 = _1254 * (_1212.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_445, _446, _447), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3817 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1288 + 1.0))) + _1293) * _1258;
        float _1303 = _1226 * 0.5;
        float _1304 = _1236 * 0.5;
        float _1305 = _1246 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_445, _446, _447), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3850 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1330 + 1.0))) + _1335) * _1259;
        float _1345 = _1227 * 0.5;
        float _1346 = _1237 * 0.5;
        float _1347 = _1247 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_445, _446, _447), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3883 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1372 + 1.0))) + _1377) * _1260;
        _1394 = _1227;
        _1395 = _1226;
        _1396 = _1225;
        _1397 = _1237;
        _1398 = _1236;
        _1399 = _1235;
        _1400 = _1247;
        _1401 = _1246;
        _1402 = _1245;
        _1403 = _1260;
        _1404 = _1259;
        _1405 = _1258;
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1053;
        _1395 = _1053;
        _1396 = _1053;
        _1397 = _1053;
        _1398 = _1053;
        _1399 = _1053;
        _1400 = _1053;
        _1401 = _1053;
        _1402 = _1053;
        _1403 = _1053;
        _1404 = _1053;
        _1405 = _1053;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1065)) + _1065;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1066)) + _1066;
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1067)) + _1067;
    float _1441 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1418));
    float _1462 = _642 * 0.5;
    float _1463 = _643 * 0.5;
    float _1464 = _644 * 0.5;
    float _1465 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1468 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1471 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1507;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1480 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1052, _1056, _1059, _1062));
        float _1484 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1054, _1057, _1060, _1063));
        float _1488 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1055, _1058, _1061, _1064));
        float _1495 = dot(vec4(cbModelParam._m0[39u]), vec4(_1462, _1463, _1464, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1495) ? 0.0 : (isnan(0.0) ? _1495 : max(0.0, _1495))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1518;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1509 = dot(vec4(cbModelParam._m0[40u]), vec4(_1462, _1463, _1464, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1509) ? 0.0 : (isnan(0.0) ? _1509 : max(0.0, _1509))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1522 = (_1518 * cbModelParam._m0[1u].x) + (_1507 * (1.0 - cbModelParam._m0[1u].x));
    float _1532 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _448);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1532 : min(cbModelParam._m0[25u].z, _1532));
    float _1615;
    float _1617;
    float _1619;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1582 = fma(_702, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694)) + cbModelParam._m0[13u].w;
        float _1586 = fma(_702, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694)) + cbModelParam._m0[14u].w;
        float _1590 = fma(_702, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694)) + cbModelParam._m0[15u].w;
        float _1593 = fma(_644, cbModelParam._m0[13u].z, fma(_643, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _642));
        float _1596 = fma(_644, cbModelParam._m0[14u].z, fma(_643, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _642));
        float _1599 = fma(_644, cbModelParam._m0[15u].z, fma(_643, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _642));
        float _1627;
        if (_1593 > 0.0)
        {
            _1627 = abs((1.0 - _1582) / _1593);
        }
        else
        {
            float frontier_phi_28_26_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_28_26_ladder = abs((_1582 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_28_26_ladder = 5000.0;
            }
            _1627 = frontier_phi_28_26_ladder;
        }
        float _1854;
        if (_1596 > 0.0)
        {
            _1854 = abs((1.0 - _1586) / _1596);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1586 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1854 = frontier_phi_37_33_ladder;
        }
        float _2100;
        if (_1599 > 0.0)
        {
            _2100 = abs((1.0 - _1590) / _1599);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1590 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2100 = frontier_phi_49_44_ladder;
        }
        float _2102 = isnan(_1854) ? _1627 : (isnan(_1627) ? _1854 : min(_1627, _1854));
        float _2103 = isnan(_2100) ? _2102 : (isnan(_2102) ? _2100 : min(_2102, _2100));
        float _2107 = (_2103 * _1593) + _1582;
        float _2108 = (_2103 * _1596) + _1586;
        float _2109 = (_2103 * _1599) + _1590;
        float _2110 = _2103 * 9.9999997473787516355514526367188e-05;
        float _2112 = (-1.0) - _2110;
        float _2114 = _2110 + 1.0;
        float frontier_phi_27_49_ladder;
        float frontier_phi_27_49_ladder_1;
        float frontier_phi_27_49_ladder_2;
        if ((_2109 > _2114) || ((_2109 < _2112) || ((_2108 > _2114) || ((_2108 < _2112) || ((_2107 < _2112) || (_2107 > _2114))))))
        {
            frontier_phi_27_49_ladder = 0.0;
            frontier_phi_27_49_ladder_1 = 0.0;
            frontier_phi_27_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2233 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2109, cbModelParam._m0[9u].z, fma(_2108, cbModelParam._m0[9u].y, _2107 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2109, cbModelParam._m0[10u].z, fma(_2108, cbModelParam._m0[10u].y, _2107 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2109, cbModelParam._m0[11u].z, fma(_2108, cbModelParam._m0[11u].y, _2107 * cbModelParam._m0[11u].x))), _1533);
            frontier_phi_27_49_ladder = _2233.z * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_1 = _2233.y * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_2 = _2233.x * cbModelParam._m0[1u].y;
        }
        _1615 = frontier_phi_27_49_ladder_2;
        _1617 = frontier_phi_27_49_ladder_1;
        _1619 = frontier_phi_27_49_ladder;
    }
    else
    {
        vec4 _1603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_642, _643, _644), _1533);
        _1615 = _1603.x * cbModelParam._m0[1u].y;
        _1617 = _1603.y * cbModelParam._m0[1u].y;
        _1619 = _1603.z * cbModelParam._m0[1u].y;
    }
    float _1623 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _448);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1623 : min(cbModelParam._m0[25u].w, _1623));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1681 = fma(_702, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694)) + cbModelParam._m0[21u].w;
        float _1685 = fma(_702, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694)) + cbModelParam._m0[22u].w;
        float _1689 = fma(_702, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694)) + cbModelParam._m0[23u].w;
        float _1692 = fma(_644, cbModelParam._m0[21u].z, fma(_643, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _642));
        float _1695 = fma(_644, cbModelParam._m0[22u].z, fma(_643, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _642));
        float _1698 = fma(_644, cbModelParam._m0[23u].z, fma(_643, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _642));
        float _1859;
        if (_1692 > 0.0)
        {
            _1859 = abs((1.0 - _1681) / _1692);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1681 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1859 = frontier_phi_39_35_ladder;
        }
        float _2127;
        if (_1695 > 0.0)
        {
            _2127 = abs((1.0 - _1685) / _1695);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1685 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _2127 = frontier_phi_51_46_ladder;
        }
        float _2332;
        if (_1698 > 0.0)
        {
            _2332 = abs((1.0 - _1689) / _1698);
        }
        else
        {
            float frontier_phi_60_57_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_60_57_ladder = abs((_1689 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_60_57_ladder = 5000.0;
            }
            _2332 = frontier_phi_60_57_ladder;
        }
        float _2334 = isnan(_2127) ? _1859 : (isnan(_1859) ? _2127 : min(_1859, _2127));
        float _2335 = isnan(_2332) ? _2334 : (isnan(_2334) ? _2332 : min(_2334, _2332));
        float _2339 = (_2335 * _1692) + _1681;
        float _2340 = (_2335 * _1695) + _1685;
        float _2341 = (_2335 * _1698) + _1689;
        float _2342 = _2335 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2342;
        float _2345 = _2342 + 1.0;
        float frontier_phi_36_60_ladder;
        float frontier_phi_36_60_ladder_1;
        float frontier_phi_36_60_ladder_2;
        if ((_2341 > _2345) || ((_2341 < _2343) || ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 < _2343) || (_2339 > _2345))))))
        {
            frontier_phi_36_60_ladder = 0.0;
            frontier_phi_36_60_ladder_1 = 0.0;
            frontier_phi_36_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2539 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2341, cbModelParam._m0[17u].z, fma(_2340, cbModelParam._m0[17u].y, _2339 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2341, cbModelParam._m0[18u].z, fma(_2340, cbModelParam._m0[18u].y, _2339 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2341, cbModelParam._m0[19u].z, fma(_2340, cbModelParam._m0[19u].y, _2339 * cbModelParam._m0[19u].x))), _1624);
            frontier_phi_36_60_ladder = _2539.z * cbModelParam._m0[1u].z;
            frontier_phi_36_60_ladder_1 = _2539.y * cbModelParam._m0[1u].z;
            frontier_phi_36_60_ladder_2 = _2539.x * cbModelParam._m0[1u].z;
        }
        _1717 = frontier_phi_36_60_ladder_2;
        _1719 = frontier_phi_36_60_ladder_1;
        _1721 = frontier_phi_36_60_ladder;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_642, _643, _644), _1624);
        _1717 = _1701.x * cbModelParam._m0[1u].z;
        _1719 = _1701.y * cbModelParam._m0[1u].z;
        _1721 = _1701.z * cbModelParam._m0[1u].z;
    }
    float _1733 = ((((1.0 - _662) * ((_650 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_662 * _650)) * _634;
    float _1734 = _1733 * ((cbModelParam._m0[1u].w * (_1717 - _1615)) + _1615);
    float _1735 = _1733 * ((cbModelParam._m0[1u].w * (_1719 - _1617)) + _1617);
    float _1736 = _1733 * ((cbModelParam._m0[1u].w * (_1721 - _1619)) + _1619);
    float _1739 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1735, cbSceneParam._m0[89u].y, _1734 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1735, cbSceneParam._m0[90u].y, _1734 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1735, cbSceneParam._m0[91u].y, _1734 * cbSceneParam._m0[91u].x));
    vec4 _1753 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_567, _568));
    float _1755 = _1753.w;
    float _1767 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1755);
    float _1768 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1755);
    float _1769 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1755);
    uvec4 _1773 = floatBitsToUint(cbInstanceData._m0[_607 + 5u]);
    uint _1775 = _1773.x * 14u;
    uint _1776 = _1775 + 13u;
    float _1783 = _634 + (-1.0);
    float _1788 = (cbLight._m0[_1776].x * _1783) + 1.0;
    float _1789 = (cbLight._m0[_1776].y * _1783) + 1.0;
    float _1790 = (cbLight._m0[_1776].z * _1783) + 1.0;
    float _1791 = (cbLight._m0[_1776].w * _1783) + 1.0;
    uint _1792 = _1775 + 5u;
    float _1798 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
    uint _1802 = _1775 + 4u;
    float _1812 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
    uint _1816 = _1775 | 1u;
    float _1827 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_445, _446, _447));
    float _1830 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_445, _446, _447));
    float _4019 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _4030 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1835 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.3183098733425140380859375;
    float _1837 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.3183098733425140380859375;
    float _1844 = ((cbLight._m0[_1792].x * _1798) * _1837) + (((cbLight._m0[_1802].x * _1767) * _1812) * _1835);
    float _1845 = ((_1798 * cbLight._m0[_1792].y) * _1837) + (((cbLight._m0[_1802].y * _1768) * _1812) * _1835);
    float _1846 = ((_1798 * cbLight._m0[_1792].z) * _1837) + (((cbLight._m0[_1802].z * _1769) * _1812) * _1835);
    uvec4 _1851 = floatBitsToUint(cbLight._m0[_1775 + 12u]);
    bool _1853 = _1851.x == 0u;
    float _1864;
    float _1866;
    float _1868;
    if (_1853)
    {
        _1864 = _1844;
        _1866 = _1845;
        _1868 = _1846;
    }
    else
    {
        uint _1872 = _1775 + 6u;
        float _1888 = (dot(vec3(cbLight._m0[_1775 + 2u].xyz), vec3(_445, _446, _447)) * 0.5) + 0.5;
        float _1889 = _1888 * _1888;
        float _4041 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1891 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _1864 = (((cbLight._m0[_1872].x * 0.3183098733425140380859375) * _1890) * _1891) + _1844;
        _1866 = (((cbLight._m0[_1872].y * 0.3183098733425140380859375) * _1890) * _1891) + _1845;
        _1868 = (((cbLight._m0[_1872].z * 0.3183098733425140380859375) * _1890) * _1891) + _1846;
    }
    bool _1871 = _1851.y == 0u;
    float _1909;
    float _1911;
    float _1913;
    if (_1871)
    {
        _1909 = _1864;
        _1911 = _1866;
        _1913 = _1868;
    }
    else
    {
        uint _2071 = _1775 + 7u;
        float _2087 = (dot(vec3(cbLight._m0[_1775 + 3u].xyz), vec3(_445, _446, _447)) * 0.5) + 0.5;
        float _2088 = _2087 * _2087;
        float _4057 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _2090 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _1909 = (((cbLight._m0[_2071].x * 0.3183098733425140380859375) * _2089) * _2090) + _1864;
        _1911 = (((cbLight._m0[_2071].y * 0.3183098733425140380859375) * _2089) * _2090) + _1866;
        _1913 = (((cbLight._m0[_2071].z * 0.3183098733425140380859375) * _2089) * _2090) + _1868;
    }
    uint _1916 = _1775 + 8u;
    float _1929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1775].w)) * _448) * 0.949999988079071044921875);
    float _1930 = _1929 * _1929;
    float _1931 = cbLight._m0[_1775].x + _524;
    float _1932 = cbLight._m0[_1775].y + _525;
    float _1933 = cbLight._m0[_1775].z + _526;
    float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
    float _1938 = _1937 * _1931;
    float _1939 = _1937 * _1932;
    float _1940 = _1937 * _1933;
    float _1941 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_1775].xyz));
    float _4073 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _1945 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _1946 = dot(vec3(_445, _446, _447), vec3(_1938, _1939, _1940));
    float _4095 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _1950 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_1938, _1939, _1940));
    float _4106 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1954 = _1930 * _1930;
    float _1958 = ((_1949 * _1949) * (_1954 + (-1.0))) + 1.0;
    float _1969 = (exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1970 = 1.0 - _1930;
    float _1981 = (0.5 / (((_1945 * ((_1944 * _1970) + _1930)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _1970) + _1930) * _1944))) * _1944;
    float _4117 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1983 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1954 / ((_1958 * _1958) * 3.141590118408203125));
    uint _1997 = _1775 + 9u;
    float _2008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _448) * 0.949999988079071044921875);
    float _2009 = _2008 * _2008;
    float _2010 = cbLight._m0[_1816].x + _524;
    float _2011 = cbLight._m0[_1816].y + _525;
    float _2012 = cbLight._m0[_1816].z + _526;
    float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
    float _2017 = _2016 * _2010;
    float _2018 = _2016 * _2011;
    float _2019 = _2016 * _2012;
    float _2020 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_1816].xyz));
    float _4128 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _2024 = dot(vec3(_445, _446, _447), vec3(_2017, _2018, _2019));
    float _4139 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2028 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_2017, _2018, _2019));
    float _4150 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2032 = _2009 * _2009;
    float _2036 = ((_2027 * _2027) * (_2032 + (-1.0))) + 1.0;
    float _2045 = (exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2046 = 1.0 - _2009;
    float _2056 = (0.5 / (((_1945 * ((_2023 * _2046) + _2009)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _2046) + _2009) * _2023))) * _2023;
    float _4161 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2058 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2032 / ((_2036 * _2036) * 3.141590118408203125));
    float _2068 = (((_2045 * cbLight._m0[_1997].x) * _2058) * _1798) + ((((cbLight._m0[_1916].x * _1767) * _1969) * _1983) * _1812);
    float _2069 = (((_2045 * cbLight._m0[_1997].y) * _2058) * _1798) + ((((cbLight._m0[_1916].y * _1768) * _1969) * _1983) * _1812);
    float _2070 = (((_2045 * cbLight._m0[_1997].z) * _2058) * _1798) + ((((cbLight._m0[_1916].z * _1769) * _1969) * _1983) * _1812);
    float _2132;
    float _2134;
    float _2136;
    if (_1853)
    {
        _2132 = _2068;
        _2134 = _2069;
        _2136 = _2070;
    }
    else
    {
        uint _2138 = _1775 + 2u;
        uint _2142 = _1775 + 10u;
        float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _448) * 0.949999988079071044921875);
        float _2157 = _2156 * _2156;
        float _2158 = cbLight._m0[_2138].x + _524;
        float _2159 = cbLight._m0[_2138].y + _525;
        float _2160 = cbLight._m0[_2138].z + _526;
        float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
        float _2165 = _2164 * _2158;
        float _2166 = _2164 * _2159;
        float _2167 = _2164 * _2160;
        float _2168 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_2138].xyz));
        float _4172 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2172 = dot(vec3(_445, _446, _447), vec3(_2165, _2166, _2167));
        float _4183 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2176 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2165, _2166, _2167));
        float _4194 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2180 = _2157 * _2157;
        float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
        float _2193 = (exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2194 = 1.0 - _2157;
        float _2204 = (0.5 / (((_1945 * ((_2171 * _2194) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _2194) + _2157) * _2171))) * _2171;
        float _4205 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2206 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
        float _2207 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _2132 = (((_2193 * cbLight._m0[_2142].x) * _2206) * _2207) + _2068;
        _2134 = (((_2193 * cbLight._m0[_2142].y) * _2206) * _2207) + _2069;
        _2136 = (((_2193 * cbLight._m0[_2142].z) * _2206) * _2207) + _2070;
    }
    float _2242;
    float _2244;
    float _2246;
    if (_1871)
    {
        _2242 = _2132;
        _2244 = _2134;
        _2246 = _2136;
    }
    else
    {
        uint _2253 = _1775 + 3u;
        uint _2257 = _1775 + 11u;
        float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _448) * 0.949999988079071044921875);
        float _2272 = _2271 * _2271;
        float _2273 = cbLight._m0[_2253].x + _524;
        float _2274 = cbLight._m0[_2253].y + _525;
        float _2275 = cbLight._m0[_2253].z + _526;
        float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
        float _2280 = _2279 * _2273;
        float _2281 = _2279 * _2274;
        float _2282 = _2279 * _2275;
        float _2283 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_2253].xyz));
        float _4221 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2287 = dot(vec3(_445, _446, _447), vec3(_2280, _2281, _2282));
        float _4232 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2291 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2280, _2281, _2282));
        float _4243 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2295 = _2272 * _2272;
        float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
        float _2308 = (exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2309 = 1.0 - _2272;
        float _2319 = (0.5 / (((_1945 * ((_2286 * _2309) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _2309) + _2272) * _2286))) * _2286;
        float _4254 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2321 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
        float _2322 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _2242 = (((_2308 * cbLight._m0[_2257].x) * _2321) * _2322) + _2132;
        _2244 = (((_2308 * cbLight._m0[_2257].y) * _2321) * _2322) + _2134;
        _2246 = (((_2308 * cbLight._m0[_2257].z) * _2321) * _2322) + _2136;
    }
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    if (_1773.y == 0u)
    {
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2397;
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2397;
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2397;
        uvec4 _2412 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2413 = _2412.x;
        uint _2424 = uint((float(_2412.y) * floor(float(uint(cbSceneParam._m0[85u].y * _568) / _2413))) + floor(float(uint(cbSceneParam._m0[85u].x * _567) / _2413)));
        float _2434 = (log2(_2400 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2435 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        uint _2438 = uint(isnan(14.0) ? _2435 : (isnan(_2435) ? 14.0 : min(_2435, 14.0)));
        uvec4 _2443 = texelFetch(g_lightClusterGridBuffer, int(((_2438 << 2u) + (_2424 << 6u)) >> 2u));
        uint _2444 = _2443.x;
        uint _2445 = _2412.z;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        if (((((1u << ((_2445 >> 4u) & 15u)) + 4294967295u) & _2444) == 0u) || ((_2445 & 240u) == 0u))
        {
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
        }
        else
        {
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            uint _2702 = 0u;
            uint _2711;
            bool _2712;
            for (;;)
            {
                _2711 = texelFetch(g_lightClassification, int((((_2438 << 5u) + (_2424 << 9u)) + (_2702 << 2u)) >> 2u)).x;
                _2712 = _2711 == 0u;
                float frontier_phi_77_pred;
                float frontier_phi_77_pred_1;
                float frontier_phi_77_pred_2;
                float frontier_phi_77_pred_3;
                float frontier_phi_77_pred_4;
                float frontier_phi_77_pred_5;
                if (_2712)
                {
                    frontier_phi_77_pred = _2701;
                    frontier_phi_77_pred_1 = _2700;
                    frontier_phi_77_pred_2 = _2699;
                    frontier_phi_77_pred_3 = _2698;
                    frontier_phi_77_pred_4 = _2697;
                    frontier_phi_77_pred_5 = _2696;
                }
                else
                {
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    uint _2847;
                    _2841 = _2696;
                    _2842 = _2697;
                    _2843 = _2698;
                    _2844 = _2699;
                    _2845 = _2700;
                    _2846 = _2701;
                    _2847 = _2711;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    for (;;)
                    {
                        uint _2851 = uint(findLSB(_2847)) + (_2702 << 5u);
                        uint _2848 = (_2847 + 4294967295u) & _2847;
                        uint _2853 = _2851 * 48u;
                        vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2853)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 3u)).x));
                        uint _2873 = (_2851 * 48u) + 4u;
                        vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 3u)).x));
                        uint _2892 = (_2851 * 48u) + 8u;
                        vec3 _2903 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2892)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 2u)).x));
                        float _2907 = _2867.x - _2398;
                        float _2908 = _2867.y - _2399;
                        float _2909 = _2867.z - _2400;
                        float _2910 = dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909));
                        float _2913 = inversesqrt(_2910);
                        float _2914 = _2913 * _2907;
                        float _2915 = _2913 * _2908;
                        float _2916 = _2913 * _2909;
                        float _2917 = dot(vec3(_588, _591, _594), vec3(_2914, _2915, _2916));
                        float _2922 = 1.0 - (_2910 * _2867.w);
                        float _4280 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2923 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _2924 = sqrt(_2910) * _2886.w;
                        float _2927 = 1.39999997615814208984375 / (_2924 + 1.39999997615814208984375);
                        float _2928 = _2927 * _2927;
                        float _2931 = ((1.0 - _2928) * _2917) + _2928;
                        float _2934 = _2924 * _2924;
                        float _2938 = ((isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0))) * _2923) / ((_2934 * 0.699999988079071044921875) + 1.0);
                        float _2942 = (-0.0) - _2398;
                        float _2943 = (-0.0) - _2399;
                        float _2944 = (-0.0) - _2400;
                        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
                        float _2949 = _2948 * _2942;
                        float _2950 = _2948 * _2943;
                        float _2951 = _2948 * _2944;
                        float _2959 = exp2(log2(1.0 / ((_2934 * 3.5) + 5.0)) * 0.25);
                        float _2960 = 1.0 - _650;
                        float _2967 = sqrt(1.0 - ((1.0 - (_2960 * _2960)) * (1.0 - (_2959 * _2959))));
                        float _2968 = _2967 * _2967;
                        float _2969 = _2968 * _2968;
                        float _2970 = _2949 + _2914;
                        float _2971 = _2950 + _2915;
                        float _2972 = _2951 + _2916;
                        float _2976 = inversesqrt(dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972)));
                        float _2980 = dot(vec3(_588, _591, _594), vec3(_2949, _2950, _2951));
                        float _4296 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2983 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _2984 = dot(vec3(_588, _591, _594), vec3(_2976 * _2970, _2976 * _2971, _2976 * _2972));
                        float _4307 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2987 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _2991 = ((_2987 * _2987) * (_2969 + (-1.0))) + 1.0;
                        float _2992 = _2927 * _2968;
                        float _2993 = _2992 * _2992;
                        float _2996 = ((1.0 - _2993) * _2917) + _2993;
                        float _4318 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2997 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _2998 = 1.0 - _2968;
                        float _3008 = (0.5 / (((_2997 * ((_2983 * _2998) + _2968)) + 9.9999999392252902907785028219223e-09) + (((_2997 * _2998) + _2968) * _2983))) * _2997;
                        float _4329 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3019 = (((_2969 * 3.1415927410125732421875) * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) / ((_2991 * _2991) * ((_2934 * 2.1991131305694580078125) + 3.141590118408203125))) * _2923;
                        _2771 = (_2938 * _2886.x) + _2844;
                        _2772 = (_2938 * _2886.y) + _2845;
                        _2773 = (_2938 * _2886.z) + _2846;
                        _2768 = (_3019 * _2903.x) + _2841;
                        _2769 = (_3019 * _2903.y) + _2842;
                        _2770 = (_3019 * _2903.z) + _2843;
                        if (_2848 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2841 = _2768;
                            _2842 = _2769;
                            _2843 = _2770;
                            _2844 = _2771;
                            _2845 = _2772;
                            _2846 = _2773;
                            _2847 = _2848;
                        }
                    }
                    frontier_phi_77_pred = _2773;
                    frontier_phi_77_pred_1 = _2772;
                    frontier_phi_77_pred_2 = _2771;
                    frontier_phi_77_pred_3 = _2770;
                    frontier_phi_77_pred_4 = _2769;
                    frontier_phi_77_pred_5 = _2768;
                }
                _2555 = frontier_phi_77_pred;
                _2553 = frontier_phi_77_pred_1;
                _2551 = frontier_phi_77_pred_2;
                _2549 = frontier_phi_77_pred_3;
                _2547 = frontier_phi_77_pred_4;
                _2545 = frontier_phi_77_pred_5;
                uint _2703 = _2702 + 1u;
                if (_2703 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2696 = _2545;
                    _2697 = _2547;
                    _2698 = _2549;
                    _2699 = _2551;
                    _2700 = _2553;
                    _2701 = _2555;
                    _2702 = _2703;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
        }
        uvec4 _2558 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2559 = _2558.z;
        uint _2561 = (_2559 >> 8u) & 15u;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        if (((4294967295u << _2561) & _2444) == 0u)
        {
            _2664 = _2544;
            _2666 = _2546;
            _2668 = _2548;
            _2670 = _2550;
            _2672 = _2552;
            _2674 = _2554;
        }
        else
        {
            float _2689 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
            float _2690 = _2689 * _2398;
            float _2691 = _2689 * _2399;
            float _2692 = _2689 * _2400;
            float frontier_phi_69_70_ladder;
            float frontier_phi_69_70_ladder_1;
            float frontier_phi_69_70_ladder_2;
            float frontier_phi_69_70_ladder_3;
            float frontier_phi_69_70_ladder_4;
            float frontier_phi_69_70_ladder_5;
            if (_2561 < ((_2559 >> 12u) & 15u))
            {
                float _2665;
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2675;
                float _2824 = _2544;
                float _2825 = _2546;
                float _2826 = _2548;
                float _2827 = _2550;
                float _2828 = _2552;
                float _2829 = _2554;
                uint _2830 = _2561;
                uint _2839;
                bool _2840;
                for (;;)
                {
                    _2839 = texelFetch(g_lightClassification, int((((_2438 << 5u) + (_2424 << 9u)) + (_2830 << 2u)) >> 2u)).x;
                    _2840 = _2839 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2840)
                    {
                        frontier_phi_88_pred = _2829;
                        frontier_phi_88_pred_1 = _2828;
                        frontier_phi_88_pred_2 = _2827;
                        frontier_phi_88_pred_3 = _2826;
                        frontier_phi_88_pred_4 = _2825;
                        frontier_phi_88_pred_5 = _2824;
                    }
                    else
                    {
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3046 = _2824;
                        float _3047 = _2825;
                        float _3048 = _2826;
                        float _3049 = _2827;
                        float _3050 = _2828;
                        float _3051 = _2829;
                        uint _3052 = _2839;
                        uint _3053;
                        vec4 _3078;
                        float _3079;
                        vec4 _3094;
                        vec3 _3106;
                        vec4 _3122;
                        vec4 _3138;
                        float _3185;
                        bool _3186;
                        for (;;)
                        {
                            uint _3063 = ((_2830 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3052));
                            _3053 = (_3052 + 4294967295u) & _3052;
                            uint _3065 = _3063 * 40u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3079 = _3078.w;
                            uint _3081 = (_3063 * 40u) + 4u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3096 = (_3063 * 40u) + 8u;
                            _3106 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x));
                            uint _3109 = (_3063 * 40u) + 16u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3125 = (_3063 * 40u) + 20u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3141 = (_3063 * 40u) + 24u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3160 = (_3063 * 40u) + 28u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            _3185 = fma(_2400, _3173.z, fma(_2399, _3173.y, _3173.x * _2398)) + _3173.w;
                            _3186 = !((fma(_2400, _3154.z, fma(_2399, _3154.y, _3154.x * _2398)) + _3154.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3186)
                            {
                                float _3213 = _3078.x - _2398;
                                float _3214 = _3078.y - _2399;
                                float _3215 = _3078.z - _2400;
                                float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                                float _3219 = inversesqrt(_3216);
                                float _3220 = _3219 * _3213;
                                float _3221 = _3219 * _3214;
                                float _3222 = _3219 * _3215;
                                float _3226 = 1.0 - (_3216 / (_3079 * _3079));
                                float _4340 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3231 = sqrt(_3216) * _3094.w;
                                float _3233 = 1.39999997615814208984375 / (_3231 + 1.39999997615814208984375);
                                float _3234 = _3233 * _3233;
                                float _3237 = ((1.0 - _3234) * dot(vec3(_3220, _3221, _3222), vec3(_588, _591, _594))) + _3234;
                                float _3240 = _3231 * _3231;
                                float _3244 = (fma(_2400, _3122.z, fma(_2399, _3122.y, _3122.x * _2398)) + _3122.w) / _3185;
                                float _3245 = (fma(_2400, _3138.z, fma(_2399, _3138.y, _3138.x * _2398)) + _3138.w) / _3185;
                                float _3249 = 1.0 - dot(vec2(_3244, _3245), vec2(_3244, _3245));
                                float _4356 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3251 = _3250 * (((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3227) / ((_3240 * 0.699999988079071044921875) + 1.0));
                                float _3263 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                                float _3264 = 1.0 - _650;
                                float _3271 = sqrt(1.0 - ((1.0 - (_3264 * _3264)) * (1.0 - (_3263 * _3263))));
                                float _3272 = _3271 * _3271;
                                float _3273 = _3272 * _3272;
                                float _3274 = _3220 - _2690;
                                float _3275 = _3221 - _2691;
                                float _3276 = _3222 - _2692;
                                float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                                float _3284 = dot(vec3(_588, _591, _594), vec3((-0.0) - _2690, (-0.0) - _2691, (-0.0) - _2692));
                                float _4367 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3288 = dot(vec3(_588, _591, _594), vec3(_3280 * _3274, _3280 * _3275, _3280 * _3276));
                                float _4378 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3295 = ((_3291 * _3291) * (_3273 + (-1.0))) + 1.0;
                                float _3296 = _3233 * _3272;
                                float _3297 = _3296 * _3296;
                                float _3303 = ((1.0 - _3297) * dot(vec3(_588, _591, _594), vec3(_3220, _3221, _3222))) + _3297;
                                float _4389 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3305 = 1.0 - _3272;
                                float _3315 = (0.5 / (((_3304 * ((_3287 * _3305) + _3272)) + 9.9999999392252902907785028219223e-09) + (((_3304 * _3305) + _3272) * _3287))) * _3304;
                                float _4400 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3325 = (_3250 * _3227) * (((_3273 * 3.1415927410125732421875) * (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) / ((_3295 * _3295) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3251 * _3094.z;
                                frontier_phi_94_pred_1 = _3251 * _3094.y;
                                frontier_phi_94_pred_2 = _3251 * _3094.x;
                                frontier_phi_94_pred_3 = _3325 * _3106.z;
                                frontier_phi_94_pred_4 = _3325 * _3106.y;
                                frontier_phi_94_pred_5 = _3325 * _3106.x;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3334 = frontier_phi_94_pred;
                            _3333 = frontier_phi_94_pred_1;
                            _3332 = frontier_phi_94_pred_2;
                            _3331 = frontier_phi_94_pred_3;
                            _3330 = frontier_phi_94_pred_4;
                            _3329 = frontier_phi_94_pred_5;
                            _3036 = _3332 + _3049;
                            _3037 = _3333 + _3050;
                            _3038 = _3334 + _3051;
                            _3033 = _3329 + _3046;
                            _3034 = _3330 + _3047;
                            _3035 = _3331 + _3048;
                            if (_3053 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3053;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3038;
                        frontier_phi_88_pred_1 = _3037;
                        frontier_phi_88_pred_2 = _3036;
                        frontier_phi_88_pred_3 = _3035;
                        frontier_phi_88_pred_4 = _3034;
                        frontier_phi_88_pred_5 = _3033;
                    }
                    _2675 = frontier_phi_88_pred;
                    _2673 = frontier_phi_88_pred_1;
                    _2671 = frontier_phi_88_pred_2;
                    _2669 = frontier_phi_88_pred_3;
                    _2667 = frontier_phi_88_pred_4;
                    _2665 = frontier_phi_88_pred_5;
                    uint _2831 = _2830 + 1u;
                    if (_2831 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2824 = _2665;
                        _2825 = _2667;
                        _2826 = _2669;
                        _2827 = _2671;
                        _2828 = _2673;
                        _2829 = _2675;
                        _2830 = _2831;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_69_70_ladder = _2675;
                frontier_phi_69_70_ladder_1 = _2673;
                frontier_phi_69_70_ladder_2 = _2671;
                frontier_phi_69_70_ladder_3 = _2669;
                frontier_phi_69_70_ladder_4 = _2667;
                frontier_phi_69_70_ladder_5 = _2665;
            }
            else
            {
                frontier_phi_69_70_ladder = _2554;
                frontier_phi_69_70_ladder_1 = _2552;
                frontier_phi_69_70_ladder_2 = _2550;
                frontier_phi_69_70_ladder_3 = _2548;
                frontier_phi_69_70_ladder_4 = _2546;
                frontier_phi_69_70_ladder_5 = _2544;
            }
            _2664 = frontier_phi_69_70_ladder_5;
            _2666 = frontier_phi_69_70_ladder_4;
            _2668 = frontier_phi_69_70_ladder_3;
            _2670 = frontier_phi_69_70_ladder_2;
            _2672 = frontier_phi_69_70_ladder_1;
            _2674 = frontier_phi_69_70_ladder;
        }
        float _2679 = isnan(1.0) ? _634 : (isnan(_634) ? 1.0 : min(_634, 1.0));
        _2456 = (_2679 * _2670) + _1909;
        _2458 = (_2679 * _2672) + _1911;
        _2460 = (_2679 * _2674) + _1913;
        _2462 = ((_2664 * 0.039999999105930328369140625) * _2679) + _2242;
        _2464 = ((_2666 * 0.039999999105930328369140625) * _2679) + _2244;
        _2466 = ((_2668 * 0.039999999105930328369140625) * _2679) + _2246;
    }
    else
    {
        _2456 = _1909;
        _2458 = _1911;
        _2460 = _1913;
        _2462 = _2242;
        _2464 = _2244;
        _2466 = _2246;
    }
    float _4416 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4427 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4438 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _2483 = ((isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2456 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _634))) + ((_2462 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1522)) * cbPerFrame._m0[3u].x);
    float _2484 = ((isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2458 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _634))) + ((_2464 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1522)) * cbPerFrame._m0[3u].x);
    float _2485 = ((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2460 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _634))) + ((_2466 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1522)) * cbPerFrame._m0[3u].x);
    uint _2486 = _607 + 6u;
    float _2494 = _567 / cbSceneParam._m0[86u].x;
    float _2495 = _568 / cbSceneParam._m0[86u].y;
    vec4 _2509 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2494, _2495, (log2((isnan(cbSceneParam._m0[77u].w) ? _468 : (isnan(_468) ? cbSceneParam._m0[77u].w : min(_468, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2511 = _2509.x;
    float _2512 = _2509.y;
    float _2513 = _2509.z;
    float _2514 = _2509.w;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    if (_468 > cbSceneParam._m0[78u].w)
    {
        float _2569 = isnan(_468) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _468 : min(cbSceneParam._m0[80u].w, _468));
        float _2570 = _2569 / _468;
        float _2581 = _2570 * _517;
        float _2582 = _518 * _2570;
        float _2583 = (-0.0) - _2582;
        float _2584 = _2570 * _519;
        float _2586 = (cbSceneParam._m0[77u].w * _2583) / _2569;
        float _2587 = _2586 + cbSceneParam._m0[79u].w;
        float _2588 = cbSceneParam._m0[79u].w - _2582;
        float _2594 = sqrt(((_2581 * _2581) + (_2582 * _2582)) + (_2584 * _2584));
        float _2597 = (1.0 - (cbSceneParam._m0[77u].w / _2569)) * _2594;
        float _2602 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2604 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2781;
        if (abs((_2583 - _2586) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2781 = ((((_2587 > 0.0) ? exp2(_2602 * _2587) : (2.0 - exp2(_2604 * _2587))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2597;
        }
        else
        {
            float _2725 = 1.0 / cbSceneParam._m0[80u].x;
            float _2726 = isnan(_2588) ? _2587 : (isnan(_2587) ? _2588 : max(_2587, _2588));
            float _2727 = isnan(_2588) ? _2587 : (isnan(_2587) ? _2588 : min(_2587, _2588));
            float _2736 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : min(_2726, 0.0));
            float _2737 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : min(_2727, 0.0));
            _2781 = ((abs(_2594 / _2583) * cbSceneParam._m0[80u].y) * ((((_2736 - _2737) * 2.0) - ((exp2(_2602 * (isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0)))) - exp2(_2602 * (isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0))))) * _2725)) - ((exp2(_2604 * _2736) - exp2(_2604 * _2737)) * _2725))) + (_2597 * cbSceneParam._m0[80u].z);
        }
        vec4 _2783 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2494, _2495, 1.0), 0.0);
        float _2792 = exp2((_2781 * (-1.44269502162933349609375)) * (1.0 - _2783.w));
        float _2793 = log2(_2792);
        float _2809 = log2(_2514);
        _2606 = (exp2(_2809 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2793 * cbSceneParam._m0[78u].x)) * _2783.x) / cbSceneParam._m0[78u].x)) + _2511;
        _2608 = (exp2(_2809 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2793 * cbSceneParam._m0[78u].y)) * _2783.y) / cbSceneParam._m0[78u].y)) + _2512;
        _2610 = (exp2(_2809 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2793 * cbSceneParam._m0[78u].z)) * _2783.z) / cbSceneParam._m0[78u].z)) + _2513;
        _2612 = _2792 * _2514;
    }
    else
    {
        _2606 = _2511;
        _2608 = _2512;
        _2610 = _2513;
        _2612 = _2514;
    }
    bool _2819;
    vec4 _2622;
    vec4 _2644;
    float _2646;
    float _2650;
    float _2651;
    float _2652;
    float _2653;
    bool _2663;
    for (;;)
    {
        _2622 = cbMatDynParam._m0[0u];
        float _2624 = roundEven(_2622.y);
        bool _2625 = _2624 == 3.0;
        float _2626 = log2(_2612);
        float _2633 = exp2(_2626 * cbSceneParam._m0[78u].x) * _2483;
        float _2634 = exp2(_2626 * cbSceneParam._m0[78u].y) * _2484;
        float _2635 = exp2(_2626 * cbSceneParam._m0[78u].z) * _2485;
        float _2642 = _533 + (-0.5);
        _2644 = cbMtdParam._m0[1u];
        _2646 = _2644.y * _2642;
        float _2649 = (_2624 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2650 = _2649 * (_2625 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2606)));
        _2651 = _2649 * (_2625 ? _2634 : (_2634 + (cbSceneParam._m0[72u].w * _2608)));
        _2652 = _2649 * (_2625 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2610)));
        _2653 = _2642 * 0.999000012874603271484375;
        _2663 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2663)
        {
            if ((cbInstanceData._m0[_607 + 7u].x + _2653) < 0.5)
            {
                _2819 = true;
                break;
            }
        }
        uint _2760 = _609 + uint(_2622.w);
        if ((cbInstanceData._m0[_2760].w < 1.0) && ((cbInstanceData._m0[_2760].w + _2653) < 0.5))
        {
            _2819 = true;
            break;
        }
        if ((_2646 + 1.0) < _2644.x)
        {
            _2819 = true;
            break;
        }
        _2819 = false;
        break;
    }
    float _3024;
    if (_2819)
    {
        discard_state = true;
        _3024 = 0.0;
    }
    else
    {
        _3024 = cbInstanceData._m0[_2486].w;
    }
    SV_Target.x = _2650;
    SV_Target.y = _2651;
    SV_Target.z = _2652;
    SV_Target.w = _3024;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2486].w;
    discard_exit();
}


