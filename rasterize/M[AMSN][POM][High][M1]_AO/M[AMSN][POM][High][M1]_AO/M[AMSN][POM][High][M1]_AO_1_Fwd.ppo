#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _987;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    float _276 = dot(vec3(_265, _266, _267), vec3(_188, _189, _190));
    float _279 = dot(vec3(_265, _266, _267), vec3(_202, _203, _204));
    float _282 = dot(vec3(_265, _266, _267), vec3(_209, _210, _211));
    float _285 = (-0.0) - _276;
    float _286 = (-0.0) - _279;
    float _296 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _297 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _298 = (-0.0) - _265;
    float _299 = (-0.0) - _266;
    float _300 = (-0.0) - _267;
    float _305 = inversesqrt(dot(vec2(_285, _286), vec2(_285, _286)));
    float _309 = _282 * _282;
    float _311 = sqrt(((_279 * _279) + (_276 * _276)) + _309);
    float _315 = sqrt((_311 * _311) - _309) / ((-0.0) - _282);
    float _318 = ((cbMtdParam._m0[10u].y * _285) * _305) * _315;
    float _321 = ((cbMtdParam._m0[10u].y * _286) * _305) * _315;
    float _325 = inversesqrt(dot(vec3(_298, _299, _300), vec3(_298, _299, _300)));
    float _329 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _330 = dFdxCoarse(_296);
    float _331 = dFdxCoarse(_297);
    float _332 = dFdyCoarse(_296);
    float _333 = dFdyCoarse(_297);
    uvec2 _341 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _345 = float(_341.y) * (abs(_333) + abs(_331));
    float _347 = float(_341.x) * (abs(_332) + abs(_330));
    float _349 = log2(isnan(_345) ? _347 : (isnan(_347) ? _345 : max(_347, _345)));
    float _350 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _353;
    float _356;
    if (!(_350 <= 4.0))
    {
        _353 = _296;
        _356 = _297;
    }
    else
    {
        uint _683 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_325 * _298, _325 * _299, _325 * _300), vec3(_329 * _209, _329 * _210, _329 * _211))) * 12.0)))), int(32u)));
        float _686 = 1.0 / float(int(_683));
        float _687 = _686 * _318;
        float _688 = _686 * _321;
        float _1004;
        float _1006;
        float _1008;
        float _1010;
        if (int(_683) > int(0u))
        {
            float _1005;
            float _1007;
            float _1009;
            float _1011;
            uint _1457;
            float _1398 = 1.0;
            uint _1400 = 0u;
            float _1402 = _296;
            float _1404 = _297;
            float _1406 = 1.0;
            float _1408 = 0.0;
            float _1409 = 0.0;
            float _1410 = 0.0;
            float _1411 = 0.0;
            float _1399;
            float _1403;
            float _1405;
            float _1407;
            bool _1423;
            for (;;)
            {
                _1403 = _1402 - _687;
                _1405 = _1404 - _688;
                _1399 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_1403, _1405), vec2(_330, _331), vec2(_332, _333))), vec4(1.0, 0.0, 0.0, 0.0));
                _1407 = _1406 - _686;
                _1423 = _1399 > _1407;
                float frontier_phi_16_pred;
                float frontier_phi_16_pred_1;
                float frontier_phi_16_pred_2;
                float frontier_phi_16_pred_3;
                uint frontier_phi_16_pred_4;
                if (_1423)
                {
                    frontier_phi_16_pred = _1398;
                    frontier_phi_16_pred_1 = _1406;
                    frontier_phi_16_pred_2 = _1399;
                    frontier_phi_16_pred_3 = _1407;
                    frontier_phi_16_pred_4 = _683;
                }
                else
                {
                    frontier_phi_16_pred = _1411;
                    frontier_phi_16_pred_1 = _1410;
                    frontier_phi_16_pred_2 = _1409;
                    frontier_phi_16_pred_3 = _1408;
                    frontier_phi_16_pred_4 = _1400;
                }
                _1011 = frontier_phi_16_pred;
                _1009 = frontier_phi_16_pred_1;
                _1007 = frontier_phi_16_pred_2;
                _1005 = frontier_phi_16_pred_3;
                _1457 = frontier_phi_16_pred_4;
                uint _1401 = _1457 + 1u;
                if (int(_1401) < int(_683))
                {
                    _1398 = _1399;
                    _1400 = _1401;
                    _1402 = _1403;
                    _1404 = _1405;
                    _1406 = _1407;
                    _1408 = _1005;
                    _1409 = _1007;
                    _1410 = _1009;
                    _1411 = _1011;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1004 = _1005;
            _1006 = _1007;
            _1008 = _1009;
            _1010 = _1011;
        }
        else
        {
            _1004 = 0.0;
            _1006 = 0.0;
            _1008 = 0.0;
            _1010 = 0.0;
        }
        float _1012 = _1008 - _1010;
        float _1013 = _1004 - _1006;
        float _1019 = 1.0 - (((_1012 * _1004) - (_1008 * _1013)) / (_1012 - _1013));
        float _1020 = _1019 * _318;
        float _1021 = _1019 * _321;
        float _355 = _296 - _1020;
        float _358 = _297 - _1021;
        float frontier_phi_3_8_ladder;
        float frontier_phi_3_8_ladder_1;
        if (_350 > 3.0)
        {
            float _1425 = _350 - trunc(_350);
            frontier_phi_3_8_ladder = (_1425 * _1021) + _358;
            frontier_phi_3_8_ladder_1 = (_1425 * _1020) + _355;
        }
        else
        {
            frontier_phi_3_8_ladder = _358;
            frontier_phi_3_8_ladder_1 = _355;
        }
        _353 = frontier_phi_3_8_ladder_1;
        _356 = frontier_phi_3_8_ladder;
    }
    float _363 = ((_353 - _296) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _364 = ((_356 - _297) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _377 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _363) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _364) + cbTextureTilingScale._m0[3u].w));
    float _382 = _377.x * cbMtdParam._m0[9u].x;
    float _383 = _377.y * cbMtdParam._m0[9u].y;
    float _384 = _377.z * cbMtdParam._m0[9u].z;
    vec4 _396 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _363) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _364) + cbTextureTilingScale._m0[1u].w));
    float _400 = _396.z;
    float _405 = (_396.x * 2.0) + (-1.0);
    float _407 = (_396.y * 2.0) + (-1.0);
    float _408 = dot(vec2(_405, _407), vec2(_405, _407));
    float _3382 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _414 = sqrt(1.0 - (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))));
    float _417 = fma(_414, _209, fma(_407, _202, _405 * _188));
    float _420 = fma(_414, _210, fma(_407, _203, _405 * _189));
    float _423 = fma(_414, _211, fma(_407, _204, _405 * _190));
    float _427 = inversesqrt(dot(vec3(_417, _420, _423), vec3(_417, _420, _423)));
    float _428 = _427 * _417;
    float _429 = _427 * _420;
    float _430 = _427 * _423;
    float _434 = cbMtdParam._m0[10u].x + _396.w;
    float _438 = inversesqrt(dot(vec3(_428, _429, _430), vec3(_428, _429, _430)));
    float _439 = _438 * _428;
    float _440 = _438 * _429;
    float _441 = _438 * _430;
    float _3393 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _442 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3415 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3426 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _3437 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _462 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _511 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _502);
    float _512 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _502);
    float _513 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _502);
    float _517 = inversesqrt(dot(vec3(_511, _512, _513), vec3(_511, _512, _513)));
    float _518 = _511 * _517;
    float _519 = _512 * _517;
    float _520 = _513 * _517;
    float _526 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _527 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _548 = fma(_441, cbSceneParam._m0[5u].z, fma(_440, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _439));
    float _551 = fma(_441, cbSceneParam._m0[6u].z, fma(_440, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _439));
    float _554 = fma(_441, cbSceneParam._m0[7u].z, fma(_440, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _439));
    uint _567 = uint(roundEven(NORMAL.w)) * 13u;
    uint _570 = (_567 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _576 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0)))) * cbInstanceData._m0[_570].x;
    float _577 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * cbInstanceData._m0[_570].y;
    float _578 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) * cbInstanceData._m0[_570].z;
    float _3448 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _579 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _3459 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    vec4 _590 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _526, cbSceneParam._m0[86u].y * _527));
    float _594 = ((isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * TEXCOORD.z) * _590.x;
    float _595 = dot(vec3(_439, _440, _441), vec3(_518, _519, _520));
    float _598 = _595 * 2.0;
    float _602 = (_598 * _439) - _518;
    float _603 = (_598 * _440) - _519;
    float _604 = (_598 * _441) - _520;
    float _608 = abs(dot(vec3(_518, _519, _520), vec3(_439, _440, _441)));
    float _3481 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _610 = sqrt(_442);
    float _622 = exp2((_610 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_610 * 3.0));
    float _654 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _986;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _711 = fma(_662, cbModelParam._m0[26u].z, fma(_658, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _654));
        float _715 = fma(_662, cbModelParam._m0[27u].z, fma(_658, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _654));
        float _719 = fma(_662, cbModelParam._m0[28u].z, fma(_658, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _654));
        float _744 = _654 + _439;
        float _745 = _658 + _440;
        float _746 = _662 + _441;
        float _756 = fma(_746, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744)) - _711;
        float _757 = fma(_746, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744)) - _715;
        float _758 = fma(_746, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744)) - _719;
        float _762 = inversesqrt(dot(vec3(_756, _757, _758), vec3(_756, _757, _758)));
        float _775 = ((_762 * _756) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_711 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _776 = ((_762 * _757) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_715 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _777 = ((_762 * _758) / cbModelParam._m0[34u].z) + ((((((_719 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        float _814 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_780.x + (-0.5));
        float _816 = _814 * (_780.y + (-0.5));
        float _817 = _814 * (_780.z + (-0.5));
        float _824 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_787.x + (-0.5));
        float _826 = _824 * (_787.y + (-0.5));
        float _827 = _824 * (_787.z + (-0.5));
        float _834 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_794.x + (-0.5));
        float _836 = _834 * (_794.y + (-0.5));
        float _837 = _834 * (_794.z + (-0.5));
        float _844 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_801.x + (-0.5));
        float _846 = _844 * (_801.y + (-0.5));
        float _847 = _844 * (_801.z + (-0.5));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = _815 * 0.5;
        float _852 = _825 * 0.5;
        float _853 = _835 * 0.5;
        float _854 = dot(vec3(_851, _852, _853), vec3(_851, _852, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _868 = (dot(vec3(_439, _440, _441), vec3(_859 * _851, _859 * _852, _859 * _853)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _878 = sqrt(((_852 * _852) + (_851 * _851)) + (_853 * _853)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _880 = _879 * 2.0;
        float _884 = (1.0 - _879) / (_879 + 1.0);
        float _3529 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _894 = ((((1.0 - _885) * (_880 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_880 + 1.0))) + _885) * _848;
        float _895 = _816 * 0.5;
        float _896 = _826 * 0.5;
        float _897 = _836 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _911 = (dot(vec3(_439, _440, _441), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _920 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _922 = _921 * 2.0;
        float _926 = (1.0 - _921) / (_921 + 1.0);
        float _3562 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _936 = ((((1.0 - _927) * (_922 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_922 + 1.0))) + _927) * _849;
        float _937 = _817 * 0.5;
        float _938 = _827 * 0.5;
        float _939 = _837 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _953 = (dot(vec3(_439, _440, _441), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _962 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3595 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_964 + 1.0))) + _969) * _850;
        _986 = _817;
        _988 = _816;
        _989 = _815;
        _990 = _827;
        _991 = _826;
        _992 = _825;
        _993 = _837;
        _994 = _836;
        _995 = _835;
        _996 = _850;
        _997 = _849;
        _998 = _848;
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0)));
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)));
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
    }
    else
    {
        _986 = _987;
        _988 = _987;
        _989 = _987;
        _990 = _987;
        _991 = _987;
        _992 = _987;
        _993 = _987;
        _994 = _987;
        _995 = _987;
        _996 = _987;
        _997 = _987;
        _998 = _987;
        _999 = 0.0;
        _1000 = 0.0;
        _1001 = 0.0;
    }
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1045 = fma(_662, cbModelParam._m0[30u].z, fma(_658, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _654));
        float _1049 = fma(_662, cbModelParam._m0[31u].z, fma(_658, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _654));
        float _1053 = fma(_662, cbModelParam._m0[32u].z, fma(_658, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _654));
        float _1076 = _654 + _439;
        float _1077 = _658 + _440;
        float _1078 = _662 + _441;
        float _1088 = fma(_1078, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1076)) - _1045;
        float _1089 = fma(_1078, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1076)) - _1049;
        float _1090 = fma(_1078, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1076)) - _1053;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1045 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1049 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[35u].z) + ((((((_1053 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1144 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1111.x + (-0.5));
        float _1146 = _1144 * (_1111.y + (-0.5));
        float _1147 = _1144 * (_1111.z + (-0.5));
        float _1154 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1118.x + (-0.5));
        float _1156 = _1154 * (_1118.y + (-0.5));
        float _1157 = _1154 * (_1118.z + (-0.5));
        float _1164 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1125.x + (-0.5));
        float _1166 = _1164 * (_1125.y + (-0.5));
        float _1167 = _1164 * (_1125.z + (-0.5));
        float _1174 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1132.x + (-0.5));
        float _1176 = _1174 * (_1132.y + (-0.5));
        float _1177 = _1174 * (_1132.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_439, _440, _441), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3658 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1208 + 1.0))) + _1213) * _1178;
        float _1223 = _1146 * 0.5;
        float _1224 = _1156 * 0.5;
        float _1225 = _1166 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_439, _440, _441), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3691 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1250 + 1.0))) + _1255) * _1179;
        float _1265 = _1147 * 0.5;
        float _1266 = _1157 * 0.5;
        float _1267 = _1167 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_439, _440, _441), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3724 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1292 + 1.0))) + _1297) * _1180;
        _1314 = _1147;
        _1315 = _1146;
        _1316 = _1145;
        _1317 = _1157;
        _1318 = _1156;
        _1319 = _1155;
        _1320 = _1167;
        _1321 = _1166;
        _1322 = _1165;
        _1323 = _1180;
        _1324 = _1179;
        _1325 = _1178;
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _987;
        _1315 = _987;
        _1316 = _987;
        _1317 = _987;
        _1318 = _987;
        _1319 = _987;
        _1320 = _987;
        _1321 = _987;
        _1322 = _987;
        _1323 = _987;
        _1324 = _987;
        _1325 = _987;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _999)) + _999;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1000)) + _1000;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1001)) + _1001;
    float _1361 = fma(_1340, cbSceneParam._m0[89u].z, fma(_1339, cbSceneParam._m0[89u].y, _1338 * cbSceneParam._m0[89u].x));
    float _1364 = fma(_1340, cbSceneParam._m0[90u].z, fma(_1339, cbSceneParam._m0[90u].y, _1338 * cbSceneParam._m0[90u].x));
    float _1367 = fma(_1340, cbSceneParam._m0[91u].z, fma(_1339, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1338));
    float _1382 = _602 * 0.5;
    float _1383 = _603 * 0.5;
    float _1384 = _604 * 0.5;
    float _1385 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1388 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1391 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1455;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1428 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_986, _990, _993, _996));
        float _1432 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_988, _991, _994, _997));
        float _1436 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_989, _992, _995, _998));
        float _1443 = dot(vec4(cbModelParam._m0[39u]), vec4(_1382, _1383, _1384, 1.0));
        _1455 = dot(vec3(isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1455 = 1.0;
    }
    float _1468;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1459 = dot(vec4(cbModelParam._m0[40u]), vec4(_1382, _1383, _1384, 1.0));
        _1468 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1459) ? 0.0 : (isnan(0.0) ? _1459 : max(0.0, _1459))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1468 = 1.0;
    }
    float _1472 = (_1468 * cbModelParam._m0[1u].x) + (_1455 * (1.0 - cbModelParam._m0[1u].x));
    float _1482 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _442);
    float _1483 = isnan(_1482) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1482 : min(cbModelParam._m0[25u].z, _1482));
    float _1565;
    float _1567;
    float _1569;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1532 = fma(_662, cbModelParam._m0[13u].z, fma(_658, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _654)) + cbModelParam._m0[13u].w;
        float _1536 = fma(_662, cbModelParam._m0[14u].z, fma(_658, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _654)) + cbModelParam._m0[14u].w;
        float _1540 = fma(_662, cbModelParam._m0[15u].z, fma(_658, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _654)) + cbModelParam._m0[15u].w;
        float _1543 = fma(_604, cbModelParam._m0[13u].z, fma(_603, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602));
        float _1546 = fma(_604, cbModelParam._m0[14u].z, fma(_603, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602));
        float _1549 = fma(_604, cbModelParam._m0[15u].z, fma(_603, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602));
        float _1577;
        if (_1543 > 0.0)
        {
            _1577 = abs((1.0 - _1532) / _1543);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1532 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1577 = frontier_phi_25_23_ladder;
        }
        float _1783;
        if (_1546 > 0.0)
        {
            _1783 = abs((1.0 - _1536) / _1546);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1536 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1783 = frontier_phi_34_30_ladder;
        }
        float _2026;
        if (_1549 > 0.0)
        {
            _2026 = abs((1.0 - _1540) / _1549);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1540 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2026 = frontier_phi_46_41_ladder;
        }
        float _2028 = isnan(_1783) ? _1577 : (isnan(_1577) ? _1783 : min(_1577, _1783));
        float _2029 = isnan(_2026) ? _2028 : (isnan(_2028) ? _2026 : min(_2028, _2026));
        float _2033 = (_2029 * _1543) + _1532;
        float _2034 = (_2029 * _1546) + _1536;
        float _2035 = (_2029 * _1549) + _1540;
        float _2036 = _2029 * 9.9999997473787516355514526367188e-05;
        float _2038 = (-1.0) - _2036;
        float _2040 = _2036 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2035 > _2040) || ((_2035 < _2038) || ((_2034 > _2040) || ((_2034 < _2038) || ((_2033 < _2038) || (_2033 > _2040))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2159 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2035, cbModelParam._m0[9u].z, fma(_2034, cbModelParam._m0[9u].y, _2033 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2035, cbModelParam._m0[10u].z, fma(_2034, cbModelParam._m0[10u].y, _2033 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2035, cbModelParam._m0[11u].z, fma(_2034, cbModelParam._m0[11u].y, _2033 * cbModelParam._m0[11u].x))), _1483);
            frontier_phi_24_46_ladder = _2159.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2159.x * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2159.z * cbModelParam._m0[1u].y;
        }
        _1565 = frontier_phi_24_46_ladder_1;
        _1567 = frontier_phi_24_46_ladder;
        _1569 = frontier_phi_24_46_ladder_2;
    }
    else
    {
        vec4 _1553 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_602, _603, _604), _1483);
        _1565 = _1553.x * cbModelParam._m0[1u].y;
        _1567 = _1553.y * cbModelParam._m0[1u].y;
        _1569 = _1553.z * cbModelParam._m0[1u].y;
    }
    float _1573 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _442);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1573 : min(cbModelParam._m0[25u].w, _1573));
    float _1667;
    float _1669;
    float _1671;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1631 = fma(_662, cbModelParam._m0[21u].z, fma(_658, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _654)) + cbModelParam._m0[21u].w;
        float _1635 = fma(_662, cbModelParam._m0[22u].z, fma(_658, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _654)) + cbModelParam._m0[22u].w;
        float _1639 = fma(_662, cbModelParam._m0[23u].z, fma(_658, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _654)) + cbModelParam._m0[23u].w;
        float _1642 = fma(_604, cbModelParam._m0[21u].z, fma(_603, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602));
        float _1645 = fma(_604, cbModelParam._m0[22u].z, fma(_603, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602));
        float _1648 = fma(_604, cbModelParam._m0[23u].z, fma(_603, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602));
        float _1788;
        if (_1642 > 0.0)
        {
            _1788 = abs((1.0 - _1631) / _1642);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1631 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1788 = frontier_phi_36_32_ladder;
        }
        float _2053;
        if (_1645 > 0.0)
        {
            _2053 = abs((1.0 - _1635) / _1645);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1635 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2053 = frontier_phi_48_43_ladder;
        }
        float _2258;
        if (_1648 > 0.0)
        {
            _2258 = abs((1.0 - _1639) / _1648);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1639 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2258 = frontier_phi_57_54_ladder;
        }
        float _2260 = isnan(_2053) ? _1788 : (isnan(_1788) ? _2053 : min(_1788, _2053));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1642) + _1631;
        float _2266 = (_2261 * _1645) + _1635;
        float _2267 = (_2261 * _1648) + _1639;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2269 = (-1.0) - _2268;
        float _2271 = _2268 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2267 > _2271) || ((_2267 < _2269) || ((_2266 > _2271) || ((_2266 < _2269) || ((_2265 < _2269) || (_2265 > _2271))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2465 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2267, cbModelParam._m0[17u].z, fma(_2266, cbModelParam._m0[17u].y, _2265 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2267, cbModelParam._m0[18u].z, fma(_2266, cbModelParam._m0[18u].y, _2265 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2267, cbModelParam._m0[19u].z, fma(_2266, cbModelParam._m0[19u].y, _2265 * cbModelParam._m0[19u].x))), _1574);
            frontier_phi_33_57_ladder = _2465.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2465.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2465.z * cbModelParam._m0[1u].z;
        }
        _1667 = frontier_phi_33_57_ladder_1;
        _1669 = frontier_phi_33_57_ladder;
        _1671 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1651 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_602, _603, _604), _1574);
        _1667 = _1651.x * cbModelParam._m0[1u].z;
        _1669 = _1651.y * cbModelParam._m0[1u].z;
        _1671 = _1651.z * cbModelParam._m0[1u].z;
    }
    float _1683 = ((((1.0 - _622) * ((_610 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_622 * _610)) * _594;
    float _1684 = _1683 * ((cbModelParam._m0[1u].w * (_1667 - _1565)) + _1565);
    float _1685 = _1683 * ((cbModelParam._m0[1u].w * (_1669 - _1567)) + _1567);
    float _1686 = _1683 * ((cbModelParam._m0[1u].w * (_1671 - _1569)) + _1569);
    float _1689 = fma(_1686, cbSceneParam._m0[89u].z, fma(_1685, cbSceneParam._m0[89u].y, _1684 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1686, cbSceneParam._m0[90u].z, fma(_1685, cbSceneParam._m0[90u].y, _1684 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1686, cbSceneParam._m0[91u].z, fma(_1685, cbSceneParam._m0[91u].y, _1684 * cbSceneParam._m0[91u].x));
    uvec4 _1705 = floatBitsToUint(cbInstanceData._m0[_567 + 5u]);
    uint _1707 = _1705.x * 14u;
    uint _1708 = _1707 + 13u;
    float _1715 = _594 + (-1.0);
    float _1720 = (cbLight._m0[_1708].x * _1715) + 1.0;
    float _1721 = (cbLight._m0[_1708].y * _1715) + 1.0;
    float _1722 = (cbLight._m0[_1708].z * _1715) + 1.0;
    float _1723 = (cbLight._m0[_1708].w * _1715) + 1.0;
    uint _1724 = _1707 + 5u;
    float _1730 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    uint _1734 = _1707 + 4u;
    float _1741 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
    uint _1745 = _1707 | 1u;
    float _1756 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_439, _440, _441));
    float _1759 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_439, _440, _441));
    float _3860 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _3871 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1764 = (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * 0.3183098733425140380859375;
    float _1766 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.3183098733425140380859375;
    float _1773 = ((cbLight._m0[_1724].x * _1730) * _1766) + ((cbLight._m0[_1734].x * _1741) * _1764);
    float _1774 = ((_1730 * cbLight._m0[_1724].y) * _1766) + ((_1741 * cbLight._m0[_1734].y) * _1764);
    float _1775 = ((_1730 * cbLight._m0[_1724].z) * _1766) + ((_1741 * cbLight._m0[_1734].z) * _1764);
    uvec4 _1780 = floatBitsToUint(cbLight._m0[_1707 + 12u]);
    bool _1782 = _1780.x == 0u;
    float _1793;
    float _1795;
    float _1797;
    if (_1782)
    {
        _1793 = _1773;
        _1795 = _1774;
        _1797 = _1775;
    }
    else
    {
        uint _1801 = _1707 + 6u;
        float _1817 = (dot(vec3(cbLight._m0[_1707 + 2u].xyz), vec3(_439, _440, _441)) * 0.5) + 0.5;
        float _1818 = _1817 * _1817;
        float _3882 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1820 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _1793 = (((cbLight._m0[_1801].x * 0.3183098733425140380859375) * _1819) * _1820) + _1773;
        _1795 = (((cbLight._m0[_1801].y * 0.3183098733425140380859375) * _1819) * _1820) + _1774;
        _1797 = (((cbLight._m0[_1801].z * 0.3183098733425140380859375) * _1819) * _1820) + _1775;
    }
    bool _1800 = _1780.y == 0u;
    float _1838;
    float _1840;
    float _1842;
    if (_1800)
    {
        _1838 = _1793;
        _1840 = _1795;
        _1842 = _1797;
    }
    else
    {
        uint _1997 = _1707 + 7u;
        float _2013 = (dot(vec3(cbLight._m0[_1707 + 3u].xyz), vec3(_439, _440, _441)) * 0.5) + 0.5;
        float _2014 = _2013 * _2013;
        float _3898 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2015 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _2016 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _1838 = (((cbLight._m0[_1997].x * 0.3183098733425140380859375) * _2015) * _2016) + _1793;
        _1840 = (((cbLight._m0[_1997].y * 0.3183098733425140380859375) * _2015) * _2016) + _1795;
        _1842 = (((cbLight._m0[_1997].z * 0.3183098733425140380859375) * _2015) * _2016) + _1797;
    }
    uint _1845 = _1707 + 8u;
    float _1858 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1707].w)) * _442) * 0.949999988079071044921875);
    float _1859 = _1858 * _1858;
    float _1860 = cbLight._m0[_1707].x + _518;
    float _1861 = cbLight._m0[_1707].y + _519;
    float _1862 = cbLight._m0[_1707].z + _520;
    float _1866 = inversesqrt(dot(vec3(_1860, _1861, _1862), vec3(_1860, _1861, _1862)));
    float _1867 = _1866 * _1860;
    float _1868 = _1866 * _1861;
    float _1869 = _1866 * _1862;
    float _1870 = dot(vec3(_439, _440, _441), vec3(cbLight._m0[_1707].xyz));
    float _3914 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _1874 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _1875 = dot(vec3(_439, _440, _441), vec3(_1867, _1868, _1869));
    float _3936 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1879 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1867, _1868, _1869));
    float _3947 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1883 = _1859 * _1859;
    float _1887 = ((_1878 * _1878) * (_1883 + (-1.0))) + 1.0;
    float _1898 = (exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1899 = 1.0 - _1859;
    float _1910 = (0.5 / (((_1874 * ((_1873 * _1899) + _1859)) + 9.9999999392252902907785028219223e-09) + (((_1874 * _1899) + _1859) * _1873))) * _1873;
    float _3958 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1912 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1883 / ((_1887 * _1887) * 3.141590118408203125));
    uint _1923 = _1707 + 9u;
    float _1934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1745].w)) * _442) * 0.949999988079071044921875);
    float _1935 = _1934 * _1934;
    float _1936 = cbLight._m0[_1745].x + _518;
    float _1937 = cbLight._m0[_1745].y + _519;
    float _1938 = cbLight._m0[_1745].z + _520;
    float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
    float _1943 = _1942 * _1936;
    float _1944 = _1942 * _1937;
    float _1945 = _1942 * _1938;
    float _1946 = dot(vec3(_439, _440, _441), vec3(cbLight._m0[_1745].xyz));
    float _3969 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _1950 = dot(vec3(_439, _440, _441), vec3(_1943, _1944, _1945));
    float _3980 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_1943, _1944, _1945));
    float _3991 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1958 = _1935 * _1935;
    float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
    float _1971 = (exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1972 = 1.0 - _1935;
    float _1982 = (0.5 / (((_1874 * ((_1949 * _1972) + _1935)) + 9.9999999392252902907785028219223e-09) + (((_1874 * _1972) + _1935) * _1949))) * _1949;
    float _4002 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1984 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
    float _1994 = (((_1971 * cbLight._m0[_1923].x) * _1984) * _1730) + (((_1898 * cbLight._m0[_1845].x) * _1912) * _1741);
    float _1995 = (((_1971 * cbLight._m0[_1923].y) * _1984) * _1730) + (((_1898 * cbLight._m0[_1845].y) * _1912) * _1741);
    float _1996 = (((_1971 * cbLight._m0[_1923].z) * _1984) * _1730) + (((_1898 * cbLight._m0[_1845].z) * _1912) * _1741);
    float _2058;
    float _2060;
    float _2062;
    if (_1782)
    {
        _2058 = _1994;
        _2060 = _1995;
        _2062 = _1996;
    }
    else
    {
        uint _2064 = _1707 + 2u;
        uint _2068 = _1707 + 10u;
        float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _442) * 0.949999988079071044921875);
        float _2083 = _2082 * _2082;
        float _2084 = cbLight._m0[_2064].x + _518;
        float _2085 = cbLight._m0[_2064].y + _519;
        float _2086 = cbLight._m0[_2064].z + _520;
        float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
        float _2091 = _2090 * _2084;
        float _2092 = _2090 * _2085;
        float _2093 = _2090 * _2086;
        float _2094 = dot(vec3(_439, _440, _441), vec3(cbLight._m0[_2064].xyz));
        float _4013 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2097 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _2098 = dot(vec3(_439, _440, _441), vec3(_2091, _2092, _2093));
        float _4024 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2102 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2091, _2092, _2093));
        float _4035 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2106 = _2083 * _2083;
        float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
        float _2119 = (exp2(log2(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2120 = 1.0 - _2083;
        float _2130 = (0.5 / (((_1874 * ((_2097 * _2120) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_1874 * _2120) + _2083) * _2097))) * _2097;
        float _4046 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2132 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
        float _2133 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _2058 = (((_2119 * cbLight._m0[_2068].x) * _2132) * _2133) + _1994;
        _2060 = (((_2119 * cbLight._m0[_2068].y) * _2132) * _2133) + _1995;
        _2062 = (((_2119 * cbLight._m0[_2068].z) * _2132) * _2133) + _1996;
    }
    float _2168;
    float _2170;
    float _2172;
    if (_1800)
    {
        _2168 = _2058;
        _2170 = _2060;
        _2172 = _2062;
    }
    else
    {
        uint _2179 = _1707 + 3u;
        uint _2183 = _1707 + 11u;
        float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _442) * 0.949999988079071044921875);
        float _2198 = _2197 * _2197;
        float _2199 = cbLight._m0[_2179].x + _518;
        float _2200 = cbLight._m0[_2179].y + _519;
        float _2201 = cbLight._m0[_2179].z + _520;
        float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
        float _2206 = _2205 * _2199;
        float _2207 = _2205 * _2200;
        float _2208 = _2205 * _2201;
        float _2209 = dot(vec3(_439, _440, _441), vec3(cbLight._m0[_2179].xyz));
        float _4062 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _2213 = dot(vec3(_439, _440, _441), vec3(_2206, _2207, _2208));
        float _4073 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2216 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2217 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2206, _2207, _2208));
        float _4084 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2221 = _2198 * _2198;
        float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
        float _2234 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2235 = 1.0 - _2198;
        float _2245 = (0.5 / (((_1874 * ((_2212 * _2235) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_1874 * _2235) + _2198) * _2212))) * _2212;
        float _4095 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2247 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
        float _2248 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _2168 = (((_2234 * cbLight._m0[_2183].x) * _2247) * _2248) + _2058;
        _2170 = (((_2234 * cbLight._m0[_2183].y) * _2247) * _2248) + _2060;
        _2172 = (((_2234 * cbLight._m0[_2183].z) * _2247) * _2248) + _2062;
    }
    float _2382;
    float _2384;
    float _2386;
    float _2388;
    float _2390;
    float _2392;
    if (_1705.y == 0u)
    {
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2324 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2323;
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2323;
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2323;
        uvec4 _2338 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2339 = _2338.x;
        uint _2350 = uint((float(_2338.y) * floor(float(uint(cbSceneParam._m0[85u].y * _527) / _2339))) + floor(float(uint(cbSceneParam._m0[85u].x * _526) / _2339)));
        float _2360 = (log2(_2326 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2361 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        uint _2364 = uint(isnan(14.0) ? _2361 : (isnan(_2361) ? 14.0 : min(_2361, 14.0)));
        uvec4 _2369 = texelFetch(g_lightClusterGridBuffer, int(((_2364 << 2u) + (_2350 << 6u)) >> 2u));
        uint _2370 = _2369.x;
        uint _2371 = _2338.z;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        if (((((1u << ((_2371 >> 4u) & 15u)) + 4294967295u) & _2370) == 0u) || ((_2371 & 240u) == 0u))
        {
            _2470 = 0.0;
            _2472 = 0.0;
            _2474 = 0.0;
            _2476 = 0.0;
            _2478 = 0.0;
            _2480 = 0.0;
        }
        else
        {
            float _2471;
            float _2473;
            float _2475;
            float _2477;
            float _2479;
            float _2481;
            float _2614 = 0.0;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            uint _2620 = 0u;
            uint _2629;
            bool _2630;
            for (;;)
            {
                _2629 = texelFetch(g_lightClassification, int((((_2364 << 5u) + (_2350 << 9u)) + (_2620 << 2u)) >> 2u)).x;
                _2630 = _2629 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2630)
                {
                    frontier_phi_72_pred = _2618;
                    frontier_phi_72_pred_1 = _2617;
                    frontier_phi_72_pred_2 = _2616;
                    frontier_phi_72_pred_3 = _2615;
                    frontier_phi_72_pred_4 = _2614;
                    frontier_phi_72_pred_5 = _2619;
                }
                else
                {
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    uint _2744;
                    _2738 = _2614;
                    _2739 = _2615;
                    _2740 = _2616;
                    _2741 = _2617;
                    _2742 = _2618;
                    _2743 = _2619;
                    _2744 = _2629;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    for (;;)
                    {
                        uint _2748 = uint(findLSB(_2744)) + (_2620 << 5u);
                        uint _2745 = (_2744 + 4294967295u) & _2744;
                        uint _2750 = _2748 * 48u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2750)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 3u)).x));
                        uint _2770 = (_2748 * 48u) + 4u;
                        vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 3u)).x));
                        uint _2789 = (_2748 * 48u) + 8u;
                        vec3 _2800 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x));
                        float _2804 = _2764.x - _2324;
                        float _2805 = _2764.y - _2325;
                        float _2806 = _2764.z - _2326;
                        float _2807 = dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806));
                        float _2810 = inversesqrt(_2807);
                        float _2811 = _2810 * _2804;
                        float _2812 = _2810 * _2805;
                        float _2813 = _2810 * _2806;
                        float _2814 = dot(vec3(_548, _551, _554), vec3(_2811, _2812, _2813));
                        float _2819 = 1.0 - (_2807 * _2764.w);
                        float _4121 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2820 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                        float _2821 = sqrt(_2807) * _2783.w;
                        float _2824 = 1.39999997615814208984375 / (_2821 + 1.39999997615814208984375);
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2814) + _2825;
                        float _2831 = _2821 * _2821;
                        float _2835 = ((isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0))) * _2820) / ((_2831 * 0.699999988079071044921875) + 1.0);
                        float _2839 = (-0.0) - _2324;
                        float _2840 = (-0.0) - _2325;
                        float _2841 = (-0.0) - _2326;
                        float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
                        float _2846 = _2845 * _2839;
                        float _2847 = _2845 * _2840;
                        float _2848 = _2845 * _2841;
                        float _2856 = exp2(log2(1.0 / ((_2831 * 3.5) + 5.0)) * 0.25);
                        float _2857 = 1.0 - _610;
                        float _2864 = sqrt(1.0 - ((1.0 - (_2857 * _2857)) * (1.0 - (_2856 * _2856))));
                        float _2865 = _2864 * _2864;
                        float _2866 = _2865 * _2865;
                        float _2867 = _2846 + _2811;
                        float _2868 = _2847 + _2812;
                        float _2869 = _2848 + _2813;
                        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
                        float _2877 = dot(vec3(_548, _551, _554), vec3(_2846, _2847, _2848));
                        float _4137 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2880 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                        float _2881 = dot(vec3(_548, _551, _554), vec3(_2873 * _2867, _2873 * _2868, _2873 * _2869));
                        float _4148 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2884 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2888 = ((_2884 * _2884) * (_2866 + (-1.0))) + 1.0;
                        float _2889 = _2824 * _2865;
                        float _2890 = _2889 * _2889;
                        float _2893 = ((1.0 - _2890) * _2814) + _2890;
                        float _4159 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2894 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2895 = 1.0 - _2865;
                        float _2905 = (0.5 / (((_2894 * ((_2880 * _2895) + _2865)) + 9.9999999392252902907785028219223e-09) + (((_2894 * _2895) + _2865) * _2880))) * _2894;
                        float _4170 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2916 = (((_2866 * 3.1415927410125732421875) * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) / ((_2888 * _2888) * ((_2831 * 2.1991131305694580078125) + 3.141590118408203125))) * _2820;
                        _2673 = (_2835 * _2783.x) + _2741;
                        _2674 = (_2835 * _2783.y) + _2742;
                        _2675 = (_2835 * _2783.z) + _2743;
                        _2670 = (_2916 * _2800.x) + _2738;
                        _2671 = (_2916 * _2800.y) + _2739;
                        _2672 = (_2916 * _2800.z) + _2740;
                        if (_2745 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2738 = _2670;
                            _2739 = _2671;
                            _2740 = _2672;
                            _2741 = _2673;
                            _2742 = _2674;
                            _2743 = _2675;
                            _2744 = _2745;
                        }
                    }
                    frontier_phi_72_pred = _2674;
                    frontier_phi_72_pred_1 = _2673;
                    frontier_phi_72_pred_2 = _2672;
                    frontier_phi_72_pred_3 = _2671;
                    frontier_phi_72_pred_4 = _2670;
                    frontier_phi_72_pred_5 = _2675;
                }
                _2479 = frontier_phi_72_pred;
                _2477 = frontier_phi_72_pred_1;
                _2475 = frontier_phi_72_pred_2;
                _2473 = frontier_phi_72_pred_3;
                _2471 = frontier_phi_72_pred_4;
                _2481 = frontier_phi_72_pred_5;
                uint _2621 = _2620 + 1u;
                if (_2621 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2614 = _2471;
                    _2615 = _2473;
                    _2616 = _2475;
                    _2617 = _2477;
                    _2618 = _2479;
                    _2619 = _2481;
                    _2620 = _2621;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2470 = _2471;
            _2472 = _2473;
            _2474 = _2475;
            _2476 = _2477;
            _2478 = _2479;
            _2480 = _2481;
        }
        uvec4 _2484 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2485 = _2484.z;
        uint _2487 = (_2485 >> 8u) & 15u;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        if (((4294967295u << _2487) & _2370) == 0u)
        {
            _2582 = _2470;
            _2584 = _2472;
            _2586 = _2474;
            _2588 = _2476;
            _2590 = _2478;
            _2592 = _2480;
        }
        else
        {
            float _2607 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
            float _2608 = _2607 * _2324;
            float _2609 = _2607 * _2325;
            float _2610 = _2607 * _2326;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2487 < ((_2485 >> 12u) & 15u))
            {
                float _2583;
                float _2585;
                float _2587;
                float _2589;
                float _2591;
                float _2593;
                float _2721 = _2470;
                float _2722 = _2472;
                float _2723 = _2474;
                float _2724 = _2476;
                float _2725 = _2478;
                float _2726 = _2480;
                uint _2727 = _2487;
                uint _2736;
                bool _2737;
                for (;;)
                {
                    _2736 = texelFetch(g_lightClassification, int((((_2364 << 5u) + (_2350 << 9u)) + (_2727 << 2u)) >> 2u)).x;
                    _2737 = _2736 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2737)
                    {
                        frontier_phi_78_pred = _2726;
                        frontier_phi_78_pred_1 = _2725;
                        frontier_phi_78_pred_2 = _2724;
                        frontier_phi_78_pred_3 = _2723;
                        frontier_phi_78_pred_4 = _2721;
                        frontier_phi_78_pred_5 = _2722;
                    }
                    else
                    {
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _2934 = _2721;
                        float _2935 = _2722;
                        float _2936 = _2723;
                        float _2937 = _2724;
                        float _2938 = _2725;
                        float _2939 = _2726;
                        uint _2940 = _2736;
                        uint _2941;
                        vec4 _2966;
                        float _2967;
                        vec4 _2982;
                        vec3 _2994;
                        vec4 _3010;
                        vec4 _3026;
                        float _3073;
                        bool _3074;
                        for (;;)
                        {
                            uint _2951 = ((_2727 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2940));
                            _2941 = (_2940 + 4294967295u) & _2940;
                            uint _2953 = _2951 * 40u;
                            _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            _2967 = _2966.w;
                            uint _2969 = (_2951 * 40u) + 4u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            uint _2984 = (_2951 * 40u) + 8u;
                            _2994 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x));
                            uint _2997 = (_2951 * 40u) + 16u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            uint _3013 = (_2951 * 40u) + 20u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3029 = (_2951 * 40u) + 24u;
                            vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3048 = (_2951 * 40u) + 28u;
                            vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            _3073 = fma(_2326, _3061.z, fma(_2325, _3061.y, _3061.x * _2324)) + _3061.w;
                            _3074 = !((fma(_2326, _3042.z, fma(_2325, _3042.y, _3042.x * _2324)) + _3042.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3074)
                            {
                                float _3101 = _2966.x - _2324;
                                float _3102 = _2966.y - _2325;
                                float _3103 = _2966.z - _2326;
                                float _3104 = dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103));
                                float _3107 = inversesqrt(_3104);
                                float _3108 = _3107 * _3101;
                                float _3109 = _3107 * _3102;
                                float _3110 = _3107 * _3103;
                                float _3114 = 1.0 - (_3104 / (_2967 * _2967));
                                float _4181 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3115 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                                float _3119 = sqrt(_3104) * _2982.w;
                                float _3121 = 1.39999997615814208984375 / (_3119 + 1.39999997615814208984375);
                                float _3122 = _3121 * _3121;
                                float _3125 = ((1.0 - _3122) * dot(vec3(_3108, _3109, _3110), vec3(_548, _551, _554))) + _3122;
                                float _3128 = _3119 * _3119;
                                float _3132 = (fma(_2326, _3010.z, fma(_2325, _3010.y, _3010.x * _2324)) + _3010.w) / _3073;
                                float _3133 = (fma(_2326, _3026.z, fma(_2325, _3026.y, _3026.x * _2324)) + _3026.w) / _3073;
                                float _3137 = 1.0 - dot(vec2(_3132, _3133), vec2(_3132, _3133));
                                float _4197 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3139 = _3138 * (((isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))) * _3115) / ((_3128 * 0.699999988079071044921875) + 1.0));
                                float _3151 = exp2(log2(1.0 / ((_3128 * 3.5) + 5.0)) * 0.25);
                                float _3152 = 1.0 - _610;
                                float _3159 = sqrt(1.0 - ((1.0 - (_3152 * _3152)) * (1.0 - (_3151 * _3151))));
                                float _3160 = _3159 * _3159;
                                float _3161 = _3160 * _3160;
                                float _3162 = _3108 - _2608;
                                float _3163 = _3109 - _2609;
                                float _3164 = _3110 - _2610;
                                float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                                float _3172 = dot(vec3(_548, _551, _554), vec3((-0.0) - _2608, (-0.0) - _2609, (-0.0) - _2610));
                                float _4208 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3175 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3176 = dot(vec3(_548, _551, _554), vec3(_3168 * _3162, _3168 * _3163, _3168 * _3164));
                                float _4219 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3179 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3183 = ((_3179 * _3179) * (_3161 + (-1.0))) + 1.0;
                                float _3184 = _3121 * _3160;
                                float _3185 = _3184 * _3184;
                                float _3191 = ((1.0 - _3185) * dot(vec3(_548, _551, _554), vec3(_3108, _3109, _3110))) + _3185;
                                float _4230 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3193 = 1.0 - _3160;
                                float _3203 = (0.5 / (((_3192 * ((_3175 * _3193) + _3160)) + 9.9999999392252902907785028219223e-09) + (((_3192 * _3193) + _3160) * _3175))) * _3192;
                                float _4241 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3213 = (_3138 * _3115) * (((_3161 * 3.1415927410125732421875) * (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) / ((_3183 * _3183) * ((_3128 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3139 * _2982.y;
                                frontier_phi_84_pred_1 = _3139 * _2982.x;
                                frontier_phi_84_pred_2 = _3213 * _2994.z;
                                frontier_phi_84_pred_3 = _3213 * _2994.y;
                                frontier_phi_84_pred_4 = _3213 * _2994.x;
                                frontier_phi_84_pred_5 = _3139 * _2982.z;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3221 = frontier_phi_84_pred;
                            _3220 = frontier_phi_84_pred_1;
                            _3219 = frontier_phi_84_pred_2;
                            _3218 = frontier_phi_84_pred_3;
                            _3217 = frontier_phi_84_pred_4;
                            _3222 = frontier_phi_84_pred_5;
                            _2924 = _3220 + _2937;
                            _2925 = _3221 + _2938;
                            _2926 = _3222 + _2939;
                            _2921 = _3217 + _2934;
                            _2922 = _3218 + _2935;
                            _2923 = _3219 + _2936;
                            if (_2941 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2941;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2926;
                        frontier_phi_78_pred_1 = _2925;
                        frontier_phi_78_pred_2 = _2924;
                        frontier_phi_78_pred_3 = _2923;
                        frontier_phi_78_pred_4 = _2921;
                        frontier_phi_78_pred_5 = _2922;
                    }
                    _2593 = frontier_phi_78_pred;
                    _2591 = frontier_phi_78_pred_1;
                    _2589 = frontier_phi_78_pred_2;
                    _2587 = frontier_phi_78_pred_3;
                    _2583 = frontier_phi_78_pred_4;
                    _2585 = frontier_phi_78_pred_5;
                    uint _2728 = _2727 + 1u;
                    if (_2728 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2721 = _2583;
                        _2722 = _2585;
                        _2723 = _2587;
                        _2724 = _2589;
                        _2725 = _2591;
                        _2726 = _2593;
                        _2727 = _2728;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2593;
                frontier_phi_66_67_ladder_1 = _2591;
                frontier_phi_66_67_ladder_2 = _2589;
                frontier_phi_66_67_ladder_3 = _2587;
                frontier_phi_66_67_ladder_4 = _2585;
                frontier_phi_66_67_ladder_5 = _2583;
            }
            else
            {
                frontier_phi_66_67_ladder = _2480;
                frontier_phi_66_67_ladder_1 = _2478;
                frontier_phi_66_67_ladder_2 = _2476;
                frontier_phi_66_67_ladder_3 = _2474;
                frontier_phi_66_67_ladder_4 = _2472;
                frontier_phi_66_67_ladder_5 = _2470;
            }
            _2582 = frontier_phi_66_67_ladder_5;
            _2584 = frontier_phi_66_67_ladder_4;
            _2586 = frontier_phi_66_67_ladder_3;
            _2588 = frontier_phi_66_67_ladder_2;
            _2590 = frontier_phi_66_67_ladder_1;
            _2592 = frontier_phi_66_67_ladder;
        }
        float _2597 = isnan(1.0) ? _594 : (isnan(_594) ? 1.0 : min(_594, 1.0));
        _2382 = (_2597 * _2588) + _1838;
        _2384 = (_2597 * _2590) + _1840;
        _2386 = (_2597 * _2592) + _1842;
        _2388 = ((_2582 * 0.039999999105930328369140625) * _2597) + _2168;
        _2390 = ((_2584 * 0.039999999105930328369140625) * _2597) + _2170;
        _2392 = ((_2586 * 0.039999999105930328369140625) * _2597) + _2172;
    }
    else
    {
        _2382 = _1838;
        _2384 = _1840;
        _2386 = _1842;
        _2388 = _2168;
        _2390 = _2170;
        _2392 = _2172;
    }
    float _4257 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _4268 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _4279 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    uint _2412 = _567 + 6u;
    float _2420 = _526 / cbSceneParam._m0[86u].x;
    float _2421 = _527 / cbSceneParam._m0[86u].y;
    vec4 _2435 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2420, _2421, (log2((isnan(cbSceneParam._m0[77u].w) ? _462 : (isnan(_462) ? cbSceneParam._m0[77u].w : min(_462, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2437 = _2435.x;
    float _2438 = _2435.y;
    float _2439 = _2435.z;
    float _2440 = _2435.w;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    if (_462 > cbSceneParam._m0[78u].w)
    {
        float _2495 = isnan(_462) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _462 : min(cbSceneParam._m0[80u].w, _462));
        float _2496 = _2495 / _462;
        float _2507 = _2496 * _511;
        float _2508 = _512 * _2496;
        float _2509 = (-0.0) - _2508;
        float _2510 = _2496 * _513;
        float _2512 = (cbSceneParam._m0[77u].w * _2509) / _2495;
        float _2513 = _2512 + cbSceneParam._m0[79u].w;
        float _2514 = cbSceneParam._m0[79u].w - _2508;
        float _2520 = sqrt(((_2507 * _2507) + (_2508 * _2508)) + (_2510 * _2510));
        float _2523 = (1.0 - (cbSceneParam._m0[77u].w / _2495)) * _2520;
        float _2528 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2530 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2683;
        if (abs((_2509 - _2512) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2683 = ((((_2513 > 0.0) ? exp2(_2528 * _2513) : (2.0 - exp2(_2530 * _2513))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2523;
        }
        else
        {
            float _2643 = 1.0 / cbSceneParam._m0[80u].x;
            float _2644 = isnan(_2514) ? _2513 : (isnan(_2513) ? _2514 : max(_2513, _2514));
            float _2645 = isnan(_2514) ? _2513 : (isnan(_2513) ? _2514 : min(_2513, _2514));
            float _2654 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : min(_2644, 0.0));
            float _2655 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : min(_2645, 0.0));
            _2683 = ((abs(_2520 / _2509) * cbSceneParam._m0[80u].y) * ((((_2654 - _2655) * 2.0) - ((exp2(_2528 * (isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0)))) - exp2(_2528 * (isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0))))) * _2643)) - ((exp2(_2530 * _2654) - exp2(_2530 * _2655)) * _2643))) + (_2523 * cbSceneParam._m0[80u].z);
        }
        vec4 _2685 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2420, _2421, 1.0), 0.0);
        float _2694 = exp2((_2683 * (-1.44269502162933349609375)) * (1.0 - _2685.w));
        float _2695 = log2(_2694);
        float _2711 = log2(_2440);
        _2532 = (exp2(_2711 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2695 * cbSceneParam._m0[78u].x)) * _2685.x) / cbSceneParam._m0[78u].x)) + _2437;
        _2534 = (exp2(_2711 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2695 * cbSceneParam._m0[78u].y)) * _2685.y) / cbSceneParam._m0[78u].y)) + _2438;
        _2536 = (exp2(_2711 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2695 * cbSceneParam._m0[78u].z)) * _2685.z) / cbSceneParam._m0[78u].z)) + _2439;
        _2538 = _2694 * _2440;
    }
    else
    {
        _2532 = _2437;
        _2534 = _2438;
        _2536 = _2439;
        _2538 = _2440;
    }
    float _2550 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2551 = _2550 == 3.0;
    float _2552 = log2(_2538);
    float _2559 = exp2(_2552 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2382 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _594))) + ((_2388 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1472)) * cbPerFrame._m0[3u].x));
    float _2560 = exp2(_2552 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2384 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _594))) + ((_2390 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1472)) * cbPerFrame._m0[3u].x));
    float _2561 = exp2(_2552 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2386 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _594))) + ((_2392 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1472)) * cbPerFrame._m0[3u].x));
    float _2570 = (_2550 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2570 * (_2551 ? _2559 : (_2559 + (cbSceneParam._m0[72u].w * _2532)));
    SV_Target.y = _2570 * (_2551 ? _2560 : (_2560 + (cbSceneParam._m0[72u].w * _2534)));
    SV_Target.z = _2570 * (_2551 ? _2561 : (_2561 + (cbSceneParam._m0[72u].w * _2536)));
    SV_Target.w = cbInstanceData._m0[_2412].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2412].w;
}


