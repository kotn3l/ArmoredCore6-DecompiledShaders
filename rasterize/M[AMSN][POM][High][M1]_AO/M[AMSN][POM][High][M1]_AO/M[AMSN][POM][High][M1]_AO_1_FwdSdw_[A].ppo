#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1055;
float _3758;
float _3759;
float _3760;
float _3761;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    float _284 = dot(vec3(_273, _274, _275), vec3(_196, _197, _198));
    float _287 = dot(vec3(_273, _274, _275), vec3(_210, _211, _212));
    float _290 = dot(vec3(_273, _274, _275), vec3(_217, _218, _219));
    float _293 = (-0.0) - _284;
    float _294 = (-0.0) - _287;
    float _304 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _305 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _306 = (-0.0) - _273;
    float _307 = (-0.0) - _274;
    float _308 = (-0.0) - _275;
    float _313 = inversesqrt(dot(vec2(_293, _294), vec2(_293, _294)));
    float _317 = _290 * _290;
    float _319 = sqrt(((_287 * _287) + (_284 * _284)) + _317);
    float _323 = sqrt((_319 * _319) - _317) / ((-0.0) - _290);
    float _326 = ((cbMtdParam._m0[10u].y * _293) * _313) * _323;
    float _329 = ((cbMtdParam._m0[10u].y * _294) * _313) * _323;
    float _333 = inversesqrt(dot(vec3(_306, _307, _308), vec3(_306, _307, _308)));
    float _337 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _338 = dFdxCoarse(_304);
    float _339 = dFdxCoarse(_305);
    float _340 = dFdyCoarse(_304);
    float _341 = dFdyCoarse(_305);
    uvec2 _349 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _353 = float(_349.y) * (abs(_341) + abs(_339));
    float _355 = float(_349.x) * (abs(_340) + abs(_338));
    float _357 = log2(isnan(_353) ? _355 : (isnan(_355) ? _353 : max(_355, _353)));
    float _358 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _361;
    float _364;
    if (!(_358 <= 4.0))
    {
        _361 = _304;
        _364 = _305;
    }
    else
    {
        uint _557 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_333 * _306, _333 * _307, _333 * _308), vec3(_337 * _217, _337 * _218, _337 * _219))) * 12.0)))), int(32u)));
        float _560 = 1.0 / float(int(_557));
        float _561 = _560 * _326;
        float _562 = _560 * _329;
        float _739;
        float _741;
        float _743;
        float _745;
        if (int(_557) > int(0u))
        {
            float _740;
            float _742;
            float _744;
            float _746;
            uint _1480;
            float _1075 = 1.0;
            uint _1077 = 0u;
            float _1079 = _304;
            float _1081 = _305;
            float _1083 = 1.0;
            float _1085 = 0.0;
            float _1086 = 0.0;
            float _1087 = 0.0;
            float _1088 = 0.0;
            float _1076;
            float _1080;
            float _1082;
            float _1084;
            bool _1100;
            for (;;)
            {
                _1080 = _1079 - _561;
                _1082 = _1081 - _562;
                _1076 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_1080, _1082), vec2(_338, _339), vec2(_340, _341))), vec4(1.0, 0.0, 0.0, 0.0));
                _1084 = _1083 - _560;
                _1100 = _1076 > _1084;
                float frontier_phi_17_pred;
                float frontier_phi_17_pred_1;
                float frontier_phi_17_pred_2;
                float frontier_phi_17_pred_3;
                uint frontier_phi_17_pred_4;
                if (_1100)
                {
                    frontier_phi_17_pred = _1075;
                    frontier_phi_17_pred_1 = _1083;
                    frontier_phi_17_pred_2 = _1076;
                    frontier_phi_17_pred_3 = _1084;
                    frontier_phi_17_pred_4 = _557;
                }
                else
                {
                    frontier_phi_17_pred = _1088;
                    frontier_phi_17_pred_1 = _1087;
                    frontier_phi_17_pred_2 = _1086;
                    frontier_phi_17_pred_3 = _1085;
                    frontier_phi_17_pred_4 = _1077;
                }
                _746 = frontier_phi_17_pred;
                _744 = frontier_phi_17_pred_1;
                _742 = frontier_phi_17_pred_2;
                _740 = frontier_phi_17_pred_3;
                _1480 = frontier_phi_17_pred_4;
                uint _1078 = _1480 + 1u;
                if (int(_1078) < int(_557))
                {
                    _1075 = _1076;
                    _1077 = _1078;
                    _1079 = _1080;
                    _1081 = _1082;
                    _1083 = _1084;
                    _1085 = _740;
                    _1086 = _742;
                    _1087 = _744;
                    _1088 = _746;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _739 = _740;
            _741 = _742;
            _743 = _744;
            _745 = _746;
        }
        else
        {
            _739 = 0.0;
            _741 = 0.0;
            _743 = 0.0;
            _745 = 0.0;
        }
        float _747 = _743 - _745;
        float _748 = _739 - _741;
        float _754 = 1.0 - (((_747 * _739) - (_743 * _748)) / (_747 - _748));
        float _755 = _754 * _326;
        float _756 = _754 * _329;
        float _363 = _304 - _755;
        float _366 = _305 - _756;
        float frontier_phi_3_8_ladder;
        float frontier_phi_3_8_ladder_1;
        if (_358 > 3.0)
        {
            float _1102 = _358 - trunc(_358);
            frontier_phi_3_8_ladder = (_1102 * _755) + _363;
            frontier_phi_3_8_ladder_1 = (_1102 * _756) + _366;
        }
        else
        {
            frontier_phi_3_8_ladder = _363;
            frontier_phi_3_8_ladder_1 = _366;
        }
        _361 = frontier_phi_3_8_ladder;
        _364 = frontier_phi_3_8_ladder_1;
    }
    float _371 = ((_361 - _304) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _372 = ((_364 - _305) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _385 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _371) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _372) + cbTextureTilingScale._m0[3u].w));
    float _390 = _385.x * cbMtdParam._m0[9u].x;
    float _391 = _385.y * cbMtdParam._m0[9u].y;
    float _392 = _385.z * cbMtdParam._m0[9u].z;
    vec4 _404 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _371) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _372) + cbTextureTilingScale._m0[1u].w));
    float _408 = _404.z;
    float _413 = (_404.x * 2.0) + (-1.0);
    float _415 = (_404.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_413, _415), vec2(_413, _415));
    float _3780 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _422 = sqrt(1.0 - (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))));
    float _425 = fma(_422, _217, fma(_415, _210, _413 * _196));
    float _428 = fma(_422, _218, fma(_415, _211, _413 * _197));
    float _431 = fma(_422, _219, fma(_415, _212, _413 * _198));
    float _435 = inversesqrt(dot(vec3(_425, _428, _431), vec3(_425, _428, _431)));
    float _436 = _435 * _425;
    float _437 = _435 * _428;
    float _438 = _435 * _431;
    float _442 = cbMtdParam._m0[10u].x + _404.w;
    float _446 = inversesqrt(dot(vec3(_436, _437, _438), vec3(_436, _437, _438)));
    float _447 = _446 * _436;
    float _448 = _446 * _437;
    float _449 = _446 * _438;
    float _3791 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _450 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3813 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3824 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3835 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _470 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _519 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _510);
    float _520 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _510);
    float _521 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _510);
    float _525 = inversesqrt(dot(vec3(_519, _520, _521), vec3(_519, _520, _521)));
    float _526 = _519 * _525;
    float _527 = _520 * _525;
    float _528 = _521 * _525;
    vec4 _533 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _535 = _533.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _715 = sqrt(((_519 * _519) + (_520 * _520)) + (_521 * _521));
        float _721 = (cbMatDynParam._m0[5u].x * _715) + cbMatDynParam._m0[5u].y;
        float _3846 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _726 = (cbMatDynParam._m0[5u].z * _715) + cbMatDynParam._m0[5u].w;
        float _3857 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) - _722)) + _722) < ((_535 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _569 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _570 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _590 = fma(_449, cbSceneParam._m0[5u].z, fma(_448, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _447));
    float _593 = fma(_449, cbSceneParam._m0[6u].z, fma(_448, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _447));
    float _596 = fma(_449, cbSceneParam._m0[7u].z, fma(_448, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _447));
    uint _609 = uint(roundEven(NORMAL.w)) * 13u;
    uint _611 = _609 + 9u;
    uint _612 = _611 + uint(cbMatDynParam._m0[0u].w);
    float _618 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_612].x;
    float _619 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * cbInstanceData._m0[_612].y;
    float _620 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * cbInstanceData._m0[_612].z;
    float _3868 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    vec4 _632 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _569, cbSceneParam._m0[86u].y * _570));
    float _636 = ((isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * TEXCOORD.z) * _632.x;
    float _637 = dot(vec3(_447, _448, _449), vec3(_526, _527, _528));
    float _640 = _637 * 2.0;
    float _644 = (_640 * _447) - _526;
    float _645 = (_640 * _448) - _527;
    float _646 = (_640 * _449) - _528;
    float _650 = abs(dot(vec3(_526, _527, _528), vec3(_447, _448, _449)));
    float _3901 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _652 = sqrt(_450);
    float _664 = exp2((_652 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_652 * 3.0));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1054;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _779 = fma(_704, cbModelParam._m0[26u].z, fma(_700, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _696));
        float _783 = fma(_704, cbModelParam._m0[27u].z, fma(_700, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _696));
        float _787 = fma(_704, cbModelParam._m0[28u].z, fma(_700, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _696));
        float _812 = _696 + _447;
        float _813 = _700 + _448;
        float _814 = _704 + _449;
        float _824 = fma(_814, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _812)) - _779;
        float _825 = fma(_814, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _812)) - _783;
        float _826 = fma(_814, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _812)) - _787;
        float _830 = inversesqrt(dot(vec3(_824, _825, _826), vec3(_824, _825, _826)));
        float _843 = ((_830 * _824) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_779 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_830 * _825) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_783 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_830 * _826) / cbModelParam._m0[34u].z) + ((((((_787 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        float _882 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_848.x + (-0.5));
        float _884 = _882 * (_848.y + (-0.5));
        float _885 = _882 * (_848.z + (-0.5));
        float _892 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_855.x + (-0.5));
        float _894 = _892 * (_855.y + (-0.5));
        float _895 = _892 * (_855.z + (-0.5));
        float _902 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_862.x + (-0.5));
        float _904 = _902 * (_862.y + (-0.5));
        float _905 = _902 * (_862.z + (-0.5));
        float _912 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_869.x + (-0.5));
        float _914 = _912 * (_869.y + (-0.5));
        float _915 = _912 * (_869.z + (-0.5));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = _883 * 0.5;
        float _920 = _893 * 0.5;
        float _921 = _903 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _936 = (dot(vec3(_447, _448, _449), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _946 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3949 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_948 + 1.0))) + _953) * _916;
        float _963 = _884 * 0.5;
        float _964 = _894 * 0.5;
        float _965 = _904 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _979 = (dot(vec3(_447, _448, _449), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _988 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3982 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_990 + 1.0))) + _995) * _917;
        float _1005 = _885 * 0.5;
        float _1006 = _895 * 0.5;
        float _1007 = _905 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_447, _448, _449), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _4015 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1032 + 1.0))) + _1037) * _918;
        _1054 = _885;
        _1056 = _884;
        _1057 = _883;
        _1058 = _895;
        _1059 = _894;
        _1060 = _893;
        _1061 = _905;
        _1062 = _904;
        _1063 = _903;
        _1064 = _918;
        _1065 = _917;
        _1066 = _916;
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
    }
    else
    {
        _1054 = _1055;
        _1056 = _1055;
        _1057 = _1055;
        _1058 = _1055;
        _1059 = _1055;
        _1060 = _1055;
        _1061 = _1055;
        _1062 = _1055;
        _1063 = _1055;
        _1064 = _1055;
        _1065 = _1055;
        _1066 = _1055;
        _1067 = 0.0;
        _1068 = 0.0;
        _1069 = 0.0;
    }
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1127 = fma(_704, cbModelParam._m0[30u].z, fma(_700, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _696));
        float _1131 = fma(_704, cbModelParam._m0[31u].z, fma(_700, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _696));
        float _1135 = fma(_704, cbModelParam._m0[32u].z, fma(_700, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _696));
        float _1158 = _696 + _447;
        float _1159 = _700 + _448;
        float _1160 = _704 + _449;
        float _1170 = fma(_1160, cbModelParam._m0[30u].z, fma(_1159, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1158)) - _1127;
        float _1171 = fma(_1160, cbModelParam._m0[31u].z, fma(_1159, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1158)) - _1131;
        float _1172 = fma(_1160, cbModelParam._m0[32u].z, fma(_1159, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1158)) - _1135;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1127 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1131 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[35u].z) + ((((((_1135 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1226 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1193.x + (-0.5));
        float _1228 = _1226 * (_1193.y + (-0.5));
        float _1229 = _1226 * (_1193.z + (-0.5));
        float _1236 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1200.x + (-0.5));
        float _1238 = _1236 * (_1200.y + (-0.5));
        float _1239 = _1236 * (_1200.z + (-0.5));
        float _1246 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1207.x + (-0.5));
        float _1248 = _1246 * (_1207.y + (-0.5));
        float _1249 = _1246 * (_1207.z + (-0.5));
        float _1256 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1214.x + (-0.5));
        float _1258 = _1256 * (_1214.y + (-0.5));
        float _1259 = _1256 * (_1214.z + (-0.5));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = _1227 * 0.5;
        float _1264 = _1237 * 0.5;
        float _1265 = _1247 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_447, _448, _449), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4078 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1290 + 1.0))) + _1295) * _1260;
        float _1305 = _1228 * 0.5;
        float _1306 = _1238 * 0.5;
        float _1307 = _1248 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_447, _448, _449), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4111 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1332 + 1.0))) + _1337) * _1261;
        float _1347 = _1229 * 0.5;
        float _1348 = _1239 * 0.5;
        float _1349 = _1249 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_447, _448, _449), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4144 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1374 + 1.0))) + _1379) * _1262;
        _1396 = _1229;
        _1397 = _1228;
        _1398 = _1227;
        _1399 = _1239;
        _1400 = _1238;
        _1401 = _1237;
        _1402 = _1249;
        _1403 = _1248;
        _1404 = _1247;
        _1405 = _1262;
        _1406 = _1261;
        _1407 = _1260;
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1409 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1055;
        _1397 = _1055;
        _1398 = _1055;
        _1399 = _1055;
        _1400 = _1055;
        _1401 = _1055;
        _1402 = _1055;
        _1403 = _1055;
        _1404 = _1055;
        _1405 = _1055;
        _1406 = _1055;
        _1407 = _1055;
        _1408 = 0.0;
        _1409 = 0.0;
        _1410 = 0.0;
    }
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1067)) + _1067;
    float _1421 = (cbModelParam._m0[1u].x * (_1409 - _1068)) + _1068;
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1069)) + _1069;
    float _1443 = fma(_1422, cbSceneParam._m0[89u].z, fma(_1421, cbSceneParam._m0[89u].y, _1420 * cbSceneParam._m0[89u].x));
    float _1446 = fma(_1422, cbSceneParam._m0[90u].z, fma(_1421, cbSceneParam._m0[90u].y, _1420 * cbSceneParam._m0[90u].x));
    float _1449 = fma(_1422, cbSceneParam._m0[91u].z, fma(_1421, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1420));
    float _1464 = _644 * 0.5;
    float _1465 = _645 * 0.5;
    float _1466 = _646 * 0.5;
    float _1467 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1470 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1397, _1400, _1403, _1406));
    float _1473 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1509;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1482 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1054, _1058, _1061, _1064));
        float _1486 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1490 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1497 = dot(vec4(cbModelParam._m0[39u]), vec4(_1464, _1465, _1466, 1.0));
        _1509 = dot(vec3(isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1497) ? 0.0 : (isnan(0.0) ? _1497 : max(0.0, _1497))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1509 = 1.0;
    }
    float _1520;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1511 = dot(vec4(cbModelParam._m0[40u]), vec4(_1464, _1465, _1466, 1.0));
        _1520 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1511) ? 0.0 : (isnan(0.0) ? _1511 : max(0.0, _1511))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1520 = 1.0;
    }
    float _1524 = (_1520 * cbModelParam._m0[1u].x) + (_1509 * (1.0 - cbModelParam._m0[1u].x));
    float _1534 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _450);
    float _1535 = isnan(_1534) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1534 : min(cbModelParam._m0[25u].z, _1534));
    float _1617;
    float _1619;
    float _1621;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1584 = fma(_704, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696)) + cbModelParam._m0[13u].w;
        float _1588 = fma(_704, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696)) + cbModelParam._m0[14u].w;
        float _1592 = fma(_704, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696)) + cbModelParam._m0[15u].w;
        float _1595 = fma(_646, cbModelParam._m0[13u].z, fma(_645, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _644));
        float _1598 = fma(_646, cbModelParam._m0[14u].z, fma(_645, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _644));
        float _1601 = fma(_646, cbModelParam._m0[15u].z, fma(_645, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _644));
        float _1629;
        if (_1595 > 0.0)
        {
            _1629 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_28_26_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_28_26_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_28_26_ladder = 5000.0;
            }
            _1629 = frontier_phi_28_26_ladder;
        }
        float _1803;
        if (_1598 > 0.0)
        {
            _1803 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1803 = frontier_phi_37_33_ladder;
        }
        float _2099;
        if (_1601 > 0.0)
        {
            _2099 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2099 = frontier_phi_49_44_ladder;
        }
        float _2101 = isnan(_1803) ? _1629 : (isnan(_1629) ? _1803 : min(_1629, _1803));
        float _2102 = isnan(_2099) ? _2101 : (isnan(_2101) ? _2099 : min(_2101, _2099));
        float _2106 = (_2102 * _1595) + _1584;
        float _2107 = (_2102 * _1598) + _1588;
        float _2108 = (_2102 * _1601) + _1592;
        float _2109 = _2102 * 9.9999997473787516355514526367188e-05;
        float _2111 = (-1.0) - _2109;
        float _2113 = _2109 + 1.0;
        float frontier_phi_27_49_ladder;
        float frontier_phi_27_49_ladder_1;
        float frontier_phi_27_49_ladder_2;
        if ((_2108 > _2113) || ((_2108 < _2111) || ((_2107 > _2113) || ((_2107 < _2111) || ((_2106 < _2111) || (_2106 > _2113))))))
        {
            frontier_phi_27_49_ladder = 0.0;
            frontier_phi_27_49_ladder_1 = 0.0;
            frontier_phi_27_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2253 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2108, cbModelParam._m0[9u].z, fma(_2107, cbModelParam._m0[9u].y, _2106 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2108, cbModelParam._m0[10u].z, fma(_2107, cbModelParam._m0[10u].y, _2106 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2108, cbModelParam._m0[11u].z, fma(_2107, cbModelParam._m0[11u].y, _2106 * cbModelParam._m0[11u].x))), _1535);
            frontier_phi_27_49_ladder = _2253.z * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_1 = _2253.y * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_2 = _2253.x * cbModelParam._m0[1u].y;
        }
        _1617 = frontier_phi_27_49_ladder_2;
        _1619 = frontier_phi_27_49_ladder_1;
        _1621 = frontier_phi_27_49_ladder;
    }
    else
    {
        vec4 _1605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_644, _645, _646), _1535);
        _1617 = _1605.x * cbModelParam._m0[1u].y;
        _1619 = _1605.y * cbModelParam._m0[1u].y;
        _1621 = _1605.z * cbModelParam._m0[1u].y;
    }
    float _1625 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _450);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1625 : min(cbModelParam._m0[25u].w, _1625));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1683 = fma(_704, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696)) + cbModelParam._m0[21u].w;
        float _1687 = fma(_704, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696)) + cbModelParam._m0[22u].w;
        float _1691 = fma(_704, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696)) + cbModelParam._m0[23u].w;
        float _1694 = fma(_646, cbModelParam._m0[21u].z, fma(_645, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _644));
        float _1697 = fma(_646, cbModelParam._m0[22u].z, fma(_645, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _644));
        float _1700 = fma(_646, cbModelParam._m0[23u].z, fma(_645, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _644));
        float _1808;
        if (_1694 > 0.0)
        {
            _1808 = abs((1.0 - _1683) / _1694);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1683 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1808 = frontier_phi_39_35_ladder;
        }
        float _2126;
        if (_1697 > 0.0)
        {
            _2126 = abs((1.0 - _1687) / _1697);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1687 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _2126 = frontier_phi_51_46_ladder;
        }
        float _2453;
        if (_1700 > 0.0)
        {
            _2453 = abs((1.0 - _1691) / _1700);
        }
        else
        {
            float frontier_phi_61_58_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_61_58_ladder = abs((_1691 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_61_58_ladder = 5000.0;
            }
            _2453 = frontier_phi_61_58_ladder;
        }
        float _2455 = isnan(_2126) ? _1808 : (isnan(_1808) ? _2126 : min(_1808, _2126));
        float _2456 = isnan(_2453) ? _2455 : (isnan(_2455) ? _2453 : min(_2455, _2453));
        float _2460 = (_2456 * _1694) + _1683;
        float _2461 = (_2456 * _1697) + _1687;
        float _2462 = (_2456 * _1700) + _1691;
        float _2463 = _2456 * 9.9999997473787516355514526367188e-05;
        float _2464 = (-1.0) - _2463;
        float _2466 = _2463 + 1.0;
        float frontier_phi_36_61_ladder;
        float frontier_phi_36_61_ladder_1;
        float frontier_phi_36_61_ladder_2;
        if ((_2462 > _2466) || ((_2462 < _2464) || ((_2461 > _2466) || ((_2461 < _2464) || ((_2460 < _2464) || (_2460 > _2466))))))
        {
            frontier_phi_36_61_ladder = 0.0;
            frontier_phi_36_61_ladder_1 = 0.0;
            frontier_phi_36_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2462, cbModelParam._m0[17u].z, fma(_2461, cbModelParam._m0[17u].y, _2460 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2462, cbModelParam._m0[18u].z, fma(_2461, cbModelParam._m0[18u].y, _2460 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2462, cbModelParam._m0[19u].z, fma(_2461, cbModelParam._m0[19u].y, _2460 * cbModelParam._m0[19u].x))), _1626);
            frontier_phi_36_61_ladder = _2580.z * cbModelParam._m0[1u].z;
            frontier_phi_36_61_ladder_1 = _2580.y * cbModelParam._m0[1u].z;
            frontier_phi_36_61_ladder_2 = _2580.x * cbModelParam._m0[1u].z;
        }
        _1719 = frontier_phi_36_61_ladder_2;
        _1721 = frontier_phi_36_61_ladder_1;
        _1723 = frontier_phi_36_61_ladder;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_644, _645, _646), _1626);
        _1719 = _1703.x * cbModelParam._m0[1u].z;
        _1721 = _1703.y * cbModelParam._m0[1u].z;
        _1723 = _1703.z * cbModelParam._m0[1u].z;
    }
    float _1735 = ((((1.0 - _664) * ((_652 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_664 * _652)) * _636;
    float _1736 = _1735 * ((cbModelParam._m0[1u].w * (_1719 - _1617)) + _1617);
    float _1737 = _1735 * ((cbModelParam._m0[1u].w * (_1721 - _1619)) + _1619);
    float _1738 = _1735 * ((cbModelParam._m0[1u].w * (_1723 - _1621)) + _1621);
    float _1741 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1737, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1744 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1737, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1747 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1737, cbSceneParam._m0[91u].y, _1736 * cbSceneParam._m0[91u].x));
    float _1782 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1786 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1790 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1794 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1795 = _1782 / _1794;
    float _1796 = _1786 / _1794;
    float _1797 = _1790 / _1794;
    float _1944;
    float _1945;
    float _1946;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1824 = ((uint(_1797 > cbSceneParam._m0[59u].y) + uint(_1797 > cbSceneParam._m0[59u].x)) + uint(_1797 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1825 = _1824 + 43u;
        uint _1833 = _1824 + 44u;
        uint _1841 = _1824 + 45u;
        uint _1849 = _1824 + 46u;
        float _1860 = fma(_1794, cbSceneParam._m0[_1825].w, fma(_1790, cbSceneParam._m0[_1825].z, fma(_1786, cbSceneParam._m0[_1825].y, _1782 * cbSceneParam._m0[_1825].x)));
        float _1864 = fma(_1794, cbSceneParam._m0[_1833].w, fma(_1790, cbSceneParam._m0[_1833].z, fma(_1786, cbSceneParam._m0[_1833].y, _1782 * cbSceneParam._m0[_1833].x)));
        float _1872 = fma(_1794, cbSceneParam._m0[_1849].w, fma(_1790, cbSceneParam._m0[_1849].z, fma(_1786, cbSceneParam._m0[_1849].y, _1782 * cbSceneParam._m0[_1849].x)));
        float _1877 = cbSceneParam._m0[33u].z * _1872;
        float _1879 = cbSceneParam._m0[33u].w * _1872;
        float _1882 = fma(_1794, cbSceneParam._m0[_1841].w, fma(_1790, cbSceneParam._m0[_1841].z, fma(_1786, cbSceneParam._m0[_1841].y, _1782 * cbSceneParam._m0[_1841].x))) / _1872;
        float _1930 = (cbSceneParam._m0[33u].x - sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797))) * cbSceneParam._m0[33u].y;
        float _4270 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1937 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1877 + _1860) / _1872, (_1879 + _1864) / _1872), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1879 + _1860) / _1872, (_1864 - _1877) / _1872), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1860 - _1877) / _1872, (_1864 - _1879) / _1872), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1860 - _1879) / _1872, (_1877 + _1864) / _1872), _1882), 0.0)).x), vec4(0.25)));
        _1944 = 1.0 - (_1937 * cbSceneParam._m0[34u].x);
        _1945 = 1.0 - (_1937 * cbSceneParam._m0[34u].y);
        _1946 = 1.0 - (_1937 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1944 = 1.0;
        _1945 = 1.0;
        _1946 = 1.0;
    }
    float _2010;
    float _2012;
    float _2014;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1998 = fma(_1794, cbSceneParam._m0[63u].w, fma(_1790, cbSceneParam._m0[63u].z, fma(_1786, cbSceneParam._m0[63u].y, _1782 * cbSceneParam._m0[63u].x)));
        float _1999 = fma(_1794, cbSceneParam._m0[60u].w, fma(_1790, cbSceneParam._m0[60u].z, fma(_1786, cbSceneParam._m0[60u].y, _1782 * cbSceneParam._m0[60u].x))) / _1998;
        float _2000 = fma(_1794, cbSceneParam._m0[61u].w, fma(_1790, cbSceneParam._m0[61u].z, fma(_1786, cbSceneParam._m0[61u].y, _1782 * cbSceneParam._m0[61u].x))) / _1998;
        float frontier_phi_48_47_ladder;
        float frontier_phi_48_47_ladder_1;
        float frontier_phi_48_47_ladder_2;
        if ((((_1999 >= cbSceneParam._m0[64u].x) && (_2000 >= cbSceneParam._m0[64u].y)) && (_1999 <= cbSceneParam._m0[64u].z)) && (_2000 <= cbSceneParam._m0[64u].w))
        {
            float _2139 = fma(_1794, cbSceneParam._m0[62u].w, fma(_1790, cbSceneParam._m0[62u].z, fma(_1786, cbSceneParam._m0[62u].y, _1782 * cbSceneParam._m0[62u].x))) / _1998;
            float _2143 = isnan(cbSceneParam._m0[41u].w) ? _2139 : (isnan(_2139) ? cbSceneParam._m0[41u].w : max(_2139, cbSceneParam._m0[41u].w));
            float _2186 = (cbSceneParam._m0[33u].x - sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797))) * cbSceneParam._m0[33u].y;
            float _4286 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
            float _2193 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1999, cbSceneParam._m0[33u].w + _2000), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1999, _2000 - cbSceneParam._m0[33u].z), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1999 - cbSceneParam._m0[33u].z, _2000 - cbSceneParam._m0[33u].w), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1999 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2000), _2143), 0.0)).x), vec4(0.25)));
            float _2197 = 1.0 - (_2193 * cbSceneParam._m0[34u].x);
            float _2198 = 1.0 - (_2193 * cbSceneParam._m0[34u].y);
            float _2199 = 1.0 - (_2193 * cbSceneParam._m0[34u].z);
            frontier_phi_48_47_ladder = isnan(_2199) ? _1946 : (isnan(_1946) ? _2199 : min(_1946, _2199));
            frontier_phi_48_47_ladder_1 = isnan(_2198) ? _1945 : (isnan(_1945) ? _2198 : min(_1945, _2198));
            frontier_phi_48_47_ladder_2 = isnan(_2197) ? _1944 : (isnan(_1944) ? _2197 : min(_1944, _2197));
        }
        else
        {
            frontier_phi_48_47_ladder = _1946;
            frontier_phi_48_47_ladder_1 = _1945;
            frontier_phi_48_47_ladder_2 = _1944;
        }
        _2010 = frontier_phi_48_47_ladder_2;
        _2012 = frontier_phi_48_47_ladder_1;
        _2014 = frontier_phi_48_47_ladder;
    }
    else
    {
        _2010 = _1944;
        _2012 = _1945;
        _2014 = _1946;
    }
    uvec4 _2019 = floatBitsToUint(cbInstanceData._m0[_609 + 5u]);
    uint _2021 = _2019.x * 14u;
    uint _2022 = _2021 + 13u;
    float _2029 = _636 + (-1.0);
    float _2034 = (cbLight._m0[_2022].x * _2029) + 1.0;
    float _2035 = (cbLight._m0[_2022].y * _2029) + 1.0;
    float _2036 = (cbLight._m0[_2022].z * _2029) + 1.0;
    float _2037 = (cbLight._m0[_2022].w * _2029) + 1.0;
    uint _2038 = _2021 + 5u;
    float _2044 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
    uint _2048 = _2021 + 4u;
    float _2058 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2062 = _2021 | 1u;
    float _2073 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_447, _448, _449));
    float _2076 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_447, _448, _449));
    float _4322 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _4333 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2081 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * 0.3183098733425140380859375;
    float _2083 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * 0.3183098733425140380859375;
    float _2090 = ((cbLight._m0[_2038].x * _2044) * _2083) + (((cbLight._m0[_2048].x * _2010) * _2058) * _2081);
    float _2091 = ((_2044 * cbLight._m0[_2038].y) * _2083) + (((cbLight._m0[_2048].y * _2012) * _2058) * _2081);
    float _2092 = ((_2044 * cbLight._m0[_2038].z) * _2083) + (((cbLight._m0[_2048].z * _2014) * _2058) * _2081);
    uvec4 _2096 = floatBitsToUint(cbLight._m0[_2021 + 12u]);
    bool _2098 = _2096.x == 0u;
    float _2200;
    float _2202;
    float _2204;
    if (_2098)
    {
        _2200 = _2090;
        _2202 = _2091;
        _2204 = _2092;
    }
    else
    {
        uint _2208 = _2021 + 6u;
        float _2224 = (dot(vec3(cbLight._m0[_2021 + 2u].xyz), vec3(_447, _448, _449)) * 0.5) + 0.5;
        float _2225 = _2224 * _2224;
        float _4344 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2226 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2227 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2200 = (((cbLight._m0[_2208].x * 0.3183098733425140380859375) * _2226) * _2227) + _2090;
        _2202 = (((cbLight._m0[_2208].y * 0.3183098733425140380859375) * _2226) * _2227) + _2091;
        _2204 = (((cbLight._m0[_2208].z * 0.3183098733425140380859375) * _2226) * _2227) + _2092;
    }
    bool _2207 = _2096.y == 0u;
    float _2262;
    float _2264;
    float _2266;
    if (_2207)
    {
        _2262 = _2200;
        _2264 = _2202;
        _2266 = _2204;
    }
    else
    {
        uint _2424 = _2021 + 7u;
        float _2440 = (dot(vec3(cbLight._m0[_2021 + 3u].xyz), vec3(_447, _448, _449)) * 0.5) + 0.5;
        float _2441 = _2440 * _2440;
        float _4360 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2442 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2443 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2262 = (((cbLight._m0[_2424].x * 0.3183098733425140380859375) * _2442) * _2443) + _2200;
        _2264 = (((cbLight._m0[_2424].y * 0.3183098733425140380859375) * _2442) * _2443) + _2202;
        _2266 = (((cbLight._m0[_2424].z * 0.3183098733425140380859375) * _2442) * _2443) + _2204;
    }
    uint _2269 = _2021 + 8u;
    float _2282 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _450) * 0.949999988079071044921875);
    float _2283 = _2282 * _2282;
    float _2284 = cbLight._m0[_2021].x + _526;
    float _2285 = cbLight._m0[_2021].y + _527;
    float _2286 = cbLight._m0[_2021].z + _528;
    float _2290 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
    float _2291 = _2290 * _2284;
    float _2292 = _2290 * _2285;
    float _2293 = _2290 * _2286;
    float _2294 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_2021].xyz));
    float _4376 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _4387 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _2298 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2299 = dot(vec3(_447, _448, _449), vec3(_2291, _2292, _2293));
    float _4398 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2303 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2291, _2292, _2293));
    float _4409 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2307 = _2283 * _2283;
    float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
    float _2322 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2323 = 1.0 - _2283;
    float _2334 = (0.5 / (((_2298 * ((_2297 * _2323) + _2283)) + 9.9999999392252902907785028219223e-09) + (((_2298 * _2323) + _2283) * _2297))) * _2297;
    float _4420 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2336 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
    uint _2350 = _2021 + 9u;
    float _2361 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _450) * 0.949999988079071044921875);
    float _2362 = _2361 * _2361;
    float _2363 = cbLight._m0[_2062].x + _526;
    float _2364 = cbLight._m0[_2062].y + _527;
    float _2365 = cbLight._m0[_2062].z + _528;
    float _2369 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
    float _2370 = _2369 * _2363;
    float _2371 = _2369 * _2364;
    float _2372 = _2369 * _2365;
    float _2373 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_2062].xyz));
    float _4431 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2377 = dot(vec3(_447, _448, _449), vec3(_2370, _2371, _2372));
    float _4442 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2381 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2370, _2371, _2372));
    float _4453 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2385 = _2362 * _2362;
    float _2389 = ((_2380 * _2380) * (_2385 + (-1.0))) + 1.0;
    float _2398 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2399 = 1.0 - _2362;
    float _2409 = (0.5 / (((_2298 * ((_2376 * _2399) + _2362)) + 9.9999999392252902907785028219223e-09) + (((_2298 * _2399) + _2362) * _2376))) * _2376;
    float _4464 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2411 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2385 / ((_2389 * _2389) * 3.141590118408203125));
    float _2421 = (((_2398 * cbLight._m0[_2350].x) * _2411) * _2044) + ((((cbLight._m0[_2269].x * _2010) * _2322) * _2336) * _2058);
    float _2422 = (((_2398 * cbLight._m0[_2350].y) * _2411) * _2044) + ((((cbLight._m0[_2269].y * _2012) * _2322) * _2336) * _2058);
    float _2423 = (((_2398 * cbLight._m0[_2350].z) * _2411) * _2044) + ((((cbLight._m0[_2269].z * _2014) * _2322) * _2336) * _2058);
    float _2479;
    float _2481;
    float _2483;
    if (_2098)
    {
        _2479 = _2421;
        _2481 = _2422;
        _2483 = _2423;
    }
    else
    {
        uint _2485 = _2021 + 2u;
        uint _2489 = _2021 + 10u;
        float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2485].w)) * _450) * 0.949999988079071044921875);
        float _2504 = _2503 * _2503;
        float _2505 = cbLight._m0[_2485].x + _526;
        float _2506 = cbLight._m0[_2485].y + _527;
        float _2507 = cbLight._m0[_2485].z + _528;
        float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
        float _2512 = _2511 * _2505;
        float _2513 = _2511 * _2506;
        float _2514 = _2511 * _2507;
        float _2515 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_2485].xyz));
        float _4475 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2519 = dot(vec3(_447, _448, _449), vec3(_2512, _2513, _2514));
        float _4486 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2523 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_2512, _2513, _2514));
        float _4497 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2527 = _2504 * _2504;
        float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
        float _2540 = (exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2541 = 1.0 - _2504;
        float _2551 = (0.5 / (((_2298 * ((_2518 * _2541) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2298 * _2541) + _2504) * _2518))) * _2518;
        float _4508 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2553 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
        float _2554 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2479 = (((_2540 * cbLight._m0[_2489].x) * _2553) * _2554) + _2421;
        _2481 = (((_2540 * cbLight._m0[_2489].y) * _2553) * _2554) + _2422;
        _2483 = (((_2540 * cbLight._m0[_2489].z) * _2553) * _2554) + _2423;
    }
    float _2585;
    float _2587;
    float _2589;
    if (_2207)
    {
        _2585 = _2479;
        _2587 = _2481;
        _2589 = _2483;
    }
    else
    {
        uint _2596 = _2021 + 3u;
        uint _2600 = _2021 + 11u;
        float _2614 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2596].w)) * _450) * 0.949999988079071044921875);
        float _2615 = _2614 * _2614;
        float _2616 = cbLight._m0[_2596].x + _526;
        float _2617 = cbLight._m0[_2596].y + _527;
        float _2618 = cbLight._m0[_2596].z + _528;
        float _2622 = inversesqrt(dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618)));
        float _2623 = _2622 * _2616;
        float _2624 = _2622 * _2617;
        float _2625 = _2622 * _2618;
        float _2626 = dot(vec3(_447, _448, _449), vec3(cbLight._m0[_2596].xyz));
        float _4524 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2629 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2630 = dot(vec3(_447, _448, _449), vec3(_2623, _2624, _2625));
        float _4535 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2634 = dot(vec3(cbLight._m0[_2596].xyz), vec3(_2623, _2624, _2625));
        float _4546 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2638 = _2615 * _2615;
        float _2642 = ((_2633 * _2633) * (_2638 + (-1.0))) + 1.0;
        float _2651 = (exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2652 = 1.0 - _2615;
        float _2662 = (0.5 / (((_2298 * ((_2629 * _2652) + _2615)) + 9.9999999392252902907785028219223e-09) + (((_2298 * _2652) + _2615) * _2629))) * _2629;
        float _4557 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2664 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2638 / ((_2642 * _2642) * 3.141590118408203125));
        float _2665 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2585 = (((_2651 * cbLight._m0[_2600].x) * _2664) * _2665) + _2479;
        _2587 = (((_2651 * cbLight._m0[_2600].y) * _2664) * _2665) + _2481;
        _2589 = (((_2651 * cbLight._m0[_2600].z) * _2664) * _2665) + _2483;
    }
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    if (_2019.y == 0u)
    {
        uvec4 _2686 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2687 = _2686.x;
        uint _2698 = uint((float(_2686.y) * floor(float(uint(cbSceneParam._m0[85u].y * _570) / _2687))) + floor(float(uint(cbSceneParam._m0[85u].x * _569) / _2687)));
        float _2708 = (log2(_1797 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2709 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        uint _2712 = uint(isnan(14.0) ? _2709 : (isnan(_2709) ? 14.0 : min(_2709, 14.0)));
        uvec4 _2717 = texelFetch(g_lightClusterGridBuffer, int(((_2712 << 2u) + (_2698 << 6u)) >> 2u));
        uint _2718 = _2717.x;
        uint _2719 = _2686.z;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        if (((((1u << ((_2719 >> 4u) & 15u)) + 4294967295u) & _2718) == 0u) || ((_2719 & 240u) == 0u))
        {
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
        }
        else
        {
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            uint _2955 = 0u;
            uint _2964;
            bool _2965;
            for (;;)
            {
                _2964 = texelFetch(g_lightClassification, int((((_2712 << 5u) + (_2698 << 9u)) + (_2955 << 2u)) >> 2u)).x;
                _2965 = _2964 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_2965)
                {
                    frontier_phi_82_pred = _2954;
                    frontier_phi_82_pred_1 = _2953;
                    frontier_phi_82_pred_2 = _2952;
                    frontier_phi_82_pred_3 = _2951;
                    frontier_phi_82_pred_4 = _2950;
                    frontier_phi_82_pred_5 = _2949;
                }
                else
                {
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    uint _3100;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2964;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    for (;;)
                    {
                        uint _3104 = uint(findLSB(_3100)) + (_2955 << 5u);
                        uint _3101 = (_3100 + 4294967295u) & _3100;
                        uint _3106 = _3104 * 48u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3126 = (_3104 * 48u) + 4u;
                        vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 3u)).x));
                        uint _3145 = (_3104 * 48u) + 8u;
                        vec3 _3156 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3145)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 2u)).x));
                        float _3160 = _3120.x - _1795;
                        float _3161 = _3120.y - _1796;
                        float _3162 = _3120.z - _1797;
                        float _3163 = dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162));
                        float _3166 = inversesqrt(_3163);
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3170 = dot(vec3(_590, _593, _596), vec3(_3167, _3168, _3169));
                        float _3175 = 1.0 - (_3163 * _3120.w);
                        float _4583 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3176 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                        float _3177 = sqrt(_3163) * _3139.w;
                        float _3180 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3170) + _3181;
                        float _3187 = _3177 * _3177;
                        float _3191 = ((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3176) / ((_3187 * 0.699999988079071044921875) + 1.0);
                        float _3195 = (-0.0) - _1795;
                        float _3196 = (-0.0) - _1796;
                        float _3197 = (-0.0) - _1797;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3211 = exp2(log2(1.0 / ((_3187 * 3.5) + 5.0)) * 0.25);
                        float _3212 = 1.0 - _652;
                        float _3219 = sqrt(1.0 - ((1.0 - (_3212 * _3212)) * (1.0 - (_3211 * _3211))));
                        float _3220 = _3219 * _3219;
                        float _3221 = _3220 * _3220;
                        float _3222 = _3202 + _3167;
                        float _3223 = _3203 + _3168;
                        float _3224 = _3204 + _3169;
                        float _3228 = inversesqrt(dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224)));
                        float _3232 = dot(vec3(_590, _593, _596), vec3(_3202, _3203, _3204));
                        float _4599 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3235 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3236 = dot(vec3(_590, _593, _596), vec3(_3228 * _3222, _3228 * _3223, _3228 * _3224));
                        float _4610 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3239 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3243 = ((_3239 * _3239) * (_3221 + (-1.0))) + 1.0;
                        float _3244 = _3180 * _3220;
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3170) + _3245;
                        float _4621 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3249 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3250 = 1.0 - _3220;
                        float _3260 = (0.5 / (((_3249 * ((_3235 * _3250) + _3220)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3220) * _3235))) * _3249;
                        float _4632 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3271 = (((_3221 * 3.1415927410125732421875) * (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) / ((_3243 * _3243) * ((_3187 * 2.1991131305694580078125) + 3.141590118408203125))) * _3176;
                        _3024 = (_3191 * _3139.x) + _3097;
                        _3025 = (_3191 * _3139.y) + _3098;
                        _3026 = (_3191 * _3139.z) + _3099;
                        _3021 = (_3271 * _3156.x) + _3094;
                        _3022 = (_3271 * _3156.y) + _3095;
                        _3023 = (_3271 * _3156.z) + _3096;
                        if (_3101 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3101;
                        }
                    }
                    frontier_phi_82_pred = _3026;
                    frontier_phi_82_pred_1 = _3025;
                    frontier_phi_82_pred_2 = _3024;
                    frontier_phi_82_pred_3 = _3023;
                    frontier_phi_82_pred_4 = _3022;
                    frontier_phi_82_pred_5 = _3021;
                }
                _2808 = frontier_phi_82_pred;
                _2806 = frontier_phi_82_pred_1;
                _2804 = frontier_phi_82_pred_2;
                _2802 = frontier_phi_82_pred_3;
                _2800 = frontier_phi_82_pred_4;
                _2798 = frontier_phi_82_pred_5;
                uint _2956 = _2955 + 1u;
                if (_2956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2949 = _2798;
                    _2950 = _2800;
                    _2951 = _2802;
                    _2952 = _2804;
                    _2953 = _2806;
                    _2954 = _2808;
                    _2955 = _2956;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
        }
        uvec4 _2811 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2812 = _2811.z;
        uint _2814 = (_2812 >> 8u) & 15u;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        if (((4294967295u << _2814) & _2718) == 0u)
        {
            _2917 = _2797;
            _2919 = _2799;
            _2921 = _2801;
            _2923 = _2803;
            _2925 = _2805;
            _2927 = _2807;
        }
        else
        {
            float _2942 = inversesqrt(dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797)));
            float _2943 = _2942 * _1795;
            float _2944 = _2942 * _1796;
            float _2945 = _2942 * _1797;
            float frontier_phi_74_75_ladder;
            float frontier_phi_74_75_ladder_1;
            float frontier_phi_74_75_ladder_2;
            float frontier_phi_74_75_ladder_3;
            float frontier_phi_74_75_ladder_4;
            float frontier_phi_74_75_ladder_5;
            if (_2814 < ((_2812 >> 12u) & 15u))
            {
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _3077 = _2797;
                float _3078 = _2799;
                float _3079 = _2801;
                float _3080 = _2803;
                float _3081 = _2805;
                float _3082 = _2807;
                uint _3083 = _2814;
                uint _3092;
                bool _3093;
                for (;;)
                {
                    _3092 = texelFetch(g_lightClassification, int((((_2712 << 5u) + (_2698 << 9u)) + (_3083 << 2u)) >> 2u)).x;
                    _3093 = _3092 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_3093)
                    {
                        frontier_phi_93_pred = _3078;
                        frontier_phi_93_pred_1 = _3082;
                        frontier_phi_93_pred_2 = _3081;
                        frontier_phi_93_pred_3 = _3080;
                        frontier_phi_93_pred_4 = _3079;
                        frontier_phi_93_pred_5 = _3077;
                    }
                    else
                    {
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3298 = _3077;
                        float _3299 = _3078;
                        float _3300 = _3079;
                        float _3301 = _3080;
                        float _3302 = _3081;
                        float _3303 = _3082;
                        uint _3304 = _3092;
                        uint _3305;
                        vec4 _3330;
                        float _3331;
                        vec4 _3346;
                        vec3 _3358;
                        vec4 _3374;
                        vec4 _3390;
                        float _3437;
                        bool _3438;
                        for (;;)
                        {
                            uint _3315 = ((_3083 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3304));
                            _3305 = (_3304 + 4294967295u) & _3304;
                            uint _3317 = _3315 * 40u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            _3331 = _3330.w;
                            uint _3333 = (_3315 * 40u) + 4u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3348 = (_3315 * 40u) + 8u;
                            _3358 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x));
                            uint _3361 = (_3315 * 40u) + 16u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3377 = (_3315 * 40u) + 20u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3393 = (_3315 * 40u) + 24u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3412 = (_3315 * 40u) + 28u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            _3437 = fma(_1797, _3425.z, fma(_1796, _3425.y, _3425.x * _1795)) + _3425.w;
                            _3438 = !((fma(_1797, _3406.z, fma(_1796, _3406.y, _3406.x * _1795)) + _3406.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3438)
                            {
                                float _3465 = _3330.x - _1795;
                                float _3466 = _3330.y - _1796;
                                float _3467 = _3330.z - _1797;
                                float _3468 = dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467));
                                float _3471 = inversesqrt(_3468);
                                float _3472 = _3471 * _3465;
                                float _3473 = _3471 * _3466;
                                float _3474 = _3471 * _3467;
                                float _3478 = 1.0 - (_3468 / (_3331 * _3331));
                                float _4643 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                                float _3483 = sqrt(_3468) * _3346.w;
                                float _3485 = 1.39999997615814208984375 / (_3483 + 1.39999997615814208984375);
                                float _3486 = _3485 * _3485;
                                float _3489 = ((1.0 - _3486) * dot(vec3(_3472, _3473, _3474), vec3(_590, _593, _596))) + _3486;
                                float _3492 = _3483 * _3483;
                                float _3496 = (fma(_1797, _3374.z, fma(_1796, _3374.y, _3374.x * _1795)) + _3374.w) / _3437;
                                float _3497 = (fma(_1797, _3390.z, fma(_1796, _3390.y, _3390.x * _1795)) + _3390.w) / _3437;
                                float _3501 = 1.0 - dot(vec2(_3496, _3497), vec2(_3496, _3497));
                                float _4659 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3503 = _3502 * (((isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0))) * _3479) / ((_3492 * 0.699999988079071044921875) + 1.0));
                                float _3515 = exp2(log2(1.0 / ((_3492 * 3.5) + 5.0)) * 0.25);
                                float _3516 = 1.0 - _652;
                                float _3523 = sqrt(1.0 - ((1.0 - (_3516 * _3516)) * (1.0 - (_3515 * _3515))));
                                float _3524 = _3523 * _3523;
                                float _3525 = _3524 * _3524;
                                float _3526 = _3472 - _2943;
                                float _3527 = _3473 - _2944;
                                float _3528 = _3474 - _2945;
                                float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                                float _3536 = dot(vec3(_590, _593, _596), vec3((-0.0) - _2943, (-0.0) - _2944, (-0.0) - _2945));
                                float _4670 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3540 = dot(vec3(_590, _593, _596), vec3(_3532 * _3526, _3532 * _3527, _3532 * _3528));
                                float _4681 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3543 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3547 = ((_3543 * _3543) * (_3525 + (-1.0))) + 1.0;
                                float _3548 = _3485 * _3524;
                                float _3549 = _3548 * _3548;
                                float _3555 = ((1.0 - _3549) * dot(vec3(_590, _593, _596), vec3(_3472, _3473, _3474))) + _3549;
                                float _4692 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3557 = 1.0 - _3524;
                                float _3567 = (0.5 / (((_3556 * ((_3539 * _3557) + _3524)) + 9.9999999392252902907785028219223e-09) + (((_3556 * _3557) + _3524) * _3539))) * _3556;
                                float _4703 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3577 = (_3502 * _3479) * (((_3525 * 3.1415927410125732421875) * (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) / ((_3547 * _3547) * ((_3492 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3577 * _3358.x;
                                frontier_phi_99_pred_1 = _3503 * _3346.z;
                                frontier_phi_99_pred_2 = _3503 * _3346.y;
                                frontier_phi_99_pred_3 = _3503 * _3346.x;
                                frontier_phi_99_pred_4 = _3577 * _3358.z;
                                frontier_phi_99_pred_5 = _3577 * _3358.y;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3581 = frontier_phi_99_pred;
                            _3586 = frontier_phi_99_pred_1;
                            _3585 = frontier_phi_99_pred_2;
                            _3584 = frontier_phi_99_pred_3;
                            _3583 = frontier_phi_99_pred_4;
                            _3582 = frontier_phi_99_pred_5;
                            _3288 = _3584 + _3301;
                            _3289 = _3585 + _3302;
                            _3290 = _3586 + _3303;
                            _3285 = _3581 + _3298;
                            _3286 = _3582 + _3299;
                            _3287 = _3583 + _3300;
                            if (_3305 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3305;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _3286;
                        frontier_phi_93_pred_1 = _3290;
                        frontier_phi_93_pred_2 = _3289;
                        frontier_phi_93_pred_3 = _3288;
                        frontier_phi_93_pred_4 = _3287;
                        frontier_phi_93_pred_5 = _3285;
                    }
                    _2920 = frontier_phi_93_pred;
                    _2928 = frontier_phi_93_pred_1;
                    _2926 = frontier_phi_93_pred_2;
                    _2924 = frontier_phi_93_pred_3;
                    _2922 = frontier_phi_93_pred_4;
                    _2918 = frontier_phi_93_pred_5;
                    uint _3084 = _3083 + 1u;
                    if (_3084 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3077 = _2918;
                        _3078 = _2920;
                        _3079 = _2922;
                        _3080 = _2924;
                        _3081 = _2926;
                        _3082 = _2928;
                        _3083 = _3084;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_74_75_ladder = _2928;
                frontier_phi_74_75_ladder_1 = _2926;
                frontier_phi_74_75_ladder_2 = _2924;
                frontier_phi_74_75_ladder_3 = _2922;
                frontier_phi_74_75_ladder_4 = _2920;
                frontier_phi_74_75_ladder_5 = _2918;
            }
            else
            {
                frontier_phi_74_75_ladder = _2807;
                frontier_phi_74_75_ladder_1 = _2805;
                frontier_phi_74_75_ladder_2 = _2803;
                frontier_phi_74_75_ladder_3 = _2801;
                frontier_phi_74_75_ladder_4 = _2799;
                frontier_phi_74_75_ladder_5 = _2797;
            }
            _2917 = frontier_phi_74_75_ladder_5;
            _2919 = frontier_phi_74_75_ladder_4;
            _2921 = frontier_phi_74_75_ladder_3;
            _2923 = frontier_phi_74_75_ladder_2;
            _2925 = frontier_phi_74_75_ladder_1;
            _2927 = frontier_phi_74_75_ladder;
        }
        float _2932 = isnan(1.0) ? _636 : (isnan(_636) ? 1.0 : min(_636, 1.0));
        _2730 = (_2932 * _2923) + _2262;
        _2732 = (_2932 * _2925) + _2264;
        _2734 = (_2932 * _2927) + _2266;
        _2736 = ((_2917 * 0.039999999105930328369140625) * _2932) + _2585;
        _2738 = ((_2919 * 0.039999999105930328369140625) * _2932) + _2587;
        _2740 = ((_2921 * 0.039999999105930328369140625) * _2932) + _2589;
    }
    else
    {
        _2730 = _2262;
        _2732 = _2264;
        _2734 = _2266;
        _2736 = _2585;
        _2738 = _2587;
        _2740 = _2589;
    }
    float _4719 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4730 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4741 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _2757 = ((isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2730 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _636))) + ((_2736 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1524)) * cbPerFrame._m0[3u].x);
    float _2758 = ((isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2732 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _636))) + ((_2738 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1524)) * cbPerFrame._m0[3u].x);
    float _2759 = ((isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2734 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _636))) + ((_2740 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1524)) * cbPerFrame._m0[3u].x);
    uint _2760 = _609 + 6u;
    float _2768 = _569 / cbSceneParam._m0[86u].x;
    float _2769 = _570 / cbSceneParam._m0[86u].y;
    vec4 _2783 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2768, _2769, (log2((isnan(cbSceneParam._m0[77u].w) ? _470 : (isnan(_470) ? cbSceneParam._m0[77u].w : min(_470, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2785 = _2783.x;
    float _2786 = _2783.y;
    float _2787 = _2783.z;
    float _2788 = _2783.w;
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    if (_470 > cbSceneParam._m0[78u].w)
    {
        float _2822 = isnan(_470) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _470 : min(cbSceneParam._m0[80u].w, _470));
        float _2823 = _2822 / _470;
        float _2834 = _2823 * _519;
        float _2835 = _520 * _2823;
        float _2836 = (-0.0) - _2835;
        float _2837 = _2823 * _521;
        float _2839 = (cbSceneParam._m0[77u].w * _2836) / _2822;
        float _2840 = _2839 + cbSceneParam._m0[79u].w;
        float _2841 = cbSceneParam._m0[79u].w - _2835;
        float _2847 = sqrt(((_2834 * _2834) + (_2835 * _2835)) + (_2837 * _2837));
        float _2850 = (1.0 - (cbSceneParam._m0[77u].w / _2822)) * _2847;
        float _2855 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2857 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3034;
        if (abs((_2836 - _2839) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3034 = ((((_2840 > 0.0) ? exp2(_2855 * _2840) : (2.0 - exp2(_2857 * _2840))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2850;
        }
        else
        {
            float _2978 = 1.0 / cbSceneParam._m0[80u].x;
            float _2979 = isnan(_2841) ? _2840 : (isnan(_2840) ? _2841 : max(_2840, _2841));
            float _2980 = isnan(_2841) ? _2840 : (isnan(_2840) ? _2841 : min(_2840, _2841));
            float _2989 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : min(_2979, 0.0));
            float _2990 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : min(_2980, 0.0));
            _3034 = ((abs(_2847 / _2836) * cbSceneParam._m0[80u].y) * ((((_2989 - _2990) * 2.0) - ((exp2(_2855 * (isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0)))) - exp2(_2855 * (isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))))) * _2978)) - ((exp2(_2857 * _2989) - exp2(_2857 * _2990)) * _2978))) + (_2850 * cbSceneParam._m0[80u].z);
        }
        vec4 _3036 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2768, _2769, 1.0), 0.0);
        float _3045 = exp2((_3034 * (-1.44269502162933349609375)) * (1.0 - _3036.w));
        float _3046 = log2(_3045);
        float _3062 = log2(_2788);
        _2859 = (exp2(_3062 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].x)) * _3036.x) / cbSceneParam._m0[78u].x)) + _2785;
        _2861 = (exp2(_3062 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].y)) * _3036.y) / cbSceneParam._m0[78u].y)) + _2786;
        _2863 = (exp2(_3062 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].z)) * _3036.z) / cbSceneParam._m0[78u].z)) + _2787;
        _2865 = _3045 * _2788;
    }
    else
    {
        _2859 = _2785;
        _2861 = _2786;
        _2863 = _2787;
        _2865 = _2788;
    }
    bool _3072;
    vec4 _2875;
    vec4 _2897;
    float _2899;
    float _2903;
    float _2904;
    float _2905;
    float _2906;
    bool _2916;
    for (;;)
    {
        _2875 = cbMatDynParam._m0[0u];
        float _2877 = roundEven(_2875.y);
        bool _2878 = _2877 == 3.0;
        float _2879 = log2(_2865);
        float _2886 = exp2(_2879 * cbSceneParam._m0[78u].x) * _2757;
        float _2887 = exp2(_2879 * cbSceneParam._m0[78u].y) * _2758;
        float _2888 = exp2(_2879 * cbSceneParam._m0[78u].z) * _2759;
        float _2895 = _535 + (-0.5);
        _2897 = cbMtdParam._m0[1u];
        _2899 = _2897.y * _2895;
        float _2902 = (_2877 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2903 = _2902 * (_2878 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2859)));
        _2904 = _2902 * (_2878 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2861)));
        _2905 = _2902 * (_2878 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2863)));
        _2906 = _2895 * 0.999000012874603271484375;
        _2916 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2916)
        {
            if ((cbInstanceData._m0[_609 + 7u].x + _2906) < 0.5)
            {
                _3072 = true;
                break;
            }
        }
        uint _3013 = _611 + uint(_2875.w);
        if ((cbInstanceData._m0[_3013].w < 1.0) && ((cbInstanceData._m0[_3013].w + _2906) < 0.5))
        {
            _3072 = true;
            break;
        }
        if ((_2899 + 1.0) < _2897.x)
        {
            _3072 = true;
            break;
        }
        _3072 = false;
        break;
    }
    float _3276;
    if (_3072)
    {
        discard_state = true;
        _3276 = 0.0;
    }
    else
    {
        _3276 = cbInstanceData._m0[_2760].w;
    }
    SV_Target.x = _2903;
    SV_Target.y = _2904;
    SV_Target.z = _2905;
    SV_Target.w = _3276;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2760].w;
    discard_exit();
}


