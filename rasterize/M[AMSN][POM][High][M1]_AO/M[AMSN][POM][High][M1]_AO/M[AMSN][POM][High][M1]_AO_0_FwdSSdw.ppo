#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1024;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    float _280 = dot(vec3(_269, _270, _271), vec3(_192, _193, _194));
    float _283 = dot(vec3(_269, _270, _271), vec3(_206, _207, _208));
    float _286 = dot(vec3(_269, _270, _271), vec3(_213, _214, _215));
    float _289 = (-0.0) - _280;
    float _290 = (-0.0) - _283;
    float _300 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _301 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _302 = (-0.0) - _269;
    float _303 = (-0.0) - _270;
    float _304 = (-0.0) - _271;
    float _309 = inversesqrt(dot(vec2(_289, _290), vec2(_289, _290)));
    float _313 = _286 * _286;
    float _315 = sqrt(((_283 * _283) + (_280 * _280)) + _313);
    float _319 = sqrt((_315 * _315) - _313) / ((-0.0) - _286);
    float _322 = ((cbMtdParam._m0[10u].y * _289) * _309) * _319;
    float _325 = ((cbMtdParam._m0[10u].y * _290) * _309) * _319;
    float _329 = inversesqrt(dot(vec3(_302, _303, _304), vec3(_302, _303, _304)));
    float _333 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _334 = dFdxCoarse(_300);
    float _335 = dFdxCoarse(_301);
    float _336 = dFdyCoarse(_300);
    float _337 = dFdyCoarse(_301);
    uvec2 _345 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _349 = float(_345.y) * (abs(_337) + abs(_335));
    float _351 = float(_345.x) * (abs(_336) + abs(_334));
    float _353 = log2(isnan(_349) ? _351 : (isnan(_351) ? _349 : max(_351, _349)));
    float _354 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _357;
    float _360;
    if (!(_354 <= 4.0))
    {
        _357 = _300;
        _360 = _301;
    }
    else
    {
        uint _720 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_329 * _302, _329 * _303, _329 * _304), vec3(_333 * _213, _333 * _214, _333 * _215))) * 12.0)))), int(32u)));
        float _723 = 1.0 / float(int(_720));
        float _724 = _723 * _322;
        float _725 = _723 * _325;
        float _1041;
        float _1043;
        float _1045;
        float _1047;
        if (int(_720) > int(0u))
        {
            float _1042;
            float _1044;
            float _1046;
            float _1048;
            uint _1494;
            float _1435 = 1.0;
            uint _1437 = 0u;
            float _1439 = _300;
            float _1441 = _301;
            float _1443 = 1.0;
            float _1445 = 0.0;
            float _1446 = 0.0;
            float _1447 = 0.0;
            float _1448 = 0.0;
            float _1436;
            float _1440;
            float _1442;
            float _1444;
            bool _1460;
            for (;;)
            {
                _1440 = _1439 - _724;
                _1442 = _1441 - _725;
                _1436 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_1440, _1442), vec2(_334, _335), vec2(_336, _337))), vec4(1.0, 0.0, 0.0, 0.0));
                _1444 = _1443 - _723;
                _1460 = _1436 > _1444;
                float frontier_phi_16_pred;
                float frontier_phi_16_pred_1;
                float frontier_phi_16_pred_2;
                float frontier_phi_16_pred_3;
                uint frontier_phi_16_pred_4;
                if (_1460)
                {
                    frontier_phi_16_pred = _1435;
                    frontier_phi_16_pred_1 = _1443;
                    frontier_phi_16_pred_2 = _1436;
                    frontier_phi_16_pred_3 = _1444;
                    frontier_phi_16_pred_4 = _720;
                }
                else
                {
                    frontier_phi_16_pred = _1448;
                    frontier_phi_16_pred_1 = _1447;
                    frontier_phi_16_pred_2 = _1446;
                    frontier_phi_16_pred_3 = _1445;
                    frontier_phi_16_pred_4 = _1437;
                }
                _1048 = frontier_phi_16_pred;
                _1046 = frontier_phi_16_pred_1;
                _1044 = frontier_phi_16_pred_2;
                _1042 = frontier_phi_16_pred_3;
                _1494 = frontier_phi_16_pred_4;
                uint _1438 = _1494 + 1u;
                if (int(_1438) < int(_720))
                {
                    _1435 = _1436;
                    _1437 = _1438;
                    _1439 = _1440;
                    _1441 = _1442;
                    _1443 = _1444;
                    _1445 = _1042;
                    _1446 = _1044;
                    _1447 = _1046;
                    _1448 = _1048;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1041 = _1042;
            _1043 = _1044;
            _1045 = _1046;
            _1047 = _1048;
        }
        else
        {
            _1041 = 0.0;
            _1043 = 0.0;
            _1045 = 0.0;
            _1047 = 0.0;
        }
        float _1049 = _1045 - _1047;
        float _1050 = _1041 - _1043;
        float _1056 = 1.0 - (((_1049 * _1041) - (_1045 * _1050)) / (_1049 - _1050));
        float _1057 = _1056 * _322;
        float _1058 = _1056 * _325;
        float _359 = _300 - _1057;
        float _362 = _301 - _1058;
        float frontier_phi_3_8_ladder;
        float frontier_phi_3_8_ladder_1;
        if (_354 > 3.0)
        {
            float _1462 = _354 - trunc(_354);
            frontier_phi_3_8_ladder = (_1462 * _1058) + _362;
            frontier_phi_3_8_ladder_1 = (_1462 * _1057) + _359;
        }
        else
        {
            frontier_phi_3_8_ladder = _362;
            frontier_phi_3_8_ladder_1 = _359;
        }
        _357 = frontier_phi_3_8_ladder_1;
        _360 = frontier_phi_3_8_ladder;
    }
    float _367 = ((_357 - _300) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _368 = ((_360 - _301) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _381 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _367) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _368) + cbTextureTilingScale._m0[3u].w));
    float _386 = _381.x * cbMtdParam._m0[9u].x;
    float _387 = _381.y * cbMtdParam._m0[9u].y;
    float _388 = _381.z * cbMtdParam._m0[9u].z;
    vec4 _400 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _402 = _400.x;
    vec4 _414 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _367) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _368) + cbTextureTilingScale._m0[1u].w));
    float _418 = _414.z;
    float _423 = (_414.x * 2.0) + (-1.0);
    float _425 = (_414.y * 2.0) + (-1.0);
    float _426 = dot(vec2(_423, _425), vec2(_423, _425));
    float _3464 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _432 = sqrt(1.0 - (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))));
    float _435 = fma(_432, _213, fma(_425, _206, _423 * _192));
    float _438 = fma(_432, _214, fma(_425, _207, _423 * _193));
    float _441 = fma(_432, _215, fma(_425, _208, _423 * _194));
    float _445 = inversesqrt(dot(vec3(_435, _438, _441), vec3(_435, _438, _441)));
    float _446 = _445 * _435;
    float _447 = _445 * _438;
    float _448 = _445 * _441;
    float _452 = cbMtdParam._m0[10u].x + _414.w;
    float _456 = inversesqrt(dot(vec3(_446, _447, _448), vec3(_446, _447, _448)));
    float _457 = _456 * _446;
    float _458 = _456 * _447;
    float _459 = _456 * _448;
    float _3475 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _460 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3497 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3508 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3519 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3530 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _465 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _481 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _530 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _521);
    float _531 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _521);
    float _532 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _521);
    float _536 = inversesqrt(dot(vec3(_530, _531, _532), vec3(_530, _531, _532)));
    float _537 = _530 * _536;
    float _538 = _531 * _536;
    float _539 = _532 * _536;
    float _545 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _546 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _567 = fma(_459, cbSceneParam._m0[5u].z, fma(_458, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _457));
    float _570 = fma(_459, cbSceneParam._m0[6u].z, fma(_458, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _457));
    float _573 = fma(_459, cbSceneParam._m0[7u].z, fma(_458, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _457));
    uint _586 = uint(roundEven(NORMAL.w)) * 13u;
    uint _589 = (_586 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _595 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * cbInstanceData._m0[_589].x;
    float _596 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * cbInstanceData._m0[_589].y;
    float _597 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * cbInstanceData._m0[_589].z;
    float _3541 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _601 = 1.0 - _465;
    float _602 = _598 * _601;
    float _603 = _599 * _601;
    float _604 = _600 * _601;
    float _609 = (_598 + (-0.039999999105930328369140625)) * _465;
    float _610 = (_599 + (-0.039999999105930328369140625)) * _465;
    float _611 = (_600 + (-0.039999999105930328369140625)) * _465;
    float _612 = _609 + 0.039999999105930328369140625;
    float _614 = _610 + 0.039999999105930328369140625;
    float _615 = _611 + 0.039999999105930328369140625;
    vec4 _624 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _545, cbSceneParam._m0[86u].y * _546));
    float _628 = ((isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * TEXCOORD.z) * _624.x;
    float _629 = dot(vec3(_457, _458, _459), vec3(_537, _538, _539));
    float _632 = _629 * 2.0;
    float _636 = (_632 * _457) - _537;
    float _637 = (_632 * _458) - _538;
    float _638 = (_632 * _459) - _539;
    float _642 = abs(dot(vec3(_537, _538, _539), vec3(_457, _458, _459)));
    float _3574 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _644 = sqrt(_460);
    float _656 = exp2((_644 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_644 * 3.0));
    float _662 = (1.0 - _656) * ((_644 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _663 = _656 * _644;
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1023;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _748 = fma(_699, cbModelParam._m0[26u].z, fma(_695, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691));
        float _752 = fma(_699, cbModelParam._m0[27u].z, fma(_695, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691));
        float _756 = fma(_699, cbModelParam._m0[28u].z, fma(_695, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691));
        float _781 = _691 + _457;
        float _782 = _695 + _458;
        float _783 = _699 + _459;
        float _793 = fma(_783, cbModelParam._m0[26u].z, fma(_782, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781)) - _748;
        float _794 = fma(_783, cbModelParam._m0[27u].z, fma(_782, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781)) - _752;
        float _795 = fma(_783, cbModelParam._m0[28u].z, fma(_782, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781)) - _756;
        float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
        float _812 = ((_799 * _793) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_748 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _813 = ((_799 * _794) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_752 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _814 = ((_799 * _795) / cbModelParam._m0[34u].z) + ((((((_756 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        float _851 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_817.x + (-0.5));
        float _853 = _851 * (_817.y + (-0.5));
        float _854 = _851 * (_817.z + (-0.5));
        float _861 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_824.x + (-0.5));
        float _863 = _861 * (_824.y + (-0.5));
        float _864 = _861 * (_824.z + (-0.5));
        float _871 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_831.x + (-0.5));
        float _873 = _871 * (_831.y + (-0.5));
        float _874 = _871 * (_831.z + (-0.5));
        float _881 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_838.x + (-0.5));
        float _883 = _881 * (_838.y + (-0.5));
        float _884 = _881 * (_838.z + (-0.5));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = _852 * 0.5;
        float _889 = _862 * 0.5;
        float _890 = _872 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _905 = (dot(vec3(_457, _458, _459), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _915 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3622 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_917 + 1.0))) + _922) * _885;
        float _932 = _853 * 0.5;
        float _933 = _863 * 0.5;
        float _934 = _873 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_457, _458, _459), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3655 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_959 + 1.0))) + _964) * _886;
        float _974 = _854 * 0.5;
        float _975 = _864 * 0.5;
        float _976 = _874 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_457, _458, _459), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3688 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1001 + 1.0))) + _1006) * _887;
        _1023 = _854;
        _1025 = _853;
        _1026 = _852;
        _1027 = _864;
        _1028 = _863;
        _1029 = _862;
        _1030 = _874;
        _1031 = _873;
        _1032 = _872;
        _1033 = _887;
        _1034 = _886;
        _1035 = _885;
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
    }
    else
    {
        _1023 = _1024;
        _1025 = _1024;
        _1026 = _1024;
        _1027 = _1024;
        _1028 = _1024;
        _1029 = _1024;
        _1030 = _1024;
        _1031 = _1024;
        _1032 = _1024;
        _1033 = _1024;
        _1034 = _1024;
        _1035 = _1024;
        _1036 = 0.0;
        _1037 = 0.0;
        _1038 = 0.0;
    }
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1082 = fma(_699, cbModelParam._m0[30u].z, fma(_695, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _691));
        float _1086 = fma(_699, cbModelParam._m0[31u].z, fma(_695, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _691));
        float _1090 = fma(_699, cbModelParam._m0[32u].z, fma(_695, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _691));
        float _1113 = _691 + _457;
        float _1114 = _695 + _458;
        float _1115 = _699 + _459;
        float _1125 = fma(_1115, cbModelParam._m0[30u].z, fma(_1114, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1113)) - _1082;
        float _1126 = fma(_1115, cbModelParam._m0[31u].z, fma(_1114, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1113)) - _1086;
        float _1127 = fma(_1115, cbModelParam._m0[32u].z, fma(_1114, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1113)) - _1090;
        float _1131 = inversesqrt(dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127)));
        float _1144 = ((_1131 * _1125) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1082 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1131 * _1126) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1086 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1131 * _1127) / cbModelParam._m0[35u].z) + ((((((_1090 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        float _1181 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1148.x + (-0.5));
        float _1183 = _1181 * (_1148.y + (-0.5));
        float _1184 = _1181 * (_1148.z + (-0.5));
        float _1191 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1155.x + (-0.5));
        float _1193 = _1191 * (_1155.y + (-0.5));
        float _1194 = _1191 * (_1155.z + (-0.5));
        float _1201 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1162.x + (-0.5));
        float _1203 = _1201 * (_1162.y + (-0.5));
        float _1204 = _1201 * (_1162.z + (-0.5));
        float _1211 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1169.x + (-0.5));
        float _1213 = _1211 * (_1169.y + (-0.5));
        float _1214 = _1211 * (_1169.z + (-0.5));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = _1182 * 0.5;
        float _1219 = _1192 * 0.5;
        float _1220 = _1202 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_457, _458, _459), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3751 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1245 + 1.0))) + _1250) * _1215;
        float _1260 = _1183 * 0.5;
        float _1261 = _1193 * 0.5;
        float _1262 = _1203 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_457, _458, _459), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3784 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1287 + 1.0))) + _1292) * _1216;
        float _1302 = _1184 * 0.5;
        float _1303 = _1194 * 0.5;
        float _1304 = _1204 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_457, _458, _459), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3817 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1329 + 1.0))) + _1334) * _1217;
        _1351 = _1184;
        _1352 = _1183;
        _1353 = _1182;
        _1354 = _1194;
        _1355 = _1193;
        _1356 = _1192;
        _1357 = _1204;
        _1358 = _1203;
        _1359 = _1202;
        _1360 = _1217;
        _1361 = _1216;
        _1362 = _1215;
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1024;
        _1352 = _1024;
        _1353 = _1024;
        _1354 = _1024;
        _1355 = _1024;
        _1356 = _1024;
        _1357 = _1024;
        _1358 = _1024;
        _1359 = _1024;
        _1360 = _1024;
        _1361 = _1024;
        _1362 = _1024;
        _1363 = 0.0;
        _1364 = 0.0;
        _1365 = 0.0;
    }
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1036)) + _1036;
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1037)) + _1037;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1038)) + _1038;
    float _1398 = fma(_1377, cbSceneParam._m0[89u].z, fma(_1376, cbSceneParam._m0[89u].y, _1375 * cbSceneParam._m0[89u].x));
    float _1401 = fma(_1377, cbSceneParam._m0[90u].z, fma(_1376, cbSceneParam._m0[90u].y, _1375 * cbSceneParam._m0[90u].x));
    float _1404 = fma(_1377, cbSceneParam._m0[91u].z, fma(_1376, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1375));
    float _1419 = _636 * 0.5;
    float _1420 = _637 * 0.5;
    float _1421 = _638 * 0.5;
    float _1422 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1425 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1428 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1492;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1465 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1023, _1027, _1030, _1033));
        float _1469 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1025, _1028, _1031, _1034));
        float _1473 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1480 = dot(vec4(cbModelParam._m0[39u]), vec4(_1419, _1420, _1421, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1480) ? 0.0 : (isnan(0.0) ? _1480 : max(0.0, _1480))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1505;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1496 = dot(vec4(cbModelParam._m0[40u]), vec4(_1419, _1420, _1421, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1496) ? 0.0 : (isnan(0.0) ? _1496 : max(0.0, _1496))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1509 = (_1505 * cbModelParam._m0[1u].x) + (_1492 * (1.0 - cbModelParam._m0[1u].x));
    float _1519 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _460);
    float _1520 = isnan(_1519) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1519 : min(cbModelParam._m0[25u].z, _1519));
    float _1602;
    float _1604;
    float _1606;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1569 = fma(_699, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691)) + cbModelParam._m0[13u].w;
        float _1573 = fma(_699, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691)) + cbModelParam._m0[14u].w;
        float _1577 = fma(_699, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691)) + cbModelParam._m0[15u].w;
        float _1580 = fma(_638, cbModelParam._m0[13u].z, fma(_637, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _636));
        float _1583 = fma(_638, cbModelParam._m0[14u].z, fma(_637, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _636));
        float _1586 = fma(_638, cbModelParam._m0[15u].z, fma(_637, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _636));
        float _1614;
        if (_1580 > 0.0)
        {
            _1614 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1614 = frontier_phi_25_23_ladder;
        }
        float _1843;
        if (_1583 > 0.0)
        {
            _1843 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1843 = frontier_phi_34_30_ladder;
        }
        float _2100;
        if (_1586 > 0.0)
        {
            _2100 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2100 = frontier_phi_46_41_ladder;
        }
        float _2102 = isnan(_1843) ? _1614 : (isnan(_1614) ? _1843 : min(_1614, _1843));
        float _2103 = isnan(_2100) ? _2102 : (isnan(_2102) ? _2100 : min(_2102, _2100));
        float _2107 = (_2103 * _1580) + _1569;
        float _2108 = (_2103 * _1583) + _1573;
        float _2109 = (_2103 * _1586) + _1577;
        float _2110 = _2103 * 9.9999997473787516355514526367188e-05;
        float _2112 = (-1.0) - _2110;
        float _2114 = _2110 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2109 > _2114) || ((_2109 < _2112) || ((_2108 > _2114) || ((_2108 < _2112) || ((_2107 < _2112) || (_2107 > _2114))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2237 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2109, cbModelParam._m0[9u].z, fma(_2108, cbModelParam._m0[9u].y, _2107 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2109, cbModelParam._m0[10u].z, fma(_2108, cbModelParam._m0[10u].y, _2107 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2109, cbModelParam._m0[11u].z, fma(_2108, cbModelParam._m0[11u].y, _2107 * cbModelParam._m0[11u].x))), _1520);
            frontier_phi_24_46_ladder = _2237.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2237.x * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2237.z * cbModelParam._m0[1u].y;
        }
        _1602 = frontier_phi_24_46_ladder_1;
        _1604 = frontier_phi_24_46_ladder;
        _1606 = frontier_phi_24_46_ladder_2;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_636, _637, _638), _1520);
        _1602 = _1590.x * cbModelParam._m0[1u].y;
        _1604 = _1590.y * cbModelParam._m0[1u].y;
        _1606 = _1590.z * cbModelParam._m0[1u].y;
    }
    float _1610 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _460);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1610 : min(cbModelParam._m0[25u].w, _1610));
    float _1704;
    float _1706;
    float _1708;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1668 = fma(_699, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691)) + cbModelParam._m0[21u].w;
        float _1672 = fma(_699, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691)) + cbModelParam._m0[22u].w;
        float _1676 = fma(_699, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691)) + cbModelParam._m0[23u].w;
        float _1679 = fma(_638, cbModelParam._m0[21u].z, fma(_637, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _636));
        float _1682 = fma(_638, cbModelParam._m0[22u].z, fma(_637, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _636));
        float _1685 = fma(_638, cbModelParam._m0[23u].z, fma(_637, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _636));
        float _1848;
        if (_1679 > 0.0)
        {
            _1848 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1848 = frontier_phi_36_32_ladder;
        }
        float _2127;
        if (_1682 > 0.0)
        {
            _2127 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2127 = frontier_phi_48_43_ladder;
        }
        float _2340;
        if (_1685 > 0.0)
        {
            _2340 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2340 = frontier_phi_57_54_ladder;
        }
        float _2342 = isnan(_2127) ? _1848 : (isnan(_1848) ? _2127 : min(_1848, _2127));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1679) + _1668;
        float _2348 = (_2343 * _1682) + _1672;
        float _2349 = (_2343 * _1685) + _1676;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2350;
        float _2353 = _2350 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2349 > _2353) || ((_2349 < _2351) || ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 < _2351) || (_2347 > _2353))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2547 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2349, cbModelParam._m0[17u].z, fma(_2348, cbModelParam._m0[17u].y, _2347 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2349, cbModelParam._m0[18u].z, fma(_2348, cbModelParam._m0[18u].y, _2347 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2349, cbModelParam._m0[19u].z, fma(_2348, cbModelParam._m0[19u].y, _2347 * cbModelParam._m0[19u].x))), _1611);
            frontier_phi_33_57_ladder = _2547.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2547.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2547.z * cbModelParam._m0[1u].z;
        }
        _1704 = frontier_phi_33_57_ladder_1;
        _1706 = frontier_phi_33_57_ladder;
        _1708 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_636, _637, _638), _1611);
        _1704 = _1688.x * cbModelParam._m0[1u].z;
        _1706 = _1688.y * cbModelParam._m0[1u].z;
        _1708 = _1688.z * cbModelParam._m0[1u].z;
    }
    float _1721 = (((_662 * _612) + _663) * _628) * ((cbModelParam._m0[1u].w * (_1704 - _1602)) + _1602);
    float _1723 = (((_662 * _614) + _663) * _628) * ((cbModelParam._m0[1u].w * (_1706 - _1604)) + _1604);
    float _1725 = (((_662 * _615) + _663) * _628) * ((cbModelParam._m0[1u].w * (_1708 - _1606)) + _1606);
    float _1728 = fma(_1725, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1721 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1725, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1721 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1725, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, _1721 * cbSceneParam._m0[91u].x));
    vec4 _1742 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_545, _546));
    float _1744 = _1742.w;
    float _1756 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1744);
    float _1757 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1744);
    float _1758 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1744);
    uvec4 _1762 = floatBitsToUint(cbInstanceData._m0[_586 + 5u]);
    uint _1764 = _1762.x * 14u;
    uint _1765 = _1764 + 13u;
    float _1772 = _628 + (-1.0);
    float _1777 = (cbLight._m0[_1765].x * _1772) + 1.0;
    float _1778 = (cbLight._m0[_1765].y * _1772) + 1.0;
    float _1779 = (cbLight._m0[_1765].z * _1772) + 1.0;
    float _1780 = (cbLight._m0[_1765].w * _1772) + 1.0;
    uint _1781 = _1764 + 5u;
    float _1787 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
    uint _1791 = _1764 + 4u;
    float _1801 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
    uint _1805 = _1764 | 1u;
    float _1816 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_457, _458, _459));
    float _1819 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_457, _458, _459));
    float _3953 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _3964 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1824 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1826 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.3183098733425140380859375;
    float _1833 = ((cbLight._m0[_1781].x * _1787) * _1826) + (((cbLight._m0[_1791].x * _1756) * _1801) * _1824);
    float _1834 = ((_1787 * cbLight._m0[_1781].y) * _1826) + (((cbLight._m0[_1791].y * _1757) * _1801) * _1824);
    float _1835 = ((_1787 * cbLight._m0[_1781].z) * _1826) + (((cbLight._m0[_1791].z * _1758) * _1801) * _1824);
    uvec4 _1840 = floatBitsToUint(cbLight._m0[_1764 + 12u]);
    bool _1842 = _1840.x == 0u;
    float _1853;
    float _1855;
    float _1857;
    if (_1842)
    {
        _1853 = _1833;
        _1855 = _1834;
        _1857 = _1835;
    }
    else
    {
        uint _1861 = _1764 + 6u;
        float _1877 = (dot(vec3(cbLight._m0[_1764 + 2u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _1878 = _1877 * _1877;
        float _3975 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1880 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _1853 = (((cbLight._m0[_1861].x * 0.3183098733425140380859375) * _1879) * _1880) + _1833;
        _1855 = (((cbLight._m0[_1861].y * 0.3183098733425140380859375) * _1879) * _1880) + _1834;
        _1857 = (((cbLight._m0[_1861].z * 0.3183098733425140380859375) * _1879) * _1880) + _1835;
    }
    bool _1860 = _1840.y == 0u;
    float _1898;
    float _1900;
    float _1902;
    if (_1860)
    {
        _1898 = _1853;
        _1900 = _1855;
        _1902 = _1857;
    }
    else
    {
        uint _2071 = _1764 + 7u;
        float _2087 = (dot(vec3(cbLight._m0[_1764 + 3u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _2088 = _2087 * _2087;
        float _3991 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2090 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _1898 = (((cbLight._m0[_2071].x * 0.3183098733425140380859375) * _2089) * _2090) + _1853;
        _1900 = (((cbLight._m0[_2071].y * 0.3183098733425140380859375) * _2089) * _2090) + _1855;
        _1902 = (((cbLight._m0[_2071].z * 0.3183098733425140380859375) * _2089) * _2090) + _1857;
    }
    uint _1905 = _1764 + 8u;
    float _1918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1764].w)) * _460) * 0.949999988079071044921875);
    float _1919 = _1918 * _1918;
    float _1920 = cbLight._m0[_1764].x + _537;
    float _1921 = cbLight._m0[_1764].y + _538;
    float _1922 = cbLight._m0[_1764].z + _539;
    float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
    float _1927 = _1926 * _1920;
    float _1928 = _1926 * _1921;
    float _1929 = _1926 * _1922;
    float _1930 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1764].xyz));
    float _4007 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _1934 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1935 = dot(vec3(_457, _458, _459), vec3(_1927, _1928, _1929));
    float _4029 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1939 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_1927, _1928, _1929));
    float _4040 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1943 = _1919 * _1919;
    float _1947 = ((_1938 * _1938) * (_1943 + (-1.0))) + 1.0;
    float _1955 = exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0);
    float _1956 = 0.959999978542327880859375 - _609;
    float _1958 = 0.959999978542327880859375 - _610;
    float _1959 = 0.959999978542327880859375 - _611;
    float _1966 = 1.0 - _1919;
    float _1977 = (0.5 / (((_1934 * ((_1933 * _1966) + _1919)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _1966) + _1919) * _1933))) * _1933;
    float _4051 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1979 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1943 / ((_1947 * _1947) * 3.141590118408203125));
    uint _1993 = _1764 + 9u;
    float _2004 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1805].w)) * _460) * 0.949999988079071044921875);
    float _2005 = _2004 * _2004;
    float _2006 = cbLight._m0[_1805].x + _537;
    float _2007 = cbLight._m0[_1805].y + _538;
    float _2008 = cbLight._m0[_1805].z + _539;
    float _2012 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
    float _2013 = _2012 * _2006;
    float _2014 = _2012 * _2007;
    float _2015 = _2012 * _2008;
    float _2016 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1805].xyz));
    float _4062 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _2020 = dot(vec3(_457, _458, _459), vec3(_2013, _2014, _2015));
    float _4073 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _2024 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_2013, _2014, _2015));
    float _4084 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2028 = _2005 * _2005;
    float _2032 = ((_2023 * _2023) * (_2028 + (-1.0))) + 1.0;
    float _2039 = exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0);
    float _2046 = 1.0 - _2005;
    float _2056 = (0.5 / (((_1934 * ((_2019 * _2046) + _2005)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _2046) + _2005) * _2019))) * _2019;
    float _4095 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2058 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2028 / ((_2032 * _2032) * 3.141590118408203125));
    float _2068 = (((((_2039 * _1956) + _612) * cbLight._m0[_1993].x) * _2058) * _1787) + ((((cbLight._m0[_1905].x * _1756) * ((_1955 * _1956) + _612)) * _1979) * _1801);
    float _2069 = (((((_2039 * _1958) + _614) * cbLight._m0[_1993].y) * _2058) * _1787) + ((((cbLight._m0[_1905].y * _1757) * ((_1955 * _1958) + _614)) * _1979) * _1801);
    float _2070 = (((((_2039 * _1959) + _615) * cbLight._m0[_1993].z) * _2058) * _1787) + ((((cbLight._m0[_1905].z * _1758) * ((_1955 * _1959) + _615)) * _1979) * _1801);
    float _2132;
    float _2134;
    float _2136;
    if (_1842)
    {
        _2132 = _2068;
        _2134 = _2069;
        _2136 = _2070;
    }
    else
    {
        uint _2138 = _1764 + 2u;
        uint _2142 = _1764 + 10u;
        float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _460) * 0.949999988079071044921875);
        float _2157 = _2156 * _2156;
        float _2158 = cbLight._m0[_2138].x + _537;
        float _2159 = cbLight._m0[_2138].y + _538;
        float _2160 = cbLight._m0[_2138].z + _539;
        float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
        float _2165 = _2164 * _2158;
        float _2166 = _2164 * _2159;
        float _2167 = _2164 * _2160;
        float _2168 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2138].xyz));
        float _4106 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2172 = dot(vec3(_457, _458, _459), vec3(_2165, _2166, _2167));
        float _4117 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2176 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2165, _2166, _2167));
        float _4128 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2180 = _2157 * _2157;
        float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
        float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0);
        float _2198 = 1.0 - _2157;
        float _2208 = (0.5 / (((_1934 * ((_2171 * _2198) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _2198) + _2157) * _2171))) * _2171;
        float _4139 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2210 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
        float _2211 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _2132 = (((((_2191 * _1956) + _612) * cbLight._m0[_2142].x) * _2210) * _2211) + _2068;
        _2134 = (((((_2191 * _1958) + _614) * cbLight._m0[_2142].y) * _2210) * _2211) + _2069;
        _2136 = (((((_2191 * _1959) + _615) * cbLight._m0[_2142].z) * _2210) * _2211) + _2070;
    }
    float _2246;
    float _2248;
    float _2250;
    if (_1860)
    {
        _2246 = _2132;
        _2248 = _2134;
        _2250 = _2136;
    }
    else
    {
        uint _2257 = _1764 + 3u;
        uint _2261 = _1764 + 11u;
        float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _460) * 0.949999988079071044921875);
        float _2276 = _2275 * _2275;
        float _2277 = cbLight._m0[_2257].x + _537;
        float _2278 = cbLight._m0[_2257].y + _538;
        float _2279 = cbLight._m0[_2257].z + _539;
        float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
        float _2284 = _2283 * _2277;
        float _2285 = _2283 * _2278;
        float _2286 = _2283 * _2279;
        float _2287 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2257].xyz));
        float _4155 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2291 = dot(vec3(_457, _458, _459), vec3(_2284, _2285, _2286));
        float _4166 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2295 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2284, _2285, _2286));
        float _4177 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2299 = _2276 * _2276;
        float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
        float _2310 = exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0);
        float _2317 = 1.0 - _2276;
        float _2327 = (0.5 / (((_1934 * ((_2290 * _2317) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _2317) + _2276) * _2290))) * _2290;
        float _4188 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2329 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
        float _2330 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _2246 = (((((_2310 * _1956) + _612) * cbLight._m0[_2261].x) * _2329) * _2330) + _2132;
        _2248 = (((((_2310 * _1958) + _614) * cbLight._m0[_2261].y) * _2329) * _2330) + _2134;
        _2250 = (((((_2310 * _1959) + _615) * cbLight._m0[_2261].z) * _2329) * _2330) + _2136;
    }
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    float _2474;
    if (_1762.y == 0u)
    {
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2405;
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2405;
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2405;
        uvec4 _2420 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2421 = _2420.x;
        uint _2432 = uint((float(_2420.y) * floor(float(uint(cbSceneParam._m0[85u].y * _546) / _2421))) + floor(float(uint(cbSceneParam._m0[85u].x * _545) / _2421)));
        float _2442 = (log2(_2408 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2443 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        uint _2446 = uint(isnan(14.0) ? _2443 : (isnan(_2443) ? 14.0 : min(_2443, 14.0)));
        uvec4 _2451 = texelFetch(g_lightClusterGridBuffer, int(((_2446 << 2u) + (_2432 << 6u)) >> 2u));
        uint _2452 = _2451.x;
        uint _2453 = _2420.z;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        if (((((1u << ((_2453 >> 4u) & 15u)) + 4294967295u) & _2452) == 0u) || ((_2453 & 240u) == 0u))
        {
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
            _2560 = 0.0;
            _2562 = 0.0;
        }
        else
        {
            float _2553;
            float _2555;
            float _2557;
            float _2559;
            float _2561;
            float _2563;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            uint _2702 = 0u;
            uint _2711;
            bool _2712;
            for (;;)
            {
                _2711 = texelFetch(g_lightClassification, int((((_2446 << 5u) + (_2432 << 9u)) + (_2702 << 2u)) >> 2u)).x;
                _2712 = _2711 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2712)
                {
                    frontier_phi_72_pred = _2700;
                    frontier_phi_72_pred_1 = _2699;
                    frontier_phi_72_pred_2 = _2698;
                    frontier_phi_72_pred_3 = _2697;
                    frontier_phi_72_pred_4 = _2696;
                    frontier_phi_72_pred_5 = _2701;
                }
                else
                {
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    uint _2826;
                    _2820 = _2696;
                    _2821 = _2697;
                    _2822 = _2698;
                    _2823 = _2699;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2711;
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    for (;;)
                    {
                        uint _2830 = uint(findLSB(_2826)) + (_2702 << 5u);
                        uint _2827 = (_2826 + 4294967295u) & _2826;
                        uint _2832 = _2830 * 48u;
                        vec4 _2846 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 3u)).x));
                        uint _2852 = (_2830 * 48u) + 4u;
                        vec4 _2865 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2852)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 3u)).x));
                        uint _2871 = (_2830 * 48u) + 8u;
                        vec3 _2882 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2871)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 2u)).x));
                        float _2886 = _2846.x - _2406;
                        float _2887 = _2846.y - _2407;
                        float _2888 = _2846.z - _2408;
                        float _2889 = dot(vec3(_2886, _2887, _2888), vec3(_2886, _2887, _2888));
                        float _2892 = inversesqrt(_2889);
                        float _2893 = _2892 * _2886;
                        float _2894 = _2892 * _2887;
                        float _2895 = _2892 * _2888;
                        float _2896 = dot(vec3(_567, _570, _573), vec3(_2893, _2894, _2895));
                        float _2901 = 1.0 - (_2889 * _2846.w);
                        float _4214 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2902 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2903 = sqrt(_2889) * _2865.w;
                        float _2906 = 1.39999997615814208984375 / (_2903 + 1.39999997615814208984375);
                        float _2907 = _2906 * _2906;
                        float _2910 = ((1.0 - _2907) * _2896) + _2907;
                        float _2913 = _2903 * _2903;
                        float _2917 = ((isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0))) * _2902) / ((_2913 * 0.699999988079071044921875) + 1.0);
                        float _2921 = (-0.0) - _2406;
                        float _2922 = (-0.0) - _2407;
                        float _2923 = (-0.0) - _2408;
                        float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
                        float _2928 = _2927 * _2921;
                        float _2929 = _2927 * _2922;
                        float _2930 = _2927 * _2923;
                        float _2938 = exp2(log2(1.0 / ((_2913 * 3.5) + 5.0)) * 0.25);
                        float _2939 = 1.0 - _644;
                        float _2946 = sqrt(1.0 - ((1.0 - (_2939 * _2939)) * (1.0 - (_2938 * _2938))));
                        float _2947 = _2946 * _2946;
                        float _2948 = _2947 * _2947;
                        float _2949 = _2928 + _2893;
                        float _2950 = _2929 + _2894;
                        float _2951 = _2930 + _2895;
                        float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
                        float _2959 = dot(vec3(_567, _570, _573), vec3(_2928, _2929, _2930));
                        float _4230 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2962 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2963 = dot(vec3(_567, _570, _573), vec3(_2955 * _2949, _2955 * _2950, _2955 * _2951));
                        float _4241 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2966 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2970 = ((_2966 * _2966) * (_2948 + (-1.0))) + 1.0;
                        float _2971 = _2906 * _2947;
                        float _2972 = _2971 * _2971;
                        float _2975 = ((1.0 - _2972) * _2896) + _2972;
                        float _4252 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2976 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2977 = 1.0 - _2947;
                        float _2987 = (0.5 / (((_2976 * ((_2962 * _2977) + _2947)) + 9.9999999392252902907785028219223e-09) + (((_2976 * _2977) + _2947) * _2962))) * _2976;
                        float _4263 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2998 = (((_2948 * 3.1415927410125732421875) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) / ((_2970 * _2970) * ((_2913 * 2.1991131305694580078125) + 3.141590118408203125))) * _2902;
                        _2755 = (_2917 * _2865.x) + _2823;
                        _2756 = (_2917 * _2865.y) + _2824;
                        _2757 = (_2917 * _2865.z) + _2825;
                        _2752 = (_2998 * _2882.x) + _2820;
                        _2753 = (_2998 * _2882.y) + _2821;
                        _2754 = (_2998 * _2882.z) + _2822;
                        if (_2827 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2820 = _2752;
                            _2821 = _2753;
                            _2822 = _2754;
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2827;
                        }
                    }
                    frontier_phi_72_pred = _2756;
                    frontier_phi_72_pred_1 = _2755;
                    frontier_phi_72_pred_2 = _2754;
                    frontier_phi_72_pred_3 = _2753;
                    frontier_phi_72_pred_4 = _2752;
                    frontier_phi_72_pred_5 = _2757;
                }
                _2561 = frontier_phi_72_pred;
                _2559 = frontier_phi_72_pred_1;
                _2557 = frontier_phi_72_pred_2;
                _2555 = frontier_phi_72_pred_3;
                _2553 = frontier_phi_72_pred_4;
                _2563 = frontier_phi_72_pred_5;
                uint _2703 = _2702 + 1u;
                if (_2703 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2696 = _2553;
                    _2697 = _2555;
                    _2698 = _2557;
                    _2699 = _2559;
                    _2700 = _2561;
                    _2701 = _2563;
                    _2702 = _2703;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
            _2560 = _2561;
            _2562 = _2563;
        }
        uvec4 _2566 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2567 = _2566.z;
        uint _2569 = (_2567 >> 8u) & 15u;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        if (((4294967295u << _2569) & _2452) == 0u)
        {
            _2664 = _2552;
            _2666 = _2554;
            _2668 = _2556;
            _2670 = _2558;
            _2672 = _2560;
            _2674 = _2562;
        }
        else
        {
            float _2689 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
            float _2690 = _2689 * _2406;
            float _2691 = _2689 * _2407;
            float _2692 = _2689 * _2408;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2569 < ((_2567 >> 12u) & 15u))
            {
                float _2665;
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2675;
                float _2803 = _2552;
                float _2804 = _2554;
                float _2805 = _2556;
                float _2806 = _2558;
                float _2807 = _2560;
                float _2808 = _2562;
                uint _2809 = _2569;
                uint _2818;
                bool _2819;
                for (;;)
                {
                    _2818 = texelFetch(g_lightClassification, int((((_2446 << 5u) + (_2432 << 9u)) + (_2809 << 2u)) >> 2u)).x;
                    _2819 = _2818 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2819)
                    {
                        frontier_phi_78_pred = _2808;
                        frontier_phi_78_pred_1 = _2807;
                        frontier_phi_78_pred_2 = _2806;
                        frontier_phi_78_pred_3 = _2805;
                        frontier_phi_78_pred_4 = _2803;
                        frontier_phi_78_pred_5 = _2804;
                    }
                    else
                    {
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3016 = _2803;
                        float _3017 = _2804;
                        float _3018 = _2805;
                        float _3019 = _2806;
                        float _3020 = _2807;
                        float _3021 = _2808;
                        uint _3022 = _2818;
                        uint _3023;
                        vec4 _3048;
                        float _3049;
                        vec4 _3064;
                        vec3 _3076;
                        vec4 _3092;
                        vec4 _3108;
                        float _3155;
                        bool _3156;
                        for (;;)
                        {
                            uint _3033 = ((_2809 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3022));
                            _3023 = (_3022 + 4294967295u) & _3022;
                            uint _3035 = _3033 * 40u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            _3049 = _3048.w;
                            uint _3051 = (_3033 * 40u) + 4u;
                            _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            uint _3066 = (_3033 * 40u) + 8u;
                            _3076 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x));
                            uint _3079 = (_3033 * 40u) + 16u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3095 = (_3033 * 40u) + 20u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3111 = (_3033 * 40u) + 24u;
                            vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3130 = (_3033 * 40u) + 28u;
                            vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            _3155 = fma(_2408, _3143.z, fma(_2407, _3143.y, _3143.x * _2406)) + _3143.w;
                            _3156 = !((fma(_2408, _3124.z, fma(_2407, _3124.y, _3124.x * _2406)) + _3124.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3156)
                            {
                                float _3183 = _3048.x - _2406;
                                float _3184 = _3048.y - _2407;
                                float _3185 = _3048.z - _2408;
                                float _3186 = dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185));
                                float _3189 = inversesqrt(_3186);
                                float _3190 = _3189 * _3183;
                                float _3191 = _3189 * _3184;
                                float _3192 = _3189 * _3185;
                                float _3196 = 1.0 - (_3186 / (_3049 * _3049));
                                float _4274 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3197 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3201 = sqrt(_3186) * _3064.w;
                                float _3203 = 1.39999997615814208984375 / (_3201 + 1.39999997615814208984375);
                                float _3204 = _3203 * _3203;
                                float _3207 = ((1.0 - _3204) * dot(vec3(_3190, _3191, _3192), vec3(_567, _570, _573))) + _3204;
                                float _3210 = _3201 * _3201;
                                float _3214 = (fma(_2408, _3092.z, fma(_2407, _3092.y, _3092.x * _2406)) + _3092.w) / _3155;
                                float _3215 = (fma(_2408, _3108.z, fma(_2407, _3108.y, _3108.x * _2406)) + _3108.w) / _3155;
                                float _3219 = 1.0 - dot(vec2(_3214, _3215), vec2(_3214, _3215));
                                float _4290 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3220 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3221 = _3220 * (((isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))) * _3197) / ((_3210 * 0.699999988079071044921875) + 1.0));
                                float _3233 = exp2(log2(1.0 / ((_3210 * 3.5) + 5.0)) * 0.25);
                                float _3234 = 1.0 - _644;
                                float _3241 = sqrt(1.0 - ((1.0 - (_3234 * _3234)) * (1.0 - (_3233 * _3233))));
                                float _3242 = _3241 * _3241;
                                float _3243 = _3242 * _3242;
                                float _3244 = _3190 - _2690;
                                float _3245 = _3191 - _2691;
                                float _3246 = _3192 - _2692;
                                float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                                float _3254 = dot(vec3(_567, _570, _573), vec3((-0.0) - _2690, (-0.0) - _2691, (-0.0) - _2692));
                                float _4301 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3257 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3258 = dot(vec3(_567, _570, _573), vec3(_3250 * _3244, _3250 * _3245, _3250 * _3246));
                                float _4312 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3261 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3265 = ((_3261 * _3261) * (_3243 + (-1.0))) + 1.0;
                                float _3266 = _3203 * _3242;
                                float _3267 = _3266 * _3266;
                                float _3273 = ((1.0 - _3267) * dot(vec3(_567, _570, _573), vec3(_3190, _3191, _3192))) + _3267;
                                float _4323 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3275 = 1.0 - _3242;
                                float _3285 = (0.5 / (((_3274 * ((_3257 * _3275) + _3242)) + 9.9999999392252902907785028219223e-09) + (((_3274 * _3275) + _3242) * _3257))) * _3274;
                                float _4334 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3295 = (_3220 * _3197) * (((_3243 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_3265 * _3265) * ((_3210 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3221 * _3064.y;
                                frontier_phi_84_pred_1 = _3221 * _3064.x;
                                frontier_phi_84_pred_2 = _3295 * _3076.z;
                                frontier_phi_84_pred_3 = _3295 * _3076.y;
                                frontier_phi_84_pred_4 = _3295 * _3076.x;
                                frontier_phi_84_pred_5 = _3221 * _3064.z;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3303 = frontier_phi_84_pred;
                            _3302 = frontier_phi_84_pred_1;
                            _3301 = frontier_phi_84_pred_2;
                            _3300 = frontier_phi_84_pred_3;
                            _3299 = frontier_phi_84_pred_4;
                            _3304 = frontier_phi_84_pred_5;
                            _3006 = _3302 + _3019;
                            _3007 = _3303 + _3020;
                            _3008 = _3304 + _3021;
                            _3003 = _3299 + _3016;
                            _3004 = _3300 + _3017;
                            _3005 = _3301 + _3018;
                            if (_3023 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3023;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _3008;
                        frontier_phi_78_pred_1 = _3007;
                        frontier_phi_78_pred_2 = _3006;
                        frontier_phi_78_pred_3 = _3005;
                        frontier_phi_78_pred_4 = _3003;
                        frontier_phi_78_pred_5 = _3004;
                    }
                    _2675 = frontier_phi_78_pred;
                    _2673 = frontier_phi_78_pred_1;
                    _2671 = frontier_phi_78_pred_2;
                    _2669 = frontier_phi_78_pred_3;
                    _2665 = frontier_phi_78_pred_4;
                    _2667 = frontier_phi_78_pred_5;
                    uint _2810 = _2809 + 1u;
                    if (_2810 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2803 = _2665;
                        _2804 = _2667;
                        _2805 = _2669;
                        _2806 = _2671;
                        _2807 = _2673;
                        _2808 = _2675;
                        _2809 = _2810;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2675;
                frontier_phi_66_67_ladder_1 = _2673;
                frontier_phi_66_67_ladder_2 = _2671;
                frontier_phi_66_67_ladder_3 = _2669;
                frontier_phi_66_67_ladder_4 = _2667;
                frontier_phi_66_67_ladder_5 = _2665;
            }
            else
            {
                frontier_phi_66_67_ladder = _2562;
                frontier_phi_66_67_ladder_1 = _2560;
                frontier_phi_66_67_ladder_2 = _2558;
                frontier_phi_66_67_ladder_3 = _2556;
                frontier_phi_66_67_ladder_4 = _2554;
                frontier_phi_66_67_ladder_5 = _2552;
            }
            _2664 = frontier_phi_66_67_ladder_5;
            _2666 = frontier_phi_66_67_ladder_4;
            _2668 = frontier_phi_66_67_ladder_3;
            _2670 = frontier_phi_66_67_ladder_2;
            _2672 = frontier_phi_66_67_ladder_1;
            _2674 = frontier_phi_66_67_ladder;
        }
        float _2679 = isnan(1.0) ? _628 : (isnan(_628) ? 1.0 : min(_628, 1.0));
        _2464 = (_2679 * _2670) + _1898;
        _2466 = (_2679 * _2672) + _1900;
        _2468 = (_2679 * _2674) + _1902;
        _2470 = ((_2664 * _612) * _2679) + _2246;
        _2472 = ((_2666 * _614) * _2679) + _2248;
        _2474 = ((_2668 * _615) * _2679) + _2250;
    }
    else
    {
        _2464 = _1898;
        _2466 = _1900;
        _2468 = _1902;
        _2470 = _2246;
        _2472 = _2248;
        _2474 = _2250;
    }
    float _4350 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4361 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4372 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    uint _2494 = _586 + 6u;
    float _2502 = _545 / cbSceneParam._m0[86u].x;
    float _2503 = _546 / cbSceneParam._m0[86u].y;
    vec4 _2517 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2502, _2503, (log2((isnan(cbSceneParam._m0[77u].w) ? _481 : (isnan(_481) ? cbSceneParam._m0[77u].w : min(_481, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2519 = _2517.x;
    float _2520 = _2517.y;
    float _2521 = _2517.z;
    float _2522 = _2517.w;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    if (_481 > cbSceneParam._m0[78u].w)
    {
        float _2577 = isnan(_481) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _481 : min(cbSceneParam._m0[80u].w, _481));
        float _2578 = _2577 / _481;
        float _2589 = _2578 * _530;
        float _2590 = _531 * _2578;
        float _2591 = (-0.0) - _2590;
        float _2592 = _2578 * _532;
        float _2594 = (cbSceneParam._m0[77u].w * _2591) / _2577;
        float _2595 = _2594 + cbSceneParam._m0[79u].w;
        float _2596 = cbSceneParam._m0[79u].w - _2590;
        float _2602 = sqrt(((_2589 * _2589) + (_2590 * _2590)) + (_2592 * _2592));
        float _2605 = (1.0 - (cbSceneParam._m0[77u].w / _2577)) * _2602;
        float _2610 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2612 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2765;
        if (abs((_2591 - _2594) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2765 = ((((_2595 > 0.0) ? exp2(_2610 * _2595) : (2.0 - exp2(_2612 * _2595))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2605;
        }
        else
        {
            float _2725 = 1.0 / cbSceneParam._m0[80u].x;
            float _2726 = isnan(_2596) ? _2595 : (isnan(_2595) ? _2596 : max(_2595, _2596));
            float _2727 = isnan(_2596) ? _2595 : (isnan(_2595) ? _2596 : min(_2595, _2596));
            float _2736 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : min(_2726, 0.0));
            float _2737 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : min(_2727, 0.0));
            _2765 = ((abs(_2602 / _2591) * cbSceneParam._m0[80u].y) * ((((_2736 - _2737) * 2.0) - ((exp2(_2610 * (isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0)))) - exp2(_2610 * (isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0))))) * _2725)) - ((exp2(_2612 * _2736) - exp2(_2612 * _2737)) * _2725))) + (_2605 * cbSceneParam._m0[80u].z);
        }
        vec4 _2767 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2502, _2503, 1.0), 0.0);
        float _2776 = exp2((_2765 * (-1.44269502162933349609375)) * (1.0 - _2767.w));
        float _2777 = log2(_2776);
        float _2793 = log2(_2522);
        _2614 = (exp2(_2793 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2777 * cbSceneParam._m0[78u].x)) * _2767.x) / cbSceneParam._m0[78u].x)) + _2519;
        _2616 = (exp2(_2793 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2777 * cbSceneParam._m0[78u].y)) * _2767.y) / cbSceneParam._m0[78u].y)) + _2520;
        _2618 = (exp2(_2793 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2777 * cbSceneParam._m0[78u].z)) * _2767.z) / cbSceneParam._m0[78u].z)) + _2521;
        _2620 = _2776 * _2522;
    }
    else
    {
        _2614 = _2519;
        _2616 = _2520;
        _2618 = _2521;
        _2620 = _2522;
    }
    float _2632 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2633 = _2632 == 3.0;
    float _2634 = log2(_2620);
    float _2641 = exp2(_2634 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2464 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _628))) + ((_2470 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1509)) * cbPerFrame._m0[3u].x));
    float _2642 = exp2(_2634 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2466 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _628))) + ((_2472 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1509)) * cbPerFrame._m0[3u].x));
    float _2643 = exp2(_2634 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2468 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _628))) + ((_2474 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1509)) * cbPerFrame._m0[3u].x));
    float _2652 = (_2632 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2652 * (_2633 ? _2641 : (_2641 + (cbSceneParam._m0[72u].w * _2614)));
    SV_Target.y = _2652 * (_2633 ? _2642 : (_2642 + (cbSceneParam._m0[72u].w * _2616)));
    SV_Target.z = _2652 * (_2633 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2618)));
    SV_Target.w = cbInstanceData._m0[_2494].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2494].w;
}


