#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1090;
float _3814;
float _3815;
float _3816;
float _3817;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    float _286 = dot(vec3(_275, _276, _277), vec3(_198, _199, _200));
    float _289 = dot(vec3(_275, _276, _277), vec3(_212, _213, _214));
    float _292 = dot(vec3(_275, _276, _277), vec3(_219, _220, _221));
    float _295 = (-0.0) - _286;
    float _296 = (-0.0) - _289;
    float _306 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _307 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _308 = (-0.0) - _275;
    float _309 = (-0.0) - _276;
    float _310 = (-0.0) - _277;
    float _315 = inversesqrt(dot(vec2(_295, _296), vec2(_295, _296)));
    float _319 = _292 * _292;
    float _321 = sqrt(((_289 * _289) + (_286 * _286)) + _319);
    float _325 = sqrt((_321 * _321) - _319) / ((-0.0) - _292);
    float _328 = ((cbMtdParam._m0[10u].y * _295) * _315) * _325;
    float _331 = ((cbMtdParam._m0[10u].y * _296) * _315) * _325;
    float _335 = inversesqrt(dot(vec3(_308, _309, _310), vec3(_308, _309, _310)));
    float _339 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _340 = dFdxCoarse(_306);
    float _341 = dFdxCoarse(_307);
    float _342 = dFdyCoarse(_306);
    float _343 = dFdyCoarse(_307);
    uvec2 _351 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _355 = float(_351.y) * (abs(_343) + abs(_341));
    float _357 = float(_351.x) * (abs(_342) + abs(_340));
    float _359 = log2(isnan(_355) ? _357 : (isnan(_357) ? _355 : max(_357, _355)));
    float _360 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _363;
    float _366;
    if (!(_360 <= 4.0))
    {
        _363 = _306;
        _366 = _307;
    }
    else
    {
        uint _574 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_335 * _308, _335 * _309, _335 * _310), vec3(_339 * _219, _339 * _220, _339 * _221))) * 12.0)))), int(32u)));
        float _577 = 1.0 / float(int(_574));
        float _578 = _577 * _328;
        float _579 = _577 * _331;
        float _774;
        float _776;
        float _778;
        float _780;
        if (int(_574) > int(0u))
        {
            float _775;
            float _777;
            float _779;
            float _781;
            uint _1515;
            float _1110 = 1.0;
            uint _1112 = 0u;
            float _1114 = _306;
            float _1116 = _307;
            float _1118 = 1.0;
            float _1120 = 0.0;
            float _1121 = 0.0;
            float _1122 = 0.0;
            float _1123 = 0.0;
            float _1111;
            float _1115;
            float _1117;
            float _1119;
            bool _1135;
            for (;;)
            {
                _1115 = _1114 - _578;
                _1117 = _1116 - _579;
                _1111 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_1115, _1117), vec2(_340, _341), vec2(_342, _343))), vec4(1.0, 0.0, 0.0, 0.0));
                _1119 = _1118 - _577;
                _1135 = _1111 > _1119;
                float frontier_phi_17_pred;
                float frontier_phi_17_pred_1;
                float frontier_phi_17_pred_2;
                float frontier_phi_17_pred_3;
                uint frontier_phi_17_pred_4;
                if (_1135)
                {
                    frontier_phi_17_pred = _1110;
                    frontier_phi_17_pred_1 = _1118;
                    frontier_phi_17_pred_2 = _1111;
                    frontier_phi_17_pred_3 = _1119;
                    frontier_phi_17_pred_4 = _574;
                }
                else
                {
                    frontier_phi_17_pred = _1123;
                    frontier_phi_17_pred_1 = _1122;
                    frontier_phi_17_pred_2 = _1121;
                    frontier_phi_17_pred_3 = _1120;
                    frontier_phi_17_pred_4 = _1112;
                }
                _781 = frontier_phi_17_pred;
                _779 = frontier_phi_17_pred_1;
                _777 = frontier_phi_17_pred_2;
                _775 = frontier_phi_17_pred_3;
                _1515 = frontier_phi_17_pred_4;
                uint _1113 = _1515 + 1u;
                if (int(_1113) < int(_574))
                {
                    _1110 = _1111;
                    _1112 = _1113;
                    _1114 = _1115;
                    _1116 = _1117;
                    _1118 = _1119;
                    _1120 = _775;
                    _1121 = _777;
                    _1122 = _779;
                    _1123 = _781;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _774 = _775;
            _776 = _777;
            _778 = _779;
            _780 = _781;
        }
        else
        {
            _774 = 0.0;
            _776 = 0.0;
            _778 = 0.0;
            _780 = 0.0;
        }
        float _782 = _778 - _780;
        float _783 = _774 - _776;
        float _789 = 1.0 - (((_782 * _774) - (_778 * _783)) / (_782 - _783));
        float _790 = _789 * _328;
        float _791 = _789 * _331;
        float _365 = _306 - _790;
        float _368 = _307 - _791;
        float frontier_phi_3_8_ladder;
        float frontier_phi_3_8_ladder_1;
        if (_360 > 3.0)
        {
            float _1137 = _360 - trunc(_360);
            frontier_phi_3_8_ladder = (_1137 * _790) + _365;
            frontier_phi_3_8_ladder_1 = (_1137 * _791) + _368;
        }
        else
        {
            frontier_phi_3_8_ladder = _365;
            frontier_phi_3_8_ladder_1 = _368;
        }
        _363 = frontier_phi_3_8_ladder;
        _366 = frontier_phi_3_8_ladder_1;
    }
    float _373 = ((_363 - _306) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _374 = ((_366 - _307) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _387 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _373) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _374) + cbTextureTilingScale._m0[3u].w));
    float _392 = _387.x * cbMtdParam._m0[9u].x;
    float _393 = _387.y * cbMtdParam._m0[9u].y;
    float _394 = _387.z * cbMtdParam._m0[9u].z;
    vec4 _406 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _408 = _406.x;
    vec4 _420 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _373) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _374) + cbTextureTilingScale._m0[1u].w));
    float _424 = _420.z;
    float _429 = (_420.x * 2.0) + (-1.0);
    float _431 = (_420.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_429, _431), vec2(_429, _431));
    float _3836 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _438 = sqrt(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))));
    float _441 = fma(_438, _219, fma(_431, _212, _429 * _198));
    float _444 = fma(_438, _220, fma(_431, _213, _429 * _199));
    float _447 = fma(_438, _221, fma(_431, _214, _429 * _200));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _452 = _451 * _441;
    float _453 = _451 * _444;
    float _454 = _451 * _447;
    float _458 = cbMtdParam._m0[10u].x + _420.w;
    float _462 = inversesqrt(dot(vec3(_452, _453, _454), vec3(_452, _453, _454)));
    float _463 = _462 * _452;
    float _464 = _462 * _453;
    float _465 = _462 * _454;
    float _3847 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _466 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3869 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3880 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _3891 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3902 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _471 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _487 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _536 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _527);
    float _537 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _527);
    float _538 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _527);
    float _542 = inversesqrt(dot(vec3(_536, _537, _538), vec3(_536, _537, _538)));
    float _543 = _536 * _542;
    float _544 = _537 * _542;
    float _545 = _538 * _542;
    vec4 _550 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _552 = _550.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _750 = sqrt(((_536 * _536) + (_537 * _537)) + (_538 * _538));
        float _756 = (cbMatDynParam._m0[5u].x * _750) + cbMatDynParam._m0[5u].y;
        float _3913 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _761 = (cbMatDynParam._m0[5u].z * _750) + cbMatDynParam._m0[5u].w;
        float _3924 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) - _757)) + _757) < ((_552 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _586 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _587 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _607 = fma(_465, cbSceneParam._m0[5u].z, fma(_464, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _463));
    float _610 = fma(_465, cbSceneParam._m0[6u].z, fma(_464, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _463));
    float _613 = fma(_465, cbSceneParam._m0[7u].z, fma(_464, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _463));
    uint _626 = uint(roundEven(NORMAL.w)) * 13u;
    uint _628 = _626 + 9u;
    uint _629 = _628 + uint(cbMatDynParam._m0[0u].w);
    float _635 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * cbInstanceData._m0[_629].x;
    float _636 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_629].y;
    float _637 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_629].z;
    float _3935 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _641 = 1.0 - _471;
    float _642 = _638 * _641;
    float _643 = _639 * _641;
    float _644 = _640 * _641;
    float _649 = (_638 + (-0.039999999105930328369140625)) * _471;
    float _650 = (_639 + (-0.039999999105930328369140625)) * _471;
    float _651 = (_640 + (-0.039999999105930328369140625)) * _471;
    float _652 = _649 + 0.039999999105930328369140625;
    float _654 = _650 + 0.039999999105930328369140625;
    float _655 = _651 + 0.039999999105930328369140625;
    vec4 _664 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _586, cbSceneParam._m0[86u].y * _587));
    float _668 = ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * TEXCOORD.z) * _664.x;
    float _669 = dot(vec3(_463, _464, _465), vec3(_543, _544, _545));
    float _672 = _669 * 2.0;
    float _676 = (_672 * _463) - _543;
    float _677 = (_672 * _464) - _544;
    float _678 = (_672 * _465) - _545;
    float _682 = abs(dot(vec3(_543, _544, _545), vec3(_463, _464, _465)));
    float _3968 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _684 = sqrt(_466);
    float _696 = exp2((_684 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_684 * 3.0));
    float _702 = (1.0 - _696) * ((_684 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _703 = _696 * _684;
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1089;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _814 = fma(_739, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731));
        float _818 = fma(_739, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731));
        float _822 = fma(_739, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731));
        float _847 = _731 + _463;
        float _848 = _735 + _464;
        float _849 = _739 + _465;
        float _859 = fma(_849, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _847)) - _814;
        float _860 = fma(_849, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _847)) - _818;
        float _861 = fma(_849, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _847)) - _822;
        float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
        float _878 = ((_865 * _859) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_814 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_865 * _860) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_818 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_865 * _861) / cbModelParam._m0[34u].z) + ((((((_822 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        float _917 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_883.x + (-0.5));
        float _919 = _917 * (_883.y + (-0.5));
        float _920 = _917 * (_883.z + (-0.5));
        float _927 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_890.x + (-0.5));
        float _929 = _927 * (_890.y + (-0.5));
        float _930 = _927 * (_890.z + (-0.5));
        float _937 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_897.x + (-0.5));
        float _939 = _937 * (_897.y + (-0.5));
        float _940 = _937 * (_897.z + (-0.5));
        float _947 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_904.x + (-0.5));
        float _949 = _947 * (_904.y + (-0.5));
        float _950 = _947 * (_904.z + (-0.5));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = _918 * 0.5;
        float _955 = _928 * 0.5;
        float _956 = _938 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _971 = (dot(vec3(_463, _464, _465), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _981 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _4016 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_983 + 1.0))) + _988) * _951;
        float _998 = _919 * 0.5;
        float _999 = _929 * 0.5;
        float _1000 = _939 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_463, _464, _465), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _4049 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1025 + 1.0))) + _1030) * _952;
        float _1040 = _920 * 0.5;
        float _1041 = _930 * 0.5;
        float _1042 = _940 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_463, _464, _465), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _4082 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1067 + 1.0))) + _1072) * _953;
        _1089 = _920;
        _1091 = _919;
        _1092 = _918;
        _1093 = _930;
        _1094 = _929;
        _1095 = _928;
        _1096 = _940;
        _1097 = _939;
        _1098 = _938;
        _1099 = _953;
        _1100 = _952;
        _1101 = _951;
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
    }
    else
    {
        _1089 = _1090;
        _1091 = _1090;
        _1092 = _1090;
        _1093 = _1090;
        _1094 = _1090;
        _1095 = _1090;
        _1096 = _1090;
        _1097 = _1090;
        _1098 = _1090;
        _1099 = _1090;
        _1100 = _1090;
        _1101 = _1090;
        _1102 = 0.0;
        _1103 = 0.0;
        _1104 = 0.0;
    }
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1162 = fma(_739, cbModelParam._m0[30u].z, fma(_735, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _731));
        float _1166 = fma(_739, cbModelParam._m0[31u].z, fma(_735, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _731));
        float _1170 = fma(_739, cbModelParam._m0[32u].z, fma(_735, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _731));
        float _1193 = _731 + _463;
        float _1194 = _735 + _464;
        float _1195 = _739 + _465;
        float _1205 = fma(_1195, cbModelParam._m0[30u].z, fma(_1194, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1193)) - _1162;
        float _1206 = fma(_1195, cbModelParam._m0[31u].z, fma(_1194, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1193)) - _1166;
        float _1207 = fma(_1195, cbModelParam._m0[32u].z, fma(_1194, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1193)) - _1170;
        float _1211 = inversesqrt(dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207)));
        float _1224 = ((_1211 * _1205) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1162 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1211 * _1206) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1166 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1211 * _1207) / cbModelParam._m0[35u].z) + ((((((_1170 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        float _1261 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1228.x + (-0.5));
        float _1263 = _1261 * (_1228.y + (-0.5));
        float _1264 = _1261 * (_1228.z + (-0.5));
        float _1271 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1235.x + (-0.5));
        float _1273 = _1271 * (_1235.y + (-0.5));
        float _1274 = _1271 * (_1235.z + (-0.5));
        float _1281 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1242.x + (-0.5));
        float _1283 = _1281 * (_1242.y + (-0.5));
        float _1284 = _1281 * (_1242.z + (-0.5));
        float _1291 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1249.x + (-0.5));
        float _1293 = _1291 * (_1249.y + (-0.5));
        float _1294 = _1291 * (_1249.z + (-0.5));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = _1262 * 0.5;
        float _1299 = _1272 * 0.5;
        float _1300 = _1282 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_463, _464, _465), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4145 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1325 + 1.0))) + _1330) * _1295;
        float _1340 = _1263 * 0.5;
        float _1341 = _1273 * 0.5;
        float _1342 = _1283 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_463, _464, _465), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4178 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1367 + 1.0))) + _1372) * _1296;
        float _1382 = _1264 * 0.5;
        float _1383 = _1274 * 0.5;
        float _1384 = _1284 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_463, _464, _465), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4211 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1409 + 1.0))) + _1414) * _1297;
        _1431 = _1264;
        _1432 = _1263;
        _1433 = _1262;
        _1434 = _1274;
        _1435 = _1273;
        _1436 = _1272;
        _1437 = _1284;
        _1438 = _1283;
        _1439 = _1282;
        _1440 = _1297;
        _1441 = _1296;
        _1442 = _1295;
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
    }
    else
    {
        _1431 = _1090;
        _1432 = _1090;
        _1433 = _1090;
        _1434 = _1090;
        _1435 = _1090;
        _1436 = _1090;
        _1437 = _1090;
        _1438 = _1090;
        _1439 = _1090;
        _1440 = _1090;
        _1441 = _1090;
        _1442 = _1090;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1102)) + _1102;
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1103)) + _1103;
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1104)) + _1104;
    float _1478 = fma(_1457, cbSceneParam._m0[89u].z, fma(_1456, cbSceneParam._m0[89u].y, _1455 * cbSceneParam._m0[89u].x));
    float _1481 = fma(_1457, cbSceneParam._m0[90u].z, fma(_1456, cbSceneParam._m0[90u].y, _1455 * cbSceneParam._m0[90u].x));
    float _1484 = fma(_1457, cbSceneParam._m0[91u].z, fma(_1456, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1455));
    float _1499 = _676 * 0.5;
    float _1500 = _677 * 0.5;
    float _1501 = _678 * 0.5;
    float _1502 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1505 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1508 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1544;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1517 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1089, _1093, _1096, _1099));
        float _1521 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1525 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1532 = dot(vec4(cbModelParam._m0[39u]), vec4(_1499, _1500, _1501, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1555;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1546 = dot(vec4(cbModelParam._m0[40u]), vec4(_1499, _1500, _1501, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1546) ? 0.0 : (isnan(0.0) ? _1546 : max(0.0, _1546))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1559 = (_1555 * cbModelParam._m0[1u].x) + (_1544 * (1.0 - cbModelParam._m0[1u].x));
    float _1569 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _466);
    float _1570 = isnan(_1569) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1569 : min(cbModelParam._m0[25u].z, _1569));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1619 = fma(_739, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731)) + cbModelParam._m0[13u].w;
        float _1623 = fma(_739, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731)) + cbModelParam._m0[14u].w;
        float _1627 = fma(_739, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731)) + cbModelParam._m0[15u].w;
        float _1630 = fma(_678, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676));
        float _1633 = fma(_678, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676));
        float _1636 = fma(_678, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676));
        float _1664;
        if (_1630 > 0.0)
        {
            _1664 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_28_26_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_28_26_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_28_26_ladder = 5000.0;
            }
            _1664 = frontier_phi_28_26_ladder;
        }
        float _1840;
        if (_1633 > 0.0)
        {
            _1840 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1840 = frontier_phi_37_33_ladder;
        }
        float _2136;
        if (_1636 > 0.0)
        {
            _2136 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2136 = frontier_phi_49_44_ladder;
        }
        float _2138 = isnan(_1840) ? _1664 : (isnan(_1664) ? _1840 : min(_1664, _1840));
        float _2139 = isnan(_2136) ? _2138 : (isnan(_2138) ? _2136 : min(_2138, _2136));
        float _2143 = (_2139 * _1630) + _1619;
        float _2144 = (_2139 * _1633) + _1623;
        float _2145 = (_2139 * _1636) + _1627;
        float _2146 = _2139 * 9.9999997473787516355514526367188e-05;
        float _2148 = (-1.0) - _2146;
        float _2150 = _2146 + 1.0;
        float frontier_phi_27_49_ladder;
        float frontier_phi_27_49_ladder_1;
        float frontier_phi_27_49_ladder_2;
        if ((_2145 > _2150) || ((_2145 < _2148) || ((_2144 > _2150) || ((_2144 < _2148) || ((_2143 < _2148) || (_2143 > _2150))))))
        {
            frontier_phi_27_49_ladder = 0.0;
            frontier_phi_27_49_ladder_1 = 0.0;
            frontier_phi_27_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2290 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2145, cbModelParam._m0[9u].z, fma(_2144, cbModelParam._m0[9u].y, _2143 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2145, cbModelParam._m0[10u].z, fma(_2144, cbModelParam._m0[10u].y, _2143 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2145, cbModelParam._m0[11u].z, fma(_2144, cbModelParam._m0[11u].y, _2143 * cbModelParam._m0[11u].x))), _1570);
            frontier_phi_27_49_ladder = _2290.z * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_1 = _2290.y * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_2 = _2290.x * cbModelParam._m0[1u].y;
        }
        _1652 = frontier_phi_27_49_ladder_2;
        _1654 = frontier_phi_27_49_ladder_1;
        _1656 = frontier_phi_27_49_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_676, _677, _678), _1570);
        _1652 = _1640.x * cbModelParam._m0[1u].y;
        _1654 = _1640.y * cbModelParam._m0[1u].y;
        _1656 = _1640.z * cbModelParam._m0[1u].y;
    }
    float _1660 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _466);
    float _1661 = isnan(_1660) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1660 : min(cbModelParam._m0[25u].w, _1660));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1718 = fma(_739, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731)) + cbModelParam._m0[21u].w;
        float _1722 = fma(_739, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731)) + cbModelParam._m0[22u].w;
        float _1726 = fma(_739, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731)) + cbModelParam._m0[23u].w;
        float _1729 = fma(_678, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676));
        float _1732 = fma(_678, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676));
        float _1735 = fma(_678, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676));
        float _1845;
        if (_1729 > 0.0)
        {
            _1845 = abs((1.0 - _1718) / _1729);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1718 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1845 = frontier_phi_39_35_ladder;
        }
        float _2163;
        if (_1732 > 0.0)
        {
            _2163 = abs((1.0 - _1722) / _1732);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1722 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _2163 = frontier_phi_51_46_ladder;
        }
        float _2501;
        if (_1735 > 0.0)
        {
            _2501 = abs((1.0 - _1726) / _1735);
        }
        else
        {
            float frontier_phi_61_58_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_61_58_ladder = abs((_1726 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_61_58_ladder = 5000.0;
            }
            _2501 = frontier_phi_61_58_ladder;
        }
        float _2503 = isnan(_2163) ? _1845 : (isnan(_1845) ? _2163 : min(_1845, _2163));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _1729) + _1718;
        float _2509 = (_2504 * _1732) + _1722;
        float _2510 = (_2504 * _1735) + _1726;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2512 = (-1.0) - _2511;
        float _2514 = _2511 + 1.0;
        float frontier_phi_36_61_ladder;
        float frontier_phi_36_61_ladder_1;
        float frontier_phi_36_61_ladder_2;
        if ((_2510 > _2514) || ((_2510 < _2512) || ((_2509 > _2514) || ((_2509 < _2512) || ((_2508 < _2512) || (_2508 > _2514))))))
        {
            frontier_phi_36_61_ladder = 0.0;
            frontier_phi_36_61_ladder_1 = 0.0;
            frontier_phi_36_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2632 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2510, cbModelParam._m0[17u].z, fma(_2509, cbModelParam._m0[17u].y, _2508 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2510, cbModelParam._m0[18u].z, fma(_2509, cbModelParam._m0[18u].y, _2508 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2510, cbModelParam._m0[19u].z, fma(_2509, cbModelParam._m0[19u].y, _2508 * cbModelParam._m0[19u].x))), _1661);
            frontier_phi_36_61_ladder = _2632.z * cbModelParam._m0[1u].z;
            frontier_phi_36_61_ladder_1 = _2632.y * cbModelParam._m0[1u].z;
            frontier_phi_36_61_ladder_2 = _2632.x * cbModelParam._m0[1u].z;
        }
        _1754 = frontier_phi_36_61_ladder_2;
        _1756 = frontier_phi_36_61_ladder_1;
        _1758 = frontier_phi_36_61_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_676, _677, _678), _1661);
        _1754 = _1738.x * cbModelParam._m0[1u].z;
        _1756 = _1738.y * cbModelParam._m0[1u].z;
        _1758 = _1738.z * cbModelParam._m0[1u].z;
    }
    float _1771 = (((_702 * _652) + _703) * _668) * ((cbModelParam._m0[1u].w * (_1754 - _1652)) + _1652);
    float _1773 = (((_702 * _654) + _703) * _668) * ((cbModelParam._m0[1u].w * (_1756 - _1654)) + _1654);
    float _1775 = (((_702 * _655) + _703) * _668) * ((cbModelParam._m0[1u].w * (_1758 - _1656)) + _1656);
    float _1778 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, _1771 * cbSceneParam._m0[91u].x));
    float _1819 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1823 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1827 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1831 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1832 = _1819 / _1831;
    float _1833 = _1823 / _1831;
    float _1834 = _1827 / _1831;
    float _1981;
    float _1982;
    float _1983;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1861 = ((uint(_1834 > cbSceneParam._m0[59u].y) + uint(_1834 > cbSceneParam._m0[59u].x)) + uint(_1834 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1862 = _1861 + 43u;
        uint _1870 = _1861 + 44u;
        uint _1878 = _1861 + 45u;
        uint _1886 = _1861 + 46u;
        float _1897 = fma(_1831, cbSceneParam._m0[_1862].w, fma(_1827, cbSceneParam._m0[_1862].z, fma(_1823, cbSceneParam._m0[_1862].y, _1819 * cbSceneParam._m0[_1862].x)));
        float _1901 = fma(_1831, cbSceneParam._m0[_1870].w, fma(_1827, cbSceneParam._m0[_1870].z, fma(_1823, cbSceneParam._m0[_1870].y, _1819 * cbSceneParam._m0[_1870].x)));
        float _1909 = fma(_1831, cbSceneParam._m0[_1886].w, fma(_1827, cbSceneParam._m0[_1886].z, fma(_1823, cbSceneParam._m0[_1886].y, _1819 * cbSceneParam._m0[_1886].x)));
        float _1914 = cbSceneParam._m0[33u].z * _1909;
        float _1916 = cbSceneParam._m0[33u].w * _1909;
        float _1919 = fma(_1831, cbSceneParam._m0[_1878].w, fma(_1827, cbSceneParam._m0[_1878].z, fma(_1823, cbSceneParam._m0[_1878].y, _1819 * cbSceneParam._m0[_1878].x))) / _1909;
        float _1967 = (cbSceneParam._m0[33u].x - sqrt(((_1833 * _1833) + (_1832 * _1832)) + (_1834 * _1834))) * cbSceneParam._m0[33u].y;
        float _4337 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1974 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1914 + _1897) / _1909, (_1916 + _1901) / _1909), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1916 + _1897) / _1909, (_1901 - _1914) / _1909), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1897 - _1914) / _1909, (_1901 - _1916) / _1909), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1897 - _1916) / _1909, (_1914 + _1901) / _1909), _1919), 0.0)).x), vec4(0.25)));
        _1981 = 1.0 - (_1974 * cbSceneParam._m0[34u].x);
        _1982 = 1.0 - (_1974 * cbSceneParam._m0[34u].y);
        _1983 = 1.0 - (_1974 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1981 = 1.0;
        _1982 = 1.0;
        _1983 = 1.0;
    }
    float _2047;
    float _2049;
    float _2051;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2035 = fma(_1831, cbSceneParam._m0[63u].w, fma(_1827, cbSceneParam._m0[63u].z, fma(_1823, cbSceneParam._m0[63u].y, _1819 * cbSceneParam._m0[63u].x)));
        float _2036 = fma(_1831, cbSceneParam._m0[60u].w, fma(_1827, cbSceneParam._m0[60u].z, fma(_1823, cbSceneParam._m0[60u].y, _1819 * cbSceneParam._m0[60u].x))) / _2035;
        float _2037 = fma(_1831, cbSceneParam._m0[61u].w, fma(_1827, cbSceneParam._m0[61u].z, fma(_1823, cbSceneParam._m0[61u].y, _1819 * cbSceneParam._m0[61u].x))) / _2035;
        float frontier_phi_48_47_ladder;
        float frontier_phi_48_47_ladder_1;
        float frontier_phi_48_47_ladder_2;
        if ((((_2036 >= cbSceneParam._m0[64u].x) && (_2037 >= cbSceneParam._m0[64u].y)) && (_2036 <= cbSceneParam._m0[64u].z)) && (_2037 <= cbSceneParam._m0[64u].w))
        {
            float _2176 = fma(_1831, cbSceneParam._m0[62u].w, fma(_1827, cbSceneParam._m0[62u].z, fma(_1823, cbSceneParam._m0[62u].y, _1819 * cbSceneParam._m0[62u].x))) / _2035;
            float _2180 = isnan(cbSceneParam._m0[41u].w) ? _2176 : (isnan(_2176) ? cbSceneParam._m0[41u].w : max(_2176, cbSceneParam._m0[41u].w));
            float _2223 = (cbSceneParam._m0[33u].x - sqrt(((_1833 * _1833) + (_1832 * _1832)) + (_1834 * _1834))) * cbSceneParam._m0[33u].y;
            float _4353 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
            float _2230 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2036, cbSceneParam._m0[33u].w + _2037), _2180), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2036, _2037 - cbSceneParam._m0[33u].z), _2180), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2036 - cbSceneParam._m0[33u].z, _2037 - cbSceneParam._m0[33u].w), _2180), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2036 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2037), _2180), 0.0)).x), vec4(0.25)));
            float _2234 = 1.0 - (_2230 * cbSceneParam._m0[34u].x);
            float _2235 = 1.0 - (_2230 * cbSceneParam._m0[34u].y);
            float _2236 = 1.0 - (_2230 * cbSceneParam._m0[34u].z);
            frontier_phi_48_47_ladder = isnan(_2236) ? _1983 : (isnan(_1983) ? _2236 : min(_1983, _2236));
            frontier_phi_48_47_ladder_1 = isnan(_2235) ? _1982 : (isnan(_1982) ? _2235 : min(_1982, _2235));
            frontier_phi_48_47_ladder_2 = isnan(_2234) ? _1981 : (isnan(_1981) ? _2234 : min(_1981, _2234));
        }
        else
        {
            frontier_phi_48_47_ladder = _1983;
            frontier_phi_48_47_ladder_1 = _1982;
            frontier_phi_48_47_ladder_2 = _1981;
        }
        _2047 = frontier_phi_48_47_ladder_2;
        _2049 = frontier_phi_48_47_ladder_1;
        _2051 = frontier_phi_48_47_ladder;
    }
    else
    {
        _2047 = _1981;
        _2049 = _1982;
        _2051 = _1983;
    }
    uvec4 _2056 = floatBitsToUint(cbInstanceData._m0[_626 + 5u]);
    uint _2058 = _2056.x * 14u;
    uint _2059 = _2058 + 13u;
    float _2066 = _668 + (-1.0);
    float _2071 = (cbLight._m0[_2059].x * _2066) + 1.0;
    float _2072 = (cbLight._m0[_2059].y * _2066) + 1.0;
    float _2073 = (cbLight._m0[_2059].z * _2066) + 1.0;
    float _2074 = (cbLight._m0[_2059].w * _2066) + 1.0;
    uint _2075 = _2058 + 5u;
    float _2081 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2085 = _2058 + 4u;
    float _2095 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2099 = _2058 | 1u;
    float _2110 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_463, _464, _465));
    float _2113 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_463, _464, _465));
    float _4389 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _4400 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2118 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2120 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * 0.3183098733425140380859375;
    float _2127 = ((cbLight._m0[_2075].x * _2081) * _2120) + (((cbLight._m0[_2085].x * _2047) * _2095) * _2118);
    float _2128 = ((_2081 * cbLight._m0[_2075].y) * _2120) + (((cbLight._m0[_2085].y * _2049) * _2095) * _2118);
    float _2129 = ((_2081 * cbLight._m0[_2075].z) * _2120) + (((cbLight._m0[_2085].z * _2051) * _2095) * _2118);
    uvec4 _2133 = floatBitsToUint(cbLight._m0[_2058 + 12u]);
    bool _2135 = _2133.x == 0u;
    float _2237;
    float _2239;
    float _2241;
    if (_2135)
    {
        _2237 = _2127;
        _2239 = _2128;
        _2241 = _2129;
    }
    else
    {
        uint _2245 = _2058 + 6u;
        float _2261 = (dot(vec3(cbLight._m0[_2058 + 2u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _2262 = _2261 * _2261;
        float _4411 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2263 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2264 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2237 = (((cbLight._m0[_2245].x * 0.3183098733425140380859375) * _2263) * _2264) + _2127;
        _2239 = (((cbLight._m0[_2245].y * 0.3183098733425140380859375) * _2263) * _2264) + _2128;
        _2241 = (((cbLight._m0[_2245].z * 0.3183098733425140380859375) * _2263) * _2264) + _2129;
    }
    bool _2244 = _2133.y == 0u;
    float _2299;
    float _2301;
    float _2303;
    if (_2244)
    {
        _2299 = _2237;
        _2301 = _2239;
        _2303 = _2241;
    }
    else
    {
        uint _2472 = _2058 + 7u;
        float _2488 = (dot(vec3(cbLight._m0[_2058 + 3u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _2489 = _2488 * _2488;
        float _4427 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2490 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2491 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2299 = (((cbLight._m0[_2472].x * 0.3183098733425140380859375) * _2490) * _2491) + _2237;
        _2301 = (((cbLight._m0[_2472].y * 0.3183098733425140380859375) * _2490) * _2491) + _2239;
        _2303 = (((cbLight._m0[_2472].z * 0.3183098733425140380859375) * _2490) * _2491) + _2241;
    }
    uint _2306 = _2058 + 8u;
    float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _466) * 0.949999988079071044921875);
    float _2320 = _2319 * _2319;
    float _2321 = cbLight._m0[_2058].x + _543;
    float _2322 = cbLight._m0[_2058].y + _544;
    float _2323 = cbLight._m0[_2058].z + _545;
    float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
    float _2328 = _2327 * _2321;
    float _2329 = _2327 * _2322;
    float _2330 = _2327 * _2323;
    float _2331 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2058].xyz));
    float _4443 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _4454 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _2335 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2336 = dot(vec3(_463, _464, _465), vec3(_2328, _2329, _2330));
    float _4465 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2340 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2328, _2329, _2330));
    float _4476 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2344 = _2320 * _2320;
    float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
    float _2356 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
    float _2357 = 0.959999978542327880859375 - _649;
    float _2359 = 0.959999978542327880859375 - _650;
    float _2360 = 0.959999978542327880859375 - _651;
    float _2367 = 1.0 - _2320;
    float _2378 = (0.5 / (((_2335 * ((_2334 * _2367) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2367) + _2320) * _2334))) * _2334;
    float _4487 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2380 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
    uint _2394 = _2058 + 9u;
    float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _466) * 0.949999988079071044921875);
    float _2406 = _2405 * _2405;
    float _2407 = cbLight._m0[_2099].x + _543;
    float _2408 = cbLight._m0[_2099].y + _544;
    float _2409 = cbLight._m0[_2099].z + _545;
    float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
    float _2414 = _2413 * _2407;
    float _2415 = _2413 * _2408;
    float _2416 = _2413 * _2409;
    float _2417 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2099].xyz));
    float _4498 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2421 = dot(vec3(_463, _464, _465), vec3(_2414, _2415, _2416));
    float _4509 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2425 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2414, _2415, _2416));
    float _4520 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2429 = _2406 * _2406;
    float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
    float _2440 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
    float _2447 = 1.0 - _2406;
    float _2457 = (0.5 / (((_2335 * ((_2420 * _2447) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2447) + _2406) * _2420))) * _2420;
    float _4531 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2459 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
    float _2469 = (((((_2440 * _2357) + _652) * cbLight._m0[_2394].x) * _2459) * _2081) + ((((cbLight._m0[_2306].x * _2047) * ((_2356 * _2357) + _652)) * _2380) * _2095);
    float _2470 = (((((_2440 * _2359) + _654) * cbLight._m0[_2394].y) * _2459) * _2081) + ((((cbLight._m0[_2306].y * _2049) * ((_2356 * _2359) + _654)) * _2380) * _2095);
    float _2471 = (((((_2440 * _2360) + _655) * cbLight._m0[_2394].z) * _2459) * _2081) + ((((cbLight._m0[_2306].z * _2051) * ((_2356 * _2360) + _655)) * _2380) * _2095);
    float _2527;
    float _2529;
    float _2531;
    if (_2135)
    {
        _2527 = _2469;
        _2529 = _2470;
        _2531 = _2471;
    }
    else
    {
        uint _2533 = _2058 + 2u;
        uint _2537 = _2058 + 10u;
        float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2533].w)) * _466) * 0.949999988079071044921875);
        float _2552 = _2551 * _2551;
        float _2553 = cbLight._m0[_2533].x + _543;
        float _2554 = cbLight._m0[_2533].y + _544;
        float _2555 = cbLight._m0[_2533].z + _545;
        float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
        float _2560 = _2559 * _2553;
        float _2561 = _2559 * _2554;
        float _2562 = _2559 * _2555;
        float _2563 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2533].xyz));
        float _4542 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2567 = dot(vec3(_463, _464, _465), vec3(_2560, _2561, _2562));
        float _4553 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2571 = dot(vec3(cbLight._m0[_2533].xyz), vec3(_2560, _2561, _2562));
        float _4564 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2575 = _2552 * _2552;
        float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
        float _2586 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
        float _2593 = 1.0 - _2552;
        float _2603 = (0.5 / (((_2335 * ((_2566 * _2593) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2593) + _2552) * _2566))) * _2566;
        float _4575 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2605 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
        float _2606 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2527 = (((((_2586 * _2357) + _652) * cbLight._m0[_2537].x) * _2605) * _2606) + _2469;
        _2529 = (((((_2586 * _2359) + _654) * cbLight._m0[_2537].y) * _2605) * _2606) + _2470;
        _2531 = (((((_2586 * _2360) + _655) * cbLight._m0[_2537].z) * _2605) * _2606) + _2471;
    }
    float _2637;
    float _2639;
    float _2641;
    if (_2244)
    {
        _2637 = _2527;
        _2639 = _2529;
        _2641 = _2531;
    }
    else
    {
        uint _2648 = _2058 + 3u;
        uint _2652 = _2058 + 11u;
        float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2648].w)) * _466) * 0.949999988079071044921875);
        float _2667 = _2666 * _2666;
        float _2668 = cbLight._m0[_2648].x + _543;
        float _2669 = cbLight._m0[_2648].y + _544;
        float _2670 = cbLight._m0[_2648].z + _545;
        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
        float _2675 = _2674 * _2668;
        float _2676 = _2674 * _2669;
        float _2677 = _2674 * _2670;
        float _2678 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2648].xyz));
        float _4591 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2682 = dot(vec3(_463, _464, _465), vec3(_2675, _2676, _2677));
        float _4602 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2686 = dot(vec3(cbLight._m0[_2648].xyz), vec3(_2675, _2676, _2677));
        float _4613 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2690 = _2667 * _2667;
        float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
        float _2701 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
        float _2708 = 1.0 - _2667;
        float _2718 = (0.5 / (((_2335 * ((_2681 * _2708) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2335 * _2708) + _2667) * _2681))) * _2681;
        float _4624 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2720 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
        float _2721 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2637 = (((((_2701 * _2357) + _652) * cbLight._m0[_2652].x) * _2720) * _2721) + _2527;
        _2639 = (((((_2701 * _2359) + _654) * cbLight._m0[_2652].y) * _2720) * _2721) + _2529;
        _2641 = (((((_2701 * _2360) + _655) * cbLight._m0[_2652].z) * _2720) * _2721) + _2531;
    }
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_2056.y == 0u)
    {
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.x;
        uint _2754 = uint((float(_2742.y) * floor(float(uint(cbSceneParam._m0[85u].y * _587) / _2743))) + floor(float(uint(cbSceneParam._m0[85u].x * _586) / _2743)));
        float _2764 = (log2(_1834 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2765 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        uint _2768 = uint(isnan(14.0) ? _2765 : (isnan(_2765) ? 14.0 : min(_2765, 14.0)));
        uvec4 _2773 = texelFetch(g_lightClusterGridBuffer, int(((_2768 << 2u) + (_2754 << 6u)) >> 2u));
        uint _2774 = _2773.x;
        uint _2775 = _2742.z;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        if (((((1u << ((_2775 >> 4u) & 15u)) + 4294967295u) & _2774) == 0u) || ((_2775 & 240u) == 0u))
        {
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
        }
        else
        {
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            uint _3011 = 0u;
            uint _3020;
            bool _3021;
            for (;;)
            {
                _3020 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3011 << 2u)) >> 2u)).x;
                _3021 = _3020 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_3021)
                {
                    frontier_phi_82_pred = _3010;
                    frontier_phi_82_pred_1 = _3009;
                    frontier_phi_82_pred_2 = _3008;
                    frontier_phi_82_pred_3 = _3007;
                    frontier_phi_82_pred_4 = _3006;
                    frontier_phi_82_pred_5 = _3005;
                }
                else
                {
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    uint _3156;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3020;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    for (;;)
                    {
                        uint _3160 = uint(findLSB(_3156)) + (_3011 << 5u);
                        uint _3157 = (_3156 + 4294967295u) & _3156;
                        uint _3162 = _3160 * 48u;
                        vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 3u)).x));
                        uint _3182 = (_3160 * 48u) + 4u;
                        vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 3u)).x));
                        uint _3201 = (_3160 * 48u) + 8u;
                        vec3 _3212 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x));
                        float _3216 = _3176.x - _1832;
                        float _3217 = _3176.y - _1833;
                        float _3218 = _3176.z - _1834;
                        float _3219 = dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218));
                        float _3222 = inversesqrt(_3219);
                        float _3223 = _3222 * _3216;
                        float _3224 = _3222 * _3217;
                        float _3225 = _3222 * _3218;
                        float _3226 = dot(vec3(_607, _610, _613), vec3(_3223, _3224, _3225));
                        float _3231 = 1.0 - (_3219 * _3176.w);
                        float _4650 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3232 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3233 = sqrt(_3219) * _3195.w;
                        float _3236 = 1.39999997615814208984375 / (_3233 + 1.39999997615814208984375);
                        float _3237 = _3236 * _3236;
                        float _3240 = ((1.0 - _3237) * _3226) + _3237;
                        float _3243 = _3233 * _3233;
                        float _3247 = ((isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))) * _3232) / ((_3243 * 0.699999988079071044921875) + 1.0);
                        float _3251 = (-0.0) - _1832;
                        float _3252 = (-0.0) - _1833;
                        float _3253 = (-0.0) - _1834;
                        float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                        float _3258 = _3257 * _3251;
                        float _3259 = _3257 * _3252;
                        float _3260 = _3257 * _3253;
                        float _3267 = exp2(log2(1.0 / ((_3243 * 3.5) + 5.0)) * 0.25);
                        float _3268 = 1.0 - _684;
                        float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                        float _3276 = _3275 * _3275;
                        float _3277 = _3276 * _3276;
                        float _3278 = _3258 + _3223;
                        float _3279 = _3259 + _3224;
                        float _3280 = _3260 + _3225;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3288 = dot(vec3(_607, _610, _613), vec3(_3258, _3259, _3260));
                        float _4666 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3291 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3292 = dot(vec3(_607, _610, _613), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                        float _4677 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3295 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                        float _3300 = _3236 * _3276;
                        float _3301 = _3300 * _3300;
                        float _3304 = ((1.0 - _3301) * _3226) + _3301;
                        float _4688 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3306 = 1.0 - _3276;
                        float _3316 = (0.5 / (((_3305 * ((_3291 * _3306) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3305 * _3306) + _3276) * _3291))) * _3305;
                        float _4699 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3327 = (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) / ((_3299 * _3299) * ((_3243 * 2.1991131305694580078125) + 3.141590118408203125))) * _3232;
                        _3080 = (_3247 * _3195.x) + _3153;
                        _3081 = (_3247 * _3195.y) + _3154;
                        _3082 = (_3247 * _3195.z) + _3155;
                        _3077 = (_3327 * _3212.x) + _3150;
                        _3078 = (_3327 * _3212.y) + _3151;
                        _3079 = (_3327 * _3212.z) + _3152;
                        if (_3157 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3157;
                        }
                    }
                    frontier_phi_82_pred = _3082;
                    frontier_phi_82_pred_1 = _3081;
                    frontier_phi_82_pred_2 = _3080;
                    frontier_phi_82_pred_3 = _3079;
                    frontier_phi_82_pred_4 = _3078;
                    frontier_phi_82_pred_5 = _3077;
                }
                _2864 = frontier_phi_82_pred;
                _2862 = frontier_phi_82_pred_1;
                _2860 = frontier_phi_82_pred_2;
                _2858 = frontier_phi_82_pred_3;
                _2856 = frontier_phi_82_pred_4;
                _2854 = frontier_phi_82_pred_5;
                uint _3012 = _3011 + 1u;
                if (_3012 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3005 = _2854;
                    _3006 = _2856;
                    _3007 = _2858;
                    _3008 = _2860;
                    _3009 = _2862;
                    _3010 = _2864;
                    _3011 = _3012;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
        }
        uvec4 _2867 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2868 = _2867.z;
        uint _2870 = (_2868 >> 8u) & 15u;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        if (((4294967295u << _2870) & _2774) == 0u)
        {
            _2973 = _2853;
            _2975 = _2855;
            _2977 = _2857;
            _2979 = _2859;
            _2981 = _2861;
            _2983 = _2863;
        }
        else
        {
            float _2998 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
            float _2999 = _2998 * _1832;
            float _3000 = _2998 * _1833;
            float _3001 = _2998 * _1834;
            float frontier_phi_74_75_ladder;
            float frontier_phi_74_75_ladder_1;
            float frontier_phi_74_75_ladder_2;
            float frontier_phi_74_75_ladder_3;
            float frontier_phi_74_75_ladder_4;
            float frontier_phi_74_75_ladder_5;
            if (_2870 < ((_2868 >> 12u) & 15u))
            {
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _3133 = _2853;
                float _3134 = _2855;
                float _3135 = _2857;
                float _3136 = _2859;
                float _3137 = _2861;
                float _3138 = _2863;
                uint _3139 = _2870;
                uint _3148;
                bool _3149;
                for (;;)
                {
                    _3148 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3139 << 2u)) >> 2u)).x;
                    _3149 = _3148 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_3149)
                    {
                        frontier_phi_93_pred = _3134;
                        frontier_phi_93_pred_1 = _3138;
                        frontier_phi_93_pred_2 = _3137;
                        frontier_phi_93_pred_3 = _3136;
                        frontier_phi_93_pred_4 = _3135;
                        frontier_phi_93_pred_5 = _3133;
                    }
                    else
                    {
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3354 = _3133;
                        float _3355 = _3134;
                        float _3356 = _3135;
                        float _3357 = _3136;
                        float _3358 = _3137;
                        float _3359 = _3138;
                        uint _3360 = _3148;
                        uint _3361;
                        vec4 _3386;
                        float _3387;
                        vec4 _3402;
                        vec3 _3414;
                        vec4 _3430;
                        vec4 _3446;
                        float _3493;
                        bool _3494;
                        for (;;)
                        {
                            uint _3371 = ((_3139 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3360));
                            _3361 = (_3360 + 4294967295u) & _3360;
                            uint _3373 = _3371 * 40u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            _3387 = _3386.w;
                            uint _3389 = (_3371 * 40u) + 4u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3404 = (_3371 * 40u) + 8u;
                            _3414 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x));
                            uint _3417 = (_3371 * 40u) + 16u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3433 = (_3371 * 40u) + 20u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3449 = (_3371 * 40u) + 24u;
                            vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3468 = (_3371 * 40u) + 28u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            _3493 = fma(_1834, _3481.z, fma(_1833, _3481.y, _3481.x * _1832)) + _3481.w;
                            _3494 = !((fma(_1834, _3462.z, fma(_1833, _3462.y, _3462.x * _1832)) + _3462.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3494)
                            {
                                float _3521 = _3386.x - _1832;
                                float _3522 = _3386.y - _1833;
                                float _3523 = _3386.z - _1834;
                                float _3524 = dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523));
                                float _3527 = inversesqrt(_3524);
                                float _3528 = _3527 * _3521;
                                float _3529 = _3527 * _3522;
                                float _3530 = _3527 * _3523;
                                float _3534 = 1.0 - (_3524 / (_3387 * _3387));
                                float _4710 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3539 = sqrt(_3524) * _3402.w;
                                float _3541 = 1.39999997615814208984375 / (_3539 + 1.39999997615814208984375);
                                float _3542 = _3541 * _3541;
                                float _3545 = ((1.0 - _3542) * dot(vec3(_3528, _3529, _3530), vec3(_607, _610, _613))) + _3542;
                                float _3548 = _3539 * _3539;
                                float _3552 = (fma(_1834, _3430.z, fma(_1833, _3430.y, _3430.x * _1832)) + _3430.w) / _3493;
                                float _3553 = (fma(_1834, _3446.z, fma(_1833, _3446.y, _3446.x * _1832)) + _3446.w) / _3493;
                                float _3557 = 1.0 - dot(vec2(_3552, _3553), vec2(_3552, _3553));
                                float _4726 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3559 = _3558 * (((isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0))) * _3535) / ((_3548 * 0.699999988079071044921875) + 1.0));
                                float _3571 = exp2(log2(1.0 / ((_3548 * 3.5) + 5.0)) * 0.25);
                                float _3572 = 1.0 - _684;
                                float _3579 = sqrt(1.0 - ((1.0 - (_3572 * _3572)) * (1.0 - (_3571 * _3571))));
                                float _3580 = _3579 * _3579;
                                float _3581 = _3580 * _3580;
                                float _3582 = _3528 - _2999;
                                float _3583 = _3529 - _3000;
                                float _3584 = _3530 - _3001;
                                float _3588 = inversesqrt(dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584)));
                                float _3592 = dot(vec3(_607, _610, _613), vec3((-0.0) - _2999, (-0.0) - _3000, (-0.0) - _3001));
                                float _4737 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3595 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3596 = dot(vec3(_607, _610, _613), vec3(_3588 * _3582, _3588 * _3583, _3588 * _3584));
                                float _4748 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3599 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3603 = ((_3599 * _3599) * (_3581 + (-1.0))) + 1.0;
                                float _3604 = _3541 * _3580;
                                float _3605 = _3604 * _3604;
                                float _3611 = ((1.0 - _3605) * dot(vec3(_607, _610, _613), vec3(_3528, _3529, _3530))) + _3605;
                                float _4759 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3613 = 1.0 - _3580;
                                float _3623 = (0.5 / (((_3612 * ((_3595 * _3613) + _3580)) + 9.9999999392252902907785028219223e-09) + (((_3612 * _3613) + _3580) * _3595))) * _3612;
                                float _4770 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3633 = (_3558 * _3535) * (((_3581 * 3.1415927410125732421875) * (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) / ((_3603 * _3603) * ((_3548 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3633 * _3414.x;
                                frontier_phi_99_pred_1 = _3559 * _3402.z;
                                frontier_phi_99_pred_2 = _3559 * _3402.y;
                                frontier_phi_99_pred_3 = _3559 * _3402.x;
                                frontier_phi_99_pred_4 = _3633 * _3414.z;
                                frontier_phi_99_pred_5 = _3633 * _3414.y;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3637 = frontier_phi_99_pred;
                            _3642 = frontier_phi_99_pred_1;
                            _3641 = frontier_phi_99_pred_2;
                            _3640 = frontier_phi_99_pred_3;
                            _3639 = frontier_phi_99_pred_4;
                            _3638 = frontier_phi_99_pred_5;
                            _3344 = _3640 + _3357;
                            _3345 = _3641 + _3358;
                            _3346 = _3642 + _3359;
                            _3341 = _3637 + _3354;
                            _3342 = _3638 + _3355;
                            _3343 = _3639 + _3356;
                            if (_3361 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3361;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _3342;
                        frontier_phi_93_pred_1 = _3346;
                        frontier_phi_93_pred_2 = _3345;
                        frontier_phi_93_pred_3 = _3344;
                        frontier_phi_93_pred_4 = _3343;
                        frontier_phi_93_pred_5 = _3341;
                    }
                    _2976 = frontier_phi_93_pred;
                    _2984 = frontier_phi_93_pred_1;
                    _2982 = frontier_phi_93_pred_2;
                    _2980 = frontier_phi_93_pred_3;
                    _2978 = frontier_phi_93_pred_4;
                    _2974 = frontier_phi_93_pred_5;
                    uint _3140 = _3139 + 1u;
                    if (_3140 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3133 = _2974;
                        _3134 = _2976;
                        _3135 = _2978;
                        _3136 = _2980;
                        _3137 = _2982;
                        _3138 = _2984;
                        _3139 = _3140;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_74_75_ladder = _2984;
                frontier_phi_74_75_ladder_1 = _2982;
                frontier_phi_74_75_ladder_2 = _2980;
                frontier_phi_74_75_ladder_3 = _2978;
                frontier_phi_74_75_ladder_4 = _2976;
                frontier_phi_74_75_ladder_5 = _2974;
            }
            else
            {
                frontier_phi_74_75_ladder = _2863;
                frontier_phi_74_75_ladder_1 = _2861;
                frontier_phi_74_75_ladder_2 = _2859;
                frontier_phi_74_75_ladder_3 = _2857;
                frontier_phi_74_75_ladder_4 = _2855;
                frontier_phi_74_75_ladder_5 = _2853;
            }
            _2973 = frontier_phi_74_75_ladder_5;
            _2975 = frontier_phi_74_75_ladder_4;
            _2977 = frontier_phi_74_75_ladder_3;
            _2979 = frontier_phi_74_75_ladder_2;
            _2981 = frontier_phi_74_75_ladder_1;
            _2983 = frontier_phi_74_75_ladder;
        }
        float _2988 = isnan(1.0) ? _668 : (isnan(_668) ? 1.0 : min(_668, 1.0));
        _2786 = (_2988 * _2979) + _2299;
        _2788 = (_2988 * _2981) + _2301;
        _2790 = (_2988 * _2983) + _2303;
        _2792 = ((_2973 * _652) * _2988) + _2637;
        _2794 = ((_2975 * _654) * _2988) + _2639;
        _2796 = ((_2977 * _655) * _2988) + _2641;
    }
    else
    {
        _2786 = _2299;
        _2788 = _2301;
        _2790 = _2303;
        _2792 = _2637;
        _2794 = _2639;
        _2796 = _2641;
    }
    float _4786 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4797 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4808 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _2813 = ((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2786 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _668))) + ((_2792 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1559)) * cbPerFrame._m0[3u].x);
    float _2814 = ((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2788 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _668))) + ((_2794 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1559)) * cbPerFrame._m0[3u].x);
    float _2815 = ((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2790 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _668))) + ((_2796 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1559)) * cbPerFrame._m0[3u].x);
    uint _2816 = _626 + 6u;
    float _2824 = _586 / cbSceneParam._m0[86u].x;
    float _2825 = _587 / cbSceneParam._m0[86u].y;
    vec4 _2839 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2824, _2825, (log2((isnan(cbSceneParam._m0[77u].w) ? _487 : (isnan(_487) ? cbSceneParam._m0[77u].w : min(_487, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2841 = _2839.x;
    float _2842 = _2839.y;
    float _2843 = _2839.z;
    float _2844 = _2839.w;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    if (_487 > cbSceneParam._m0[78u].w)
    {
        float _2878 = isnan(_487) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _487 : min(cbSceneParam._m0[80u].w, _487));
        float _2879 = _2878 / _487;
        float _2890 = _2879 * _536;
        float _2891 = _537 * _2879;
        float _2892 = (-0.0) - _2891;
        float _2893 = _2879 * _538;
        float _2895 = (cbSceneParam._m0[77u].w * _2892) / _2878;
        float _2896 = _2895 + cbSceneParam._m0[79u].w;
        float _2897 = cbSceneParam._m0[79u].w - _2891;
        float _2903 = sqrt(((_2890 * _2890) + (_2891 * _2891)) + (_2893 * _2893));
        float _2906 = (1.0 - (cbSceneParam._m0[77u].w / _2878)) * _2903;
        float _2911 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2913 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3090;
        if (abs((_2892 - _2895) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3090 = ((((_2896 > 0.0) ? exp2(_2911 * _2896) : (2.0 - exp2(_2913 * _2896))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2906;
        }
        else
        {
            float _3034 = 1.0 / cbSceneParam._m0[80u].x;
            float _3035 = isnan(_2897) ? _2896 : (isnan(_2896) ? _2897 : max(_2896, _2897));
            float _3036 = isnan(_2897) ? _2896 : (isnan(_2896) ? _2897 : min(_2896, _2897));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            float _3046 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : min(_3036, 0.0));
            _3090 = ((abs(_2903 / _2892) * cbSceneParam._m0[80u].y) * ((((_3045 - _3046) * 2.0) - ((exp2(_2911 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0)))) - exp2(_2911 * (isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))))) * _3034)) - ((exp2(_2913 * _3045) - exp2(_2913 * _3046)) * _3034))) + (_2906 * cbSceneParam._m0[80u].z);
        }
        vec4 _3092 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2824, _2825, 1.0), 0.0);
        float _3101 = exp2((_3090 * (-1.44269502162933349609375)) * (1.0 - _3092.w));
        float _3102 = log2(_3101);
        float _3118 = log2(_2844);
        _2915 = (exp2(_3118 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3102 * cbSceneParam._m0[78u].x)) * _3092.x) / cbSceneParam._m0[78u].x)) + _2841;
        _2917 = (exp2(_3118 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3102 * cbSceneParam._m0[78u].y)) * _3092.y) / cbSceneParam._m0[78u].y)) + _2842;
        _2919 = (exp2(_3118 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3102 * cbSceneParam._m0[78u].z)) * _3092.z) / cbSceneParam._m0[78u].z)) + _2843;
        _2921 = _3101 * _2844;
    }
    else
    {
        _2915 = _2841;
        _2917 = _2842;
        _2919 = _2843;
        _2921 = _2844;
    }
    bool _3128;
    vec4 _2931;
    vec4 _2953;
    float _2955;
    float _2959;
    float _2960;
    float _2961;
    float _2962;
    bool _2972;
    for (;;)
    {
        _2931 = cbMatDynParam._m0[0u];
        float _2933 = roundEven(_2931.y);
        bool _2934 = _2933 == 3.0;
        float _2935 = log2(_2921);
        float _2942 = exp2(_2935 * cbSceneParam._m0[78u].x) * _2813;
        float _2943 = exp2(_2935 * cbSceneParam._m0[78u].y) * _2814;
        float _2944 = exp2(_2935 * cbSceneParam._m0[78u].z) * _2815;
        float _2951 = _552 + (-0.5);
        _2953 = cbMtdParam._m0[1u];
        _2955 = _2953.y * _2951;
        float _2958 = (_2933 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2959 = _2958 * (_2934 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2915)));
        _2960 = _2958 * (_2934 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2917)));
        _2961 = _2958 * (_2934 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2919)));
        _2962 = _2951 * 0.999000012874603271484375;
        _2972 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2972)
        {
            if ((cbInstanceData._m0[_626 + 7u].x + _2962) < 0.5)
            {
                _3128 = true;
                break;
            }
        }
        uint _3069 = _628 + uint(_2931.w);
        if ((cbInstanceData._m0[_3069].w < 1.0) && ((cbInstanceData._m0[_3069].w + _2962) < 0.5))
        {
            _3128 = true;
            break;
        }
        if ((_2955 + 1.0) < _2953.x)
        {
            _3128 = true;
            break;
        }
        _3128 = false;
        break;
    }
    float _3332;
    if (_3128)
    {
        discard_state = true;
        _3332 = 0.0;
    }
    else
    {
        _3332 = cbInstanceData._m0[_2816].w;
    }
    SV_Target.x = _2959;
    SV_Target.y = _2960;
    SV_Target.z = _2961;
    SV_Target.w = _3332;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2816].w;
    discard_exit();
}


