#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1086;
float _3527;
float _3528;
float _3529;
float _3530;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _282 = dot(vec3(_271, _272, _273), vec3(_194, _195, _196));
    float _285 = dot(vec3(_271, _272, _273), vec3(_208, _209, _210));
    float _288 = dot(vec3(_271, _272, _273), vec3(_215, _216, _217));
    float _291 = (-0.0) - _282;
    float _292 = (-0.0) - _285;
    float _302 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _303 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _304 = (-0.0) - _271;
    float _305 = (-0.0) - _272;
    float _306 = (-0.0) - _273;
    float _311 = inversesqrt(dot(vec2(_291, _292), vec2(_291, _292)));
    float _315 = _288 * _288;
    float _317 = sqrt(((_285 * _285) + (_282 * _282)) + _315);
    float _321 = sqrt((_317 * _317) - _315) / ((-0.0) - _288);
    float _324 = ((cbMtdParam._m0[10u].y * _291) * _311) * _321;
    float _327 = ((cbMtdParam._m0[10u].y * _292) * _311) * _321;
    float _331 = inversesqrt(dot(vec3(_304, _305, _306), vec3(_304, _305, _306)));
    float _335 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _336 = dFdxCoarse(_302);
    float _337 = dFdxCoarse(_303);
    float _338 = dFdyCoarse(_302);
    float _339 = dFdyCoarse(_303);
    uvec2 _347 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _351 = float(_347.y) * (abs(_339) + abs(_337));
    float _353 = float(_347.x) * (abs(_338) + abs(_336));
    float _355 = log2(isnan(_351) ? _353 : (isnan(_353) ? _351 : max(_353, _351)));
    float _356 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _359;
    float _362;
    if (!(_356 <= 4.0))
    {
        _359 = _302;
        _362 = _303;
    }
    else
    {
        uint _570 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_331 * _304, _331 * _305, _331 * _306), vec3(_335 * _215, _335 * _216, _335 * _217))) * 12.0)))), int(32u)));
        float _573 = 1.0 / float(int(_570));
        float _574 = _573 * _324;
        float _575 = _573 * _327;
        float _770;
        float _772;
        float _774;
        float _776;
        if (int(_570) > int(0u))
        {
            float _771;
            float _773;
            float _775;
            float _777;
            uint _1511;
            float _1106 = 1.0;
            uint _1108 = 0u;
            float _1110 = _302;
            float _1112 = _303;
            float _1114 = 1.0;
            float _1116 = 0.0;
            float _1117 = 0.0;
            float _1118 = 0.0;
            float _1119 = 0.0;
            float _1107;
            float _1111;
            float _1113;
            float _1115;
            bool _1131;
            for (;;)
            {
                _1111 = _1110 - _574;
                _1113 = _1112 - _575;
                _1107 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_1111, _1113), vec2(_336, _337), vec2(_338, _339))), vec4(1.0, 0.0, 0.0, 0.0));
                _1115 = _1114 - _573;
                _1131 = _1107 > _1115;
                float frontier_phi_17_pred;
                float frontier_phi_17_pred_1;
                float frontier_phi_17_pred_2;
                float frontier_phi_17_pred_3;
                uint frontier_phi_17_pred_4;
                if (_1131)
                {
                    frontier_phi_17_pred = _1106;
                    frontier_phi_17_pred_1 = _1114;
                    frontier_phi_17_pred_2 = _1107;
                    frontier_phi_17_pred_3 = _1115;
                    frontier_phi_17_pred_4 = _570;
                }
                else
                {
                    frontier_phi_17_pred = _1119;
                    frontier_phi_17_pred_1 = _1118;
                    frontier_phi_17_pred_2 = _1117;
                    frontier_phi_17_pred_3 = _1116;
                    frontier_phi_17_pred_4 = _1108;
                }
                _777 = frontier_phi_17_pred;
                _775 = frontier_phi_17_pred_1;
                _773 = frontier_phi_17_pred_2;
                _771 = frontier_phi_17_pred_3;
                _1511 = frontier_phi_17_pred_4;
                uint _1109 = _1511 + 1u;
                if (int(_1109) < int(_570))
                {
                    _1106 = _1107;
                    _1108 = _1109;
                    _1110 = _1111;
                    _1112 = _1113;
                    _1114 = _1115;
                    _1116 = _771;
                    _1117 = _773;
                    _1118 = _775;
                    _1119 = _777;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _770 = _771;
            _772 = _773;
            _774 = _775;
            _776 = _777;
        }
        else
        {
            _770 = 0.0;
            _772 = 0.0;
            _774 = 0.0;
            _776 = 0.0;
        }
        float _778 = _774 - _776;
        float _779 = _770 - _772;
        float _785 = 1.0 - (((_778 * _770) - (_774 * _779)) / (_778 - _779));
        float _786 = _785 * _324;
        float _787 = _785 * _327;
        float _361 = _302 - _786;
        float _364 = _303 - _787;
        float frontier_phi_3_8_ladder;
        float frontier_phi_3_8_ladder_1;
        if (_356 > 3.0)
        {
            float _1133 = _356 - trunc(_356);
            frontier_phi_3_8_ladder = (_1133 * _786) + _361;
            frontier_phi_3_8_ladder_1 = (_1133 * _787) + _364;
        }
        else
        {
            frontier_phi_3_8_ladder = _361;
            frontier_phi_3_8_ladder_1 = _364;
        }
        _359 = frontier_phi_3_8_ladder;
        _362 = frontier_phi_3_8_ladder_1;
    }
    float _369 = ((_359 - _302) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _370 = ((_362 - _303) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _383 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _369) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _370) + cbTextureTilingScale._m0[3u].w));
    float _388 = _383.x * cbMtdParam._m0[9u].x;
    float _389 = _383.y * cbMtdParam._m0[9u].y;
    float _390 = _383.z * cbMtdParam._m0[9u].z;
    vec4 _402 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _404 = _402.x;
    vec4 _416 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _369) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _370) + cbTextureTilingScale._m0[1u].w));
    float _420 = _416.z;
    float _425 = (_416.x * 2.0) + (-1.0);
    float _427 = (_416.y * 2.0) + (-1.0);
    float _428 = dot(vec2(_425, _427), vec2(_425, _427));
    float _3549 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _434 = sqrt(1.0 - (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))));
    float _437 = fma(_434, _215, fma(_427, _208, _425 * _194));
    float _440 = fma(_434, _216, fma(_427, _209, _425 * _195));
    float _443 = fma(_434, _217, fma(_427, _210, _425 * _196));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    float _454 = cbMtdParam._m0[10u].x + _416.w;
    float _458 = inversesqrt(dot(vec3(_448, _449, _450), vec3(_448, _449, _450)));
    float _459 = _458 * _448;
    float _460 = _458 * _449;
    float _461 = _458 * _450;
    float _3560 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _462 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3582 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3593 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3604 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3615 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _467 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _483 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _532 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _523);
    float _533 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _523);
    float _534 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _523);
    float _538 = inversesqrt(dot(vec3(_532, _533, _534), vec3(_532, _533, _534)));
    float _539 = _532 * _538;
    float _540 = _533 * _538;
    float _541 = _534 * _538;
    vec4 _546 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _548 = _546.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _746 = sqrt(((_532 * _532) + (_533 * _533)) + (_534 * _534));
        float _752 = (cbMatDynParam._m0[5u].x * _746) + cbMatDynParam._m0[5u].y;
        float _3626 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _757 = (cbMatDynParam._m0[5u].z * _746) + cbMatDynParam._m0[5u].w;
        float _3637 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) - _753)) + _753) < ((_548 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _582 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _583 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _603 = fma(_461, cbSceneParam._m0[5u].z, fma(_460, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _459));
    float _606 = fma(_461, cbSceneParam._m0[6u].z, fma(_460, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _459));
    float _609 = fma(_461, cbSceneParam._m0[7u].z, fma(_460, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _459));
    uint _622 = uint(roundEven(NORMAL.w)) * 13u;
    uint _624 = _622 + 9u;
    uint _625 = _624 + uint(cbMatDynParam._m0[0u].w);
    float _631 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_625].x;
    float _632 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_625].y;
    float _633 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_625].z;
    float _3648 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _637 = 1.0 - _467;
    float _638 = _634 * _637;
    float _639 = _635 * _637;
    float _640 = _636 * _637;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _467;
    float _646 = (_635 + (-0.039999999105930328369140625)) * _467;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _467;
    float _648 = _645 + 0.039999999105930328369140625;
    float _650 = _646 + 0.039999999105930328369140625;
    float _651 = _647 + 0.039999999105930328369140625;
    vec4 _660 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _582, cbSceneParam._m0[86u].y * _583));
    float _664 = ((isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * TEXCOORD.z) * _660.x;
    float _665 = dot(vec3(_459, _460, _461), vec3(_539, _540, _541));
    float _668 = _665 * 2.0;
    float _672 = (_668 * _459) - _539;
    float _673 = (_668 * _460) - _540;
    float _674 = (_668 * _461) - _541;
    float _678 = abs(dot(vec3(_539, _540, _541), vec3(_459, _460, _461)));
    float _3681 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _680 = sqrt(_462);
    float _692 = exp2((_680 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_680 * 3.0));
    float _698 = (1.0 - _692) * ((_680 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _699 = _692 * _680;
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1085;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _810 = fma(_735, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _727));
        float _814 = fma(_735, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _727));
        float _818 = fma(_735, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _727));
        float _843 = _727 + _459;
        float _844 = _731 + _460;
        float _845 = _735 + _461;
        float _855 = fma(_845, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _843)) - _810;
        float _856 = fma(_845, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _843)) - _814;
        float _857 = fma(_845, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _843)) - _818;
        float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
        float _874 = ((_861 * _855) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_810 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_861 * _856) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_814 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_861 * _857) / cbModelParam._m0[34u].z) + ((((((_818 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        float _913 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_879.x + (-0.5));
        float _915 = _913 * (_879.y + (-0.5));
        float _916 = _913 * (_879.z + (-0.5));
        float _923 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_886.x + (-0.5));
        float _925 = _923 * (_886.y + (-0.5));
        float _926 = _923 * (_886.z + (-0.5));
        float _933 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_893.x + (-0.5));
        float _935 = _933 * (_893.y + (-0.5));
        float _936 = _933 * (_893.z + (-0.5));
        float _943 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_900.x + (-0.5));
        float _945 = _943 * (_900.y + (-0.5));
        float _946 = _943 * (_900.z + (-0.5));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = _914 * 0.5;
        float _951 = _924 * 0.5;
        float _952 = _934 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _967 = (dot(vec3(_459, _460, _461), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _977 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3729 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_979 + 1.0))) + _984) * _947;
        float _994 = _915 * 0.5;
        float _995 = _925 * 0.5;
        float _996 = _935 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_459, _460, _461), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3762 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1021 + 1.0))) + _1026) * _948;
        float _1036 = _916 * 0.5;
        float _1037 = _926 * 0.5;
        float _1038 = _936 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_459, _460, _461), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3795 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1063 + 1.0))) + _1068) * _949;
        _1085 = _916;
        _1087 = _915;
        _1088 = _914;
        _1089 = _926;
        _1090 = _925;
        _1091 = _924;
        _1092 = _936;
        _1093 = _935;
        _1094 = _934;
        _1095 = _949;
        _1096 = _948;
        _1097 = _947;
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
    }
    else
    {
        _1085 = _1086;
        _1087 = _1086;
        _1088 = _1086;
        _1089 = _1086;
        _1090 = _1086;
        _1091 = _1086;
        _1092 = _1086;
        _1093 = _1086;
        _1094 = _1086;
        _1095 = _1086;
        _1096 = _1086;
        _1097 = _1086;
        _1098 = 0.0;
        _1099 = 0.0;
        _1100 = 0.0;
    }
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1158 = fma(_735, cbModelParam._m0[30u].z, fma(_731, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _727));
        float _1162 = fma(_735, cbModelParam._m0[31u].z, fma(_731, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _727));
        float _1166 = fma(_735, cbModelParam._m0[32u].z, fma(_731, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _727));
        float _1189 = _727 + _459;
        float _1190 = _731 + _460;
        float _1191 = _735 + _461;
        float _1201 = fma(_1191, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1189)) - _1158;
        float _1202 = fma(_1191, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1189)) - _1162;
        float _1203 = fma(_1191, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1189)) - _1166;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1158 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1162 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[35u].z) + ((((((_1166 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1257 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1224.x + (-0.5));
        float _1259 = _1257 * (_1224.y + (-0.5));
        float _1260 = _1257 * (_1224.z + (-0.5));
        float _1267 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1231.x + (-0.5));
        float _1269 = _1267 * (_1231.y + (-0.5));
        float _1270 = _1267 * (_1231.z + (-0.5));
        float _1277 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1238.x + (-0.5));
        float _1279 = _1277 * (_1238.y + (-0.5));
        float _1280 = _1277 * (_1238.z + (-0.5));
        float _1287 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1245.x + (-0.5));
        float _1289 = _1287 * (_1245.y + (-0.5));
        float _1290 = _1287 * (_1245.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_459, _460, _461), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3858 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1321 + 1.0))) + _1326) * _1291;
        float _1336 = _1259 * 0.5;
        float _1337 = _1269 * 0.5;
        float _1338 = _1279 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_459, _460, _461), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _3891 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1363 + 1.0))) + _1368) * _1292;
        float _1378 = _1260 * 0.5;
        float _1379 = _1270 * 0.5;
        float _1380 = _1280 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_459, _460, _461), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _3924 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1405 + 1.0))) + _1410) * _1293;
        _1427 = _1260;
        _1428 = _1259;
        _1429 = _1258;
        _1430 = _1270;
        _1431 = _1269;
        _1432 = _1268;
        _1433 = _1280;
        _1434 = _1279;
        _1435 = _1278;
        _1436 = _1293;
        _1437 = _1292;
        _1438 = _1291;
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1086;
        _1428 = _1086;
        _1429 = _1086;
        _1430 = _1086;
        _1431 = _1086;
        _1432 = _1086;
        _1433 = _1086;
        _1434 = _1086;
        _1435 = _1086;
        _1436 = _1086;
        _1437 = _1086;
        _1438 = _1086;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1098)) + _1098;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1099)) + _1099;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1100)) + _1100;
    float _1474 = fma(_1453, cbSceneParam._m0[89u].z, fma(_1452, cbSceneParam._m0[89u].y, _1451 * cbSceneParam._m0[89u].x));
    float _1477 = fma(_1453, cbSceneParam._m0[90u].z, fma(_1452, cbSceneParam._m0[90u].y, _1451 * cbSceneParam._m0[90u].x));
    float _1480 = fma(_1453, cbSceneParam._m0[91u].z, fma(_1452, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1451));
    float _1495 = _672 * 0.5;
    float _1496 = _673 * 0.5;
    float _1497 = _674 * 0.5;
    float _1498 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1501 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1504 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1540;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1513 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1085, _1089, _1092, _1095));
        float _1517 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1087, _1090, _1093, _1096));
        float _1521 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1088, _1091, _1094, _1097));
        float _1528 = dot(vec4(cbModelParam._m0[39u]), vec4(_1495, _1496, _1497, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1528) ? 0.0 : (isnan(0.0) ? _1528 : max(0.0, _1528))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1551;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1542 = dot(vec4(cbModelParam._m0[40u]), vec4(_1495, _1496, _1497, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1555 = (_1551 * cbModelParam._m0[1u].x) + (_1540 * (1.0 - cbModelParam._m0[1u].x));
    float _1565 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _462);
    float _1566 = isnan(_1565) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1565 : min(cbModelParam._m0[25u].z, _1565));
    float _1648;
    float _1650;
    float _1652;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1615 = fma(_735, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727)) + cbModelParam._m0[13u].w;
        float _1619 = fma(_735, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727)) + cbModelParam._m0[14u].w;
        float _1623 = fma(_735, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727)) + cbModelParam._m0[15u].w;
        float _1626 = fma(_674, cbModelParam._m0[13u].z, fma(_673, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _672));
        float _1629 = fma(_674, cbModelParam._m0[14u].z, fma(_673, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _672));
        float _1632 = fma(_674, cbModelParam._m0[15u].z, fma(_673, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _672));
        float _1660;
        if (_1626 > 0.0)
        {
            _1660 = abs((1.0 - _1615) / _1626);
        }
        else
        {
            float frontier_phi_28_26_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_28_26_ladder = abs((_1615 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_28_26_ladder = 5000.0;
            }
            _1660 = frontier_phi_28_26_ladder;
        }
        float _1868;
        if (_1629 > 0.0)
        {
            _1868 = abs((1.0 - _1619) / _1629);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1619 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1868 = frontier_phi_37_33_ladder;
        }
        float _2122;
        if (_1632 > 0.0)
        {
            _2122 = abs((1.0 - _1623) / _1632);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1623 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2122 = frontier_phi_49_44_ladder;
        }
        float _2124 = isnan(_1868) ? _1660 : (isnan(_1660) ? _1868 : min(_1660, _1868));
        float _2125 = isnan(_2122) ? _2124 : (isnan(_2124) ? _2122 : min(_2124, _2122));
        float _2129 = (_2125 * _1626) + _1615;
        float _2130 = (_2125 * _1629) + _1619;
        float _2131 = (_2125 * _1632) + _1623;
        float _2132 = _2125 * 9.9999997473787516355514526367188e-05;
        float _2134 = (-1.0) - _2132;
        float _2136 = _2132 + 1.0;
        float frontier_phi_27_49_ladder;
        float frontier_phi_27_49_ladder_1;
        float frontier_phi_27_49_ladder_2;
        if ((_2131 > _2136) || ((_2131 < _2134) || ((_2130 > _2136) || ((_2130 < _2134) || ((_2129 < _2134) || (_2129 > _2136))))))
        {
            frontier_phi_27_49_ladder = 0.0;
            frontier_phi_27_49_ladder_1 = 0.0;
            frontier_phi_27_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2259 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2131, cbModelParam._m0[9u].z, fma(_2130, cbModelParam._m0[9u].y, _2129 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2131, cbModelParam._m0[10u].z, fma(_2130, cbModelParam._m0[10u].y, _2129 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2131, cbModelParam._m0[11u].z, fma(_2130, cbModelParam._m0[11u].y, _2129 * cbModelParam._m0[11u].x))), _1566);
            frontier_phi_27_49_ladder = _2259.z * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_1 = _2259.y * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_2 = _2259.x * cbModelParam._m0[1u].y;
        }
        _1648 = frontier_phi_27_49_ladder_2;
        _1650 = frontier_phi_27_49_ladder_1;
        _1652 = frontier_phi_27_49_ladder;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_672, _673, _674), _1566);
        _1648 = _1636.x * cbModelParam._m0[1u].y;
        _1650 = _1636.y * cbModelParam._m0[1u].y;
        _1652 = _1636.z * cbModelParam._m0[1u].y;
    }
    float _1656 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _462);
    float _1657 = isnan(_1656) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1656 : min(cbModelParam._m0[25u].w, _1656));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1714 = fma(_735, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727)) + cbModelParam._m0[21u].w;
        float _1718 = fma(_735, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727)) + cbModelParam._m0[22u].w;
        float _1722 = fma(_735, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727)) + cbModelParam._m0[23u].w;
        float _1725 = fma(_674, cbModelParam._m0[21u].z, fma(_673, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _672));
        float _1728 = fma(_674, cbModelParam._m0[22u].z, fma(_673, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _672));
        float _1731 = fma(_674, cbModelParam._m0[23u].z, fma(_673, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _672));
        float _1873;
        if (_1725 > 0.0)
        {
            _1873 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1873 = frontier_phi_39_35_ladder;
        }
        float _2149;
        if (_1728 > 0.0)
        {
            _2149 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _2149 = frontier_phi_51_46_ladder;
        }
        float _2362;
        if (_1731 > 0.0)
        {
            _2362 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_60_57_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_60_57_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_60_57_ladder = 5000.0;
            }
            _2362 = frontier_phi_60_57_ladder;
        }
        float _2364 = isnan(_2149) ? _1873 : (isnan(_1873) ? _2149 : min(_1873, _2149));
        float _2365 = isnan(_2362) ? _2364 : (isnan(_2364) ? _2362 : min(_2364, _2362));
        float _2369 = (_2365 * _1725) + _1714;
        float _2370 = (_2365 * _1728) + _1718;
        float _2371 = (_2365 * _1731) + _1722;
        float _2372 = _2365 * 9.9999997473787516355514526367188e-05;
        float _2373 = (-1.0) - _2372;
        float _2375 = _2372 + 1.0;
        float frontier_phi_36_60_ladder;
        float frontier_phi_36_60_ladder_1;
        float frontier_phi_36_60_ladder_2;
        if ((_2371 > _2375) || ((_2371 < _2373) || ((_2370 > _2375) || ((_2370 < _2373) || ((_2369 < _2373) || (_2369 > _2375))))))
        {
            frontier_phi_36_60_ladder = 0.0;
            frontier_phi_36_60_ladder_1 = 0.0;
            frontier_phi_36_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2371, cbModelParam._m0[17u].z, fma(_2370, cbModelParam._m0[17u].y, _2369 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2371, cbModelParam._m0[18u].z, fma(_2370, cbModelParam._m0[18u].y, _2369 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2371, cbModelParam._m0[19u].z, fma(_2370, cbModelParam._m0[19u].y, _2369 * cbModelParam._m0[19u].x))), _1657);
            frontier_phi_36_60_ladder = _2569.z * cbModelParam._m0[1u].z;
            frontier_phi_36_60_ladder_1 = _2569.y * cbModelParam._m0[1u].z;
            frontier_phi_36_60_ladder_2 = _2569.x * cbModelParam._m0[1u].z;
        }
        _1750 = frontier_phi_36_60_ladder_2;
        _1752 = frontier_phi_36_60_ladder_1;
        _1754 = frontier_phi_36_60_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_672, _673, _674), _1657);
        _1750 = _1734.x * cbModelParam._m0[1u].z;
        _1752 = _1734.y * cbModelParam._m0[1u].z;
        _1754 = _1734.z * cbModelParam._m0[1u].z;
    }
    float _1767 = (((_698 * _648) + _699) * _664) * ((cbModelParam._m0[1u].w * (_1750 - _1648)) + _1648);
    float _1769 = (((_698 * _650) + _699) * _664) * ((cbModelParam._m0[1u].w * (_1752 - _1650)) + _1650);
    float _1771 = (((_698 * _651) + _699) * _664) * ((cbModelParam._m0[1u].w * (_1754 - _1652)) + _1652);
    float _1774 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, _1767 * cbSceneParam._m0[91u].x));
    uvec4 _1790 = floatBitsToUint(cbInstanceData._m0[_622 + 5u]);
    uint _1792 = _1790.x * 14u;
    uint _1793 = _1792 + 13u;
    float _1800 = _664 + (-1.0);
    float _1805 = (cbLight._m0[_1793].x * _1800) + 1.0;
    float _1806 = (cbLight._m0[_1793].y * _1800) + 1.0;
    float _1807 = (cbLight._m0[_1793].z * _1800) + 1.0;
    float _1808 = (cbLight._m0[_1793].w * _1800) + 1.0;
    uint _1809 = _1792 + 5u;
    float _1815 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1819 = _1792 + 4u;
    float _1826 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1830 = _1792 | 1u;
    float _1841 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_459, _460, _461));
    float _1844 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_459, _460, _461));
    float _4060 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _4071 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1849 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1851 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 0.3183098733425140380859375;
    float _1858 = ((cbLight._m0[_1809].x * _1815) * _1851) + ((cbLight._m0[_1819].x * _1826) * _1849);
    float _1859 = ((_1815 * cbLight._m0[_1809].y) * _1851) + ((_1826 * cbLight._m0[_1819].y) * _1849);
    float _1860 = ((_1815 * cbLight._m0[_1809].z) * _1851) + ((_1826 * cbLight._m0[_1819].z) * _1849);
    uvec4 _1865 = floatBitsToUint(cbLight._m0[_1792 + 12u]);
    bool _1867 = _1865.x == 0u;
    float _1878;
    float _1880;
    float _1882;
    if (_1867)
    {
        _1878 = _1858;
        _1880 = _1859;
        _1882 = _1860;
    }
    else
    {
        uint _1886 = _1792 + 6u;
        float _1902 = (dot(vec3(cbLight._m0[_1792 + 2u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _1903 = _1902 * _1902;
        float _4082 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1904 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1905 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _1878 = (((cbLight._m0[_1886].x * 0.3183098733425140380859375) * _1904) * _1905) + _1858;
        _1880 = (((cbLight._m0[_1886].y * 0.3183098733425140380859375) * _1904) * _1905) + _1859;
        _1882 = (((cbLight._m0[_1886].z * 0.3183098733425140380859375) * _1904) * _1905) + _1860;
    }
    bool _1885 = _1865.y == 0u;
    float _1923;
    float _1925;
    float _1927;
    if (_1885)
    {
        _1923 = _1878;
        _1925 = _1880;
        _1927 = _1882;
    }
    else
    {
        uint _2093 = _1792 + 7u;
        float _2109 = (dot(vec3(cbLight._m0[_1792 + 3u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _2110 = _2109 * _2109;
        float _4098 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2111 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2112 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _1923 = (((cbLight._m0[_2093].x * 0.3183098733425140380859375) * _2111) * _2112) + _1878;
        _1925 = (((cbLight._m0[_2093].y * 0.3183098733425140380859375) * _2111) * _2112) + _1880;
        _1927 = (((cbLight._m0[_2093].z * 0.3183098733425140380859375) * _2111) * _2112) + _1882;
    }
    uint _1930 = _1792 + 8u;
    float _1943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1792].w)) * _462) * 0.949999988079071044921875);
    float _1944 = _1943 * _1943;
    float _1945 = cbLight._m0[_1792].x + _539;
    float _1946 = cbLight._m0[_1792].y + _540;
    float _1947 = cbLight._m0[_1792].z + _541;
    float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
    float _1952 = _1951 * _1945;
    float _1953 = _1951 * _1946;
    float _1954 = _1951 * _1947;
    float _1955 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1792].xyz));
    float _4114 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _1959 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _1960 = dot(vec3(_459, _460, _461), vec3(_1952, _1953, _1954));
    float _4136 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1963 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _1964 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_1952, _1953, _1954));
    float _4147 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1968 = _1944 * _1944;
    float _1972 = ((_1963 * _1963) * (_1968 + (-1.0))) + 1.0;
    float _1980 = exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0);
    float _1981 = 0.959999978542327880859375 - _645;
    float _1983 = 0.959999978542327880859375 - _646;
    float _1984 = 0.959999978542327880859375 - _647;
    float _1991 = 1.0 - _1944;
    float _2002 = (0.5 / (((_1959 * ((_1958 * _1991) + _1944)) + 9.9999999392252902907785028219223e-09) + (((_1959 * _1991) + _1944) * _1958))) * _1958;
    float _4158 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1968 / ((_1972 * _1972) * 3.141590118408203125));
    uint _2015 = _1792 + 9u;
    float _2026 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _462) * 0.949999988079071044921875);
    float _2027 = _2026 * _2026;
    float _2028 = cbLight._m0[_1830].x + _539;
    float _2029 = cbLight._m0[_1830].y + _540;
    float _2030 = cbLight._m0[_1830].z + _541;
    float _2034 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
    float _2035 = _2034 * _2028;
    float _2036 = _2034 * _2029;
    float _2037 = _2034 * _2030;
    float _2038 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1830].xyz));
    float _4169 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2042 = dot(vec3(_459, _460, _461), vec3(_2035, _2036, _2037));
    float _4180 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2046 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_2035, _2036, _2037));
    float _4191 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2050 = _2027 * _2027;
    float _2054 = ((_2045 * _2045) * (_2050 + (-1.0))) + 1.0;
    float _2061 = exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0);
    float _2068 = 1.0 - _2027;
    float _2078 = (0.5 / (((_1959 * ((_2041 * _2068) + _2027)) + 9.9999999392252902907785028219223e-09) + (((_1959 * _2068) + _2027) * _2041))) * _2041;
    float _4202 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2080 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2050 / ((_2054 * _2054) * 3.141590118408203125));
    float _2090 = (((((_2061 * _1981) + _648) * cbLight._m0[_2015].x) * _2080) * _1815) + (((((_1980 * _1981) + _648) * cbLight._m0[_1930].x) * _2004) * _1826);
    float _2091 = (((((_2061 * _1983) + _650) * cbLight._m0[_2015].y) * _2080) * _1815) + (((((_1980 * _1983) + _650) * cbLight._m0[_1930].y) * _2004) * _1826);
    float _2092 = (((((_2061 * _1984) + _651) * cbLight._m0[_2015].z) * _2080) * _1815) + (((((_1980 * _1984) + _651) * cbLight._m0[_1930].z) * _2004) * _1826);
    float _2154;
    float _2156;
    float _2158;
    if (_1867)
    {
        _2154 = _2090;
        _2156 = _2091;
        _2158 = _2092;
    }
    else
    {
        uint _2160 = _1792 + 2u;
        uint _2164 = _1792 + 10u;
        float _2178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _462) * 0.949999988079071044921875);
        float _2179 = _2178 * _2178;
        float _2180 = cbLight._m0[_2160].x + _539;
        float _2181 = cbLight._m0[_2160].y + _540;
        float _2182 = cbLight._m0[_2160].z + _541;
        float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
        float _2187 = _2186 * _2180;
        float _2188 = _2186 * _2181;
        float _2189 = _2186 * _2182;
        float _2190 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2160].xyz));
        float _4213 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2193 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2194 = dot(vec3(_459, _460, _461), vec3(_2187, _2188, _2189));
        float _4224 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2197 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2198 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2187, _2188, _2189));
        float _4235 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2202 = _2179 * _2179;
        float _2206 = ((_2197 * _2197) * (_2202 + (-1.0))) + 1.0;
        float _2213 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
        float _2220 = 1.0 - _2179;
        float _2230 = (0.5 / (((_1959 * ((_2193 * _2220) + _2179)) + 9.9999999392252902907785028219223e-09) + (((_1959 * _2220) + _2179) * _2193))) * _2193;
        float _4246 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2232 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2202 / ((_2206 * _2206) * 3.141590118408203125));
        float _2233 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2154 = (((((_2213 * _1981) + _648) * cbLight._m0[_2164].x) * _2232) * _2233) + _2090;
        _2156 = (((((_2213 * _1983) + _650) * cbLight._m0[_2164].y) * _2232) * _2233) + _2091;
        _2158 = (((((_2213 * _1984) + _651) * cbLight._m0[_2164].z) * _2232) * _2233) + _2092;
    }
    float _2268;
    float _2270;
    float _2272;
    if (_1885)
    {
        _2268 = _2154;
        _2270 = _2156;
        _2272 = _2158;
    }
    else
    {
        uint _2279 = _1792 + 3u;
        uint _2283 = _1792 + 11u;
        float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _462) * 0.949999988079071044921875);
        float _2298 = _2297 * _2297;
        float _2299 = cbLight._m0[_2279].x + _539;
        float _2300 = cbLight._m0[_2279].y + _540;
        float _2301 = cbLight._m0[_2279].z + _541;
        float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
        float _2306 = _2305 * _2299;
        float _2307 = _2305 * _2300;
        float _2308 = _2305 * _2301;
        float _2309 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2279].xyz));
        float _4262 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2313 = dot(vec3(_459, _460, _461), vec3(_2306, _2307, _2308));
        float _4273 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2317 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2306, _2307, _2308));
        float _4284 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2321 = _2298 * _2298;
        float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
        float _2332 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
        float _2339 = 1.0 - _2298;
        float _2349 = (0.5 / (((_1959 * ((_2312 * _2339) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_1959 * _2339) + _2298) * _2312))) * _2312;
        float _4295 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2351 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
        float _2352 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2268 = (((((_2332 * _1981) + _648) * cbLight._m0[_2283].x) * _2351) * _2352) + _2154;
        _2270 = (((((_2332 * _1983) + _650) * cbLight._m0[_2283].y) * _2351) * _2352) + _2156;
        _2272 = (((((_2332 * _1984) + _651) * cbLight._m0[_2283].z) * _2351) * _2352) + _2158;
    }
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    if (_1790.y == 0u)
    {
        float _2427 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2427;
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2427;
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2427;
        uvec4 _2442 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2443 = _2442.x;
        uint _2454 = uint((float(_2442.y) * floor(float(uint(cbSceneParam._m0[85u].y * _583) / _2443))) + floor(float(uint(cbSceneParam._m0[85u].x * _582) / _2443)));
        float _2464 = (log2(_2430 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2465 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        uint _2468 = uint(isnan(14.0) ? _2465 : (isnan(_2465) ? 14.0 : min(_2465, 14.0)));
        uvec4 _2473 = texelFetch(g_lightClusterGridBuffer, int(((_2468 << 2u) + (_2454 << 6u)) >> 2u));
        uint _2474 = _2473.x;
        uint _2475 = _2442.z;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        if (((((1u << ((_2475 >> 4u) & 15u)) + 4294967295u) & _2474) == 0u) || ((_2475 & 240u) == 0u))
        {
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
        }
        else
        {
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            uint _2732 = 0u;
            uint _2741;
            bool _2742;
            for (;;)
            {
                _2741 = texelFetch(g_lightClassification, int((((_2468 << 5u) + (_2454 << 9u)) + (_2732 << 2u)) >> 2u)).x;
                _2742 = _2741 == 0u;
                float frontier_phi_77_pred;
                float frontier_phi_77_pred_1;
                float frontier_phi_77_pred_2;
                float frontier_phi_77_pred_3;
                float frontier_phi_77_pred_4;
                float frontier_phi_77_pred_5;
                if (_2742)
                {
                    frontier_phi_77_pred = _2731;
                    frontier_phi_77_pred_1 = _2730;
                    frontier_phi_77_pred_2 = _2729;
                    frontier_phi_77_pred_3 = _2728;
                    frontier_phi_77_pred_4 = _2727;
                    frontier_phi_77_pred_5 = _2726;
                }
                else
                {
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    uint _2877;
                    _2871 = _2726;
                    _2872 = _2727;
                    _2873 = _2728;
                    _2874 = _2729;
                    _2875 = _2730;
                    _2876 = _2731;
                    _2877 = _2741;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    for (;;)
                    {
                        uint _2881 = uint(findLSB(_2877)) + (_2732 << 5u);
                        uint _2878 = (_2877 + 4294967295u) & _2877;
                        uint _2883 = _2881 * 48u;
                        vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 3u)).x));
                        uint _2903 = (_2881 * 48u) + 4u;
                        vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 3u)).x));
                        uint _2922 = (_2881 * 48u) + 8u;
                        vec3 _2933 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x));
                        float _2937 = _2897.x - _2428;
                        float _2938 = _2897.y - _2429;
                        float _2939 = _2897.z - _2430;
                        float _2940 = dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939));
                        float _2943 = inversesqrt(_2940);
                        float _2944 = _2943 * _2937;
                        float _2945 = _2943 * _2938;
                        float _2946 = _2943 * _2939;
                        float _2947 = dot(vec3(_603, _606, _609), vec3(_2944, _2945, _2946));
                        float _2952 = 1.0 - (_2940 * _2897.w);
                        float _4321 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2953 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _2954 = sqrt(_2940) * _2916.w;
                        float _2957 = 1.39999997615814208984375 / (_2954 + 1.39999997615814208984375);
                        float _2958 = _2957 * _2957;
                        float _2961 = ((1.0 - _2958) * _2947) + _2958;
                        float _2964 = _2954 * _2954;
                        float _2968 = ((isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))) * _2953) / ((_2964 * 0.699999988079071044921875) + 1.0);
                        float _2972 = (-0.0) - _2428;
                        float _2973 = (-0.0) - _2429;
                        float _2974 = (-0.0) - _2430;
                        float _2978 = inversesqrt(dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974)));
                        float _2979 = _2978 * _2972;
                        float _2980 = _2978 * _2973;
                        float _2981 = _2978 * _2974;
                        float _2989 = exp2(log2(1.0 / ((_2964 * 3.5) + 5.0)) * 0.25);
                        float _2990 = 1.0 - _680;
                        float _2997 = sqrt(1.0 - ((1.0 - (_2990 * _2990)) * (1.0 - (_2989 * _2989))));
                        float _2998 = _2997 * _2997;
                        float _2999 = _2998 * _2998;
                        float _3000 = _2979 + _2944;
                        float _3001 = _2980 + _2945;
                        float _3002 = _2981 + _2946;
                        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                        float _3010 = dot(vec3(_603, _606, _609), vec3(_2979, _2980, _2981));
                        float _4337 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3013 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3014 = dot(vec3(_603, _606, _609), vec3(_3006 * _3000, _3006 * _3001, _3006 * _3002));
                        float _4348 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3017 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3021 = ((_3017 * _3017) * (_2999 + (-1.0))) + 1.0;
                        float _3022 = _2957 * _2998;
                        float _3023 = _3022 * _3022;
                        float _3026 = ((1.0 - _3023) * _2947) + _3023;
                        float _4359 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3027 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3028 = 1.0 - _2998;
                        float _3038 = (0.5 / (((_3027 * ((_3013 * _3028) + _2998)) + 9.9999999392252902907785028219223e-09) + (((_3027 * _3028) + _2998) * _3013))) * _3027;
                        float _4370 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3049 = (((_2999 * 3.1415927410125732421875) * (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) / ((_3021 * _3021) * ((_2964 * 2.1991131305694580078125) + 3.141590118408203125))) * _2953;
                        _2801 = (_2968 * _2916.x) + _2874;
                        _2802 = (_2968 * _2916.y) + _2875;
                        _2803 = (_2968 * _2916.z) + _2876;
                        _2798 = (_3049 * _2933.x) + _2871;
                        _2799 = (_3049 * _2933.y) + _2872;
                        _2800 = (_3049 * _2933.z) + _2873;
                        if (_2878 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2871 = _2798;
                            _2872 = _2799;
                            _2873 = _2800;
                            _2874 = _2801;
                            _2875 = _2802;
                            _2876 = _2803;
                            _2877 = _2878;
                        }
                    }
                    frontier_phi_77_pred = _2803;
                    frontier_phi_77_pred_1 = _2802;
                    frontier_phi_77_pred_2 = _2801;
                    frontier_phi_77_pred_3 = _2800;
                    frontier_phi_77_pred_4 = _2799;
                    frontier_phi_77_pred_5 = _2798;
                }
                _2585 = frontier_phi_77_pred;
                _2583 = frontier_phi_77_pred_1;
                _2581 = frontier_phi_77_pred_2;
                _2579 = frontier_phi_77_pred_3;
                _2577 = frontier_phi_77_pred_4;
                _2575 = frontier_phi_77_pred_5;
                uint _2733 = _2732 + 1u;
                if (_2733 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2726 = _2575;
                    _2727 = _2577;
                    _2728 = _2579;
                    _2729 = _2581;
                    _2730 = _2583;
                    _2731 = _2585;
                    _2732 = _2733;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
        }
        uvec4 _2588 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2589 = _2588.z;
        uint _2591 = (_2589 >> 8u) & 15u;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        if (((4294967295u << _2591) & _2474) == 0u)
        {
            _2694 = _2574;
            _2696 = _2576;
            _2698 = _2578;
            _2700 = _2580;
            _2702 = _2582;
            _2704 = _2584;
        }
        else
        {
            float _2719 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
            float _2720 = _2719 * _2428;
            float _2721 = _2719 * _2429;
            float _2722 = _2719 * _2430;
            float frontier_phi_69_70_ladder;
            float frontier_phi_69_70_ladder_1;
            float frontier_phi_69_70_ladder_2;
            float frontier_phi_69_70_ladder_3;
            float frontier_phi_69_70_ladder_4;
            float frontier_phi_69_70_ladder_5;
            if (_2591 < ((_2589 >> 12u) & 15u))
            {
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2703;
                float _2705;
                float _2854 = _2574;
                float _2855 = _2576;
                float _2856 = _2578;
                float _2857 = _2580;
                float _2858 = _2582;
                float _2859 = _2584;
                uint _2860 = _2591;
                uint _2869;
                bool _2870;
                for (;;)
                {
                    _2869 = texelFetch(g_lightClassification, int((((_2468 << 5u) + (_2454 << 9u)) + (_2860 << 2u)) >> 2u)).x;
                    _2870 = _2869 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2870)
                    {
                        frontier_phi_88_pred = _2859;
                        frontier_phi_88_pred_1 = _2858;
                        frontier_phi_88_pred_2 = _2857;
                        frontier_phi_88_pred_3 = _2856;
                        frontier_phi_88_pred_4 = _2855;
                        frontier_phi_88_pred_5 = _2854;
                    }
                    else
                    {
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3076 = _2854;
                        float _3077 = _2855;
                        float _3078 = _2856;
                        float _3079 = _2857;
                        float _3080 = _2858;
                        float _3081 = _2859;
                        uint _3082 = _2869;
                        uint _3083;
                        vec4 _3108;
                        float _3109;
                        vec4 _3124;
                        vec3 _3136;
                        vec4 _3152;
                        vec4 _3168;
                        float _3215;
                        bool _3216;
                        for (;;)
                        {
                            uint _3093 = ((_2860 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3082));
                            _3083 = (_3082 + 4294967295u) & _3082;
                            uint _3095 = _3093 * 40u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            _3109 = _3108.w;
                            uint _3111 = (_3093 * 40u) + 4u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3126 = (_3093 * 40u) + 8u;
                            _3136 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x));
                            uint _3139 = (_3093 * 40u) + 16u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3155 = (_3093 * 40u) + 20u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3171 = (_3093 * 40u) + 24u;
                            vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3190 = (_3093 * 40u) + 28u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3215 = fma(_2430, _3203.z, fma(_2429, _3203.y, _3203.x * _2428)) + _3203.w;
                            _3216 = !((fma(_2430, _3184.z, fma(_2429, _3184.y, _3184.x * _2428)) + _3184.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3216)
                            {
                                float _3243 = _3108.x - _2428;
                                float _3244 = _3108.y - _2429;
                                float _3245 = _3108.z - _2430;
                                float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                                float _3249 = inversesqrt(_3246);
                                float _3250 = _3249 * _3243;
                                float _3251 = _3249 * _3244;
                                float _3252 = _3249 * _3245;
                                float _3256 = 1.0 - (_3246 / (_3109 * _3109));
                                float _4381 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3261 = sqrt(_3246) * _3124.w;
                                float _3263 = 1.39999997615814208984375 / (_3261 + 1.39999997615814208984375);
                                float _3264 = _3263 * _3263;
                                float _3267 = ((1.0 - _3264) * dot(vec3(_3250, _3251, _3252), vec3(_603, _606, _609))) + _3264;
                                float _3270 = _3261 * _3261;
                                float _3274 = (fma(_2430, _3152.z, fma(_2429, _3152.y, _3152.x * _2428)) + _3152.w) / _3215;
                                float _3275 = (fma(_2430, _3168.z, fma(_2429, _3168.y, _3168.x * _2428)) + _3168.w) / _3215;
                                float _3279 = 1.0 - dot(vec2(_3274, _3275), vec2(_3274, _3275));
                                float _4397 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3281 = _3280 * (((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3257) / ((_3270 * 0.699999988079071044921875) + 1.0));
                                float _3293 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                                float _3294 = 1.0 - _680;
                                float _3301 = sqrt(1.0 - ((1.0 - (_3294 * _3294)) * (1.0 - (_3293 * _3293))));
                                float _3302 = _3301 * _3301;
                                float _3303 = _3302 * _3302;
                                float _3304 = _3250 - _2720;
                                float _3305 = _3251 - _2721;
                                float _3306 = _3252 - _2722;
                                float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                                float _3314 = dot(vec3(_603, _606, _609), vec3((-0.0) - _2720, (-0.0) - _2721, (-0.0) - _2722));
                                float _4408 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3317 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3318 = dot(vec3(_603, _606, _609), vec3(_3310 * _3304, _3310 * _3305, _3310 * _3306));
                                float _4419 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3321 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3325 = ((_3321 * _3321) * (_3303 + (-1.0))) + 1.0;
                                float _3326 = _3263 * _3302;
                                float _3327 = _3326 * _3326;
                                float _3333 = ((1.0 - _3327) * dot(vec3(_603, _606, _609), vec3(_3250, _3251, _3252))) + _3327;
                                float _4430 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3335 = 1.0 - _3302;
                                float _3345 = (0.5 / (((_3334 * ((_3317 * _3335) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_3334 * _3335) + _3302) * _3317))) * _3334;
                                float _4441 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3355 = (_3280 * _3257) * (((_3303 * 3.1415927410125732421875) * (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) / ((_3325 * _3325) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3281 * _3124.z;
                                frontier_phi_94_pred_1 = _3281 * _3124.y;
                                frontier_phi_94_pred_2 = _3281 * _3124.x;
                                frontier_phi_94_pred_3 = _3355 * _3136.z;
                                frontier_phi_94_pred_4 = _3355 * _3136.y;
                                frontier_phi_94_pred_5 = _3355 * _3136.x;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3364 = frontier_phi_94_pred;
                            _3363 = frontier_phi_94_pred_1;
                            _3362 = frontier_phi_94_pred_2;
                            _3361 = frontier_phi_94_pred_3;
                            _3360 = frontier_phi_94_pred_4;
                            _3359 = frontier_phi_94_pred_5;
                            _3066 = _3362 + _3079;
                            _3067 = _3363 + _3080;
                            _3068 = _3364 + _3081;
                            _3063 = _3359 + _3076;
                            _3064 = _3360 + _3077;
                            _3065 = _3361 + _3078;
                            if (_3083 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3083;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3068;
                        frontier_phi_88_pred_1 = _3067;
                        frontier_phi_88_pred_2 = _3066;
                        frontier_phi_88_pred_3 = _3065;
                        frontier_phi_88_pred_4 = _3064;
                        frontier_phi_88_pred_5 = _3063;
                    }
                    _2705 = frontier_phi_88_pred;
                    _2703 = frontier_phi_88_pred_1;
                    _2701 = frontier_phi_88_pred_2;
                    _2699 = frontier_phi_88_pred_3;
                    _2697 = frontier_phi_88_pred_4;
                    _2695 = frontier_phi_88_pred_5;
                    uint _2861 = _2860 + 1u;
                    if (_2861 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2854 = _2695;
                        _2855 = _2697;
                        _2856 = _2699;
                        _2857 = _2701;
                        _2858 = _2703;
                        _2859 = _2705;
                        _2860 = _2861;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_69_70_ladder = _2705;
                frontier_phi_69_70_ladder_1 = _2703;
                frontier_phi_69_70_ladder_2 = _2701;
                frontier_phi_69_70_ladder_3 = _2699;
                frontier_phi_69_70_ladder_4 = _2697;
                frontier_phi_69_70_ladder_5 = _2695;
            }
            else
            {
                frontier_phi_69_70_ladder = _2584;
                frontier_phi_69_70_ladder_1 = _2582;
                frontier_phi_69_70_ladder_2 = _2580;
                frontier_phi_69_70_ladder_3 = _2578;
                frontier_phi_69_70_ladder_4 = _2576;
                frontier_phi_69_70_ladder_5 = _2574;
            }
            _2694 = frontier_phi_69_70_ladder_5;
            _2696 = frontier_phi_69_70_ladder_4;
            _2698 = frontier_phi_69_70_ladder_3;
            _2700 = frontier_phi_69_70_ladder_2;
            _2702 = frontier_phi_69_70_ladder_1;
            _2704 = frontier_phi_69_70_ladder;
        }
        float _2709 = isnan(1.0) ? _664 : (isnan(_664) ? 1.0 : min(_664, 1.0));
        _2486 = (_2709 * _2700) + _1923;
        _2488 = (_2709 * _2702) + _1925;
        _2490 = (_2709 * _2704) + _1927;
        _2492 = ((_2694 * _648) * _2709) + _2268;
        _2494 = ((_2696 * _650) * _2709) + _2270;
        _2496 = ((_2698 * _651) * _2709) + _2272;
    }
    else
    {
        _2486 = _1923;
        _2488 = _1925;
        _2490 = _1927;
        _2492 = _2268;
        _2494 = _2270;
        _2496 = _2272;
    }
    float _4457 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4468 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4479 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _2513 = ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2486 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _664))) + ((_2492 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    float _2514 = ((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2488 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _664))) + ((_2494 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    float _2515 = ((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2490 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _664))) + ((_2496 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    uint _2516 = _622 + 6u;
    float _2524 = _582 / cbSceneParam._m0[86u].x;
    float _2525 = _583 / cbSceneParam._m0[86u].y;
    vec4 _2539 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, (log2((isnan(cbSceneParam._m0[77u].w) ? _483 : (isnan(_483) ? cbSceneParam._m0[77u].w : min(_483, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2541 = _2539.x;
    float _2542 = _2539.y;
    float _2543 = _2539.z;
    float _2544 = _2539.w;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    if (_483 > cbSceneParam._m0[78u].w)
    {
        float _2599 = isnan(_483) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _483 : min(cbSceneParam._m0[80u].w, _483));
        float _2600 = _2599 / _483;
        float _2611 = _2600 * _532;
        float _2612 = _533 * _2600;
        float _2613 = (-0.0) - _2612;
        float _2614 = _2600 * _534;
        float _2616 = (cbSceneParam._m0[77u].w * _2613) / _2599;
        float _2617 = _2616 + cbSceneParam._m0[79u].w;
        float _2618 = cbSceneParam._m0[79u].w - _2612;
        float _2624 = sqrt(((_2611 * _2611) + (_2612 * _2612)) + (_2614 * _2614));
        float _2627 = (1.0 - (cbSceneParam._m0[77u].w / _2599)) * _2624;
        float _2632 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2634 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2811;
        if (abs((_2613 - _2616) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2811 = ((((_2617 > 0.0) ? exp2(_2632 * _2617) : (2.0 - exp2(_2634 * _2617))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2627;
        }
        else
        {
            float _2755 = 1.0 / cbSceneParam._m0[80u].x;
            float _2756 = isnan(_2618) ? _2617 : (isnan(_2617) ? _2618 : max(_2617, _2618));
            float _2757 = isnan(_2618) ? _2617 : (isnan(_2617) ? _2618 : min(_2617, _2618));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            float _2767 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : min(_2757, 0.0));
            _2811 = ((abs(_2624 / _2613) * cbSceneParam._m0[80u].y) * ((((_2766 - _2767) * 2.0) - ((exp2(_2632 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0)))) - exp2(_2632 * (isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0))))) * _2755)) - ((exp2(_2634 * _2766) - exp2(_2634 * _2767)) * _2755))) + (_2627 * cbSceneParam._m0[80u].z);
        }
        vec4 _2813 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, 1.0), 0.0);
        float _2822 = exp2((_2811 * (-1.44269502162933349609375)) * (1.0 - _2813.w));
        float _2823 = log2(_2822);
        float _2839 = log2(_2544);
        _2636 = (exp2(_2839 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].x)) * _2813.x) / cbSceneParam._m0[78u].x)) + _2541;
        _2638 = (exp2(_2839 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].y)) * _2813.y) / cbSceneParam._m0[78u].y)) + _2542;
        _2640 = (exp2(_2839 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].z)) * _2813.z) / cbSceneParam._m0[78u].z)) + _2543;
        _2642 = _2822 * _2544;
    }
    else
    {
        _2636 = _2541;
        _2638 = _2542;
        _2640 = _2543;
        _2642 = _2544;
    }
    bool _2849;
    vec4 _2652;
    vec4 _2674;
    float _2676;
    float _2680;
    float _2681;
    float _2682;
    float _2683;
    bool _2693;
    for (;;)
    {
        _2652 = cbMatDynParam._m0[0u];
        float _2654 = roundEven(_2652.y);
        bool _2655 = _2654 == 3.0;
        float _2656 = log2(_2642);
        float _2663 = exp2(_2656 * cbSceneParam._m0[78u].x) * _2513;
        float _2664 = exp2(_2656 * cbSceneParam._m0[78u].y) * _2514;
        float _2665 = exp2(_2656 * cbSceneParam._m0[78u].z) * _2515;
        float _2672 = _548 + (-0.5);
        _2674 = cbMtdParam._m0[1u];
        _2676 = _2674.y * _2672;
        float _2679 = (_2654 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2680 = _2679 * (_2655 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2636)));
        _2681 = _2679 * (_2655 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2638)));
        _2682 = _2679 * (_2655 ? _2665 : (_2665 + (cbSceneParam._m0[72u].w * _2640)));
        _2683 = _2672 * 0.999000012874603271484375;
        _2693 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2693)
        {
            if ((cbInstanceData._m0[_622 + 7u].x + _2683) < 0.5)
            {
                _2849 = true;
                break;
            }
        }
        uint _2790 = _624 + uint(_2652.w);
        if ((cbInstanceData._m0[_2790].w < 1.0) && ((cbInstanceData._m0[_2790].w + _2683) < 0.5))
        {
            _2849 = true;
            break;
        }
        if ((_2676 + 1.0) < _2674.x)
        {
            _2849 = true;
            break;
        }
        _2849 = false;
        break;
    }
    float _3054;
    if (_2849)
    {
        discard_state = true;
        _3054 = 0.0;
    }
    else
    {
        _3054 = cbInstanceData._m0[_2516].w;
    }
    SV_Target.x = _2680;
    SV_Target.y = _2681;
    SV_Target.z = _2682;
    SV_Target.w = _3054;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2516].w;
    discard_exit();
}


