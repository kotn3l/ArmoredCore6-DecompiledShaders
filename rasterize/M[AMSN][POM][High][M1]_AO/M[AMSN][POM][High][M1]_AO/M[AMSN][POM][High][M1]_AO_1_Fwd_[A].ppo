#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1051;
float _3471;
float _3472;
float _3473;
float _3474;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    float _280 = dot(vec3(_269, _270, _271), vec3(_192, _193, _194));
    float _283 = dot(vec3(_269, _270, _271), vec3(_206, _207, _208));
    float _286 = dot(vec3(_269, _270, _271), vec3(_213, _214, _215));
    float _289 = (-0.0) - _280;
    float _290 = (-0.0) - _283;
    float _300 = (cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z;
    float _301 = (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w;
    float _302 = (-0.0) - _269;
    float _303 = (-0.0) - _270;
    float _304 = (-0.0) - _271;
    float _309 = inversesqrt(dot(vec2(_289, _290), vec2(_289, _290)));
    float _313 = _286 * _286;
    float _315 = sqrt(((_283 * _283) + (_280 * _280)) + _313);
    float _319 = sqrt((_315 * _315) - _313) / ((-0.0) - _286);
    float _322 = ((cbMtdParam._m0[10u].y * _289) * _309) * _319;
    float _325 = ((cbMtdParam._m0[10u].y * _290) * _309) * _319;
    float _329 = inversesqrt(dot(vec3(_302, _303, _304), vec3(_302, _303, _304)));
    float _333 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _334 = dFdxCoarse(_300);
    float _335 = dFdxCoarse(_301);
    float _336 = dFdyCoarse(_300);
    float _337 = dFdyCoarse(_301);
    uvec2 _345 = uvec2(textureSize(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, int(0u)));
    float _349 = float(_345.y) * (abs(_337) + abs(_335));
    float _351 = float(_345.x) * (abs(_336) + abs(_334));
    float _353 = log2(isnan(_349) ? _351 : (isnan(_351) ? _349 : max(_351, _349)));
    float _354 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _357;
    float _360;
    if (!(_354 <= 4.0))
    {
        _357 = _300;
        _360 = _301;
    }
    else
    {
        uint _553 = uint(min(int(uint(int(16.0 - (abs(dot(vec3(_329 * _302, _329 * _303, _329 * _304), vec3(_333 * _213, _333 * _214, _333 * _215))) * 12.0)))), int(32u)));
        float _556 = 1.0 / float(int(_553));
        float _557 = _556 * _322;
        float _558 = _556 * _325;
        float _735;
        float _737;
        float _739;
        float _741;
        if (int(_553) > int(0u))
        {
            float _736;
            float _738;
            float _740;
            float _742;
            uint _1476;
            float _1071 = 1.0;
            uint _1073 = 0u;
            float _1075 = _300;
            float _1077 = _301;
            float _1079 = 1.0;
            float _1081 = 0.0;
            float _1082 = 0.0;
            float _1083 = 0.0;
            float _1084 = 0.0;
            float _1072;
            float _1076;
            float _1078;
            float _1080;
            bool _1096;
            for (;;)
            {
                _1076 = _1075 - _557;
                _1078 = _1077 - _558;
                _1072 = dot(vec4(textureGrad(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2(_1076, _1078), vec2(_334, _335), vec2(_336, _337))), vec4(1.0, 0.0, 0.0, 0.0));
                _1080 = _1079 - _556;
                _1096 = _1072 > _1080;
                float frontier_phi_17_pred;
                float frontier_phi_17_pred_1;
                float frontier_phi_17_pred_2;
                float frontier_phi_17_pred_3;
                uint frontier_phi_17_pred_4;
                if (_1096)
                {
                    frontier_phi_17_pred = _1071;
                    frontier_phi_17_pred_1 = _1079;
                    frontier_phi_17_pred_2 = _1072;
                    frontier_phi_17_pred_3 = _1080;
                    frontier_phi_17_pred_4 = _553;
                }
                else
                {
                    frontier_phi_17_pred = _1084;
                    frontier_phi_17_pred_1 = _1083;
                    frontier_phi_17_pred_2 = _1082;
                    frontier_phi_17_pred_3 = _1081;
                    frontier_phi_17_pred_4 = _1073;
                }
                _742 = frontier_phi_17_pred;
                _740 = frontier_phi_17_pred_1;
                _738 = frontier_phi_17_pred_2;
                _736 = frontier_phi_17_pred_3;
                _1476 = frontier_phi_17_pred_4;
                uint _1074 = _1476 + 1u;
                if (int(_1074) < int(_553))
                {
                    _1071 = _1072;
                    _1073 = _1074;
                    _1075 = _1076;
                    _1077 = _1078;
                    _1079 = _1080;
                    _1081 = _736;
                    _1082 = _738;
                    _1083 = _740;
                    _1084 = _742;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _735 = _736;
            _737 = _738;
            _739 = _740;
            _741 = _742;
        }
        else
        {
            _735 = 0.0;
            _737 = 0.0;
            _739 = 0.0;
            _741 = 0.0;
        }
        float _743 = _739 - _741;
        float _744 = _735 - _737;
        float _750 = 1.0 - (((_743 * _735) - (_739 * _744)) / (_743 - _744));
        float _751 = _750 * _322;
        float _752 = _750 * _325;
        float _359 = _300 - _751;
        float _362 = _301 - _752;
        float frontier_phi_3_8_ladder;
        float frontier_phi_3_8_ladder_1;
        if (_354 > 3.0)
        {
            float _1098 = _354 - trunc(_354);
            frontier_phi_3_8_ladder = (_1098 * _751) + _359;
            frontier_phi_3_8_ladder_1 = (_1098 * _752) + _362;
        }
        else
        {
            frontier_phi_3_8_ladder = _359;
            frontier_phi_3_8_ladder_1 = _362;
        }
        _357 = frontier_phi_3_8_ladder;
        _360 = frontier_phi_3_8_ladder_1;
    }
    float _367 = ((_357 - _300) / cbTextureTilingScale._m0[2u].x) + TEXCOORD.x;
    float _368 = ((_360 - _301) / cbTextureTilingScale._m0[2u].y) + TEXCOORD.y;
    vec4 _381 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _367) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _368) + cbTextureTilingScale._m0[3u].w));
    float _386 = _381.x * cbMtdParam._m0[9u].x;
    float _387 = _381.y * cbMtdParam._m0[9u].y;
    float _388 = _381.z * cbMtdParam._m0[9u].z;
    vec4 _400 = texture(sampler2D(M_AMSN_POM_High_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _367) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _368) + cbTextureTilingScale._m0[1u].w));
    float _404 = _400.z;
    float _409 = (_400.x * 2.0) + (-1.0);
    float _411 = (_400.y * 2.0) + (-1.0);
    float _412 = dot(vec2(_409, _411), vec2(_409, _411));
    float _3493 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _418 = sqrt(1.0 - (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))));
    float _421 = fma(_418, _213, fma(_411, _206, _409 * _192));
    float _424 = fma(_418, _214, fma(_411, _207, _409 * _193));
    float _427 = fma(_418, _215, fma(_411, _208, _409 * _194));
    float _431 = inversesqrt(dot(vec3(_421, _424, _427), vec3(_421, _424, _427)));
    float _432 = _431 * _421;
    float _433 = _431 * _424;
    float _434 = _431 * _427;
    float _438 = cbMtdParam._m0[10u].x + _400.w;
    float _442 = inversesqrt(dot(vec3(_432, _433, _434), vec3(_432, _433, _434)));
    float _443 = _442 * _432;
    float _444 = _442 * _433;
    float _445 = _442 * _434;
    float _3504 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _446 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3526 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3537 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3548 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _466 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _515 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _506);
    float _516 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _506);
    float _517 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _506);
    float _521 = inversesqrt(dot(vec3(_515, _516, _517), vec3(_515, _516, _517)));
    float _522 = _515 * _521;
    float _523 = _516 * _521;
    float _524 = _517 * _521;
    vec4 _529 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _531 = _529.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _711 = sqrt(((_515 * _515) + (_516 * _516)) + (_517 * _517));
        float _717 = (cbMatDynParam._m0[5u].x * _711) + cbMatDynParam._m0[5u].y;
        float _3559 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _722 = (cbMatDynParam._m0[5u].z * _711) + cbMatDynParam._m0[5u].w;
        float _3570 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) - _718)) + _718) < ((_531 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _565 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _566 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _586 = fma(_445, cbSceneParam._m0[5u].z, fma(_444, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _443));
    float _589 = fma(_445, cbSceneParam._m0[6u].z, fma(_444, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _443));
    float _592 = fma(_445, cbSceneParam._m0[7u].z, fma(_444, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _443));
    uint _605 = uint(roundEven(NORMAL.w)) * 13u;
    uint _607 = _605 + 9u;
    uint _608 = _607 + uint(cbMatDynParam._m0[0u].w);
    float _614 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_608].x;
    float _615 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) * cbInstanceData._m0[_608].y;
    float _616 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) * cbInstanceData._m0[_608].z;
    float _3581 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _3592 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    vec4 _628 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _565, cbSceneParam._m0[86u].y * _566));
    float _632 = ((isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * TEXCOORD.z) * _628.x;
    float _633 = dot(vec3(_443, _444, _445), vec3(_522, _523, _524));
    float _636 = _633 * 2.0;
    float _640 = (_636 * _443) - _522;
    float _641 = (_636 * _444) - _523;
    float _642 = (_636 * _445) - _524;
    float _646 = abs(dot(vec3(_522, _523, _524), vec3(_443, _444, _445)));
    float _3614 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _648 = sqrt(_446);
    float _660 = exp2((_648 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_648 * 3.0));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1050;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _775 = fma(_700, cbModelParam._m0[26u].z, fma(_696, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _692));
        float _779 = fma(_700, cbModelParam._m0[27u].z, fma(_696, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _692));
        float _783 = fma(_700, cbModelParam._m0[28u].z, fma(_696, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _692));
        float _808 = _692 + _443;
        float _809 = _696 + _444;
        float _810 = _700 + _445;
        float _820 = fma(_810, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _808)) - _775;
        float _821 = fma(_810, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _808)) - _779;
        float _822 = fma(_810, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _808)) - _783;
        float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
        float _839 = ((_826 * _820) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_775 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_826 * _821) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_779 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_826 * _822) / cbModelParam._m0[34u].z) + ((((((_783 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        float _878 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_844.x + (-0.5));
        float _880 = _878 * (_844.y + (-0.5));
        float _881 = _878 * (_844.z + (-0.5));
        float _888 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_851.x + (-0.5));
        float _890 = _888 * (_851.y + (-0.5));
        float _891 = _888 * (_851.z + (-0.5));
        float _898 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_858.x + (-0.5));
        float _900 = _898 * (_858.y + (-0.5));
        float _901 = _898 * (_858.z + (-0.5));
        float _908 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_865.x + (-0.5));
        float _910 = _908 * (_865.y + (-0.5));
        float _911 = _908 * (_865.z + (-0.5));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = _879 * 0.5;
        float _916 = _889 * 0.5;
        float _917 = _899 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _932 = (dot(vec3(_443, _444, _445), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _942 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3662 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_944 + 1.0))) + _949) * _912;
        float _959 = _880 * 0.5;
        float _960 = _890 * 0.5;
        float _961 = _900 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_443, _444, _445), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3695 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_986 + 1.0))) + _991) * _913;
        float _1001 = _881 * 0.5;
        float _1002 = _891 * 0.5;
        float _1003 = _901 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_443, _444, _445), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3728 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1028 + 1.0))) + _1033) * _914;
        _1050 = _881;
        _1052 = _880;
        _1053 = _879;
        _1054 = _891;
        _1055 = _890;
        _1056 = _889;
        _1057 = _901;
        _1058 = _900;
        _1059 = _899;
        _1060 = _914;
        _1061 = _913;
        _1062 = _912;
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
    }
    else
    {
        _1050 = _1051;
        _1052 = _1051;
        _1053 = _1051;
        _1054 = _1051;
        _1055 = _1051;
        _1056 = _1051;
        _1057 = _1051;
        _1058 = _1051;
        _1059 = _1051;
        _1060 = _1051;
        _1061 = _1051;
        _1062 = _1051;
        _1063 = 0.0;
        _1064 = 0.0;
        _1065 = 0.0;
    }
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1123 = fma(_700, cbModelParam._m0[30u].z, fma(_696, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _692));
        float _1127 = fma(_700, cbModelParam._m0[31u].z, fma(_696, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _692));
        float _1131 = fma(_700, cbModelParam._m0[32u].z, fma(_696, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _692));
        float _1154 = _692 + _443;
        float _1155 = _696 + _444;
        float _1156 = _700 + _445;
        float _1166 = fma(_1156, cbModelParam._m0[30u].z, fma(_1155, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154)) - _1123;
        float _1167 = fma(_1156, cbModelParam._m0[31u].z, fma(_1155, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154)) - _1127;
        float _1168 = fma(_1156, cbModelParam._m0[32u].z, fma(_1155, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154)) - _1131;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1123 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1127 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[35u].z) + ((((((_1131 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1222 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1189.x + (-0.5));
        float _1224 = _1222 * (_1189.y + (-0.5));
        float _1225 = _1222 * (_1189.z + (-0.5));
        float _1232 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1196.x + (-0.5));
        float _1234 = _1232 * (_1196.y + (-0.5));
        float _1235 = _1232 * (_1196.z + (-0.5));
        float _1242 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1203.x + (-0.5));
        float _1244 = _1242 * (_1203.y + (-0.5));
        float _1245 = _1242 * (_1203.z + (-0.5));
        float _1252 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1210.x + (-0.5));
        float _1254 = _1252 * (_1210.y + (-0.5));
        float _1255 = _1252 * (_1210.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_443, _444, _445), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3791 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1286 + 1.0))) + _1291) * _1256;
        float _1301 = _1224 * 0.5;
        float _1302 = _1234 * 0.5;
        float _1303 = _1244 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_443, _444, _445), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3824 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1328 + 1.0))) + _1333) * _1257;
        float _1343 = _1225 * 0.5;
        float _1344 = _1235 * 0.5;
        float _1345 = _1245 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_443, _444, _445), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3857 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1370 + 1.0))) + _1375) * _1258;
        _1392 = _1225;
        _1393 = _1224;
        _1394 = _1223;
        _1395 = _1235;
        _1396 = _1234;
        _1397 = _1233;
        _1398 = _1245;
        _1399 = _1244;
        _1400 = _1243;
        _1401 = _1258;
        _1402 = _1257;
        _1403 = _1256;
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1051;
        _1393 = _1051;
        _1394 = _1051;
        _1395 = _1051;
        _1396 = _1051;
        _1397 = _1051;
        _1398 = _1051;
        _1399 = _1051;
        _1400 = _1051;
        _1401 = _1051;
        _1402 = _1051;
        _1403 = _1051;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1063)) + _1063;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1064)) + _1064;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1065)) + _1065;
    float _1439 = fma(_1418, cbSceneParam._m0[89u].z, fma(_1417, cbSceneParam._m0[89u].y, _1416 * cbSceneParam._m0[89u].x));
    float _1442 = fma(_1418, cbSceneParam._m0[90u].z, fma(_1417, cbSceneParam._m0[90u].y, _1416 * cbSceneParam._m0[90u].x));
    float _1445 = fma(_1418, cbSceneParam._m0[91u].z, fma(_1417, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1416));
    float _1460 = _640 * 0.5;
    float _1461 = _641 * 0.5;
    float _1462 = _642 * 0.5;
    float _1463 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1466 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1469 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1505;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1478 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1050, _1054, _1057, _1060));
        float _1482 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1052, _1055, _1058, _1061));
        float _1486 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1493 = dot(vec4(cbModelParam._m0[39u]), vec4(_1460, _1461, _1462, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1516;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1507 = dot(vec4(cbModelParam._m0[40u]), vec4(_1460, _1461, _1462, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1520 = (_1516 * cbModelParam._m0[1u].x) + (_1505 * (1.0 - cbModelParam._m0[1u].x));
    float _1530 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _446);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1530 : min(cbModelParam._m0[25u].z, _1530));
    float _1613;
    float _1615;
    float _1617;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1580 = fma(_700, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _692)) + cbModelParam._m0[13u].w;
        float _1584 = fma(_700, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _692)) + cbModelParam._m0[14u].w;
        float _1588 = fma(_700, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _692)) + cbModelParam._m0[15u].w;
        float _1591 = fma(_642, cbModelParam._m0[13u].z, fma(_641, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _640));
        float _1594 = fma(_642, cbModelParam._m0[14u].z, fma(_641, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _640));
        float _1597 = fma(_642, cbModelParam._m0[15u].z, fma(_641, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _640));
        float _1625;
        if (_1591 > 0.0)
        {
            _1625 = abs((1.0 - _1580) / _1591);
        }
        else
        {
            float frontier_phi_28_26_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_28_26_ladder = abs((_1580 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_28_26_ladder = 5000.0;
            }
            _1625 = frontier_phi_28_26_ladder;
        }
        float _1831;
        if (_1594 > 0.0)
        {
            _1831 = abs((1.0 - _1584) / _1594);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1584 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1831 = frontier_phi_37_33_ladder;
        }
        float _2074;
        if (_1597 > 0.0)
        {
            _2074 = abs((1.0 - _1588) / _1597);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1588 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2074 = frontier_phi_49_44_ladder;
        }
        float _2076 = isnan(_1831) ? _1625 : (isnan(_1625) ? _1831 : min(_1625, _1831));
        float _2077 = isnan(_2074) ? _2076 : (isnan(_2076) ? _2074 : min(_2076, _2074));
        float _2081 = (_2077 * _1591) + _1580;
        float _2082 = (_2077 * _1594) + _1584;
        float _2083 = (_2077 * _1597) + _1588;
        float _2084 = _2077 * 9.9999997473787516355514526367188e-05;
        float _2086 = (-1.0) - _2084;
        float _2088 = _2084 + 1.0;
        float frontier_phi_27_49_ladder;
        float frontier_phi_27_49_ladder_1;
        float frontier_phi_27_49_ladder_2;
        if ((_2083 > _2088) || ((_2083 < _2086) || ((_2082 > _2088) || ((_2082 < _2086) || ((_2081 < _2086) || (_2081 > _2088))))))
        {
            frontier_phi_27_49_ladder = 0.0;
            frontier_phi_27_49_ladder_1 = 0.0;
            frontier_phi_27_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2207 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2083, cbModelParam._m0[9u].z, fma(_2082, cbModelParam._m0[9u].y, _2081 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2083, cbModelParam._m0[10u].z, fma(_2082, cbModelParam._m0[10u].y, _2081 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2083, cbModelParam._m0[11u].z, fma(_2082, cbModelParam._m0[11u].y, _2081 * cbModelParam._m0[11u].x))), _1531);
            frontier_phi_27_49_ladder = _2207.z * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_1 = _2207.y * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_2 = _2207.x * cbModelParam._m0[1u].y;
        }
        _1613 = frontier_phi_27_49_ladder_2;
        _1615 = frontier_phi_27_49_ladder_1;
        _1617 = frontier_phi_27_49_ladder;
    }
    else
    {
        vec4 _1601 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_640, _641, _642), _1531);
        _1613 = _1601.x * cbModelParam._m0[1u].y;
        _1615 = _1601.y * cbModelParam._m0[1u].y;
        _1617 = _1601.z * cbModelParam._m0[1u].y;
    }
    float _1621 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _446);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1621 : min(cbModelParam._m0[25u].w, _1621));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1679 = fma(_700, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _692)) + cbModelParam._m0[21u].w;
        float _1683 = fma(_700, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _692)) + cbModelParam._m0[22u].w;
        float _1687 = fma(_700, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _692)) + cbModelParam._m0[23u].w;
        float _1690 = fma(_642, cbModelParam._m0[21u].z, fma(_641, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _640));
        float _1693 = fma(_642, cbModelParam._m0[22u].z, fma(_641, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _640));
        float _1696 = fma(_642, cbModelParam._m0[23u].z, fma(_641, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _640));
        float _1836;
        if (_1690 > 0.0)
        {
            _1836 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1836 = frontier_phi_39_35_ladder;
        }
        float _2101;
        if (_1693 > 0.0)
        {
            _2101 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _2101 = frontier_phi_51_46_ladder;
        }
        float _2306;
        if (_1696 > 0.0)
        {
            _2306 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_60_57_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_60_57_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_60_57_ladder = 5000.0;
            }
            _2306 = frontier_phi_60_57_ladder;
        }
        float _2308 = isnan(_2101) ? _1836 : (isnan(_1836) ? _2101 : min(_1836, _2101));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1690) + _1679;
        float _2314 = (_2309 * _1693) + _1683;
        float _2315 = (_2309 * _1696) + _1687;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2316;
        float _2319 = _2316 + 1.0;
        float frontier_phi_36_60_ladder;
        float frontier_phi_36_60_ladder_1;
        float frontier_phi_36_60_ladder_2;
        if ((_2315 > _2319) || ((_2315 < _2317) || ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 < _2317) || (_2313 > _2319))))))
        {
            frontier_phi_36_60_ladder = 0.0;
            frontier_phi_36_60_ladder_1 = 0.0;
            frontier_phi_36_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2315, cbModelParam._m0[17u].z, fma(_2314, cbModelParam._m0[17u].y, _2313 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2315, cbModelParam._m0[18u].z, fma(_2314, cbModelParam._m0[18u].y, _2313 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2315, cbModelParam._m0[19u].z, fma(_2314, cbModelParam._m0[19u].y, _2313 * cbModelParam._m0[19u].x))), _1622);
            frontier_phi_36_60_ladder = _2513.z * cbModelParam._m0[1u].z;
            frontier_phi_36_60_ladder_1 = _2513.y * cbModelParam._m0[1u].z;
            frontier_phi_36_60_ladder_2 = _2513.x * cbModelParam._m0[1u].z;
        }
        _1715 = frontier_phi_36_60_ladder_2;
        _1717 = frontier_phi_36_60_ladder_1;
        _1719 = frontier_phi_36_60_ladder;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_640, _641, _642), _1622);
        _1715 = _1699.x * cbModelParam._m0[1u].z;
        _1717 = _1699.y * cbModelParam._m0[1u].z;
        _1719 = _1699.z * cbModelParam._m0[1u].z;
    }
    float _1731 = ((((1.0 - _660) * ((_648 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_660 * _648)) * _632;
    float _1732 = _1731 * ((cbModelParam._m0[1u].w * (_1715 - _1613)) + _1613);
    float _1733 = _1731 * ((cbModelParam._m0[1u].w * (_1717 - _1615)) + _1615);
    float _1734 = _1731 * ((cbModelParam._m0[1u].w * (_1719 - _1617)) + _1617);
    float _1737 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1733, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1733, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1733, cbSceneParam._m0[91u].y, _1732 * cbSceneParam._m0[91u].x));
    uvec4 _1753 = floatBitsToUint(cbInstanceData._m0[_605 + 5u]);
    uint _1755 = _1753.x * 14u;
    uint _1756 = _1755 + 13u;
    float _1763 = _632 + (-1.0);
    float _1768 = (cbLight._m0[_1756].x * _1763) + 1.0;
    float _1769 = (cbLight._m0[_1756].y * _1763) + 1.0;
    float _1770 = (cbLight._m0[_1756].z * _1763) + 1.0;
    float _1771 = (cbLight._m0[_1756].w * _1763) + 1.0;
    uint _1772 = _1755 + 5u;
    float _1778 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    uint _1782 = _1755 + 4u;
    float _1789 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    uint _1793 = _1755 | 1u;
    float _1804 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_443, _444, _445));
    float _1807 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_443, _444, _445));
    float _3993 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _4004 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1812 = (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * 0.3183098733425140380859375;
    float _1814 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * 0.3183098733425140380859375;
    float _1821 = ((cbLight._m0[_1772].x * _1778) * _1814) + ((cbLight._m0[_1782].x * _1789) * _1812);
    float _1822 = ((_1778 * cbLight._m0[_1772].y) * _1814) + ((_1789 * cbLight._m0[_1782].y) * _1812);
    float _1823 = ((_1778 * cbLight._m0[_1772].z) * _1814) + ((_1789 * cbLight._m0[_1782].z) * _1812);
    uvec4 _1828 = floatBitsToUint(cbLight._m0[_1755 + 12u]);
    bool _1830 = _1828.x == 0u;
    float _1841;
    float _1843;
    float _1845;
    if (_1830)
    {
        _1841 = _1821;
        _1843 = _1822;
        _1845 = _1823;
    }
    else
    {
        uint _1849 = _1755 + 6u;
        float _1865 = (dot(vec3(cbLight._m0[_1755 + 2u].xyz), vec3(_443, _444, _445)) * 0.5) + 0.5;
        float _1866 = _1865 * _1865;
        float _4015 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1868 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _1841 = (((cbLight._m0[_1849].x * 0.3183098733425140380859375) * _1867) * _1868) + _1821;
        _1843 = (((cbLight._m0[_1849].y * 0.3183098733425140380859375) * _1867) * _1868) + _1822;
        _1845 = (((cbLight._m0[_1849].z * 0.3183098733425140380859375) * _1867) * _1868) + _1823;
    }
    bool _1848 = _1828.y == 0u;
    float _1886;
    float _1888;
    float _1890;
    if (_1848)
    {
        _1886 = _1841;
        _1888 = _1843;
        _1890 = _1845;
    }
    else
    {
        uint _2045 = _1755 + 7u;
        float _2061 = (dot(vec3(cbLight._m0[_1755 + 3u].xyz), vec3(_443, _444, _445)) * 0.5) + 0.5;
        float _2062 = _2061 * _2061;
        float _4031 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2063 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2064 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _1886 = (((cbLight._m0[_2045].x * 0.3183098733425140380859375) * _2063) * _2064) + _1841;
        _1888 = (((cbLight._m0[_2045].y * 0.3183098733425140380859375) * _2063) * _2064) + _1843;
        _1890 = (((cbLight._m0[_2045].z * 0.3183098733425140380859375) * _2063) * _2064) + _1845;
    }
    uint _1893 = _1755 + 8u;
    float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1755].w)) * _446) * 0.949999988079071044921875);
    float _1907 = _1906 * _1906;
    float _1908 = cbLight._m0[_1755].x + _522;
    float _1909 = cbLight._m0[_1755].y + _523;
    float _1910 = cbLight._m0[_1755].z + _524;
    float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
    float _1915 = _1914 * _1908;
    float _1916 = _1914 * _1909;
    float _1917 = _1914 * _1910;
    float _1918 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_1755].xyz));
    float _4047 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _4058 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _1922 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _1923 = dot(vec3(_443, _444, _445), vec3(_1915, _1916, _1917));
    float _4069 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _1927 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_1915, _1916, _1917));
    float _4080 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1931 = _1907 * _1907;
    float _1935 = ((_1926 * _1926) * (_1931 + (-1.0))) + 1.0;
    float _1946 = (exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1947 = 1.0 - _1907;
    float _1958 = (0.5 / (((_1922 * ((_1921 * _1947) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _1947) + _1907) * _1921))) * _1921;
    float _4091 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1960 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1931 / ((_1935 * _1935) * 3.141590118408203125));
    uint _1971 = _1755 + 9u;
    float _1982 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _446) * 0.949999988079071044921875);
    float _1983 = _1982 * _1982;
    float _1984 = cbLight._m0[_1793].x + _522;
    float _1985 = cbLight._m0[_1793].y + _523;
    float _1986 = cbLight._m0[_1793].z + _524;
    float _1990 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
    float _1991 = _1990 * _1984;
    float _1992 = _1990 * _1985;
    float _1993 = _1990 * _1986;
    float _1994 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_1793].xyz));
    float _4102 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _1998 = dot(vec3(_443, _444, _445), vec3(_1991, _1992, _1993));
    float _4113 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_1991, _1992, _1993));
    float _4124 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2006 = _1983 * _1983;
    float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
    float _2019 = (exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2020 = 1.0 - _1983;
    float _2030 = (0.5 / (((_1922 * ((_1997 * _2020) + _1983)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _2020) + _1983) * _1997))) * _1997;
    float _4135 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2032 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
    float _2042 = (((_2019 * cbLight._m0[_1971].x) * _2032) * _1778) + (((_1946 * cbLight._m0[_1893].x) * _1960) * _1789);
    float _2043 = (((_2019 * cbLight._m0[_1971].y) * _2032) * _1778) + (((_1946 * cbLight._m0[_1893].y) * _1960) * _1789);
    float _2044 = (((_2019 * cbLight._m0[_1971].z) * _2032) * _1778) + (((_1946 * cbLight._m0[_1893].z) * _1960) * _1789);
    float _2106;
    float _2108;
    float _2110;
    if (_1830)
    {
        _2106 = _2042;
        _2108 = _2043;
        _2110 = _2044;
    }
    else
    {
        uint _2112 = _1755 + 2u;
        uint _2116 = _1755 + 10u;
        float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _446) * 0.949999988079071044921875);
        float _2131 = _2130 * _2130;
        float _2132 = cbLight._m0[_2112].x + _522;
        float _2133 = cbLight._m0[_2112].y + _523;
        float _2134 = cbLight._m0[_2112].z + _524;
        float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
        float _2139 = _2138 * _2132;
        float _2140 = _2138 * _2133;
        float _2141 = _2138 * _2134;
        float _2142 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_2112].xyz));
        float _4146 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2146 = dot(vec3(_443, _444, _445), vec3(_2139, _2140, _2141));
        float _4157 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _2150 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2139, _2140, _2141));
        float _4168 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2154 = _2131 * _2131;
        float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
        float _2167 = (exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2168 = 1.0 - _2131;
        float _2178 = (0.5 / (((_1922 * ((_2145 * _2168) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _2168) + _2131) * _2145))) * _2145;
        float _4179 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2180 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
        float _2181 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _2106 = (((_2167 * cbLight._m0[_2116].x) * _2180) * _2181) + _2042;
        _2108 = (((_2167 * cbLight._m0[_2116].y) * _2180) * _2181) + _2043;
        _2110 = (((_2167 * cbLight._m0[_2116].z) * _2180) * _2181) + _2044;
    }
    float _2216;
    float _2218;
    float _2220;
    if (_1848)
    {
        _2216 = _2106;
        _2218 = _2108;
        _2220 = _2110;
    }
    else
    {
        uint _2227 = _1755 + 3u;
        uint _2231 = _1755 + 11u;
        float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _446) * 0.949999988079071044921875);
        float _2246 = _2245 * _2245;
        float _2247 = cbLight._m0[_2227].x + _522;
        float _2248 = cbLight._m0[_2227].y + _523;
        float _2249 = cbLight._m0[_2227].z + _524;
        float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
        float _2254 = _2253 * _2247;
        float _2255 = _2253 * _2248;
        float _2256 = _2253 * _2249;
        float _2257 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_2227].xyz));
        float _4195 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2261 = dot(vec3(_443, _444, _445), vec3(_2254, _2255, _2256));
        float _4206 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2265 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2254, _2255, _2256));
        float _4217 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2269 = _2246 * _2246;
        float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
        float _2282 = (exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2283 = 1.0 - _2246;
        float _2293 = (0.5 / (((_1922 * ((_2260 * _2283) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _2283) + _2246) * _2260))) * _2260;
        float _4228 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2295 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
        float _2296 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _2216 = (((_2282 * cbLight._m0[_2231].x) * _2295) * _2296) + _2106;
        _2218 = (((_2282 * cbLight._m0[_2231].y) * _2295) * _2296) + _2108;
        _2220 = (((_2282 * cbLight._m0[_2231].z) * _2295) * _2296) + _2110;
    }
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    if (_1753.y == 0u)
    {
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2371;
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2371;
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2371;
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.x;
        uint _2398 = uint((float(_2386.y) * floor(float(uint(cbSceneParam._m0[85u].y * _566) / _2387))) + floor(float(uint(cbSceneParam._m0[85u].x * _565) / _2387)));
        float _2408 = (log2(_2374 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2409 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        uint _2412 = uint(isnan(14.0) ? _2409 : (isnan(_2409) ? 14.0 : min(_2409, 14.0)));
        uvec4 _2417 = texelFetch(g_lightClusterGridBuffer, int(((_2412 << 2u) + (_2398 << 6u)) >> 2u));
        uint _2418 = _2417.x;
        uint _2419 = _2386.z;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        if (((((1u << ((_2419 >> 4u) & 15u)) + 4294967295u) & _2418) == 0u) || ((_2419 & 240u) == 0u))
        {
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
        }
        else
        {
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2529;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            uint _2676 = 0u;
            uint _2685;
            bool _2686;
            for (;;)
            {
                _2685 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2676 << 2u)) >> 2u)).x;
                _2686 = _2685 == 0u;
                float frontier_phi_77_pred;
                float frontier_phi_77_pred_1;
                float frontier_phi_77_pred_2;
                float frontier_phi_77_pred_3;
                float frontier_phi_77_pred_4;
                float frontier_phi_77_pred_5;
                if (_2686)
                {
                    frontier_phi_77_pred = _2675;
                    frontier_phi_77_pred_1 = _2674;
                    frontier_phi_77_pred_2 = _2673;
                    frontier_phi_77_pred_3 = _2672;
                    frontier_phi_77_pred_4 = _2671;
                    frontier_phi_77_pred_5 = _2670;
                }
                else
                {
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    uint _2821;
                    _2815 = _2670;
                    _2816 = _2671;
                    _2817 = _2672;
                    _2818 = _2673;
                    _2819 = _2674;
                    _2820 = _2675;
                    _2821 = _2685;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    for (;;)
                    {
                        uint _2825 = uint(findLSB(_2821)) + (_2676 << 5u);
                        uint _2822 = (_2821 + 4294967295u) & _2821;
                        uint _2827 = _2825 * 48u;
                        vec4 _2841 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2827)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 3u)).x));
                        uint _2847 = (_2825 * 48u) + 4u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 3u)).x));
                        uint _2866 = (_2825 * 48u) + 8u;
                        vec3 _2877 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x));
                        float _2881 = _2841.x - _2372;
                        float _2882 = _2841.y - _2373;
                        float _2883 = _2841.z - _2374;
                        float _2884 = dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883));
                        float _2887 = inversesqrt(_2884);
                        float _2888 = _2887 * _2881;
                        float _2889 = _2887 * _2882;
                        float _2890 = _2887 * _2883;
                        float _2891 = dot(vec3(_586, _589, _592), vec3(_2888, _2889, _2890));
                        float _2896 = 1.0 - (_2884 * _2841.w);
                        float _4254 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2897 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2898 = sqrt(_2884) * _2860.w;
                        float _2901 = 1.39999997615814208984375 / (_2898 + 1.39999997615814208984375);
                        float _2902 = _2901 * _2901;
                        float _2905 = ((1.0 - _2902) * _2891) + _2902;
                        float _2908 = _2898 * _2898;
                        float _2912 = ((isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0))) * _2897) / ((_2908 * 0.699999988079071044921875) + 1.0);
                        float _2916 = (-0.0) - _2372;
                        float _2917 = (-0.0) - _2373;
                        float _2918 = (-0.0) - _2374;
                        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
                        float _2923 = _2922 * _2916;
                        float _2924 = _2922 * _2917;
                        float _2925 = _2922 * _2918;
                        float _2933 = exp2(log2(1.0 / ((_2908 * 3.5) + 5.0)) * 0.25);
                        float _2934 = 1.0 - _648;
                        float _2941 = sqrt(1.0 - ((1.0 - (_2934 * _2934)) * (1.0 - (_2933 * _2933))));
                        float _2942 = _2941 * _2941;
                        float _2943 = _2942 * _2942;
                        float _2944 = _2923 + _2888;
                        float _2945 = _2924 + _2889;
                        float _2946 = _2925 + _2890;
                        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
                        float _2954 = dot(vec3(_586, _589, _592), vec3(_2923, _2924, _2925));
                        float _4270 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2957 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                        float _2958 = dot(vec3(_586, _589, _592), vec3(_2950 * _2944, _2950 * _2945, _2950 * _2946));
                        float _4281 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2961 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                        float _2965 = ((_2961 * _2961) * (_2943 + (-1.0))) + 1.0;
                        float _2966 = _2901 * _2942;
                        float _2967 = _2966 * _2966;
                        float _2970 = ((1.0 - _2967) * _2891) + _2967;
                        float _4292 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2971 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                        float _2972 = 1.0 - _2942;
                        float _2982 = (0.5 / (((_2971 * ((_2957 * _2972) + _2942)) + 9.9999999392252902907785028219223e-09) + (((_2971 * _2972) + _2942) * _2957))) * _2971;
                        float _4303 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2993 = (((_2943 * 3.1415927410125732421875) * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) / ((_2965 * _2965) * ((_2908 * 2.1991131305694580078125) + 3.141590118408203125))) * _2897;
                        _2745 = (_2912 * _2860.x) + _2818;
                        _2746 = (_2912 * _2860.y) + _2819;
                        _2747 = (_2912 * _2860.z) + _2820;
                        _2742 = (_2993 * _2877.x) + _2815;
                        _2743 = (_2993 * _2877.y) + _2816;
                        _2744 = (_2993 * _2877.z) + _2817;
                        if (_2822 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2815 = _2742;
                            _2816 = _2743;
                            _2817 = _2744;
                            _2818 = _2745;
                            _2819 = _2746;
                            _2820 = _2747;
                            _2821 = _2822;
                        }
                    }
                    frontier_phi_77_pred = _2747;
                    frontier_phi_77_pred_1 = _2746;
                    frontier_phi_77_pred_2 = _2745;
                    frontier_phi_77_pred_3 = _2744;
                    frontier_phi_77_pred_4 = _2743;
                    frontier_phi_77_pred_5 = _2742;
                }
                _2529 = frontier_phi_77_pred;
                _2527 = frontier_phi_77_pred_1;
                _2525 = frontier_phi_77_pred_2;
                _2523 = frontier_phi_77_pred_3;
                _2521 = frontier_phi_77_pred_4;
                _2519 = frontier_phi_77_pred_5;
                uint _2677 = _2676 + 1u;
                if (_2677 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2670 = _2519;
                    _2671 = _2521;
                    _2672 = _2523;
                    _2673 = _2525;
                    _2674 = _2527;
                    _2675 = _2529;
                    _2676 = _2677;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
        }
        uvec4 _2532 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2533 = _2532.z;
        uint _2535 = (_2533 >> 8u) & 15u;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        if (((4294967295u << _2535) & _2418) == 0u)
        {
            _2638 = _2518;
            _2640 = _2520;
            _2642 = _2522;
            _2644 = _2524;
            _2646 = _2526;
            _2648 = _2528;
        }
        else
        {
            float _2663 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
            float _2664 = _2663 * _2372;
            float _2665 = _2663 * _2373;
            float _2666 = _2663 * _2374;
            float frontier_phi_69_70_ladder;
            float frontier_phi_69_70_ladder_1;
            float frontier_phi_69_70_ladder_2;
            float frontier_phi_69_70_ladder_3;
            float frontier_phi_69_70_ladder_4;
            float frontier_phi_69_70_ladder_5;
            if (_2535 < ((_2533 >> 12u) & 15u))
            {
                float _2639;
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2798 = _2518;
                float _2799 = _2520;
                float _2800 = _2522;
                float _2801 = _2524;
                float _2802 = _2526;
                float _2803 = _2528;
                uint _2804 = _2535;
                uint _2813;
                bool _2814;
                for (;;)
                {
                    _2813 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2804 << 2u)) >> 2u)).x;
                    _2814 = _2813 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2814)
                    {
                        frontier_phi_88_pred = _2803;
                        frontier_phi_88_pred_1 = _2802;
                        frontier_phi_88_pred_2 = _2801;
                        frontier_phi_88_pred_3 = _2800;
                        frontier_phi_88_pred_4 = _2799;
                        frontier_phi_88_pred_5 = _2798;
                    }
                    else
                    {
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3020 = _2798;
                        float _3021 = _2799;
                        float _3022 = _2800;
                        float _3023 = _2801;
                        float _3024 = _2802;
                        float _3025 = _2803;
                        uint _3026 = _2813;
                        uint _3027;
                        vec4 _3052;
                        float _3053;
                        vec4 _3068;
                        vec3 _3080;
                        vec4 _3096;
                        vec4 _3112;
                        float _3159;
                        bool _3160;
                        for (;;)
                        {
                            uint _3037 = ((_2804 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3026));
                            _3027 = (_3026 + 4294967295u) & _3026;
                            uint _3039 = _3037 * 40u;
                            _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            _3053 = _3052.w;
                            uint _3055 = (_3037 * 40u) + 4u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            uint _3070 = (_3037 * 40u) + 8u;
                            _3080 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x));
                            uint _3083 = (_3037 * 40u) + 16u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3099 = (_3037 * 40u) + 20u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3115 = (_3037 * 40u) + 24u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3134 = (_3037 * 40u) + 28u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3159 = fma(_2374, _3147.z, fma(_2373, _3147.y, _3147.x * _2372)) + _3147.w;
                            _3160 = !((fma(_2374, _3128.z, fma(_2373, _3128.y, _3128.x * _2372)) + _3128.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3160)
                            {
                                float _3187 = _3052.x - _2372;
                                float _3188 = _3052.y - _2373;
                                float _3189 = _3052.z - _2374;
                                float _3190 = dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189));
                                float _3193 = inversesqrt(_3190);
                                float _3194 = _3193 * _3187;
                                float _3195 = _3193 * _3188;
                                float _3196 = _3193 * _3189;
                                float _3200 = 1.0 - (_3190 / (_3053 * _3053));
                                float _4314 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3205 = sqrt(_3190) * _3068.w;
                                float _3207 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                                float _3208 = _3207 * _3207;
                                float _3211 = ((1.0 - _3208) * dot(vec3(_3194, _3195, _3196), vec3(_586, _589, _592))) + _3208;
                                float _3214 = _3205 * _3205;
                                float _3218 = (fma(_2374, _3096.z, fma(_2373, _3096.y, _3096.x * _2372)) + _3096.w) / _3159;
                                float _3219 = (fma(_2374, _3112.z, fma(_2373, _3112.y, _3112.x * _2372)) + _3112.w) / _3159;
                                float _3223 = 1.0 - dot(vec2(_3218, _3219), vec2(_3218, _3219));
                                float _4330 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3224 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                                float _3225 = _3224 * (((isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0))) * _3201) / ((_3214 * 0.699999988079071044921875) + 1.0));
                                float _3237 = exp2(log2(1.0 / ((_3214 * 3.5) + 5.0)) * 0.25);
                                float _3238 = 1.0 - _648;
                                float _3245 = sqrt(1.0 - ((1.0 - (_3238 * _3238)) * (1.0 - (_3237 * _3237))));
                                float _3246 = _3245 * _3245;
                                float _3247 = _3246 * _3246;
                                float _3248 = _3194 - _2664;
                                float _3249 = _3195 - _2665;
                                float _3250 = _3196 - _2666;
                                float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                                float _3258 = dot(vec3(_586, _589, _592), vec3((-0.0) - _2664, (-0.0) - _2665, (-0.0) - _2666));
                                float _4341 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3261 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3262 = dot(vec3(_586, _589, _592), vec3(_3254 * _3248, _3254 * _3249, _3254 * _3250));
                                float _4352 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3265 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                                float _3269 = ((_3265 * _3265) * (_3247 + (-1.0))) + 1.0;
                                float _3270 = _3207 * _3246;
                                float _3271 = _3270 * _3270;
                                float _3277 = ((1.0 - _3271) * dot(vec3(_586, _589, _592), vec3(_3194, _3195, _3196))) + _3271;
                                float _4363 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3279 = 1.0 - _3246;
                                float _3289 = (0.5 / (((_3278 * ((_3261 * _3279) + _3246)) + 9.9999999392252902907785028219223e-09) + (((_3278 * _3279) + _3246) * _3261))) * _3278;
                                float _4374 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3299 = (_3224 * _3201) * (((_3247 * 3.1415927410125732421875) * (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) / ((_3269 * _3269) * ((_3214 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3225 * _3068.z;
                                frontier_phi_94_pred_1 = _3225 * _3068.y;
                                frontier_phi_94_pred_2 = _3225 * _3068.x;
                                frontier_phi_94_pred_3 = _3299 * _3080.z;
                                frontier_phi_94_pred_4 = _3299 * _3080.y;
                                frontier_phi_94_pred_5 = _3299 * _3080.x;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3308 = frontier_phi_94_pred;
                            _3307 = frontier_phi_94_pred_1;
                            _3306 = frontier_phi_94_pred_2;
                            _3305 = frontier_phi_94_pred_3;
                            _3304 = frontier_phi_94_pred_4;
                            _3303 = frontier_phi_94_pred_5;
                            _3010 = _3306 + _3023;
                            _3011 = _3307 + _3024;
                            _3012 = _3308 + _3025;
                            _3007 = _3303 + _3020;
                            _3008 = _3304 + _3021;
                            _3009 = _3305 + _3022;
                            if (_3027 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3027;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3012;
                        frontier_phi_88_pred_1 = _3011;
                        frontier_phi_88_pred_2 = _3010;
                        frontier_phi_88_pred_3 = _3009;
                        frontier_phi_88_pred_4 = _3008;
                        frontier_phi_88_pred_5 = _3007;
                    }
                    _2649 = frontier_phi_88_pred;
                    _2647 = frontier_phi_88_pred_1;
                    _2645 = frontier_phi_88_pred_2;
                    _2643 = frontier_phi_88_pred_3;
                    _2641 = frontier_phi_88_pred_4;
                    _2639 = frontier_phi_88_pred_5;
                    uint _2805 = _2804 + 1u;
                    if (_2805 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2798 = _2639;
                        _2799 = _2641;
                        _2800 = _2643;
                        _2801 = _2645;
                        _2802 = _2647;
                        _2803 = _2649;
                        _2804 = _2805;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_69_70_ladder = _2649;
                frontier_phi_69_70_ladder_1 = _2647;
                frontier_phi_69_70_ladder_2 = _2645;
                frontier_phi_69_70_ladder_3 = _2643;
                frontier_phi_69_70_ladder_4 = _2641;
                frontier_phi_69_70_ladder_5 = _2639;
            }
            else
            {
                frontier_phi_69_70_ladder = _2528;
                frontier_phi_69_70_ladder_1 = _2526;
                frontier_phi_69_70_ladder_2 = _2524;
                frontier_phi_69_70_ladder_3 = _2522;
                frontier_phi_69_70_ladder_4 = _2520;
                frontier_phi_69_70_ladder_5 = _2518;
            }
            _2638 = frontier_phi_69_70_ladder_5;
            _2640 = frontier_phi_69_70_ladder_4;
            _2642 = frontier_phi_69_70_ladder_3;
            _2644 = frontier_phi_69_70_ladder_2;
            _2646 = frontier_phi_69_70_ladder_1;
            _2648 = frontier_phi_69_70_ladder;
        }
        float _2653 = isnan(1.0) ? _632 : (isnan(_632) ? 1.0 : min(_632, 1.0));
        _2430 = (_2653 * _2644) + _1886;
        _2432 = (_2653 * _2646) + _1888;
        _2434 = (_2653 * _2648) + _1890;
        _2436 = ((_2638 * 0.039999999105930328369140625) * _2653) + _2216;
        _2438 = ((_2640 * 0.039999999105930328369140625) * _2653) + _2218;
        _2440 = ((_2642 * 0.039999999105930328369140625) * _2653) + _2220;
    }
    else
    {
        _2430 = _1886;
        _2432 = _1888;
        _2434 = _1890;
        _2436 = _2216;
        _2438 = _2218;
        _2440 = _2220;
    }
    float _4390 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4401 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _4412 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _2457 = ((isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2430 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _632))) + ((_2436 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    float _2458 = ((isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2432 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _632))) + ((_2438 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    float _2459 = ((isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2434 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _632))) + ((_2440 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    uint _2460 = _605 + 6u;
    float _2468 = _565 / cbSceneParam._m0[86u].x;
    float _2469 = _566 / cbSceneParam._m0[86u].y;
    vec4 _2483 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2468, _2469, (log2((isnan(cbSceneParam._m0[77u].w) ? _466 : (isnan(_466) ? cbSceneParam._m0[77u].w : min(_466, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2485 = _2483.x;
    float _2486 = _2483.y;
    float _2487 = _2483.z;
    float _2488 = _2483.w;
    float _2580;
    float _2582;
    float _2584;
    float _2586;
    if (_466 > cbSceneParam._m0[78u].w)
    {
        float _2543 = isnan(_466) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _466 : min(cbSceneParam._m0[80u].w, _466));
        float _2544 = _2543 / _466;
        float _2555 = _2544 * _515;
        float _2556 = _516 * _2544;
        float _2557 = (-0.0) - _2556;
        float _2558 = _2544 * _517;
        float _2560 = (cbSceneParam._m0[77u].w * _2557) / _2543;
        float _2561 = _2560 + cbSceneParam._m0[79u].w;
        float _2562 = cbSceneParam._m0[79u].w - _2556;
        float _2568 = sqrt(((_2555 * _2555) + (_2556 * _2556)) + (_2558 * _2558));
        float _2571 = (1.0 - (cbSceneParam._m0[77u].w / _2543)) * _2568;
        float _2576 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2578 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2755;
        if (abs((_2557 - _2560) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2755 = ((((_2561 > 0.0) ? exp2(_2576 * _2561) : (2.0 - exp2(_2578 * _2561))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2571;
        }
        else
        {
            float _2699 = 1.0 / cbSceneParam._m0[80u].x;
            float _2700 = isnan(_2562) ? _2561 : (isnan(_2561) ? _2562 : max(_2561, _2562));
            float _2701 = isnan(_2562) ? _2561 : (isnan(_2561) ? _2562 : min(_2561, _2562));
            float _2710 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : min(_2700, 0.0));
            float _2711 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : min(_2701, 0.0));
            _2755 = ((abs(_2568 / _2557) * cbSceneParam._m0[80u].y) * ((((_2710 - _2711) * 2.0) - ((exp2(_2576 * (isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0)))) - exp2(_2576 * (isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0))))) * _2699)) - ((exp2(_2578 * _2710) - exp2(_2578 * _2711)) * _2699))) + (_2571 * cbSceneParam._m0[80u].z);
        }
        vec4 _2757 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2468, _2469, 1.0), 0.0);
        float _2766 = exp2((_2755 * (-1.44269502162933349609375)) * (1.0 - _2757.w));
        float _2767 = log2(_2766);
        float _2783 = log2(_2488);
        _2580 = (exp2(_2783 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2767 * cbSceneParam._m0[78u].x)) * _2757.x) / cbSceneParam._m0[78u].x)) + _2485;
        _2582 = (exp2(_2783 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2767 * cbSceneParam._m0[78u].y)) * _2757.y) / cbSceneParam._m0[78u].y)) + _2486;
        _2584 = (exp2(_2783 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2767 * cbSceneParam._m0[78u].z)) * _2757.z) / cbSceneParam._m0[78u].z)) + _2487;
        _2586 = _2766 * _2488;
    }
    else
    {
        _2580 = _2485;
        _2582 = _2486;
        _2584 = _2487;
        _2586 = _2488;
    }
    bool _2793;
    vec4 _2596;
    vec4 _2618;
    float _2620;
    float _2624;
    float _2625;
    float _2626;
    float _2627;
    bool _2637;
    for (;;)
    {
        _2596 = cbMatDynParam._m0[0u];
        float _2598 = roundEven(_2596.y);
        bool _2599 = _2598 == 3.0;
        float _2600 = log2(_2586);
        float _2607 = exp2(_2600 * cbSceneParam._m0[78u].x) * _2457;
        float _2608 = exp2(_2600 * cbSceneParam._m0[78u].y) * _2458;
        float _2609 = exp2(_2600 * cbSceneParam._m0[78u].z) * _2459;
        float _2616 = _531 + (-0.5);
        _2618 = cbMtdParam._m0[1u];
        _2620 = _2618.y * _2616;
        float _2623 = (_2598 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2624 = _2623 * (_2599 ? _2607 : (_2607 + (cbSceneParam._m0[72u].w * _2580)));
        _2625 = _2623 * (_2599 ? _2608 : (_2608 + (cbSceneParam._m0[72u].w * _2582)));
        _2626 = _2623 * (_2599 ? _2609 : (_2609 + (cbSceneParam._m0[72u].w * _2584)));
        _2627 = _2616 * 0.999000012874603271484375;
        _2637 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2637)
        {
            if ((cbInstanceData._m0[_605 + 7u].x + _2627) < 0.5)
            {
                _2793 = true;
                break;
            }
        }
        uint _2734 = _607 + uint(_2596.w);
        if ((cbInstanceData._m0[_2734].w < 1.0) && ((cbInstanceData._m0[_2734].w + _2627) < 0.5))
        {
            _2793 = true;
            break;
        }
        if ((_2620 + 1.0) < _2618.x)
        {
            _2793 = true;
            break;
        }
        _2793 = false;
        break;
    }
    float _2998;
    if (_2793)
    {
        discard_state = true;
        _2998 = 0.0;
    }
    else
    {
        _2998 = cbInstanceData._m0[_2460].w;
    }
    SV_Target.x = _2624;
    SV_Target.y = _2625;
    SV_Target.z = _2626;
    SV_Target.w = _2998;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2460].w;
    discard_exit();
}


