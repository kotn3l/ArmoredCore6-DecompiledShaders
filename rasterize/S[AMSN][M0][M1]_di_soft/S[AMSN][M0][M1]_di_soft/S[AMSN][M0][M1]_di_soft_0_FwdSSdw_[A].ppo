#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _930;
float _3344;
float _3345;
float _3346;
float _3347;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _238 = _231.x * cbMtdParam._m0[9u].x;
    float _239 = _231.y * cbMtdParam._m0[9u].y;
    float _240 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _255 = _253.x;
    float _279 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _255)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _255))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3356 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _284 = gl_FragCoord.x * 0.125;
    float _286 = gl_FragCoord.y * 0.125;
    float _296 = float(((_231.w * TEXCOORD_1.z) * (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_284, _286)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _308 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _310 = _308.x;
    vec4 _322 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _326 = _322.z;
    float _330 = (_322.x * 2.0) + (-1.0);
    float _332 = (_322.y * 2.0) + (-1.0);
    float _333 = dot(vec2(_330, _332), vec2(_330, _332));
    float _3367 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _338 = sqrt(1.0 - (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))));
    float _341 = fma(_338, _201 * NORMAL.x, fma(_332, _208 * TANGENT.x, (_194 * _186) * _330));
    float _344 = fma(_338, _201 * NORMAL.y, fma(_332, _208 * TANGENT.y, (_194 * _187) * _330));
    float _347 = fma(_338, _201 * NORMAL.z, fma(_332, _208 * TANGENT.z, (_194 * _188) * _330));
    float _351 = inversesqrt(dot(vec3(_341, _344, _347), vec3(_341, _344, _347)));
    float _352 = _351 * _341;
    float _353 = _351 * _344;
    float _354 = _351 * _347;
    float _3378 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _355 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _3389 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3400 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3411 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3422 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _359 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _373 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _424 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _414);
    float _425 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _414);
    float _426 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _414);
    float _430 = inversesqrt(dot(vec3(_424, _425, _426), vec3(_424, _425, _426)));
    float _431 = _424 * _430;
    float _432 = _425 * _430;
    float _433 = _426 * _430;
    vec4 _434 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_284, _286));
    float _436 = _434.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _611 = sqrt(((_424 * _424) + (_425 * _425)) + (_426 * _426));
        float _617 = (cbMatDynParam._m0[5u].x * _611) + cbMatDynParam._m0[5u].y;
        float _3433 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _622 = (cbMatDynParam._m0[5u].z * _611) + cbMatDynParam._m0[5u].w;
        float _3444 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) - _618)) + _618) < ((_436 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _447 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _448 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _468 = fma(_354, cbSceneParam._m0[5u].z, fma(_353, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _352));
    float _471 = fma(_354, cbSceneParam._m0[6u].z, fma(_353, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _352));
    float _474 = fma(_354, cbSceneParam._m0[7u].z, fma(_353, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _352));
    uint _487 = uint(roundEven(NORMAL.w)) * 13u;
    uint _489 = _487 + 9u;
    uint _490 = _489 + uint(cbMatDynParam._m0[0u].w);
    float _496 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) * cbInstanceData._m0[_490].x;
    float _497 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * cbInstanceData._m0[_490].y;
    float _498 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * cbInstanceData._m0[_490].z;
    float _3455 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _499 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _3466 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _500 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _501 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _502 = 1.0 - _359;
    float _503 = _499 * _502;
    float _504 = _500 * _502;
    float _505 = _501 * _502;
    float _510 = (_499 + (-0.039999999105930328369140625)) * _359;
    float _511 = (_500 + (-0.039999999105930328369140625)) * _359;
    float _512 = (_501 + (-0.039999999105930328369140625)) * _359;
    float _513 = _510 + 0.039999999105930328369140625;
    float _515 = _511 + 0.039999999105930328369140625;
    float _516 = _512 + 0.039999999105930328369140625;
    vec4 _525 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _447, cbSceneParam._m0[86u].y * _448));
    float _528 = _525.x * TEXCOORD_1.w;
    float _529 = dot(vec3(_352, _353, _354), vec3(_431, _432, _433));
    float _532 = _529 * 2.0;
    float _536 = (_532 * _352) - _431;
    float _537 = (_532 * _353) - _432;
    float _538 = (_532 * _354) - _433;
    float _542 = abs(dot(vec3(_431, _432, _433), vec3(_352, _353, _354)));
    float _3488 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _544 = sqrt(_355);
    float _557 = exp2((_544 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_544 * 3.0));
    float _563 = (1.0 - _557) * ((_544 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _564 = _557 * _544;
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _929;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _654 = fma(_600, cbModelParam._m0[26u].z, fma(_596, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _592));
        float _658 = fma(_600, cbModelParam._m0[27u].z, fma(_596, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _592));
        float _662 = fma(_600, cbModelParam._m0[28u].z, fma(_596, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _592));
        float _687 = _592 + _352;
        float _688 = _596 + _353;
        float _689 = _600 + _354;
        float _699 = fma(_689, cbModelParam._m0[26u].z, fma(_688, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687)) - _654;
        float _700 = fma(_689, cbModelParam._m0[27u].z, fma(_688, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687)) - _658;
        float _701 = fma(_689, cbModelParam._m0[28u].z, fma(_688, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687)) - _662;
        float _705 = inversesqrt(dot(vec3(_699, _700, _701), vec3(_699, _700, _701)));
        float _718 = ((_705 * _699) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_654 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _719 = ((_705 * _700) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_658 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _720 = ((_705 * _701) / cbModelParam._m0[34u].z) + ((((((_662 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        float _757 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_723.x + (-0.5));
        float _759 = _757 * (_723.y + (-0.5));
        float _760 = _757 * (_723.z + (-0.5));
        float _767 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_730.x + (-0.5));
        float _769 = _767 * (_730.y + (-0.5));
        float _770 = _767 * (_730.z + (-0.5));
        float _777 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_737.x + (-0.5));
        float _779 = _777 * (_737.y + (-0.5));
        float _780 = _777 * (_737.z + (-0.5));
        float _787 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_744.x + (-0.5));
        float _789 = _787 * (_744.y + (-0.5));
        float _790 = _787 * (_744.z + (-0.5));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = _758 * 0.5;
        float _795 = _768 * 0.5;
        float _796 = _778 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _811 = (dot(vec3(_352, _353, _354), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _821 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3536 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_823 + 1.0))) + _828) * _791;
        float _838 = _759 * 0.5;
        float _839 = _769 * 0.5;
        float _840 = _779 * 0.5;
        float _841 = dot(vec3(_838, _839, _840), vec3(_838, _839, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _854 = (dot(vec3(_352, _353, _354), vec3(_846 * _838, _846 * _839, _846 * _840)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _863 = sqrt(((_839 * _839) + (_838 * _838)) + (_840 * _840)) / (_792 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _865 = _864 * 2.0;
        float _869 = (1.0 - _864) / (_864 + 1.0);
        float _3569 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _879 = ((((1.0 - _870) * (_865 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_865 + 1.0))) + _870) * _792;
        float _880 = _760 * 0.5;
        float _881 = _770 * 0.5;
        float _882 = _780 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _896 = (dot(vec3(_352, _353, _354), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _905 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3602 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_907 + 1.0))) + _912) * _793;
        _929 = _760;
        _931 = _759;
        _932 = _758;
        _933 = _770;
        _934 = _769;
        _935 = _768;
        _936 = _780;
        _937 = _779;
        _938 = _778;
        _939 = _793;
        _940 = _792;
        _941 = _791;
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
        _943 = cbModelParam._m0[36u].z * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
    }
    else
    {
        _929 = _930;
        _931 = _930;
        _932 = _930;
        _933 = _930;
        _934 = _930;
        _935 = _930;
        _936 = _930;
        _937 = _930;
        _938 = _930;
        _939 = _930;
        _940 = _930;
        _941 = _930;
        _942 = 0.0;
        _943 = 0.0;
        _944 = 0.0;
    }
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _973 = fma(_600, cbModelParam._m0[30u].z, fma(_596, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _592));
        float _977 = fma(_600, cbModelParam._m0[31u].z, fma(_596, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _592));
        float _981 = fma(_600, cbModelParam._m0[32u].z, fma(_596, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _592));
        float _1004 = _592 + _352;
        float _1005 = _596 + _353;
        float _1006 = _600 + _354;
        float _1016 = fma(_1006, cbModelParam._m0[30u].z, fma(_1005, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004)) - _973;
        float _1017 = fma(_1006, cbModelParam._m0[31u].z, fma(_1005, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004)) - _977;
        float _1018 = fma(_1006, cbModelParam._m0[32u].z, fma(_1005, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004)) - _981;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_973 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_977 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[35u].z) + ((((((_981 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1072 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1039.x + (-0.5));
        float _1074 = _1072 * (_1039.y + (-0.5));
        float _1075 = _1072 * (_1039.z + (-0.5));
        float _1082 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1046.x + (-0.5));
        float _1084 = _1082 * (_1046.y + (-0.5));
        float _1085 = _1082 * (_1046.z + (-0.5));
        float _1092 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1053.x + (-0.5));
        float _1094 = _1092 * (_1053.y + (-0.5));
        float _1095 = _1092 * (_1053.z + (-0.5));
        float _1102 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1060.x + (-0.5));
        float _1104 = _1102 * (_1060.y + (-0.5));
        float _1105 = _1102 * (_1060.z + (-0.5));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = _1073 * 0.5;
        float _1110 = _1083 * 0.5;
        float _1111 = _1093 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_352, _353, _354), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3665 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1136 + 1.0))) + _1141) * _1106;
        float _1151 = _1074 * 0.5;
        float _1152 = _1084 * 0.5;
        float _1153 = _1094 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_352, _353, _354), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3698 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1178 + 1.0))) + _1183) * _1107;
        float _1193 = _1075 * 0.5;
        float _1194 = _1085 * 0.5;
        float _1195 = _1095 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_352, _353, _354), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3731 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1220 + 1.0))) + _1225) * _1108;
        _1242 = _1075;
        _1243 = _1074;
        _1244 = _1073;
        _1245 = _1085;
        _1246 = _1084;
        _1247 = _1083;
        _1248 = _1095;
        _1249 = _1094;
        _1250 = _1093;
        _1251 = _1108;
        _1252 = _1107;
        _1253 = _1106;
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
    }
    else
    {
        _1242 = _930;
        _1243 = _930;
        _1244 = _930;
        _1245 = _930;
        _1246 = _930;
        _1247 = _930;
        _1248 = _930;
        _1249 = _930;
        _1250 = _930;
        _1251 = _930;
        _1252 = _930;
        _1253 = _930;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _942)) + _942;
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _943)) + _943;
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _944)) + _944;
    float _1289 = fma(_1268, cbSceneParam._m0[89u].z, fma(_1267, cbSceneParam._m0[89u].y, _1266 * cbSceneParam._m0[89u].x));
    float _1292 = fma(_1268, cbSceneParam._m0[90u].z, fma(_1267, cbSceneParam._m0[90u].y, _1266 * cbSceneParam._m0[90u].x));
    float _1295 = fma(_1268, cbSceneParam._m0[91u].z, fma(_1267, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1266));
    float _1310 = _536 * 0.5;
    float _1311 = _537 * 0.5;
    float _1312 = _538 * 0.5;
    float _1313 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1316 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1319 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1353;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1326 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_929, _933, _936, _939));
        float _1330 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_931, _934, _937, _940));
        float _1334 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_932, _935, _938, _941));
        float _1341 = dot(vec4(cbModelParam._m0[39u]), vec4(_1310, _1311, _1312, 1.0));
        _1353 = dot(vec3(isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1341) ? 0.0 : (isnan(0.0) ? _1341 : max(0.0, _1341))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1353 = 1.0;
    }
    float _1364;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1355 = dot(vec4(cbModelParam._m0[40u]), vec4(_1310, _1311, _1312, 1.0));
        _1364 = dot(vec3(isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1355) ? 0.0 : (isnan(0.0) ? _1355 : max(0.0, _1355))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1364 = 1.0;
    }
    float _1368 = (_1364 * cbModelParam._m0[1u].x) + (_1353 * (1.0 - cbModelParam._m0[1u].x));
    float _1378 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _355);
    float _1379 = isnan(_1378) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1378 : min(cbModelParam._m0[25u].z, _1378));
    float _1461;
    float _1463;
    float _1465;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1428 = fma(_600, cbModelParam._m0[13u].z, fma(_596, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _592)) + cbModelParam._m0[13u].w;
        float _1432 = fma(_600, cbModelParam._m0[14u].z, fma(_596, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _592)) + cbModelParam._m0[14u].w;
        float _1436 = fma(_600, cbModelParam._m0[15u].z, fma(_596, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _592)) + cbModelParam._m0[15u].w;
        float _1439 = fma(_538, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _536));
        float _1442 = fma(_538, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _536));
        float _1445 = fma(_538, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _536));
        float _1473;
        if (_1439 > 0.0)
        {
            _1473 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1473 = frontier_phi_17_15_ladder;
        }
        float _1702;
        if (_1442 > 0.0)
        {
            _1702 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1702 = frontier_phi_26_22_ladder;
        }
        float _1959;
        if (_1445 > 0.0)
        {
            _1959 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1959 = frontier_phi_38_33_ladder;
        }
        float _1961 = isnan(_1702) ? _1473 : (isnan(_1473) ? _1702 : min(_1473, _1702));
        float _1962 = isnan(_1959) ? _1961 : (isnan(_1961) ? _1959 : min(_1961, _1959));
        float _1966 = (_1962 * _1439) + _1428;
        float _1967 = (_1962 * _1442) + _1432;
        float _1968 = (_1962 * _1445) + _1436;
        float _1969 = _1962 * 9.9999997473787516355514526367188e-05;
        float _1971 = (-1.0) - _1969;
        float _1973 = _1969 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1968 > _1973) || ((_1968 < _1971) || ((_1967 > _1973) || ((_1967 < _1971) || ((_1966 < _1971) || (_1966 > _1973))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2096 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1968, cbModelParam._m0[9u].z, fma(_1967, cbModelParam._m0[9u].y, _1966 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1968, cbModelParam._m0[10u].z, fma(_1967, cbModelParam._m0[10u].y, _1966 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1968, cbModelParam._m0[11u].z, fma(_1967, cbModelParam._m0[11u].y, _1966 * cbModelParam._m0[11u].x))), _1379);
            frontier_phi_16_38_ladder = _2096.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2096.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2096.x * cbModelParam._m0[1u].y;
        }
        _1461 = frontier_phi_16_38_ladder_2;
        _1463 = frontier_phi_16_38_ladder_1;
        _1465 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_536, _537, _538), _1379);
        _1461 = _1449.x * cbModelParam._m0[1u].y;
        _1463 = _1449.y * cbModelParam._m0[1u].y;
        _1465 = _1449.z * cbModelParam._m0[1u].y;
    }
    float _1469 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _355);
    float _1470 = isnan(_1469) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1469 : min(cbModelParam._m0[25u].w, _1469));
    float _1563;
    float _1565;
    float _1567;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1527 = fma(_600, cbModelParam._m0[21u].z, fma(_596, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _592)) + cbModelParam._m0[21u].w;
        float _1531 = fma(_600, cbModelParam._m0[22u].z, fma(_596, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _592)) + cbModelParam._m0[22u].w;
        float _1535 = fma(_600, cbModelParam._m0[23u].z, fma(_596, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _592)) + cbModelParam._m0[23u].w;
        float _1538 = fma(_538, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _536));
        float _1541 = fma(_538, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _536));
        float _1544 = fma(_538, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _536));
        float _1707;
        if (_1538 > 0.0)
        {
            _1707 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1707 = frontier_phi_28_24_ladder;
        }
        float _1986;
        if (_1541 > 0.0)
        {
            _1986 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1986 = frontier_phi_40_35_ladder;
        }
        float _2199;
        if (_1544 > 0.0)
        {
            _2199 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2199 = frontier_phi_49_46_ladder;
        }
        float _2201 = isnan(_1986) ? _1707 : (isnan(_1707) ? _1986 : min(_1707, _1986));
        float _2202 = isnan(_2199) ? _2201 : (isnan(_2201) ? _2199 : min(_2201, _2199));
        float _2206 = (_2202 * _1538) + _1527;
        float _2207 = (_2202 * _1541) + _1531;
        float _2208 = (_2202 * _1544) + _1535;
        float _2209 = _2202 * 9.9999997473787516355514526367188e-05;
        float _2210 = (-1.0) - _2209;
        float _2212 = _2209 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2208 > _2212) || ((_2208 < _2210) || ((_2207 > _2212) || ((_2207 < _2210) || ((_2206 < _2210) || (_2206 > _2212))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2208, cbModelParam._m0[17u].z, fma(_2207, cbModelParam._m0[17u].y, _2206 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2208, cbModelParam._m0[18u].z, fma(_2207, cbModelParam._m0[18u].y, _2206 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2208, cbModelParam._m0[19u].z, fma(_2207, cbModelParam._m0[19u].y, _2206 * cbModelParam._m0[19u].x))), _1470);
            frontier_phi_25_49_ladder = _2407.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2407.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2407.x * cbModelParam._m0[1u].z;
        }
        _1563 = frontier_phi_25_49_ladder_2;
        _1565 = frontier_phi_25_49_ladder_1;
        _1567 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_536, _537, _538), _1470);
        _1563 = _1547.x * cbModelParam._m0[1u].z;
        _1565 = _1547.y * cbModelParam._m0[1u].z;
        _1567 = _1547.z * cbModelParam._m0[1u].z;
    }
    float _1580 = (((_563 * _513) + _564) * _528) * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1582 = (((_563 * _515) + _564) * _528) * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1584 = (((_563 * _516) + _564) * _528) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1587 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1582, cbSceneParam._m0[89u].y, _1580 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1582, cbSceneParam._m0[90u].y, _1580 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1582, cbSceneParam._m0[91u].y, _1580 * cbSceneParam._m0[91u].x));
    vec4 _1601 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_447, _448));
    float _1603 = _1601.w;
    float _1615 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1603);
    float _1616 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1603);
    float _1617 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1603);
    uvec4 _1621 = floatBitsToUint(cbInstanceData._m0[_487 + 5u]);
    uint _1623 = _1621.x * 14u;
    uint _1624 = _1623 + 13u;
    float _1631 = _528 + (-1.0);
    float _1636 = (cbLight._m0[_1624].x * _1631) + 1.0;
    float _1637 = (cbLight._m0[_1624].y * _1631) + 1.0;
    float _1638 = (cbLight._m0[_1624].z * _1631) + 1.0;
    float _1639 = (cbLight._m0[_1624].w * _1631) + 1.0;
    uint _1640 = _1623 + 5u;
    float _1646 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
    uint _1650 = _1623 + 4u;
    float _1660 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
    uint _1664 = _1623 | 1u;
    float _1675 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_352, _353, _354));
    float _1678 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_352, _353, _354));
    float _3867 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _3878 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _1683 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.3183098733425140380859375;
    float _1685 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.3183098733425140380859375;
    float _1692 = ((cbLight._m0[_1640].x * _1646) * _1685) + (((cbLight._m0[_1650].x * _1615) * _1660) * _1683);
    float _1693 = ((_1646 * cbLight._m0[_1640].y) * _1685) + (((cbLight._m0[_1650].y * _1616) * _1660) * _1683);
    float _1694 = ((_1646 * cbLight._m0[_1640].z) * _1685) + (((cbLight._m0[_1650].z * _1617) * _1660) * _1683);
    uvec4 _1699 = floatBitsToUint(cbLight._m0[_1623 + 12u]);
    bool _1701 = _1699.x == 0u;
    float _1712;
    float _1714;
    float _1716;
    if (_1701)
    {
        _1712 = _1692;
        _1714 = _1693;
        _1716 = _1694;
    }
    else
    {
        uint _1720 = _1623 + 6u;
        float _1736 = (dot(vec3(cbLight._m0[_1623 + 2u].xyz), vec3(_352, _353, _354)) * 0.5) + 0.5;
        float _1737 = _1736 * _1736;
        float _3889 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1739 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _1712 = (((cbLight._m0[_1720].x * 0.3183098733425140380859375) * _1738) * _1739) + _1692;
        _1714 = (((cbLight._m0[_1720].y * 0.3183098733425140380859375) * _1738) * _1739) + _1693;
        _1716 = (((cbLight._m0[_1720].z * 0.3183098733425140380859375) * _1738) * _1739) + _1694;
    }
    bool _1719 = _1699.y == 0u;
    float _1757;
    float _1759;
    float _1761;
    if (_1719)
    {
        _1757 = _1712;
        _1759 = _1714;
        _1761 = _1716;
    }
    else
    {
        uint _1930 = _1623 + 7u;
        float _1946 = (dot(vec3(cbLight._m0[_1623 + 3u].xyz), vec3(_352, _353, _354)) * 0.5) + 0.5;
        float _1947 = _1946 * _1946;
        float _3905 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1948 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1949 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
        _1757 = (((cbLight._m0[_1930].x * 0.3183098733425140380859375) * _1948) * _1949) + _1712;
        _1759 = (((cbLight._m0[_1930].y * 0.3183098733425140380859375) * _1948) * _1949) + _1714;
        _1761 = (((cbLight._m0[_1930].z * 0.3183098733425140380859375) * _1948) * _1949) + _1716;
    }
    uint _1764 = _1623 + 8u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1623].w)) * _355) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1623].x + _431;
    float _1780 = cbLight._m0[_1623].y + _432;
    float _1781 = cbLight._m0[_1623].z + _433;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1623].xyz));
    float _3921 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _1793 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1794 = dot(vec3(_352, _353, _354), vec3(_1786, _1787, _1788));
    float _3943 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1798 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_1786, _1787, _1788));
    float _3954 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1802 = _1778 * _1778;
    float _1806 = ((_1797 * _1797) * (_1802 + (-1.0))) + 1.0;
    float _1814 = exp2(log2(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * 5.0);
    float _1815 = 0.959999978542327880859375 - _510;
    float _1817 = 0.959999978542327880859375 - _511;
    float _1818 = 0.959999978542327880859375 - _512;
    float _1825 = 1.0 - _1778;
    float _1836 = (0.5 / (((_1793 * ((_1792 * _1825) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1825) + _1778) * _1792))) * _1792;
    float _3965 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1838 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1802 / ((_1806 * _1806) * 3.141590118408203125));
    uint _1852 = _1623 + 9u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1664].w)) * _355) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1664].x + _431;
    float _1866 = cbLight._m0[_1664].y + _432;
    float _1867 = cbLight._m0[_1664].z + _433;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1664].xyz));
    float _3976 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1879 = dot(vec3(_352, _353, _354), vec3(_1872, _1873, _1874));
    float _3987 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1883 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_1872, _1873, _1874));
    float _3998 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1887 = _1864 * _1864;
    float _1891 = ((_1882 * _1882) * (_1887 + (-1.0))) + 1.0;
    float _1898 = exp2(log2(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * 5.0);
    float _1905 = 1.0 - _1864;
    float _1915 = (0.5 / (((_1793 * ((_1878 * _1905) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1905) + _1864) * _1878))) * _1878;
    float _4009 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1887 / ((_1891 * _1891) * 3.141590118408203125));
    float _1927 = (((((_1898 * _1815) + _513) * cbLight._m0[_1852].x) * _1917) * _1646) + ((((cbLight._m0[_1764].x * _1615) * ((_1814 * _1815) + _513)) * _1838) * _1660);
    float _1928 = (((((_1898 * _1817) + _515) * cbLight._m0[_1852].y) * _1917) * _1646) + ((((cbLight._m0[_1764].y * _1616) * ((_1814 * _1817) + _515)) * _1838) * _1660);
    float _1929 = (((((_1898 * _1818) + _516) * cbLight._m0[_1852].z) * _1917) * _1646) + ((((cbLight._m0[_1764].z * _1617) * ((_1814 * _1818) + _516)) * _1838) * _1660);
    float _1991;
    float _1993;
    float _1995;
    if (_1701)
    {
        _1991 = _1927;
        _1993 = _1928;
        _1995 = _1929;
    }
    else
    {
        uint _1997 = _1623 + 2u;
        uint _2001 = _1623 + 10u;
        float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _355) * 0.949999988079071044921875);
        float _2016 = _2015 * _2015;
        float _2017 = cbLight._m0[_1997].x + _431;
        float _2018 = cbLight._m0[_1997].y + _432;
        float _2019 = cbLight._m0[_1997].z + _433;
        float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
        float _2024 = _2023 * _2017;
        float _2025 = _2023 * _2018;
        float _2026 = _2023 * _2019;
        float _2027 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1997].xyz));
        float _4020 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2030 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _2031 = dot(vec3(_352, _353, _354), vec3(_2024, _2025, _2026));
        float _4031 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2034 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2035 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2024, _2025, _2026));
        float _4042 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2039 = _2016 * _2016;
        float _2043 = ((_2034 * _2034) * (_2039 + (-1.0))) + 1.0;
        float _2050 = exp2(log2(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * 5.0);
        float _2057 = 1.0 - _2016;
        float _2067 = (0.5 / (((_1793 * ((_2030 * _2057) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2057) + _2016) * _2030))) * _2030;
        float _4053 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2069 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_2039 / ((_2043 * _2043) * 3.141590118408203125));
        float _2070 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _1991 = (((((_2050 * _1815) + _513) * cbLight._m0[_2001].x) * _2069) * _2070) + _1927;
        _1993 = (((((_2050 * _1817) + _515) * cbLight._m0[_2001].y) * _2069) * _2070) + _1928;
        _1995 = (((((_2050 * _1818) + _516) * cbLight._m0[_2001].z) * _2069) * _2070) + _1929;
    }
    float _2105;
    float _2107;
    float _2109;
    if (_1719)
    {
        _2105 = _1991;
        _2107 = _1993;
        _2109 = _1995;
    }
    else
    {
        uint _2116 = _1623 + 3u;
        uint _2120 = _1623 + 11u;
        float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _355) * 0.949999988079071044921875);
        float _2135 = _2134 * _2134;
        float _2136 = cbLight._m0[_2116].x + _431;
        float _2137 = cbLight._m0[_2116].y + _432;
        float _2138 = cbLight._m0[_2116].z + _433;
        float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
        float _2143 = _2142 * _2136;
        float _2144 = _2142 * _2137;
        float _2145 = _2142 * _2138;
        float _2146 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_2116].xyz));
        float _4069 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2150 = dot(vec3(_352, _353, _354), vec3(_2143, _2144, _2145));
        float _4080 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2154 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2143, _2144, _2145));
        float _4091 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2158 = _2135 * _2135;
        float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
        float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * 5.0);
        float _2176 = 1.0 - _2135;
        float _2186 = (0.5 / (((_1793 * ((_2149 * _2176) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2176) + _2135) * _2149))) * _2149;
        float _4102 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2188 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
        float _2189 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
        _2105 = (((((_2169 * _1815) + _513) * cbLight._m0[_2120].x) * _2188) * _2189) + _1991;
        _2107 = (((((_2169 * _1817) + _515) * cbLight._m0[_2120].y) * _2188) * _2189) + _1993;
        _2109 = (((((_2169 * _1818) + _516) * cbLight._m0[_2120].z) * _2188) * _2189) + _1995;
    }
    float _2324;
    float _2326;
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    if (_1621.y == 0u)
    {
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2264;
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2264;
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2264;
        uvec4 _2279 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2280 = _2279.x;
        uint _2291 = uint((float(_2279.y) * floor(float(uint(cbSceneParam._m0[85u].y * _448) / _2280))) + floor(float(uint(cbSceneParam._m0[85u].x * _447) / _2280)));
        float _2301 = (log2(_2267 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2302 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        uint _2305 = uint(isnan(14.0) ? _2302 : (isnan(_2302) ? 14.0 : min(_2302, 14.0)));
        uvec4 _2310 = texelFetch(g_lightClusterGridBuffer, int(((_2305 << 2u) + (_2291 << 6u)) >> 2u));
        uint _2311 = _2310.x;
        uint _2312 = _2279.z;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        if (((((1u << ((_2312 >> 4u) & 15u)) + 4294967295u) & _2311) == 0u) || ((_2312 & 240u) == 0u))
        {
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
        }
        else
        {
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            uint _2570 = 0u;
            uint _2579;
            bool _2580;
            for (;;)
            {
                _2579 = texelFetch(g_lightClassification, int((((_2305 << 5u) + (_2291 << 9u)) + (_2570 << 2u)) >> 2u)).x;
                _2580 = _2579 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2580)
                {
                    frontier_phi_66_pred = _2564;
                    frontier_phi_66_pred_1 = _2569;
                    frontier_phi_66_pred_2 = _2568;
                    frontier_phi_66_pred_3 = _2567;
                    frontier_phi_66_pred_4 = _2566;
                    frontier_phi_66_pred_5 = _2565;
                }
                else
                {
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    uint _2715;
                    _2709 = _2564;
                    _2710 = _2565;
                    _2711 = _2566;
                    _2712 = _2567;
                    _2713 = _2568;
                    _2714 = _2569;
                    _2715 = _2579;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    for (;;)
                    {
                        uint _2719 = uint(findLSB(_2715)) + (_2570 << 5u);
                        uint _2716 = (_2715 + 4294967295u) & _2715;
                        uint _2721 = _2719 * 48u;
                        vec4 _2735 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2721)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 3u)).x));
                        uint _2741 = (_2719 * 48u) + 4u;
                        vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 3u)).x));
                        uint _2760 = (_2719 * 48u) + 8u;
                        vec3 _2771 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x));
                        float _2775 = _2735.x - _2265;
                        float _2776 = _2735.y - _2266;
                        float _2777 = _2735.z - _2267;
                        float _2778 = dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777));
                        float _2781 = inversesqrt(_2778);
                        float _2782 = _2781 * _2775;
                        float _2783 = _2781 * _2776;
                        float _2784 = _2781 * _2777;
                        float _2785 = dot(vec3(_468, _471, _474), vec3(_2782, _2783, _2784));
                        float _2790 = 1.0 - (_2778 * _2735.w);
                        float _4128 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2791 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
                        float _2792 = sqrt(_2778) * _2754.w;
                        float _2795 = 1.39999997615814208984375 / (_2792 + 1.39999997615814208984375);
                        float _2796 = _2795 * _2795;
                        float _2799 = ((1.0 - _2796) * _2785) + _2796;
                        float _2802 = _2792 * _2792;
                        float _2806 = ((isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0))) * _2791) / ((_2802 * 0.699999988079071044921875) + 1.0);
                        float _2810 = (-0.0) - _2265;
                        float _2811 = (-0.0) - _2266;
                        float _2812 = (-0.0) - _2267;
                        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
                        float _2817 = _2816 * _2810;
                        float _2818 = _2816 * _2811;
                        float _2819 = _2816 * _2812;
                        float _2827 = exp2(log2(1.0 / ((_2802 * 3.5) + 5.0)) * 0.25);
                        float _2828 = 1.0 - _544;
                        float _2835 = sqrt(1.0 - ((1.0 - (_2828 * _2828)) * (1.0 - (_2827 * _2827))));
                        float _2836 = _2835 * _2835;
                        float _2837 = _2836 * _2836;
                        float _2838 = _2817 + _2782;
                        float _2839 = _2818 + _2783;
                        float _2840 = _2819 + _2784;
                        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
                        float _2848 = dot(vec3(_468, _471, _474), vec3(_2817, _2818, _2819));
                        float _4144 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2851 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2852 = dot(vec3(_468, _471, _474), vec3(_2844 * _2838, _2844 * _2839, _2844 * _2840));
                        float _4155 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2855 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2859 = ((_2855 * _2855) * (_2837 + (-1.0))) + 1.0;
                        float _2860 = _2795 * _2836;
                        float _2861 = _2860 * _2860;
                        float _2864 = ((1.0 - _2861) * _2785) + _2861;
                        float _4166 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2865 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2866 = 1.0 - _2836;
                        float _2876 = (0.5 / (((_2865 * ((_2851 * _2866) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2865 * _2866) + _2836) * _2851))) * _2865;
                        float _4177 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2887 = (((_2837 * 3.1415927410125732421875) * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) / ((_2859 * _2859) * ((_2802 * 2.1991131305694580078125) + 3.141590118408203125))) * _2791;
                        _2639 = (_2806 * _2754.x) + _2712;
                        _2640 = (_2806 * _2754.y) + _2713;
                        _2641 = (_2806 * _2754.z) + _2714;
                        _2636 = (_2887 * _2771.x) + _2709;
                        _2637 = (_2887 * _2771.y) + _2710;
                        _2638 = (_2887 * _2771.z) + _2711;
                        if (_2716 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2709 = _2636;
                            _2710 = _2637;
                            _2711 = _2638;
                            _2712 = _2639;
                            _2713 = _2640;
                            _2714 = _2641;
                            _2715 = _2716;
                        }
                    }
                    frontier_phi_66_pred = _2636;
                    frontier_phi_66_pred_1 = _2641;
                    frontier_phi_66_pred_2 = _2640;
                    frontier_phi_66_pred_3 = _2639;
                    frontier_phi_66_pred_4 = _2638;
                    frontier_phi_66_pred_5 = _2637;
                }
                _2413 = frontier_phi_66_pred;
                _2423 = frontier_phi_66_pred_1;
                _2421 = frontier_phi_66_pred_2;
                _2419 = frontier_phi_66_pred_3;
                _2417 = frontier_phi_66_pred_4;
                _2415 = frontier_phi_66_pred_5;
                uint _2571 = _2570 + 1u;
                if (_2571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2564 = _2413;
                    _2565 = _2415;
                    _2566 = _2417;
                    _2567 = _2419;
                    _2568 = _2421;
                    _2569 = _2423;
                    _2570 = _2571;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
        }
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.z;
        uint _2429 = (_2427 >> 8u) & 15u;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        if (((4294967295u << _2429) & _2311) == 0u)
        {
            _2532 = _2412;
            _2534 = _2414;
            _2536 = _2416;
            _2538 = _2418;
            _2540 = _2420;
            _2542 = _2422;
        }
        else
        {
            float _2557 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
            float _2558 = _2557 * _2265;
            float _2559 = _2557 * _2266;
            float _2560 = _2557 * _2267;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2429 < ((_2427 >> 12u) & 15u))
            {
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2692 = _2412;
                float _2693 = _2414;
                float _2694 = _2416;
                float _2695 = _2418;
                float _2696 = _2420;
                float _2697 = _2422;
                uint _2698 = _2429;
                uint _2707;
                bool _2708;
                for (;;)
                {
                    _2707 = texelFetch(g_lightClassification, int((((_2305 << 5u) + (_2291 << 9u)) + (_2698 << 2u)) >> 2u)).x;
                    _2708 = _2707 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2708)
                    {
                        frontier_phi_77_pred = _2697;
                        frontier_phi_77_pred_1 = _2696;
                        frontier_phi_77_pred_2 = _2695;
                        frontier_phi_77_pred_3 = _2694;
                        frontier_phi_77_pred_4 = _2693;
                        frontier_phi_77_pred_5 = _2692;
                    }
                    else
                    {
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _2914 = _2692;
                        float _2915 = _2693;
                        float _2916 = _2694;
                        float _2917 = _2695;
                        float _2918 = _2696;
                        float _2919 = _2697;
                        uint _2920 = _2707;
                        uint _2921;
                        vec4 _2946;
                        float _2947;
                        vec4 _2962;
                        vec3 _2974;
                        vec4 _2990;
                        vec4 _3006;
                        float _3053;
                        bool _3054;
                        for (;;)
                        {
                            uint _2931 = ((_2698 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2920));
                            _2921 = (_2920 + 4294967295u) & _2920;
                            uint _2933 = _2931 * 40u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            _2947 = _2946.w;
                            uint _2949 = (_2931 * 40u) + 4u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2964 = (_2931 * 40u) + 8u;
                            _2974 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x));
                            uint _2977 = (_2931 * 40u) + 16u;
                            _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2993 = (_2931 * 40u) + 20u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3009 = (_2931 * 40u) + 24u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3028 = (_2931 * 40u) + 28u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3053 = fma(_2267, _3041.z, fma(_2266, _3041.y, _3041.x * _2265)) + _3041.w;
                            _3054 = !((fma(_2267, _3022.z, fma(_2266, _3022.y, _3022.x * _2265)) + _3022.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3054)
                            {
                                float _3081 = _2946.x - _2265;
                                float _3082 = _2946.y - _2266;
                                float _3083 = _2946.z - _2267;
                                float _3084 = dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083));
                                float _3087 = inversesqrt(_3084);
                                float _3088 = _3087 * _3081;
                                float _3089 = _3087 * _3082;
                                float _3090 = _3087 * _3083;
                                float _3094 = 1.0 - (_3084 / (_2947 * _2947));
                                float _4188 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                                float _3099 = sqrt(_3084) * _2962.w;
                                float _3101 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                                float _3102 = _3101 * _3101;
                                float _3105 = ((1.0 - _3102) * dot(vec3(_3088, _3089, _3090), vec3(_468, _471, _474))) + _3102;
                                float _3108 = _3099 * _3099;
                                float _3112 = (fma(_2267, _2990.z, fma(_2266, _2990.y, _2990.x * _2265)) + _2990.w) / _3053;
                                float _3113 = (fma(_2267, _3006.z, fma(_2266, _3006.y, _3006.x * _2265)) + _3006.w) / _3053;
                                float _3117 = 1.0 - dot(vec2(_3112, _3113), vec2(_3112, _3113));
                                float _4204 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3119 = _3118 * (((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3095) / ((_3108 * 0.699999988079071044921875) + 1.0));
                                float _3131 = exp2(log2(1.0 / ((_3108 * 3.5) + 5.0)) * 0.25);
                                float _3132 = 1.0 - _544;
                                float _3139 = sqrt(1.0 - ((1.0 - (_3132 * _3132)) * (1.0 - (_3131 * _3131))));
                                float _3140 = _3139 * _3139;
                                float _3141 = _3140 * _3140;
                                float _3142 = _3088 - _2558;
                                float _3143 = _3089 - _2559;
                                float _3144 = _3090 - _2560;
                                float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                                float _3152 = dot(vec3(_468, _471, _474), vec3((-0.0) - _2558, (-0.0) - _2559, (-0.0) - _2560));
                                float _4215 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3155 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3156 = dot(vec3(_468, _471, _474), vec3(_3148 * _3142, _3148 * _3143, _3148 * _3144));
                                float _4226 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3159 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3163 = ((_3159 * _3159) * (_3141 + (-1.0))) + 1.0;
                                float _3164 = _3101 * _3140;
                                float _3165 = _3164 * _3164;
                                float _3171 = ((1.0 - _3165) * dot(vec3(_468, _471, _474), vec3(_3088, _3089, _3090))) + _3165;
                                float _4237 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3173 = 1.0 - _3140;
                                float _3183 = (0.5 / (((_3172 * ((_3155 * _3173) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_3172 * _3173) + _3140) * _3155))) * _3172;
                                float _4248 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3193 = (_3118 * _3095) * (((_3141 * 3.1415927410125732421875) * (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) / ((_3163 * _3163) * ((_3108 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3119 * _2962.y;
                                frontier_phi_83_pred_1 = _3119 * _2962.x;
                                frontier_phi_83_pred_2 = _3193 * _2974.z;
                                frontier_phi_83_pred_3 = _3193 * _2974.y;
                                frontier_phi_83_pred_4 = _3193 * _2974.x;
                                frontier_phi_83_pred_5 = _3119 * _2962.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3201 = frontier_phi_83_pred;
                            _3200 = frontier_phi_83_pred_1;
                            _3199 = frontier_phi_83_pred_2;
                            _3198 = frontier_phi_83_pred_3;
                            _3197 = frontier_phi_83_pred_4;
                            _3202 = frontier_phi_83_pred_5;
                            _2904 = _3200 + _2917;
                            _2905 = _3201 + _2918;
                            _2906 = _3202 + _2919;
                            _2901 = _3197 + _2914;
                            _2902 = _3198 + _2915;
                            _2903 = _3199 + _2916;
                            if (_2921 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2921;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2906;
                        frontier_phi_77_pred_1 = _2905;
                        frontier_phi_77_pred_2 = _2904;
                        frontier_phi_77_pred_3 = _2903;
                        frontier_phi_77_pred_4 = _2902;
                        frontier_phi_77_pred_5 = _2901;
                    }
                    _2543 = frontier_phi_77_pred;
                    _2541 = frontier_phi_77_pred_1;
                    _2539 = frontier_phi_77_pred_2;
                    _2537 = frontier_phi_77_pred_3;
                    _2535 = frontier_phi_77_pred_4;
                    _2533 = frontier_phi_77_pred_5;
                    uint _2699 = _2698 + 1u;
                    if (_2699 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2692 = _2533;
                        _2693 = _2535;
                        _2694 = _2537;
                        _2695 = _2539;
                        _2696 = _2541;
                        _2697 = _2543;
                        _2698 = _2699;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2537;
                frontier_phi_58_59_ladder_1 = _2543;
                frontier_phi_58_59_ladder_2 = _2541;
                frontier_phi_58_59_ladder_3 = _2539;
                frontier_phi_58_59_ladder_4 = _2535;
                frontier_phi_58_59_ladder_5 = _2533;
            }
            else
            {
                frontier_phi_58_59_ladder = _2416;
                frontier_phi_58_59_ladder_1 = _2422;
                frontier_phi_58_59_ladder_2 = _2420;
                frontier_phi_58_59_ladder_3 = _2418;
                frontier_phi_58_59_ladder_4 = _2414;
                frontier_phi_58_59_ladder_5 = _2412;
            }
            _2532 = frontier_phi_58_59_ladder_5;
            _2534 = frontier_phi_58_59_ladder_4;
            _2536 = frontier_phi_58_59_ladder;
            _2538 = frontier_phi_58_59_ladder_3;
            _2540 = frontier_phi_58_59_ladder_2;
            _2542 = frontier_phi_58_59_ladder_1;
        }
        float _2547 = isnan(1.0) ? _528 : (isnan(_528) ? 1.0 : min(_528, 1.0));
        _2324 = (_2547 * _2538) + _1757;
        _2326 = (_2547 * _2540) + _1759;
        _2328 = (_2547 * _2542) + _1761;
        _2330 = ((_2532 * _513) * _2547) + _2105;
        _2332 = ((_2534 * _515) * _2547) + _2107;
        _2334 = ((_2536 * _516) * _2547) + _2109;
    }
    else
    {
        _2324 = _1757;
        _2326 = _1759;
        _2328 = _1761;
        _2330 = _2105;
        _2332 = _2107;
        _2334 = _2109;
    }
    float _4264 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _4275 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _4286 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _2351 = ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2324 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _528))) + ((_2330 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1368)) * cbPerFrame._m0[3u].x);
    float _2352 = ((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2326 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _528))) + ((_2332 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1368)) * cbPerFrame._m0[3u].x);
    float _2353 = ((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2328 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _528))) + ((_2334 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1368)) * cbPerFrame._m0[3u].x);
    uint _2354 = _487 + 6u;
    float _2362 = _447 / cbSceneParam._m0[86u].x;
    float _2363 = _448 / cbSceneParam._m0[86u].y;
    vec4 _2377 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, (log2((isnan(cbSceneParam._m0[77u].w) ? _373 : (isnan(_373) ? cbSceneParam._m0[77u].w : min(_373, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2379 = _2377.x;
    float _2380 = _2377.y;
    float _2381 = _2377.z;
    float _2382 = _2377.w;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    if (_373 > cbSceneParam._m0[78u].w)
    {
        float _2437 = isnan(_373) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _373 : min(cbSceneParam._m0[80u].w, _373));
        float _2438 = _2437 / _373;
        float _2449 = _2438 * _424;
        float _2450 = _425 * _2438;
        float _2451 = (-0.0) - _2450;
        float _2452 = _2438 * _426;
        float _2454 = (cbSceneParam._m0[77u].w * _2451) / _2437;
        float _2455 = _2454 + cbSceneParam._m0[79u].w;
        float _2456 = cbSceneParam._m0[79u].w - _2450;
        float _2462 = sqrt(((_2449 * _2449) + (_2450 * _2450)) + (_2452 * _2452));
        float _2465 = (1.0 - (cbSceneParam._m0[77u].w / _2437)) * _2462;
        float _2470 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2472 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2649;
        if (abs((_2451 - _2454) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2649 = ((((_2455 > 0.0) ? exp2(_2470 * _2455) : (2.0 - exp2(_2472 * _2455))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2465;
        }
        else
        {
            float _2593 = 1.0 / cbSceneParam._m0[80u].x;
            float _2594 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : max(_2455, _2456));
            float _2595 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : min(_2455, _2456));
            float _2604 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : min(_2594, 0.0));
            float _2605 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : min(_2595, 0.0));
            _2649 = ((abs(_2462 / _2451) * cbSceneParam._m0[80u].y) * ((((_2604 - _2605) * 2.0) - ((exp2(_2470 * (isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0)))) - exp2(_2470 * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0))))) * _2593)) - ((exp2(_2472 * _2604) - exp2(_2472 * _2605)) * _2593))) + (_2465 * cbSceneParam._m0[80u].z);
        }
        vec4 _2651 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, 1.0), 0.0);
        float _2660 = exp2((_2649 * (-1.44269502162933349609375)) * (1.0 - _2651.w));
        float _2661 = log2(_2660);
        float _2677 = log2(_2382);
        _2474 = (exp2(_2677 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].x)) * _2651.x) / cbSceneParam._m0[78u].x)) + _2379;
        _2476 = (exp2(_2677 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].y)) * _2651.y) / cbSceneParam._m0[78u].y)) + _2380;
        _2478 = (exp2(_2677 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].z)) * _2651.z) / cbSceneParam._m0[78u].z)) + _2381;
        _2480 = _2660 * _2382;
    }
    else
    {
        _2474 = _2379;
        _2476 = _2380;
        _2478 = _2381;
        _2480 = _2382;
    }
    bool _2687;
    vec4 _2490;
    vec4 _2512;
    float _2514;
    float _2518;
    float _2519;
    float _2520;
    float _2521;
    bool _2531;
    for (;;)
    {
        _2490 = cbMatDynParam._m0[0u];
        float _2492 = roundEven(_2490.y);
        bool _2493 = _2492 == 3.0;
        float _2494 = log2(_2480);
        float _2501 = exp2(_2494 * cbSceneParam._m0[78u].x) * _2351;
        float _2502 = exp2(_2494 * cbSceneParam._m0[78u].y) * _2352;
        float _2503 = exp2(_2494 * cbSceneParam._m0[78u].z) * _2353;
        float _2510 = _436 + (-0.5);
        _2512 = cbMtdParam._m0[1u];
        _2514 = _2512.y * _2510;
        float _2517 = (_2492 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2518 = _2517 * (_2493 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2474)));
        _2519 = _2517 * (_2493 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2476)));
        _2520 = _2517 * (_2493 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2478)));
        _2521 = _2510 * 0.999000012874603271484375;
        _2531 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2531)
        {
            if ((cbInstanceData._m0[_487 + 7u].x + _2521) < 0.5)
            {
                _2687 = true;
                break;
            }
        }
        uint _2628 = _489 + uint(_2490.w);
        if ((cbInstanceData._m0[_2628].w < 1.0) && ((cbInstanceData._m0[_2628].w + _2521) < 0.5))
        {
            _2687 = true;
            break;
        }
        if ((_2514 + _296) < _2512.x)
        {
            _2687 = true;
            break;
        }
        _2687 = false;
        break;
    }
    float _2892;
    if (_2687)
    {
        discard_state = true;
        _2892 = 0.0;
    }
    else
    {
        _2892 = cbInstanceData._m0[_2354].w;
    }
    SV_Target.x = _2518;
    SV_Target.y = _2519;
    SV_Target.z = _2520;
    SV_Target.w = _2892;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2354].w;
    discard_exit();
}


