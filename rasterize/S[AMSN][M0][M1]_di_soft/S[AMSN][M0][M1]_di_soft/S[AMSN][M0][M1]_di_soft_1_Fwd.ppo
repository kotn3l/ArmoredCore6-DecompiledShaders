#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _796;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _173 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _174 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _180 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _187 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _217 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _223 = _217.x * cbMtdParam._m0[9u].x;
    float _224 = _217.y * cbMtdParam._m0[9u].y;
    float _225 = _217.z * cbMtdParam._m0[9u].z;
    vec4 _237 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _241 = _237.z;
    float _245 = (_237.x * 2.0) + (-1.0);
    float _247 = (_237.y * 2.0) + (-1.0);
    float _248 = dot(vec2(_245, _247), vec2(_245, _247));
    float _3112 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _254 = sqrt(1.0 - (isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0))));
    float _257 = fma(_254, _187 * NORMAL.x, fma(_247, _194 * TANGENT.x, (_180 * _172) * _245));
    float _260 = fma(_254, _187 * NORMAL.y, fma(_247, _194 * TANGENT.y, (_180 * _173) * _245));
    float _263 = fma(_254, _187 * NORMAL.z, fma(_247, _194 * TANGENT.z, (_180 * _174) * _245));
    float _267 = inversesqrt(dot(vec3(_257, _260, _263), vec3(_257, _260, _263)));
    float _268 = _267 * _257;
    float _269 = _267 * _260;
    float _270 = _267 * _263;
    float _3123 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _271 = isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0));
    float _3134 = isnan(0.0) ? _223 : (isnan(_223) ? 0.0 : max(_223, 0.0));
    float _3145 = isnan(0.0) ? _224 : (isnan(_224) ? 0.0 : max(_224, 0.0));
    float _3156 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _290 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _332 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _342 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _332);
    float _343 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _332);
    float _344 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _332);
    float _348 = inversesqrt(dot(vec3(_342, _343, _344), vec3(_342, _343, _344)));
    float _349 = _342 * _348;
    float _350 = _343 * _348;
    float _351 = _344 * _348;
    float _357 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _358 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _379 = fma(_270, cbSceneParam._m0[5u].z, fma(_269, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _268));
    float _382 = fma(_270, cbSceneParam._m0[6u].z, fma(_269, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _268));
    float _385 = fma(_270, cbSceneParam._m0[7u].z, fma(_269, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _268));
    uint _398 = uint(roundEven(NORMAL.w)) * 13u;
    uint _401 = (_398 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _407 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0)))) * cbInstanceData._m0[_401].x;
    float _408 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0)))) * cbInstanceData._m0[_401].y;
    float _409 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0)))) * cbInstanceData._m0[_401].z;
    float _3167 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _410 = isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0));
    float _3178 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _411 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
    float _3189 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _412 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
    vec4 _421 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _357, cbSceneParam._m0[86u].y * _358));
    float _424 = _421.x * TEXCOORD_1.w;
    float _425 = dot(vec3(_268, _269, _270), vec3(_349, _350, _351));
    float _428 = _425 * 2.0;
    float _432 = (_428 * _268) - _349;
    float _433 = (_428 * _269) - _350;
    float _434 = (_428 * _270) - _351;
    float _438 = abs(dot(vec3(_349, _350, _351), vec3(_268, _269, _270)));
    float _3200 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _440 = sqrt(_271);
    float _453 = exp2((_440 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_440 * 3.0));
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _489 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _493 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _795;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _520 = fma(_493, cbModelParam._m0[26u].z, fma(_489, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _485));
        float _524 = fma(_493, cbModelParam._m0[27u].z, fma(_489, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _485));
        float _528 = fma(_493, cbModelParam._m0[28u].z, fma(_489, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _485));
        float _553 = _485 + _268;
        float _554 = _489 + _269;
        float _555 = _493 + _270;
        float _565 = fma(_555, cbModelParam._m0[26u].z, fma(_554, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _553)) - _520;
        float _566 = fma(_555, cbModelParam._m0[27u].z, fma(_554, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _553)) - _524;
        float _567 = fma(_555, cbModelParam._m0[28u].z, fma(_554, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _553)) - _528;
        float _571 = inversesqrt(dot(vec3(_565, _566, _567), vec3(_565, _566, _567)));
        float _584 = ((_571 * _565) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_520 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _585 = ((_571 * _566) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_524 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _586 = ((_571 * _567) / cbModelParam._m0[34u].z) + ((((((_528 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _589 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_584, _585, _586), 0.0);
        vec4 _596 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_584, _585, _586), 0.0);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_584, _585, _586), 0.0);
        vec4 _610 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_584, _585, _586), 0.0);
        float _623 = exp2((_589.w + (-0.5)) * 20.0) * 2.0;
        float _624 = _623 * (_589.x + (-0.5));
        float _625 = _623 * (_589.y + (-0.5));
        float _626 = _623 * (_589.z + (-0.5));
        float _633 = exp2((_596.w + (-0.5)) * 20.0) * 2.0;
        float _634 = _633 * (_596.x + (-0.5));
        float _635 = _633 * (_596.y + (-0.5));
        float _636 = _633 * (_596.z + (-0.5));
        float _643 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _644 = _643 * (_603.x + (-0.5));
        float _645 = _643 * (_603.y + (-0.5));
        float _646 = _643 * (_603.z + (-0.5));
        float _653 = exp2((_610.w + (-0.5)) * 20.0) * 2.0;
        float _654 = _653 * (_610.x + (-0.5));
        float _655 = _653 * (_610.y + (-0.5));
        float _656 = _653 * (_610.z + (-0.5));
        float _657 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _658 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _659 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _660 = _624 * 0.5;
        float _661 = _634 * 0.5;
        float _662 = _644 * 0.5;
        float _663 = dot(vec3(_660, _661, _662), vec3(_660, _661, _662));
        float _668 = (_663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_663);
        float _677 = (dot(vec3(_268, _269, _270), vec3(_668 * _660, _668 * _661, _668 * _662)) + 1.0) * 0.5;
        float _3226 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _687 = sqrt(((_661 * _661) + (_660 * _660)) + (_662 * _662)) / (_657 + 9.9999997473787516355514526367188e-06);
        float _3237 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _689 = _688 * 2.0;
        float _693 = (1.0 - _688) / (_688 + 1.0);
        float _3248 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _694 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _703 = ((((1.0 - _694) * (_689 + 2.0)) * exp2(log2(isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * (_689 + 1.0))) + _694) * _657;
        float _704 = _625 * 0.5;
        float _705 = _635 * 0.5;
        float _706 = _645 * 0.5;
        float _707 = dot(vec3(_704, _705, _706), vec3(_704, _705, _706));
        float _712 = (_707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_707);
        float _720 = (dot(vec3(_268, _269, _270), vec3(_712 * _704, _712 * _705, _712 * _706)) + 1.0) * 0.5;
        float _3259 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _729 = sqrt(((_705 * _705) + (_704 * _704)) + (_706 * _706)) / (_658 + 9.9999997473787516355514526367188e-06);
        float _3270 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _731 = _730 * 2.0;
        float _735 = (1.0 - _730) / (_730 + 1.0);
        float _3281 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _745 = ((((1.0 - _736) * (_731 + 2.0)) * exp2(log2(isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (_731 + 1.0))) + _736) * _658;
        float _746 = _626 * 0.5;
        float _747 = _636 * 0.5;
        float _748 = _646 * 0.5;
        float _749 = dot(vec3(_746, _747, _748), vec3(_746, _747, _748));
        float _754 = (_749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_749);
        float _762 = (dot(vec3(_268, _269, _270), vec3(_754 * _746, _754 * _747, _754 * _748)) + 1.0) * 0.5;
        float _3292 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _771 = sqrt(((_747 * _747) + (_746 * _746)) + (_748 * _748)) / (_659 + 9.9999997473787516355514526367188e-06);
        float _3303 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _773 = _772 * 2.0;
        float _777 = (1.0 - _772) / (_772 + 1.0);
        float _3314 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _787 = ((((1.0 - _778) * (_773 + 2.0)) * exp2(log2(isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * (_773 + 1.0))) + _778) * _659;
        _795 = _626;
        _797 = _625;
        _798 = _624;
        _799 = _636;
        _800 = _635;
        _801 = _634;
        _802 = _646;
        _803 = _645;
        _804 = _644;
        _805 = _659;
        _806 = _658;
        _807 = _657;
        _808 = cbModelParam._m0[36u].z * (isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0)));
        _809 = cbModelParam._m0[36u].z * (isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0)));
        _810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0)));
    }
    else
    {
        _795 = _796;
        _797 = _796;
        _798 = _796;
        _799 = _796;
        _800 = _796;
        _801 = _796;
        _802 = _796;
        _803 = _796;
        _804 = _796;
        _805 = _796;
        _806 = _796;
        _807 = _796;
        _808 = 0.0;
        _809 = 0.0;
        _810 = 0.0;
    }
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _836 = fma(_493, cbModelParam._m0[30u].z, fma(_489, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _485));
        float _840 = fma(_493, cbModelParam._m0[31u].z, fma(_489, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _485));
        float _844 = fma(_493, cbModelParam._m0[32u].z, fma(_489, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _485));
        float _867 = _485 + _268;
        float _868 = _489 + _269;
        float _869 = _493 + _270;
        float _879 = fma(_869, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _867)) - _836;
        float _880 = fma(_869, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _867)) - _840;
        float _881 = fma(_869, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _867)) - _844;
        float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
        float _898 = ((_885 * _879) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_836 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_885 * _880) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_840 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_885 * _881) / cbModelParam._m0[35u].z) + ((((((_844 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        float _935 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_902.x + (-0.5));
        float _937 = _935 * (_902.y + (-0.5));
        float _938 = _935 * (_902.z + (-0.5));
        float _945 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_909.x + (-0.5));
        float _947 = _945 * (_909.y + (-0.5));
        float _948 = _945 * (_909.z + (-0.5));
        float _955 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_916.x + (-0.5));
        float _957 = _955 * (_916.y + (-0.5));
        float _958 = _955 * (_916.z + (-0.5));
        float _965 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_923.x + (-0.5));
        float _967 = _965 * (_923.y + (-0.5));
        float _968 = _965 * (_923.z + (-0.5));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = _936 * 0.5;
        float _973 = _946 * 0.5;
        float _974 = _956 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_268, _269, _270), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3355 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3366 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3377 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * (_999 + 1.0))) + _1004) * _969;
        float _1014 = _937 * 0.5;
        float _1015 = _947 * 0.5;
        float _1016 = _957 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_268, _269, _270), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3388 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3399 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3410 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * (_1041 + 1.0))) + _1046) * _970;
        float _1056 = _938 * 0.5;
        float _1057 = _948 * 0.5;
        float _1058 = _958 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_268, _269, _270), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3421 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3432 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3443 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * (_1083 + 1.0))) + _1088) * _971;
        _1105 = _938;
        _1106 = _937;
        _1107 = _936;
        _1108 = _948;
        _1109 = _947;
        _1110 = _946;
        _1111 = _958;
        _1112 = _957;
        _1113 = _956;
        _1114 = _971;
        _1115 = _970;
        _1116 = _969;
        _1117 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1118 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
    }
    else
    {
        _1105 = _796;
        _1106 = _796;
        _1107 = _796;
        _1108 = _796;
        _1109 = _796;
        _1110 = _796;
        _1111 = _796;
        _1112 = _796;
        _1113 = _796;
        _1114 = _796;
        _1115 = _796;
        _1116 = _796;
        _1117 = 0.0;
        _1118 = 0.0;
        _1119 = 0.0;
    }
    float _1129 = (cbModelParam._m0[1u].x * (_1117 - _808)) + _808;
    float _1130 = (cbModelParam._m0[1u].x * (_1118 - _809)) + _809;
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _810)) + _810;
    float _1152 = fma(_1131, cbSceneParam._m0[89u].z, fma(_1130, cbSceneParam._m0[89u].y, _1129 * cbSceneParam._m0[89u].x));
    float _1155 = fma(_1131, cbSceneParam._m0[90u].z, fma(_1130, cbSceneParam._m0[90u].y, _1129 * cbSceneParam._m0[90u].x));
    float _1158 = fma(_1131, cbSceneParam._m0[91u].z, fma(_1130, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1129));
    float _1173 = _432 * 0.5;
    float _1174 = _433 * 0.5;
    float _1175 = _434 * 0.5;
    float _1176 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1179 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1106, _1109, _1112, _1115));
    float _1182 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1105, _1108, _1111, _1114));
    float _1216;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1189 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_795, _799, _802, _805));
        float _1193 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_797, _800, _803, _806));
        float _1197 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_798, _801, _804, _807));
        float _1204 = dot(vec4(cbModelParam._m0[39u]), vec4(_1173, _1174, _1175, 1.0));
        _1216 = dot(vec3(isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1204) ? 0.0 : (isnan(0.0) ? _1204 : max(0.0, _1204))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1216 = 1.0;
    }
    float _1227;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1218 = dot(vec4(cbModelParam._m0[40u]), vec4(_1173, _1174, _1175, 1.0));
        _1227 = dot(vec3(isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)), isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1218) ? 0.0 : (isnan(0.0) ? _1218 : max(0.0, _1218))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1227 = 1.0;
    }
    float _1231 = (_1227 * cbModelParam._m0[1u].x) + (_1216 * (1.0 - cbModelParam._m0[1u].x));
    float _1241 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _271);
    float _1242 = isnan(_1241) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1241 : min(cbModelParam._m0[25u].z, _1241));
    float _1324;
    float _1326;
    float _1328;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1291 = fma(_493, cbModelParam._m0[13u].z, fma(_489, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _485)) + cbModelParam._m0[13u].w;
        float _1295 = fma(_493, cbModelParam._m0[14u].z, fma(_489, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _485)) + cbModelParam._m0[14u].w;
        float _1299 = fma(_493, cbModelParam._m0[15u].z, fma(_489, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _485)) + cbModelParam._m0[15u].w;
        float _1302 = fma(_434, cbModelParam._m0[13u].z, fma(_433, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _432));
        float _1305 = fma(_434, cbModelParam._m0[14u].z, fma(_433, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _432));
        float _1308 = fma(_434, cbModelParam._m0[15u].z, fma(_433, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _432));
        float _1336;
        if (_1302 > 0.0)
        {
            _1336 = abs((1.0 - _1291) / _1302);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1302 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1291 + 1.0) / _1302);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1336 = frontier_phi_14_12_ladder;
        }
        float _1542;
        if (_1305 > 0.0)
        {
            _1542 = abs((1.0 - _1295) / _1305);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1295 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1542 = frontier_phi_23_19_ladder;
        }
        float _1785;
        if (_1308 > 0.0)
        {
            _1785 = abs((1.0 - _1299) / _1308);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1299 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1785 = frontier_phi_35_30_ladder;
        }
        float _1787 = isnan(_1542) ? _1336 : (isnan(_1336) ? _1542 : min(_1336, _1542));
        float _1788 = isnan(_1785) ? _1787 : (isnan(_1787) ? _1785 : min(_1787, _1785));
        float _1792 = (_1788 * _1302) + _1291;
        float _1793 = (_1788 * _1305) + _1295;
        float _1794 = (_1788 * _1308) + _1299;
        float _1795 = _1788 * 9.9999997473787516355514526367188e-05;
        float _1797 = (-1.0) - _1795;
        float _1799 = _1795 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1794 > _1799) || ((_1794 < _1797) || ((_1793 > _1799) || ((_1793 < _1797) || ((_1792 < _1797) || (_1792 > _1799))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1918 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1794, cbModelParam._m0[9u].z, fma(_1793, cbModelParam._m0[9u].y, _1792 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1794, cbModelParam._m0[10u].z, fma(_1793, cbModelParam._m0[10u].y, _1792 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1794, cbModelParam._m0[11u].z, fma(_1793, cbModelParam._m0[11u].y, _1792 * cbModelParam._m0[11u].x))), _1242);
            frontier_phi_13_35_ladder = _1918.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1918.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1918.x * cbModelParam._m0[1u].y;
        }
        _1324 = frontier_phi_13_35_ladder_2;
        _1326 = frontier_phi_13_35_ladder_1;
        _1328 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1312 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_432, _433, _434), _1242);
        _1324 = _1312.x * cbModelParam._m0[1u].y;
        _1326 = _1312.y * cbModelParam._m0[1u].y;
        _1328 = _1312.z * cbModelParam._m0[1u].y;
    }
    float _1332 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _271);
    float _1333 = isnan(_1332) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1332 : min(cbModelParam._m0[25u].w, _1332));
    float _1426;
    float _1428;
    float _1430;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1390 = fma(_493, cbModelParam._m0[21u].z, fma(_489, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _485)) + cbModelParam._m0[21u].w;
        float _1394 = fma(_493, cbModelParam._m0[22u].z, fma(_489, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _485)) + cbModelParam._m0[22u].w;
        float _1398 = fma(_493, cbModelParam._m0[23u].z, fma(_489, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _485)) + cbModelParam._m0[23u].w;
        float _1401 = fma(_434, cbModelParam._m0[21u].z, fma(_433, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _432));
        float _1404 = fma(_434, cbModelParam._m0[22u].z, fma(_433, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _432));
        float _1407 = fma(_434, cbModelParam._m0[23u].z, fma(_433, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _432));
        float _1547;
        if (_1401 > 0.0)
        {
            _1547 = abs((1.0 - _1390) / _1401);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1390 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1547 = frontier_phi_25_21_ladder;
        }
        float _1812;
        if (_1404 > 0.0)
        {
            _1812 = abs((1.0 - _1394) / _1404);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1394 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1812 = frontier_phi_37_32_ladder;
        }
        float _2017;
        if (_1407 > 0.0)
        {
            _2017 = abs((1.0 - _1398) / _1407);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1398 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2017 = frontier_phi_46_43_ladder;
        }
        float _2019 = isnan(_1812) ? _1547 : (isnan(_1547) ? _1812 : min(_1547, _1812));
        float _2020 = isnan(_2017) ? _2019 : (isnan(_2019) ? _2017 : min(_2019, _2017));
        float _2024 = (_2020 * _1401) + _1390;
        float _2025 = (_2020 * _1404) + _1394;
        float _2026 = (_2020 * _1407) + _1398;
        float _2027 = _2020 * 9.9999997473787516355514526367188e-05;
        float _2028 = (-1.0) - _2027;
        float _2030 = _2027 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2026 > _2030) || ((_2026 < _2028) || ((_2025 > _2030) || ((_2025 < _2028) || ((_2024 < _2028) || (_2024 > _2030))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2225 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2026, cbModelParam._m0[17u].z, fma(_2025, cbModelParam._m0[17u].y, _2024 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2026, cbModelParam._m0[18u].z, fma(_2025, cbModelParam._m0[18u].y, _2024 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2026, cbModelParam._m0[19u].z, fma(_2025, cbModelParam._m0[19u].y, _2024 * cbModelParam._m0[19u].x))), _1333);
            frontier_phi_22_46_ladder = _2225.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2225.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2225.x * cbModelParam._m0[1u].z;
        }
        _1426 = frontier_phi_22_46_ladder_2;
        _1428 = frontier_phi_22_46_ladder_1;
        _1430 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1410 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_432, _433, _434), _1333);
        _1426 = _1410.x * cbModelParam._m0[1u].z;
        _1428 = _1410.y * cbModelParam._m0[1u].z;
        _1430 = _1410.z * cbModelParam._m0[1u].z;
    }
    float _1442 = ((((1.0 - _453) * ((_440 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_453 * _440)) * _424;
    float _1443 = _1442 * ((cbModelParam._m0[1u].w * (_1426 - _1324)) + _1324);
    float _1444 = _1442 * ((cbModelParam._m0[1u].w * (_1428 - _1326)) + _1326);
    float _1445 = _1442 * ((cbModelParam._m0[1u].w * (_1430 - _1328)) + _1328);
    float _1448 = fma(_1445, cbSceneParam._m0[89u].z, fma(_1444, cbSceneParam._m0[89u].y, _1443 * cbSceneParam._m0[89u].x));
    float _1451 = fma(_1445, cbSceneParam._m0[90u].z, fma(_1444, cbSceneParam._m0[90u].y, _1443 * cbSceneParam._m0[90u].x));
    float _1454 = fma(_1445, cbSceneParam._m0[91u].z, fma(_1444, cbSceneParam._m0[91u].y, _1443 * cbSceneParam._m0[91u].x));
    uvec4 _1464 = floatBitsToUint(cbInstanceData._m0[_398 + 5u]);
    uint _1466 = _1464.x * 14u;
    uint _1467 = _1466 + 13u;
    float _1474 = _424 + (-1.0);
    float _1479 = (cbLight._m0[_1467].x * _1474) + 1.0;
    float _1480 = (cbLight._m0[_1467].y * _1474) + 1.0;
    float _1481 = (cbLight._m0[_1467].z * _1474) + 1.0;
    float _1482 = (cbLight._m0[_1467].w * _1474) + 1.0;
    uint _1483 = _1466 + 5u;
    float _1489 = isnan(1.0) ? _1480 : (isnan(_1480) ? 1.0 : min(_1480, 1.0));
    uint _1493 = _1466 + 4u;
    float _1500 = isnan(1.0) ? _1479 : (isnan(_1479) ? 1.0 : min(_1479, 1.0));
    uint _1504 = _1466 | 1u;
    float _1515 = dot(vec3(cbLight._m0[_1466].xyz), vec3(_268, _269, _270));
    float _1518 = dot(vec3(cbLight._m0[_1504].xyz), vec3(_268, _269, _270));
    float _3579 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
    float _3590 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
    float _1523 = (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * 0.3183098733425140380859375;
    float _1525 = (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * 0.3183098733425140380859375;
    float _1532 = ((cbLight._m0[_1483].x * _1489) * _1525) + ((cbLight._m0[_1493].x * _1500) * _1523);
    float _1533 = ((_1489 * cbLight._m0[_1483].y) * _1525) + ((_1500 * cbLight._m0[_1493].y) * _1523);
    float _1534 = ((_1489 * cbLight._m0[_1483].z) * _1525) + ((_1500 * cbLight._m0[_1493].z) * _1523);
    uvec4 _1539 = floatBitsToUint(cbLight._m0[_1466 + 12u]);
    bool _1541 = _1539.x == 0u;
    float _1552;
    float _1554;
    float _1556;
    if (_1541)
    {
        _1552 = _1532;
        _1554 = _1533;
        _1556 = _1534;
    }
    else
    {
        uint _1560 = _1466 + 6u;
        float _1576 = (dot(vec3(cbLight._m0[_1466 + 2u].xyz), vec3(_268, _269, _270)) * 0.5) + 0.5;
        float _1577 = _1576 * _1576;
        float _3601 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1579 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
        _1552 = (((cbLight._m0[_1560].x * 0.3183098733425140380859375) * _1578) * _1579) + _1532;
        _1554 = (((cbLight._m0[_1560].y * 0.3183098733425140380859375) * _1578) * _1579) + _1533;
        _1556 = (((cbLight._m0[_1560].z * 0.3183098733425140380859375) * _1578) * _1579) + _1534;
    }
    bool _1559 = _1539.y == 0u;
    float _1597;
    float _1599;
    float _1601;
    if (_1559)
    {
        _1597 = _1552;
        _1599 = _1554;
        _1601 = _1556;
    }
    else
    {
        uint _1756 = _1466 + 7u;
        float _1772 = (dot(vec3(cbLight._m0[_1466 + 3u].xyz), vec3(_268, _269, _270)) * 0.5) + 0.5;
        float _1773 = _1772 * _1772;
        float _3617 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1775 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
        _1597 = (((cbLight._m0[_1756].x * 0.3183098733425140380859375) * _1774) * _1775) + _1552;
        _1599 = (((cbLight._m0[_1756].y * 0.3183098733425140380859375) * _1774) * _1775) + _1554;
        _1601 = (((cbLight._m0[_1756].z * 0.3183098733425140380859375) * _1774) * _1775) + _1556;
    }
    uint _1604 = _1466 + 8u;
    float _1617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1466].w)) * _271) * 0.949999988079071044921875);
    float _1618 = _1617 * _1617;
    float _1619 = cbLight._m0[_1466].x + _349;
    float _1620 = cbLight._m0[_1466].y + _350;
    float _1621 = cbLight._m0[_1466].z + _351;
    float _1625 = inversesqrt(dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621)));
    float _1626 = _1625 * _1619;
    float _1627 = _1625 * _1620;
    float _1628 = _1625 * _1621;
    float _1629 = dot(vec3(_268, _269, _270), vec3(cbLight._m0[_1466].xyz));
    float _3633 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _1632 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _1633 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _1634 = dot(vec3(_268, _269, _270), vec3(_1626, _1627, _1628));
    float _3655 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _1637 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _1638 = dot(vec3(cbLight._m0[_1466].xyz), vec3(_1626, _1627, _1628));
    float _3666 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1642 = _1618 * _1618;
    float _1646 = ((_1637 * _1637) * (_1642 + (-1.0))) + 1.0;
    float _1657 = (exp2(log2(1.0 - (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1658 = 1.0 - _1618;
    float _1669 = (0.5 / (((_1633 * ((_1632 * _1658) + _1618)) + 9.9999999392252902907785028219223e-09) + (((_1633 * _1658) + _1618) * _1632))) * _1632;
    float _3677 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1671 = (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1642 / ((_1646 * _1646) * 3.141590118408203125));
    uint _1682 = _1466 + 9u;
    float _1693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1504].w)) * _271) * 0.949999988079071044921875);
    float _1694 = _1693 * _1693;
    float _1695 = cbLight._m0[_1504].x + _349;
    float _1696 = cbLight._m0[_1504].y + _350;
    float _1697 = cbLight._m0[_1504].z + _351;
    float _1701 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
    float _1702 = _1701 * _1695;
    float _1703 = _1701 * _1696;
    float _1704 = _1701 * _1697;
    float _1705 = dot(vec3(_268, _269, _270), vec3(cbLight._m0[_1504].xyz));
    float _3688 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _1709 = dot(vec3(_268, _269, _270), vec3(_1702, _1703, _1704));
    float _3699 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1712 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _1713 = dot(vec3(cbLight._m0[_1504].xyz), vec3(_1702, _1703, _1704));
    float _3710 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1717 = _1694 * _1694;
    float _1721 = ((_1712 * _1712) * (_1717 + (-1.0))) + 1.0;
    float _1730 = (exp2(log2(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1731 = 1.0 - _1694;
    float _1741 = (0.5 / (((_1633 * ((_1708 * _1731) + _1694)) + 9.9999999392252902907785028219223e-09) + (((_1633 * _1731) + _1694) * _1708))) * _1708;
    float _3721 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1743 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1717 / ((_1721 * _1721) * 3.141590118408203125));
    float _1753 = (((_1730 * cbLight._m0[_1682].x) * _1743) * _1489) + (((_1657 * cbLight._m0[_1604].x) * _1671) * _1500);
    float _1754 = (((_1730 * cbLight._m0[_1682].y) * _1743) * _1489) + (((_1657 * cbLight._m0[_1604].y) * _1671) * _1500);
    float _1755 = (((_1730 * cbLight._m0[_1682].z) * _1743) * _1489) + (((_1657 * cbLight._m0[_1604].z) * _1671) * _1500);
    float _1817;
    float _1819;
    float _1821;
    if (_1541)
    {
        _1817 = _1753;
        _1819 = _1754;
        _1821 = _1755;
    }
    else
    {
        uint _1823 = _1466 + 2u;
        uint _1827 = _1466 + 10u;
        float _1841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _271) * 0.949999988079071044921875);
        float _1842 = _1841 * _1841;
        float _1843 = cbLight._m0[_1823].x + _349;
        float _1844 = cbLight._m0[_1823].y + _350;
        float _1845 = cbLight._m0[_1823].z + _351;
        float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
        float _1850 = _1849 * _1843;
        float _1851 = _1849 * _1844;
        float _1852 = _1849 * _1845;
        float _1853 = dot(vec3(_268, _269, _270), vec3(cbLight._m0[_1823].xyz));
        float _3732 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1856 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1857 = dot(vec3(_268, _269, _270), vec3(_1850, _1851, _1852));
        float _3743 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1860 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1861 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_1850, _1851, _1852));
        float _3754 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1865 = _1842 * _1842;
        float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
        float _1878 = (exp2(log2(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1879 = 1.0 - _1842;
        float _1889 = (0.5 / (((_1633 * ((_1856 * _1879) + _1842)) + 9.9999999392252902907785028219223e-09) + (((_1633 * _1879) + _1842) * _1856))) * _1856;
        float _3765 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1891 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
        float _1892 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
        _1817 = (((_1878 * cbLight._m0[_1827].x) * _1891) * _1892) + _1753;
        _1819 = (((_1878 * cbLight._m0[_1827].y) * _1891) * _1892) + _1754;
        _1821 = (((_1878 * cbLight._m0[_1827].z) * _1891) * _1892) + _1755;
    }
    float _1927;
    float _1929;
    float _1931;
    if (_1559)
    {
        _1927 = _1817;
        _1929 = _1819;
        _1931 = _1821;
    }
    else
    {
        uint _1938 = _1466 + 3u;
        uint _1942 = _1466 + 11u;
        float _1956 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1938].w)) * _271) * 0.949999988079071044921875);
        float _1957 = _1956 * _1956;
        float _1958 = cbLight._m0[_1938].x + _349;
        float _1959 = cbLight._m0[_1938].y + _350;
        float _1960 = cbLight._m0[_1938].z + _351;
        float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
        float _1965 = _1964 * _1958;
        float _1966 = _1964 * _1959;
        float _1967 = _1964 * _1960;
        float _1968 = dot(vec3(_268, _269, _270), vec3(cbLight._m0[_1938].xyz));
        float _3781 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1971 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1972 = dot(vec3(_268, _269, _270), vec3(_1965, _1966, _1967));
        float _3792 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1975 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1976 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_1965, _1966, _1967));
        float _3803 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1980 = _1957 * _1957;
        float _1984 = ((_1975 * _1975) * (_1980 + (-1.0))) + 1.0;
        float _1993 = (exp2(log2(1.0 - (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1994 = 1.0 - _1957;
        float _2004 = (0.5 / (((_1633 * ((_1971 * _1994) + _1957)) + 9.9999999392252902907785028219223e-09) + (((_1633 * _1994) + _1957) * _1971))) * _1971;
        float _3814 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2006 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1980 / ((_1984 * _1984) * 3.141590118408203125));
        float _2007 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
        _1927 = (((_1993 * cbLight._m0[_1942].x) * _2006) * _2007) + _1817;
        _1929 = (((_1993 * cbLight._m0[_1942].y) * _2006) * _2007) + _1819;
        _1931 = (((_1993 * cbLight._m0[_1942].z) * _2006) * _2007) + _1821;
    }
    float _2142;
    float _2144;
    float _2146;
    float _2148;
    float _2150;
    float _2152;
    if (_1464.y == 0u)
    {
        float _2082 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2083 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2082;
        float _2084 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2082;
        float _2085 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2082;
        uvec4 _2097 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2098 = _2097.x;
        uint _2109 = uint((float(_2097.y) * floor(float(uint(cbSceneParam._m0[85u].y * _358) / _2098))) + floor(float(uint(cbSceneParam._m0[85u].x * _357) / _2098)));
        float _2119 = (log2(_2085 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2120 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        uint _2123 = uint(isnan(14.0) ? _2120 : (isnan(_2120) ? 14.0 : min(_2120, 14.0)));
        uvec4 _2128 = texelFetch(g_lightClusterGridBuffer, int(((_2123 << 2u) + (_2109 << 6u)) >> 2u));
        uint _2129 = _2128.x;
        uint _2130 = _2097.z;
        float _2230;
        float _2232;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        if (((((1u << ((_2130 >> 4u) & 15u)) + 4294967295u) & _2129) == 0u) || ((_2130 & 240u) == 0u))
        {
            _2230 = 0.0;
            _2232 = 0.0;
            _2234 = 0.0;
            _2236 = 0.0;
            _2238 = 0.0;
            _2240 = 0.0;
        }
        else
        {
            float _2231;
            float _2233;
            float _2235;
            float _2237;
            float _2239;
            float _2241;
            float _2375 = 0.0;
            float _2376 = 0.0;
            float _2377 = 0.0;
            float _2378 = 0.0;
            float _2379 = 0.0;
            float _2380 = 0.0;
            uint _2381 = 0u;
            uint _2390;
            bool _2391;
            for (;;)
            {
                _2390 = texelFetch(g_lightClassification, int((((_2123 << 5u) + (_2109 << 9u)) + (_2381 << 2u)) >> 2u)).x;
                _2391 = _2390 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2391)
                {
                    frontier_phi_61_pred = _2375;
                    frontier_phi_61_pred_1 = _2380;
                    frontier_phi_61_pred_2 = _2379;
                    frontier_phi_61_pred_3 = _2378;
                    frontier_phi_61_pred_4 = _2377;
                    frontier_phi_61_pred_5 = _2376;
                }
                else
                {
                    float _2499;
                    float _2500;
                    float _2501;
                    float _2502;
                    float _2503;
                    float _2504;
                    uint _2505;
                    _2499 = _2375;
                    _2500 = _2376;
                    _2501 = _2377;
                    _2502 = _2378;
                    _2503 = _2379;
                    _2504 = _2380;
                    _2505 = _2390;
                    float _2431;
                    float _2432;
                    float _2433;
                    float _2434;
                    float _2435;
                    float _2436;
                    for (;;)
                    {
                        uint _2509 = uint(findLSB(_2505)) + (_2381 << 5u);
                        uint _2506 = (_2505 + 4294967295u) & _2505;
                        uint _2511 = _2509 * 48u;
                        vec4 _2525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2511)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 3u)).x));
                        uint _2531 = (_2509 * 48u) + 4u;
                        vec4 _2544 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2531)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 3u)).x));
                        uint _2550 = (_2509 * 48u) + 8u;
                        vec3 _2561 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2550)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 2u)).x));
                        float _2565 = _2525.x - _2083;
                        float _2566 = _2525.y - _2084;
                        float _2567 = _2525.z - _2085;
                        float _2568 = dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567));
                        float _2571 = inversesqrt(_2568);
                        float _2572 = _2571 * _2565;
                        float _2573 = _2571 * _2566;
                        float _2574 = _2571 * _2567;
                        float _2575 = dot(vec3(_379, _382, _385), vec3(_2572, _2573, _2574));
                        float _2580 = 1.0 - (_2568 * _2525.w);
                        float _3840 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
                        float _2581 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
                        float _2582 = sqrt(_2568) * _2544.w;
                        float _2585 = 1.39999997615814208984375 / (_2582 + 1.39999997615814208984375);
                        float _2586 = _2585 * _2585;
                        float _2589 = ((1.0 - _2586) * _2575) + _2586;
                        float _2592 = _2582 * _2582;
                        float _2596 = ((isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0))) * _2581) / ((_2592 * 0.699999988079071044921875) + 1.0);
                        float _2600 = (-0.0) - _2083;
                        float _2601 = (-0.0) - _2084;
                        float _2602 = (-0.0) - _2085;
                        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
                        float _2607 = _2606 * _2600;
                        float _2608 = _2606 * _2601;
                        float _2609 = _2606 * _2602;
                        float _2617 = exp2(log2(1.0 / ((_2592 * 3.5) + 5.0)) * 0.25);
                        float _2618 = 1.0 - _440;
                        float _2625 = sqrt(1.0 - ((1.0 - (_2618 * _2618)) * (1.0 - (_2617 * _2617))));
                        float _2626 = _2625 * _2625;
                        float _2627 = _2626 * _2626;
                        float _2628 = _2607 + _2572;
                        float _2629 = _2608 + _2573;
                        float _2630 = _2609 + _2574;
                        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
                        float _2638 = dot(vec3(_379, _382, _385), vec3(_2607, _2608, _2609));
                        float _3856 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
                        float _2641 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
                        float _2642 = dot(vec3(_379, _382, _385), vec3(_2634 * _2628, _2634 * _2629, _2634 * _2630));
                        float _3867 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
                        float _2645 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
                        float _2649 = ((_2645 * _2645) * (_2627 + (-1.0))) + 1.0;
                        float _2650 = _2585 * _2626;
                        float _2651 = _2650 * _2650;
                        float _2654 = ((1.0 - _2651) * _2575) + _2651;
                        float _3878 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
                        float _2655 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
                        float _2656 = 1.0 - _2626;
                        float _2666 = (0.5 / (((_2655 * ((_2641 * _2656) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2655 * _2656) + _2626) * _2641))) * _2655;
                        float _3889 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
                        float _2677 = (((_2627 * 3.1415927410125732421875) * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) / ((_2649 * _2649) * ((_2592 * 2.1991131305694580078125) + 3.141590118408203125))) * _2581;
                        _2434 = (_2596 * _2544.x) + _2502;
                        _2435 = (_2596 * _2544.y) + _2503;
                        _2436 = (_2596 * _2544.z) + _2504;
                        _2431 = (_2677 * _2561.x) + _2499;
                        _2432 = (_2677 * _2561.y) + _2500;
                        _2433 = (_2677 * _2561.z) + _2501;
                        if (_2506 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2499 = _2431;
                            _2500 = _2432;
                            _2501 = _2433;
                            _2502 = _2434;
                            _2503 = _2435;
                            _2504 = _2436;
                            _2505 = _2506;
                        }
                    }
                    frontier_phi_61_pred = _2431;
                    frontier_phi_61_pred_1 = _2436;
                    frontier_phi_61_pred_2 = _2435;
                    frontier_phi_61_pred_3 = _2434;
                    frontier_phi_61_pred_4 = _2433;
                    frontier_phi_61_pred_5 = _2432;
                }
                _2231 = frontier_phi_61_pred;
                _2241 = frontier_phi_61_pred_1;
                _2239 = frontier_phi_61_pred_2;
                _2237 = frontier_phi_61_pred_3;
                _2235 = frontier_phi_61_pred_4;
                _2233 = frontier_phi_61_pred_5;
                uint _2382 = _2381 + 1u;
                if (_2382 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2375 = _2231;
                    _2376 = _2233;
                    _2377 = _2235;
                    _2378 = _2237;
                    _2379 = _2239;
                    _2380 = _2241;
                    _2381 = _2382;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2230 = _2231;
            _2232 = _2233;
            _2234 = _2235;
            _2236 = _2237;
            _2238 = _2239;
            _2240 = _2241;
        }
        uvec4 _2244 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2245 = _2244.z;
        uint _2247 = (_2245 >> 8u) & 15u;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        if (((4294967295u << _2247) & _2129) == 0u)
        {
            _2343 = _2230;
            _2345 = _2232;
            _2347 = _2234;
            _2349 = _2236;
            _2351 = _2238;
            _2353 = _2240;
        }
        else
        {
            float _2368 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
            float _2369 = _2368 * _2083;
            float _2370 = _2368 * _2084;
            float _2371 = _2368 * _2085;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2247 < ((_2245 >> 12u) & 15u))
            {
                float _2344;
                float _2346;
                float _2348;
                float _2350;
                float _2352;
                float _2354;
                float _2482 = _2230;
                float _2483 = _2232;
                float _2484 = _2234;
                float _2485 = _2236;
                float _2486 = _2238;
                float _2487 = _2240;
                uint _2488 = _2247;
                uint _2497;
                bool _2498;
                for (;;)
                {
                    _2497 = texelFetch(g_lightClassification, int((((_2123 << 5u) + (_2109 << 9u)) + (_2488 << 2u)) >> 2u)).x;
                    _2498 = _2497 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2498)
                    {
                        frontier_phi_67_pred = _2485;
                        frontier_phi_67_pred_1 = _2486;
                        frontier_phi_67_pred_2 = _2487;
                        frontier_phi_67_pred_3 = _2484;
                        frontier_phi_67_pred_4 = _2483;
                        frontier_phi_67_pred_5 = _2482;
                    }
                    else
                    {
                        float _2682;
                        float _2683;
                        float _2684;
                        float _2685;
                        float _2686;
                        float _2687;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2695 = _2482;
                        float _2696 = _2483;
                        float _2697 = _2484;
                        float _2698 = _2485;
                        float _2699 = _2486;
                        float _2700 = _2487;
                        uint _2701 = _2497;
                        uint _2702;
                        vec4 _2727;
                        float _2728;
                        vec4 _2743;
                        vec3 _2755;
                        vec4 _2771;
                        vec4 _2787;
                        float _2834;
                        bool _2835;
                        for (;;)
                        {
                            uint _2712 = ((_2488 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2701));
                            _2702 = (_2701 + 4294967295u) & _2701;
                            uint _2714 = _2712 * 40u;
                            _2727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 3u)).x));
                            _2728 = _2727.w;
                            uint _2730 = (_2712 * 40u) + 4u;
                            _2743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 3u)).x));
                            uint _2745 = (_2712 * 40u) + 8u;
                            _2755 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 2u)).x));
                            uint _2758 = (_2712 * 40u) + 16u;
                            _2771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 3u)).x));
                            uint _2774 = (_2712 * 40u) + 20u;
                            _2787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 3u)).x));
                            uint _2790 = (_2712 * 40u) + 24u;
                            vec4 _2803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 3u)).x));
                            uint _2809 = (_2712 * 40u) + 28u;
                            vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 3u)).x));
                            _2834 = fma(_2085, _2822.z, fma(_2084, _2822.y, _2822.x * _2083)) + _2822.w;
                            _2835 = !((fma(_2085, _2803.z, fma(_2084, _2803.y, _2803.x * _2083)) + _2803.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2835)
                            {
                                float _2862 = _2727.x - _2083;
                                float _2863 = _2727.y - _2084;
                                float _2864 = _2727.z - _2085;
                                float _2865 = dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864));
                                float _2868 = inversesqrt(_2865);
                                float _2869 = _2868 * _2862;
                                float _2870 = _2868 * _2863;
                                float _2871 = _2868 * _2864;
                                float _2875 = 1.0 - (_2865 / (_2728 * _2728));
                                float _3900 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                                float _2876 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
                                float _2880 = sqrt(_2865) * _2743.w;
                                float _2882 = 1.39999997615814208984375 / (_2880 + 1.39999997615814208984375);
                                float _2883 = _2882 * _2882;
                                float _2886 = ((1.0 - _2883) * dot(vec3(_2869, _2870, _2871), vec3(_379, _382, _385))) + _2883;
                                float _2889 = _2880 * _2880;
                                float _2893 = (fma(_2085, _2771.z, fma(_2084, _2771.y, _2771.x * _2083)) + _2771.w) / _2834;
                                float _2894 = (fma(_2085, _2787.z, fma(_2084, _2787.y, _2787.x * _2083)) + _2787.w) / _2834;
                                float _2898 = 1.0 - dot(vec2(_2893, _2894), vec2(_2893, _2894));
                                float _3916 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                                float _2899 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
                                float _2900 = _2899 * (((isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))) * _2876) / ((_2889 * 0.699999988079071044921875) + 1.0));
                                float _2912 = exp2(log2(1.0 / ((_2889 * 3.5) + 5.0)) * 0.25);
                                float _2913 = 1.0 - _440;
                                float _2920 = sqrt(1.0 - ((1.0 - (_2913 * _2913)) * (1.0 - (_2912 * _2912))));
                                float _2921 = _2920 * _2920;
                                float _2922 = _2921 * _2921;
                                float _2923 = _2869 - _2369;
                                float _2924 = _2870 - _2370;
                                float _2925 = _2871 - _2371;
                                float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                                float _2933 = dot(vec3(_379, _382, _385), vec3((-0.0) - _2369, (-0.0) - _2370, (-0.0) - _2371));
                                float _3927 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                                float _2936 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
                                float _2937 = dot(vec3(_379, _382, _385), vec3(_2929 * _2923, _2929 * _2924, _2929 * _2925));
                                float _3938 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                                float _2940 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                                float _2944 = ((_2940 * _2940) * (_2922 + (-1.0))) + 1.0;
                                float _2945 = _2882 * _2921;
                                float _2946 = _2945 * _2945;
                                float _2952 = ((1.0 - _2946) * dot(vec3(_379, _382, _385), vec3(_2869, _2870, _2871))) + _2946;
                                float _3949 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                                float _2953 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                                float _2954 = 1.0 - _2921;
                                float _2964 = (0.5 / (((_2953 * ((_2936 * _2954) + _2921)) + 9.9999999392252902907785028219223e-09) + (((_2953 * _2954) + _2921) * _2936))) * _2953;
                                float _3960 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                                float _2974 = (_2899 * _2876) * (((_2922 * 3.1415927410125732421875) * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) / ((_2944 * _2944) * ((_2889 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2974 * _2755.x;
                                frontier_phi_73_pred_1 = _2974 * _2755.y;
                                frontier_phi_73_pred_2 = _2900 * _2743.z;
                                frontier_phi_73_pred_3 = _2900 * _2743.y;
                                frontier_phi_73_pred_4 = _2900 * _2743.x;
                                frontier_phi_73_pred_5 = _2974 * _2755.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2978 = frontier_phi_73_pred;
                            _2979 = frontier_phi_73_pred_1;
                            _2983 = frontier_phi_73_pred_2;
                            _2982 = frontier_phi_73_pred_3;
                            _2981 = frontier_phi_73_pred_4;
                            _2980 = frontier_phi_73_pred_5;
                            _2685 = _2981 + _2698;
                            _2686 = _2982 + _2699;
                            _2687 = _2983 + _2700;
                            _2682 = _2978 + _2695;
                            _2683 = _2979 + _2696;
                            _2684 = _2980 + _2697;
                            if (_2702 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2695 = _2682;
                                _2696 = _2683;
                                _2697 = _2684;
                                _2698 = _2685;
                                _2699 = _2686;
                                _2700 = _2687;
                                _2701 = _2702;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2685;
                        frontier_phi_67_pred_1 = _2686;
                        frontier_phi_67_pred_2 = _2687;
                        frontier_phi_67_pred_3 = _2684;
                        frontier_phi_67_pred_4 = _2683;
                        frontier_phi_67_pred_5 = _2682;
                    }
                    _2350 = frontier_phi_67_pred;
                    _2352 = frontier_phi_67_pred_1;
                    _2354 = frontier_phi_67_pred_2;
                    _2348 = frontier_phi_67_pred_3;
                    _2346 = frontier_phi_67_pred_4;
                    _2344 = frontier_phi_67_pred_5;
                    uint _2489 = _2488 + 1u;
                    if (_2489 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2482 = _2344;
                        _2483 = _2346;
                        _2484 = _2348;
                        _2485 = _2350;
                        _2486 = _2352;
                        _2487 = _2354;
                        _2488 = _2489;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2352;
                frontier_phi_55_56_ladder_1 = _2354;
                frontier_phi_55_56_ladder_2 = _2350;
                frontier_phi_55_56_ladder_3 = _2348;
                frontier_phi_55_56_ladder_4 = _2346;
                frontier_phi_55_56_ladder_5 = _2344;
            }
            else
            {
                frontier_phi_55_56_ladder = _2238;
                frontier_phi_55_56_ladder_1 = _2240;
                frontier_phi_55_56_ladder_2 = _2236;
                frontier_phi_55_56_ladder_3 = _2234;
                frontier_phi_55_56_ladder_4 = _2232;
                frontier_phi_55_56_ladder_5 = _2230;
            }
            _2343 = frontier_phi_55_56_ladder_5;
            _2345 = frontier_phi_55_56_ladder_4;
            _2347 = frontier_phi_55_56_ladder_3;
            _2349 = frontier_phi_55_56_ladder_2;
            _2351 = frontier_phi_55_56_ladder;
            _2353 = frontier_phi_55_56_ladder_1;
        }
        float _2358 = isnan(1.0) ? _424 : (isnan(_424) ? 1.0 : min(_424, 1.0));
        _2142 = (_2358 * _2349) + _1597;
        _2144 = (_2358 * _2351) + _1599;
        _2146 = (_2358 * _2353) + _1601;
        _2148 = ((_2343 * 0.039999999105930328369140625) * _2358) + _1927;
        _2150 = ((_2345 * 0.039999999105930328369140625) * _2358) + _1929;
        _2152 = ((_2347 * 0.039999999105930328369140625) * _2358) + _1931;
    }
    else
    {
        _2142 = _1597;
        _2144 = _1599;
        _2146 = _1601;
        _2148 = _1927;
        _2150 = _1929;
        _2152 = _1931;
    }
    float _3976 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3987 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3998 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    uint _2172 = _398 + 6u;
    float _2180 = _357 / cbSceneParam._m0[86u].x;
    float _2181 = _358 / cbSceneParam._m0[86u].y;
    vec4 _2195 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2180, _2181, (log2((isnan(cbSceneParam._m0[77u].w) ? _290 : (isnan(_290) ? cbSceneParam._m0[77u].w : min(_290, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2197 = _2195.x;
    float _2198 = _2195.y;
    float _2199 = _2195.z;
    float _2200 = _2195.w;
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    if (_290 > cbSceneParam._m0[78u].w)
    {
        float _2255 = isnan(_290) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _290 : min(cbSceneParam._m0[80u].w, _290));
        float _2256 = _2255 / _290;
        float _2267 = _2256 * _342;
        float _2268 = _343 * _2256;
        float _2269 = (-0.0) - _2268;
        float _2271 = _2256 * _344;
        float _2273 = (cbSceneParam._m0[77u].w * _2269) / _2255;
        float _2274 = _2273 + cbSceneParam._m0[79u].w;
        float _2275 = cbSceneParam._m0[79u].w - _2268;
        float _2281 = sqrt(((_2267 * _2267) + (_2268 * _2268)) + (_2271 * _2271));
        float _2284 = (1.0 - (cbSceneParam._m0[77u].w / _2255)) * _2281;
        float _2289 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2291 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2444;
        if (abs((_2269 - _2273) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2444 = ((((_2274 > 0.0) ? exp2(_2289 * _2274) : (2.0 - exp2(_2291 * _2274))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2284;
        }
        else
        {
            float _2404 = 1.0 / cbSceneParam._m0[80u].x;
            float _2405 = isnan(_2275) ? _2274 : (isnan(_2274) ? _2275 : max(_2274, _2275));
            float _2406 = isnan(_2275) ? _2274 : (isnan(_2274) ? _2275 : min(_2274, _2275));
            float _2415 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : min(_2405, 0.0));
            float _2416 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : min(_2406, 0.0));
            _2444 = ((abs(_2281 / _2269) * cbSceneParam._m0[80u].y) * ((((_2415 - _2416) * 2.0) - ((exp2(_2289 * (isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0)))) - exp2(_2289 * (isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0))))) * _2404)) - ((exp2(_2291 * _2415) - exp2(_2291 * _2416)) * _2404))) + (_2284 * cbSceneParam._m0[80u].z);
        }
        vec4 _2446 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2180, _2181, 1.0), 0.0);
        float _2455 = exp2((_2444 * (-1.44269502162933349609375)) * (1.0 - _2446.w));
        float _2456 = log2(_2455);
        float _2472 = log2(_2200);
        _2293 = (exp2(_2472 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2456 * cbSceneParam._m0[78u].x)) * _2446.x) / cbSceneParam._m0[78u].x)) + _2197;
        _2295 = (exp2(_2472 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2456 * cbSceneParam._m0[78u].y)) * _2446.y) / cbSceneParam._m0[78u].y)) + _2198;
        _2297 = (exp2(_2472 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2456 * cbSceneParam._m0[78u].z)) * _2446.z) / cbSceneParam._m0[78u].z)) + _2199;
        _2299 = _2455 * _2200;
    }
    else
    {
        _2293 = _2197;
        _2295 = _2198;
        _2297 = _2199;
        _2299 = _2200;
    }
    float _2311 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2312 = _2311 == 3.0;
    float _2313 = log2(_2299);
    float _2320 = exp2(_2313 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_2142 + ((isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0))) * _424))) + ((_2148 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _1231)) * cbPerFrame._m0[3u].x));
    float _2321 = exp2(_2313 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_2144 + ((isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))) * _424))) + ((_2150 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _1231)) * cbPerFrame._m0[3u].x));
    float _2322 = exp2(_2313 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_2146 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _424))) + ((_2152 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _1231)) * cbPerFrame._m0[3u].x));
    float _2331 = (_2311 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2331 * (_2312 ? _2320 : (_2320 + (cbSceneParam._m0[72u].w * _2293)));
    SV_Target.y = _2331 * (_2312 ? _2321 : (_2321 + (cbSceneParam._m0[72u].w * _2295)));
    SV_Target.z = _2331 * (_2312 ? _2322 : (_2322 + (cbSceneParam._m0[72u].w * _2297)));
    SV_Target.w = cbInstanceData._m0[_2172].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2172].w;
}


