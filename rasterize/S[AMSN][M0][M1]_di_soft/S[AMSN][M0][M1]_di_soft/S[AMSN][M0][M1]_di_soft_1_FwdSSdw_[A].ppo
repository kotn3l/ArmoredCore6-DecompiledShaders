#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _895;
float _3288;
float _3289;
float _3290;
float _3291;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _229 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _229.x * cbMtdParam._m0[9u].x;
    float _237 = _229.y * cbMtdParam._m0[9u].y;
    float _238 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _253 = _251.x;
    float _277 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _253)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _253))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3300 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _282 = gl_FragCoord.x * 0.125;
    float _284 = gl_FragCoord.y * 0.125;
    float _294 = float(((_229.w * TEXCOORD_1.z) * (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_282, _284)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _306 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _310 = _306.z;
    float _314 = (_306.x * 2.0) + (-1.0);
    float _316 = (_306.y * 2.0) + (-1.0);
    float _317 = dot(vec2(_314, _316), vec2(_314, _316));
    float _3311 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _322 = sqrt(1.0 - (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0))));
    float _325 = fma(_322, _199 * NORMAL.x, fma(_316, _206 * TANGENT.x, (_192 * _184) * _314));
    float _328 = fma(_322, _199 * NORMAL.y, fma(_316, _206 * TANGENT.y, (_192 * _185) * _314));
    float _331 = fma(_322, _199 * NORMAL.z, fma(_316, _206 * TANGENT.z, (_192 * _186) * _314));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    float _336 = _335 * _325;
    float _337 = _335 * _328;
    float _338 = _335 * _331;
    float _3322 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _339 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _3333 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3344 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3355 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _356 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _397 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _407 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _397);
    float _408 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _397);
    float _409 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _397);
    float _413 = inversesqrt(dot(vec3(_407, _408, _409), vec3(_407, _408, _409)));
    float _414 = _407 * _413;
    float _415 = _408 * _413;
    float _416 = _409 * _413;
    vec4 _417 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_282, _284));
    float _419 = _417.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _576 = sqrt(((_407 * _407) + (_408 * _408)) + (_409 * _409));
        float _582 = (cbMatDynParam._m0[5u].x * _576) + cbMatDynParam._m0[5u].y;
        float _3366 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        float _583 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _587 = (cbMatDynParam._m0[5u].z * _576) + cbMatDynParam._m0[5u].w;
        float _3377 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) - _583)) + _583) < ((_419 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _430 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _431 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _451 = fma(_338, cbSceneParam._m0[5u].z, fma(_337, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _336));
    float _454 = fma(_338, cbSceneParam._m0[6u].z, fma(_337, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _336));
    float _457 = fma(_338, cbSceneParam._m0[7u].z, fma(_337, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _336));
    uint _470 = uint(roundEven(NORMAL.w)) * 13u;
    uint _472 = _470 + 9u;
    uint _473 = _472 + uint(cbMatDynParam._m0[0u].w);
    float _479 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0)))) * cbInstanceData._m0[_473].x;
    float _480 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0)))) * cbInstanceData._m0[_473].y;
    float _481 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0)))) * cbInstanceData._m0[_473].z;
    float _3388 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _3399 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
    float _3410 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _484 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    vec4 _493 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _430, cbSceneParam._m0[86u].y * _431));
    float _496 = _493.x * TEXCOORD_1.w;
    float _497 = dot(vec3(_336, _337, _338), vec3(_414, _415, _416));
    float _500 = _497 * 2.0;
    float _504 = (_500 * _336) - _414;
    float _505 = (_500 * _337) - _415;
    float _506 = (_500 * _338) - _416;
    float _510 = abs(dot(vec3(_414, _415, _416), vec3(_336, _337, _338)));
    float _3421 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _512 = sqrt(_339);
    float _525 = exp2((_512 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_512 * 3.0));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _894;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _619 = fma(_565, cbModelParam._m0[26u].z, fma(_561, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _557));
        float _623 = fma(_565, cbModelParam._m0[27u].z, fma(_561, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _557));
        float _627 = fma(_565, cbModelParam._m0[28u].z, fma(_561, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _557));
        float _652 = _557 + _336;
        float _653 = _561 + _337;
        float _654 = _565 + _338;
        float _664 = fma(_654, cbModelParam._m0[26u].z, fma(_653, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _652)) - _619;
        float _665 = fma(_654, cbModelParam._m0[27u].z, fma(_653, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _652)) - _623;
        float _666 = fma(_654, cbModelParam._m0[28u].z, fma(_653, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _652)) - _627;
        float _670 = inversesqrt(dot(vec3(_664, _665, _666), vec3(_664, _665, _666)));
        float _683 = ((_670 * _664) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_619 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _684 = ((_670 * _665) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_623 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _685 = ((_670 * _666) / cbModelParam._m0[34u].z) + ((((((_627 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        float _722 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_688.x + (-0.5));
        float _724 = _722 * (_688.y + (-0.5));
        float _725 = _722 * (_688.z + (-0.5));
        float _732 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_695.x + (-0.5));
        float _734 = _732 * (_695.y + (-0.5));
        float _735 = _732 * (_695.z + (-0.5));
        float _742 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_702.x + (-0.5));
        float _744 = _742 * (_702.y + (-0.5));
        float _745 = _742 * (_702.z + (-0.5));
        float _752 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_709.x + (-0.5));
        float _754 = _752 * (_709.y + (-0.5));
        float _755 = _752 * (_709.z + (-0.5));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = _723 * 0.5;
        float _760 = _733 * 0.5;
        float _761 = _743 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _776 = (dot(vec3(_336, _337, _338), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _786 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3469 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_788 + 1.0))) + _793) * _756;
        float _803 = _724 * 0.5;
        float _804 = _734 * 0.5;
        float _805 = _744 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _819 = (dot(vec3(_336, _337, _338), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _828 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3502 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_830 + 1.0))) + _835) * _757;
        float _845 = _725 * 0.5;
        float _846 = _735 * 0.5;
        float _847 = _745 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _861 = (dot(vec3(_336, _337, _338), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _870 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3535 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_872 + 1.0))) + _877) * _758;
        _894 = _725;
        _896 = _724;
        _897 = _723;
        _898 = _735;
        _899 = _734;
        _900 = _733;
        _901 = _745;
        _902 = _744;
        _903 = _743;
        _904 = _758;
        _905 = _757;
        _906 = _756;
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
    }
    else
    {
        _894 = _895;
        _896 = _895;
        _897 = _895;
        _898 = _895;
        _899 = _895;
        _900 = _895;
        _901 = _895;
        _902 = _895;
        _903 = _895;
        _904 = _895;
        _905 = _895;
        _906 = _895;
        _907 = 0.0;
        _908 = 0.0;
        _909 = 0.0;
    }
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _938 = fma(_565, cbModelParam._m0[30u].z, fma(_561, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _557));
        float _942 = fma(_565, cbModelParam._m0[31u].z, fma(_561, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _557));
        float _946 = fma(_565, cbModelParam._m0[32u].z, fma(_561, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _557));
        float _969 = _557 + _336;
        float _970 = _561 + _337;
        float _971 = _565 + _338;
        float _981 = fma(_971, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969)) - _938;
        float _982 = fma(_971, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969)) - _942;
        float _983 = fma(_971, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969)) - _946;
        float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
        float _1000 = ((_987 * _981) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_938 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_987 * _982) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_942 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_987 * _983) / cbModelParam._m0[35u].z) + ((((((_946 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        float _1037 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1004.x + (-0.5));
        float _1039 = _1037 * (_1004.y + (-0.5));
        float _1040 = _1037 * (_1004.z + (-0.5));
        float _1047 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1011.x + (-0.5));
        float _1049 = _1047 * (_1011.y + (-0.5));
        float _1050 = _1047 * (_1011.z + (-0.5));
        float _1057 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1018.x + (-0.5));
        float _1059 = _1057 * (_1018.y + (-0.5));
        float _1060 = _1057 * (_1018.z + (-0.5));
        float _1067 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1025.x + (-0.5));
        float _1069 = _1067 * (_1025.y + (-0.5));
        float _1070 = _1067 * (_1025.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_336, _337, _338), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3598 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_1101 + 1.0))) + _1106) * _1071;
        float _1116 = _1039 * 0.5;
        float _1117 = _1049 * 0.5;
        float _1118 = _1059 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_336, _337, _338), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3631 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_1143 + 1.0))) + _1148) * _1072;
        float _1158 = _1040 * 0.5;
        float _1159 = _1050 * 0.5;
        float _1160 = _1060 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_336, _337, _338), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3664 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1185 + 1.0))) + _1190) * _1073;
        _1207 = _1040;
        _1208 = _1039;
        _1209 = _1038;
        _1210 = _1050;
        _1211 = _1049;
        _1212 = _1048;
        _1213 = _1060;
        _1214 = _1059;
        _1215 = _1058;
        _1216 = _1073;
        _1217 = _1072;
        _1218 = _1071;
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _895;
        _1208 = _895;
        _1209 = _895;
        _1210 = _895;
        _1211 = _895;
        _1212 = _895;
        _1213 = _895;
        _1214 = _895;
        _1215 = _895;
        _1216 = _895;
        _1217 = _895;
        _1218 = _895;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _907)) + _907;
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _908)) + _908;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _909)) + _909;
    float _1254 = fma(_1233, cbSceneParam._m0[89u].z, fma(_1232, cbSceneParam._m0[89u].y, _1231 * cbSceneParam._m0[89u].x));
    float _1257 = fma(_1233, cbSceneParam._m0[90u].z, fma(_1232, cbSceneParam._m0[90u].y, _1231 * cbSceneParam._m0[90u].x));
    float _1260 = fma(_1233, cbSceneParam._m0[91u].z, fma(_1232, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1231));
    float _1275 = _504 * 0.5;
    float _1276 = _505 * 0.5;
    float _1277 = _506 * 0.5;
    float _1278 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1281 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1284 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1318;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1291 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_894, _898, _901, _904));
        float _1295 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_896, _899, _902, _905));
        float _1299 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_897, _900, _903, _906));
        float _1306 = dot(vec4(cbModelParam._m0[39u]), vec4(_1275, _1276, _1277, 1.0));
        _1318 = dot(vec3(isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1318 = 1.0;
    }
    float _1329;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1320 = dot(vec4(cbModelParam._m0[40u]), vec4(_1275, _1276, _1277, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1320) ? 0.0 : (isnan(0.0) ? _1320 : max(0.0, _1320))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1333 = (_1329 * cbModelParam._m0[1u].x) + (_1318 * (1.0 - cbModelParam._m0[1u].x));
    float _1343 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _339);
    float _1344 = isnan(_1343) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1343 : min(cbModelParam._m0[25u].z, _1343));
    float _1426;
    float _1428;
    float _1430;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1393 = fma(_565, cbModelParam._m0[13u].z, fma(_561, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _557)) + cbModelParam._m0[13u].w;
        float _1397 = fma(_565, cbModelParam._m0[14u].z, fma(_561, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _557)) + cbModelParam._m0[14u].w;
        float _1401 = fma(_565, cbModelParam._m0[15u].z, fma(_561, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _557)) + cbModelParam._m0[15u].w;
        float _1404 = fma(_506, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504));
        float _1407 = fma(_506, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504));
        float _1410 = fma(_506, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504));
        float _1438;
        if (_1404 > 0.0)
        {
            _1438 = abs((1.0 - _1393) / _1404);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1393 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1438 = frontier_phi_17_15_ladder;
        }
        float _1665;
        if (_1407 > 0.0)
        {
            _1665 = abs((1.0 - _1397) / _1407);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1397 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1665 = frontier_phi_26_22_ladder;
        }
        float _1911;
        if (_1410 > 0.0)
        {
            _1911 = abs((1.0 - _1401) / _1410);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1401 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1911 = frontier_phi_38_33_ladder;
        }
        float _1913 = isnan(_1665) ? _1438 : (isnan(_1438) ? _1665 : min(_1438, _1665));
        float _1914 = isnan(_1911) ? _1913 : (isnan(_1913) ? _1911 : min(_1913, _1911));
        float _1918 = (_1914 * _1404) + _1393;
        float _1919 = (_1914 * _1407) + _1397;
        float _1920 = (_1914 * _1410) + _1401;
        float _1921 = _1914 * 9.9999997473787516355514526367188e-05;
        float _1923 = (-1.0) - _1921;
        float _1925 = _1921 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1920 > _1925) || ((_1920 < _1923) || ((_1919 > _1925) || ((_1919 < _1923) || ((_1918 < _1923) || (_1918 > _1925))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1920, cbModelParam._m0[9u].z, fma(_1919, cbModelParam._m0[9u].y, _1918 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1920, cbModelParam._m0[10u].z, fma(_1919, cbModelParam._m0[10u].y, _1918 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1920, cbModelParam._m0[11u].z, fma(_1919, cbModelParam._m0[11u].y, _1918 * cbModelParam._m0[11u].x))), _1344);
            frontier_phi_16_38_ladder = _2044.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2044.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2044.x * cbModelParam._m0[1u].y;
        }
        _1426 = frontier_phi_16_38_ladder_2;
        _1428 = frontier_phi_16_38_ladder_1;
        _1430 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1414 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_504, _505, _506), _1344);
        _1426 = _1414.x * cbModelParam._m0[1u].y;
        _1428 = _1414.y * cbModelParam._m0[1u].y;
        _1430 = _1414.z * cbModelParam._m0[1u].y;
    }
    float _1434 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _339);
    float _1435 = isnan(_1434) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1434 : min(cbModelParam._m0[25u].w, _1434));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1492 = fma(_565, cbModelParam._m0[21u].z, fma(_561, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _557)) + cbModelParam._m0[21u].w;
        float _1496 = fma(_565, cbModelParam._m0[22u].z, fma(_561, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _557)) + cbModelParam._m0[22u].w;
        float _1500 = fma(_565, cbModelParam._m0[23u].z, fma(_561, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _557)) + cbModelParam._m0[23u].w;
        float _1503 = fma(_506, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504));
        float _1506 = fma(_506, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504));
        float _1509 = fma(_506, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504));
        float _1670;
        if (_1503 > 0.0)
        {
            _1670 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1670 = frontier_phi_28_24_ladder;
        }
        float _1938;
        if (_1506 > 0.0)
        {
            _1938 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1938 = frontier_phi_40_35_ladder;
        }
        float _2143;
        if (_1509 > 0.0)
        {
            _2143 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2143 = frontier_phi_49_46_ladder;
        }
        float _2145 = isnan(_1938) ? _1670 : (isnan(_1670) ? _1938 : min(_1670, _1938));
        float _2146 = isnan(_2143) ? _2145 : (isnan(_2145) ? _2143 : min(_2145, _2143));
        float _2150 = (_2146 * _1503) + _1492;
        float _2151 = (_2146 * _1506) + _1496;
        float _2152 = (_2146 * _1509) + _1500;
        float _2153 = _2146 * 9.9999997473787516355514526367188e-05;
        float _2154 = (-1.0) - _2153;
        float _2156 = _2153 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2152 > _2156) || ((_2152 < _2154) || ((_2151 > _2156) || ((_2151 < _2154) || ((_2150 < _2154) || (_2150 > _2156))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2152, cbModelParam._m0[17u].z, fma(_2151, cbModelParam._m0[17u].y, _2150 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2152, cbModelParam._m0[18u].z, fma(_2151, cbModelParam._m0[18u].y, _2150 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2152, cbModelParam._m0[19u].z, fma(_2151, cbModelParam._m0[19u].y, _2150 * cbModelParam._m0[19u].x))), _1435);
            frontier_phi_25_49_ladder = _2351.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2351.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2351.x * cbModelParam._m0[1u].z;
        }
        _1528 = frontier_phi_25_49_ladder_2;
        _1530 = frontier_phi_25_49_ladder_1;
        _1532 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_504, _505, _506), _1435);
        _1528 = _1512.x * cbModelParam._m0[1u].z;
        _1530 = _1512.y * cbModelParam._m0[1u].z;
        _1532 = _1512.z * cbModelParam._m0[1u].z;
    }
    float _1544 = ((((1.0 - _525) * ((_512 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_525 * _512)) * _496;
    float _1545 = _1544 * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1546 = _1544 * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1547 = _1544 * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1550 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1546, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1553 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1546, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1556 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1546, cbSceneParam._m0[91u].y, _1545 * cbSceneParam._m0[91u].x));
    vec4 _1564 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_430, _431));
    float _1566 = _1564.w;
    float _1578 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1566);
    float _1579 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1566);
    float _1580 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1566);
    uvec4 _1584 = floatBitsToUint(cbInstanceData._m0[_470 + 5u]);
    uint _1586 = _1584.x * 14u;
    uint _1587 = _1586 + 13u;
    float _1594 = _496 + (-1.0);
    float _1599 = (cbLight._m0[_1587].x * _1594) + 1.0;
    float _1600 = (cbLight._m0[_1587].y * _1594) + 1.0;
    float _1601 = (cbLight._m0[_1587].z * _1594) + 1.0;
    float _1602 = (cbLight._m0[_1587].w * _1594) + 1.0;
    uint _1603 = _1586 + 5u;
    float _1609 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
    uint _1613 = _1586 + 4u;
    float _1623 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
    uint _1627 = _1586 | 1u;
    float _1638 = dot(vec3(cbLight._m0[_1586].xyz), vec3(_336, _337, _338));
    float _1641 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_336, _337, _338));
    float _3800 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _3811 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1646 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * 0.3183098733425140380859375;
    float _1648 = (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * 0.3183098733425140380859375;
    float _1655 = ((cbLight._m0[_1603].x * _1609) * _1648) + (((cbLight._m0[_1613].x * _1578) * _1623) * _1646);
    float _1656 = ((_1609 * cbLight._m0[_1603].y) * _1648) + (((cbLight._m0[_1613].y * _1579) * _1623) * _1646);
    float _1657 = ((_1609 * cbLight._m0[_1603].z) * _1648) + (((cbLight._m0[_1613].z * _1580) * _1623) * _1646);
    uvec4 _1662 = floatBitsToUint(cbLight._m0[_1586 + 12u]);
    bool _1664 = _1662.x == 0u;
    float _1675;
    float _1677;
    float _1679;
    if (_1664)
    {
        _1675 = _1655;
        _1677 = _1656;
        _1679 = _1657;
    }
    else
    {
        uint _1683 = _1586 + 6u;
        float _1699 = (dot(vec3(cbLight._m0[_1586 + 2u].xyz), vec3(_336, _337, _338)) * 0.5) + 0.5;
        float _1700 = _1699 * _1699;
        float _3822 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1702 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1675 = (((cbLight._m0[_1683].x * 0.3183098733425140380859375) * _1701) * _1702) + _1655;
        _1677 = (((cbLight._m0[_1683].y * 0.3183098733425140380859375) * _1701) * _1702) + _1656;
        _1679 = (((cbLight._m0[_1683].z * 0.3183098733425140380859375) * _1701) * _1702) + _1657;
    }
    bool _1682 = _1662.y == 0u;
    float _1720;
    float _1722;
    float _1724;
    if (_1682)
    {
        _1720 = _1675;
        _1722 = _1677;
        _1724 = _1679;
    }
    else
    {
        uint _1882 = _1586 + 7u;
        float _1898 = (dot(vec3(cbLight._m0[_1586 + 3u].xyz), vec3(_336, _337, _338)) * 0.5) + 0.5;
        float _1899 = _1898 * _1898;
        float _3838 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1900 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1901 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _1720 = (((cbLight._m0[_1882].x * 0.3183098733425140380859375) * _1900) * _1901) + _1675;
        _1722 = (((cbLight._m0[_1882].y * 0.3183098733425140380859375) * _1900) * _1901) + _1677;
        _1724 = (((cbLight._m0[_1882].z * 0.3183098733425140380859375) * _1900) * _1901) + _1679;
    }
    uint _1727 = _1586 + 8u;
    float _1740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1586].w)) * _339) * 0.949999988079071044921875);
    float _1741 = _1740 * _1740;
    float _1742 = cbLight._m0[_1586].x + _414;
    float _1743 = cbLight._m0[_1586].y + _415;
    float _1744 = cbLight._m0[_1586].z + _416;
    float _1748 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
    float _1749 = _1748 * _1742;
    float _1750 = _1748 * _1743;
    float _1751 = _1748 * _1744;
    float _1752 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1586].xyz));
    float _3854 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _3865 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _1756 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _1757 = dot(vec3(_336, _337, _338), vec3(_1749, _1750, _1751));
    float _3876 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _1761 = dot(vec3(cbLight._m0[_1586].xyz), vec3(_1749, _1750, _1751));
    float _3887 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1765 = _1741 * _1741;
    float _1769 = ((_1760 * _1760) * (_1765 + (-1.0))) + 1.0;
    float _1780 = (exp2(log2(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1781 = 1.0 - _1741;
    float _1792 = (0.5 / (((_1756 * ((_1755 * _1781) + _1741)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1781) + _1741) * _1755))) * _1755;
    float _3898 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1794 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1765 / ((_1769 * _1769) * 3.141590118408203125));
    uint _1808 = _1586 + 9u;
    float _1819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1627].w)) * _339) * 0.949999988079071044921875);
    float _1820 = _1819 * _1819;
    float _1821 = cbLight._m0[_1627].x + _414;
    float _1822 = cbLight._m0[_1627].y + _415;
    float _1823 = cbLight._m0[_1627].z + _416;
    float _1827 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
    float _1828 = _1827 * _1821;
    float _1829 = _1827 * _1822;
    float _1830 = _1827 * _1823;
    float _1831 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1627].xyz));
    float _3909 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _1835 = dot(vec3(_336, _337, _338), vec3(_1828, _1829, _1830));
    float _3920 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _1839 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_1828, _1829, _1830));
    float _3931 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1843 = _1820 * _1820;
    float _1847 = ((_1838 * _1838) * (_1843 + (-1.0))) + 1.0;
    float _1856 = (exp2(log2(1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1857 = 1.0 - _1820;
    float _1867 = (0.5 / (((_1756 * ((_1834 * _1857) + _1820)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1857) + _1820) * _1834))) * _1834;
    float _3942 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1869 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1843 / ((_1847 * _1847) * 3.141590118408203125));
    float _1879 = (((_1856 * cbLight._m0[_1808].x) * _1869) * _1609) + ((((cbLight._m0[_1727].x * _1578) * _1780) * _1794) * _1623);
    float _1880 = (((_1856 * cbLight._m0[_1808].y) * _1869) * _1609) + ((((cbLight._m0[_1727].y * _1579) * _1780) * _1794) * _1623);
    float _1881 = (((_1856 * cbLight._m0[_1808].z) * _1869) * _1609) + ((((cbLight._m0[_1727].z * _1580) * _1780) * _1794) * _1623);
    float _1943;
    float _1945;
    float _1947;
    if (_1664)
    {
        _1943 = _1879;
        _1945 = _1880;
        _1947 = _1881;
    }
    else
    {
        uint _1949 = _1586 + 2u;
        uint _1953 = _1586 + 10u;
        float _1967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _339) * 0.949999988079071044921875);
        float _1968 = _1967 * _1967;
        float _1969 = cbLight._m0[_1949].x + _414;
        float _1970 = cbLight._m0[_1949].y + _415;
        float _1971 = cbLight._m0[_1949].z + _416;
        float _1975 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
        float _1976 = _1975 * _1969;
        float _1977 = _1975 * _1970;
        float _1978 = _1975 * _1971;
        float _1979 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_1949].xyz));
        float _3953 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1982 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1983 = dot(vec3(_336, _337, _338), vec3(_1976, _1977, _1978));
        float _3964 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1986 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1987 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_1976, _1977, _1978));
        float _3975 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1991 = _1968 * _1968;
        float _1995 = ((_1986 * _1986) * (_1991 + (-1.0))) + 1.0;
        float _2004 = (exp2(log2(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2005 = 1.0 - _1968;
        float _2015 = (0.5 / (((_1756 * ((_1982 * _2005) + _1968)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _2005) + _1968) * _1982))) * _1982;
        float _3986 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2017 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1991 / ((_1995 * _1995) * 3.141590118408203125));
        float _2018 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1943 = (((_2004 * cbLight._m0[_1953].x) * _2017) * _2018) + _1879;
        _1945 = (((_2004 * cbLight._m0[_1953].y) * _2017) * _2018) + _1880;
        _1947 = (((_2004 * cbLight._m0[_1953].z) * _2017) * _2018) + _1881;
    }
    float _2053;
    float _2055;
    float _2057;
    if (_1682)
    {
        _2053 = _1943;
        _2055 = _1945;
        _2057 = _1947;
    }
    else
    {
        uint _2064 = _1586 + 3u;
        uint _2068 = _1586 + 11u;
        float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _339) * 0.949999988079071044921875);
        float _2083 = _2082 * _2082;
        float _2084 = cbLight._m0[_2064].x + _414;
        float _2085 = cbLight._m0[_2064].y + _415;
        float _2086 = cbLight._m0[_2064].z + _416;
        float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
        float _2091 = _2090 * _2084;
        float _2092 = _2090 * _2085;
        float _2093 = _2090 * _2086;
        float _2094 = dot(vec3(_336, _337, _338), vec3(cbLight._m0[_2064].xyz));
        float _4002 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2097 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _2098 = dot(vec3(_336, _337, _338), vec3(_2091, _2092, _2093));
        float _4013 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _2102 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2091, _2092, _2093));
        float _4024 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2106 = _2083 * _2083;
        float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
        float _2119 = (exp2(log2(1.0 - (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2120 = 1.0 - _2083;
        float _2130 = (0.5 / (((_1756 * ((_2097 * _2120) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _2120) + _2083) * _2097))) * _2097;
        float _4035 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2132 = (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
        float _2133 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _2053 = (((_2119 * cbLight._m0[_2068].x) * _2132) * _2133) + _1943;
        _2055 = (((_2119 * cbLight._m0[_2068].y) * _2132) * _2133) + _1945;
        _2057 = (((_2119 * cbLight._m0[_2068].z) * _2132) * _2133) + _1947;
    }
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    if (_1584.y == 0u)
    {
        float _2208 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2208;
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2208;
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2208;
        uvec4 _2223 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2224 = _2223.x;
        uint _2235 = uint((float(_2223.y) * floor(float(uint(cbSceneParam._m0[85u].y * _431) / _2224))) + floor(float(uint(cbSceneParam._m0[85u].x * _430) / _2224)));
        float _2245 = (log2(_2211 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2246 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        uint _2249 = uint(isnan(14.0) ? _2246 : (isnan(_2246) ? 14.0 : min(_2246, 14.0)));
        uvec4 _2254 = texelFetch(g_lightClusterGridBuffer, int(((_2249 << 2u) + (_2235 << 6u)) >> 2u));
        uint _2255 = _2254.x;
        uint _2256 = _2223.z;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        if (((((1u << ((_2256 >> 4u) & 15u)) + 4294967295u) & _2255) == 0u) || ((_2256 & 240u) == 0u))
        {
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
            _2366 = 0.0;
        }
        else
        {
            float _2357;
            float _2359;
            float _2361;
            float _2363;
            float _2365;
            float _2367;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            uint _2514 = 0u;
            uint _2523;
            bool _2524;
            for (;;)
            {
                _2523 = texelFetch(g_lightClassification, int((((_2249 << 5u) + (_2235 << 9u)) + (_2514 << 2u)) >> 2u)).x;
                _2524 = _2523 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2524)
                {
                    frontier_phi_66_pred = _2508;
                    frontier_phi_66_pred_1 = _2513;
                    frontier_phi_66_pred_2 = _2512;
                    frontier_phi_66_pred_3 = _2511;
                    frontier_phi_66_pred_4 = _2510;
                    frontier_phi_66_pred_5 = _2509;
                }
                else
                {
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    uint _2659;
                    _2653 = _2508;
                    _2654 = _2509;
                    _2655 = _2510;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2523;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    for (;;)
                    {
                        uint _2663 = uint(findLSB(_2659)) + (_2514 << 5u);
                        uint _2660 = (_2659 + 4294967295u) & _2659;
                        uint _2665 = _2663 * 48u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2685 = (_2663 * 48u) + 4u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2704 = (_2663 * 48u) + 8u;
                        vec3 _2715 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x));
                        float _2719 = _2679.x - _2209;
                        float _2720 = _2679.y - _2210;
                        float _2721 = _2679.z - _2211;
                        float _2722 = dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721));
                        float _2725 = inversesqrt(_2722);
                        float _2726 = _2725 * _2719;
                        float _2727 = _2725 * _2720;
                        float _2728 = _2725 * _2721;
                        float _2729 = dot(vec3(_451, _454, _457), vec3(_2726, _2727, _2728));
                        float _2734 = 1.0 - (_2722 * _2679.w);
                        float _4061 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2735 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                        float _2736 = sqrt(_2722) * _2698.w;
                        float _2739 = 1.39999997615814208984375 / (_2736 + 1.39999997615814208984375);
                        float _2740 = _2739 * _2739;
                        float _2743 = ((1.0 - _2740) * _2729) + _2740;
                        float _2746 = _2736 * _2736;
                        float _2750 = ((isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))) * _2735) / ((_2746 * 0.699999988079071044921875) + 1.0);
                        float _2754 = (-0.0) - _2209;
                        float _2755 = (-0.0) - _2210;
                        float _2756 = (-0.0) - _2211;
                        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
                        float _2761 = _2760 * _2754;
                        float _2762 = _2760 * _2755;
                        float _2763 = _2760 * _2756;
                        float _2771 = exp2(log2(1.0 / ((_2746 * 3.5) + 5.0)) * 0.25);
                        float _2772 = 1.0 - _512;
                        float _2779 = sqrt(1.0 - ((1.0 - (_2772 * _2772)) * (1.0 - (_2771 * _2771))));
                        float _2780 = _2779 * _2779;
                        float _2781 = _2780 * _2780;
                        float _2782 = _2761 + _2726;
                        float _2783 = _2762 + _2727;
                        float _2784 = _2763 + _2728;
                        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
                        float _2792 = dot(vec3(_451, _454, _457), vec3(_2761, _2762, _2763));
                        float _4077 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2795 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                        float _2796 = dot(vec3(_451, _454, _457), vec3(_2788 * _2782, _2788 * _2783, _2788 * _2784));
                        float _4088 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2799 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                        float _2803 = ((_2799 * _2799) * (_2781 + (-1.0))) + 1.0;
                        float _2804 = _2739 * _2780;
                        float _2805 = _2804 * _2804;
                        float _2808 = ((1.0 - _2805) * _2729) + _2805;
                        float _4099 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2809 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                        float _2810 = 1.0 - _2780;
                        float _2820 = (0.5 / (((_2809 * ((_2795 * _2810) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2809 * _2810) + _2780) * _2795))) * _2809;
                        float _4110 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2831 = (((_2781 * 3.1415927410125732421875) * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) / ((_2803 * _2803) * ((_2746 * 2.1991131305694580078125) + 3.141590118408203125))) * _2735;
                        _2583 = (_2750 * _2698.x) + _2656;
                        _2584 = (_2750 * _2698.y) + _2657;
                        _2585 = (_2750 * _2698.z) + _2658;
                        _2580 = (_2831 * _2715.x) + _2653;
                        _2581 = (_2831 * _2715.y) + _2654;
                        _2582 = (_2831 * _2715.z) + _2655;
                        if (_2660 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2653 = _2580;
                            _2654 = _2581;
                            _2655 = _2582;
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2660;
                        }
                    }
                    frontier_phi_66_pred = _2580;
                    frontier_phi_66_pred_1 = _2585;
                    frontier_phi_66_pred_2 = _2584;
                    frontier_phi_66_pred_3 = _2583;
                    frontier_phi_66_pred_4 = _2582;
                    frontier_phi_66_pred_5 = _2581;
                }
                _2357 = frontier_phi_66_pred;
                _2367 = frontier_phi_66_pred_1;
                _2365 = frontier_phi_66_pred_2;
                _2363 = frontier_phi_66_pred_3;
                _2361 = frontier_phi_66_pred_4;
                _2359 = frontier_phi_66_pred_5;
                uint _2515 = _2514 + 1u;
                if (_2515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2508 = _2357;
                    _2509 = _2359;
                    _2510 = _2361;
                    _2511 = _2363;
                    _2512 = _2365;
                    _2513 = _2367;
                    _2514 = _2515;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
            _2366 = _2367;
        }
        uvec4 _2370 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2371 = _2370.z;
        uint _2373 = (_2371 >> 8u) & 15u;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        if (((4294967295u << _2373) & _2255) == 0u)
        {
            _2476 = _2356;
            _2478 = _2358;
            _2480 = _2360;
            _2482 = _2362;
            _2484 = _2364;
            _2486 = _2366;
        }
        else
        {
            float _2501 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
            float _2502 = _2501 * _2209;
            float _2503 = _2501 * _2210;
            float _2504 = _2501 * _2211;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2373 < ((_2371 >> 12u) & 15u))
            {
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2636 = _2356;
                float _2637 = _2358;
                float _2638 = _2360;
                float _2639 = _2362;
                float _2640 = _2364;
                float _2641 = _2366;
                uint _2642 = _2373;
                uint _2651;
                bool _2652;
                for (;;)
                {
                    _2651 = texelFetch(g_lightClassification, int((((_2249 << 5u) + (_2235 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                    _2652 = _2651 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2652)
                    {
                        frontier_phi_77_pred = _2641;
                        frontier_phi_77_pred_1 = _2640;
                        frontier_phi_77_pred_2 = _2639;
                        frontier_phi_77_pred_3 = _2638;
                        frontier_phi_77_pred_4 = _2637;
                        frontier_phi_77_pred_5 = _2636;
                    }
                    else
                    {
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _2858 = _2636;
                        float _2859 = _2637;
                        float _2860 = _2638;
                        float _2861 = _2639;
                        float _2862 = _2640;
                        float _2863 = _2641;
                        uint _2864 = _2651;
                        uint _2865;
                        vec4 _2890;
                        float _2891;
                        vec4 _2906;
                        vec3 _2918;
                        vec4 _2934;
                        vec4 _2950;
                        float _2997;
                        bool _2998;
                        for (;;)
                        {
                            uint _2875 = ((_2642 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2864));
                            _2865 = (_2864 + 4294967295u) & _2864;
                            uint _2877 = _2875 * 40u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            _2891 = _2890.w;
                            uint _2893 = (_2875 * 40u) + 4u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2908 = (_2875 * 40u) + 8u;
                            _2918 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x));
                            uint _2921 = (_2875 * 40u) + 16u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2937 = (_2875 * 40u) + 20u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2953 = (_2875 * 40u) + 24u;
                            vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2972 = (_2875 * 40u) + 28u;
                            vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            _2997 = fma(_2211, _2985.z, fma(_2210, _2985.y, _2985.x * _2209)) + _2985.w;
                            _2998 = !((fma(_2211, _2966.z, fma(_2210, _2966.y, _2966.x * _2209)) + _2966.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2998)
                            {
                                float _3025 = _2890.x - _2209;
                                float _3026 = _2890.y - _2210;
                                float _3027 = _2890.z - _2211;
                                float _3028 = dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027));
                                float _3031 = inversesqrt(_3028);
                                float _3032 = _3031 * _3025;
                                float _3033 = _3031 * _3026;
                                float _3034 = _3031 * _3027;
                                float _3038 = 1.0 - (_3028 / (_2891 * _2891));
                                float _4121 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3043 = sqrt(_3028) * _2906.w;
                                float _3045 = 1.39999997615814208984375 / (_3043 + 1.39999997615814208984375);
                                float _3046 = _3045 * _3045;
                                float _3049 = ((1.0 - _3046) * dot(vec3(_3032, _3033, _3034), vec3(_451, _454, _457))) + _3046;
                                float _3052 = _3043 * _3043;
                                float _3056 = (fma(_2211, _2934.z, fma(_2210, _2934.y, _2934.x * _2209)) + _2934.w) / _2997;
                                float _3057 = (fma(_2211, _2950.z, fma(_2210, _2950.y, _2950.x * _2209)) + _2950.w) / _2997;
                                float _3061 = 1.0 - dot(vec2(_3056, _3057), vec2(_3056, _3057));
                                float _4137 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3063 = _3062 * (((isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))) * _3039) / ((_3052 * 0.699999988079071044921875) + 1.0));
                                float _3075 = exp2(log2(1.0 / ((_3052 * 3.5) + 5.0)) * 0.25);
                                float _3076 = 1.0 - _512;
                                float _3083 = sqrt(1.0 - ((1.0 - (_3076 * _3076)) * (1.0 - (_3075 * _3075))));
                                float _3084 = _3083 * _3083;
                                float _3085 = _3084 * _3084;
                                float _3086 = _3032 - _2502;
                                float _3087 = _3033 - _2503;
                                float _3088 = _3034 - _2504;
                                float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                                float _3096 = dot(vec3(_451, _454, _457), vec3((-0.0) - _2502, (-0.0) - _2503, (-0.0) - _2504));
                                float _4148 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3099 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                                float _3100 = dot(vec3(_451, _454, _457), vec3(_3092 * _3086, _3092 * _3087, _3092 * _3088));
                                float _4159 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3103 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3107 = ((_3103 * _3103) * (_3085 + (-1.0))) + 1.0;
                                float _3108 = _3045 * _3084;
                                float _3109 = _3108 * _3108;
                                float _3115 = ((1.0 - _3109) * dot(vec3(_451, _454, _457), vec3(_3032, _3033, _3034))) + _3109;
                                float _4170 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                                float _3117 = 1.0 - _3084;
                                float _3127 = (0.5 / (((_3116 * ((_3099 * _3117) + _3084)) + 9.9999999392252902907785028219223e-09) + (((_3116 * _3117) + _3084) * _3099))) * _3116;
                                float _4181 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3137 = (_3062 * _3039) * (((_3085 * 3.1415927410125732421875) * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) / ((_3107 * _3107) * ((_3052 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3063 * _2906.y;
                                frontier_phi_83_pred_1 = _3063 * _2906.x;
                                frontier_phi_83_pred_2 = _3137 * _2918.z;
                                frontier_phi_83_pred_3 = _3137 * _2918.y;
                                frontier_phi_83_pred_4 = _3137 * _2918.x;
                                frontier_phi_83_pred_5 = _3063 * _2906.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3145 = frontier_phi_83_pred;
                            _3144 = frontier_phi_83_pred_1;
                            _3143 = frontier_phi_83_pred_2;
                            _3142 = frontier_phi_83_pred_3;
                            _3141 = frontier_phi_83_pred_4;
                            _3146 = frontier_phi_83_pred_5;
                            _2848 = _3144 + _2861;
                            _2849 = _3145 + _2862;
                            _2850 = _3146 + _2863;
                            _2845 = _3141 + _2858;
                            _2846 = _3142 + _2859;
                            _2847 = _3143 + _2860;
                            if (_2865 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2865;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2850;
                        frontier_phi_77_pred_1 = _2849;
                        frontier_phi_77_pred_2 = _2848;
                        frontier_phi_77_pred_3 = _2847;
                        frontier_phi_77_pred_4 = _2846;
                        frontier_phi_77_pred_5 = _2845;
                    }
                    _2487 = frontier_phi_77_pred;
                    _2485 = frontier_phi_77_pred_1;
                    _2483 = frontier_phi_77_pred_2;
                    _2481 = frontier_phi_77_pred_3;
                    _2479 = frontier_phi_77_pred_4;
                    _2477 = frontier_phi_77_pred_5;
                    uint _2643 = _2642 + 1u;
                    if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2636 = _2477;
                        _2637 = _2479;
                        _2638 = _2481;
                        _2639 = _2483;
                        _2640 = _2485;
                        _2641 = _2487;
                        _2642 = _2643;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2481;
                frontier_phi_58_59_ladder_1 = _2487;
                frontier_phi_58_59_ladder_2 = _2485;
                frontier_phi_58_59_ladder_3 = _2483;
                frontier_phi_58_59_ladder_4 = _2479;
                frontier_phi_58_59_ladder_5 = _2477;
            }
            else
            {
                frontier_phi_58_59_ladder = _2360;
                frontier_phi_58_59_ladder_1 = _2366;
                frontier_phi_58_59_ladder_2 = _2364;
                frontier_phi_58_59_ladder_3 = _2362;
                frontier_phi_58_59_ladder_4 = _2358;
                frontier_phi_58_59_ladder_5 = _2356;
            }
            _2476 = frontier_phi_58_59_ladder_5;
            _2478 = frontier_phi_58_59_ladder_4;
            _2480 = frontier_phi_58_59_ladder;
            _2482 = frontier_phi_58_59_ladder_3;
            _2484 = frontier_phi_58_59_ladder_2;
            _2486 = frontier_phi_58_59_ladder_1;
        }
        float _2491 = isnan(1.0) ? _496 : (isnan(_496) ? 1.0 : min(_496, 1.0));
        _2268 = (_2491 * _2482) + _1720;
        _2270 = (_2491 * _2484) + _1722;
        _2272 = (_2491 * _2486) + _1724;
        _2274 = ((_2476 * 0.039999999105930328369140625) * _2491) + _2053;
        _2276 = ((_2478 * 0.039999999105930328369140625) * _2491) + _2055;
        _2278 = ((_2480 * 0.039999999105930328369140625) * _2491) + _2057;
    }
    else
    {
        _2268 = _1720;
        _2270 = _1722;
        _2272 = _1724;
        _2274 = _2053;
        _2276 = _2055;
        _2278 = _2057;
    }
    float _4197 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4208 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4219 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _2295 = ((isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2268 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _496))) + ((_2274 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    float _2296 = ((isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2270 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _496))) + ((_2276 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    float _2297 = ((isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2272 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _496))) + ((_2278 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    uint _2298 = _470 + 6u;
    float _2306 = _430 / cbSceneParam._m0[86u].x;
    float _2307 = _431 / cbSceneParam._m0[86u].y;
    vec4 _2321 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, (log2((isnan(cbSceneParam._m0[77u].w) ? _356 : (isnan(_356) ? cbSceneParam._m0[77u].w : min(_356, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2323 = _2321.x;
    float _2324 = _2321.y;
    float _2325 = _2321.z;
    float _2326 = _2321.w;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_356 > cbSceneParam._m0[78u].w)
    {
        float _2381 = isnan(_356) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _356 : min(cbSceneParam._m0[80u].w, _356));
        float _2382 = _2381 / _356;
        float _2393 = _2382 * _407;
        float _2394 = _408 * _2382;
        float _2395 = (-0.0) - _2394;
        float _2396 = _2382 * _409;
        float _2398 = (cbSceneParam._m0[77u].w * _2395) / _2381;
        float _2399 = _2398 + cbSceneParam._m0[79u].w;
        float _2400 = cbSceneParam._m0[79u].w - _2394;
        float _2406 = sqrt(((_2393 * _2393) + (_2394 * _2394)) + (_2396 * _2396));
        float _2409 = (1.0 - (cbSceneParam._m0[77u].w / _2381)) * _2406;
        float _2414 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2416 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2593;
        if (abs((_2395 - _2398) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2593 = ((((_2399 > 0.0) ? exp2(_2414 * _2399) : (2.0 - exp2(_2416 * _2399))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2409;
        }
        else
        {
            float _2537 = 1.0 / cbSceneParam._m0[80u].x;
            float _2538 = isnan(_2400) ? _2399 : (isnan(_2399) ? _2400 : max(_2399, _2400));
            float _2539 = isnan(_2400) ? _2399 : (isnan(_2399) ? _2400 : min(_2399, _2400));
            float _2548 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : min(_2538, 0.0));
            float _2549 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : min(_2539, 0.0));
            _2593 = ((abs(_2406 / _2395) * cbSceneParam._m0[80u].y) * ((((_2548 - _2549) * 2.0) - ((exp2(_2414 * (isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0)))) - exp2(_2414 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0))))) * _2537)) - ((exp2(_2416 * _2548) - exp2(_2416 * _2549)) * _2537))) + (_2409 * cbSceneParam._m0[80u].z);
        }
        vec4 _2595 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, 1.0), 0.0);
        float _2604 = exp2((_2593 * (-1.44269502162933349609375)) * (1.0 - _2595.w));
        float _2605 = log2(_2604);
        float _2621 = log2(_2326);
        _2418 = (exp2(_2621 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].x)) * _2595.x) / cbSceneParam._m0[78u].x)) + _2323;
        _2420 = (exp2(_2621 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].y)) * _2595.y) / cbSceneParam._m0[78u].y)) + _2324;
        _2422 = (exp2(_2621 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].z)) * _2595.z) / cbSceneParam._m0[78u].z)) + _2325;
        _2424 = _2604 * _2326;
    }
    else
    {
        _2418 = _2323;
        _2420 = _2324;
        _2422 = _2325;
        _2424 = _2326;
    }
    bool _2631;
    vec4 _2434;
    vec4 _2456;
    float _2458;
    float _2462;
    float _2463;
    float _2464;
    float _2465;
    bool _2475;
    for (;;)
    {
        _2434 = cbMatDynParam._m0[0u];
        float _2436 = roundEven(_2434.y);
        bool _2437 = _2436 == 3.0;
        float _2438 = log2(_2424);
        float _2445 = exp2(_2438 * cbSceneParam._m0[78u].x) * _2295;
        float _2446 = exp2(_2438 * cbSceneParam._m0[78u].y) * _2296;
        float _2447 = exp2(_2438 * cbSceneParam._m0[78u].z) * _2297;
        float _2454 = _419 + (-0.5);
        _2456 = cbMtdParam._m0[1u];
        _2458 = _2456.y * _2454;
        float _2461 = (_2436 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2462 = _2461 * (_2437 ? _2445 : (_2445 + (cbSceneParam._m0[72u].w * _2418)));
        _2463 = _2461 * (_2437 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2420)));
        _2464 = _2461 * (_2437 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2422)));
        _2465 = _2454 * 0.999000012874603271484375;
        _2475 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2475)
        {
            if ((cbInstanceData._m0[_470 + 7u].x + _2465) < 0.5)
            {
                _2631 = true;
                break;
            }
        }
        uint _2572 = _472 + uint(_2434.w);
        if ((cbInstanceData._m0[_2572].w < 1.0) && ((cbInstanceData._m0[_2572].w + _2465) < 0.5))
        {
            _2631 = true;
            break;
        }
        if ((_2458 + _294) < _2456.x)
        {
            _2631 = true;
            break;
        }
        _2631 = false;
        break;
    }
    float _2836;
    if (_2631)
    {
        discard_state = true;
        _2836 = 0.0;
    }
    else
    {
        _2836 = cbInstanceData._m0[_2298].w;
    }
    SV_Target.x = _2462;
    SV_Target.y = _2463;
    SV_Target.z = _2464;
    SV_Target.w = _2836;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2298].w;
    discard_exit();
}


