#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _800;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _184 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _191 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _221 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _227 = _221.x * cbMtdParam._m0[9u].x;
    float _228 = _221.y * cbMtdParam._m0[9u].y;
    float _229 = _221.z * cbMtdParam._m0[9u].z;
    vec4 _241 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _245 = _241.z;
    float _249 = (_241.x * 2.0) + (-1.0);
    float _251 = (_241.y * 2.0) + (-1.0);
    float _252 = dot(vec2(_249, _251), vec2(_249, _251));
    float _3399 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _258 = sqrt(1.0 - (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))));
    float _261 = fma(_258, _191 * NORMAL.x, fma(_251, _198 * TANGENT.x, (_184 * _176) * _249));
    float _264 = fma(_258, _191 * NORMAL.y, fma(_251, _198 * TANGENT.y, (_184 * _177) * _249));
    float _267 = fma(_258, _191 * NORMAL.z, fma(_251, _198 * TANGENT.z, (_184 * _178) * _249));
    float _271 = inversesqrt(dot(vec3(_261, _264, _267), vec3(_261, _264, _267)));
    float _272 = _271 * _261;
    float _273 = _271 * _264;
    float _274 = _271 * _267;
    float _3410 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _275 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _3421 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3432 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3443 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _294 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _336 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _346 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _336);
    float _347 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _336);
    float _348 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _336);
    float _352 = inversesqrt(dot(vec3(_346, _347, _348), vec3(_346, _347, _348)));
    float _353 = _346 * _352;
    float _354 = _347 * _352;
    float _355 = _348 * _352;
    float _361 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _362 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _383 = fma(_274, cbSceneParam._m0[5u].z, fma(_273, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _272));
    float _386 = fma(_274, cbSceneParam._m0[6u].z, fma(_273, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _272));
    float _389 = fma(_274, cbSceneParam._m0[7u].z, fma(_273, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _272));
    uint _402 = uint(roundEven(NORMAL.w)) * 13u;
    uint _405 = (_402 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _411 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * cbInstanceData._m0[_405].x;
    float _412 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * cbInstanceData._m0[_405].y;
    float _413 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_405].z;
    float _3454 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _414 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _3465 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _3476 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _416 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    vec4 _425 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _361, cbSceneParam._m0[86u].y * _362));
    float _428 = _425.x * TEXCOORD_1.w;
    float _429 = dot(vec3(_272, _273, _274), vec3(_353, _354, _355));
    float _432 = _429 * 2.0;
    float _436 = (_432 * _272) - _353;
    float _437 = (_432 * _273) - _354;
    float _438 = (_432 * _274) - _355;
    float _442 = abs(dot(vec3(_353, _354, _355), vec3(_272, _273, _274)));
    float _3487 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _444 = sqrt(_275);
    float _457 = exp2((_444 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_444 * 3.0));
    float _489 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _493 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _497 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _799;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _524 = fma(_497, cbModelParam._m0[26u].z, fma(_493, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _489));
        float _528 = fma(_497, cbModelParam._m0[27u].z, fma(_493, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _489));
        float _532 = fma(_497, cbModelParam._m0[28u].z, fma(_493, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _489));
        float _557 = _489 + _272;
        float _558 = _493 + _273;
        float _559 = _497 + _274;
        float _569 = fma(_559, cbModelParam._m0[26u].z, fma(_558, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _557)) - _524;
        float _570 = fma(_559, cbModelParam._m0[27u].z, fma(_558, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _557)) - _528;
        float _571 = fma(_559, cbModelParam._m0[28u].z, fma(_558, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _557)) - _532;
        float _575 = inversesqrt(dot(vec3(_569, _570, _571), vec3(_569, _570, _571)));
        float _588 = ((_575 * _569) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_524 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _589 = ((_575 * _570) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_528 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _590 = ((_575 * _571) / cbModelParam._m0[34u].z) + ((((((_532 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _593 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_588, _589, _590), 0.0);
        vec4 _600 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_588, _589, _590), 0.0);
        vec4 _607 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_588, _589, _590), 0.0);
        vec4 _614 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_588, _589, _590), 0.0);
        float _627 = exp2((_593.w + (-0.5)) * 20.0) * 2.0;
        float _628 = _627 * (_593.x + (-0.5));
        float _629 = _627 * (_593.y + (-0.5));
        float _630 = _627 * (_593.z + (-0.5));
        float _637 = exp2((_600.w + (-0.5)) * 20.0) * 2.0;
        float _638 = _637 * (_600.x + (-0.5));
        float _639 = _637 * (_600.y + (-0.5));
        float _640 = _637 * (_600.z + (-0.5));
        float _647 = exp2((_607.w + (-0.5)) * 20.0) * 2.0;
        float _648 = _647 * (_607.x + (-0.5));
        float _649 = _647 * (_607.y + (-0.5));
        float _650 = _647 * (_607.z + (-0.5));
        float _657 = exp2((_614.w + (-0.5)) * 20.0) * 2.0;
        float _658 = _657 * (_614.x + (-0.5));
        float _659 = _657 * (_614.y + (-0.5));
        float _660 = _657 * (_614.z + (-0.5));
        float _661 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _664 = _628 * 0.5;
        float _665 = _638 * 0.5;
        float _666 = _648 * 0.5;
        float _667 = dot(vec3(_664, _665, _666), vec3(_664, _665, _666));
        float _672 = (_667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_667);
        float _681 = (dot(vec3(_272, _273, _274), vec3(_672 * _664, _672 * _665, _672 * _666)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _691 = sqrt(((_665 * _665) + (_664 * _664)) + (_666 * _666)) / (_661 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _693 = _692 * 2.0;
        float _697 = (1.0 - _692) / (_692 + 1.0);
        float _3535 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _698 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _707 = ((((1.0 - _698) * (_693 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_693 + 1.0))) + _698) * _661;
        float _708 = _629 * 0.5;
        float _709 = _639 * 0.5;
        float _710 = _649 * 0.5;
        float _711 = dot(vec3(_708, _709, _710), vec3(_708, _709, _710));
        float _716 = (_711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_711);
        float _724 = (dot(vec3(_272, _273, _274), vec3(_716 * _708, _716 * _709, _716 * _710)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _733 = sqrt(((_709 * _709) + (_708 * _708)) + (_710 * _710)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _735 = _734 * 2.0;
        float _739 = (1.0 - _734) / (_734 + 1.0);
        float _3568 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _749 = ((((1.0 - _740) * (_735 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_735 + 1.0))) + _740) * _662;
        float _750 = _630 * 0.5;
        float _751 = _640 * 0.5;
        float _752 = _650 * 0.5;
        float _753 = dot(vec3(_750, _751, _752), vec3(_750, _751, _752));
        float _758 = (_753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_753);
        float _766 = (dot(vec3(_272, _273, _274), vec3(_758 * _750, _758 * _751, _758 * _752)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _775 = sqrt(((_751 * _751) + (_750 * _750)) + (_752 * _752)) / (_663 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _777 = _776 * 2.0;
        float _781 = (1.0 - _776) / (_776 + 1.0);
        float _3601 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _791 = ((((1.0 - _782) * (_777 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_777 + 1.0))) + _782) * _663;
        _799 = _630;
        _801 = _629;
        _802 = _628;
        _803 = _640;
        _804 = _639;
        _805 = _638;
        _806 = _650;
        _807 = _649;
        _808 = _648;
        _809 = _663;
        _810 = _662;
        _811 = _661;
        _812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0)));
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0)));
        _814 = cbModelParam._m0[36u].z * (isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)));
    }
    else
    {
        _799 = _800;
        _801 = _800;
        _802 = _800;
        _803 = _800;
        _804 = _800;
        _805 = _800;
        _806 = _800;
        _807 = _800;
        _808 = _800;
        _809 = _800;
        _810 = _800;
        _811 = _800;
        _812 = 0.0;
        _813 = 0.0;
        _814 = 0.0;
    }
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _840 = fma(_497, cbModelParam._m0[30u].z, fma(_493, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _489));
        float _844 = fma(_497, cbModelParam._m0[31u].z, fma(_493, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _489));
        float _848 = fma(_497, cbModelParam._m0[32u].z, fma(_493, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _489));
        float _871 = _489 + _272;
        float _872 = _493 + _273;
        float _873 = _497 + _274;
        float _883 = fma(_873, cbModelParam._m0[30u].z, fma(_872, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _871)) - _840;
        float _884 = fma(_873, cbModelParam._m0[31u].z, fma(_872, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _871)) - _844;
        float _885 = fma(_873, cbModelParam._m0[32u].z, fma(_872, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _871)) - _848;
        float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
        float _902 = ((_889 * _883) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_840 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_889 * _884) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_844 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_889 * _885) / cbModelParam._m0[35u].z) + ((((((_848 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        float _939 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_906.x + (-0.5));
        float _941 = _939 * (_906.y + (-0.5));
        float _942 = _939 * (_906.z + (-0.5));
        float _949 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_913.x + (-0.5));
        float _951 = _949 * (_913.y + (-0.5));
        float _952 = _949 * (_913.z + (-0.5));
        float _959 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_920.x + (-0.5));
        float _961 = _959 * (_920.y + (-0.5));
        float _962 = _959 * (_920.z + (-0.5));
        float _969 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_927.x + (-0.5));
        float _971 = _969 * (_927.y + (-0.5));
        float _972 = _969 * (_927.z + (-0.5));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = _940 * 0.5;
        float _977 = _950 * 0.5;
        float _978 = _960 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_272, _273, _274), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3664 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1003 + 1.0))) + _1008) * _973;
        float _1018 = _941 * 0.5;
        float _1019 = _951 * 0.5;
        float _1020 = _961 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_272, _273, _274), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3697 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1045 + 1.0))) + _1050) * _974;
        float _1060 = _942 * 0.5;
        float _1061 = _952 * 0.5;
        float _1062 = _962 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_272, _273, _274), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3730 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1087 + 1.0))) + _1092) * _975;
        _1109 = _942;
        _1110 = _941;
        _1111 = _940;
        _1112 = _952;
        _1113 = _951;
        _1114 = _950;
        _1115 = _962;
        _1116 = _961;
        _1117 = _960;
        _1118 = _975;
        _1119 = _974;
        _1120 = _973;
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
    }
    else
    {
        _1109 = _800;
        _1110 = _800;
        _1111 = _800;
        _1112 = _800;
        _1113 = _800;
        _1114 = _800;
        _1115 = _800;
        _1116 = _800;
        _1117 = _800;
        _1118 = _800;
        _1119 = _800;
        _1120 = _800;
        _1121 = 0.0;
        _1122 = 0.0;
        _1123 = 0.0;
    }
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _812)) + _812;
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _813)) + _813;
    float _1135 = (cbModelParam._m0[1u].x * (_1123 - _814)) + _814;
    float _1156 = fma(_1135, cbSceneParam._m0[89u].z, fma(_1134, cbSceneParam._m0[89u].y, _1133 * cbSceneParam._m0[89u].x));
    float _1159 = fma(_1135, cbSceneParam._m0[90u].z, fma(_1134, cbSceneParam._m0[90u].y, _1133 * cbSceneParam._m0[90u].x));
    float _1162 = fma(_1135, cbSceneParam._m0[91u].z, fma(_1134, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1133));
    float _1177 = _436 * 0.5;
    float _1178 = _437 * 0.5;
    float _1179 = _438 * 0.5;
    float _1180 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1111, _1114, _1117, _1120));
    float _1183 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1186 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1220;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1193 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_799, _803, _806, _809));
        float _1197 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_801, _804, _807, _810));
        float _1201 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_802, _805, _808, _811));
        float _1208 = dot(vec4(cbModelParam._m0[39u]), vec4(_1177, _1178, _1179, 1.0));
        _1220 = dot(vec3(isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1208) ? 0.0 : (isnan(0.0) ? _1208 : max(0.0, _1208))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1220 = 1.0;
    }
    float _1231;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1222 = dot(vec4(cbModelParam._m0[40u]), vec4(_1177, _1178, _1179, 1.0));
        _1231 = dot(vec3(isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1222) ? 0.0 : (isnan(0.0) ? _1222 : max(0.0, _1222))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1231 = 1.0;
    }
    float _1235 = (_1231 * cbModelParam._m0[1u].x) + (_1220 * (1.0 - cbModelParam._m0[1u].x));
    float _1245 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _275);
    float _1246 = isnan(_1245) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1245 : min(cbModelParam._m0[25u].z, _1245));
    float _1328;
    float _1330;
    float _1332;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1295 = fma(_497, cbModelParam._m0[13u].z, fma(_493, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _489)) + cbModelParam._m0[13u].w;
        float _1299 = fma(_497, cbModelParam._m0[14u].z, fma(_493, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _489)) + cbModelParam._m0[14u].w;
        float _1303 = fma(_497, cbModelParam._m0[15u].z, fma(_493, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _489)) + cbModelParam._m0[15u].w;
        float _1306 = fma(_438, cbModelParam._m0[13u].z, fma(_437, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _436));
        float _1309 = fma(_438, cbModelParam._m0[14u].z, fma(_437, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _436));
        float _1312 = fma(_438, cbModelParam._m0[15u].z, fma(_437, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _436));
        float _1340;
        if (_1306 > 0.0)
        {
            _1340 = abs((1.0 - _1295) / _1306);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1295 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1340 = frontier_phi_14_12_ladder;
        }
        float _1514;
        if (_1309 > 0.0)
        {
            _1514 = abs((1.0 - _1299) / _1309);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1299 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1514 = frontier_phi_23_19_ladder;
        }
        float _1810;
        if (_1312 > 0.0)
        {
            _1810 = abs((1.0 - _1303) / _1312);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1303 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1810 = frontier_phi_35_30_ladder;
        }
        float _1812 = isnan(_1514) ? _1340 : (isnan(_1340) ? _1514 : min(_1340, _1514));
        float _1813 = isnan(_1810) ? _1812 : (isnan(_1812) ? _1810 : min(_1812, _1810));
        float _1817 = (_1813 * _1306) + _1295;
        float _1818 = (_1813 * _1309) + _1299;
        float _1819 = (_1813 * _1312) + _1303;
        float _1820 = _1813 * 9.9999997473787516355514526367188e-05;
        float _1822 = (-1.0) - _1820;
        float _1824 = _1820 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1819 > _1824) || ((_1819 < _1822) || ((_1818 > _1824) || ((_1818 < _1822) || ((_1817 < _1822) || (_1817 > _1824))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1964 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1819, cbModelParam._m0[9u].z, fma(_1818, cbModelParam._m0[9u].y, _1817 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1819, cbModelParam._m0[10u].z, fma(_1818, cbModelParam._m0[10u].y, _1817 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1819, cbModelParam._m0[11u].z, fma(_1818, cbModelParam._m0[11u].y, _1817 * cbModelParam._m0[11u].x))), _1246);
            frontier_phi_13_35_ladder = _1964.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1964.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1964.x * cbModelParam._m0[1u].y;
        }
        _1328 = frontier_phi_13_35_ladder_2;
        _1330 = frontier_phi_13_35_ladder_1;
        _1332 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1316 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_436, _437, _438), _1246);
        _1328 = _1316.x * cbModelParam._m0[1u].y;
        _1330 = _1316.y * cbModelParam._m0[1u].y;
        _1332 = _1316.z * cbModelParam._m0[1u].y;
    }
    float _1336 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _275);
    float _1337 = isnan(_1336) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1336 : min(cbModelParam._m0[25u].w, _1336));
    float _1430;
    float _1432;
    float _1434;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1394 = fma(_497, cbModelParam._m0[21u].z, fma(_493, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _489)) + cbModelParam._m0[21u].w;
        float _1398 = fma(_497, cbModelParam._m0[22u].z, fma(_493, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _489)) + cbModelParam._m0[22u].w;
        float _1402 = fma(_497, cbModelParam._m0[23u].z, fma(_493, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _489)) + cbModelParam._m0[23u].w;
        float _1405 = fma(_438, cbModelParam._m0[21u].z, fma(_437, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _436));
        float _1408 = fma(_438, cbModelParam._m0[22u].z, fma(_437, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _436));
        float _1411 = fma(_438, cbModelParam._m0[23u].z, fma(_437, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _436));
        float _1519;
        if (_1405 > 0.0)
        {
            _1519 = abs((1.0 - _1394) / _1405);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1394 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1519 = frontier_phi_25_21_ladder;
        }
        float _1837;
        if (_1408 > 0.0)
        {
            _1837 = abs((1.0 - _1398) / _1408);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1398 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1837 = frontier_phi_37_32_ladder;
        }
        float _2164;
        if (_1411 > 0.0)
        {
            _2164 = abs((1.0 - _1402) / _1411);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1402 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2164 = frontier_phi_47_44_ladder;
        }
        float _2166 = isnan(_1837) ? _1519 : (isnan(_1519) ? _1837 : min(_1519, _1837));
        float _2167 = isnan(_2164) ? _2166 : (isnan(_2166) ? _2164 : min(_2166, _2164));
        float _2171 = (_2167 * _1405) + _1394;
        float _2172 = (_2167 * _1408) + _1398;
        float _2173 = (_2167 * _1411) + _1402;
        float _2174 = _2167 * 9.9999997473787516355514526367188e-05;
        float _2175 = (-1.0) - _2174;
        float _2177 = _2174 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2173 > _2177) || ((_2173 < _2175) || ((_2172 > _2177) || ((_2172 < _2175) || ((_2171 < _2175) || (_2171 > _2177))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2291 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2173, cbModelParam._m0[17u].z, fma(_2172, cbModelParam._m0[17u].y, _2171 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2173, cbModelParam._m0[18u].z, fma(_2172, cbModelParam._m0[18u].y, _2171 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2173, cbModelParam._m0[19u].z, fma(_2172, cbModelParam._m0[19u].y, _2171 * cbModelParam._m0[19u].x))), _1337);
            frontier_phi_22_47_ladder = _2291.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2291.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2291.x * cbModelParam._m0[1u].z;
        }
        _1430 = frontier_phi_22_47_ladder_2;
        _1432 = frontier_phi_22_47_ladder_1;
        _1434 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1414 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_436, _437, _438), _1337);
        _1430 = _1414.x * cbModelParam._m0[1u].z;
        _1432 = _1414.y * cbModelParam._m0[1u].z;
        _1434 = _1414.z * cbModelParam._m0[1u].z;
    }
    float _1446 = ((((1.0 - _457) * ((_444 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_457 * _444)) * _428;
    float _1447 = _1446 * ((cbModelParam._m0[1u].w * (_1430 - _1328)) + _1328);
    float _1448 = _1446 * ((cbModelParam._m0[1u].w * (_1432 - _1330)) + _1330);
    float _1449 = _1446 * ((cbModelParam._m0[1u].w * (_1434 - _1332)) + _1332);
    float _1452 = fma(_1449, cbSceneParam._m0[89u].z, fma(_1448, cbSceneParam._m0[89u].y, _1447 * cbSceneParam._m0[89u].x));
    float _1455 = fma(_1449, cbSceneParam._m0[90u].z, fma(_1448, cbSceneParam._m0[90u].y, _1447 * cbSceneParam._m0[90u].x));
    float _1458 = fma(_1449, cbSceneParam._m0[91u].z, fma(_1448, cbSceneParam._m0[91u].y, _1447 * cbSceneParam._m0[91u].x));
    float _1493 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1497 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1501 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1505 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1506 = _1493 / _1505;
    float _1507 = _1497 / _1505;
    float _1508 = _1501 / _1505;
    float _1655;
    float _1656;
    float _1657;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1535 = ((uint(_1508 > cbSceneParam._m0[59u].y) + uint(_1508 > cbSceneParam._m0[59u].x)) + uint(_1508 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1536 = _1535 + 43u;
        uint _1544 = _1535 + 44u;
        uint _1552 = _1535 + 45u;
        uint _1560 = _1535 + 46u;
        float _1571 = fma(_1505, cbSceneParam._m0[_1536].w, fma(_1501, cbSceneParam._m0[_1536].z, fma(_1497, cbSceneParam._m0[_1536].y, _1493 * cbSceneParam._m0[_1536].x)));
        float _1575 = fma(_1505, cbSceneParam._m0[_1544].w, fma(_1501, cbSceneParam._m0[_1544].z, fma(_1497, cbSceneParam._m0[_1544].y, _1493 * cbSceneParam._m0[_1544].x)));
        float _1583 = fma(_1505, cbSceneParam._m0[_1560].w, fma(_1501, cbSceneParam._m0[_1560].z, fma(_1497, cbSceneParam._m0[_1560].y, _1493 * cbSceneParam._m0[_1560].x)));
        float _1588 = cbSceneParam._m0[33u].z * _1583;
        float _1590 = cbSceneParam._m0[33u].w * _1583;
        float _1593 = fma(_1505, cbSceneParam._m0[_1552].w, fma(_1501, cbSceneParam._m0[_1552].z, fma(_1497, cbSceneParam._m0[_1552].y, _1493 * cbSceneParam._m0[_1552].x))) / _1583;
        float _1641 = (cbSceneParam._m0[33u].x - sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508))) * cbSceneParam._m0[33u].y;
        float _3856 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1648 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1588 + _1571) / _1583, (_1590 + _1575) / _1583), _1593), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1590 + _1571) / _1583, (_1575 - _1588) / _1583), _1593), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1571 - _1588) / _1583, (_1575 - _1590) / _1583), _1593), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1571 - _1590) / _1583, (_1588 + _1575) / _1583), _1593), 0.0)).x), vec4(0.25)));
        _1655 = 1.0 - (_1648 * cbSceneParam._m0[34u].x);
        _1656 = 1.0 - (_1648 * cbSceneParam._m0[34u].y);
        _1657 = 1.0 - (_1648 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1655 = 1.0;
        _1656 = 1.0;
        _1657 = 1.0;
    }
    float _1721;
    float _1723;
    float _1725;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1709 = fma(_1505, cbSceneParam._m0[63u].w, fma(_1501, cbSceneParam._m0[63u].z, fma(_1497, cbSceneParam._m0[63u].y, _1493 * cbSceneParam._m0[63u].x)));
        float _1710 = fma(_1505, cbSceneParam._m0[60u].w, fma(_1501, cbSceneParam._m0[60u].z, fma(_1497, cbSceneParam._m0[60u].y, _1493 * cbSceneParam._m0[60u].x))) / _1709;
        float _1711 = fma(_1505, cbSceneParam._m0[61u].w, fma(_1501, cbSceneParam._m0[61u].z, fma(_1497, cbSceneParam._m0[61u].y, _1493 * cbSceneParam._m0[61u].x))) / _1709;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1710 >= cbSceneParam._m0[64u].x) && (_1711 >= cbSceneParam._m0[64u].y)) && (_1710 <= cbSceneParam._m0[64u].z)) && (_1711 <= cbSceneParam._m0[64u].w))
        {
            float _1850 = fma(_1505, cbSceneParam._m0[62u].w, fma(_1501, cbSceneParam._m0[62u].z, fma(_1497, cbSceneParam._m0[62u].y, _1493 * cbSceneParam._m0[62u].x))) / _1709;
            float _1854 = isnan(cbSceneParam._m0[41u].w) ? _1850 : (isnan(_1850) ? cbSceneParam._m0[41u].w : max(_1850, cbSceneParam._m0[41u].w));
            float _1897 = (cbSceneParam._m0[33u].x - sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508))) * cbSceneParam._m0[33u].y;
            float _3872 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
            float _1904 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1710, cbSceneParam._m0[33u].w + _1711), _1854), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1710, _1711 - cbSceneParam._m0[33u].z), _1854), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1710 - cbSceneParam._m0[33u].z, _1711 - cbSceneParam._m0[33u].w), _1854), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1710 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1711), _1854), 0.0)).x), vec4(0.25)));
            float _1908 = 1.0 - (_1904 * cbSceneParam._m0[34u].x);
            float _1909 = 1.0 - (_1904 * cbSceneParam._m0[34u].y);
            float _1910 = 1.0 - (_1904 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1910) ? _1657 : (isnan(_1657) ? _1910 : min(_1657, _1910));
            frontier_phi_34_33_ladder_1 = isnan(_1909) ? _1656 : (isnan(_1656) ? _1909 : min(_1656, _1909));
            frontier_phi_34_33_ladder_2 = isnan(_1908) ? _1655 : (isnan(_1655) ? _1908 : min(_1655, _1908));
        }
        else
        {
            frontier_phi_34_33_ladder = _1657;
            frontier_phi_34_33_ladder_1 = _1656;
            frontier_phi_34_33_ladder_2 = _1655;
        }
        _1721 = frontier_phi_34_33_ladder_2;
        _1723 = frontier_phi_34_33_ladder_1;
        _1725 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1721 = _1655;
        _1723 = _1656;
        _1725 = _1657;
    }
    uvec4 _1730 = floatBitsToUint(cbInstanceData._m0[_402 + 5u]);
    uint _1732 = _1730.x * 14u;
    uint _1733 = _1732 + 13u;
    float _1740 = _428 + (-1.0);
    float _1745 = (cbLight._m0[_1733].x * _1740) + 1.0;
    float _1746 = (cbLight._m0[_1733].y * _1740) + 1.0;
    float _1747 = (cbLight._m0[_1733].z * _1740) + 1.0;
    float _1748 = (cbLight._m0[_1733].w * _1740) + 1.0;
    uint _1749 = _1732 + 5u;
    float _1755 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
    uint _1759 = _1732 + 4u;
    float _1769 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
    uint _1773 = _1732 | 1u;
    float _1784 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_272, _273, _274));
    float _1787 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_272, _273, _274));
    float _3908 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _3919 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1792 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1794 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.3183098733425140380859375;
    float _1801 = ((cbLight._m0[_1749].x * _1755) * _1794) + (((cbLight._m0[_1759].x * _1721) * _1769) * _1792);
    float _1802 = ((_1755 * cbLight._m0[_1749].y) * _1794) + (((cbLight._m0[_1759].y * _1723) * _1769) * _1792);
    float _1803 = ((_1755 * cbLight._m0[_1749].z) * _1794) + (((cbLight._m0[_1759].z * _1725) * _1769) * _1792);
    uvec4 _1807 = floatBitsToUint(cbLight._m0[_1732 + 12u]);
    bool _1809 = _1807.x == 0u;
    float _1911;
    float _1913;
    float _1915;
    if (_1809)
    {
        _1911 = _1801;
        _1913 = _1802;
        _1915 = _1803;
    }
    else
    {
        uint _1919 = _1732 + 6u;
        float _1935 = (dot(vec3(cbLight._m0[_1732 + 2u].xyz), vec3(_272, _273, _274)) * 0.5) + 0.5;
        float _1936 = _1935 * _1935;
        float _3930 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1937 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1938 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _1911 = (((cbLight._m0[_1919].x * 0.3183098733425140380859375) * _1937) * _1938) + _1801;
        _1913 = (((cbLight._m0[_1919].y * 0.3183098733425140380859375) * _1937) * _1938) + _1802;
        _1915 = (((cbLight._m0[_1919].z * 0.3183098733425140380859375) * _1937) * _1938) + _1803;
    }
    bool _1918 = _1807.y == 0u;
    float _1973;
    float _1975;
    float _1977;
    if (_1918)
    {
        _1973 = _1911;
        _1975 = _1913;
        _1977 = _1915;
    }
    else
    {
        uint _2135 = _1732 + 7u;
        float _2151 = (dot(vec3(cbLight._m0[_1732 + 3u].xyz), vec3(_272, _273, _274)) * 0.5) + 0.5;
        float _2152 = _2151 * _2151;
        float _3946 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2153 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _2154 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _1973 = (((cbLight._m0[_2135].x * 0.3183098733425140380859375) * _2153) * _2154) + _1911;
        _1975 = (((cbLight._m0[_2135].y * 0.3183098733425140380859375) * _2153) * _2154) + _1913;
        _1977 = (((cbLight._m0[_2135].z * 0.3183098733425140380859375) * _2153) * _2154) + _1915;
    }
    uint _1980 = _1732 + 8u;
    float _1993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1732].w)) * _275) * 0.949999988079071044921875);
    float _1994 = _1993 * _1993;
    float _1995 = cbLight._m0[_1732].x + _353;
    float _1996 = cbLight._m0[_1732].y + _354;
    float _1997 = cbLight._m0[_1732].z + _355;
    float _2001 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
    float _2002 = _2001 * _1995;
    float _2003 = _2001 * _1996;
    float _2004 = _2001 * _1997;
    float _2005 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_1732].xyz));
    float _3962 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _2009 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _2010 = dot(vec3(_272, _273, _274), vec3(_2002, _2003, _2004));
    float _3984 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _2014 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_2002, _2003, _2004));
    float _3995 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2018 = _1994 * _1994;
    float _2022 = ((_2013 * _2013) * (_2018 + (-1.0))) + 1.0;
    float _2033 = (exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2034 = 1.0 - _1994;
    float _2045 = (0.5 / (((_2009 * ((_2008 * _2034) + _1994)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2034) + _1994) * _2008))) * _2008;
    float _4006 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2047 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2018 / ((_2022 * _2022) * 3.141590118408203125));
    uint _2061 = _1732 + 9u;
    float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1773].w)) * _275) * 0.949999988079071044921875);
    float _2073 = _2072 * _2072;
    float _2074 = cbLight._m0[_1773].x + _353;
    float _2075 = cbLight._m0[_1773].y + _354;
    float _2076 = cbLight._m0[_1773].z + _355;
    float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
    float _2081 = _2080 * _2074;
    float _2082 = _2080 * _2075;
    float _2083 = _2080 * _2076;
    float _2084 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_1773].xyz));
    float _4017 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _2088 = dot(vec3(_272, _273, _274), vec3(_2081, _2082, _2083));
    float _4028 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _2092 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_2081, _2082, _2083));
    float _4039 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2096 = _2073 * _2073;
    float _2100 = ((_2091 * _2091) * (_2096 + (-1.0))) + 1.0;
    float _2109 = (exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2110 = 1.0 - _2073;
    float _2120 = (0.5 / (((_2009 * ((_2087 * _2110) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2110) + _2073) * _2087))) * _2087;
    float _4050 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_2096 / ((_2100 * _2100) * 3.141590118408203125));
    float _2132 = (((_2109 * cbLight._m0[_2061].x) * _2122) * _1755) + ((((cbLight._m0[_1980].x * _1721) * _2033) * _2047) * _1769);
    float _2133 = (((_2109 * cbLight._m0[_2061].y) * _2122) * _1755) + ((((cbLight._m0[_1980].y * _1723) * _2033) * _2047) * _1769);
    float _2134 = (((_2109 * cbLight._m0[_2061].z) * _2122) * _1755) + ((((cbLight._m0[_1980].z * _1725) * _2033) * _2047) * _1769);
    float _2190;
    float _2192;
    float _2194;
    if (_1809)
    {
        _2190 = _2132;
        _2192 = _2133;
        _2194 = _2134;
    }
    else
    {
        uint _2196 = _1732 + 2u;
        uint _2200 = _1732 + 10u;
        float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _275) * 0.949999988079071044921875);
        float _2215 = _2214 * _2214;
        float _2216 = cbLight._m0[_2196].x + _353;
        float _2217 = cbLight._m0[_2196].y + _354;
        float _2218 = cbLight._m0[_2196].z + _355;
        float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
        float _2223 = _2222 * _2216;
        float _2224 = _2222 * _2217;
        float _2225 = _2222 * _2218;
        float _2226 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_2196].xyz));
        float _4061 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2230 = dot(vec3(_272, _273, _274), vec3(_2223, _2224, _2225));
        float _4072 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2234 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2223, _2224, _2225));
        float _4083 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2238 = _2215 * _2215;
        float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
        float _2251 = (exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2252 = 1.0 - _2215;
        float _2262 = (0.5 / (((_2009 * ((_2229 * _2252) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2252) + _2215) * _2229))) * _2229;
        float _4094 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2264 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
        float _2265 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _2190 = (((_2251 * cbLight._m0[_2200].x) * _2264) * _2265) + _2132;
        _2192 = (((_2251 * cbLight._m0[_2200].y) * _2264) * _2265) + _2133;
        _2194 = (((_2251 * cbLight._m0[_2200].z) * _2264) * _2265) + _2134;
    }
    float _2296;
    float _2298;
    float _2300;
    if (_1918)
    {
        _2296 = _2190;
        _2298 = _2192;
        _2300 = _2194;
    }
    else
    {
        uint _2307 = _1732 + 3u;
        uint _2311 = _1732 + 11u;
        float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _275) * 0.949999988079071044921875);
        float _2326 = _2325 * _2325;
        float _2327 = cbLight._m0[_2307].x + _353;
        float _2328 = cbLight._m0[_2307].y + _354;
        float _2329 = cbLight._m0[_2307].z + _355;
        float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
        float _2334 = _2333 * _2327;
        float _2335 = _2333 * _2328;
        float _2336 = _2333 * _2329;
        float _2337 = dot(vec3(_272, _273, _274), vec3(cbLight._m0[_2307].xyz));
        float _4110 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2341 = dot(vec3(_272, _273, _274), vec3(_2334, _2335, _2336));
        float _4121 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2345 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2334, _2335, _2336));
        float _4132 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2349 = _2326 * _2326;
        float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
        float _2362 = (exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2363 = 1.0 - _2326;
        float _2373 = (0.5 / (((_2009 * ((_2340 * _2363) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2363) + _2326) * _2340))) * _2340;
        float _4143 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2375 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
        float _2376 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _2296 = (((_2362 * cbLight._m0[_2311].x) * _2375) * _2376) + _2190;
        _2298 = (((_2362 * cbLight._m0[_2311].y) * _2375) * _2376) + _2192;
        _2300 = (((_2362 * cbLight._m0[_2311].z) * _2375) * _2376) + _2194;
    }
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    if (_1730.y == 0u)
    {
        uvec4 _2397 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2398 = _2397.x;
        uint _2409 = uint((float(_2397.y) * floor(float(uint(cbSceneParam._m0[85u].y * _362) / _2398))) + floor(float(uint(cbSceneParam._m0[85u].x * _361) / _2398)));
        float _2419 = (log2(_1508 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2420 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        uint _2423 = uint(isnan(14.0) ? _2420 : (isnan(_2420) ? 14.0 : min(_2420, 14.0)));
        uvec4 _2428 = texelFetch(g_lightClusterGridBuffer, int(((_2423 << 2u) + (_2409 << 6u)) >> 2u));
        uint _2429 = _2428.x;
        uint _2430 = _2397.z;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        if (((((1u << ((_2430 >> 4u) & 15u)) + 4294967295u) & _2429) == 0u) || ((_2430 & 240u) == 0u))
        {
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
        }
        else
        {
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2518;
            float _2520;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            uint _2660 = 0u;
            uint _2669;
            bool _2670;
            for (;;)
            {
                _2669 = texelFetch(g_lightClassification, int((((_2423 << 5u) + (_2409 << 9u)) + (_2660 << 2u)) >> 2u)).x;
                _2670 = _2669 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2670)
                {
                    frontier_phi_66_pred = _2659;
                    frontier_phi_66_pred_1 = _2658;
                    frontier_phi_66_pred_2 = _2657;
                    frontier_phi_66_pred_3 = _2656;
                    frontier_phi_66_pred_4 = _2655;
                    frontier_phi_66_pred_5 = _2654;
                }
                else
                {
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    uint _2784;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2669;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    for (;;)
                    {
                        uint _2788 = uint(findLSB(_2784)) + (_2660 << 5u);
                        uint _2785 = (_2784 + 4294967295u) & _2784;
                        uint _2790 = _2788 * 48u;
                        vec4 _2804 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2790)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 3u)).x));
                        uint _2810 = (_2788 * 48u) + 4u;
                        vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 3u)).x));
                        uint _2829 = (_2788 * 48u) + 8u;
                        vec3 _2840 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x));
                        float _2844 = _2804.x - _1506;
                        float _2845 = _2804.y - _1507;
                        float _2846 = _2804.z - _1508;
                        float _2847 = dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846));
                        float _2850 = inversesqrt(_2847);
                        float _2851 = _2850 * _2844;
                        float _2852 = _2850 * _2845;
                        float _2853 = _2850 * _2846;
                        float _2854 = dot(vec3(_383, _386, _389), vec3(_2851, _2852, _2853));
                        float _2859 = 1.0 - (_2847 * _2804.w);
                        float _4169 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2860 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2861 = sqrt(_2847) * _2823.w;
                        float _2864 = 1.39999997615814208984375 / (_2861 + 1.39999997615814208984375);
                        float _2865 = _2864 * _2864;
                        float _2868 = ((1.0 - _2865) * _2854) + _2865;
                        float _2871 = _2861 * _2861;
                        float _2875 = ((isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))) * _2860) / ((_2871 * 0.699999988079071044921875) + 1.0);
                        float _2879 = (-0.0) - _1506;
                        float _2880 = (-0.0) - _1507;
                        float _2881 = (-0.0) - _1508;
                        float _2885 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
                        float _2886 = _2885 * _2879;
                        float _2887 = _2885 * _2880;
                        float _2888 = _2885 * _2881;
                        float _2895 = exp2(log2(1.0 / ((_2871 * 3.5) + 5.0)) * 0.25);
                        float _2896 = 1.0 - _444;
                        float _2903 = sqrt(1.0 - ((1.0 - (_2896 * _2896)) * (1.0 - (_2895 * _2895))));
                        float _2904 = _2903 * _2903;
                        float _2905 = _2904 * _2904;
                        float _2906 = _2886 + _2851;
                        float _2907 = _2887 + _2852;
                        float _2908 = _2888 + _2853;
                        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
                        float _2916 = dot(vec3(_383, _386, _389), vec3(_2886, _2887, _2888));
                        float _4185 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2919 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2920 = dot(vec3(_383, _386, _389), vec3(_2912 * _2906, _2912 * _2907, _2912 * _2908));
                        float _4196 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2923 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2927 = ((_2923 * _2923) * (_2905 + (-1.0))) + 1.0;
                        float _2928 = _2864 * _2904;
                        float _2929 = _2928 * _2928;
                        float _2932 = ((1.0 - _2929) * _2854) + _2929;
                        float _4207 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2934 = 1.0 - _2904;
                        float _2944 = (0.5 / (((_2933 * ((_2919 * _2934) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2933 * _2934) + _2904) * _2919))) * _2933;
                        float _4218 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2955 = (((_2905 * 3.1415927410125732421875) * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) / ((_2927 * _2927) * ((_2871 * 2.1991131305694580078125) + 3.141590118408203125))) * _2860;
                        _2713 = (_2875 * _2823.x) + _2781;
                        _2714 = (_2875 * _2823.y) + _2782;
                        _2715 = (_2875 * _2823.z) + _2783;
                        _2710 = (_2955 * _2840.x) + _2778;
                        _2711 = (_2955 * _2840.y) + _2779;
                        _2712 = (_2955 * _2840.z) + _2780;
                        if (_2785 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2785;
                        }
                    }
                    frontier_phi_66_pred = _2715;
                    frontier_phi_66_pred_1 = _2714;
                    frontier_phi_66_pred_2 = _2713;
                    frontier_phi_66_pred_3 = _2712;
                    frontier_phi_66_pred_4 = _2711;
                    frontier_phi_66_pred_5 = _2710;
                }
                _2520 = frontier_phi_66_pred;
                _2518 = frontier_phi_66_pred_1;
                _2516 = frontier_phi_66_pred_2;
                _2514 = frontier_phi_66_pred_3;
                _2512 = frontier_phi_66_pred_4;
                _2510 = frontier_phi_66_pred_5;
                uint _2661 = _2660 + 1u;
                if (_2661 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2654 = _2510;
                    _2655 = _2512;
                    _2656 = _2514;
                    _2657 = _2516;
                    _2658 = _2518;
                    _2659 = _2520;
                    _2660 = _2661;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
        }
        uvec4 _2523 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2524 = _2523.z;
        uint _2526 = (_2524 >> 8u) & 15u;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        if (((4294967295u << _2526) & _2429) == 0u)
        {
            _2622 = _2509;
            _2624 = _2511;
            _2626 = _2513;
            _2628 = _2515;
            _2630 = _2517;
            _2632 = _2519;
        }
        else
        {
            float _2647 = inversesqrt(dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508)));
            float _2648 = _2647 * _1506;
            float _2649 = _2647 * _1507;
            float _2650 = _2647 * _1508;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2526 < ((_2524 >> 12u) & 15u))
            {
                float _2623;
                float _2625;
                float _2627;
                float _2629;
                float _2631;
                float _2633;
                float _2761 = _2509;
                float _2762 = _2511;
                float _2763 = _2513;
                float _2764 = _2515;
                float _2765 = _2517;
                float _2766 = _2519;
                uint _2767 = _2526;
                uint _2776;
                bool _2777;
                for (;;)
                {
                    _2776 = texelFetch(g_lightClassification, int((((_2423 << 5u) + (_2409 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                    _2777 = _2776 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2777)
                    {
                        frontier_phi_72_pred = _2766;
                        frontier_phi_72_pred_1 = _2765;
                        frontier_phi_72_pred_2 = _2764;
                        frontier_phi_72_pred_3 = _2763;
                        frontier_phi_72_pred_4 = _2762;
                        frontier_phi_72_pred_5 = _2761;
                    }
                    else
                    {
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _2973 = _2761;
                        float _2974 = _2762;
                        float _2975 = _2763;
                        float _2976 = _2764;
                        float _2977 = _2765;
                        float _2978 = _2766;
                        uint _2979 = _2776;
                        uint _2980;
                        vec4 _3005;
                        float _3006;
                        vec4 _3021;
                        vec3 _3033;
                        vec4 _3049;
                        vec4 _3065;
                        float _3112;
                        bool _3113;
                        for (;;)
                        {
                            uint _2990 = ((_2767 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2979));
                            _2980 = (_2979 + 4294967295u) & _2979;
                            uint _2992 = _2990 * 40u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            _3006 = _3005.w;
                            uint _3008 = (_2990 * 40u) + 4u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3023 = (_2990 * 40u) + 8u;
                            _3033 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x));
                            uint _3036 = (_2990 * 40u) + 16u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3052 = (_2990 * 40u) + 20u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3068 = (_2990 * 40u) + 24u;
                            vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3087 = (_2990 * 40u) + 28u;
                            vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            _3112 = fma(_1508, _3100.z, fma(_1507, _3100.y, _3100.x * _1506)) + _3100.w;
                            _3113 = !((fma(_1508, _3081.z, fma(_1507, _3081.y, _3081.x * _1506)) + _3081.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3113)
                            {
                                float _3140 = _3005.x - _1506;
                                float _3141 = _3005.y - _1507;
                                float _3142 = _3005.z - _1508;
                                float _3143 = dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142));
                                float _3146 = inversesqrt(_3143);
                                float _3147 = _3146 * _3140;
                                float _3148 = _3146 * _3141;
                                float _3149 = _3146 * _3142;
                                float _3153 = 1.0 - (_3143 / (_3006 * _3006));
                                float _4229 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3158 = sqrt(_3143) * _3021.w;
                                float _3160 = 1.39999997615814208984375 / (_3158 + 1.39999997615814208984375);
                                float _3161 = _3160 * _3160;
                                float _3164 = ((1.0 - _3161) * dot(vec3(_3147, _3148, _3149), vec3(_383, _386, _389))) + _3161;
                                float _3167 = _3158 * _3158;
                                float _3171 = (fma(_1508, _3049.z, fma(_1507, _3049.y, _3049.x * _1506)) + _3049.w) / _3112;
                                float _3172 = (fma(_1508, _3065.z, fma(_1507, _3065.y, _3065.x * _1506)) + _3065.w) / _3112;
                                float _3176 = 1.0 - dot(vec2(_3171, _3172), vec2(_3171, _3172));
                                float _4245 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3178 = _3177 * (((isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))) * _3154) / ((_3167 * 0.699999988079071044921875) + 1.0));
                                float _3190 = exp2(log2(1.0 / ((_3167 * 3.5) + 5.0)) * 0.25);
                                float _3191 = 1.0 - _444;
                                float _3198 = sqrt(1.0 - ((1.0 - (_3191 * _3191)) * (1.0 - (_3190 * _3190))));
                                float _3199 = _3198 * _3198;
                                float _3200 = _3199 * _3199;
                                float _3201 = _3147 - _2648;
                                float _3202 = _3148 - _2649;
                                float _3203 = _3149 - _2650;
                                float _3207 = inversesqrt(dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203)));
                                float _3211 = dot(vec3(_383, _386, _389), vec3((-0.0) - _2648, (-0.0) - _2649, (-0.0) - _2650));
                                float _4256 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3214 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3215 = dot(vec3(_383, _386, _389), vec3(_3207 * _3201, _3207 * _3202, _3207 * _3203));
                                float _4267 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3218 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3222 = ((_3218 * _3218) * (_3200 + (-1.0))) + 1.0;
                                float _3223 = _3160 * _3199;
                                float _3224 = _3223 * _3223;
                                float _3230 = ((1.0 - _3224) * dot(vec3(_383, _386, _389), vec3(_3147, _3148, _3149))) + _3224;
                                float _4278 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3232 = 1.0 - _3199;
                                float _3242 = (0.5 / (((_3231 * ((_3214 * _3232) + _3199)) + 9.9999999392252902907785028219223e-09) + (((_3231 * _3232) + _3199) * _3214))) * _3231;
                                float _4289 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3252 = (_3177 * _3154) * (((_3200 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_3222 * _3222) * ((_3167 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3178 * _3021.y;
                                frontier_phi_78_pred_1 = _3178 * _3021.x;
                                frontier_phi_78_pred_2 = _3252 * _3033.z;
                                frontier_phi_78_pred_3 = _3252 * _3033.y;
                                frontier_phi_78_pred_4 = _3252 * _3033.x;
                                frontier_phi_78_pred_5 = _3178 * _3021.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3260 = frontier_phi_78_pred;
                            _3259 = frontier_phi_78_pred_1;
                            _3258 = frontier_phi_78_pred_2;
                            _3257 = frontier_phi_78_pred_3;
                            _3256 = frontier_phi_78_pred_4;
                            _3261 = frontier_phi_78_pred_5;
                            _2963 = _3259 + _2976;
                            _2964 = _3260 + _2977;
                            _2965 = _3261 + _2978;
                            _2960 = _3256 + _2973;
                            _2961 = _3257 + _2974;
                            _2962 = _3258 + _2975;
                            if (_2980 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2980;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2965;
                        frontier_phi_72_pred_1 = _2964;
                        frontier_phi_72_pred_2 = _2963;
                        frontier_phi_72_pred_3 = _2962;
                        frontier_phi_72_pred_4 = _2961;
                        frontier_phi_72_pred_5 = _2960;
                    }
                    _2633 = frontier_phi_72_pred;
                    _2631 = frontier_phi_72_pred_1;
                    _2629 = frontier_phi_72_pred_2;
                    _2627 = frontier_phi_72_pred_3;
                    _2625 = frontier_phi_72_pred_4;
                    _2623 = frontier_phi_72_pred_5;
                    uint _2768 = _2767 + 1u;
                    if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2761 = _2623;
                        _2762 = _2625;
                        _2763 = _2627;
                        _2764 = _2629;
                        _2765 = _2631;
                        _2766 = _2633;
                        _2767 = _2768;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2633;
                frontier_phi_60_61_ladder_1 = _2631;
                frontier_phi_60_61_ladder_2 = _2627;
                frontier_phi_60_61_ladder_3 = _2625;
                frontier_phi_60_61_ladder_4 = _2623;
                frontier_phi_60_61_ladder_5 = _2629;
            }
            else
            {
                frontier_phi_60_61_ladder = _2519;
                frontier_phi_60_61_ladder_1 = _2517;
                frontier_phi_60_61_ladder_2 = _2513;
                frontier_phi_60_61_ladder_3 = _2511;
                frontier_phi_60_61_ladder_4 = _2509;
                frontier_phi_60_61_ladder_5 = _2515;
            }
            _2622 = frontier_phi_60_61_ladder_4;
            _2624 = frontier_phi_60_61_ladder_3;
            _2626 = frontier_phi_60_61_ladder_2;
            _2628 = frontier_phi_60_61_ladder_5;
            _2630 = frontier_phi_60_61_ladder_1;
            _2632 = frontier_phi_60_61_ladder;
        }
        float _2637 = isnan(1.0) ? _428 : (isnan(_428) ? 1.0 : min(_428, 1.0));
        _2442 = (_2637 * _2628) + _1973;
        _2444 = (_2637 * _2630) + _1975;
        _2446 = (_2637 * _2632) + _1977;
        _2448 = ((_2622 * 0.039999999105930328369140625) * _2637) + _2296;
        _2450 = ((_2624 * 0.039999999105930328369140625) * _2637) + _2298;
        _2452 = ((_2626 * 0.039999999105930328369140625) * _2637) + _2300;
    }
    else
    {
        _2442 = _1973;
        _2444 = _1975;
        _2446 = _1977;
        _2448 = _2296;
        _2450 = _2298;
        _2452 = _2300;
    }
    float _4305 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _4316 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _4327 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    uint _2472 = _402 + 6u;
    float _2480 = _361 / cbSceneParam._m0[86u].x;
    float _2481 = _362 / cbSceneParam._m0[86u].y;
    vec4 _2495 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2480, _2481, (log2((isnan(cbSceneParam._m0[77u].w) ? _294 : (isnan(_294) ? cbSceneParam._m0[77u].w : min(_294, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2497 = _2495.x;
    float _2498 = _2495.y;
    float _2499 = _2495.z;
    float _2500 = _2495.w;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    if (_294 > cbSceneParam._m0[78u].w)
    {
        float _2534 = isnan(_294) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _294 : min(cbSceneParam._m0[80u].w, _294));
        float _2535 = _2534 / _294;
        float _2546 = _2535 * _346;
        float _2547 = _347 * _2535;
        float _2548 = (-0.0) - _2547;
        float _2550 = _2535 * _348;
        float _2552 = (cbSceneParam._m0[77u].w * _2548) / _2534;
        float _2553 = _2552 + cbSceneParam._m0[79u].w;
        float _2554 = cbSceneParam._m0[79u].w - _2547;
        float _2560 = sqrt(((_2546 * _2546) + (_2547 * _2547)) + (_2550 * _2550));
        float _2563 = (1.0 - (cbSceneParam._m0[77u].w / _2534)) * _2560;
        float _2568 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2570 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2723;
        if (abs((_2548 - _2552) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2723 = ((((_2553 > 0.0) ? exp2(_2568 * _2553) : (2.0 - exp2(_2570 * _2553))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2563;
        }
        else
        {
            float _2683 = 1.0 / cbSceneParam._m0[80u].x;
            float _2684 = isnan(_2554) ? _2553 : (isnan(_2553) ? _2554 : max(_2553, _2554));
            float _2685 = isnan(_2554) ? _2553 : (isnan(_2553) ? _2554 : min(_2553, _2554));
            float _2694 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : min(_2684, 0.0));
            float _2695 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : min(_2685, 0.0));
            _2723 = ((abs(_2560 / _2548) * cbSceneParam._m0[80u].y) * ((((_2694 - _2695) * 2.0) - ((exp2(_2568 * (isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0)))) - exp2(_2568 * (isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0))))) * _2683)) - ((exp2(_2570 * _2694) - exp2(_2570 * _2695)) * _2683))) + (_2563 * cbSceneParam._m0[80u].z);
        }
        vec4 _2725 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2480, _2481, 1.0), 0.0);
        float _2734 = exp2((_2723 * (-1.44269502162933349609375)) * (1.0 - _2725.w));
        float _2735 = log2(_2734);
        float _2751 = log2(_2500);
        _2572 = (exp2(_2751 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].x)) * _2725.x) / cbSceneParam._m0[78u].x)) + _2497;
        _2574 = (exp2(_2751 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].y)) * _2725.y) / cbSceneParam._m0[78u].y)) + _2498;
        _2576 = (exp2(_2751 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].z)) * _2725.z) / cbSceneParam._m0[78u].z)) + _2499;
        _2578 = _2734 * _2500;
    }
    else
    {
        _2572 = _2497;
        _2574 = _2498;
        _2576 = _2499;
        _2578 = _2500;
    }
    float _2590 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2591 = _2590 == 3.0;
    float _2592 = log2(_2578);
    float _2599 = exp2(_2592 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2442 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _428))) + ((_2448 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _1235)) * cbPerFrame._m0[3u].x));
    float _2600 = exp2(_2592 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2444 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _428))) + ((_2450 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _1235)) * cbPerFrame._m0[3u].x));
    float _2601 = exp2(_2592 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2446 + ((isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))) * _428))) + ((_2452 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _1235)) * cbPerFrame._m0[3u].x));
    float _2610 = (_2590 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2610 * (_2591 ? _2599 : (_2599 + (cbSceneParam._m0[72u].w * _2572)));
    SV_Target.y = _2610 * (_2591 ? _2600 : (_2600 + (cbSceneParam._m0[72u].w * _2574)));
    SV_Target.z = _2610 * (_2591 ? _2601 : (_2601 + (cbSceneParam._m0[72u].w * _2576)));
    SV_Target.w = cbInstanceData._m0[_2472].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2472].w;
}


