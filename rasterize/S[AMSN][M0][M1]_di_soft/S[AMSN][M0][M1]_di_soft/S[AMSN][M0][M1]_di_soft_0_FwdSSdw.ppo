#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _833;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _184 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _191 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _221 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _227 = _221.x * cbMtdParam._m0[9u].x;
    float _228 = _221.y * cbMtdParam._m0[9u].y;
    float _229 = _221.z * cbMtdParam._m0[9u].z;
    vec4 _241 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _243 = _241.x;
    vec4 _255 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _255.z;
    float _263 = (_255.x * 2.0) + (-1.0);
    float _265 = (_255.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3194 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0))));
    float _275 = fma(_272, _191 * NORMAL.x, fma(_265, _198 * TANGENT.x, (_184 * _176) * _263));
    float _278 = fma(_272, _191 * NORMAL.y, fma(_265, _198 * TANGENT.y, (_184 * _177) * _263));
    float _281 = fma(_272, _191 * NORMAL.z, fma(_265, _198 * TANGENT.z, (_184 * _178) * _263));
    float _285 = inversesqrt(dot(vec3(_275, _278, _281), vec3(_275, _278, _281)));
    float _286 = _285 * _275;
    float _287 = _285 * _278;
    float _288 = _285 * _281;
    float _3205 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _289 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
    float _3216 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3227 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3238 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3249 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _293 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
    float _309 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _351 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _361 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _351);
    float _362 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _351);
    float _363 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _351);
    float _367 = inversesqrt(dot(vec3(_361, _362, _363), vec3(_361, _362, _363)));
    float _368 = _361 * _367;
    float _369 = _362 * _367;
    float _370 = _363 * _367;
    float _376 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _377 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _398 = fma(_288, cbSceneParam._m0[5u].z, fma(_287, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _286));
    float _401 = fma(_288, cbSceneParam._m0[6u].z, fma(_287, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _286));
    float _404 = fma(_288, cbSceneParam._m0[7u].z, fma(_287, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _286));
    uint _417 = uint(roundEven(NORMAL.w)) * 13u;
    uint _420 = (_417 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _426 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0)))) * cbInstanceData._m0[_420].x;
    float _427 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0)))) * cbInstanceData._m0[_420].y;
    float _428 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0)))) * cbInstanceData._m0[_420].z;
    float _3260 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _3271 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    float _3282 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _432 = 1.0 - _293;
    float _433 = _429 * _432;
    float _434 = _430 * _432;
    float _435 = _431 * _432;
    float _440 = (_429 + (-0.039999999105930328369140625)) * _293;
    float _441 = (_430 + (-0.039999999105930328369140625)) * _293;
    float _442 = (_431 + (-0.039999999105930328369140625)) * _293;
    float _443 = _440 + 0.039999999105930328369140625;
    float _445 = _441 + 0.039999999105930328369140625;
    float _446 = _442 + 0.039999999105930328369140625;
    vec4 _455 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _376, cbSceneParam._m0[86u].y * _377));
    float _458 = _455.x * TEXCOORD_1.w;
    float _459 = dot(vec3(_286, _287, _288), vec3(_368, _369, _370));
    float _462 = _459 * 2.0;
    float _466 = (_462 * _286) - _368;
    float _467 = (_462 * _287) - _369;
    float _468 = (_462 * _288) - _370;
    float _472 = abs(dot(vec3(_368, _369, _370), vec3(_286, _287, _288)));
    float _3293 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _474 = sqrt(_289);
    float _487 = exp2((_474 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_474 * 3.0));
    float _493 = (1.0 - _487) * ((_474 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _494 = _487 * _474;
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _832;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _557 = fma(_530, cbModelParam._m0[26u].z, fma(_526, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _522));
        float _561 = fma(_530, cbModelParam._m0[27u].z, fma(_526, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _522));
        float _565 = fma(_530, cbModelParam._m0[28u].z, fma(_526, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _522));
        float _590 = _522 + _286;
        float _591 = _526 + _287;
        float _592 = _530 + _288;
        float _602 = fma(_592, cbModelParam._m0[26u].z, fma(_591, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _590)) - _557;
        float _603 = fma(_592, cbModelParam._m0[27u].z, fma(_591, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _590)) - _561;
        float _604 = fma(_592, cbModelParam._m0[28u].z, fma(_591, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _590)) - _565;
        float _608 = inversesqrt(dot(vec3(_602, _603, _604), vec3(_602, _603, _604)));
        float _621 = ((_608 * _602) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_557 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _622 = ((_608 * _603) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_561 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _623 = ((_608 * _604) / cbModelParam._m0[34u].z) + ((((((_565 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_621, _622, _623), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_621, _622, _623), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_621, _622, _623), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_621, _622, _623), 0.0);
        float _660 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_626.x + (-0.5));
        float _662 = _660 * (_626.y + (-0.5));
        float _663 = _660 * (_626.z + (-0.5));
        float _670 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_633.x + (-0.5));
        float _672 = _670 * (_633.y + (-0.5));
        float _673 = _670 * (_633.z + (-0.5));
        float _680 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_640.x + (-0.5));
        float _682 = _680 * (_640.y + (-0.5));
        float _683 = _680 * (_640.z + (-0.5));
        float _690 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_647.x + (-0.5));
        float _692 = _690 * (_647.y + (-0.5));
        float _693 = _690 * (_647.z + (-0.5));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = _661 * 0.5;
        float _698 = _671 * 0.5;
        float _699 = _681 * 0.5;
        float _700 = dot(vec3(_697, _698, _699), vec3(_697, _698, _699));
        float _705 = (_700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_700);
        float _714 = (dot(vec3(_286, _287, _288), vec3(_705 * _697, _705 * _698, _705 * _699)) + 1.0) * 0.5;
        float _3319 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _724 = sqrt(((_698 * _698) + (_697 * _697)) + (_699 * _699)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _3330 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _726 = _725 * 2.0;
        float _730 = (1.0 - _725) / (_725 + 1.0);
        float _3341 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _740 = ((((1.0 - _731) * (_726 + 2.0)) * exp2(log2(isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))) * (_726 + 1.0))) + _731) * _694;
        float _741 = _662 * 0.5;
        float _742 = _672 * 0.5;
        float _743 = _682 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _757 = (dot(vec3(_286, _287, _288), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3352 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _766 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3363 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _768 = _767 * 2.0;
        float _772 = (1.0 - _767) / (_767 + 1.0);
        float _3374 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _782 = ((((1.0 - _773) * (_768 + 2.0)) * exp2(log2(isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * (_768 + 1.0))) + _773) * _695;
        float _783 = _663 * 0.5;
        float _784 = _673 * 0.5;
        float _785 = _683 * 0.5;
        float _786 = dot(vec3(_783, _784, _785), vec3(_783, _784, _785));
        float _791 = (_786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_786);
        float _799 = (dot(vec3(_286, _287, _288), vec3(_791 * _783, _791 * _784, _791 * _785)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _808 = sqrt(((_784 * _784) + (_783 * _783)) + (_785 * _785)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3407 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_810 + 1.0))) + _815) * _696;
        _832 = _663;
        _834 = _662;
        _835 = _661;
        _836 = _673;
        _837 = _672;
        _838 = _671;
        _839 = _683;
        _840 = _682;
        _841 = _681;
        _842 = _696;
        _843 = _695;
        _844 = _694;
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0)));
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0)));
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
    }
    else
    {
        _832 = _833;
        _834 = _833;
        _835 = _833;
        _836 = _833;
        _837 = _833;
        _838 = _833;
        _839 = _833;
        _840 = _833;
        _841 = _833;
        _842 = _833;
        _843 = _833;
        _844 = _833;
        _845 = 0.0;
        _846 = 0.0;
        _847 = 0.0;
    }
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _873 = fma(_530, cbModelParam._m0[30u].z, fma(_526, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _522));
        float _877 = fma(_530, cbModelParam._m0[31u].z, fma(_526, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _522));
        float _881 = fma(_530, cbModelParam._m0[32u].z, fma(_526, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _522));
        float _904 = _522 + _286;
        float _905 = _526 + _287;
        float _906 = _530 + _288;
        float _916 = fma(_906, cbModelParam._m0[30u].z, fma(_905, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _904)) - _873;
        float _917 = fma(_906, cbModelParam._m0[31u].z, fma(_905, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _904)) - _877;
        float _918 = fma(_906, cbModelParam._m0[32u].z, fma(_905, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _904)) - _881;
        float _922 = inversesqrt(dot(vec3(_916, _917, _918), vec3(_916, _917, _918)));
        float _935 = ((_922 * _916) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_873 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_922 * _917) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_877 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_922 * _918) / cbModelParam._m0[35u].z) + ((((((_881 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        float _972 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_939.x + (-0.5));
        float _974 = _972 * (_939.y + (-0.5));
        float _975 = _972 * (_939.z + (-0.5));
        float _982 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_946.x + (-0.5));
        float _984 = _982 * (_946.y + (-0.5));
        float _985 = _982 * (_946.z + (-0.5));
        float _992 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_953.x + (-0.5));
        float _994 = _992 * (_953.y + (-0.5));
        float _995 = _992 * (_953.z + (-0.5));
        float _1002 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_960.x + (-0.5));
        float _1004 = _1002 * (_960.y + (-0.5));
        float _1005 = _1002 * (_960.z + (-0.5));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = _973 * 0.5;
        float _1010 = _983 * 0.5;
        float _1011 = _993 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_286, _287, _288), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3470 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_1036 + 1.0))) + _1041) * _1006;
        float _1051 = _974 * 0.5;
        float _1052 = _984 * 0.5;
        float _1053 = _994 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_286, _287, _288), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _3503 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_1078 + 1.0))) + _1083) * _1007;
        float _1093 = _975 * 0.5;
        float _1094 = _985 * 0.5;
        float _1095 = _995 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_286, _287, _288), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3536 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1120 + 1.0))) + _1125) * _1008;
        _1142 = _975;
        _1143 = _974;
        _1144 = _973;
        _1145 = _985;
        _1146 = _984;
        _1147 = _983;
        _1148 = _995;
        _1149 = _994;
        _1150 = _993;
        _1151 = _1008;
        _1152 = _1007;
        _1153 = _1006;
        _1154 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
        _1156 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
    }
    else
    {
        _1142 = _833;
        _1143 = _833;
        _1144 = _833;
        _1145 = _833;
        _1146 = _833;
        _1147 = _833;
        _1148 = _833;
        _1149 = _833;
        _1150 = _833;
        _1151 = _833;
        _1152 = _833;
        _1153 = _833;
        _1154 = 0.0;
        _1155 = 0.0;
        _1156 = 0.0;
    }
    float _1166 = (cbModelParam._m0[1u].x * (_1154 - _845)) + _845;
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _846)) + _846;
    float _1168 = (cbModelParam._m0[1u].x * (_1156 - _847)) + _847;
    float _1189 = fma(_1168, cbSceneParam._m0[89u].z, fma(_1167, cbSceneParam._m0[89u].y, _1166 * cbSceneParam._m0[89u].x));
    float _1192 = fma(_1168, cbSceneParam._m0[90u].z, fma(_1167, cbSceneParam._m0[90u].y, _1166 * cbSceneParam._m0[90u].x));
    float _1195 = fma(_1168, cbSceneParam._m0[91u].z, fma(_1167, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1166));
    float _1210 = _466 * 0.5;
    float _1211 = _467 * 0.5;
    float _1212 = _468 * 0.5;
    float _1213 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_1144, _1147, _1150, _1153));
    float _1216 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1219 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_1142, _1145, _1148, _1151));
    float _1253;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1226 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_832, _836, _839, _842));
        float _1230 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_834, _837, _840, _843));
        float _1234 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_835, _838, _841, _844));
        float _1241 = dot(vec4(cbModelParam._m0[39u]), vec4(_1210, _1211, _1212, 1.0));
        _1253 = dot(vec3(isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1241) ? 0.0 : (isnan(0.0) ? _1241 : max(0.0, _1241))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1253 = 1.0;
    }
    float _1264;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1255 = dot(vec4(cbModelParam._m0[40u]), vec4(_1210, _1211, _1212, 1.0));
        _1264 = dot(vec3(isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)), isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1255) ? 0.0 : (isnan(0.0) ? _1255 : max(0.0, _1255))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1264 = 1.0;
    }
    float _1268 = (_1264 * cbModelParam._m0[1u].x) + (_1253 * (1.0 - cbModelParam._m0[1u].x));
    float _1278 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _289);
    float _1279 = isnan(_1278) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1278 : min(cbModelParam._m0[25u].z, _1278));
    float _1361;
    float _1363;
    float _1365;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1328 = fma(_530, cbModelParam._m0[13u].z, fma(_526, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _522)) + cbModelParam._m0[13u].w;
        float _1332 = fma(_530, cbModelParam._m0[14u].z, fma(_526, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _522)) + cbModelParam._m0[14u].w;
        float _1336 = fma(_530, cbModelParam._m0[15u].z, fma(_526, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _522)) + cbModelParam._m0[15u].w;
        float _1339 = fma(_468, cbModelParam._m0[13u].z, fma(_467, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _466));
        float _1342 = fma(_468, cbModelParam._m0[14u].z, fma(_467, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _466));
        float _1345 = fma(_468, cbModelParam._m0[15u].z, fma(_467, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _466));
        float _1373;
        if (_1339 > 0.0)
        {
            _1373 = abs((1.0 - _1328) / _1339);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1339 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1328 + 1.0) / _1339);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1373 = frontier_phi_14_12_ladder;
        }
        float _1602;
        if (_1342 > 0.0)
        {
            _1602 = abs((1.0 - _1332) / _1342);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1332 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1602 = frontier_phi_23_19_ladder;
        }
        float _1859;
        if (_1345 > 0.0)
        {
            _1859 = abs((1.0 - _1336) / _1345);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1336 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1859 = frontier_phi_35_30_ladder;
        }
        float _1861 = isnan(_1602) ? _1373 : (isnan(_1373) ? _1602 : min(_1373, _1602));
        float _1862 = isnan(_1859) ? _1861 : (isnan(_1861) ? _1859 : min(_1861, _1859));
        float _1866 = (_1862 * _1339) + _1328;
        float _1867 = (_1862 * _1342) + _1332;
        float _1868 = (_1862 * _1345) + _1336;
        float _1869 = _1862 * 9.9999997473787516355514526367188e-05;
        float _1871 = (-1.0) - _1869;
        float _1873 = _1869 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1868 > _1873) || ((_1868 < _1871) || ((_1867 > _1873) || ((_1867 < _1871) || ((_1866 < _1871) || (_1866 > _1873))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1996 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1868, cbModelParam._m0[9u].z, fma(_1867, cbModelParam._m0[9u].y, _1866 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1868, cbModelParam._m0[10u].z, fma(_1867, cbModelParam._m0[10u].y, _1866 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1868, cbModelParam._m0[11u].z, fma(_1867, cbModelParam._m0[11u].y, _1866 * cbModelParam._m0[11u].x))), _1279);
            frontier_phi_13_35_ladder = _1996.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1996.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1996.x * cbModelParam._m0[1u].y;
        }
        _1361 = frontier_phi_13_35_ladder_2;
        _1363 = frontier_phi_13_35_ladder_1;
        _1365 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1349 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_466, _467, _468), _1279);
        _1361 = _1349.x * cbModelParam._m0[1u].y;
        _1363 = _1349.y * cbModelParam._m0[1u].y;
        _1365 = _1349.z * cbModelParam._m0[1u].y;
    }
    float _1369 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _289);
    float _1370 = isnan(_1369) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1369 : min(cbModelParam._m0[25u].w, _1369));
    float _1463;
    float _1465;
    float _1467;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1427 = fma(_530, cbModelParam._m0[21u].z, fma(_526, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _522)) + cbModelParam._m0[21u].w;
        float _1431 = fma(_530, cbModelParam._m0[22u].z, fma(_526, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _522)) + cbModelParam._m0[22u].w;
        float _1435 = fma(_530, cbModelParam._m0[23u].z, fma(_526, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _522)) + cbModelParam._m0[23u].w;
        float _1438 = fma(_468, cbModelParam._m0[21u].z, fma(_467, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _466));
        float _1441 = fma(_468, cbModelParam._m0[22u].z, fma(_467, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _466));
        float _1444 = fma(_468, cbModelParam._m0[23u].z, fma(_467, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _466));
        float _1607;
        if (_1438 > 0.0)
        {
            _1607 = abs((1.0 - _1427) / _1438);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1427 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1607 = frontier_phi_25_21_ladder;
        }
        float _1886;
        if (_1441 > 0.0)
        {
            _1886 = abs((1.0 - _1431) / _1441);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1431 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1886 = frontier_phi_37_32_ladder;
        }
        float _2099;
        if (_1444 > 0.0)
        {
            _2099 = abs((1.0 - _1435) / _1444);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1435 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2099 = frontier_phi_46_43_ladder;
        }
        float _2101 = isnan(_1886) ? _1607 : (isnan(_1607) ? _1886 : min(_1607, _1886));
        float _2102 = isnan(_2099) ? _2101 : (isnan(_2101) ? _2099 : min(_2101, _2099));
        float _2106 = (_2102 * _1438) + _1427;
        float _2107 = (_2102 * _1441) + _1431;
        float _2108 = (_2102 * _1444) + _1435;
        float _2109 = _2102 * 9.9999997473787516355514526367188e-05;
        float _2110 = (-1.0) - _2109;
        float _2112 = _2109 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2108 > _2112) || ((_2108 < _2110) || ((_2107 > _2112) || ((_2107 < _2110) || ((_2106 < _2110) || (_2106 > _2112))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2307 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2108, cbModelParam._m0[17u].z, fma(_2107, cbModelParam._m0[17u].y, _2106 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2108, cbModelParam._m0[18u].z, fma(_2107, cbModelParam._m0[18u].y, _2106 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2108, cbModelParam._m0[19u].z, fma(_2107, cbModelParam._m0[19u].y, _2106 * cbModelParam._m0[19u].x))), _1370);
            frontier_phi_22_46_ladder = _2307.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2307.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2307.x * cbModelParam._m0[1u].z;
        }
        _1463 = frontier_phi_22_46_ladder_2;
        _1465 = frontier_phi_22_46_ladder_1;
        _1467 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1447 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_466, _467, _468), _1370);
        _1463 = _1447.x * cbModelParam._m0[1u].z;
        _1465 = _1447.y * cbModelParam._m0[1u].z;
        _1467 = _1447.z * cbModelParam._m0[1u].z;
    }
    float _1480 = (((_493 * _443) + _494) * _458) * ((cbModelParam._m0[1u].w * (_1463 - _1361)) + _1361);
    float _1482 = (((_493 * _445) + _494) * _458) * ((cbModelParam._m0[1u].w * (_1465 - _1363)) + _1363);
    float _1484 = (((_493 * _446) + _494) * _458) * ((cbModelParam._m0[1u].w * (_1467 - _1365)) + _1365);
    float _1487 = fma(_1484, cbSceneParam._m0[89u].z, fma(_1482, cbSceneParam._m0[89u].y, _1480 * cbSceneParam._m0[89u].x));
    float _1490 = fma(_1484, cbSceneParam._m0[90u].z, fma(_1482, cbSceneParam._m0[90u].y, _1480 * cbSceneParam._m0[90u].x));
    float _1493 = fma(_1484, cbSceneParam._m0[91u].z, fma(_1482, cbSceneParam._m0[91u].y, _1480 * cbSceneParam._m0[91u].x));
    vec4 _1501 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_376, _377));
    float _1503 = _1501.w;
    float _1515 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1503);
    float _1516 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1503);
    float _1517 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1503);
    uvec4 _1521 = floatBitsToUint(cbInstanceData._m0[_417 + 5u]);
    uint _1523 = _1521.x * 14u;
    uint _1524 = _1523 + 13u;
    float _1531 = _458 + (-1.0);
    float _1536 = (cbLight._m0[_1524].x * _1531) + 1.0;
    float _1537 = (cbLight._m0[_1524].y * _1531) + 1.0;
    float _1538 = (cbLight._m0[_1524].z * _1531) + 1.0;
    float _1539 = (cbLight._m0[_1524].w * _1531) + 1.0;
    uint _1540 = _1523 + 5u;
    float _1546 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
    uint _1550 = _1523 + 4u;
    float _1560 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
    uint _1564 = _1523 | 1u;
    float _1575 = dot(vec3(cbLight._m0[_1523].xyz), vec3(_286, _287, _288));
    float _1578 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_286, _287, _288));
    float _3672 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
    float _3683 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
    float _1583 = (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.3183098733425140380859375;
    float _1585 = (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.3183098733425140380859375;
    float _1592 = ((cbLight._m0[_1540].x * _1546) * _1585) + (((cbLight._m0[_1550].x * _1515) * _1560) * _1583);
    float _1593 = ((_1546 * cbLight._m0[_1540].y) * _1585) + (((cbLight._m0[_1550].y * _1516) * _1560) * _1583);
    float _1594 = ((_1546 * cbLight._m0[_1540].z) * _1585) + (((cbLight._m0[_1550].z * _1517) * _1560) * _1583);
    uvec4 _1599 = floatBitsToUint(cbLight._m0[_1523 + 12u]);
    bool _1601 = _1599.x == 0u;
    float _1612;
    float _1614;
    float _1616;
    if (_1601)
    {
        _1612 = _1592;
        _1614 = _1593;
        _1616 = _1594;
    }
    else
    {
        uint _1620 = _1523 + 6u;
        float _1636 = (dot(vec3(cbLight._m0[_1523 + 2u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _1637 = _1636 * _1636;
        float _3694 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1639 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
        _1612 = (((cbLight._m0[_1620].x * 0.3183098733425140380859375) * _1638) * _1639) + _1592;
        _1614 = (((cbLight._m0[_1620].y * 0.3183098733425140380859375) * _1638) * _1639) + _1593;
        _1616 = (((cbLight._m0[_1620].z * 0.3183098733425140380859375) * _1638) * _1639) + _1594;
    }
    bool _1619 = _1599.y == 0u;
    float _1657;
    float _1659;
    float _1661;
    if (_1619)
    {
        _1657 = _1612;
        _1659 = _1614;
        _1661 = _1616;
    }
    else
    {
        uint _1830 = _1523 + 7u;
        float _1846 = (dot(vec3(cbLight._m0[_1523 + 3u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _1847 = _1846 * _1846;
        float _3710 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1849 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
        _1657 = (((cbLight._m0[_1830].x * 0.3183098733425140380859375) * _1848) * _1849) + _1612;
        _1659 = (((cbLight._m0[_1830].y * 0.3183098733425140380859375) * _1848) * _1849) + _1614;
        _1661 = (((cbLight._m0[_1830].z * 0.3183098733425140380859375) * _1848) * _1849) + _1616;
    }
    uint _1664 = _1523 + 8u;
    float _1677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1523].w)) * _289) * 0.949999988079071044921875);
    float _1678 = _1677 * _1677;
    float _1679 = cbLight._m0[_1523].x + _368;
    float _1680 = cbLight._m0[_1523].y + _369;
    float _1681 = cbLight._m0[_1523].z + _370;
    float _1685 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
    float _1686 = _1685 * _1679;
    float _1687 = _1685 * _1680;
    float _1688 = _1685 * _1681;
    float _1689 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1523].xyz));
    float _3726 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1692 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _3737 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _1693 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _1694 = dot(vec3(_286, _287, _288), vec3(_1686, _1687, _1688));
    float _3748 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1697 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _1698 = dot(vec3(cbLight._m0[_1523].xyz), vec3(_1686, _1687, _1688));
    float _3759 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1702 = _1678 * _1678;
    float _1706 = ((_1697 * _1697) * (_1702 + (-1.0))) + 1.0;
    float _1714 = exp2(log2(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * 5.0);
    float _1715 = 0.959999978542327880859375 - _440;
    float _1717 = 0.959999978542327880859375 - _441;
    float _1718 = 0.959999978542327880859375 - _442;
    float _1725 = 1.0 - _1678;
    float _1736 = (0.5 / (((_1693 * ((_1692 * _1725) + _1678)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1725) + _1678) * _1692))) * _1692;
    float _3770 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1738 = (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1702 / ((_1706 * _1706) * 3.141590118408203125));
    uint _1752 = _1523 + 9u;
    float _1763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1564].w)) * _289) * 0.949999988079071044921875);
    float _1764 = _1763 * _1763;
    float _1765 = cbLight._m0[_1564].x + _368;
    float _1766 = cbLight._m0[_1564].y + _369;
    float _1767 = cbLight._m0[_1564].z + _370;
    float _1771 = inversesqrt(dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767)));
    float _1772 = _1771 * _1765;
    float _1773 = _1771 * _1766;
    float _1774 = _1771 * _1767;
    float _1775 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1564].xyz));
    float _3781 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1778 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _1779 = dot(vec3(_286, _287, _288), vec3(_1772, _1773, _1774));
    float _3792 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1782 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _1783 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_1772, _1773, _1774));
    float _3803 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1787 = _1764 * _1764;
    float _1791 = ((_1782 * _1782) * (_1787 + (-1.0))) + 1.0;
    float _1798 = exp2(log2(1.0 - (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) * 5.0);
    float _1805 = 1.0 - _1764;
    float _1815 = (0.5 / (((_1693 * ((_1778 * _1805) + _1764)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1805) + _1764) * _1778))) * _1778;
    float _3814 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1817 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1787 / ((_1791 * _1791) * 3.141590118408203125));
    float _1827 = (((((_1798 * _1715) + _443) * cbLight._m0[_1752].x) * _1817) * _1546) + ((((cbLight._m0[_1664].x * _1515) * ((_1714 * _1715) + _443)) * _1738) * _1560);
    float _1828 = (((((_1798 * _1717) + _445) * cbLight._m0[_1752].y) * _1817) * _1546) + ((((cbLight._m0[_1664].y * _1516) * ((_1714 * _1717) + _445)) * _1738) * _1560);
    float _1829 = (((((_1798 * _1718) + _446) * cbLight._m0[_1752].z) * _1817) * _1546) + ((((cbLight._m0[_1664].z * _1517) * ((_1714 * _1718) + _446)) * _1738) * _1560);
    float _1891;
    float _1893;
    float _1895;
    if (_1601)
    {
        _1891 = _1827;
        _1893 = _1828;
        _1895 = _1829;
    }
    else
    {
        uint _1897 = _1523 + 2u;
        uint _1901 = _1523 + 10u;
        float _1915 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1897].w)) * _289) * 0.949999988079071044921875);
        float _1916 = _1915 * _1915;
        float _1917 = cbLight._m0[_1897].x + _368;
        float _1918 = cbLight._m0[_1897].y + _369;
        float _1919 = cbLight._m0[_1897].z + _370;
        float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
        float _1924 = _1923 * _1917;
        float _1925 = _1923 * _1918;
        float _1926 = _1923 * _1919;
        float _1927 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1897].xyz));
        float _3825 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1930 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1931 = dot(vec3(_286, _287, _288), vec3(_1924, _1925, _1926));
        float _3836 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1934 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1935 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_1924, _1925, _1926));
        float _3847 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1939 = _1916 * _1916;
        float _1943 = ((_1934 * _1934) * (_1939 + (-1.0))) + 1.0;
        float _1950 = exp2(log2(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * 5.0);
        float _1957 = 1.0 - _1916;
        float _1967 = (0.5 / (((_1693 * ((_1930 * _1957) + _1916)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1957) + _1916) * _1930))) * _1930;
        float _3858 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1969 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1939 / ((_1943 * _1943) * 3.141590118408203125));
        float _1970 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
        _1891 = (((((_1950 * _1715) + _443) * cbLight._m0[_1901].x) * _1969) * _1970) + _1827;
        _1893 = (((((_1950 * _1717) + _445) * cbLight._m0[_1901].y) * _1969) * _1970) + _1828;
        _1895 = (((((_1950 * _1718) + _446) * cbLight._m0[_1901].z) * _1969) * _1970) + _1829;
    }
    float _2005;
    float _2007;
    float _2009;
    if (_1619)
    {
        _2005 = _1891;
        _2007 = _1893;
        _2009 = _1895;
    }
    else
    {
        uint _2016 = _1523 + 3u;
        uint _2020 = _1523 + 11u;
        float _2034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _289) * 0.949999988079071044921875);
        float _2035 = _2034 * _2034;
        float _2036 = cbLight._m0[_2016].x + _368;
        float _2037 = cbLight._m0[_2016].y + _369;
        float _2038 = cbLight._m0[_2016].z + _370;
        float _2042 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
        float _2043 = _2042 * _2036;
        float _2044 = _2042 * _2037;
        float _2045 = _2042 * _2038;
        float _2046 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_2016].xyz));
        float _3874 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2049 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _2050 = dot(vec3(_286, _287, _288), vec3(_2043, _2044, _2045));
        float _3885 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2053 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _2054 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2043, _2044, _2045));
        float _3896 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2058 = _2035 * _2035;
        float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
        float _2069 = exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0);
        float _2076 = 1.0 - _2035;
        float _2086 = (0.5 / (((_1693 * ((_2049 * _2076) + _2035)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _2076) + _2035) * _2049))) * _2049;
        float _3907 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2088 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
        float _2089 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
        _2005 = (((((_2069 * _1715) + _443) * cbLight._m0[_2020].x) * _2088) * _2089) + _1891;
        _2007 = (((((_2069 * _1717) + _445) * cbLight._m0[_2020].y) * _2088) * _2089) + _1893;
        _2009 = (((((_2069 * _1718) + _446) * cbLight._m0[_2020].z) * _2088) * _2089) + _1895;
    }
    float _2224;
    float _2226;
    float _2228;
    float _2230;
    float _2232;
    float _2234;
    if (_1521.y == 0u)
    {
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2165 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2164;
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2164;
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2164;
        uvec4 _2179 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2180 = _2179.x;
        uint _2191 = uint((float(_2179.y) * floor(float(uint(cbSceneParam._m0[85u].y * _377) / _2180))) + floor(float(uint(cbSceneParam._m0[85u].x * _376) / _2180)));
        float _2201 = (log2(_2167 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2202 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        uint _2205 = uint(isnan(14.0) ? _2202 : (isnan(_2202) ? 14.0 : min(_2202, 14.0)));
        uvec4 _2210 = texelFetch(g_lightClusterGridBuffer, int(((_2205 << 2u) + (_2191 << 6u)) >> 2u));
        uint _2211 = _2210.x;
        uint _2212 = _2179.z;
        float _2312;
        float _2314;
        float _2316;
        float _2318;
        float _2320;
        float _2322;
        if (((((1u << ((_2212 >> 4u) & 15u)) + 4294967295u) & _2211) == 0u) || ((_2212 & 240u) == 0u))
        {
            _2312 = 0.0;
            _2314 = 0.0;
            _2316 = 0.0;
            _2318 = 0.0;
            _2320 = 0.0;
            _2322 = 0.0;
        }
        else
        {
            float _2313;
            float _2315;
            float _2317;
            float _2319;
            float _2321;
            float _2323;
            float _2457 = 0.0;
            float _2458 = 0.0;
            float _2459 = 0.0;
            float _2460 = 0.0;
            float _2461 = 0.0;
            float _2462 = 0.0;
            uint _2463 = 0u;
            uint _2472;
            bool _2473;
            for (;;)
            {
                _2472 = texelFetch(g_lightClassification, int((((_2205 << 5u) + (_2191 << 9u)) + (_2463 << 2u)) >> 2u)).x;
                _2473 = _2472 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2473)
                {
                    frontier_phi_61_pred = _2457;
                    frontier_phi_61_pred_1 = _2462;
                    frontier_phi_61_pred_2 = _2461;
                    frontier_phi_61_pred_3 = _2460;
                    frontier_phi_61_pred_4 = _2459;
                    frontier_phi_61_pred_5 = _2458;
                }
                else
                {
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    uint _2587;
                    _2581 = _2457;
                    _2582 = _2458;
                    _2583 = _2459;
                    _2584 = _2460;
                    _2585 = _2461;
                    _2586 = _2462;
                    _2587 = _2472;
                    float _2513;
                    float _2514;
                    float _2515;
                    float _2516;
                    float _2517;
                    float _2518;
                    for (;;)
                    {
                        uint _2591 = uint(findLSB(_2587)) + (_2463 << 5u);
                        uint _2588 = (_2587 + 4294967295u) & _2587;
                        uint _2593 = _2591 * 48u;
                        vec4 _2607 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2593)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 3u)).x));
                        uint _2613 = (_2591 * 48u) + 4u;
                        vec4 _2626 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2613)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 3u)).x));
                        uint _2632 = (_2591 * 48u) + 8u;
                        vec3 _2643 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2632)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 2u)).x));
                        float _2647 = _2607.x - _2165;
                        float _2648 = _2607.y - _2166;
                        float _2649 = _2607.z - _2167;
                        float _2650 = dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649));
                        float _2653 = inversesqrt(_2650);
                        float _2654 = _2653 * _2647;
                        float _2655 = _2653 * _2648;
                        float _2656 = _2653 * _2649;
                        float _2657 = dot(vec3(_398, _401, _404), vec3(_2654, _2655, _2656));
                        float _2662 = 1.0 - (_2650 * _2607.w);
                        float _3933 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2663 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
                        float _2664 = sqrt(_2650) * _2626.w;
                        float _2667 = 1.39999997615814208984375 / (_2664 + 1.39999997615814208984375);
                        float _2668 = _2667 * _2667;
                        float _2671 = ((1.0 - _2668) * _2657) + _2668;
                        float _2674 = _2664 * _2664;
                        float _2678 = ((isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0))) * _2663) / ((_2674 * 0.699999988079071044921875) + 1.0);
                        float _2682 = (-0.0) - _2165;
                        float _2683 = (-0.0) - _2166;
                        float _2684 = (-0.0) - _2167;
                        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
                        float _2689 = _2688 * _2682;
                        float _2690 = _2688 * _2683;
                        float _2691 = _2688 * _2684;
                        float _2699 = exp2(log2(1.0 / ((_2674 * 3.5) + 5.0)) * 0.25);
                        float _2700 = 1.0 - _474;
                        float _2707 = sqrt(1.0 - ((1.0 - (_2700 * _2700)) * (1.0 - (_2699 * _2699))));
                        float _2708 = _2707 * _2707;
                        float _2709 = _2708 * _2708;
                        float _2710 = _2689 + _2654;
                        float _2711 = _2690 + _2655;
                        float _2712 = _2691 + _2656;
                        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
                        float _2720 = dot(vec3(_398, _401, _404), vec3(_2689, _2690, _2691));
                        float _3949 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2723 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2724 = dot(vec3(_398, _401, _404), vec3(_2716 * _2710, _2716 * _2711, _2716 * _2712));
                        float _3960 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2727 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                        float _2731 = ((_2727 * _2727) * (_2709 + (-1.0))) + 1.0;
                        float _2732 = _2667 * _2708;
                        float _2733 = _2732 * _2732;
                        float _2736 = ((1.0 - _2733) * _2657) + _2733;
                        float _3971 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2737 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                        float _2738 = 1.0 - _2708;
                        float _2748 = (0.5 / (((_2737 * ((_2723 * _2738) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _2738) + _2708) * _2723))) * _2737;
                        float _3982 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2759 = (((_2709 * 3.1415927410125732421875) * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) / ((_2731 * _2731) * ((_2674 * 2.1991131305694580078125) + 3.141590118408203125))) * _2663;
                        _2516 = (_2678 * _2626.x) + _2584;
                        _2517 = (_2678 * _2626.y) + _2585;
                        _2518 = (_2678 * _2626.z) + _2586;
                        _2513 = (_2759 * _2643.x) + _2581;
                        _2514 = (_2759 * _2643.y) + _2582;
                        _2515 = (_2759 * _2643.z) + _2583;
                        if (_2588 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2581 = _2513;
                            _2582 = _2514;
                            _2583 = _2515;
                            _2584 = _2516;
                            _2585 = _2517;
                            _2586 = _2518;
                            _2587 = _2588;
                        }
                    }
                    frontier_phi_61_pred = _2513;
                    frontier_phi_61_pred_1 = _2518;
                    frontier_phi_61_pred_2 = _2517;
                    frontier_phi_61_pred_3 = _2516;
                    frontier_phi_61_pred_4 = _2515;
                    frontier_phi_61_pred_5 = _2514;
                }
                _2313 = frontier_phi_61_pred;
                _2323 = frontier_phi_61_pred_1;
                _2321 = frontier_phi_61_pred_2;
                _2319 = frontier_phi_61_pred_3;
                _2317 = frontier_phi_61_pred_4;
                _2315 = frontier_phi_61_pred_5;
                uint _2464 = _2463 + 1u;
                if (_2464 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2457 = _2313;
                    _2458 = _2315;
                    _2459 = _2317;
                    _2460 = _2319;
                    _2461 = _2321;
                    _2462 = _2323;
                    _2463 = _2464;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2312 = _2313;
            _2314 = _2315;
            _2316 = _2317;
            _2318 = _2319;
            _2320 = _2321;
            _2322 = _2323;
        }
        uvec4 _2326 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2327 = _2326.z;
        uint _2329 = (_2327 >> 8u) & 15u;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        if (((4294967295u << _2329) & _2211) == 0u)
        {
            _2425 = _2312;
            _2427 = _2314;
            _2429 = _2316;
            _2431 = _2318;
            _2433 = _2320;
            _2435 = _2322;
        }
        else
        {
            float _2450 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
            float _2451 = _2450 * _2165;
            float _2452 = _2450 * _2166;
            float _2453 = _2450 * _2167;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2329 < ((_2327 >> 12u) & 15u))
            {
                float _2426;
                float _2428;
                float _2430;
                float _2432;
                float _2434;
                float _2436;
                float _2564 = _2312;
                float _2565 = _2314;
                float _2566 = _2316;
                float _2567 = _2318;
                float _2568 = _2320;
                float _2569 = _2322;
                uint _2570 = _2329;
                uint _2579;
                bool _2580;
                for (;;)
                {
                    _2579 = texelFetch(g_lightClassification, int((((_2205 << 5u) + (_2191 << 9u)) + (_2570 << 2u)) >> 2u)).x;
                    _2580 = _2579 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2580)
                    {
                        frontier_phi_67_pred = _2567;
                        frontier_phi_67_pred_1 = _2568;
                        frontier_phi_67_pred_2 = _2569;
                        frontier_phi_67_pred_3 = _2566;
                        frontier_phi_67_pred_4 = _2565;
                        frontier_phi_67_pred_5 = _2564;
                    }
                    else
                    {
                        float _2764;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _2777 = _2564;
                        float _2778 = _2565;
                        float _2779 = _2566;
                        float _2780 = _2567;
                        float _2781 = _2568;
                        float _2782 = _2569;
                        uint _2783 = _2579;
                        uint _2784;
                        vec4 _2809;
                        float _2810;
                        vec4 _2825;
                        vec3 _2837;
                        vec4 _2853;
                        vec4 _2869;
                        float _2916;
                        bool _2917;
                        for (;;)
                        {
                            uint _2794 = ((_2570 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2783));
                            _2784 = (_2783 + 4294967295u) & _2783;
                            uint _2796 = _2794 * 40u;
                            _2809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 3u)).x));
                            _2810 = _2809.w;
                            uint _2812 = (_2794 * 40u) + 4u;
                            _2825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 3u)).x));
                            uint _2827 = (_2794 * 40u) + 8u;
                            _2837 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x));
                            uint _2840 = (_2794 * 40u) + 16u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            uint _2856 = (_2794 * 40u) + 20u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            uint _2872 = (_2794 * 40u) + 24u;
                            vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            uint _2891 = (_2794 * 40u) + 28u;
                            vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            _2916 = fma(_2167, _2904.z, fma(_2166, _2904.y, _2904.x * _2165)) + _2904.w;
                            _2917 = !((fma(_2167, _2885.z, fma(_2166, _2885.y, _2885.x * _2165)) + _2885.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2917)
                            {
                                float _2944 = _2809.x - _2165;
                                float _2945 = _2809.y - _2166;
                                float _2946 = _2809.z - _2167;
                                float _2947 = dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946));
                                float _2950 = inversesqrt(_2947);
                                float _2951 = _2950 * _2944;
                                float _2952 = _2950 * _2945;
                                float _2953 = _2950 * _2946;
                                float _2957 = 1.0 - (_2947 / (_2810 * _2810));
                                float _3993 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                                float _2958 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                                float _2962 = sqrt(_2947) * _2825.w;
                                float _2964 = 1.39999997615814208984375 / (_2962 + 1.39999997615814208984375);
                                float _2965 = _2964 * _2964;
                                float _2968 = ((1.0 - _2965) * dot(vec3(_2951, _2952, _2953), vec3(_398, _401, _404))) + _2965;
                                float _2971 = _2962 * _2962;
                                float _2975 = (fma(_2167, _2853.z, fma(_2166, _2853.y, _2853.x * _2165)) + _2853.w) / _2916;
                                float _2976 = (fma(_2167, _2869.z, fma(_2166, _2869.y, _2869.x * _2165)) + _2869.w) / _2916;
                                float _2980 = 1.0 - dot(vec2(_2975, _2976), vec2(_2975, _2976));
                                float _4009 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                                float _2981 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _2982 = _2981 * (((isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))) * _2958) / ((_2971 * 0.699999988079071044921875) + 1.0));
                                float _2994 = exp2(log2(1.0 / ((_2971 * 3.5) + 5.0)) * 0.25);
                                float _2995 = 1.0 - _474;
                                float _3002 = sqrt(1.0 - ((1.0 - (_2995 * _2995)) * (1.0 - (_2994 * _2994))));
                                float _3003 = _3002 * _3002;
                                float _3004 = _3003 * _3003;
                                float _3005 = _2951 - _2451;
                                float _3006 = _2952 - _2452;
                                float _3007 = _2953 - _2453;
                                float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                                float _3015 = dot(vec3(_398, _401, _404), vec3((-0.0) - _2451, (-0.0) - _2452, (-0.0) - _2453));
                                float _4020 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3018 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3019 = dot(vec3(_398, _401, _404), vec3(_3011 * _3005, _3011 * _3006, _3011 * _3007));
                                float _4031 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                                float _3022 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                                float _3026 = ((_3022 * _3022) * (_3004 + (-1.0))) + 1.0;
                                float _3027 = _2964 * _3003;
                                float _3028 = _3027 * _3027;
                                float _3034 = ((1.0 - _3028) * dot(vec3(_398, _401, _404), vec3(_2951, _2952, _2953))) + _3028;
                                float _4042 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3035 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3036 = 1.0 - _3003;
                                float _3046 = (0.5 / (((_3035 * ((_3018 * _3036) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_3035 * _3036) + _3003) * _3018))) * _3035;
                                float _4053 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3056 = (_2981 * _2958) * (((_3004 * 3.1415927410125732421875) * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) / ((_3026 * _3026) * ((_2971 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3056 * _2837.x;
                                frontier_phi_73_pred_1 = _3056 * _2837.y;
                                frontier_phi_73_pred_2 = _2982 * _2825.z;
                                frontier_phi_73_pred_3 = _2982 * _2825.y;
                                frontier_phi_73_pred_4 = _2982 * _2825.x;
                                frontier_phi_73_pred_5 = _3056 * _2837.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3060 = frontier_phi_73_pred;
                            _3061 = frontier_phi_73_pred_1;
                            _3065 = frontier_phi_73_pred_2;
                            _3064 = frontier_phi_73_pred_3;
                            _3063 = frontier_phi_73_pred_4;
                            _3062 = frontier_phi_73_pred_5;
                            _2767 = _3063 + _2780;
                            _2768 = _3064 + _2781;
                            _2769 = _3065 + _2782;
                            _2764 = _3060 + _2777;
                            _2765 = _3061 + _2778;
                            _2766 = _3062 + _2779;
                            if (_2784 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2784;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2767;
                        frontier_phi_67_pred_1 = _2768;
                        frontier_phi_67_pred_2 = _2769;
                        frontier_phi_67_pred_3 = _2766;
                        frontier_phi_67_pred_4 = _2765;
                        frontier_phi_67_pred_5 = _2764;
                    }
                    _2432 = frontier_phi_67_pred;
                    _2434 = frontier_phi_67_pred_1;
                    _2436 = frontier_phi_67_pred_2;
                    _2430 = frontier_phi_67_pred_3;
                    _2428 = frontier_phi_67_pred_4;
                    _2426 = frontier_phi_67_pred_5;
                    uint _2571 = _2570 + 1u;
                    if (_2571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2564 = _2426;
                        _2565 = _2428;
                        _2566 = _2430;
                        _2567 = _2432;
                        _2568 = _2434;
                        _2569 = _2436;
                        _2570 = _2571;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2434;
                frontier_phi_55_56_ladder_1 = _2436;
                frontier_phi_55_56_ladder_2 = _2432;
                frontier_phi_55_56_ladder_3 = _2430;
                frontier_phi_55_56_ladder_4 = _2428;
                frontier_phi_55_56_ladder_5 = _2426;
            }
            else
            {
                frontier_phi_55_56_ladder = _2320;
                frontier_phi_55_56_ladder_1 = _2322;
                frontier_phi_55_56_ladder_2 = _2318;
                frontier_phi_55_56_ladder_3 = _2316;
                frontier_phi_55_56_ladder_4 = _2314;
                frontier_phi_55_56_ladder_5 = _2312;
            }
            _2425 = frontier_phi_55_56_ladder_5;
            _2427 = frontier_phi_55_56_ladder_4;
            _2429 = frontier_phi_55_56_ladder_3;
            _2431 = frontier_phi_55_56_ladder_2;
            _2433 = frontier_phi_55_56_ladder;
            _2435 = frontier_phi_55_56_ladder_1;
        }
        float _2440 = isnan(1.0) ? _458 : (isnan(_458) ? 1.0 : min(_458, 1.0));
        _2224 = (_2440 * _2431) + _1657;
        _2226 = (_2440 * _2433) + _1659;
        _2228 = (_2440 * _2435) + _1661;
        _2230 = ((_2425 * _443) * _2440) + _2005;
        _2232 = ((_2427 * _445) * _2440) + _2007;
        _2234 = ((_2429 * _446) * _2440) + _2009;
    }
    else
    {
        _2224 = _1657;
        _2226 = _1659;
        _2228 = _1661;
        _2230 = _2005;
        _2232 = _2007;
        _2234 = _2009;
    }
    float _4069 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4080 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4091 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    uint _2254 = _417 + 6u;
    float _2262 = _376 / cbSceneParam._m0[86u].x;
    float _2263 = _377 / cbSceneParam._m0[86u].y;
    vec4 _2277 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2262, _2263, (log2((isnan(cbSceneParam._m0[77u].w) ? _309 : (isnan(_309) ? cbSceneParam._m0[77u].w : min(_309, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2279 = _2277.x;
    float _2280 = _2277.y;
    float _2281 = _2277.z;
    float _2282 = _2277.w;
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    if (_309 > cbSceneParam._m0[78u].w)
    {
        float _2337 = isnan(_309) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _309 : min(cbSceneParam._m0[80u].w, _309));
        float _2338 = _2337 / _309;
        float _2349 = _2338 * _361;
        float _2350 = _362 * _2338;
        float _2351 = (-0.0) - _2350;
        float _2353 = _2338 * _363;
        float _2355 = (cbSceneParam._m0[77u].w * _2351) / _2337;
        float _2356 = _2355 + cbSceneParam._m0[79u].w;
        float _2357 = cbSceneParam._m0[79u].w - _2350;
        float _2363 = sqrt(((_2349 * _2349) + (_2350 * _2350)) + (_2353 * _2353));
        float _2366 = (1.0 - (cbSceneParam._m0[77u].w / _2337)) * _2363;
        float _2371 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2373 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2526;
        if (abs((_2351 - _2355) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2526 = ((((_2356 > 0.0) ? exp2(_2371 * _2356) : (2.0 - exp2(_2373 * _2356))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2366;
        }
        else
        {
            float _2486 = 1.0 / cbSceneParam._m0[80u].x;
            float _2487 = isnan(_2357) ? _2356 : (isnan(_2356) ? _2357 : max(_2356, _2357));
            float _2488 = isnan(_2357) ? _2356 : (isnan(_2356) ? _2357 : min(_2356, _2357));
            float _2497 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : min(_2487, 0.0));
            float _2498 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : min(_2488, 0.0));
            _2526 = ((abs(_2363 / _2351) * cbSceneParam._m0[80u].y) * ((((_2497 - _2498) * 2.0) - ((exp2(_2371 * (isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0)))) - exp2(_2371 * (isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0))))) * _2486)) - ((exp2(_2373 * _2497) - exp2(_2373 * _2498)) * _2486))) + (_2366 * cbSceneParam._m0[80u].z);
        }
        vec4 _2528 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2262, _2263, 1.0), 0.0);
        float _2537 = exp2((_2526 * (-1.44269502162933349609375)) * (1.0 - _2528.w));
        float _2538 = log2(_2537);
        float _2554 = log2(_2282);
        _2375 = (exp2(_2554 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2538 * cbSceneParam._m0[78u].x)) * _2528.x) / cbSceneParam._m0[78u].x)) + _2279;
        _2377 = (exp2(_2554 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2538 * cbSceneParam._m0[78u].y)) * _2528.y) / cbSceneParam._m0[78u].y)) + _2280;
        _2379 = (exp2(_2554 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2538 * cbSceneParam._m0[78u].z)) * _2528.z) / cbSceneParam._m0[78u].z)) + _2281;
        _2381 = _2537 * _2282;
    }
    else
    {
        _2375 = _2279;
        _2377 = _2280;
        _2379 = _2281;
        _2381 = _2282;
    }
    float _2393 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2394 = _2393 == 3.0;
    float _2395 = log2(_2381);
    float _2402 = exp2(_2395 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2224 + ((isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))) * _458))) + ((_2230 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _1268)) * cbPerFrame._m0[3u].x));
    float _2403 = exp2(_2395 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2226 + ((isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))) * _458))) + ((_2232 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _1268)) * cbPerFrame._m0[3u].x));
    float _2404 = exp2(_2395 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2228 + ((isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))) * _458))) + ((_2234 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _1268)) * cbPerFrame._m0[3u].x));
    float _2413 = (_2393 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2413 * (_2394 ? _2402 : (_2402 + (cbSceneParam._m0[72u].w * _2375)));
    SV_Target.y = _2413 * (_2394 ? _2403 : (_2403 + (cbSceneParam._m0[72u].w * _2377)));
    SV_Target.z = _2413 * (_2394 ? _2404 : (_2404 + (cbSceneParam._m0[72u].w * _2379)));
    SV_Target.w = cbInstanceData._m0[_2254].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2254].w;
}


