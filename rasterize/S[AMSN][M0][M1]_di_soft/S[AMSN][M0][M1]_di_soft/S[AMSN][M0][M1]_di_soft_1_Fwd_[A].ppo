#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _893;
float _3262;
float _3263;
float _3264;
float _3265;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _227.x * cbMtdParam._m0[9u].x;
    float _235 = _227.y * cbMtdParam._m0[9u].y;
    float _236 = _227.z * cbMtdParam._m0[9u].z;
    vec4 _249 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _251 = _249.x;
    float _275 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _251)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _251))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3274 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _280 = gl_FragCoord.x * 0.125;
    float _282 = gl_FragCoord.y * 0.125;
    float _292 = float(((_227.w * TEXCOORD_1.z) * (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_280, _282)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _304 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _308 = _304.z;
    float _312 = (_304.x * 2.0) + (-1.0);
    float _314 = (_304.y * 2.0) + (-1.0);
    float _315 = dot(vec2(_312, _314), vec2(_312, _314));
    float _3285 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))));
    float _323 = fma(_320, _197 * NORMAL.x, fma(_314, _204 * TANGENT.x, (_190 * _182) * _312));
    float _326 = fma(_320, _197 * NORMAL.y, fma(_314, _204 * TANGENT.y, (_190 * _183) * _312));
    float _329 = fma(_320, _197 * NORMAL.z, fma(_314, _204 * TANGENT.z, (_190 * _184) * _312));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    float _334 = _333 * _323;
    float _335 = _333 * _326;
    float _336 = _333 * _329;
    float _3296 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _337 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _3307 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3318 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3329 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _354 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _395 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _405 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _395);
    float _406 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _395);
    float _407 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _395);
    float _411 = inversesqrt(dot(vec3(_405, _406, _407), vec3(_405, _406, _407)));
    float _412 = _405 * _411;
    float _413 = _406 * _411;
    float _414 = _407 * _411;
    vec4 _415 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_280, _282));
    float _417 = _415.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _574 = sqrt(((_405 * _405) + (_406 * _406)) + (_407 * _407));
        float _580 = (cbMatDynParam._m0[5u].x * _574) + cbMatDynParam._m0[5u].y;
        float _3340 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        float _581 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _585 = (cbMatDynParam._m0[5u].z * _574) + cbMatDynParam._m0[5u].w;
        float _3351 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) - _581)) + _581) < ((_417 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _428 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _429 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _449 = fma(_336, cbSceneParam._m0[5u].z, fma(_335, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _334));
    float _452 = fma(_336, cbSceneParam._m0[6u].z, fma(_335, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _334));
    float _455 = fma(_336, cbSceneParam._m0[7u].z, fma(_335, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _334));
    uint _468 = uint(roundEven(NORMAL.w)) * 13u;
    uint _470 = _468 + 9u;
    uint _471 = _470 + uint(cbMatDynParam._m0[0u].w);
    float _477 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0)))) * cbInstanceData._m0[_471].x;
    float _478 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0)))) * cbInstanceData._m0[_471].y;
    float _479 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0)))) * cbInstanceData._m0[_471].z;
    float _3362 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    float _3373 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    float _3384 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    vec4 _491 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _428, cbSceneParam._m0[86u].y * _429));
    float _494 = _491.x * TEXCOORD_1.w;
    float _495 = dot(vec3(_334, _335, _336), vec3(_412, _413, _414));
    float _498 = _495 * 2.0;
    float _502 = (_498 * _334) - _412;
    float _503 = (_498 * _335) - _413;
    float _504 = (_498 * _336) - _414;
    float _508 = abs(dot(vec3(_412, _413, _414), vec3(_334, _335, _336)));
    float _3395 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _510 = sqrt(_337);
    float _523 = exp2((_510 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_510 * 3.0));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _892;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _617 = fma(_563, cbModelParam._m0[26u].z, fma(_559, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _555));
        float _621 = fma(_563, cbModelParam._m0[27u].z, fma(_559, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _555));
        float _625 = fma(_563, cbModelParam._m0[28u].z, fma(_559, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _555));
        float _650 = _555 + _334;
        float _651 = _559 + _335;
        float _652 = _563 + _336;
        float _662 = fma(_652, cbModelParam._m0[26u].z, fma(_651, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _650)) - _617;
        float _663 = fma(_652, cbModelParam._m0[27u].z, fma(_651, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _650)) - _621;
        float _664 = fma(_652, cbModelParam._m0[28u].z, fma(_651, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _650)) - _625;
        float _668 = inversesqrt(dot(vec3(_662, _663, _664), vec3(_662, _663, _664)));
        float _681 = ((_668 * _662) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_617 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _682 = ((_668 * _663) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_621 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _683 = ((_668 * _664) / cbModelParam._m0[34u].z) + ((((((_625 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        float _720 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_686.x + (-0.5));
        float _722 = _720 * (_686.y + (-0.5));
        float _723 = _720 * (_686.z + (-0.5));
        float _730 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_693.x + (-0.5));
        float _732 = _730 * (_693.y + (-0.5));
        float _733 = _730 * (_693.z + (-0.5));
        float _740 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_700.x + (-0.5));
        float _742 = _740 * (_700.y + (-0.5));
        float _743 = _740 * (_700.z + (-0.5));
        float _750 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_707.x + (-0.5));
        float _752 = _750 * (_707.y + (-0.5));
        float _753 = _750 * (_707.z + (-0.5));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = _721 * 0.5;
        float _758 = _731 * 0.5;
        float _759 = _741 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _774 = (dot(vec3(_334, _335, _336), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3421 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _784 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3432 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3443 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * (_786 + 1.0))) + _791) * _754;
        float _801 = _722 * 0.5;
        float _802 = _732 * 0.5;
        float _803 = _742 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _817 = (dot(vec3(_334, _335, _336), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3454 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _826 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3465 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3476 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * (_828 + 1.0))) + _833) * _755;
        float _843 = _723 * 0.5;
        float _844 = _733 * 0.5;
        float _845 = _743 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _859 = (dot(vec3(_334, _335, _336), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3487 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _868 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3498 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3509 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * (_870 + 1.0))) + _875) * _756;
        _892 = _723;
        _894 = _722;
        _895 = _721;
        _896 = _733;
        _897 = _732;
        _898 = _731;
        _899 = _743;
        _900 = _742;
        _901 = _741;
        _902 = _756;
        _903 = _755;
        _904 = _754;
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
    }
    else
    {
        _892 = _893;
        _894 = _893;
        _895 = _893;
        _896 = _893;
        _897 = _893;
        _898 = _893;
        _899 = _893;
        _900 = _893;
        _901 = _893;
        _902 = _893;
        _903 = _893;
        _904 = _893;
        _905 = 0.0;
        _906 = 0.0;
        _907 = 0.0;
    }
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _936 = fma(_563, cbModelParam._m0[30u].z, fma(_559, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _555));
        float _940 = fma(_563, cbModelParam._m0[31u].z, fma(_559, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _555));
        float _944 = fma(_563, cbModelParam._m0[32u].z, fma(_559, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _555));
        float _967 = _555 + _334;
        float _968 = _559 + _335;
        float _969 = _563 + _336;
        float _979 = fma(_969, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967)) - _936;
        float _980 = fma(_969, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967)) - _940;
        float _981 = fma(_969, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967)) - _944;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_936 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_940 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[35u].z) + ((((((_944 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1035 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1002.x + (-0.5));
        float _1037 = _1035 * (_1002.y + (-0.5));
        float _1038 = _1035 * (_1002.z + (-0.5));
        float _1045 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1009.x + (-0.5));
        float _1047 = _1045 * (_1009.y + (-0.5));
        float _1048 = _1045 * (_1009.z + (-0.5));
        float _1055 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1016.x + (-0.5));
        float _1057 = _1055 * (_1016.y + (-0.5));
        float _1058 = _1055 * (_1016.z + (-0.5));
        float _1065 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1023.x + (-0.5));
        float _1067 = _1065 * (_1023.y + (-0.5));
        float _1068 = _1065 * (_1023.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_334, _335, _336), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3550 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3561 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3572 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * (_1099 + 1.0))) + _1104) * _1069;
        float _1114 = _1037 * 0.5;
        float _1115 = _1047 * 0.5;
        float _1116 = _1057 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_334, _335, _336), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3605 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1141 + 1.0))) + _1146) * _1070;
        float _1156 = _1038 * 0.5;
        float _1157 = _1048 * 0.5;
        float _1158 = _1058 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_334, _335, _336), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3638 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1183 + 1.0))) + _1188) * _1071;
        _1205 = _1038;
        _1206 = _1037;
        _1207 = _1036;
        _1208 = _1048;
        _1209 = _1047;
        _1210 = _1046;
        _1211 = _1058;
        _1212 = _1057;
        _1213 = _1056;
        _1214 = _1071;
        _1215 = _1070;
        _1216 = _1069;
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _893;
        _1206 = _893;
        _1207 = _893;
        _1208 = _893;
        _1209 = _893;
        _1210 = _893;
        _1211 = _893;
        _1212 = _893;
        _1213 = _893;
        _1214 = _893;
        _1215 = _893;
        _1216 = _893;
        _1217 = 0.0;
        _1218 = 0.0;
        _1219 = 0.0;
    }
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _905)) + _905;
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _906)) + _906;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _907)) + _907;
    float _1252 = fma(_1231, cbSceneParam._m0[89u].z, fma(_1230, cbSceneParam._m0[89u].y, _1229 * cbSceneParam._m0[89u].x));
    float _1255 = fma(_1231, cbSceneParam._m0[90u].z, fma(_1230, cbSceneParam._m0[90u].y, _1229 * cbSceneParam._m0[90u].x));
    float _1258 = fma(_1231, cbSceneParam._m0[91u].z, fma(_1230, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1229));
    float _1273 = _502 * 0.5;
    float _1274 = _503 * 0.5;
    float _1275 = _504 * 0.5;
    float _1276 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1279 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1282 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1316;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1289 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_892, _896, _899, _902));
        float _1293 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_894, _897, _900, _903));
        float _1297 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_895, _898, _901, _904));
        float _1304 = dot(vec4(cbModelParam._m0[39u]), vec4(_1273, _1274, _1275, 1.0));
        _1316 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1316 = 1.0;
    }
    float _1327;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1318 = dot(vec4(cbModelParam._m0[40u]), vec4(_1273, _1274, _1275, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1331 = (_1327 * cbModelParam._m0[1u].x) + (_1316 * (1.0 - cbModelParam._m0[1u].x));
    float _1341 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _337);
    float _1342 = isnan(_1341) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1341 : min(cbModelParam._m0[25u].z, _1341));
    float _1424;
    float _1426;
    float _1428;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1391 = fma(_563, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _555)) + cbModelParam._m0[13u].w;
        float _1395 = fma(_563, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _555)) + cbModelParam._m0[14u].w;
        float _1399 = fma(_563, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _555)) + cbModelParam._m0[15u].w;
        float _1402 = fma(_504, cbModelParam._m0[13u].z, fma(_503, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502));
        float _1405 = fma(_504, cbModelParam._m0[14u].z, fma(_503, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502));
        float _1408 = fma(_504, cbModelParam._m0[15u].z, fma(_503, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502));
        float _1436;
        if (_1402 > 0.0)
        {
            _1436 = abs((1.0 - _1391) / _1402);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1391 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1436 = frontier_phi_17_15_ladder;
        }
        float _1642;
        if (_1405 > 0.0)
        {
            _1642 = abs((1.0 - _1395) / _1405);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1395 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1642 = frontier_phi_26_22_ladder;
        }
        float _1885;
        if (_1408 > 0.0)
        {
            _1885 = abs((1.0 - _1399) / _1408);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1399 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1885 = frontier_phi_38_33_ladder;
        }
        float _1887 = isnan(_1642) ? _1436 : (isnan(_1436) ? _1642 : min(_1436, _1642));
        float _1888 = isnan(_1885) ? _1887 : (isnan(_1887) ? _1885 : min(_1887, _1885));
        float _1892 = (_1888 * _1402) + _1391;
        float _1893 = (_1888 * _1405) + _1395;
        float _1894 = (_1888 * _1408) + _1399;
        float _1895 = _1888 * 9.9999997473787516355514526367188e-05;
        float _1897 = (-1.0) - _1895;
        float _1899 = _1895 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1894 > _1899) || ((_1894 < _1897) || ((_1893 > _1899) || ((_1893 < _1897) || ((_1892 < _1897) || (_1892 > _1899))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2018 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1894, cbModelParam._m0[9u].z, fma(_1893, cbModelParam._m0[9u].y, _1892 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1894, cbModelParam._m0[10u].z, fma(_1893, cbModelParam._m0[10u].y, _1892 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1894, cbModelParam._m0[11u].z, fma(_1893, cbModelParam._m0[11u].y, _1892 * cbModelParam._m0[11u].x))), _1342);
            frontier_phi_16_38_ladder = _2018.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2018.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2018.x * cbModelParam._m0[1u].y;
        }
        _1424 = frontier_phi_16_38_ladder_2;
        _1426 = frontier_phi_16_38_ladder_1;
        _1428 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_502, _503, _504), _1342);
        _1424 = _1412.x * cbModelParam._m0[1u].y;
        _1426 = _1412.y * cbModelParam._m0[1u].y;
        _1428 = _1412.z * cbModelParam._m0[1u].y;
    }
    float _1432 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _337);
    float _1433 = isnan(_1432) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1432 : min(cbModelParam._m0[25u].w, _1432));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1490 = fma(_563, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _555)) + cbModelParam._m0[21u].w;
        float _1494 = fma(_563, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _555)) + cbModelParam._m0[22u].w;
        float _1498 = fma(_563, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _555)) + cbModelParam._m0[23u].w;
        float _1501 = fma(_504, cbModelParam._m0[21u].z, fma(_503, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502));
        float _1504 = fma(_504, cbModelParam._m0[22u].z, fma(_503, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502));
        float _1507 = fma(_504, cbModelParam._m0[23u].z, fma(_503, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502));
        float _1647;
        if (_1501 > 0.0)
        {
            _1647 = abs((1.0 - _1490) / _1501);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1490 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1647 = frontier_phi_28_24_ladder;
        }
        float _1912;
        if (_1504 > 0.0)
        {
            _1912 = abs((1.0 - _1494) / _1504);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1494 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1912 = frontier_phi_40_35_ladder;
        }
        float _2117;
        if (_1507 > 0.0)
        {
            _2117 = abs((1.0 - _1498) / _1507);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1498 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2117 = frontier_phi_49_46_ladder;
        }
        float _2119 = isnan(_1912) ? _1647 : (isnan(_1647) ? _1912 : min(_1647, _1912));
        float _2120 = isnan(_2117) ? _2119 : (isnan(_2119) ? _2117 : min(_2119, _2117));
        float _2124 = (_2120 * _1501) + _1490;
        float _2125 = (_2120 * _1504) + _1494;
        float _2126 = (_2120 * _1507) + _1498;
        float _2127 = _2120 * 9.9999997473787516355514526367188e-05;
        float _2128 = (-1.0) - _2127;
        float _2130 = _2127 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2126 > _2130) || ((_2126 < _2128) || ((_2125 > _2130) || ((_2125 < _2128) || ((_2124 < _2128) || (_2124 > _2130))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2325 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2126, cbModelParam._m0[17u].z, fma(_2125, cbModelParam._m0[17u].y, _2124 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2126, cbModelParam._m0[18u].z, fma(_2125, cbModelParam._m0[18u].y, _2124 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2126, cbModelParam._m0[19u].z, fma(_2125, cbModelParam._m0[19u].y, _2124 * cbModelParam._m0[19u].x))), _1433);
            frontier_phi_25_49_ladder = _2325.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2325.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2325.x * cbModelParam._m0[1u].z;
        }
        _1526 = frontier_phi_25_49_ladder_2;
        _1528 = frontier_phi_25_49_ladder_1;
        _1530 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1510 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_502, _503, _504), _1433);
        _1526 = _1510.x * cbModelParam._m0[1u].z;
        _1528 = _1510.y * cbModelParam._m0[1u].z;
        _1530 = _1510.z * cbModelParam._m0[1u].z;
    }
    float _1542 = ((((1.0 - _523) * ((_510 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_523 * _510)) * _494;
    float _1543 = _1542 * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1544 = _1542 * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1545 = _1542 * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1548 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1544, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1544, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1544, cbSceneParam._m0[91u].y, _1543 * cbSceneParam._m0[91u].x));
    uvec4 _1564 = floatBitsToUint(cbInstanceData._m0[_468 + 5u]);
    uint _1566 = _1564.x * 14u;
    uint _1567 = _1566 + 13u;
    float _1574 = _494 + (-1.0);
    float _1579 = (cbLight._m0[_1567].x * _1574) + 1.0;
    float _1580 = (cbLight._m0[_1567].y * _1574) + 1.0;
    float _1581 = (cbLight._m0[_1567].z * _1574) + 1.0;
    float _1582 = (cbLight._m0[_1567].w * _1574) + 1.0;
    uint _1583 = _1566 + 5u;
    float _1589 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
    uint _1593 = _1566 + 4u;
    float _1600 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
    uint _1604 = _1566 | 1u;
    float _1615 = dot(vec3(cbLight._m0[_1566].xyz), vec3(_334, _335, _336));
    float _1618 = dot(vec3(cbLight._m0[_1604].xyz), vec3(_334, _335, _336));
    float _3774 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _3785 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _1623 = (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 0.3183098733425140380859375;
    float _1625 = (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * 0.3183098733425140380859375;
    float _1632 = ((cbLight._m0[_1583].x * _1589) * _1625) + ((cbLight._m0[_1593].x * _1600) * _1623);
    float _1633 = ((_1589 * cbLight._m0[_1583].y) * _1625) + ((_1600 * cbLight._m0[_1593].y) * _1623);
    float _1634 = ((_1589 * cbLight._m0[_1583].z) * _1625) + ((_1600 * cbLight._m0[_1593].z) * _1623);
    uvec4 _1639 = floatBitsToUint(cbLight._m0[_1566 + 12u]);
    bool _1641 = _1639.x == 0u;
    float _1652;
    float _1654;
    float _1656;
    if (_1641)
    {
        _1652 = _1632;
        _1654 = _1633;
        _1656 = _1634;
    }
    else
    {
        uint _1660 = _1566 + 6u;
        float _1676 = (dot(vec3(cbLight._m0[_1566 + 2u].xyz), vec3(_334, _335, _336)) * 0.5) + 0.5;
        float _1677 = _1676 * _1676;
        float _3796 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1679 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
        _1652 = (((cbLight._m0[_1660].x * 0.3183098733425140380859375) * _1678) * _1679) + _1632;
        _1654 = (((cbLight._m0[_1660].y * 0.3183098733425140380859375) * _1678) * _1679) + _1633;
        _1656 = (((cbLight._m0[_1660].z * 0.3183098733425140380859375) * _1678) * _1679) + _1634;
    }
    bool _1659 = _1639.y == 0u;
    float _1697;
    float _1699;
    float _1701;
    if (_1659)
    {
        _1697 = _1652;
        _1699 = _1654;
        _1701 = _1656;
    }
    else
    {
        uint _1856 = _1566 + 7u;
        float _1872 = (dot(vec3(cbLight._m0[_1566 + 3u].xyz), vec3(_334, _335, _336)) * 0.5) + 0.5;
        float _1873 = _1872 * _1872;
        float _3812 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1875 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _1697 = (((cbLight._m0[_1856].x * 0.3183098733425140380859375) * _1874) * _1875) + _1652;
        _1699 = (((cbLight._m0[_1856].y * 0.3183098733425140380859375) * _1874) * _1875) + _1654;
        _1701 = (((cbLight._m0[_1856].z * 0.3183098733425140380859375) * _1874) * _1875) + _1656;
    }
    uint _1704 = _1566 + 8u;
    float _1717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1566].w)) * _337) * 0.949999988079071044921875);
    float _1718 = _1717 * _1717;
    float _1719 = cbLight._m0[_1566].x + _412;
    float _1720 = cbLight._m0[_1566].y + _413;
    float _1721 = cbLight._m0[_1566].z + _414;
    float _1725 = inversesqrt(dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721)));
    float _1726 = _1725 * _1719;
    float _1727 = _1725 * _1720;
    float _1728 = _1725 * _1721;
    float _1729 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_1566].xyz));
    float _3828 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1732 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _1733 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _1734 = dot(vec3(_334, _335, _336), vec3(_1726, _1727, _1728));
    float _3850 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1737 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _1738 = dot(vec3(cbLight._m0[_1566].xyz), vec3(_1726, _1727, _1728));
    float _3861 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1742 = _1718 * _1718;
    float _1746 = ((_1737 * _1737) * (_1742 + (-1.0))) + 1.0;
    float _1757 = (exp2(log2(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1758 = 1.0 - _1718;
    float _1769 = (0.5 / (((_1733 * ((_1732 * _1758) + _1718)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _1758) + _1718) * _1732))) * _1732;
    float _3872 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1771 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1742 / ((_1746 * _1746) * 3.141590118408203125));
    uint _1782 = _1566 + 9u;
    float _1793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1604].w)) * _337) * 0.949999988079071044921875);
    float _1794 = _1793 * _1793;
    float _1795 = cbLight._m0[_1604].x + _412;
    float _1796 = cbLight._m0[_1604].y + _413;
    float _1797 = cbLight._m0[_1604].z + _414;
    float _1801 = inversesqrt(dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797)));
    float _1802 = _1801 * _1795;
    float _1803 = _1801 * _1796;
    float _1804 = _1801 * _1797;
    float _1805 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_1604].xyz));
    float _3883 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _1809 = dot(vec3(_334, _335, _336), vec3(_1802, _1803, _1804));
    float _3894 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _1813 = dot(vec3(cbLight._m0[_1604].xyz), vec3(_1802, _1803, _1804));
    float _3905 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1817 = _1794 * _1794;
    float _1821 = ((_1812 * _1812) * (_1817 + (-1.0))) + 1.0;
    float _1830 = (exp2(log2(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1831 = 1.0 - _1794;
    float _1841 = (0.5 / (((_1733 * ((_1808 * _1831) + _1794)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _1831) + _1794) * _1808))) * _1808;
    float _3916 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1843 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1817 / ((_1821 * _1821) * 3.141590118408203125));
    float _1853 = (((_1830 * cbLight._m0[_1782].x) * _1843) * _1589) + (((_1757 * cbLight._m0[_1704].x) * _1771) * _1600);
    float _1854 = (((_1830 * cbLight._m0[_1782].y) * _1843) * _1589) + (((_1757 * cbLight._m0[_1704].y) * _1771) * _1600);
    float _1855 = (((_1830 * cbLight._m0[_1782].z) * _1843) * _1589) + (((_1757 * cbLight._m0[_1704].z) * _1771) * _1600);
    float _1917;
    float _1919;
    float _1921;
    if (_1641)
    {
        _1917 = _1853;
        _1919 = _1854;
        _1921 = _1855;
    }
    else
    {
        uint _1923 = _1566 + 2u;
        uint _1927 = _1566 + 10u;
        float _1941 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _337) * 0.949999988079071044921875);
        float _1942 = _1941 * _1941;
        float _1943 = cbLight._m0[_1923].x + _412;
        float _1944 = cbLight._m0[_1923].y + _413;
        float _1945 = cbLight._m0[_1923].z + _414;
        float _1949 = inversesqrt(dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945)));
        float _1950 = _1949 * _1943;
        float _1951 = _1949 * _1944;
        float _1952 = _1949 * _1945;
        float _1953 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_1923].xyz));
        float _3927 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1956 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1957 = dot(vec3(_334, _335, _336), vec3(_1950, _1951, _1952));
        float _3938 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1960 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1961 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_1950, _1951, _1952));
        float _3949 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1965 = _1942 * _1942;
        float _1969 = ((_1960 * _1960) * (_1965 + (-1.0))) + 1.0;
        float _1978 = (exp2(log2(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1979 = 1.0 - _1942;
        float _1989 = (0.5 / (((_1733 * ((_1956 * _1979) + _1942)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _1979) + _1942) * _1956))) * _1956;
        float _3960 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1991 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1965 / ((_1969 * _1969) * 3.141590118408203125));
        float _1992 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
        _1917 = (((_1978 * cbLight._m0[_1927].x) * _1991) * _1992) + _1853;
        _1919 = (((_1978 * cbLight._m0[_1927].y) * _1991) * _1992) + _1854;
        _1921 = (((_1978 * cbLight._m0[_1927].z) * _1991) * _1992) + _1855;
    }
    float _2027;
    float _2029;
    float _2031;
    if (_1659)
    {
        _2027 = _1917;
        _2029 = _1919;
        _2031 = _1921;
    }
    else
    {
        uint _2038 = _1566 + 3u;
        uint _2042 = _1566 + 11u;
        float _2056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _337) * 0.949999988079071044921875);
        float _2057 = _2056 * _2056;
        float _2058 = cbLight._m0[_2038].x + _412;
        float _2059 = cbLight._m0[_2038].y + _413;
        float _2060 = cbLight._m0[_2038].z + _414;
        float _2064 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
        float _2065 = _2064 * _2058;
        float _2066 = _2064 * _2059;
        float _2067 = _2064 * _2060;
        float _2068 = dot(vec3(_334, _335, _336), vec3(cbLight._m0[_2038].xyz));
        float _3976 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2071 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _2072 = dot(vec3(_334, _335, _336), vec3(_2065, _2066, _2067));
        float _3987 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2075 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _2076 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2065, _2066, _2067));
        float _3998 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2080 = _2057 * _2057;
        float _2084 = ((_2075 * _2075) * (_2080 + (-1.0))) + 1.0;
        float _2093 = (exp2(log2(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2094 = 1.0 - _2057;
        float _2104 = (0.5 / (((_1733 * ((_2071 * _2094) + _2057)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _2094) + _2057) * _2071))) * _2071;
        float _4009 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2106 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_2080 / ((_2084 * _2084) * 3.141590118408203125));
        float _2107 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _2027 = (((_2093 * cbLight._m0[_2042].x) * _2106) * _2107) + _1917;
        _2029 = (((_2093 * cbLight._m0[_2042].y) * _2106) * _2107) + _1919;
        _2031 = (((_2093 * cbLight._m0[_2042].z) * _2106) * _2107) + _1921;
    }
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    float _2250;
    float _2252;
    if (_1564.y == 0u)
    {
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2182;
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2182;
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2182;
        uvec4 _2197 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2198 = _2197.x;
        uint _2209 = uint((float(_2197.y) * floor(float(uint(cbSceneParam._m0[85u].y * _429) / _2198))) + floor(float(uint(cbSceneParam._m0[85u].x * _428) / _2198)));
        float _2219 = (log2(_2185 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2220 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        uint _2223 = uint(isnan(14.0) ? _2220 : (isnan(_2220) ? 14.0 : min(_2220, 14.0)));
        uvec4 _2228 = texelFetch(g_lightClusterGridBuffer, int(((_2223 << 2u) + (_2209 << 6u)) >> 2u));
        uint _2229 = _2228.x;
        uint _2230 = _2197.z;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        if (((((1u << ((_2230 >> 4u) & 15u)) + 4294967295u) & _2229) == 0u) || ((_2230 & 240u) == 0u))
        {
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
            _2340 = 0.0;
        }
        else
        {
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2339;
            float _2341;
            float _2482 = 0.0;
            float _2483 = 0.0;
            float _2484 = 0.0;
            float _2485 = 0.0;
            float _2486 = 0.0;
            float _2487 = 0.0;
            uint _2488 = 0u;
            uint _2497;
            bool _2498;
            for (;;)
            {
                _2497 = texelFetch(g_lightClassification, int((((_2223 << 5u) + (_2209 << 9u)) + (_2488 << 2u)) >> 2u)).x;
                _2498 = _2497 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2498)
                {
                    frontier_phi_66_pred = _2482;
                    frontier_phi_66_pred_1 = _2487;
                    frontier_phi_66_pred_2 = _2486;
                    frontier_phi_66_pred_3 = _2485;
                    frontier_phi_66_pred_4 = _2484;
                    frontier_phi_66_pred_5 = _2483;
                }
                else
                {
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    uint _2633;
                    _2627 = _2482;
                    _2628 = _2483;
                    _2629 = _2484;
                    _2630 = _2485;
                    _2631 = _2486;
                    _2632 = _2487;
                    _2633 = _2497;
                    float _2554;
                    float _2555;
                    float _2556;
                    float _2557;
                    float _2558;
                    float _2559;
                    for (;;)
                    {
                        uint _2637 = uint(findLSB(_2633)) + (_2488 << 5u);
                        uint _2634 = (_2633 + 4294967295u) & _2633;
                        uint _2639 = _2637 * 48u;
                        vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2639)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 3u)).x));
                        uint _2659 = (_2637 * 48u) + 4u;
                        vec4 _2672 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 3u)).x));
                        uint _2678 = (_2637 * 48u) + 8u;
                        vec3 _2689 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2678)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 2u)).x));
                        float _2693 = _2653.x - _2183;
                        float _2694 = _2653.y - _2184;
                        float _2695 = _2653.z - _2185;
                        float _2696 = dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695));
                        float _2699 = inversesqrt(_2696);
                        float _2700 = _2699 * _2693;
                        float _2701 = _2699 * _2694;
                        float _2702 = _2699 * _2695;
                        float _2703 = dot(vec3(_449, _452, _455), vec3(_2700, _2701, _2702));
                        float _2708 = 1.0 - (_2696 * _2653.w);
                        float _4035 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                        float _2709 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                        float _2710 = sqrt(_2696) * _2672.w;
                        float _2713 = 1.39999997615814208984375 / (_2710 + 1.39999997615814208984375);
                        float _2714 = _2713 * _2713;
                        float _2717 = ((1.0 - _2714) * _2703) + _2714;
                        float _2720 = _2710 * _2710;
                        float _2724 = ((isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0))) * _2709) / ((_2720 * 0.699999988079071044921875) + 1.0);
                        float _2728 = (-0.0) - _2183;
                        float _2729 = (-0.0) - _2184;
                        float _2730 = (-0.0) - _2185;
                        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
                        float _2735 = _2734 * _2728;
                        float _2736 = _2734 * _2729;
                        float _2737 = _2734 * _2730;
                        float _2745 = exp2(log2(1.0 / ((_2720 * 3.5) + 5.0)) * 0.25);
                        float _2746 = 1.0 - _510;
                        float _2753 = sqrt(1.0 - ((1.0 - (_2746 * _2746)) * (1.0 - (_2745 * _2745))));
                        float _2754 = _2753 * _2753;
                        float _2755 = _2754 * _2754;
                        float _2756 = _2735 + _2700;
                        float _2757 = _2736 + _2701;
                        float _2758 = _2737 + _2702;
                        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
                        float _2766 = dot(vec3(_449, _452, _455), vec3(_2735, _2736, _2737));
                        float _4051 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2769 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                        float _2770 = dot(vec3(_449, _452, _455), vec3(_2762 * _2756, _2762 * _2757, _2762 * _2758));
                        float _4062 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2773 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                        float _2777 = ((_2773 * _2773) * (_2755 + (-1.0))) + 1.0;
                        float _2778 = _2713 * _2754;
                        float _2779 = _2778 * _2778;
                        float _2782 = ((1.0 - _2779) * _2703) + _2779;
                        float _4073 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2783 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                        float _2784 = 1.0 - _2754;
                        float _2794 = (0.5 / (((_2783 * ((_2769 * _2784) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2783 * _2784) + _2754) * _2769))) * _2783;
                        float _4084 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2805 = (((_2755 * 3.1415927410125732421875) * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) / ((_2777 * _2777) * ((_2720 * 2.1991131305694580078125) + 3.141590118408203125))) * _2709;
                        _2557 = (_2724 * _2672.x) + _2630;
                        _2558 = (_2724 * _2672.y) + _2631;
                        _2559 = (_2724 * _2672.z) + _2632;
                        _2554 = (_2805 * _2689.x) + _2627;
                        _2555 = (_2805 * _2689.y) + _2628;
                        _2556 = (_2805 * _2689.z) + _2629;
                        if (_2634 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2627 = _2554;
                            _2628 = _2555;
                            _2629 = _2556;
                            _2630 = _2557;
                            _2631 = _2558;
                            _2632 = _2559;
                            _2633 = _2634;
                        }
                    }
                    frontier_phi_66_pred = _2554;
                    frontier_phi_66_pred_1 = _2559;
                    frontier_phi_66_pred_2 = _2558;
                    frontier_phi_66_pred_3 = _2557;
                    frontier_phi_66_pred_4 = _2556;
                    frontier_phi_66_pred_5 = _2555;
                }
                _2331 = frontier_phi_66_pred;
                _2341 = frontier_phi_66_pred_1;
                _2339 = frontier_phi_66_pred_2;
                _2337 = frontier_phi_66_pred_3;
                _2335 = frontier_phi_66_pred_4;
                _2333 = frontier_phi_66_pred_5;
                uint _2489 = _2488 + 1u;
                if (_2489 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2482 = _2331;
                    _2483 = _2333;
                    _2484 = _2335;
                    _2485 = _2337;
                    _2486 = _2339;
                    _2487 = _2341;
                    _2488 = _2489;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
            _2340 = _2341;
        }
        uvec4 _2344 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2345 = _2344.z;
        uint _2347 = (_2345 >> 8u) & 15u;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        if (((4294967295u << _2347) & _2229) == 0u)
        {
            _2450 = _2330;
            _2452 = _2332;
            _2454 = _2334;
            _2456 = _2336;
            _2458 = _2338;
            _2460 = _2340;
        }
        else
        {
            float _2475 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
            float _2476 = _2475 * _2183;
            float _2477 = _2475 * _2184;
            float _2478 = _2475 * _2185;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2347 < ((_2345 >> 12u) & 15u))
            {
                float _2451;
                float _2453;
                float _2455;
                float _2457;
                float _2459;
                float _2461;
                float _2610 = _2330;
                float _2611 = _2332;
                float _2612 = _2334;
                float _2613 = _2336;
                float _2614 = _2338;
                float _2615 = _2340;
                uint _2616 = _2347;
                uint _2625;
                bool _2626;
                for (;;)
                {
                    _2625 = texelFetch(g_lightClassification, int((((_2223 << 5u) + (_2209 << 9u)) + (_2616 << 2u)) >> 2u)).x;
                    _2626 = _2625 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2626)
                    {
                        frontier_phi_77_pred = _2615;
                        frontier_phi_77_pred_1 = _2614;
                        frontier_phi_77_pred_2 = _2613;
                        frontier_phi_77_pred_3 = _2612;
                        frontier_phi_77_pred_4 = _2611;
                        frontier_phi_77_pred_5 = _2610;
                    }
                    else
                    {
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _2832 = _2610;
                        float _2833 = _2611;
                        float _2834 = _2612;
                        float _2835 = _2613;
                        float _2836 = _2614;
                        float _2837 = _2615;
                        uint _2838 = _2625;
                        uint _2839;
                        vec4 _2864;
                        float _2865;
                        vec4 _2880;
                        vec3 _2892;
                        vec4 _2908;
                        vec4 _2924;
                        float _2971;
                        bool _2972;
                        for (;;)
                        {
                            uint _2849 = ((_2616 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2838));
                            _2839 = (_2838 + 4294967295u) & _2838;
                            uint _2851 = _2849 * 40u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            _2865 = _2864.w;
                            uint _2867 = (_2849 * 40u) + 4u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2882 = (_2849 * 40u) + 8u;
                            _2892 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x));
                            uint _2895 = (_2849 * 40u) + 16u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2911 = (_2849 * 40u) + 20u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2927 = (_2849 * 40u) + 24u;
                            vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2946 = (_2849 * 40u) + 28u;
                            vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            _2971 = fma(_2185, _2959.z, fma(_2184, _2959.y, _2959.x * _2183)) + _2959.w;
                            _2972 = !((fma(_2185, _2940.z, fma(_2184, _2940.y, _2940.x * _2183)) + _2940.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2972)
                            {
                                float _2999 = _2864.x - _2183;
                                float _3000 = _2864.y - _2184;
                                float _3001 = _2864.z - _2185;
                                float _3002 = dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001));
                                float _3005 = inversesqrt(_3002);
                                float _3006 = _3005 * _2999;
                                float _3007 = _3005 * _3000;
                                float _3008 = _3005 * _3001;
                                float _3012 = 1.0 - (_3002 / (_2865 * _2865));
                                float _4095 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3013 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3017 = sqrt(_3002) * _2880.w;
                                float _3019 = 1.39999997615814208984375 / (_3017 + 1.39999997615814208984375);
                                float _3020 = _3019 * _3019;
                                float _3023 = ((1.0 - _3020) * dot(vec3(_3006, _3007, _3008), vec3(_449, _452, _455))) + _3020;
                                float _3026 = _3017 * _3017;
                                float _3030 = (fma(_2185, _2908.z, fma(_2184, _2908.y, _2908.x * _2183)) + _2908.w) / _2971;
                                float _3031 = (fma(_2185, _2924.z, fma(_2184, _2924.y, _2924.x * _2183)) + _2924.w) / _2971;
                                float _3035 = 1.0 - dot(vec2(_3030, _3031), vec2(_3030, _3031));
                                float _4111 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3036 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3037 = _3036 * (((isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * _3013) / ((_3026 * 0.699999988079071044921875) + 1.0));
                                float _3049 = exp2(log2(1.0 / ((_3026 * 3.5) + 5.0)) * 0.25);
                                float _3050 = 1.0 - _510;
                                float _3057 = sqrt(1.0 - ((1.0 - (_3050 * _3050)) * (1.0 - (_3049 * _3049))));
                                float _3058 = _3057 * _3057;
                                float _3059 = _3058 * _3058;
                                float _3060 = _3006 - _2476;
                                float _3061 = _3007 - _2477;
                                float _3062 = _3008 - _2478;
                                float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                                float _3070 = dot(vec3(_449, _452, _455), vec3((-0.0) - _2476, (-0.0) - _2477, (-0.0) - _2478));
                                float _4122 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3073 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                                float _3074 = dot(vec3(_449, _452, _455), vec3(_3066 * _3060, _3066 * _3061, _3066 * _3062));
                                float _4133 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3077 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                                float _3081 = ((_3077 * _3077) * (_3059 + (-1.0))) + 1.0;
                                float _3082 = _3019 * _3058;
                                float _3083 = _3082 * _3082;
                                float _3089 = ((1.0 - _3083) * dot(vec3(_449, _452, _455), vec3(_3006, _3007, _3008))) + _3083;
                                float _4144 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                                float _3091 = 1.0 - _3058;
                                float _3101 = (0.5 / (((_3090 * ((_3073 * _3091) + _3058)) + 9.9999999392252902907785028219223e-09) + (((_3090 * _3091) + _3058) * _3073))) * _3090;
                                float _4155 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3111 = (_3036 * _3013) * (((_3059 * 3.1415927410125732421875) * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) / ((_3081 * _3081) * ((_3026 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3037 * _2880.y;
                                frontier_phi_83_pred_1 = _3037 * _2880.x;
                                frontier_phi_83_pred_2 = _3111 * _2892.z;
                                frontier_phi_83_pred_3 = _3111 * _2892.y;
                                frontier_phi_83_pred_4 = _3111 * _2892.x;
                                frontier_phi_83_pred_5 = _3037 * _2880.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3119 = frontier_phi_83_pred;
                            _3118 = frontier_phi_83_pred_1;
                            _3117 = frontier_phi_83_pred_2;
                            _3116 = frontier_phi_83_pred_3;
                            _3115 = frontier_phi_83_pred_4;
                            _3120 = frontier_phi_83_pred_5;
                            _2822 = _3118 + _2835;
                            _2823 = _3119 + _2836;
                            _2824 = _3120 + _2837;
                            _2819 = _3115 + _2832;
                            _2820 = _3116 + _2833;
                            _2821 = _3117 + _2834;
                            if (_2839 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2839;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2824;
                        frontier_phi_77_pred_1 = _2823;
                        frontier_phi_77_pred_2 = _2822;
                        frontier_phi_77_pred_3 = _2821;
                        frontier_phi_77_pred_4 = _2820;
                        frontier_phi_77_pred_5 = _2819;
                    }
                    _2461 = frontier_phi_77_pred;
                    _2459 = frontier_phi_77_pred_1;
                    _2457 = frontier_phi_77_pred_2;
                    _2455 = frontier_phi_77_pred_3;
                    _2453 = frontier_phi_77_pred_4;
                    _2451 = frontier_phi_77_pred_5;
                    uint _2617 = _2616 + 1u;
                    if (_2617 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2610 = _2451;
                        _2611 = _2453;
                        _2612 = _2455;
                        _2613 = _2457;
                        _2614 = _2459;
                        _2615 = _2461;
                        _2616 = _2617;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2455;
                frontier_phi_58_59_ladder_1 = _2461;
                frontier_phi_58_59_ladder_2 = _2459;
                frontier_phi_58_59_ladder_3 = _2457;
                frontier_phi_58_59_ladder_4 = _2453;
                frontier_phi_58_59_ladder_5 = _2451;
            }
            else
            {
                frontier_phi_58_59_ladder = _2334;
                frontier_phi_58_59_ladder_1 = _2340;
                frontier_phi_58_59_ladder_2 = _2338;
                frontier_phi_58_59_ladder_3 = _2336;
                frontier_phi_58_59_ladder_4 = _2332;
                frontier_phi_58_59_ladder_5 = _2330;
            }
            _2450 = frontier_phi_58_59_ladder_5;
            _2452 = frontier_phi_58_59_ladder_4;
            _2454 = frontier_phi_58_59_ladder;
            _2456 = frontier_phi_58_59_ladder_3;
            _2458 = frontier_phi_58_59_ladder_2;
            _2460 = frontier_phi_58_59_ladder_1;
        }
        float _2465 = isnan(1.0) ? _494 : (isnan(_494) ? 1.0 : min(_494, 1.0));
        _2242 = (_2465 * _2456) + _1697;
        _2244 = (_2465 * _2458) + _1699;
        _2246 = (_2465 * _2460) + _1701;
        _2248 = ((_2450 * 0.039999999105930328369140625) * _2465) + _2027;
        _2250 = ((_2452 * 0.039999999105930328369140625) * _2465) + _2029;
        _2252 = ((_2454 * 0.039999999105930328369140625) * _2465) + _2031;
    }
    else
    {
        _2242 = _1697;
        _2244 = _1699;
        _2246 = _1701;
        _2248 = _2027;
        _2250 = _2029;
        _2252 = _2031;
    }
    float _4171 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _4182 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4193 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _2269 = ((isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2242 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _494))) + ((_2248 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1331)) * cbPerFrame._m0[3u].x);
    float _2270 = ((isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2244 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _494))) + ((_2250 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1331)) * cbPerFrame._m0[3u].x);
    float _2271 = ((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_2246 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _494))) + ((_2252 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1331)) * cbPerFrame._m0[3u].x);
    uint _2272 = _468 + 6u;
    float _2280 = _428 / cbSceneParam._m0[86u].x;
    float _2281 = _429 / cbSceneParam._m0[86u].y;
    vec4 _2295 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2280, _2281, (log2((isnan(cbSceneParam._m0[77u].w) ? _354 : (isnan(_354) ? cbSceneParam._m0[77u].w : min(_354, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2297 = _2295.x;
    float _2298 = _2295.y;
    float _2299 = _2295.z;
    float _2300 = _2295.w;
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    if (_354 > cbSceneParam._m0[78u].w)
    {
        float _2355 = isnan(_354) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _354 : min(cbSceneParam._m0[80u].w, _354));
        float _2356 = _2355 / _354;
        float _2367 = _2356 * _405;
        float _2368 = _406 * _2356;
        float _2369 = (-0.0) - _2368;
        float _2370 = _2356 * _407;
        float _2372 = (cbSceneParam._m0[77u].w * _2369) / _2355;
        float _2373 = _2372 + cbSceneParam._m0[79u].w;
        float _2374 = cbSceneParam._m0[79u].w - _2368;
        float _2380 = sqrt(((_2367 * _2367) + (_2368 * _2368)) + (_2370 * _2370));
        float _2383 = (1.0 - (cbSceneParam._m0[77u].w / _2355)) * _2380;
        float _2388 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2390 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2567;
        if (abs((_2369 - _2372) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2567 = ((((_2373 > 0.0) ? exp2(_2388 * _2373) : (2.0 - exp2(_2390 * _2373))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2383;
        }
        else
        {
            float _2511 = 1.0 / cbSceneParam._m0[80u].x;
            float _2512 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : max(_2373, _2374));
            float _2513 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : min(_2373, _2374));
            float _2522 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : min(_2512, 0.0));
            float _2523 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : min(_2513, 0.0));
            _2567 = ((abs(_2380 / _2369) * cbSceneParam._m0[80u].y) * ((((_2522 - _2523) * 2.0) - ((exp2(_2388 * (isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0)))) - exp2(_2388 * (isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0))))) * _2511)) - ((exp2(_2390 * _2522) - exp2(_2390 * _2523)) * _2511))) + (_2383 * cbSceneParam._m0[80u].z);
        }
        vec4 _2569 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2280, _2281, 1.0), 0.0);
        float _2578 = exp2((_2567 * (-1.44269502162933349609375)) * (1.0 - _2569.w));
        float _2579 = log2(_2578);
        float _2595 = log2(_2300);
        _2392 = (exp2(_2595 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2579 * cbSceneParam._m0[78u].x)) * _2569.x) / cbSceneParam._m0[78u].x)) + _2297;
        _2394 = (exp2(_2595 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2579 * cbSceneParam._m0[78u].y)) * _2569.y) / cbSceneParam._m0[78u].y)) + _2298;
        _2396 = (exp2(_2595 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2579 * cbSceneParam._m0[78u].z)) * _2569.z) / cbSceneParam._m0[78u].z)) + _2299;
        _2398 = _2578 * _2300;
    }
    else
    {
        _2392 = _2297;
        _2394 = _2298;
        _2396 = _2299;
        _2398 = _2300;
    }
    bool _2605;
    vec4 _2408;
    vec4 _2430;
    float _2432;
    float _2436;
    float _2437;
    float _2438;
    float _2439;
    bool _2449;
    for (;;)
    {
        _2408 = cbMatDynParam._m0[0u];
        float _2410 = roundEven(_2408.y);
        bool _2411 = _2410 == 3.0;
        float _2412 = log2(_2398);
        float _2419 = exp2(_2412 * cbSceneParam._m0[78u].x) * _2269;
        float _2420 = exp2(_2412 * cbSceneParam._m0[78u].y) * _2270;
        float _2421 = exp2(_2412 * cbSceneParam._m0[78u].z) * _2271;
        float _2428 = _417 + (-0.5);
        _2430 = cbMtdParam._m0[1u];
        _2432 = _2430.y * _2428;
        float _2435 = (_2410 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2436 = _2435 * (_2411 ? _2419 : (_2419 + (cbSceneParam._m0[72u].w * _2392)));
        _2437 = _2435 * (_2411 ? _2420 : (_2420 + (cbSceneParam._m0[72u].w * _2394)));
        _2438 = _2435 * (_2411 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2396)));
        _2439 = _2428 * 0.999000012874603271484375;
        _2449 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2449)
        {
            if ((cbInstanceData._m0[_468 + 7u].x + _2439) < 0.5)
            {
                _2605 = true;
                break;
            }
        }
        uint _2546 = _470 + uint(_2408.w);
        if ((cbInstanceData._m0[_2546].w < 1.0) && ((cbInstanceData._m0[_2546].w + _2439) < 0.5))
        {
            _2605 = true;
            break;
        }
        if ((_2432 + _292) < _2430.x)
        {
            _2605 = true;
            break;
        }
        _2605 = false;
        break;
    }
    float _2810;
    if (_2605)
    {
        discard_state = true;
        _2810 = 0.0;
    }
    else
    {
        _2810 = cbInstanceData._m0[_2272].w;
    }
    SV_Target.x = _2436;
    SV_Target.y = _2437;
    SV_Target.z = _2438;
    SV_Target.w = _2810;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2272].w;
    discard_exit();
}


