#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _928;
float _3318;
float _3319;
float _3320;
float _3321;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _229 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _229.x * cbMtdParam._m0[9u].x;
    float _237 = _229.y * cbMtdParam._m0[9u].y;
    float _238 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _253 = _251.x;
    float _277 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _253)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _253))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3330 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _282 = gl_FragCoord.x * 0.125;
    float _284 = gl_FragCoord.y * 0.125;
    float _294 = float(((_229.w * TEXCOORD_1.z) * (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_282, _284)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _306 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _308 = _306.x;
    vec4 _320 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _324 = _320.z;
    float _328 = (_320.x * 2.0) + (-1.0);
    float _330 = (_320.y * 2.0) + (-1.0);
    float _331 = dot(vec2(_328, _330), vec2(_328, _330));
    float _3341 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))));
    float _339 = fma(_336, _199 * NORMAL.x, fma(_330, _206 * TANGENT.x, (_192 * _184) * _328));
    float _342 = fma(_336, _199 * NORMAL.y, fma(_330, _206 * TANGENT.y, (_192 * _185) * _328));
    float _345 = fma(_336, _199 * NORMAL.z, fma(_330, _206 * TANGENT.z, (_192 * _186) * _328));
    float _349 = inversesqrt(dot(vec3(_339, _342, _345), vec3(_339, _342, _345)));
    float _350 = _349 * _339;
    float _351 = _349 * _342;
    float _352 = _349 * _345;
    float _3352 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _353 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _3363 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3374 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3385 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3396 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _357 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _371 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _412 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _422 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _412);
    float _423 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _412);
    float _424 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _412);
    float _428 = inversesqrt(dot(vec3(_422, _423, _424), vec3(_422, _423, _424)));
    float _429 = _422 * _428;
    float _430 = _423 * _428;
    float _431 = _424 * _428;
    vec4 _432 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_282, _284));
    float _434 = _432.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _609 = sqrt(((_422 * _422) + (_423 * _423)) + (_424 * _424));
        float _615 = (cbMatDynParam._m0[5u].x * _609) + cbMatDynParam._m0[5u].y;
        float _3407 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _616 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _620 = (cbMatDynParam._m0[5u].z * _609) + cbMatDynParam._m0[5u].w;
        float _3418 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) - _616)) + _616) < ((_434 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _445 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _446 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _466 = fma(_352, cbSceneParam._m0[5u].z, fma(_351, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _350));
    float _469 = fma(_352, cbSceneParam._m0[6u].z, fma(_351, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _350));
    float _472 = fma(_352, cbSceneParam._m0[7u].z, fma(_351, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _350));
    uint _485 = uint(roundEven(NORMAL.w)) * 13u;
    uint _487 = _485 + 9u;
    uint _488 = _487 + uint(cbMatDynParam._m0[0u].w);
    float _494 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0)))) * cbInstanceData._m0[_488].x;
    float _495 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * cbInstanceData._m0[_488].y;
    float _496 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) * cbInstanceData._m0[_488].z;
    float _3429 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _497 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _499 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _500 = 1.0 - _357;
    float _501 = _497 * _500;
    float _502 = _498 * _500;
    float _503 = _499 * _500;
    float _508 = (_497 + (-0.039999999105930328369140625)) * _357;
    float _509 = (_498 + (-0.039999999105930328369140625)) * _357;
    float _510 = (_499 + (-0.039999999105930328369140625)) * _357;
    float _511 = _508 + 0.039999999105930328369140625;
    float _513 = _509 + 0.039999999105930328369140625;
    float _514 = _510 + 0.039999999105930328369140625;
    vec4 _523 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _445, cbSceneParam._m0[86u].y * _446));
    float _526 = _523.x * TEXCOORD_1.w;
    float _527 = dot(vec3(_350, _351, _352), vec3(_429, _430, _431));
    float _530 = _527 * 2.0;
    float _534 = (_530 * _350) - _429;
    float _535 = (_530 * _351) - _430;
    float _536 = (_530 * _352) - _431;
    float _540 = abs(dot(vec3(_429, _430, _431), vec3(_350, _351, _352)));
    float _3462 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _542 = sqrt(_353);
    float _555 = exp2((_542 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_542 * 3.0));
    float _561 = (1.0 - _555) * ((_542 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _562 = _555 * _542;
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _927;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _652 = fma(_598, cbModelParam._m0[26u].z, fma(_594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _590));
        float _656 = fma(_598, cbModelParam._m0[27u].z, fma(_594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _590));
        float _660 = fma(_598, cbModelParam._m0[28u].z, fma(_594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _590));
        float _685 = _590 + _350;
        float _686 = _594 + _351;
        float _687 = _598 + _352;
        float _697 = fma(_687, cbModelParam._m0[26u].z, fma(_686, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _685)) - _652;
        float _698 = fma(_687, cbModelParam._m0[27u].z, fma(_686, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _685)) - _656;
        float _699 = fma(_687, cbModelParam._m0[28u].z, fma(_686, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _685)) - _660;
        float _703 = inversesqrt(dot(vec3(_697, _698, _699), vec3(_697, _698, _699)));
        float _716 = ((_703 * _697) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_652 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _717 = ((_703 * _698) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_656 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _718 = ((_703 * _699) / cbModelParam._m0[34u].z) + ((((((_660 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        float _755 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_721.x + (-0.5));
        float _757 = _755 * (_721.y + (-0.5));
        float _758 = _755 * (_721.z + (-0.5));
        float _765 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_728.x + (-0.5));
        float _767 = _765 * (_728.y + (-0.5));
        float _768 = _765 * (_728.z + (-0.5));
        float _775 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_735.x + (-0.5));
        float _777 = _775 * (_735.y + (-0.5));
        float _778 = _775 * (_735.z + (-0.5));
        float _785 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_742.x + (-0.5));
        float _787 = _785 * (_742.y + (-0.5));
        float _788 = _785 * (_742.z + (-0.5));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = _756 * 0.5;
        float _793 = _766 * 0.5;
        float _794 = _776 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _809 = (dot(vec3(_350, _351, _352), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _819 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3510 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_821 + 1.0))) + _826) * _789;
        float _836 = _757 * 0.5;
        float _837 = _767 * 0.5;
        float _838 = _777 * 0.5;
        float _839 = dot(vec3(_836, _837, _838), vec3(_836, _837, _838));
        float _844 = (_839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_839);
        float _852 = (dot(vec3(_350, _351, _352), vec3(_844 * _836, _844 * _837, _844 * _838)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _861 = sqrt(((_837 * _837) + (_836 * _836)) + (_838 * _838)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _863 = _862 * 2.0;
        float _867 = (1.0 - _862) / (_862 + 1.0);
        float _3543 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _877 = ((((1.0 - _868) * (_863 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_863 + 1.0))) + _868) * _790;
        float _878 = _758 * 0.5;
        float _879 = _768 * 0.5;
        float _880 = _778 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _894 = (dot(vec3(_350, _351, _352), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _903 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3576 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_905 + 1.0))) + _910) * _791;
        _927 = _758;
        _929 = _757;
        _930 = _756;
        _931 = _768;
        _932 = _767;
        _933 = _766;
        _934 = _778;
        _935 = _777;
        _936 = _776;
        _937 = _791;
        _938 = _790;
        _939 = _789;
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0)));
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
    }
    else
    {
        _927 = _928;
        _929 = _928;
        _930 = _928;
        _931 = _928;
        _932 = _928;
        _933 = _928;
        _934 = _928;
        _935 = _928;
        _936 = _928;
        _937 = _928;
        _938 = _928;
        _939 = _928;
        _940 = 0.0;
        _941 = 0.0;
        _942 = 0.0;
    }
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _971 = fma(_598, cbModelParam._m0[30u].z, fma(_594, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _590));
        float _975 = fma(_598, cbModelParam._m0[31u].z, fma(_594, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _590));
        float _979 = fma(_598, cbModelParam._m0[32u].z, fma(_594, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _590));
        float _1002 = _590 + _350;
        float _1003 = _594 + _351;
        float _1004 = _598 + _352;
        float _1014 = fma(_1004, cbModelParam._m0[30u].z, fma(_1003, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1002)) - _971;
        float _1015 = fma(_1004, cbModelParam._m0[31u].z, fma(_1003, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1002)) - _975;
        float _1016 = fma(_1004, cbModelParam._m0[32u].z, fma(_1003, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1002)) - _979;
        float _1020 = inversesqrt(dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016)));
        float _1033 = ((_1020 * _1014) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_971 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1020 * _1015) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_975 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1020 * _1016) / cbModelParam._m0[35u].z) + ((((((_979 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        float _1070 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1037.x + (-0.5));
        float _1072 = _1070 * (_1037.y + (-0.5));
        float _1073 = _1070 * (_1037.z + (-0.5));
        float _1080 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1044.x + (-0.5));
        float _1082 = _1080 * (_1044.y + (-0.5));
        float _1083 = _1080 * (_1044.z + (-0.5));
        float _1090 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1051.x + (-0.5));
        float _1092 = _1090 * (_1051.y + (-0.5));
        float _1093 = _1090 * (_1051.z + (-0.5));
        float _1100 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1058.x + (-0.5));
        float _1102 = _1100 * (_1058.y + (-0.5));
        float _1103 = _1100 * (_1058.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_350, _351, _352), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3639 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_1134 + 1.0))) + _1139) * _1104;
        float _1149 = _1072 * 0.5;
        float _1150 = _1082 * 0.5;
        float _1151 = _1092 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_350, _351, _352), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3672 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1176 + 1.0))) + _1181) * _1105;
        float _1191 = _1073 * 0.5;
        float _1192 = _1083 * 0.5;
        float _1193 = _1093 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_350, _351, _352), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3705 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1218 + 1.0))) + _1223) * _1106;
        _1240 = _1073;
        _1241 = _1072;
        _1242 = _1071;
        _1243 = _1083;
        _1244 = _1082;
        _1245 = _1081;
        _1246 = _1093;
        _1247 = _1092;
        _1248 = _1091;
        _1249 = _1106;
        _1250 = _1105;
        _1251 = _1104;
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _928;
        _1241 = _928;
        _1242 = _928;
        _1243 = _928;
        _1244 = _928;
        _1245 = _928;
        _1246 = _928;
        _1247 = _928;
        _1248 = _928;
        _1249 = _928;
        _1250 = _928;
        _1251 = _928;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _940)) + _940;
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _941)) + _941;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _942)) + _942;
    float _1287 = fma(_1266, cbSceneParam._m0[89u].z, fma(_1265, cbSceneParam._m0[89u].y, _1264 * cbSceneParam._m0[89u].x));
    float _1290 = fma(_1266, cbSceneParam._m0[90u].z, fma(_1265, cbSceneParam._m0[90u].y, _1264 * cbSceneParam._m0[90u].x));
    float _1293 = fma(_1266, cbSceneParam._m0[91u].z, fma(_1265, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1264));
    float _1308 = _534 * 0.5;
    float _1309 = _535 * 0.5;
    float _1310 = _536 * 0.5;
    float _1311 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1314 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1317 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1351;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1324 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_927, _931, _934, _937));
        float _1328 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_929, _932, _935, _938));
        float _1332 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_930, _933, _936, _939));
        float _1339 = dot(vec4(cbModelParam._m0[39u]), vec4(_1308, _1309, _1310, 1.0));
        _1351 = dot(vec3(isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1339) ? 0.0 : (isnan(0.0) ? _1339 : max(0.0, _1339))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1351 = 1.0;
    }
    float _1362;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1353 = dot(vec4(cbModelParam._m0[40u]), vec4(_1308, _1309, _1310, 1.0));
        _1362 = dot(vec3(isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1353) ? 0.0 : (isnan(0.0) ? _1353 : max(0.0, _1353))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1362 = 1.0;
    }
    float _1366 = (_1362 * cbModelParam._m0[1u].x) + (_1351 * (1.0 - cbModelParam._m0[1u].x));
    float _1376 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _353);
    float _1377 = isnan(_1376) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1376 : min(cbModelParam._m0[25u].z, _1376));
    float _1459;
    float _1461;
    float _1463;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1426 = fma(_598, cbModelParam._m0[13u].z, fma(_594, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _590)) + cbModelParam._m0[13u].w;
        float _1430 = fma(_598, cbModelParam._m0[14u].z, fma(_594, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _590)) + cbModelParam._m0[14u].w;
        float _1434 = fma(_598, cbModelParam._m0[15u].z, fma(_594, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _590)) + cbModelParam._m0[15u].w;
        float _1437 = fma(_536, cbModelParam._m0[13u].z, fma(_535, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _534));
        float _1440 = fma(_536, cbModelParam._m0[14u].z, fma(_535, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _534));
        float _1443 = fma(_536, cbModelParam._m0[15u].z, fma(_535, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _534));
        float _1471;
        if (_1437 > 0.0)
        {
            _1471 = abs((1.0 - _1426) / _1437);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1426 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1471 = frontier_phi_17_15_ladder;
        }
        float _1679;
        if (_1440 > 0.0)
        {
            _1679 = abs((1.0 - _1430) / _1440);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1430 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1679 = frontier_phi_26_22_ladder;
        }
        float _1933;
        if (_1443 > 0.0)
        {
            _1933 = abs((1.0 - _1434) / _1443);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1434 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1933 = frontier_phi_38_33_ladder;
        }
        float _1935 = isnan(_1679) ? _1471 : (isnan(_1471) ? _1679 : min(_1471, _1679));
        float _1936 = isnan(_1933) ? _1935 : (isnan(_1935) ? _1933 : min(_1935, _1933));
        float _1940 = (_1936 * _1437) + _1426;
        float _1941 = (_1936 * _1440) + _1430;
        float _1942 = (_1936 * _1443) + _1434;
        float _1943 = _1936 * 9.9999997473787516355514526367188e-05;
        float _1945 = (-1.0) - _1943;
        float _1947 = _1943 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1942 > _1947) || ((_1942 < _1945) || ((_1941 > _1947) || ((_1941 < _1945) || ((_1940 < _1945) || (_1940 > _1947))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2070 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1942, cbModelParam._m0[9u].z, fma(_1941, cbModelParam._m0[9u].y, _1940 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1942, cbModelParam._m0[10u].z, fma(_1941, cbModelParam._m0[10u].y, _1940 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1942, cbModelParam._m0[11u].z, fma(_1941, cbModelParam._m0[11u].y, _1940 * cbModelParam._m0[11u].x))), _1377);
            frontier_phi_16_38_ladder = _2070.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2070.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2070.x * cbModelParam._m0[1u].y;
        }
        _1459 = frontier_phi_16_38_ladder_2;
        _1461 = frontier_phi_16_38_ladder_1;
        _1463 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_534, _535, _536), _1377);
        _1459 = _1447.x * cbModelParam._m0[1u].y;
        _1461 = _1447.y * cbModelParam._m0[1u].y;
        _1463 = _1447.z * cbModelParam._m0[1u].y;
    }
    float _1467 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _353);
    float _1468 = isnan(_1467) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1467 : min(cbModelParam._m0[25u].w, _1467));
    float _1561;
    float _1563;
    float _1565;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1525 = fma(_598, cbModelParam._m0[21u].z, fma(_594, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _590)) + cbModelParam._m0[21u].w;
        float _1529 = fma(_598, cbModelParam._m0[22u].z, fma(_594, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _590)) + cbModelParam._m0[22u].w;
        float _1533 = fma(_598, cbModelParam._m0[23u].z, fma(_594, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _590)) + cbModelParam._m0[23u].w;
        float _1536 = fma(_536, cbModelParam._m0[21u].z, fma(_535, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _534));
        float _1539 = fma(_536, cbModelParam._m0[22u].z, fma(_535, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _534));
        float _1542 = fma(_536, cbModelParam._m0[23u].z, fma(_535, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _534));
        float _1684;
        if (_1536 > 0.0)
        {
            _1684 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1684 = frontier_phi_28_24_ladder;
        }
        float _1960;
        if (_1539 > 0.0)
        {
            _1960 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1960 = frontier_phi_40_35_ladder;
        }
        float _2173;
        if (_1542 > 0.0)
        {
            _2173 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2173 = frontier_phi_49_46_ladder;
        }
        float _2175 = isnan(_1960) ? _1684 : (isnan(_1684) ? _1960 : min(_1684, _1960));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1536) + _1525;
        float _2181 = (_2176 * _1539) + _1529;
        float _2182 = (_2176 * _1542) + _1533;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2184 = (-1.0) - _2183;
        float _2186 = _2183 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2182 > _2186) || ((_2182 < _2184) || ((_2181 > _2186) || ((_2181 < _2184) || ((_2180 < _2184) || (_2180 > _2186))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2381 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2182, cbModelParam._m0[17u].z, fma(_2181, cbModelParam._m0[17u].y, _2180 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2182, cbModelParam._m0[18u].z, fma(_2181, cbModelParam._m0[18u].y, _2180 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2182, cbModelParam._m0[19u].z, fma(_2181, cbModelParam._m0[19u].y, _2180 * cbModelParam._m0[19u].x))), _1468);
            frontier_phi_25_49_ladder = _2381.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2381.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2381.x * cbModelParam._m0[1u].z;
        }
        _1561 = frontier_phi_25_49_ladder_2;
        _1563 = frontier_phi_25_49_ladder_1;
        _1565 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1545 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_534, _535, _536), _1468);
        _1561 = _1545.x * cbModelParam._m0[1u].z;
        _1563 = _1545.y * cbModelParam._m0[1u].z;
        _1565 = _1545.z * cbModelParam._m0[1u].z;
    }
    float _1578 = (((_561 * _511) + _562) * _526) * ((cbModelParam._m0[1u].w * (_1561 - _1459)) + _1459);
    float _1580 = (((_561 * _513) + _562) * _526) * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1582 = (((_561 * _514) + _562) * _526) * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1585 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, _1578 * cbSceneParam._m0[91u].x));
    uvec4 _1601 = floatBitsToUint(cbInstanceData._m0[_485 + 5u]);
    uint _1603 = _1601.x * 14u;
    uint _1604 = _1603 + 13u;
    float _1611 = _526 + (-1.0);
    float _1616 = (cbLight._m0[_1604].x * _1611) + 1.0;
    float _1617 = (cbLight._m0[_1604].y * _1611) + 1.0;
    float _1618 = (cbLight._m0[_1604].z * _1611) + 1.0;
    float _1619 = (cbLight._m0[_1604].w * _1611) + 1.0;
    uint _1620 = _1603 + 5u;
    float _1626 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
    uint _1630 = _1603 + 4u;
    float _1637 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
    uint _1641 = _1603 | 1u;
    float _1652 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_350, _351, _352));
    float _1655 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_350, _351, _352));
    float _3841 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
    float _3852 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1660 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.3183098733425140380859375;
    float _1662 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.3183098733425140380859375;
    float _1669 = ((cbLight._m0[_1620].x * _1626) * _1662) + ((cbLight._m0[_1630].x * _1637) * _1660);
    float _1670 = ((_1626 * cbLight._m0[_1620].y) * _1662) + ((_1637 * cbLight._m0[_1630].y) * _1660);
    float _1671 = ((_1626 * cbLight._m0[_1620].z) * _1662) + ((_1637 * cbLight._m0[_1630].z) * _1660);
    uvec4 _1676 = floatBitsToUint(cbLight._m0[_1603 + 12u]);
    bool _1678 = _1676.x == 0u;
    float _1689;
    float _1691;
    float _1693;
    if (_1678)
    {
        _1689 = _1669;
        _1691 = _1670;
        _1693 = _1671;
    }
    else
    {
        uint _1697 = _1603 + 6u;
        float _1713 = (dot(vec3(cbLight._m0[_1603 + 2u].xyz), vec3(_350, _351, _352)) * 0.5) + 0.5;
        float _1714 = _1713 * _1713;
        float _3863 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1716 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
        _1689 = (((cbLight._m0[_1697].x * 0.3183098733425140380859375) * _1715) * _1716) + _1669;
        _1691 = (((cbLight._m0[_1697].y * 0.3183098733425140380859375) * _1715) * _1716) + _1670;
        _1693 = (((cbLight._m0[_1697].z * 0.3183098733425140380859375) * _1715) * _1716) + _1671;
    }
    bool _1696 = _1676.y == 0u;
    float _1734;
    float _1736;
    float _1738;
    if (_1696)
    {
        _1734 = _1689;
        _1736 = _1691;
        _1738 = _1693;
    }
    else
    {
        uint _1904 = _1603 + 7u;
        float _1920 = (dot(vec3(cbLight._m0[_1603 + 3u].xyz), vec3(_350, _351, _352)) * 0.5) + 0.5;
        float _1921 = _1920 * _1920;
        float _3879 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1923 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
        _1734 = (((cbLight._m0[_1904].x * 0.3183098733425140380859375) * _1922) * _1923) + _1689;
        _1736 = (((cbLight._m0[_1904].y * 0.3183098733425140380859375) * _1922) * _1923) + _1691;
        _1738 = (((cbLight._m0[_1904].z * 0.3183098733425140380859375) * _1922) * _1923) + _1693;
    }
    uint _1741 = _1603 + 8u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1603].w)) * _353) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1603].x + _429;
    float _1757 = cbLight._m0[_1603].y + _430;
    float _1758 = cbLight._m0[_1603].z + _431;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_350, _351, _352), vec3(cbLight._m0[_1603].xyz));
    float _3895 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _1770 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _1771 = dot(vec3(_350, _351, _352), vec3(_1763, _1764, _1765));
    float _3917 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _1775 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_1763, _1764, _1765));
    float _3928 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1779 = _1755 * _1755;
    float _1783 = ((_1774 * _1774) * (_1779 + (-1.0))) + 1.0;
    float _1791 = exp2(log2(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * 5.0);
    float _1792 = 0.959999978542327880859375 - _508;
    float _1794 = 0.959999978542327880859375 - _509;
    float _1795 = 0.959999978542327880859375 - _510;
    float _1802 = 1.0 - _1755;
    float _1813 = (0.5 / (((_1770 * ((_1769 * _1802) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1802) + _1755) * _1769))) * _1769;
    float _3939 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1815 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1779 / ((_1783 * _1783) * 3.141590118408203125));
    uint _1826 = _1603 + 9u;
    float _1837 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1641].w)) * _353) * 0.949999988079071044921875);
    float _1838 = _1837 * _1837;
    float _1839 = cbLight._m0[_1641].x + _429;
    float _1840 = cbLight._m0[_1641].y + _430;
    float _1841 = cbLight._m0[_1641].z + _431;
    float _1845 = inversesqrt(dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841)));
    float _1846 = _1845 * _1839;
    float _1847 = _1845 * _1840;
    float _1848 = _1845 * _1841;
    float _1849 = dot(vec3(_350, _351, _352), vec3(cbLight._m0[_1641].xyz));
    float _3950 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1852 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1853 = dot(vec3(_350, _351, _352), vec3(_1846, _1847, _1848));
    float _3961 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1857 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_1846, _1847, _1848));
    float _3972 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1861 = _1838 * _1838;
    float _1865 = ((_1856 * _1856) * (_1861 + (-1.0))) + 1.0;
    float _1872 = exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0);
    float _1879 = 1.0 - _1838;
    float _1889 = (0.5 / (((_1770 * ((_1852 * _1879) + _1838)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1879) + _1838) * _1852))) * _1852;
    float _3983 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1861 / ((_1865 * _1865) * 3.141590118408203125));
    float _1901 = (((((_1872 * _1792) + _511) * cbLight._m0[_1826].x) * _1891) * _1626) + (((((_1791 * _1792) + _511) * cbLight._m0[_1741].x) * _1815) * _1637);
    float _1902 = (((((_1872 * _1794) + _513) * cbLight._m0[_1826].y) * _1891) * _1626) + (((((_1791 * _1794) + _513) * cbLight._m0[_1741].y) * _1815) * _1637);
    float _1903 = (((((_1872 * _1795) + _514) * cbLight._m0[_1826].z) * _1891) * _1626) + (((((_1791 * _1795) + _514) * cbLight._m0[_1741].z) * _1815) * _1637);
    float _1965;
    float _1967;
    float _1969;
    if (_1678)
    {
        _1965 = _1901;
        _1967 = _1902;
        _1969 = _1903;
    }
    else
    {
        uint _1971 = _1603 + 2u;
        uint _1975 = _1603 + 10u;
        float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _353) * 0.949999988079071044921875);
        float _1990 = _1989 * _1989;
        float _1991 = cbLight._m0[_1971].x + _429;
        float _1992 = cbLight._m0[_1971].y + _430;
        float _1993 = cbLight._m0[_1971].z + _431;
        float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
        float _1998 = _1997 * _1991;
        float _1999 = _1997 * _1992;
        float _2000 = _1997 * _1993;
        float _2001 = dot(vec3(_350, _351, _352), vec3(cbLight._m0[_1971].xyz));
        float _3994 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2004 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2005 = dot(vec3(_350, _351, _352), vec3(_1998, _1999, _2000));
        float _4005 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2008 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _2009 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_1998, _1999, _2000));
        float _4016 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2013 = _1990 * _1990;
        float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
        float _2024 = exp2(log2(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * 5.0);
        float _2031 = 1.0 - _1990;
        float _2041 = (0.5 / (((_1770 * ((_2004 * _2031) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2031) + _1990) * _2004))) * _2004;
        float _4027 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2043 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
        float _2044 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
        _1965 = (((((_2024 * _1792) + _511) * cbLight._m0[_1975].x) * _2043) * _2044) + _1901;
        _1967 = (((((_2024 * _1794) + _513) * cbLight._m0[_1975].y) * _2043) * _2044) + _1902;
        _1969 = (((((_2024 * _1795) + _514) * cbLight._m0[_1975].z) * _2043) * _2044) + _1903;
    }
    float _2079;
    float _2081;
    float _2083;
    if (_1696)
    {
        _2079 = _1965;
        _2081 = _1967;
        _2083 = _1969;
    }
    else
    {
        uint _2090 = _1603 + 3u;
        uint _2094 = _1603 + 11u;
        float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _353) * 0.949999988079071044921875);
        float _2109 = _2108 * _2108;
        float _2110 = cbLight._m0[_2090].x + _429;
        float _2111 = cbLight._m0[_2090].y + _430;
        float _2112 = cbLight._m0[_2090].z + _431;
        float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
        float _2117 = _2116 * _2110;
        float _2118 = _2116 * _2111;
        float _2119 = _2116 * _2112;
        float _2120 = dot(vec3(_350, _351, _352), vec3(cbLight._m0[_2090].xyz));
        float _4043 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2124 = dot(vec3(_350, _351, _352), vec3(_2117, _2118, _2119));
        float _4054 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2128 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2117, _2118, _2119));
        float _4065 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2132 = _2109 * _2109;
        float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
        float _2143 = exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0);
        float _2150 = 1.0 - _2109;
        float _2160 = (0.5 / (((_1770 * ((_2123 * _2150) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2150) + _2109) * _2123))) * _2123;
        float _4076 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2162 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
        float _2163 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
        _2079 = (((((_2143 * _1792) + _511) * cbLight._m0[_2094].x) * _2162) * _2163) + _1965;
        _2081 = (((((_2143 * _1794) + _513) * cbLight._m0[_2094].y) * _2162) * _2163) + _1967;
        _2083 = (((((_2143 * _1795) + _514) * cbLight._m0[_2094].z) * _2162) * _2163) + _1969;
    }
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    float _2308;
    if (_1601.y == 0u)
    {
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2238;
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2238;
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2238;
        uvec4 _2253 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2254 = _2253.x;
        uint _2265 = uint((float(_2253.y) * floor(float(uint(cbSceneParam._m0[85u].y * _446) / _2254))) + floor(float(uint(cbSceneParam._m0[85u].x * _445) / _2254)));
        float _2275 = (log2(_2241 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2276 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        uint _2279 = uint(isnan(14.0) ? _2276 : (isnan(_2276) ? 14.0 : min(_2276, 14.0)));
        uvec4 _2284 = texelFetch(g_lightClusterGridBuffer, int(((_2279 << 2u) + (_2265 << 6u)) >> 2u));
        uint _2285 = _2284.x;
        uint _2286 = _2253.z;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        if (((((1u << ((_2286 >> 4u) & 15u)) + 4294967295u) & _2285) == 0u) || ((_2286 & 240u) == 0u))
        {
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
        }
        else
        {
            float _2387;
            float _2389;
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            uint _2544 = 0u;
            uint _2553;
            bool _2554;
            for (;;)
            {
                _2553 = texelFetch(g_lightClassification, int((((_2279 << 5u) + (_2265 << 9u)) + (_2544 << 2u)) >> 2u)).x;
                _2554 = _2553 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2554)
                {
                    frontier_phi_66_pred = _2538;
                    frontier_phi_66_pred_1 = _2543;
                    frontier_phi_66_pred_2 = _2542;
                    frontier_phi_66_pred_3 = _2541;
                    frontier_phi_66_pred_4 = _2540;
                    frontier_phi_66_pred_5 = _2539;
                }
                else
                {
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    uint _2689;
                    _2683 = _2538;
                    _2684 = _2539;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2542;
                    _2688 = _2543;
                    _2689 = _2553;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    for (;;)
                    {
                        uint _2693 = uint(findLSB(_2689)) + (_2544 << 5u);
                        uint _2690 = (_2689 + 4294967295u) & _2689;
                        uint _2695 = _2693 * 48u;
                        vec4 _2709 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2695)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 3u)).x));
                        uint _2715 = (_2693 * 48u) + 4u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 3u)).x));
                        uint _2734 = (_2693 * 48u) + 8u;
                        vec3 _2745 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x));
                        float _2749 = _2709.x - _2239;
                        float _2750 = _2709.y - _2240;
                        float _2751 = _2709.z - _2241;
                        float _2752 = dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751));
                        float _2755 = inversesqrt(_2752);
                        float _2756 = _2755 * _2749;
                        float _2757 = _2755 * _2750;
                        float _2758 = _2755 * _2751;
                        float _2759 = dot(vec3(_466, _469, _472), vec3(_2756, _2757, _2758));
                        float _2764 = 1.0 - (_2752 * _2709.w);
                        float _4102 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2765 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                        float _2766 = sqrt(_2752) * _2728.w;
                        float _2769 = 1.39999997615814208984375 / (_2766 + 1.39999997615814208984375);
                        float _2770 = _2769 * _2769;
                        float _2773 = ((1.0 - _2770) * _2759) + _2770;
                        float _2776 = _2766 * _2766;
                        float _2780 = ((isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0))) * _2765) / ((_2776 * 0.699999988079071044921875) + 1.0);
                        float _2784 = (-0.0) - _2239;
                        float _2785 = (-0.0) - _2240;
                        float _2786 = (-0.0) - _2241;
                        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
                        float _2791 = _2790 * _2784;
                        float _2792 = _2790 * _2785;
                        float _2793 = _2790 * _2786;
                        float _2801 = exp2(log2(1.0 / ((_2776 * 3.5) + 5.0)) * 0.25);
                        float _2802 = 1.0 - _542;
                        float _2809 = sqrt(1.0 - ((1.0 - (_2802 * _2802)) * (1.0 - (_2801 * _2801))));
                        float _2810 = _2809 * _2809;
                        float _2811 = _2810 * _2810;
                        float _2812 = _2791 + _2756;
                        float _2813 = _2792 + _2757;
                        float _2814 = _2793 + _2758;
                        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
                        float _2822 = dot(vec3(_466, _469, _472), vec3(_2791, _2792, _2793));
                        float _4118 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2825 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2826 = dot(vec3(_466, _469, _472), vec3(_2818 * _2812, _2818 * _2813, _2818 * _2814));
                        float _4129 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2829 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2833 = ((_2829 * _2829) * (_2811 + (-1.0))) + 1.0;
                        float _2834 = _2769 * _2810;
                        float _2835 = _2834 * _2834;
                        float _2838 = ((1.0 - _2835) * _2759) + _2835;
                        float _4140 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2839 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2840 = 1.0 - _2810;
                        float _2850 = (0.5 / (((_2839 * ((_2825 * _2840) + _2810)) + 9.9999999392252902907785028219223e-09) + (((_2839 * _2840) + _2810) * _2825))) * _2839;
                        float _4151 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2861 = (((_2811 * 3.1415927410125732421875) * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) / ((_2833 * _2833) * ((_2776 * 2.1991131305694580078125) + 3.141590118408203125))) * _2765;
                        _2613 = (_2780 * _2728.x) + _2686;
                        _2614 = (_2780 * _2728.y) + _2687;
                        _2615 = (_2780 * _2728.z) + _2688;
                        _2610 = (_2861 * _2745.x) + _2683;
                        _2611 = (_2861 * _2745.y) + _2684;
                        _2612 = (_2861 * _2745.z) + _2685;
                        if (_2690 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2683 = _2610;
                            _2684 = _2611;
                            _2685 = _2612;
                            _2686 = _2613;
                            _2687 = _2614;
                            _2688 = _2615;
                            _2689 = _2690;
                        }
                    }
                    frontier_phi_66_pred = _2610;
                    frontier_phi_66_pred_1 = _2615;
                    frontier_phi_66_pred_2 = _2614;
                    frontier_phi_66_pred_3 = _2613;
                    frontier_phi_66_pred_4 = _2612;
                    frontier_phi_66_pred_5 = _2611;
                }
                _2387 = frontier_phi_66_pred;
                _2397 = frontier_phi_66_pred_1;
                _2395 = frontier_phi_66_pred_2;
                _2393 = frontier_phi_66_pred_3;
                _2391 = frontier_phi_66_pred_4;
                _2389 = frontier_phi_66_pred_5;
                uint _2545 = _2544 + 1u;
                if (_2545 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2538 = _2387;
                    _2539 = _2389;
                    _2540 = _2391;
                    _2541 = _2393;
                    _2542 = _2395;
                    _2543 = _2397;
                    _2544 = _2545;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
        }
        uvec4 _2400 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2401 = _2400.z;
        uint _2403 = (_2401 >> 8u) & 15u;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        if (((4294967295u << _2403) & _2285) == 0u)
        {
            _2506 = _2386;
            _2508 = _2388;
            _2510 = _2390;
            _2512 = _2392;
            _2514 = _2394;
            _2516 = _2396;
        }
        else
        {
            float _2531 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
            float _2532 = _2531 * _2239;
            float _2533 = _2531 * _2240;
            float _2534 = _2531 * _2241;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2403 < ((_2401 >> 12u) & 15u))
            {
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2517;
                float _2666 = _2386;
                float _2667 = _2388;
                float _2668 = _2390;
                float _2669 = _2392;
                float _2670 = _2394;
                float _2671 = _2396;
                uint _2672 = _2403;
                uint _2681;
                bool _2682;
                for (;;)
                {
                    _2681 = texelFetch(g_lightClassification, int((((_2279 << 5u) + (_2265 << 9u)) + (_2672 << 2u)) >> 2u)).x;
                    _2682 = _2681 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2682)
                    {
                        frontier_phi_77_pred = _2671;
                        frontier_phi_77_pred_1 = _2670;
                        frontier_phi_77_pred_2 = _2669;
                        frontier_phi_77_pred_3 = _2668;
                        frontier_phi_77_pred_4 = _2667;
                        frontier_phi_77_pred_5 = _2666;
                    }
                    else
                    {
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _2888 = _2666;
                        float _2889 = _2667;
                        float _2890 = _2668;
                        float _2891 = _2669;
                        float _2892 = _2670;
                        float _2893 = _2671;
                        uint _2894 = _2681;
                        uint _2895;
                        vec4 _2920;
                        float _2921;
                        vec4 _2936;
                        vec3 _2948;
                        vec4 _2964;
                        vec4 _2980;
                        float _3027;
                        bool _3028;
                        for (;;)
                        {
                            uint _2905 = ((_2672 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2894));
                            _2895 = (_2894 + 4294967295u) & _2894;
                            uint _2907 = _2905 * 40u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            _2921 = _2920.w;
                            uint _2923 = (_2905 * 40u) + 4u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2938 = (_2905 * 40u) + 8u;
                            _2948 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x));
                            uint _2951 = (_2905 * 40u) + 16u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2967 = (_2905 * 40u) + 20u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2983 = (_2905 * 40u) + 24u;
                            vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _3002 = (_2905 * 40u) + 28u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            _3027 = fma(_2241, _3015.z, fma(_2240, _3015.y, _3015.x * _2239)) + _3015.w;
                            _3028 = !((fma(_2241, _2996.z, fma(_2240, _2996.y, _2996.x * _2239)) + _2996.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3028)
                            {
                                float _3055 = _2920.x - _2239;
                                float _3056 = _2920.y - _2240;
                                float _3057 = _2920.z - _2241;
                                float _3058 = dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057));
                                float _3061 = inversesqrt(_3058);
                                float _3062 = _3061 * _3055;
                                float _3063 = _3061 * _3056;
                                float _3064 = _3061 * _3057;
                                float _3068 = 1.0 - (_3058 / (_2921 * _2921));
                                float _4162 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3069 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                                float _3073 = sqrt(_3058) * _2936.w;
                                float _3075 = 1.39999997615814208984375 / (_3073 + 1.39999997615814208984375);
                                float _3076 = _3075 * _3075;
                                float _3079 = ((1.0 - _3076) * dot(vec3(_3062, _3063, _3064), vec3(_466, _469, _472))) + _3076;
                                float _3082 = _3073 * _3073;
                                float _3086 = (fma(_2241, _2964.z, fma(_2240, _2964.y, _2964.x * _2239)) + _2964.w) / _3027;
                                float _3087 = (fma(_2241, _2980.z, fma(_2240, _2980.y, _2980.x * _2239)) + _2980.w) / _3027;
                                float _3091 = 1.0 - dot(vec2(_3086, _3087), vec2(_3086, _3087));
                                float _4178 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3092 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3093 = _3092 * (((isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))) * _3069) / ((_3082 * 0.699999988079071044921875) + 1.0));
                                float _3105 = exp2(log2(1.0 / ((_3082 * 3.5) + 5.0)) * 0.25);
                                float _3106 = 1.0 - _542;
                                float _3113 = sqrt(1.0 - ((1.0 - (_3106 * _3106)) * (1.0 - (_3105 * _3105))));
                                float _3114 = _3113 * _3113;
                                float _3115 = _3114 * _3114;
                                float _3116 = _3062 - _2532;
                                float _3117 = _3063 - _2533;
                                float _3118 = _3064 - _2534;
                                float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                                float _3126 = dot(vec3(_466, _469, _472), vec3((-0.0) - _2532, (-0.0) - _2533, (-0.0) - _2534));
                                float _4189 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3129 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3130 = dot(vec3(_466, _469, _472), vec3(_3122 * _3116, _3122 * _3117, _3122 * _3118));
                                float _4200 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3133 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3137 = ((_3133 * _3133) * (_3115 + (-1.0))) + 1.0;
                                float _3138 = _3075 * _3114;
                                float _3139 = _3138 * _3138;
                                float _3145 = ((1.0 - _3139) * dot(vec3(_466, _469, _472), vec3(_3062, _3063, _3064))) + _3139;
                                float _4211 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                                float _3147 = 1.0 - _3114;
                                float _3157 = (0.5 / (((_3146 * ((_3129 * _3147) + _3114)) + 9.9999999392252902907785028219223e-09) + (((_3146 * _3147) + _3114) * _3129))) * _3146;
                                float _4222 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3167 = (_3092 * _3069) * (((_3115 * 3.1415927410125732421875) * (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) / ((_3137 * _3137) * ((_3082 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3093 * _2936.y;
                                frontier_phi_83_pred_1 = _3093 * _2936.x;
                                frontier_phi_83_pred_2 = _3167 * _2948.z;
                                frontier_phi_83_pred_3 = _3167 * _2948.y;
                                frontier_phi_83_pred_4 = _3167 * _2948.x;
                                frontier_phi_83_pred_5 = _3093 * _2936.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3175 = frontier_phi_83_pred;
                            _3174 = frontier_phi_83_pred_1;
                            _3173 = frontier_phi_83_pred_2;
                            _3172 = frontier_phi_83_pred_3;
                            _3171 = frontier_phi_83_pred_4;
                            _3176 = frontier_phi_83_pred_5;
                            _2878 = _3174 + _2891;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            _2875 = _3171 + _2888;
                            _2876 = _3172 + _2889;
                            _2877 = _3173 + _2890;
                            if (_2895 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2895;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2880;
                        frontier_phi_77_pred_1 = _2879;
                        frontier_phi_77_pred_2 = _2878;
                        frontier_phi_77_pred_3 = _2877;
                        frontier_phi_77_pred_4 = _2876;
                        frontier_phi_77_pred_5 = _2875;
                    }
                    _2517 = frontier_phi_77_pred;
                    _2515 = frontier_phi_77_pred_1;
                    _2513 = frontier_phi_77_pred_2;
                    _2511 = frontier_phi_77_pred_3;
                    _2509 = frontier_phi_77_pred_4;
                    _2507 = frontier_phi_77_pred_5;
                    uint _2673 = _2672 + 1u;
                    if (_2673 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2666 = _2507;
                        _2667 = _2509;
                        _2668 = _2511;
                        _2669 = _2513;
                        _2670 = _2515;
                        _2671 = _2517;
                        _2672 = _2673;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2511;
                frontier_phi_58_59_ladder_1 = _2517;
                frontier_phi_58_59_ladder_2 = _2515;
                frontier_phi_58_59_ladder_3 = _2513;
                frontier_phi_58_59_ladder_4 = _2509;
                frontier_phi_58_59_ladder_5 = _2507;
            }
            else
            {
                frontier_phi_58_59_ladder = _2390;
                frontier_phi_58_59_ladder_1 = _2396;
                frontier_phi_58_59_ladder_2 = _2394;
                frontier_phi_58_59_ladder_3 = _2392;
                frontier_phi_58_59_ladder_4 = _2388;
                frontier_phi_58_59_ladder_5 = _2386;
            }
            _2506 = frontier_phi_58_59_ladder_5;
            _2508 = frontier_phi_58_59_ladder_4;
            _2510 = frontier_phi_58_59_ladder;
            _2512 = frontier_phi_58_59_ladder_3;
            _2514 = frontier_phi_58_59_ladder_2;
            _2516 = frontier_phi_58_59_ladder_1;
        }
        float _2521 = isnan(1.0) ? _526 : (isnan(_526) ? 1.0 : min(_526, 1.0));
        _2298 = (_2521 * _2512) + _1734;
        _2300 = (_2521 * _2514) + _1736;
        _2302 = (_2521 * _2516) + _1738;
        _2304 = ((_2506 * _511) * _2521) + _2079;
        _2306 = ((_2508 * _513) * _2521) + _2081;
        _2308 = ((_2510 * _514) * _2521) + _2083;
    }
    else
    {
        _2298 = _1734;
        _2300 = _1736;
        _2302 = _1738;
        _2304 = _2079;
        _2306 = _2081;
        _2308 = _2083;
    }
    float _4238 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _4249 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _4260 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _2325 = ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2298 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _526))) + ((_2304 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    float _2326 = ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2300 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _526))) + ((_2306 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    float _2327 = ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2302 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _526))) + ((_2308 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    uint _2328 = _485 + 6u;
    float _2336 = _445 / cbSceneParam._m0[86u].x;
    float _2337 = _446 / cbSceneParam._m0[86u].y;
    vec4 _2351 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, (log2((isnan(cbSceneParam._m0[77u].w) ? _371 : (isnan(_371) ? cbSceneParam._m0[77u].w : min(_371, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2353 = _2351.x;
    float _2354 = _2351.y;
    float _2355 = _2351.z;
    float _2356 = _2351.w;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    if (_371 > cbSceneParam._m0[78u].w)
    {
        float _2411 = isnan(_371) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _371 : min(cbSceneParam._m0[80u].w, _371));
        float _2412 = _2411 / _371;
        float _2423 = _2412 * _422;
        float _2424 = _423 * _2412;
        float _2425 = (-0.0) - _2424;
        float _2426 = _2412 * _424;
        float _2428 = (cbSceneParam._m0[77u].w * _2425) / _2411;
        float _2429 = _2428 + cbSceneParam._m0[79u].w;
        float _2430 = cbSceneParam._m0[79u].w - _2424;
        float _2436 = sqrt(((_2423 * _2423) + (_2424 * _2424)) + (_2426 * _2426));
        float _2439 = (1.0 - (cbSceneParam._m0[77u].w / _2411)) * _2436;
        float _2444 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2446 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2623;
        if (abs((_2425 - _2428) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2623 = ((((_2429 > 0.0) ? exp2(_2444 * _2429) : (2.0 - exp2(_2446 * _2429))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2439;
        }
        else
        {
            float _2567 = 1.0 / cbSceneParam._m0[80u].x;
            float _2568 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : max(_2429, _2430));
            float _2569 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : min(_2429, _2430));
            float _2578 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : min(_2568, 0.0));
            float _2579 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : min(_2569, 0.0));
            _2623 = ((abs(_2436 / _2425) * cbSceneParam._m0[80u].y) * ((((_2578 - _2579) * 2.0) - ((exp2(_2444 * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0)))) - exp2(_2444 * (isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0))))) * _2567)) - ((exp2(_2446 * _2578) - exp2(_2446 * _2579)) * _2567))) + (_2439 * cbSceneParam._m0[80u].z);
        }
        vec4 _2625 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, 1.0), 0.0);
        float _2634 = exp2((_2623 * (-1.44269502162933349609375)) * (1.0 - _2625.w));
        float _2635 = log2(_2634);
        float _2651 = log2(_2356);
        _2448 = (exp2(_2651 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].x)) * _2625.x) / cbSceneParam._m0[78u].x)) + _2353;
        _2450 = (exp2(_2651 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].y)) * _2625.y) / cbSceneParam._m0[78u].y)) + _2354;
        _2452 = (exp2(_2651 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].z)) * _2625.z) / cbSceneParam._m0[78u].z)) + _2355;
        _2454 = _2634 * _2356;
    }
    else
    {
        _2448 = _2353;
        _2450 = _2354;
        _2452 = _2355;
        _2454 = _2356;
    }
    bool _2661;
    vec4 _2464;
    vec4 _2486;
    float _2488;
    float _2492;
    float _2493;
    float _2494;
    float _2495;
    bool _2505;
    for (;;)
    {
        _2464 = cbMatDynParam._m0[0u];
        float _2466 = roundEven(_2464.y);
        bool _2467 = _2466 == 3.0;
        float _2468 = log2(_2454);
        float _2475 = exp2(_2468 * cbSceneParam._m0[78u].x) * _2325;
        float _2476 = exp2(_2468 * cbSceneParam._m0[78u].y) * _2326;
        float _2477 = exp2(_2468 * cbSceneParam._m0[78u].z) * _2327;
        float _2484 = _434 + (-0.5);
        _2486 = cbMtdParam._m0[1u];
        _2488 = _2486.y * _2484;
        float _2491 = (_2466 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2492 = _2491 * (_2467 ? _2475 : (_2475 + (cbSceneParam._m0[72u].w * _2448)));
        _2493 = _2491 * (_2467 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2450)));
        _2494 = _2491 * (_2467 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2452)));
        _2495 = _2484 * 0.999000012874603271484375;
        _2505 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2505)
        {
            if ((cbInstanceData._m0[_485 + 7u].x + _2495) < 0.5)
            {
                _2661 = true;
                break;
            }
        }
        uint _2602 = _487 + uint(_2464.w);
        if ((cbInstanceData._m0[_2602].w < 1.0) && ((cbInstanceData._m0[_2602].w + _2495) < 0.5))
        {
            _2661 = true;
            break;
        }
        if ((_2488 + _294) < _2486.x)
        {
            _2661 = true;
            break;
        }
        _2661 = false;
        break;
    }
    float _2866;
    if (_2661)
    {
        discard_state = true;
        _2866 = 0.0;
    }
    else
    {
        _2866 = cbInstanceData._m0[_2328].w;
    }
    SV_Target.x = _2492;
    SV_Target.y = _2493;
    SV_Target.z = _2494;
    SV_Target.w = _2866;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2328].w;
    discard_exit();
}


