#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _932;
float _3605;
float _3606;
float _3607;
float _3608;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _233 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _233.x * cbMtdParam._m0[9u].x;
    float _241 = _233.y * cbMtdParam._m0[9u].y;
    float _242 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _257 = _255.x;
    float _281 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _257)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _257))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3617 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _286 = gl_FragCoord.x * 0.125;
    float _288 = gl_FragCoord.y * 0.125;
    float _298 = float(((_233.w * TEXCOORD_1.z) * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_286, _288)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _310 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _312 = _310.x;
    vec4 _324 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _328 = _324.z;
    float _332 = (_324.x * 2.0) + (-1.0);
    float _334 = (_324.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_332, _334), vec2(_332, _334));
    float _3628 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _340 = sqrt(1.0 - (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))));
    float _343 = fma(_340, _203 * NORMAL.x, fma(_334, _210 * TANGENT.x, (_196 * _188) * _332));
    float _346 = fma(_340, _203 * NORMAL.y, fma(_334, _210 * TANGENT.y, (_196 * _189) * _332));
    float _349 = fma(_340, _203 * NORMAL.z, fma(_334, _210 * TANGENT.z, (_196 * _190) * _332));
    float _353 = inversesqrt(dot(vec3(_343, _346, _349), vec3(_343, _346, _349)));
    float _354 = _353 * _343;
    float _355 = _353 * _346;
    float _356 = _353 * _349;
    float _3639 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _357 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3661 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3672 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3683 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _361 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _375 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _426 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _416);
    float _427 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _416);
    float _428 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _416);
    float _432 = inversesqrt(dot(vec3(_426, _427, _428), vec3(_426, _427, _428)));
    float _433 = _426 * _432;
    float _434 = _427 * _432;
    float _435 = _428 * _432;
    vec4 _436 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_286, _288));
    float _438 = _436.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _613 = sqrt(((_426 * _426) + (_427 * _427)) + (_428 * _428));
        float _619 = (cbMatDynParam._m0[5u].x * _613) + cbMatDynParam._m0[5u].y;
        float _3694 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _620 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _624 = (cbMatDynParam._m0[5u].z * _613) + cbMatDynParam._m0[5u].w;
        float _3705 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) - _620)) + _620) < ((_438 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _449 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _450 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _470 = fma(_356, cbSceneParam._m0[5u].z, fma(_355, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _354));
    float _473 = fma(_356, cbSceneParam._m0[6u].z, fma(_355, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _354));
    float _476 = fma(_356, cbSceneParam._m0[7u].z, fma(_355, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _354));
    uint _489 = uint(roundEven(NORMAL.w)) * 13u;
    uint _491 = _489 + 9u;
    uint _492 = _491 + uint(cbMatDynParam._m0[0u].w);
    float _498 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) * cbInstanceData._m0[_492].x;
    float _499 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_492].y;
    float _500 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_492].z;
    float _3716 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _501 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _3727 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _3738 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _503 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _504 = 1.0 - _361;
    float _505 = _501 * _504;
    float _506 = _502 * _504;
    float _507 = _503 * _504;
    float _512 = (_501 + (-0.039999999105930328369140625)) * _361;
    float _513 = (_502 + (-0.039999999105930328369140625)) * _361;
    float _514 = (_503 + (-0.039999999105930328369140625)) * _361;
    float _515 = _512 + 0.039999999105930328369140625;
    float _517 = _513 + 0.039999999105930328369140625;
    float _518 = _514 + 0.039999999105930328369140625;
    vec4 _527 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _449, cbSceneParam._m0[86u].y * _450));
    float _530 = _527.x * TEXCOORD_1.w;
    float _531 = dot(vec3(_354, _355, _356), vec3(_433, _434, _435));
    float _534 = _531 * 2.0;
    float _538 = (_534 * _354) - _433;
    float _539 = (_534 * _355) - _434;
    float _540 = (_534 * _356) - _435;
    float _544 = abs(dot(vec3(_433, _434, _435), vec3(_354, _355, _356)));
    float _3749 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _546 = sqrt(_357);
    float _559 = exp2((_546 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_546 * 3.0));
    float _565 = (1.0 - _559) * ((_546 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _566 = _559 * _546;
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _931;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _656 = fma(_602, cbModelParam._m0[26u].z, fma(_598, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _594));
        float _660 = fma(_602, cbModelParam._m0[27u].z, fma(_598, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _594));
        float _664 = fma(_602, cbModelParam._m0[28u].z, fma(_598, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _594));
        float _689 = _594 + _354;
        float _690 = _598 + _355;
        float _691 = _602 + _356;
        float _701 = fma(_691, cbModelParam._m0[26u].z, fma(_690, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689)) - _656;
        float _702 = fma(_691, cbModelParam._m0[27u].z, fma(_690, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689)) - _660;
        float _703 = fma(_691, cbModelParam._m0[28u].z, fma(_690, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689)) - _664;
        float _707 = inversesqrt(dot(vec3(_701, _702, _703), vec3(_701, _702, _703)));
        float _720 = ((_707 * _701) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_656 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _721 = ((_707 * _702) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_660 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _722 = ((_707 * _703) / cbModelParam._m0[34u].z) + ((((((_664 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        float _759 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_725.x + (-0.5));
        float _761 = _759 * (_725.y + (-0.5));
        float _762 = _759 * (_725.z + (-0.5));
        float _769 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_732.x + (-0.5));
        float _771 = _769 * (_732.y + (-0.5));
        float _772 = _769 * (_732.z + (-0.5));
        float _779 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_739.x + (-0.5));
        float _781 = _779 * (_739.y + (-0.5));
        float _782 = _779 * (_739.z + (-0.5));
        float _789 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_746.x + (-0.5));
        float _791 = _789 * (_746.y + (-0.5));
        float _792 = _789 * (_746.z + (-0.5));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = _760 * 0.5;
        float _797 = _770 * 0.5;
        float _798 = _780 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _813 = (dot(vec3(_354, _355, _356), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _823 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3797 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_825 + 1.0))) + _830) * _793;
        float _840 = _761 * 0.5;
        float _841 = _771 * 0.5;
        float _842 = _781 * 0.5;
        float _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _856 = (dot(vec3(_354, _355, _356), vec3(_848 * _840, _848 * _841, _848 * _842)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _865 = sqrt(((_841 * _841) + (_840 * _840)) + (_842 * _842)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3830 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_867 + 1.0))) + _872) * _794;
        float _882 = _762 * 0.5;
        float _883 = _772 * 0.5;
        float _884 = _782 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_354, _355, _356), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3863 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_909 + 1.0))) + _914) * _795;
        _931 = _762;
        _933 = _761;
        _934 = _760;
        _935 = _772;
        _936 = _771;
        _937 = _770;
        _938 = _782;
        _939 = _781;
        _940 = _780;
        _941 = _795;
        _942 = _794;
        _943 = _793;
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
    }
    else
    {
        _931 = _932;
        _933 = _932;
        _934 = _932;
        _935 = _932;
        _936 = _932;
        _937 = _932;
        _938 = _932;
        _939 = _932;
        _940 = _932;
        _941 = _932;
        _942 = _932;
        _943 = _932;
        _944 = 0.0;
        _945 = 0.0;
        _946 = 0.0;
    }
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _975 = fma(_602, cbModelParam._m0[30u].z, fma(_598, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _594));
        float _979 = fma(_602, cbModelParam._m0[31u].z, fma(_598, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _594));
        float _983 = fma(_602, cbModelParam._m0[32u].z, fma(_598, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _594));
        float _1006 = _594 + _354;
        float _1007 = _598 + _355;
        float _1008 = _602 + _356;
        float _1018 = fma(_1008, cbModelParam._m0[30u].z, fma(_1007, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006)) - _975;
        float _1019 = fma(_1008, cbModelParam._m0[31u].z, fma(_1007, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006)) - _979;
        float _1020 = fma(_1008, cbModelParam._m0[32u].z, fma(_1007, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006)) - _983;
        float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
        float _1037 = ((_1024 * _1018) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_975 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1024 * _1019) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_979 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1024 * _1020) / cbModelParam._m0[35u].z) + ((((((_983 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1074 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1041.x + (-0.5));
        float _1076 = _1074 * (_1041.y + (-0.5));
        float _1077 = _1074 * (_1041.z + (-0.5));
        float _1084 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1048.x + (-0.5));
        float _1086 = _1084 * (_1048.y + (-0.5));
        float _1087 = _1084 * (_1048.z + (-0.5));
        float _1094 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1055.x + (-0.5));
        float _1096 = _1094 * (_1055.y + (-0.5));
        float _1097 = _1094 * (_1055.z + (-0.5));
        float _1104 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1062.x + (-0.5));
        float _1106 = _1104 * (_1062.y + (-0.5));
        float _1107 = _1104 * (_1062.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_354, _355, _356), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3926 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1138 + 1.0))) + _1143) * _1108;
        float _1153 = _1076 * 0.5;
        float _1154 = _1086 * 0.5;
        float _1155 = _1096 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_354, _355, _356), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3959 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1180 + 1.0))) + _1185) * _1109;
        float _1195 = _1077 * 0.5;
        float _1196 = _1087 * 0.5;
        float _1197 = _1097 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_354, _355, _356), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3992 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1222 + 1.0))) + _1227) * _1110;
        _1244 = _1077;
        _1245 = _1076;
        _1246 = _1075;
        _1247 = _1087;
        _1248 = _1086;
        _1249 = _1085;
        _1250 = _1097;
        _1251 = _1096;
        _1252 = _1095;
        _1253 = _1110;
        _1254 = _1109;
        _1255 = _1108;
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
    }
    else
    {
        _1244 = _932;
        _1245 = _932;
        _1246 = _932;
        _1247 = _932;
        _1248 = _932;
        _1249 = _932;
        _1250 = _932;
        _1251 = _932;
        _1252 = _932;
        _1253 = _932;
        _1254 = _932;
        _1255 = _932;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _944)) + _944;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _945)) + _945;
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _946)) + _946;
    float _1291 = fma(_1270, cbSceneParam._m0[89u].z, fma(_1269, cbSceneParam._m0[89u].y, _1268 * cbSceneParam._m0[89u].x));
    float _1294 = fma(_1270, cbSceneParam._m0[90u].z, fma(_1269, cbSceneParam._m0[90u].y, _1268 * cbSceneParam._m0[90u].x));
    float _1297 = fma(_1270, cbSceneParam._m0[91u].z, fma(_1269, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1268));
    float _1312 = _538 * 0.5;
    float _1313 = _539 * 0.5;
    float _1314 = _540 * 0.5;
    float _1315 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1318 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1321 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1355;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1328 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_931, _935, _938, _941));
        float _1332 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_933, _936, _939, _942));
        float _1336 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_934, _937, _940, _943));
        float _1343 = dot(vec4(cbModelParam._m0[39u]), vec4(_1312, _1313, _1314, 1.0));
        _1355 = dot(vec3(isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1343) ? 0.0 : (isnan(0.0) ? _1343 : max(0.0, _1343))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1355 = 1.0;
    }
    float _1366;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1357 = dot(vec4(cbModelParam._m0[40u]), vec4(_1312, _1313, _1314, 1.0));
        _1366 = dot(vec3(isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1357) ? 0.0 : (isnan(0.0) ? _1357 : max(0.0, _1357))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1366 = 1.0;
    }
    float _1370 = (_1366 * cbModelParam._m0[1u].x) + (_1355 * (1.0 - cbModelParam._m0[1u].x));
    float _1380 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _357);
    float _1381 = isnan(_1380) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1380 : min(cbModelParam._m0[25u].z, _1380));
    float _1463;
    float _1465;
    float _1467;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1430 = fma(_602, cbModelParam._m0[13u].z, fma(_598, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _594)) + cbModelParam._m0[13u].w;
        float _1434 = fma(_602, cbModelParam._m0[14u].z, fma(_598, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _594)) + cbModelParam._m0[14u].w;
        float _1438 = fma(_602, cbModelParam._m0[15u].z, fma(_598, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _594)) + cbModelParam._m0[15u].w;
        float _1441 = fma(_540, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538));
        float _1444 = fma(_540, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538));
        float _1447 = fma(_540, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538));
        float _1475;
        if (_1441 > 0.0)
        {
            _1475 = abs((1.0 - _1430) / _1441);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1430 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1475 = frontier_phi_17_15_ladder;
        }
        float _1651;
        if (_1444 > 0.0)
        {
            _1651 = abs((1.0 - _1434) / _1444);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1434 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1651 = frontier_phi_26_22_ladder;
        }
        float _1947;
        if (_1447 > 0.0)
        {
            _1947 = abs((1.0 - _1438) / _1447);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1438 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1947 = frontier_phi_38_33_ladder;
        }
        float _1949 = isnan(_1651) ? _1475 : (isnan(_1475) ? _1651 : min(_1475, _1651));
        float _1950 = isnan(_1947) ? _1949 : (isnan(_1949) ? _1947 : min(_1949, _1947));
        float _1954 = (_1950 * _1441) + _1430;
        float _1955 = (_1950 * _1444) + _1434;
        float _1956 = (_1950 * _1447) + _1438;
        float _1957 = _1950 * 9.9999997473787516355514526367188e-05;
        float _1959 = (-1.0) - _1957;
        float _1961 = _1957 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1956 > _1961) || ((_1956 < _1959) || ((_1955 > _1961) || ((_1955 < _1959) || ((_1954 < _1959) || (_1954 > _1961))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2101 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1956, cbModelParam._m0[9u].z, fma(_1955, cbModelParam._m0[9u].y, _1954 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1956, cbModelParam._m0[10u].z, fma(_1955, cbModelParam._m0[10u].y, _1954 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1956, cbModelParam._m0[11u].z, fma(_1955, cbModelParam._m0[11u].y, _1954 * cbModelParam._m0[11u].x))), _1381);
            frontier_phi_16_38_ladder = _2101.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2101.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2101.x * cbModelParam._m0[1u].y;
        }
        _1463 = frontier_phi_16_38_ladder_2;
        _1465 = frontier_phi_16_38_ladder_1;
        _1467 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_538, _539, _540), _1381);
        _1463 = _1451.x * cbModelParam._m0[1u].y;
        _1465 = _1451.y * cbModelParam._m0[1u].y;
        _1467 = _1451.z * cbModelParam._m0[1u].y;
    }
    float _1471 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _357);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1471 : min(cbModelParam._m0[25u].w, _1471));
    float _1565;
    float _1567;
    float _1569;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1529 = fma(_602, cbModelParam._m0[21u].z, fma(_598, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _594)) + cbModelParam._m0[21u].w;
        float _1533 = fma(_602, cbModelParam._m0[22u].z, fma(_598, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _594)) + cbModelParam._m0[22u].w;
        float _1537 = fma(_602, cbModelParam._m0[23u].z, fma(_598, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _594)) + cbModelParam._m0[23u].w;
        float _1540 = fma(_540, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538));
        float _1543 = fma(_540, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538));
        float _1546 = fma(_540, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538));
        float _1656;
        if (_1540 > 0.0)
        {
            _1656 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1656 = frontier_phi_28_24_ladder;
        }
        float _1974;
        if (_1543 > 0.0)
        {
            _1974 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1974 = frontier_phi_40_35_ladder;
        }
        float _2312;
        if (_1546 > 0.0)
        {
            _2312 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2312 = frontier_phi_50_47_ladder;
        }
        float _2314 = isnan(_1974) ? _1656 : (isnan(_1656) ? _1974 : min(_1656, _1974));
        float _2315 = isnan(_2312) ? _2314 : (isnan(_2314) ? _2312 : min(_2314, _2312));
        float _2319 = (_2315 * _1540) + _1529;
        float _2320 = (_2315 * _1543) + _1533;
        float _2321 = (_2315 * _1546) + _1537;
        float _2322 = _2315 * 9.9999997473787516355514526367188e-05;
        float _2323 = (-1.0) - _2322;
        float _2325 = _2322 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2321 > _2325) || ((_2321 < _2323) || ((_2320 > _2325) || ((_2320 < _2323) || ((_2319 < _2323) || (_2319 > _2325))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2321, cbModelParam._m0[17u].z, fma(_2320, cbModelParam._m0[17u].y, _2319 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2321, cbModelParam._m0[18u].z, fma(_2320, cbModelParam._m0[18u].y, _2319 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2321, cbModelParam._m0[19u].z, fma(_2320, cbModelParam._m0[19u].y, _2319 * cbModelParam._m0[19u].x))), _1472);
            frontier_phi_25_50_ladder = _2443.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2443.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2443.x * cbModelParam._m0[1u].z;
        }
        _1565 = frontier_phi_25_50_ladder_2;
        _1567 = frontier_phi_25_50_ladder_1;
        _1569 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1549 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_538, _539, _540), _1472);
        _1565 = _1549.x * cbModelParam._m0[1u].z;
        _1567 = _1549.y * cbModelParam._m0[1u].z;
        _1569 = _1549.z * cbModelParam._m0[1u].z;
    }
    float _1582 = (((_565 * _515) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1584 = (((_565 * _517) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1586 = (((_565 * _518) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1589 = fma(_1586, cbSceneParam._m0[89u].z, fma(_1584, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1592 = fma(_1586, cbSceneParam._m0[90u].z, fma(_1584, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1595 = fma(_1586, cbSceneParam._m0[91u].z, fma(_1584, cbSceneParam._m0[91u].y, _1582 * cbSceneParam._m0[91u].x));
    float _1630 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1634 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1638 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1642 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1643 = _1630 / _1642;
    float _1644 = _1634 / _1642;
    float _1645 = _1638 / _1642;
    float _1792;
    float _1793;
    float _1794;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1672 = ((uint(_1645 > cbSceneParam._m0[59u].y) + uint(_1645 > cbSceneParam._m0[59u].x)) + uint(_1645 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1673 = _1672 + 43u;
        uint _1681 = _1672 + 44u;
        uint _1689 = _1672 + 45u;
        uint _1697 = _1672 + 46u;
        float _1708 = fma(_1642, cbSceneParam._m0[_1673].w, fma(_1638, cbSceneParam._m0[_1673].z, fma(_1634, cbSceneParam._m0[_1673].y, _1630 * cbSceneParam._m0[_1673].x)));
        float _1712 = fma(_1642, cbSceneParam._m0[_1681].w, fma(_1638, cbSceneParam._m0[_1681].z, fma(_1634, cbSceneParam._m0[_1681].y, _1630 * cbSceneParam._m0[_1681].x)));
        float _1720 = fma(_1642, cbSceneParam._m0[_1697].w, fma(_1638, cbSceneParam._m0[_1697].z, fma(_1634, cbSceneParam._m0[_1697].y, _1630 * cbSceneParam._m0[_1697].x)));
        float _1725 = cbSceneParam._m0[33u].z * _1720;
        float _1727 = cbSceneParam._m0[33u].w * _1720;
        float _1730 = fma(_1642, cbSceneParam._m0[_1689].w, fma(_1638, cbSceneParam._m0[_1689].z, fma(_1634, cbSceneParam._m0[_1689].y, _1630 * cbSceneParam._m0[_1689].x))) / _1720;
        float _1778 = (cbSceneParam._m0[33u].x - sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645))) * cbSceneParam._m0[33u].y;
        float _4118 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1785 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1725 + _1708) / _1720, (_1727 + _1712) / _1720), _1730), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1727 + _1708) / _1720, (_1712 - _1725) / _1720), _1730), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1708 - _1725) / _1720, (_1712 - _1727) / _1720), _1730), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1708 - _1727) / _1720, (_1725 + _1712) / _1720), _1730), 0.0)).x), vec4(0.25)));
        _1792 = 1.0 - (_1785 * cbSceneParam._m0[34u].x);
        _1793 = 1.0 - (_1785 * cbSceneParam._m0[34u].y);
        _1794 = 1.0 - (_1785 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1792 = 1.0;
        _1793 = 1.0;
        _1794 = 1.0;
    }
    float _1858;
    float _1860;
    float _1862;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1846 = fma(_1642, cbSceneParam._m0[63u].w, fma(_1638, cbSceneParam._m0[63u].z, fma(_1634, cbSceneParam._m0[63u].y, _1630 * cbSceneParam._m0[63u].x)));
        float _1847 = fma(_1642, cbSceneParam._m0[60u].w, fma(_1638, cbSceneParam._m0[60u].z, fma(_1634, cbSceneParam._m0[60u].y, _1630 * cbSceneParam._m0[60u].x))) / _1846;
        float _1848 = fma(_1642, cbSceneParam._m0[61u].w, fma(_1638, cbSceneParam._m0[61u].z, fma(_1634, cbSceneParam._m0[61u].y, _1630 * cbSceneParam._m0[61u].x))) / _1846;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1847 >= cbSceneParam._m0[64u].x) && (_1848 >= cbSceneParam._m0[64u].y)) && (_1847 <= cbSceneParam._m0[64u].z)) && (_1848 <= cbSceneParam._m0[64u].w))
        {
            float _1987 = fma(_1642, cbSceneParam._m0[62u].w, fma(_1638, cbSceneParam._m0[62u].z, fma(_1634, cbSceneParam._m0[62u].y, _1630 * cbSceneParam._m0[62u].x))) / _1846;
            float _1991 = isnan(cbSceneParam._m0[41u].w) ? _1987 : (isnan(_1987) ? cbSceneParam._m0[41u].w : max(_1987, cbSceneParam._m0[41u].w));
            float _2034 = (cbSceneParam._m0[33u].x - sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645))) * cbSceneParam._m0[33u].y;
            float _4134 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
            float _2041 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1847, cbSceneParam._m0[33u].w + _1848), _1991), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1847, _1848 - cbSceneParam._m0[33u].z), _1991), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1847 - cbSceneParam._m0[33u].z, _1848 - cbSceneParam._m0[33u].w), _1991), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1847 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1848), _1991), 0.0)).x), vec4(0.25)));
            float _2045 = 1.0 - (_2041 * cbSceneParam._m0[34u].x);
            float _2046 = 1.0 - (_2041 * cbSceneParam._m0[34u].y);
            float _2047 = 1.0 - (_2041 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2047) ? _1794 : (isnan(_1794) ? _2047 : min(_1794, _2047));
            frontier_phi_37_36_ladder_1 = isnan(_2046) ? _1793 : (isnan(_1793) ? _2046 : min(_1793, _2046));
            frontier_phi_37_36_ladder_2 = isnan(_2045) ? _1792 : (isnan(_1792) ? _2045 : min(_1792, _2045));
        }
        else
        {
            frontier_phi_37_36_ladder = _1794;
            frontier_phi_37_36_ladder_1 = _1793;
            frontier_phi_37_36_ladder_2 = _1792;
        }
        _1858 = frontier_phi_37_36_ladder_2;
        _1860 = frontier_phi_37_36_ladder_1;
        _1862 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1858 = _1792;
        _1860 = _1793;
        _1862 = _1794;
    }
    uvec4 _1867 = floatBitsToUint(cbInstanceData._m0[_489 + 5u]);
    uint _1869 = _1867.x * 14u;
    uint _1870 = _1869 + 13u;
    float _1877 = _530 + (-1.0);
    float _1882 = (cbLight._m0[_1870].x * _1877) + 1.0;
    float _1883 = (cbLight._m0[_1870].y * _1877) + 1.0;
    float _1884 = (cbLight._m0[_1870].z * _1877) + 1.0;
    float _1885 = (cbLight._m0[_1870].w * _1877) + 1.0;
    uint _1886 = _1869 + 5u;
    float _1892 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
    uint _1896 = _1869 + 4u;
    float _1906 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
    uint _1910 = _1869 | 1u;
    float _1921 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_354, _355, _356));
    float _1924 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_354, _355, _356));
    float _4170 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _4181 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1929 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * 0.3183098733425140380859375;
    float _1931 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * 0.3183098733425140380859375;
    float _1938 = ((cbLight._m0[_1886].x * _1892) * _1931) + (((cbLight._m0[_1896].x * _1858) * _1906) * _1929);
    float _1939 = ((_1892 * cbLight._m0[_1886].y) * _1931) + (((cbLight._m0[_1896].y * _1860) * _1906) * _1929);
    float _1940 = ((_1892 * cbLight._m0[_1886].z) * _1931) + (((cbLight._m0[_1896].z * _1862) * _1906) * _1929);
    uvec4 _1944 = floatBitsToUint(cbLight._m0[_1869 + 12u]);
    bool _1946 = _1944.x == 0u;
    float _2048;
    float _2050;
    float _2052;
    if (_1946)
    {
        _2048 = _1938;
        _2050 = _1939;
        _2052 = _1940;
    }
    else
    {
        uint _2056 = _1869 + 6u;
        float _2072 = (dot(vec3(cbLight._m0[_1869 + 2u].xyz), vec3(_354, _355, _356)) * 0.5) + 0.5;
        float _2073 = _2072 * _2072;
        float _4192 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2074 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2075 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _2048 = (((cbLight._m0[_2056].x * 0.3183098733425140380859375) * _2074) * _2075) + _1938;
        _2050 = (((cbLight._m0[_2056].y * 0.3183098733425140380859375) * _2074) * _2075) + _1939;
        _2052 = (((cbLight._m0[_2056].z * 0.3183098733425140380859375) * _2074) * _2075) + _1940;
    }
    bool _2055 = _1944.y == 0u;
    float _2110;
    float _2112;
    float _2114;
    if (_2055)
    {
        _2110 = _2048;
        _2112 = _2050;
        _2114 = _2052;
    }
    else
    {
        uint _2283 = _1869 + 7u;
        float _2299 = (dot(vec3(cbLight._m0[_1869 + 3u].xyz), vec3(_354, _355, _356)) * 0.5) + 0.5;
        float _2300 = _2299 * _2299;
        float _4208 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2301 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2302 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2110 = (((cbLight._m0[_2283].x * 0.3183098733425140380859375) * _2301) * _2302) + _2048;
        _2112 = (((cbLight._m0[_2283].y * 0.3183098733425140380859375) * _2301) * _2302) + _2050;
        _2114 = (((cbLight._m0[_2283].z * 0.3183098733425140380859375) * _2301) * _2302) + _2052;
    }
    uint _2117 = _1869 + 8u;
    float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1869].w)) * _357) * 0.949999988079071044921875);
    float _2131 = _2130 * _2130;
    float _2132 = cbLight._m0[_1869].x + _433;
    float _2133 = cbLight._m0[_1869].y + _434;
    float _2134 = cbLight._m0[_1869].z + _435;
    float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
    float _2139 = _2138 * _2132;
    float _2140 = _2138 * _2133;
    float _2141 = _2138 * _2134;
    float _2142 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_1869].xyz));
    float _4224 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _4235 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _2146 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _2147 = dot(vec3(_354, _355, _356), vec3(_2139, _2140, _2141));
    float _4246 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2151 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_2139, _2140, _2141));
    float _4257 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2155 = _2131 * _2131;
    float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
    float _2167 = exp2(log2(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * 5.0);
    float _2168 = 0.959999978542327880859375 - _512;
    float _2170 = 0.959999978542327880859375 - _513;
    float _2171 = 0.959999978542327880859375 - _514;
    float _2178 = 1.0 - _2131;
    float _2189 = (0.5 / (((_2146 * ((_2145 * _2178) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2178) + _2131) * _2145))) * _2145;
    float _4268 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2191 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
    uint _2205 = _1869 + 9u;
    float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _357) * 0.949999988079071044921875);
    float _2217 = _2216 * _2216;
    float _2218 = cbLight._m0[_1910].x + _433;
    float _2219 = cbLight._m0[_1910].y + _434;
    float _2220 = cbLight._m0[_1910].z + _435;
    float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
    float _2225 = _2224 * _2218;
    float _2226 = _2224 * _2219;
    float _2227 = _2224 * _2220;
    float _2228 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_1910].xyz));
    float _4279 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2232 = dot(vec3(_354, _355, _356), vec3(_2225, _2226, _2227));
    float _4290 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2236 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_2225, _2226, _2227));
    float _4301 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2240 = _2217 * _2217;
    float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
    float _2251 = exp2(log2(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * 5.0);
    float _2258 = 1.0 - _2217;
    float _2268 = (0.5 / (((_2146 * ((_2231 * _2258) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2258) + _2217) * _2231))) * _2231;
    float _4312 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
    float _2280 = (((((_2251 * _2168) + _515) * cbLight._m0[_2205].x) * _2270) * _1892) + ((((cbLight._m0[_2117].x * _1858) * ((_2167 * _2168) + _515)) * _2191) * _1906);
    float _2281 = (((((_2251 * _2170) + _517) * cbLight._m0[_2205].y) * _2270) * _1892) + ((((cbLight._m0[_2117].y * _1860) * ((_2167 * _2170) + _517)) * _2191) * _1906);
    float _2282 = (((((_2251 * _2171) + _518) * cbLight._m0[_2205].z) * _2270) * _1892) + ((((cbLight._m0[_2117].z * _1862) * ((_2167 * _2171) + _518)) * _2191) * _1906);
    float _2338;
    float _2340;
    float _2342;
    if (_1946)
    {
        _2338 = _2280;
        _2340 = _2281;
        _2342 = _2282;
    }
    else
    {
        uint _2344 = _1869 + 2u;
        uint _2348 = _1869 + 10u;
        float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _357) * 0.949999988079071044921875);
        float _2363 = _2362 * _2362;
        float _2364 = cbLight._m0[_2344].x + _433;
        float _2365 = cbLight._m0[_2344].y + _434;
        float _2366 = cbLight._m0[_2344].z + _435;
        float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
        float _2371 = _2370 * _2364;
        float _2372 = _2370 * _2365;
        float _2373 = _2370 * _2366;
        float _2374 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_2344].xyz));
        float _4323 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2378 = dot(vec3(_354, _355, _356), vec3(_2371, _2372, _2373));
        float _4334 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2382 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2371, _2372, _2373));
        float _4345 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2386 = _2363 * _2363;
        float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
        float _2397 = exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0);
        float _2404 = 1.0 - _2363;
        float _2414 = (0.5 / (((_2146 * ((_2377 * _2404) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2404) + _2363) * _2377))) * _2377;
        float _4356 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2416 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
        float _2417 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _2338 = (((((_2397 * _2168) + _515) * cbLight._m0[_2348].x) * _2416) * _2417) + _2280;
        _2340 = (((((_2397 * _2170) + _517) * cbLight._m0[_2348].y) * _2416) * _2417) + _2281;
        _2342 = (((((_2397 * _2171) + _518) * cbLight._m0[_2348].z) * _2416) * _2417) + _2282;
    }
    float _2448;
    float _2450;
    float _2452;
    if (_2055)
    {
        _2448 = _2338;
        _2450 = _2340;
        _2452 = _2342;
    }
    else
    {
        uint _2459 = _1869 + 3u;
        uint _2463 = _1869 + 11u;
        float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _357) * 0.949999988079071044921875);
        float _2478 = _2477 * _2477;
        float _2479 = cbLight._m0[_2459].x + _433;
        float _2480 = cbLight._m0[_2459].y + _434;
        float _2481 = cbLight._m0[_2459].z + _435;
        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
        float _2486 = _2485 * _2479;
        float _2487 = _2485 * _2480;
        float _2488 = _2485 * _2481;
        float _2489 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_2459].xyz));
        float _4372 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2493 = dot(vec3(_354, _355, _356), vec3(_2486, _2487, _2488));
        float _4383 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2497 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2486, _2487, _2488));
        float _4394 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2501 = _2478 * _2478;
        float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
        float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) * 5.0);
        float _2519 = 1.0 - _2478;
        float _2529 = (0.5 / (((_2146 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2519) + _2478) * _2492))) * _2492;
        float _4405 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2448 = (((((_2512 * _2168) + _515) * cbLight._m0[_2463].x) * _2531) * _2532) + _2338;
        _2450 = (((((_2512 * _2170) + _517) * cbLight._m0[_2463].y) * _2531) * _2532) + _2340;
        _2452 = (((((_2512 * _2171) + _518) * cbLight._m0[_2463].z) * _2531) * _2532) + _2342;
    }
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_1867.y == 0u)
    {
        uvec4 _2553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2554 = _2553.x;
        uint _2565 = uint((float(_2553.y) * floor(float(uint(cbSceneParam._m0[85u].y * _450) / _2554))) + floor(float(uint(cbSceneParam._m0[85u].x * _449) / _2554)));
        float _2575 = (log2(_1645 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2576 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        uint _2579 = uint(isnan(14.0) ? _2576 : (isnan(_2576) ? 14.0 : min(_2576, 14.0)));
        uvec4 _2584 = texelFetch(g_lightClusterGridBuffer, int(((_2579 << 2u) + (_2565 << 6u)) >> 2u));
        uint _2585 = _2584.x;
        uint _2586 = _2553.z;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        if (((((1u << ((_2586 >> 4u) & 15u)) + 4294967295u) & _2585) == 0u) || ((_2586 & 240u) == 0u))
        {
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
        }
        else
        {
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            uint _2823 = 0u;
            uint _2832;
            bool _2833;
            for (;;)
            {
                _2832 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                _2833 = _2832 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2833)
                {
                    frontier_phi_71_pred = _2822;
                    frontier_phi_71_pred_1 = _2821;
                    frontier_phi_71_pred_2 = _2820;
                    frontier_phi_71_pred_3 = _2819;
                    frontier_phi_71_pred_4 = _2818;
                    frontier_phi_71_pred_5 = _2817;
                }
                else
                {
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    uint _2968;
                    _2962 = _2817;
                    _2963 = _2818;
                    _2964 = _2819;
                    _2965 = _2820;
                    _2966 = _2821;
                    _2967 = _2822;
                    _2968 = _2832;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    for (;;)
                    {
                        uint _2972 = uint(findLSB(_2968)) + (_2823 << 5u);
                        uint _2969 = (_2968 + 4294967295u) & _2968;
                        uint _2974 = _2972 * 48u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2974)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 3u)).x));
                        uint _2994 = (_2972 * 48u) + 4u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 3u)).x));
                        uint _3013 = (_2972 * 48u) + 8u;
                        vec3 _3024 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x));
                        float _3028 = _2988.x - _1643;
                        float _3029 = _2988.y - _1644;
                        float _3030 = _2988.z - _1645;
                        float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                        float _3034 = inversesqrt(_3031);
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3038 = dot(vec3(_470, _473, _476), vec3(_3035, _3036, _3037));
                        float _3043 = 1.0 - (_3031 * _2988.w);
                        float _4431 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3045 = sqrt(_3031) * _3007.w;
                        float _3048 = 1.39999997615814208984375 / (_3045 + 1.39999997615814208984375);
                        float _3049 = _3048 * _3048;
                        float _3052 = ((1.0 - _3049) * _3038) + _3049;
                        float _3055 = _3045 * _3045;
                        float _3059 = ((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3044) / ((_3055 * 0.699999988079071044921875) + 1.0);
                        float _3063 = (-0.0) - _1643;
                        float _3064 = (-0.0) - _1644;
                        float _3065 = (-0.0) - _1645;
                        float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                        float _3070 = _3069 * _3063;
                        float _3071 = _3069 * _3064;
                        float _3072 = _3069 * _3065;
                        float _3079 = exp2(log2(1.0 / ((_3055 * 3.5) + 5.0)) * 0.25);
                        float _3080 = 1.0 - _546;
                        float _3087 = sqrt(1.0 - ((1.0 - (_3080 * _3080)) * (1.0 - (_3079 * _3079))));
                        float _3088 = _3087 * _3087;
                        float _3089 = _3088 * _3088;
                        float _3090 = _3070 + _3035;
                        float _3091 = _3071 + _3036;
                        float _3092 = _3072 + _3037;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3100 = dot(vec3(_470, _473, _476), vec3(_3070, _3071, _3072));
                        float _4447 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3103 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3104 = dot(vec3(_470, _473, _476), vec3(_3096 * _3090, _3096 * _3091, _3096 * _3092));
                        float _4458 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3107 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3111 = ((_3107 * _3107) * (_3089 + (-1.0))) + 1.0;
                        float _3112 = _3048 * _3088;
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3038) + _3113;
                        float _4469 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3117 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3118 = 1.0 - _3088;
                        float _3128 = (0.5 / (((_3117 * ((_3103 * _3118) + _3088)) + 9.9999999392252902907785028219223e-09) + (((_3117 * _3118) + _3088) * _3103))) * _3117;
                        float _4480 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3139 = (((_3089 * 3.1415927410125732421875) * (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) / ((_3111 * _3111) * ((_3055 * 2.1991131305694580078125) + 3.141590118408203125))) * _3044;
                        _2892 = (_3059 * _3007.x) + _2965;
                        _2893 = (_3059 * _3007.y) + _2966;
                        _2894 = (_3059 * _3007.z) + _2967;
                        _2889 = (_3139 * _3024.x) + _2962;
                        _2890 = (_3139 * _3024.y) + _2963;
                        _2891 = (_3139 * _3024.z) + _2964;
                        if (_2969 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2962 = _2889;
                            _2963 = _2890;
                            _2964 = _2891;
                            _2965 = _2892;
                            _2966 = _2893;
                            _2967 = _2894;
                            _2968 = _2969;
                        }
                    }
                    frontier_phi_71_pred = _2894;
                    frontier_phi_71_pred_1 = _2893;
                    frontier_phi_71_pred_2 = _2892;
                    frontier_phi_71_pred_3 = _2891;
                    frontier_phi_71_pred_4 = _2890;
                    frontier_phi_71_pred_5 = _2889;
                }
                _2676 = frontier_phi_71_pred;
                _2674 = frontier_phi_71_pred_1;
                _2672 = frontier_phi_71_pred_2;
                _2670 = frontier_phi_71_pred_3;
                _2668 = frontier_phi_71_pred_4;
                _2666 = frontier_phi_71_pred_5;
                uint _2824 = _2823 + 1u;
                if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2817 = _2666;
                    _2818 = _2668;
                    _2819 = _2670;
                    _2820 = _2672;
                    _2821 = _2674;
                    _2822 = _2676;
                    _2823 = _2824;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
        }
        uvec4 _2679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2680 = _2679.z;
        uint _2682 = (_2680 >> 8u) & 15u;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        if (((4294967295u << _2682) & _2585) == 0u)
        {
            _2785 = _2665;
            _2787 = _2667;
            _2789 = _2669;
            _2791 = _2671;
            _2793 = _2673;
            _2795 = _2675;
        }
        else
        {
            float _2810 = inversesqrt(dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645)));
            float _2811 = _2810 * _1643;
            float _2812 = _2810 * _1644;
            float _2813 = _2810 * _1645;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2682 < ((_2680 >> 12u) & 15u))
            {
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2945 = _2665;
                float _2946 = _2667;
                float _2947 = _2669;
                float _2948 = _2671;
                float _2949 = _2673;
                float _2950 = _2675;
                uint _2951 = _2682;
                uint _2960;
                bool _2961;
                for (;;)
                {
                    _2960 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2951 << 2u)) >> 2u)).x;
                    _2961 = _2960 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2961)
                    {
                        frontier_phi_82_pred = _2950;
                        frontier_phi_82_pred_1 = _2949;
                        frontier_phi_82_pred_2 = _2948;
                        frontier_phi_82_pred_3 = _2947;
                        frontier_phi_82_pred_4 = _2946;
                        frontier_phi_82_pred_5 = _2945;
                    }
                    else
                    {
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3166 = _2945;
                        float _3167 = _2946;
                        float _3168 = _2947;
                        float _3169 = _2948;
                        float _3170 = _2949;
                        float _3171 = _2950;
                        uint _3172 = _2960;
                        uint _3173;
                        vec4 _3198;
                        float _3199;
                        vec4 _3214;
                        vec3 _3226;
                        vec4 _3242;
                        vec4 _3258;
                        float _3305;
                        bool _3306;
                        for (;;)
                        {
                            uint _3183 = ((_2951 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3172));
                            _3173 = (_3172 + 4294967295u) & _3172;
                            uint _3185 = _3183 * 40u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            _3199 = _3198.w;
                            uint _3201 = (_3183 * 40u) + 4u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3216 = (_3183 * 40u) + 8u;
                            _3226 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x));
                            uint _3229 = (_3183 * 40u) + 16u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3245 = (_3183 * 40u) + 20u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3261 = (_3183 * 40u) + 24u;
                            vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3280 = (_3183 * 40u) + 28u;
                            vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            _3305 = fma(_1645, _3293.z, fma(_1644, _3293.y, _3293.x * _1643)) + _3293.w;
                            _3306 = !((fma(_1645, _3274.z, fma(_1644, _3274.y, _3274.x * _1643)) + _3274.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3306)
                            {
                                float _3333 = _3198.x - _1643;
                                float _3334 = _3198.y - _1644;
                                float _3335 = _3198.z - _1645;
                                float _3336 = dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335));
                                float _3339 = inversesqrt(_3336);
                                float _3340 = _3339 * _3333;
                                float _3341 = _3339 * _3334;
                                float _3342 = _3339 * _3335;
                                float _3346 = 1.0 - (_3336 / (_3199 * _3199));
                                float _4491 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3351 = sqrt(_3336) * _3214.w;
                                float _3353 = 1.39999997615814208984375 / (_3351 + 1.39999997615814208984375);
                                float _3354 = _3353 * _3353;
                                float _3357 = ((1.0 - _3354) * dot(vec3(_3340, _3341, _3342), vec3(_470, _473, _476))) + _3354;
                                float _3360 = _3351 * _3351;
                                float _3364 = (fma(_1645, _3242.z, fma(_1644, _3242.y, _3242.x * _1643)) + _3242.w) / _3305;
                                float _3365 = (fma(_1645, _3258.z, fma(_1644, _3258.y, _3258.x * _1643)) + _3258.w) / _3305;
                                float _3369 = 1.0 - dot(vec2(_3364, _3365), vec2(_3364, _3365));
                                float _4507 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3371 = _3370 * (((isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0))) * _3347) / ((_3360 * 0.699999988079071044921875) + 1.0));
                                float _3383 = exp2(log2(1.0 / ((_3360 * 3.5) + 5.0)) * 0.25);
                                float _3384 = 1.0 - _546;
                                float _3391 = sqrt(1.0 - ((1.0 - (_3384 * _3384)) * (1.0 - (_3383 * _3383))));
                                float _3392 = _3391 * _3391;
                                float _3393 = _3392 * _3392;
                                float _3394 = _3340 - _2811;
                                float _3395 = _3341 - _2812;
                                float _3396 = _3342 - _2813;
                                float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                                float _3404 = dot(vec3(_470, _473, _476), vec3((-0.0) - _2811, (-0.0) - _2812, (-0.0) - _2813));
                                float _4518 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3407 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3408 = dot(vec3(_470, _473, _476), vec3(_3400 * _3394, _3400 * _3395, _3400 * _3396));
                                float _4529 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3411 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3415 = ((_3411 * _3411) * (_3393 + (-1.0))) + 1.0;
                                float _3416 = _3353 * _3392;
                                float _3417 = _3416 * _3416;
                                float _3423 = ((1.0 - _3417) * dot(vec3(_470, _473, _476), vec3(_3340, _3341, _3342))) + _3417;
                                float _4540 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3425 = 1.0 - _3392;
                                float _3435 = (0.5 / (((_3424 * ((_3407 * _3425) + _3392)) + 9.9999999392252902907785028219223e-09) + (((_3424 * _3425) + _3392) * _3407))) * _3424;
                                float _4551 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3445 = (_3370 * _3347) * (((_3393 * 3.1415927410125732421875) * (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) / ((_3415 * _3415) * ((_3360 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3371 * _3214.z;
                                frontier_phi_88_pred_1 = _3371 * _3214.y;
                                frontier_phi_88_pred_2 = _3371 * _3214.x;
                                frontier_phi_88_pred_3 = _3445 * _3226.z;
                                frontier_phi_88_pred_4 = _3445 * _3226.y;
                                frontier_phi_88_pred_5 = _3445 * _3226.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3454 = frontier_phi_88_pred;
                            _3453 = frontier_phi_88_pred_1;
                            _3452 = frontier_phi_88_pred_2;
                            _3451 = frontier_phi_88_pred_3;
                            _3450 = frontier_phi_88_pred_4;
                            _3449 = frontier_phi_88_pred_5;
                            _3156 = _3452 + _3169;
                            _3157 = _3453 + _3170;
                            _3158 = _3454 + _3171;
                            _3153 = _3449 + _3166;
                            _3154 = _3450 + _3167;
                            _3155 = _3451 + _3168;
                            if (_3173 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3173;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3158;
                        frontier_phi_82_pred_1 = _3157;
                        frontier_phi_82_pred_2 = _3156;
                        frontier_phi_82_pred_3 = _3155;
                        frontier_phi_82_pred_4 = _3154;
                        frontier_phi_82_pred_5 = _3153;
                    }
                    _2796 = frontier_phi_82_pred;
                    _2794 = frontier_phi_82_pred_1;
                    _2792 = frontier_phi_82_pred_2;
                    _2790 = frontier_phi_82_pred_3;
                    _2788 = frontier_phi_82_pred_4;
                    _2786 = frontier_phi_82_pred_5;
                    uint _2952 = _2951 + 1u;
                    if (_2952 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2945 = _2786;
                        _2946 = _2788;
                        _2947 = _2790;
                        _2948 = _2792;
                        _2949 = _2794;
                        _2950 = _2796;
                        _2951 = _2952;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2792;
                frontier_phi_63_64_ladder_1 = _2796;
                frontier_phi_63_64_ladder_2 = _2794;
                frontier_phi_63_64_ladder_3 = _2790;
                frontier_phi_63_64_ladder_4 = _2788;
                frontier_phi_63_64_ladder_5 = _2786;
            }
            else
            {
                frontier_phi_63_64_ladder = _2671;
                frontier_phi_63_64_ladder_1 = _2675;
                frontier_phi_63_64_ladder_2 = _2673;
                frontier_phi_63_64_ladder_3 = _2669;
                frontier_phi_63_64_ladder_4 = _2667;
                frontier_phi_63_64_ladder_5 = _2665;
            }
            _2785 = frontier_phi_63_64_ladder_5;
            _2787 = frontier_phi_63_64_ladder_4;
            _2789 = frontier_phi_63_64_ladder_3;
            _2791 = frontier_phi_63_64_ladder;
            _2793 = frontier_phi_63_64_ladder_2;
            _2795 = frontier_phi_63_64_ladder_1;
        }
        float _2800 = isnan(1.0) ? _530 : (isnan(_530) ? 1.0 : min(_530, 1.0));
        _2598 = (_2800 * _2791) + _2110;
        _2600 = (_2800 * _2793) + _2112;
        _2602 = (_2800 * _2795) + _2114;
        _2604 = ((_2785 * _515) * _2800) + _2448;
        _2606 = ((_2787 * _517) * _2800) + _2450;
        _2608 = ((_2789 * _518) * _2800) + _2452;
    }
    else
    {
        _2598 = _2110;
        _2600 = _2112;
        _2602 = _2114;
        _2604 = _2448;
        _2606 = _2450;
        _2608 = _2452;
    }
    float _4567 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _4578 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _4589 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2625 = ((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2598 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _530))) + ((_2604 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1370)) * cbPerFrame._m0[3u].x);
    float _2626 = ((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2600 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _530))) + ((_2606 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _1370)) * cbPerFrame._m0[3u].x);
    float _2627 = ((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2602 + ((isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))) * _530))) + ((_2608 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _1370)) * cbPerFrame._m0[3u].x);
    uint _2628 = _489 + 6u;
    float _2636 = _449 / cbSceneParam._m0[86u].x;
    float _2637 = _450 / cbSceneParam._m0[86u].y;
    vec4 _2651 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, (log2((isnan(cbSceneParam._m0[77u].w) ? _375 : (isnan(_375) ? cbSceneParam._m0[77u].w : min(_375, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2653 = _2651.x;
    float _2654 = _2651.y;
    float _2655 = _2651.z;
    float _2656 = _2651.w;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    if (_375 > cbSceneParam._m0[78u].w)
    {
        float _2690 = isnan(_375) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _375 : min(cbSceneParam._m0[80u].w, _375));
        float _2691 = _2690 / _375;
        float _2702 = _2691 * _426;
        float _2703 = _427 * _2691;
        float _2704 = (-0.0) - _2703;
        float _2705 = _2691 * _428;
        float _2707 = (cbSceneParam._m0[77u].w * _2704) / _2690;
        float _2708 = _2707 + cbSceneParam._m0[79u].w;
        float _2709 = cbSceneParam._m0[79u].w - _2703;
        float _2715 = sqrt(((_2702 * _2702) + (_2703 * _2703)) + (_2705 * _2705));
        float _2718 = (1.0 - (cbSceneParam._m0[77u].w / _2690)) * _2715;
        float _2723 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2725 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2902;
        if (abs((_2704 - _2707) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2902 = ((((_2708 > 0.0) ? exp2(_2723 * _2708) : (2.0 - exp2(_2725 * _2708))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2718;
        }
        else
        {
            float _2846 = 1.0 / cbSceneParam._m0[80u].x;
            float _2847 = isnan(_2709) ? _2708 : (isnan(_2708) ? _2709 : max(_2708, _2709));
            float _2848 = isnan(_2709) ? _2708 : (isnan(_2708) ? _2709 : min(_2708, _2709));
            float _2857 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : min(_2847, 0.0));
            float _2858 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : min(_2848, 0.0));
            _2902 = ((abs(_2715 / _2704) * cbSceneParam._m0[80u].y) * ((((_2857 - _2858) * 2.0) - ((exp2(_2723 * (isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0)))) - exp2(_2723 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0))))) * _2846)) - ((exp2(_2725 * _2857) - exp2(_2725 * _2858)) * _2846))) + (_2718 * cbSceneParam._m0[80u].z);
        }
        vec4 _2904 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, 1.0), 0.0);
        float _2913 = exp2((_2902 * (-1.44269502162933349609375)) * (1.0 - _2904.w));
        float _2914 = log2(_2913);
        float _2930 = log2(_2656);
        _2727 = (exp2(_2930 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].x)) * _2904.x) / cbSceneParam._m0[78u].x)) + _2653;
        _2729 = (exp2(_2930 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].y)) * _2904.y) / cbSceneParam._m0[78u].y)) + _2654;
        _2731 = (exp2(_2930 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].z)) * _2904.z) / cbSceneParam._m0[78u].z)) + _2655;
        _2733 = _2913 * _2656;
    }
    else
    {
        _2727 = _2653;
        _2729 = _2654;
        _2731 = _2655;
        _2733 = _2656;
    }
    bool _2940;
    vec4 _2743;
    vec4 _2765;
    float _2767;
    float _2771;
    float _2772;
    float _2773;
    float _2774;
    bool _2784;
    for (;;)
    {
        _2743 = cbMatDynParam._m0[0u];
        float _2745 = roundEven(_2743.y);
        bool _2746 = _2745 == 3.0;
        float _2747 = log2(_2733);
        float _2754 = exp2(_2747 * cbSceneParam._m0[78u].x) * _2625;
        float _2755 = exp2(_2747 * cbSceneParam._m0[78u].y) * _2626;
        float _2756 = exp2(_2747 * cbSceneParam._m0[78u].z) * _2627;
        float _2763 = _438 + (-0.5);
        _2765 = cbMtdParam._m0[1u];
        _2767 = _2765.y * _2763;
        float _2770 = (_2745 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2771 = _2770 * (_2746 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2727)));
        _2772 = _2770 * (_2746 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2729)));
        _2773 = _2770 * (_2746 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2731)));
        _2774 = _2763 * 0.999000012874603271484375;
        _2784 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2784)
        {
            if ((cbInstanceData._m0[_489 + 7u].x + _2774) < 0.5)
            {
                _2940 = true;
                break;
            }
        }
        uint _2881 = _491 + uint(_2743.w);
        if ((cbInstanceData._m0[_2881].w < 1.0) && ((cbInstanceData._m0[_2881].w + _2774) < 0.5))
        {
            _2940 = true;
            break;
        }
        if ((_2767 + _298) < _2765.x)
        {
            _2940 = true;
            break;
        }
        _2940 = false;
        break;
    }
    float _3144;
    if (_2940)
    {
        discard_state = true;
        _3144 = 0.0;
    }
    else
    {
        _3144 = cbInstanceData._m0[_2628].w;
    }
    SV_Target.x = _2771;
    SV_Target.y = _2772;
    SV_Target.z = _2773;
    SV_Target.w = _3144;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2628].w;
    discard_exit();
}


