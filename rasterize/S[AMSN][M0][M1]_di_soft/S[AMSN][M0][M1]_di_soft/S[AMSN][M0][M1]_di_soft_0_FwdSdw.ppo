#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _835;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _229 = _223.x * cbMtdParam._m0[9u].x;
    float _230 = _223.y * cbMtdParam._m0[9u].y;
    float _231 = _223.z * cbMtdParam._m0[9u].z;
    vec4 _243 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _245 = _243.x;
    vec4 _257 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _261 = _257.z;
    float _265 = (_257.x * 2.0) + (-1.0);
    float _267 = (_257.y * 2.0) + (-1.0);
    float _268 = dot(vec2(_265, _267), vec2(_265, _267));
    float _3455 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _274 = sqrt(1.0 - (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))));
    float _277 = fma(_274, _193 * NORMAL.x, fma(_267, _200 * TANGENT.x, (_186 * _178) * _265));
    float _280 = fma(_274, _193 * NORMAL.y, fma(_267, _200 * TANGENT.y, (_186 * _179) * _265));
    float _283 = fma(_274, _193 * NORMAL.z, fma(_267, _200 * TANGENT.z, (_186 * _180) * _265));
    float _287 = inversesqrt(dot(vec3(_277, _280, _283), vec3(_277, _280, _283)));
    float _288 = _287 * _277;
    float _289 = _287 * _280;
    float _290 = _287 * _283;
    float _3466 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _291 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3488 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3499 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3510 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _295 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _311 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _353 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _363 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _353);
    float _364 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _353);
    float _365 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _353);
    float _369 = inversesqrt(dot(vec3(_363, _364, _365), vec3(_363, _364, _365)));
    float _370 = _363 * _369;
    float _371 = _364 * _369;
    float _372 = _365 * _369;
    float _378 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _379 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _400 = fma(_290, cbSceneParam._m0[5u].z, fma(_289, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _288));
    float _403 = fma(_290, cbSceneParam._m0[6u].z, fma(_289, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _288));
    float _406 = fma(_290, cbSceneParam._m0[7u].z, fma(_289, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _288));
    uint _419 = uint(roundEven(NORMAL.w)) * 13u;
    uint _422 = (_419 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _428 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) * cbInstanceData._m0[_422].x;
    float _429 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) * cbInstanceData._m0[_422].y;
    float _430 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) * cbInstanceData._m0[_422].z;
    float _3521 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _434 = 1.0 - _295;
    float _435 = _431 * _434;
    float _436 = _432 * _434;
    float _437 = _433 * _434;
    float _442 = (_431 + (-0.039999999105930328369140625)) * _295;
    float _443 = (_432 + (-0.039999999105930328369140625)) * _295;
    float _444 = (_433 + (-0.039999999105930328369140625)) * _295;
    float _445 = _442 + 0.039999999105930328369140625;
    float _447 = _443 + 0.039999999105930328369140625;
    float _448 = _444 + 0.039999999105930328369140625;
    vec4 _457 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _378, cbSceneParam._m0[86u].y * _379));
    float _460 = _457.x * TEXCOORD_1.w;
    float _461 = dot(vec3(_288, _289, _290), vec3(_370, _371, _372));
    float _464 = _461 * 2.0;
    float _468 = (_464 * _288) - _370;
    float _469 = (_464 * _289) - _371;
    float _470 = (_464 * _290) - _372;
    float _474 = abs(dot(vec3(_370, _371, _372), vec3(_288, _289, _290)));
    float _3554 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _476 = sqrt(_291);
    float _489 = exp2((_476 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_476 * 3.0));
    float _495 = (1.0 - _489) * ((_476 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _496 = _489 * _476;
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _834;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _559 = fma(_532, cbModelParam._m0[26u].z, fma(_528, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _524));
        float _563 = fma(_532, cbModelParam._m0[27u].z, fma(_528, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _524));
        float _567 = fma(_532, cbModelParam._m0[28u].z, fma(_528, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _524));
        float _592 = _524 + _288;
        float _593 = _528 + _289;
        float _594 = _532 + _290;
        float _604 = fma(_594, cbModelParam._m0[26u].z, fma(_593, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _592)) - _559;
        float _605 = fma(_594, cbModelParam._m0[27u].z, fma(_593, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _592)) - _563;
        float _606 = fma(_594, cbModelParam._m0[28u].z, fma(_593, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _592)) - _567;
        float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
        float _623 = ((_610 * _604) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_559 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _624 = ((_610 * _605) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_563 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _625 = ((_610 * _606) / cbModelParam._m0[34u].z) + ((((((_567 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_623, _624, _625), 0.0);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_623, _624, _625), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_623, _624, _625), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_623, _624, _625), 0.0);
        float _662 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _663 = _662 * (_628.x + (-0.5));
        float _664 = _662 * (_628.y + (-0.5));
        float _665 = _662 * (_628.z + (-0.5));
        float _672 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _673 = _672 * (_635.x + (-0.5));
        float _674 = _672 * (_635.y + (-0.5));
        float _675 = _672 * (_635.z + (-0.5));
        float _682 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_642.x + (-0.5));
        float _684 = _682 * (_642.y + (-0.5));
        float _685 = _682 * (_642.z + (-0.5));
        float _692 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_649.x + (-0.5));
        float _694 = _692 * (_649.y + (-0.5));
        float _695 = _692 * (_649.z + (-0.5));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _699 = _663 * 0.5;
        float _700 = _673 * 0.5;
        float _701 = _683 * 0.5;
        float _702 = dot(vec3(_699, _700, _701), vec3(_699, _700, _701));
        float _707 = (_702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_702);
        float _716 = (dot(vec3(_288, _289, _290), vec3(_707 * _699, _707 * _700, _707 * _701)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _726 = sqrt(((_700 * _700) + (_699 * _699)) + (_701 * _701)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _728 = _727 * 2.0;
        float _732 = (1.0 - _727) / (_727 + 1.0);
        float _3602 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _742 = ((((1.0 - _733) * (_728 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_728 + 1.0))) + _733) * _696;
        float _743 = _664 * 0.5;
        float _744 = _674 * 0.5;
        float _745 = _684 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _759 = (dot(vec3(_288, _289, _290), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _768 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _770 = _769 * 2.0;
        float _774 = (1.0 - _769) / (_769 + 1.0);
        float _3635 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _784 = ((((1.0 - _775) * (_770 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_770 + 1.0))) + _775) * _697;
        float _785 = _665 * 0.5;
        float _786 = _675 * 0.5;
        float _787 = _685 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _801 = (dot(vec3(_288, _289, _290), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _810 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_698 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3668 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_812 + 1.0))) + _817) * _698;
        _834 = _665;
        _836 = _664;
        _837 = _663;
        _838 = _675;
        _839 = _674;
        _840 = _673;
        _841 = _685;
        _842 = _684;
        _843 = _683;
        _844 = _698;
        _845 = _697;
        _846 = _696;
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0)));
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
        _849 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
    }
    else
    {
        _834 = _835;
        _836 = _835;
        _837 = _835;
        _838 = _835;
        _839 = _835;
        _840 = _835;
        _841 = _835;
        _842 = _835;
        _843 = _835;
        _844 = _835;
        _845 = _835;
        _846 = _835;
        _847 = 0.0;
        _848 = 0.0;
        _849 = 0.0;
    }
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _875 = fma(_532, cbModelParam._m0[30u].z, fma(_528, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _524));
        float _879 = fma(_532, cbModelParam._m0[31u].z, fma(_528, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _524));
        float _883 = fma(_532, cbModelParam._m0[32u].z, fma(_528, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _524));
        float _906 = _524 + _288;
        float _907 = _528 + _289;
        float _908 = _532 + _290;
        float _918 = fma(_908, cbModelParam._m0[30u].z, fma(_907, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _906)) - _875;
        float _919 = fma(_908, cbModelParam._m0[31u].z, fma(_907, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _906)) - _879;
        float _920 = fma(_908, cbModelParam._m0[32u].z, fma(_907, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _906)) - _883;
        float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
        float _937 = ((_924 * _918) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_875 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_924 * _919) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_879 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_924 * _920) / cbModelParam._m0[35u].z) + ((((((_883 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        float _974 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_941.x + (-0.5));
        float _976 = _974 * (_941.y + (-0.5));
        float _977 = _974 * (_941.z + (-0.5));
        float _984 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_948.x + (-0.5));
        float _986 = _984 * (_948.y + (-0.5));
        float _987 = _984 * (_948.z + (-0.5));
        float _994 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_955.x + (-0.5));
        float _996 = _994 * (_955.y + (-0.5));
        float _997 = _994 * (_955.z + (-0.5));
        float _1004 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_962.x + (-0.5));
        float _1006 = _1004 * (_962.y + (-0.5));
        float _1007 = _1004 * (_962.z + (-0.5));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = _975 * 0.5;
        float _1012 = _985 * 0.5;
        float _1013 = _995 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_288, _289, _290), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3731 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1038 + 1.0))) + _1043) * _1008;
        float _1053 = _976 * 0.5;
        float _1054 = _986 * 0.5;
        float _1055 = _996 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_288, _289, _290), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3764 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1080 + 1.0))) + _1085) * _1009;
        float _1095 = _977 * 0.5;
        float _1096 = _987 * 0.5;
        float _1097 = _997 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_288, _289, _290), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3797 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1122 + 1.0))) + _1127) * _1010;
        _1144 = _977;
        _1145 = _976;
        _1146 = _975;
        _1147 = _987;
        _1148 = _986;
        _1149 = _985;
        _1150 = _997;
        _1151 = _996;
        _1152 = _995;
        _1153 = _1010;
        _1154 = _1009;
        _1155 = _1008;
        _1156 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1158 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
    }
    else
    {
        _1144 = _835;
        _1145 = _835;
        _1146 = _835;
        _1147 = _835;
        _1148 = _835;
        _1149 = _835;
        _1150 = _835;
        _1151 = _835;
        _1152 = _835;
        _1153 = _835;
        _1154 = _835;
        _1155 = _835;
        _1156 = 0.0;
        _1157 = 0.0;
        _1158 = 0.0;
    }
    float _1168 = (cbModelParam._m0[1u].x * (_1156 - _847)) + _847;
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _848)) + _848;
    float _1170 = (cbModelParam._m0[1u].x * (_1158 - _849)) + _849;
    float _1191 = fma(_1170, cbSceneParam._m0[89u].z, fma(_1169, cbSceneParam._m0[89u].y, _1168 * cbSceneParam._m0[89u].x));
    float _1194 = fma(_1170, cbSceneParam._m0[90u].z, fma(_1169, cbSceneParam._m0[90u].y, _1168 * cbSceneParam._m0[90u].x));
    float _1197 = fma(_1170, cbSceneParam._m0[91u].z, fma(_1169, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1168));
    float _1212 = _468 * 0.5;
    float _1213 = _469 * 0.5;
    float _1214 = _470 * 0.5;
    float _1215 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_1146, _1149, _1152, _1155));
    float _1218 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1221 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_1144, _1147, _1150, _1153));
    float _1255;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1228 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_834, _838, _841, _844));
        float _1232 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_836, _839, _842, _845));
        float _1236 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_837, _840, _843, _846));
        float _1243 = dot(vec4(cbModelParam._m0[39u]), vec4(_1212, _1213, _1214, 1.0));
        _1255 = dot(vec3(isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1243) ? 0.0 : (isnan(0.0) ? _1243 : max(0.0, _1243))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1255 = 1.0;
    }
    float _1266;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1257 = dot(vec4(cbModelParam._m0[40u]), vec4(_1212, _1213, _1214, 1.0));
        _1266 = dot(vec3(isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)), isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)), isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1257) ? 0.0 : (isnan(0.0) ? _1257 : max(0.0, _1257))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1266 = 1.0;
    }
    float _1270 = (_1266 * cbModelParam._m0[1u].x) + (_1255 * (1.0 - cbModelParam._m0[1u].x));
    float _1280 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _291);
    float _1281 = isnan(_1280) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1280 : min(cbModelParam._m0[25u].z, _1280));
    float _1363;
    float _1365;
    float _1367;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1330 = fma(_532, cbModelParam._m0[13u].z, fma(_528, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _524)) + cbModelParam._m0[13u].w;
        float _1334 = fma(_532, cbModelParam._m0[14u].z, fma(_528, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _524)) + cbModelParam._m0[14u].w;
        float _1338 = fma(_532, cbModelParam._m0[15u].z, fma(_528, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _524)) + cbModelParam._m0[15u].w;
        float _1341 = fma(_470, cbModelParam._m0[13u].z, fma(_469, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _468));
        float _1344 = fma(_470, cbModelParam._m0[14u].z, fma(_469, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _468));
        float _1347 = fma(_470, cbModelParam._m0[15u].z, fma(_469, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _468));
        float _1375;
        if (_1341 > 0.0)
        {
            _1375 = abs((1.0 - _1330) / _1341);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1330 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1375 = frontier_phi_14_12_ladder;
        }
        float _1551;
        if (_1344 > 0.0)
        {
            _1551 = abs((1.0 - _1334) / _1344);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1334 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1551 = frontier_phi_23_19_ladder;
        }
        float _1847;
        if (_1347 > 0.0)
        {
            _1847 = abs((1.0 - _1338) / _1347);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1338 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1847 = frontier_phi_35_30_ladder;
        }
        float _1849 = isnan(_1551) ? _1375 : (isnan(_1375) ? _1551 : min(_1375, _1551));
        float _1850 = isnan(_1847) ? _1849 : (isnan(_1849) ? _1847 : min(_1849, _1847));
        float _1854 = (_1850 * _1341) + _1330;
        float _1855 = (_1850 * _1344) + _1334;
        float _1856 = (_1850 * _1347) + _1338;
        float _1857 = _1850 * 9.9999997473787516355514526367188e-05;
        float _1859 = (-1.0) - _1857;
        float _1861 = _1857 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1856 > _1861) || ((_1856 < _1859) || ((_1855 > _1861) || ((_1855 < _1859) || ((_1854 < _1859) || (_1854 > _1861))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2001 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1856, cbModelParam._m0[9u].z, fma(_1855, cbModelParam._m0[9u].y, _1854 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1856, cbModelParam._m0[10u].z, fma(_1855, cbModelParam._m0[10u].y, _1854 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1856, cbModelParam._m0[11u].z, fma(_1855, cbModelParam._m0[11u].y, _1854 * cbModelParam._m0[11u].x))), _1281);
            frontier_phi_13_35_ladder = _2001.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2001.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2001.x * cbModelParam._m0[1u].y;
        }
        _1363 = frontier_phi_13_35_ladder_2;
        _1365 = frontier_phi_13_35_ladder_1;
        _1367 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1351 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_468, _469, _470), _1281);
        _1363 = _1351.x * cbModelParam._m0[1u].y;
        _1365 = _1351.y * cbModelParam._m0[1u].y;
        _1367 = _1351.z * cbModelParam._m0[1u].y;
    }
    float _1371 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _291);
    float _1372 = isnan(_1371) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1371 : min(cbModelParam._m0[25u].w, _1371));
    float _1465;
    float _1467;
    float _1469;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1429 = fma(_532, cbModelParam._m0[21u].z, fma(_528, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _524)) + cbModelParam._m0[21u].w;
        float _1433 = fma(_532, cbModelParam._m0[22u].z, fma(_528, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _524)) + cbModelParam._m0[22u].w;
        float _1437 = fma(_532, cbModelParam._m0[23u].z, fma(_528, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _524)) + cbModelParam._m0[23u].w;
        float _1440 = fma(_470, cbModelParam._m0[21u].z, fma(_469, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _468));
        float _1443 = fma(_470, cbModelParam._m0[22u].z, fma(_469, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _468));
        float _1446 = fma(_470, cbModelParam._m0[23u].z, fma(_469, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _468));
        float _1556;
        if (_1440 > 0.0)
        {
            _1556 = abs((1.0 - _1429) / _1440);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1429 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1556 = frontier_phi_25_21_ladder;
        }
        float _1874;
        if (_1443 > 0.0)
        {
            _1874 = abs((1.0 - _1433) / _1443);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1433 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1874 = frontier_phi_37_32_ladder;
        }
        float _2212;
        if (_1446 > 0.0)
        {
            _2212 = abs((1.0 - _1437) / _1446);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1437 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2212 = frontier_phi_47_44_ladder;
        }
        float _2214 = isnan(_1874) ? _1556 : (isnan(_1556) ? _1874 : min(_1556, _1874));
        float _2215 = isnan(_2212) ? _2214 : (isnan(_2214) ? _2212 : min(_2214, _2212));
        float _2219 = (_2215 * _1440) + _1429;
        float _2220 = (_2215 * _1443) + _1433;
        float _2221 = (_2215 * _1446) + _1437;
        float _2222 = _2215 * 9.9999997473787516355514526367188e-05;
        float _2223 = (-1.0) - _2222;
        float _2225 = _2222 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2221 > _2225) || ((_2221 < _2223) || ((_2220 > _2225) || ((_2220 < _2223) || ((_2219 < _2223) || (_2219 > _2225))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2343 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2221, cbModelParam._m0[17u].z, fma(_2220, cbModelParam._m0[17u].y, _2219 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2221, cbModelParam._m0[18u].z, fma(_2220, cbModelParam._m0[18u].y, _2219 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2221, cbModelParam._m0[19u].z, fma(_2220, cbModelParam._m0[19u].y, _2219 * cbModelParam._m0[19u].x))), _1372);
            frontier_phi_22_47_ladder = _2343.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2343.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2343.x * cbModelParam._m0[1u].z;
        }
        _1465 = frontier_phi_22_47_ladder_2;
        _1467 = frontier_phi_22_47_ladder_1;
        _1469 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1449 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_468, _469, _470), _1372);
        _1465 = _1449.x * cbModelParam._m0[1u].z;
        _1467 = _1449.y * cbModelParam._m0[1u].z;
        _1469 = _1449.z * cbModelParam._m0[1u].z;
    }
    float _1482 = (((_495 * _445) + _496) * _460) * ((cbModelParam._m0[1u].w * (_1465 - _1363)) + _1363);
    float _1484 = (((_495 * _447) + _496) * _460) * ((cbModelParam._m0[1u].w * (_1467 - _1365)) + _1365);
    float _1486 = (((_495 * _448) + _496) * _460) * ((cbModelParam._m0[1u].w * (_1469 - _1367)) + _1367);
    float _1489 = fma(_1486, cbSceneParam._m0[89u].z, fma(_1484, cbSceneParam._m0[89u].y, _1482 * cbSceneParam._m0[89u].x));
    float _1492 = fma(_1486, cbSceneParam._m0[90u].z, fma(_1484, cbSceneParam._m0[90u].y, _1482 * cbSceneParam._m0[90u].x));
    float _1495 = fma(_1486, cbSceneParam._m0[91u].z, fma(_1484, cbSceneParam._m0[91u].y, _1482 * cbSceneParam._m0[91u].x));
    float _1530 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1534 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1538 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1542 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1543 = _1530 / _1542;
    float _1544 = _1534 / _1542;
    float _1545 = _1538 / _1542;
    float _1692;
    float _1693;
    float _1694;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1572 = ((uint(_1545 > cbSceneParam._m0[59u].y) + uint(_1545 > cbSceneParam._m0[59u].x)) + uint(_1545 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1573 = _1572 + 43u;
        uint _1581 = _1572 + 44u;
        uint _1589 = _1572 + 45u;
        uint _1597 = _1572 + 46u;
        float _1608 = fma(_1542, cbSceneParam._m0[_1573].w, fma(_1538, cbSceneParam._m0[_1573].z, fma(_1534, cbSceneParam._m0[_1573].y, _1530 * cbSceneParam._m0[_1573].x)));
        float _1612 = fma(_1542, cbSceneParam._m0[_1581].w, fma(_1538, cbSceneParam._m0[_1581].z, fma(_1534, cbSceneParam._m0[_1581].y, _1530 * cbSceneParam._m0[_1581].x)));
        float _1620 = fma(_1542, cbSceneParam._m0[_1597].w, fma(_1538, cbSceneParam._m0[_1597].z, fma(_1534, cbSceneParam._m0[_1597].y, _1530 * cbSceneParam._m0[_1597].x)));
        float _1625 = cbSceneParam._m0[33u].z * _1620;
        float _1627 = cbSceneParam._m0[33u].w * _1620;
        float _1630 = fma(_1542, cbSceneParam._m0[_1589].w, fma(_1538, cbSceneParam._m0[_1589].z, fma(_1534, cbSceneParam._m0[_1589].y, _1530 * cbSceneParam._m0[_1589].x))) / _1620;
        float _1678 = (cbSceneParam._m0[33u].x - sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545))) * cbSceneParam._m0[33u].y;
        float _3923 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1685 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1625 + _1608) / _1620, (_1627 + _1612) / _1620), _1630), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1627 + _1608) / _1620, (_1612 - _1625) / _1620), _1630), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1608 - _1625) / _1620, (_1612 - _1627) / _1620), _1630), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1608 - _1627) / _1620, (_1625 + _1612) / _1620), _1630), 0.0)).x), vec4(0.25)));
        _1692 = 1.0 - (_1685 * cbSceneParam._m0[34u].x);
        _1693 = 1.0 - (_1685 * cbSceneParam._m0[34u].y);
        _1694 = 1.0 - (_1685 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1692 = 1.0;
        _1693 = 1.0;
        _1694 = 1.0;
    }
    float _1758;
    float _1760;
    float _1762;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1746 = fma(_1542, cbSceneParam._m0[63u].w, fma(_1538, cbSceneParam._m0[63u].z, fma(_1534, cbSceneParam._m0[63u].y, _1530 * cbSceneParam._m0[63u].x)));
        float _1747 = fma(_1542, cbSceneParam._m0[60u].w, fma(_1538, cbSceneParam._m0[60u].z, fma(_1534, cbSceneParam._m0[60u].y, _1530 * cbSceneParam._m0[60u].x))) / _1746;
        float _1748 = fma(_1542, cbSceneParam._m0[61u].w, fma(_1538, cbSceneParam._m0[61u].z, fma(_1534, cbSceneParam._m0[61u].y, _1530 * cbSceneParam._m0[61u].x))) / _1746;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1747 >= cbSceneParam._m0[64u].x) && (_1748 >= cbSceneParam._m0[64u].y)) && (_1747 <= cbSceneParam._m0[64u].z)) && (_1748 <= cbSceneParam._m0[64u].w))
        {
            float _1887 = fma(_1542, cbSceneParam._m0[62u].w, fma(_1538, cbSceneParam._m0[62u].z, fma(_1534, cbSceneParam._m0[62u].y, _1530 * cbSceneParam._m0[62u].x))) / _1746;
            float _1891 = isnan(cbSceneParam._m0[41u].w) ? _1887 : (isnan(_1887) ? cbSceneParam._m0[41u].w : max(_1887, cbSceneParam._m0[41u].w));
            float _1934 = (cbSceneParam._m0[33u].x - sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545))) * cbSceneParam._m0[33u].y;
            float _3939 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
            float _1941 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1747, cbSceneParam._m0[33u].w + _1748), _1891), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1747, _1748 - cbSceneParam._m0[33u].z), _1891), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1747 - cbSceneParam._m0[33u].z, _1748 - cbSceneParam._m0[33u].w), _1891), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1747 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1748), _1891), 0.0)).x), vec4(0.25)));
            float _1945 = 1.0 - (_1941 * cbSceneParam._m0[34u].x);
            float _1946 = 1.0 - (_1941 * cbSceneParam._m0[34u].y);
            float _1947 = 1.0 - (_1941 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1947) ? _1694 : (isnan(_1694) ? _1947 : min(_1694, _1947));
            frontier_phi_34_33_ladder_1 = isnan(_1946) ? _1693 : (isnan(_1693) ? _1946 : min(_1693, _1946));
            frontier_phi_34_33_ladder_2 = isnan(_1945) ? _1692 : (isnan(_1692) ? _1945 : min(_1692, _1945));
        }
        else
        {
            frontier_phi_34_33_ladder = _1694;
            frontier_phi_34_33_ladder_1 = _1693;
            frontier_phi_34_33_ladder_2 = _1692;
        }
        _1758 = frontier_phi_34_33_ladder_2;
        _1760 = frontier_phi_34_33_ladder_1;
        _1762 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1758 = _1692;
        _1760 = _1693;
        _1762 = _1694;
    }
    uvec4 _1767 = floatBitsToUint(cbInstanceData._m0[_419 + 5u]);
    uint _1769 = _1767.x * 14u;
    uint _1770 = _1769 + 13u;
    float _1777 = _460 + (-1.0);
    float _1782 = (cbLight._m0[_1770].x * _1777) + 1.0;
    float _1783 = (cbLight._m0[_1770].y * _1777) + 1.0;
    float _1784 = (cbLight._m0[_1770].z * _1777) + 1.0;
    float _1785 = (cbLight._m0[_1770].w * _1777) + 1.0;
    uint _1786 = _1769 + 5u;
    float _1792 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
    uint _1796 = _1769 + 4u;
    float _1806 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
    uint _1810 = _1769 | 1u;
    float _1821 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_288, _289, _290));
    float _1824 = dot(vec3(cbLight._m0[_1810].xyz), vec3(_288, _289, _290));
    float _3975 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _3986 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1829 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * 0.3183098733425140380859375;
    float _1831 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.3183098733425140380859375;
    float _1838 = ((cbLight._m0[_1786].x * _1792) * _1831) + (((cbLight._m0[_1796].x * _1758) * _1806) * _1829);
    float _1839 = ((_1792 * cbLight._m0[_1786].y) * _1831) + (((cbLight._m0[_1796].y * _1760) * _1806) * _1829);
    float _1840 = ((_1792 * cbLight._m0[_1786].z) * _1831) + (((cbLight._m0[_1796].z * _1762) * _1806) * _1829);
    uvec4 _1844 = floatBitsToUint(cbLight._m0[_1769 + 12u]);
    bool _1846 = _1844.x == 0u;
    float _1948;
    float _1950;
    float _1952;
    if (_1846)
    {
        _1948 = _1838;
        _1950 = _1839;
        _1952 = _1840;
    }
    else
    {
        uint _1956 = _1769 + 6u;
        float _1972 = (dot(vec3(cbLight._m0[_1769 + 2u].xyz), vec3(_288, _289, _290)) * 0.5) + 0.5;
        float _1973 = _1972 * _1972;
        float _3997 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1974 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1975 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
        _1948 = (((cbLight._m0[_1956].x * 0.3183098733425140380859375) * _1974) * _1975) + _1838;
        _1950 = (((cbLight._m0[_1956].y * 0.3183098733425140380859375) * _1974) * _1975) + _1839;
        _1952 = (((cbLight._m0[_1956].z * 0.3183098733425140380859375) * _1974) * _1975) + _1840;
    }
    bool _1955 = _1844.y == 0u;
    float _2010;
    float _2012;
    float _2014;
    if (_1955)
    {
        _2010 = _1948;
        _2012 = _1950;
        _2014 = _1952;
    }
    else
    {
        uint _2183 = _1769 + 7u;
        float _2199 = (dot(vec3(cbLight._m0[_1769 + 3u].xyz), vec3(_288, _289, _290)) * 0.5) + 0.5;
        float _2200 = _2199 * _2199;
        float _4013 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2201 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _2202 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _2010 = (((cbLight._m0[_2183].x * 0.3183098733425140380859375) * _2201) * _2202) + _1948;
        _2012 = (((cbLight._m0[_2183].y * 0.3183098733425140380859375) * _2201) * _2202) + _1950;
        _2014 = (((cbLight._m0[_2183].z * 0.3183098733425140380859375) * _2201) * _2202) + _1952;
    }
    uint _2017 = _1769 + 8u;
    float _2030 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1769].w)) * _291) * 0.949999988079071044921875);
    float _2031 = _2030 * _2030;
    float _2032 = cbLight._m0[_1769].x + _370;
    float _2033 = cbLight._m0[_1769].y + _371;
    float _2034 = cbLight._m0[_1769].z + _372;
    float _2038 = inversesqrt(dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034)));
    float _2039 = _2038 * _2032;
    float _2040 = _2038 * _2033;
    float _2041 = _2038 * _2034;
    float _2042 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1769].xyz));
    float _4029 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _2046 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _2047 = dot(vec3(_288, _289, _290), vec3(_2039, _2040, _2041));
    float _4051 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _2051 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_2039, _2040, _2041));
    float _4062 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2055 = _2031 * _2031;
    float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
    float _2067 = exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0);
    float _2068 = 0.959999978542327880859375 - _442;
    float _2070 = 0.959999978542327880859375 - _443;
    float _2071 = 0.959999978542327880859375 - _444;
    float _2078 = 1.0 - _2031;
    float _2089 = (0.5 / (((_2046 * ((_2045 * _2078) + _2031)) + 9.9999999392252902907785028219223e-09) + (((_2046 * _2078) + _2031) * _2045))) * _2045;
    float _4073 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2091 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
    uint _2105 = _1769 + 9u;
    float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1810].w)) * _291) * 0.949999988079071044921875);
    float _2117 = _2116 * _2116;
    float _2118 = cbLight._m0[_1810].x + _370;
    float _2119 = cbLight._m0[_1810].y + _371;
    float _2120 = cbLight._m0[_1810].z + _372;
    float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
    float _2125 = _2124 * _2118;
    float _2126 = _2124 * _2119;
    float _2127 = _2124 * _2120;
    float _2128 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1810].xyz));
    float _4084 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _2132 = dot(vec3(_288, _289, _290), vec3(_2125, _2126, _2127));
    float _4095 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _2136 = dot(vec3(cbLight._m0[_1810].xyz), vec3(_2125, _2126, _2127));
    float _4106 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2140 = _2117 * _2117;
    float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
    float _2151 = exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0);
    float _2158 = 1.0 - _2117;
    float _2168 = (0.5 / (((_2046 * ((_2131 * _2158) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_2046 * _2158) + _2117) * _2131))) * _2131;
    float _4117 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2170 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
    float _2180 = (((((_2151 * _2068) + _445) * cbLight._m0[_2105].x) * _2170) * _1792) + ((((cbLight._m0[_2017].x * _1758) * ((_2067 * _2068) + _445)) * _2091) * _1806);
    float _2181 = (((((_2151 * _2070) + _447) * cbLight._m0[_2105].y) * _2170) * _1792) + ((((cbLight._m0[_2017].y * _1760) * ((_2067 * _2070) + _447)) * _2091) * _1806);
    float _2182 = (((((_2151 * _2071) + _448) * cbLight._m0[_2105].z) * _2170) * _1792) + ((((cbLight._m0[_2017].z * _1762) * ((_2067 * _2071) + _448)) * _2091) * _1806);
    float _2238;
    float _2240;
    float _2242;
    if (_1846)
    {
        _2238 = _2180;
        _2240 = _2181;
        _2242 = _2182;
    }
    else
    {
        uint _2244 = _1769 + 2u;
        uint _2248 = _1769 + 10u;
        float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _291) * 0.949999988079071044921875);
        float _2263 = _2262 * _2262;
        float _2264 = cbLight._m0[_2244].x + _370;
        float _2265 = cbLight._m0[_2244].y + _371;
        float _2266 = cbLight._m0[_2244].z + _372;
        float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
        float _2271 = _2270 * _2264;
        float _2272 = _2270 * _2265;
        float _2273 = _2270 * _2266;
        float _2274 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_2244].xyz));
        float _4128 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2278 = dot(vec3(_288, _289, _290), vec3(_2271, _2272, _2273));
        float _4139 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2282 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2271, _2272, _2273));
        float _4150 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2286 = _2263 * _2263;
        float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
        float _2297 = exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0);
        float _2304 = 1.0 - _2263;
        float _2314 = (0.5 / (((_2046 * ((_2277 * _2304) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2046 * _2304) + _2263) * _2277))) * _2277;
        float _4161 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2316 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
        float _2317 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
        _2238 = (((((_2297 * _2068) + _445) * cbLight._m0[_2248].x) * _2316) * _2317) + _2180;
        _2240 = (((((_2297 * _2070) + _447) * cbLight._m0[_2248].y) * _2316) * _2317) + _2181;
        _2242 = (((((_2297 * _2071) + _448) * cbLight._m0[_2248].z) * _2316) * _2317) + _2182;
    }
    float _2348;
    float _2350;
    float _2352;
    if (_1955)
    {
        _2348 = _2238;
        _2350 = _2240;
        _2352 = _2242;
    }
    else
    {
        uint _2359 = _1769 + 3u;
        uint _2363 = _1769 + 11u;
        float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _291) * 0.949999988079071044921875);
        float _2378 = _2377 * _2377;
        float _2379 = cbLight._m0[_2359].x + _370;
        float _2380 = cbLight._m0[_2359].y + _371;
        float _2381 = cbLight._m0[_2359].z + _372;
        float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
        float _2386 = _2385 * _2379;
        float _2387 = _2385 * _2380;
        float _2388 = _2385 * _2381;
        float _2389 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_2359].xyz));
        float _4177 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2393 = dot(vec3(_288, _289, _290), vec3(_2386, _2387, _2388));
        float _4188 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2397 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2386, _2387, _2388));
        float _4199 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2401 = _2378 * _2378;
        float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
        float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0);
        float _2419 = 1.0 - _2378;
        float _2429 = (0.5 / (((_2046 * ((_2392 * _2419) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2046 * _2419) + _2378) * _2392))) * _2392;
        float _4210 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2431 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
        float _2432 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _2348 = (((((_2412 * _2068) + _445) * cbLight._m0[_2363].x) * _2431) * _2432) + _2238;
        _2350 = (((((_2412 * _2070) + _447) * cbLight._m0[_2363].y) * _2431) * _2432) + _2240;
        _2352 = (((((_2412 * _2071) + _448) * cbLight._m0[_2363].z) * _2431) * _2432) + _2242;
    }
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    if (_1767.y == 0u)
    {
        uvec4 _2453 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2454 = _2453.x;
        uint _2465 = uint((float(_2453.y) * floor(float(uint(cbSceneParam._m0[85u].y * _379) / _2454))) + floor(float(uint(cbSceneParam._m0[85u].x * _378) / _2454)));
        float _2475 = (log2(_1545 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2476 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        uint _2479 = uint(isnan(14.0) ? _2476 : (isnan(_2476) ? 14.0 : min(_2476, 14.0)));
        uvec4 _2484 = texelFetch(g_lightClusterGridBuffer, int(((_2479 << 2u) + (_2465 << 6u)) >> 2u));
        uint _2485 = _2484.x;
        uint _2486 = _2453.z;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        if (((((1u << ((_2486 >> 4u) & 15u)) + 4294967295u) & _2485) == 0u) || ((_2486 & 240u) == 0u))
        {
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
        }
        else
        {
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            uint _2716 = 0u;
            uint _2725;
            bool _2726;
            for (;;)
            {
                _2725 = texelFetch(g_lightClassification, int((((_2479 << 5u) + (_2465 << 9u)) + (_2716 << 2u)) >> 2u)).x;
                _2726 = _2725 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2726)
                {
                    frontier_phi_66_pred = _2715;
                    frontier_phi_66_pred_1 = _2714;
                    frontier_phi_66_pred_2 = _2713;
                    frontier_phi_66_pred_3 = _2712;
                    frontier_phi_66_pred_4 = _2711;
                    frontier_phi_66_pred_5 = _2710;
                }
                else
                {
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    uint _2840;
                    _2834 = _2710;
                    _2835 = _2711;
                    _2836 = _2712;
                    _2837 = _2713;
                    _2838 = _2714;
                    _2839 = _2715;
                    _2840 = _2725;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    for (;;)
                    {
                        uint _2844 = uint(findLSB(_2840)) + (_2716 << 5u);
                        uint _2841 = (_2840 + 4294967295u) & _2840;
                        uint _2846 = _2844 * 48u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2866 = (_2844 * 48u) + 4u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2885 = (_2844 * 48u) + 8u;
                        vec3 _2896 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x));
                        float _2900 = _2860.x - _1543;
                        float _2901 = _2860.y - _1544;
                        float _2902 = _2860.z - _1545;
                        float _2903 = dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902));
                        float _2906 = inversesqrt(_2903);
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2910 = dot(vec3(_400, _403, _406), vec3(_2907, _2908, _2909));
                        float _2915 = 1.0 - (_2903 * _2860.w);
                        float _4236 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                        float _2917 = sqrt(_2903) * _2879.w;
                        float _2920 = 1.39999997615814208984375 / (_2917 + 1.39999997615814208984375);
                        float _2921 = _2920 * _2920;
                        float _2924 = ((1.0 - _2921) * _2910) + _2921;
                        float _2927 = _2917 * _2917;
                        float _2931 = ((isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0))) * _2916) / ((_2927 * 0.699999988079071044921875) + 1.0);
                        float _2935 = (-0.0) - _1543;
                        float _2936 = (-0.0) - _1544;
                        float _2937 = (-0.0) - _1545;
                        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
                        float _2942 = _2941 * _2935;
                        float _2943 = _2941 * _2936;
                        float _2944 = _2941 * _2937;
                        float _2951 = exp2(log2(1.0 / ((_2927 * 3.5) + 5.0)) * 0.25);
                        float _2952 = 1.0 - _476;
                        float _2959 = sqrt(1.0 - ((1.0 - (_2952 * _2952)) * (1.0 - (_2951 * _2951))));
                        float _2960 = _2959 * _2959;
                        float _2961 = _2960 * _2960;
                        float _2962 = _2942 + _2907;
                        float _2963 = _2943 + _2908;
                        float _2964 = _2944 + _2909;
                        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
                        float _2972 = dot(vec3(_400, _403, _406), vec3(_2942, _2943, _2944));
                        float _4252 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2975 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2976 = dot(vec3(_400, _403, _406), vec3(_2968 * _2962, _2968 * _2963, _2968 * _2964));
                        float _4263 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                        float _2983 = ((_2979 * _2979) * (_2961 + (-1.0))) + 1.0;
                        float _2984 = _2920 * _2960;
                        float _2985 = _2984 * _2984;
                        float _2988 = ((1.0 - _2985) * _2910) + _2985;
                        float _4274 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _2990 = 1.0 - _2960;
                        float _3000 = (0.5 / (((_2989 * ((_2975 * _2990) + _2960)) + 9.9999999392252902907785028219223e-09) + (((_2989 * _2990) + _2960) * _2975))) * _2989;
                        float _4285 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3011 = (((_2961 * 3.1415927410125732421875) * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) / ((_2983 * _2983) * ((_2927 * 2.1991131305694580078125) + 3.141590118408203125))) * _2916;
                        _2769 = (_2931 * _2879.x) + _2837;
                        _2770 = (_2931 * _2879.y) + _2838;
                        _2771 = (_2931 * _2879.z) + _2839;
                        _2766 = (_3011 * _2896.x) + _2834;
                        _2767 = (_3011 * _2896.y) + _2835;
                        _2768 = (_3011 * _2896.z) + _2836;
                        if (_2841 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2834 = _2766;
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2769;
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2841;
                        }
                    }
                    frontier_phi_66_pred = _2771;
                    frontier_phi_66_pred_1 = _2770;
                    frontier_phi_66_pred_2 = _2769;
                    frontier_phi_66_pred_3 = _2768;
                    frontier_phi_66_pred_4 = _2767;
                    frontier_phi_66_pred_5 = _2766;
                }
                _2576 = frontier_phi_66_pred;
                _2574 = frontier_phi_66_pred_1;
                _2572 = frontier_phi_66_pred_2;
                _2570 = frontier_phi_66_pred_3;
                _2568 = frontier_phi_66_pred_4;
                _2566 = frontier_phi_66_pred_5;
                uint _2717 = _2716 + 1u;
                if (_2717 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2710 = _2566;
                    _2711 = _2568;
                    _2712 = _2570;
                    _2713 = _2572;
                    _2714 = _2574;
                    _2715 = _2576;
                    _2716 = _2717;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
        }
        uvec4 _2579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2580 = _2579.z;
        uint _2582 = (_2580 >> 8u) & 15u;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        if (((4294967295u << _2582) & _2485) == 0u)
        {
            _2678 = _2565;
            _2680 = _2567;
            _2682 = _2569;
            _2684 = _2571;
            _2686 = _2573;
            _2688 = _2575;
        }
        else
        {
            float _2703 = inversesqrt(dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545)));
            float _2704 = _2703 * _1543;
            float _2705 = _2703 * _1544;
            float _2706 = _2703 * _1545;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2582 < ((_2580 >> 12u) & 15u))
            {
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2817 = _2565;
                float _2818 = _2567;
                float _2819 = _2569;
                float _2820 = _2571;
                float _2821 = _2573;
                float _2822 = _2575;
                uint _2823 = _2582;
                uint _2832;
                bool _2833;
                for (;;)
                {
                    _2832 = texelFetch(g_lightClassification, int((((_2479 << 5u) + (_2465 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                    _2833 = _2832 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2833)
                    {
                        frontier_phi_72_pred = _2822;
                        frontier_phi_72_pred_1 = _2821;
                        frontier_phi_72_pred_2 = _2820;
                        frontier_phi_72_pred_3 = _2819;
                        frontier_phi_72_pred_4 = _2818;
                        frontier_phi_72_pred_5 = _2817;
                    }
                    else
                    {
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3029 = _2817;
                        float _3030 = _2818;
                        float _3031 = _2819;
                        float _3032 = _2820;
                        float _3033 = _2821;
                        float _3034 = _2822;
                        uint _3035 = _2832;
                        uint _3036;
                        vec4 _3061;
                        float _3062;
                        vec4 _3077;
                        vec3 _3089;
                        vec4 _3105;
                        vec4 _3121;
                        float _3168;
                        bool _3169;
                        for (;;)
                        {
                            uint _3046 = ((_2823 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3035));
                            _3036 = (_3035 + 4294967295u) & _3035;
                            uint _3048 = _3046 * 40u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            _3062 = _3061.w;
                            uint _3064 = (_3046 * 40u) + 4u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3079 = (_3046 * 40u) + 8u;
                            _3089 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x));
                            uint _3092 = (_3046 * 40u) + 16u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3108 = (_3046 * 40u) + 20u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            uint _3124 = (_3046 * 40u) + 24u;
                            vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3143 = (_3046 * 40u) + 28u;
                            vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            _3168 = fma(_1545, _3156.z, fma(_1544, _3156.y, _3156.x * _1543)) + _3156.w;
                            _3169 = !((fma(_1545, _3137.z, fma(_1544, _3137.y, _3137.x * _1543)) + _3137.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3169)
                            {
                                float _3196 = _3061.x - _1543;
                                float _3197 = _3061.y - _1544;
                                float _3198 = _3061.z - _1545;
                                float _3199 = dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198));
                                float _3202 = inversesqrt(_3199);
                                float _3203 = _3202 * _3196;
                                float _3204 = _3202 * _3197;
                                float _3205 = _3202 * _3198;
                                float _3209 = 1.0 - (_3199 / (_3062 * _3062));
                                float _4296 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3210 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3214 = sqrt(_3199) * _3077.w;
                                float _3216 = 1.39999997615814208984375 / (_3214 + 1.39999997615814208984375);
                                float _3217 = _3216 * _3216;
                                float _3220 = ((1.0 - _3217) * dot(vec3(_3203, _3204, _3205), vec3(_400, _403, _406))) + _3217;
                                float _3223 = _3214 * _3214;
                                float _3227 = (fma(_1545, _3105.z, fma(_1544, _3105.y, _3105.x * _1543)) + _3105.w) / _3168;
                                float _3228 = (fma(_1545, _3121.z, fma(_1544, _3121.y, _3121.x * _1543)) + _3121.w) / _3168;
                                float _3232 = 1.0 - dot(vec2(_3227, _3228), vec2(_3227, _3228));
                                float _4312 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3233 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3234 = _3233 * (((isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0))) * _3210) / ((_3223 * 0.699999988079071044921875) + 1.0));
                                float _3246 = exp2(log2(1.0 / ((_3223 * 3.5) + 5.0)) * 0.25);
                                float _3247 = 1.0 - _476;
                                float _3254 = sqrt(1.0 - ((1.0 - (_3247 * _3247)) * (1.0 - (_3246 * _3246))));
                                float _3255 = _3254 * _3254;
                                float _3256 = _3255 * _3255;
                                float _3257 = _3203 - _2704;
                                float _3258 = _3204 - _2705;
                                float _3259 = _3205 - _2706;
                                float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                                float _3267 = dot(vec3(_400, _403, _406), vec3((-0.0) - _2704, (-0.0) - _2705, (-0.0) - _2706));
                                float _4323 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3270 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3271 = dot(vec3(_400, _403, _406), vec3(_3263 * _3257, _3263 * _3258, _3263 * _3259));
                                float _4334 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3274 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3278 = ((_3274 * _3274) * (_3256 + (-1.0))) + 1.0;
                                float _3279 = _3216 * _3255;
                                float _3280 = _3279 * _3279;
                                float _3286 = ((1.0 - _3280) * dot(vec3(_400, _403, _406), vec3(_3203, _3204, _3205))) + _3280;
                                float _4345 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3288 = 1.0 - _3255;
                                float _3298 = (0.5 / (((_3287 * ((_3270 * _3288) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_3287 * _3288) + _3255) * _3270))) * _3287;
                                float _4356 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3308 = (_3233 * _3210) * (((_3256 * 3.1415927410125732421875) * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) / ((_3278 * _3278) * ((_3223 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3234 * _3077.y;
                                frontier_phi_78_pred_1 = _3234 * _3077.x;
                                frontier_phi_78_pred_2 = _3308 * _3089.z;
                                frontier_phi_78_pred_3 = _3308 * _3089.y;
                                frontier_phi_78_pred_4 = _3308 * _3089.x;
                                frontier_phi_78_pred_5 = _3234 * _3077.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3316 = frontier_phi_78_pred;
                            _3315 = frontier_phi_78_pred_1;
                            _3314 = frontier_phi_78_pred_2;
                            _3313 = frontier_phi_78_pred_3;
                            _3312 = frontier_phi_78_pred_4;
                            _3317 = frontier_phi_78_pred_5;
                            _3019 = _3315 + _3032;
                            _3020 = _3316 + _3033;
                            _3021 = _3317 + _3034;
                            _3016 = _3312 + _3029;
                            _3017 = _3313 + _3030;
                            _3018 = _3314 + _3031;
                            if (_3036 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3036;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3021;
                        frontier_phi_72_pred_1 = _3020;
                        frontier_phi_72_pred_2 = _3019;
                        frontier_phi_72_pred_3 = _3018;
                        frontier_phi_72_pred_4 = _3017;
                        frontier_phi_72_pred_5 = _3016;
                    }
                    _2689 = frontier_phi_72_pred;
                    _2687 = frontier_phi_72_pred_1;
                    _2685 = frontier_phi_72_pred_2;
                    _2683 = frontier_phi_72_pred_3;
                    _2681 = frontier_phi_72_pred_4;
                    _2679 = frontier_phi_72_pred_5;
                    uint _2824 = _2823 + 1u;
                    if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2817 = _2679;
                        _2818 = _2681;
                        _2819 = _2683;
                        _2820 = _2685;
                        _2821 = _2687;
                        _2822 = _2689;
                        _2823 = _2824;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2689;
                frontier_phi_60_61_ladder_1 = _2687;
                frontier_phi_60_61_ladder_2 = _2683;
                frontier_phi_60_61_ladder_3 = _2681;
                frontier_phi_60_61_ladder_4 = _2679;
                frontier_phi_60_61_ladder_5 = _2685;
            }
            else
            {
                frontier_phi_60_61_ladder = _2575;
                frontier_phi_60_61_ladder_1 = _2573;
                frontier_phi_60_61_ladder_2 = _2569;
                frontier_phi_60_61_ladder_3 = _2567;
                frontier_phi_60_61_ladder_4 = _2565;
                frontier_phi_60_61_ladder_5 = _2571;
            }
            _2678 = frontier_phi_60_61_ladder_4;
            _2680 = frontier_phi_60_61_ladder_3;
            _2682 = frontier_phi_60_61_ladder_2;
            _2684 = frontier_phi_60_61_ladder_5;
            _2686 = frontier_phi_60_61_ladder_1;
            _2688 = frontier_phi_60_61_ladder;
        }
        float _2693 = isnan(1.0) ? _460 : (isnan(_460) ? 1.0 : min(_460, 1.0));
        _2498 = (_2693 * _2684) + _2010;
        _2500 = (_2693 * _2686) + _2012;
        _2502 = (_2693 * _2688) + _2014;
        _2504 = ((_2678 * _445) * _2693) + _2348;
        _2506 = ((_2680 * _447) * _2693) + _2350;
        _2508 = ((_2682 * _448) * _2693) + _2352;
    }
    else
    {
        _2498 = _2010;
        _2500 = _2012;
        _2502 = _2014;
        _2504 = _2348;
        _2506 = _2350;
        _2508 = _2352;
    }
    float _4372 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4383 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4394 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    uint _2528 = _419 + 6u;
    float _2536 = _378 / cbSceneParam._m0[86u].x;
    float _2537 = _379 / cbSceneParam._m0[86u].y;
    vec4 _2551 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, (log2((isnan(cbSceneParam._m0[77u].w) ? _311 : (isnan(_311) ? cbSceneParam._m0[77u].w : min(_311, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2553 = _2551.x;
    float _2554 = _2551.y;
    float _2555 = _2551.z;
    float _2556 = _2551.w;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    if (_311 > cbSceneParam._m0[78u].w)
    {
        float _2590 = isnan(_311) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _311 : min(cbSceneParam._m0[80u].w, _311));
        float _2591 = _2590 / _311;
        float _2602 = _2591 * _363;
        float _2603 = _364 * _2591;
        float _2604 = (-0.0) - _2603;
        float _2606 = _2591 * _365;
        float _2608 = (cbSceneParam._m0[77u].w * _2604) / _2590;
        float _2609 = _2608 + cbSceneParam._m0[79u].w;
        float _2610 = cbSceneParam._m0[79u].w - _2603;
        float _2616 = sqrt(((_2602 * _2602) + (_2603 * _2603)) + (_2606 * _2606));
        float _2619 = (1.0 - (cbSceneParam._m0[77u].w / _2590)) * _2616;
        float _2624 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2626 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2779;
        if (abs((_2604 - _2608) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2779 = ((((_2609 > 0.0) ? exp2(_2624 * _2609) : (2.0 - exp2(_2626 * _2609))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2619;
        }
        else
        {
            float _2739 = 1.0 / cbSceneParam._m0[80u].x;
            float _2740 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : max(_2609, _2610));
            float _2741 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : min(_2609, _2610));
            float _2750 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : min(_2740, 0.0));
            float _2751 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : min(_2741, 0.0));
            _2779 = ((abs(_2616 / _2604) * cbSceneParam._m0[80u].y) * ((((_2750 - _2751) * 2.0) - ((exp2(_2624 * (isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0)))) - exp2(_2624 * (isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))))) * _2739)) - ((exp2(_2626 * _2750) - exp2(_2626 * _2751)) * _2739))) + (_2619 * cbSceneParam._m0[80u].z);
        }
        vec4 _2781 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, 1.0), 0.0);
        float _2790 = exp2((_2779 * (-1.44269502162933349609375)) * (1.0 - _2781.w));
        float _2791 = log2(_2790);
        float _2807 = log2(_2556);
        _2628 = (exp2(_2807 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].x)) * _2781.x) / cbSceneParam._m0[78u].x)) + _2553;
        _2630 = (exp2(_2807 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].y)) * _2781.y) / cbSceneParam._m0[78u].y)) + _2554;
        _2632 = (exp2(_2807 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].z)) * _2781.z) / cbSceneParam._m0[78u].z)) + _2555;
        _2634 = _2790 * _2556;
    }
    else
    {
        _2628 = _2553;
        _2630 = _2554;
        _2632 = _2555;
        _2634 = _2556;
    }
    float _2646 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2647 = _2646 == 3.0;
    float _2648 = log2(_2634);
    float _2655 = exp2(_2648 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2498 + ((isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))) * _460))) + ((_2504 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _1270)) * cbPerFrame._m0[3u].x));
    float _2656 = exp2(_2648 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2500 + ((isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))) * _460))) + ((_2506 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _1270)) * cbPerFrame._m0[3u].x));
    float _2657 = exp2(_2648 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2502 + ((isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0))) * _460))) + ((_2508 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _1270)) * cbPerFrame._m0[3u].x));
    float _2666 = (_2646 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2666 * (_2647 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2628)));
    SV_Target.y = _2666 * (_2647 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2630)));
    SV_Target.z = _2666 * (_2647 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2632)));
    SV_Target.w = cbInstanceData._m0[_2528].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2528].w;
}


