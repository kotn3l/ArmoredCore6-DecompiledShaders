#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _897;
float _3549;
float _3550;
float _3551;
float _3552;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _238 = _231.x * cbMtdParam._m0[9u].x;
    float _239 = _231.y * cbMtdParam._m0[9u].y;
    float _240 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _255 = _253.x;
    float _279 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _255)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _255))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3561 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _284 = gl_FragCoord.x * 0.125;
    float _286 = gl_FragCoord.y * 0.125;
    float _296 = float(((_231.w * TEXCOORD_1.z) * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_284, _286)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _308 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _312 = _308.z;
    float _316 = (_308.x * 2.0) + (-1.0);
    float _318 = (_308.y * 2.0) + (-1.0);
    float _319 = dot(vec2(_316, _318), vec2(_316, _318));
    float _3572 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _324 = sqrt(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))));
    float _327 = fma(_324, _201 * NORMAL.x, fma(_318, _208 * TANGENT.x, (_194 * _186) * _316));
    float _330 = fma(_324, _201 * NORMAL.y, fma(_318, _208 * TANGENT.y, (_194 * _187) * _316));
    float _333 = fma(_324, _201 * NORMAL.z, fma(_318, _208 * TANGENT.z, (_194 * _188) * _316));
    float _337 = inversesqrt(dot(vec3(_327, _330, _333), vec3(_327, _330, _333)));
    float _338 = _337 * _327;
    float _339 = _337 * _330;
    float _340 = _337 * _333;
    float _3583 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _341 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3605 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3616 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _358 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _399 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _409 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _399);
    float _410 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _399);
    float _411 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _399);
    float _415 = inversesqrt(dot(vec3(_409, _410, _411), vec3(_409, _410, _411)));
    float _416 = _409 * _415;
    float _417 = _410 * _415;
    float _418 = _411 * _415;
    vec4 _419 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_284, _286));
    float _421 = _419.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _578 = sqrt(((_409 * _409) + (_410 * _410)) + (_411 * _411));
        float _584 = (cbMatDynParam._m0[5u].x * _578) + cbMatDynParam._m0[5u].y;
        float _3627 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _585 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _589 = (cbMatDynParam._m0[5u].z * _578) + cbMatDynParam._m0[5u].w;
        float _3638 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) - _585)) + _585) < ((_421 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _432 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _433 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _453 = fma(_340, cbSceneParam._m0[5u].z, fma(_339, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _338));
    float _456 = fma(_340, cbSceneParam._m0[6u].z, fma(_339, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _338));
    float _459 = fma(_340, cbSceneParam._m0[7u].z, fma(_339, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _338));
    uint _472 = uint(roundEven(NORMAL.w)) * 13u;
    uint _474 = _472 + 9u;
    uint _475 = _474 + uint(cbMatDynParam._m0[0u].w);
    float _481 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * cbInstanceData._m0[_475].x;
    float _482 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_475].y;
    float _483 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * cbInstanceData._m0[_475].z;
    float _3649 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _484 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _485 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _486 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    vec4 _495 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _432, cbSceneParam._m0[86u].y * _433));
    float _498 = _495.x * TEXCOORD_1.w;
    float _499 = dot(vec3(_338, _339, _340), vec3(_416, _417, _418));
    float _502 = _499 * 2.0;
    float _506 = (_502 * _338) - _416;
    float _507 = (_502 * _339) - _417;
    float _508 = (_502 * _340) - _418;
    float _512 = abs(dot(vec3(_416, _417, _418), vec3(_338, _339, _340)));
    float _3682 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _514 = sqrt(_341);
    float _527 = exp2((_514 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_514 * 3.0));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _896;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _621 = fma(_567, cbModelParam._m0[26u].z, fma(_563, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _559));
        float _625 = fma(_567, cbModelParam._m0[27u].z, fma(_563, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _559));
        float _629 = fma(_567, cbModelParam._m0[28u].z, fma(_563, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _559));
        float _654 = _559 + _338;
        float _655 = _563 + _339;
        float _656 = _567 + _340;
        float _666 = fma(_656, cbModelParam._m0[26u].z, fma(_655, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _654)) - _621;
        float _667 = fma(_656, cbModelParam._m0[27u].z, fma(_655, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _654)) - _625;
        float _668 = fma(_656, cbModelParam._m0[28u].z, fma(_655, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _654)) - _629;
        float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
        float _685 = ((_672 * _666) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_621 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_672 * _667) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_625 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _687 = ((_672 * _668) / cbModelParam._m0[34u].z) + ((((((_629 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        float _724 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_690.x + (-0.5));
        float _726 = _724 * (_690.y + (-0.5));
        float _727 = _724 * (_690.z + (-0.5));
        float _734 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_697.x + (-0.5));
        float _736 = _734 * (_697.y + (-0.5));
        float _737 = _734 * (_697.z + (-0.5));
        float _744 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_704.x + (-0.5));
        float _746 = _744 * (_704.y + (-0.5));
        float _747 = _744 * (_704.z + (-0.5));
        float _754 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_711.x + (-0.5));
        float _756 = _754 * (_711.y + (-0.5));
        float _757 = _754 * (_711.z + (-0.5));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = _725 * 0.5;
        float _762 = _735 * 0.5;
        float _763 = _745 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _778 = (dot(vec3(_338, _339, _340), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _788 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3730 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_790 + 1.0))) + _795) * _758;
        float _805 = _726 * 0.5;
        float _806 = _736 * 0.5;
        float _807 = _746 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_338, _339, _340), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3763 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_832 + 1.0))) + _837) * _759;
        float _847 = _727 * 0.5;
        float _848 = _737 * 0.5;
        float _849 = _747 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _863 = (dot(vec3(_338, _339, _340), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _872 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3796 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_874 + 1.0))) + _879) * _760;
        _896 = _727;
        _898 = _726;
        _899 = _725;
        _900 = _737;
        _901 = _736;
        _902 = _735;
        _903 = _747;
        _904 = _746;
        _905 = _745;
        _906 = _760;
        _907 = _759;
        _908 = _758;
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
    }
    else
    {
        _896 = _897;
        _898 = _897;
        _899 = _897;
        _900 = _897;
        _901 = _897;
        _902 = _897;
        _903 = _897;
        _904 = _897;
        _905 = _897;
        _906 = _897;
        _907 = _897;
        _908 = _897;
        _909 = 0.0;
        _910 = 0.0;
        _911 = 0.0;
    }
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _940 = fma(_567, cbModelParam._m0[30u].z, fma(_563, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _559));
        float _944 = fma(_567, cbModelParam._m0[31u].z, fma(_563, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _559));
        float _948 = fma(_567, cbModelParam._m0[32u].z, fma(_563, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _559));
        float _971 = _559 + _338;
        float _972 = _563 + _339;
        float _973 = _567 + _340;
        float _983 = fma(_973, cbModelParam._m0[30u].z, fma(_972, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _971)) - _940;
        float _984 = fma(_973, cbModelParam._m0[31u].z, fma(_972, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _971)) - _944;
        float _985 = fma(_973, cbModelParam._m0[32u].z, fma(_972, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _971)) - _948;
        float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
        float _1002 = ((_989 * _983) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_940 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_989 * _984) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_944 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_989 * _985) / cbModelParam._m0[35u].z) + ((((((_948 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        float _1039 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1006.x + (-0.5));
        float _1041 = _1039 * (_1006.y + (-0.5));
        float _1042 = _1039 * (_1006.z + (-0.5));
        float _1049 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1013.x + (-0.5));
        float _1051 = _1049 * (_1013.y + (-0.5));
        float _1052 = _1049 * (_1013.z + (-0.5));
        float _1059 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1020.x + (-0.5));
        float _1061 = _1059 * (_1020.y + (-0.5));
        float _1062 = _1059 * (_1020.z + (-0.5));
        float _1069 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1027.x + (-0.5));
        float _1071 = _1069 * (_1027.y + (-0.5));
        float _1072 = _1069 * (_1027.z + (-0.5));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = _1040 * 0.5;
        float _1077 = _1050 * 0.5;
        float _1078 = _1060 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_338, _339, _340), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3859 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1103 + 1.0))) + _1108) * _1073;
        float _1118 = _1041 * 0.5;
        float _1119 = _1051 * 0.5;
        float _1120 = _1061 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_338, _339, _340), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3892 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1145 + 1.0))) + _1150) * _1074;
        float _1160 = _1042 * 0.5;
        float _1161 = _1052 * 0.5;
        float _1162 = _1062 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_338, _339, _340), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3925 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1187 + 1.0))) + _1192) * _1075;
        _1209 = _1042;
        _1210 = _1041;
        _1211 = _1040;
        _1212 = _1052;
        _1213 = _1051;
        _1214 = _1050;
        _1215 = _1062;
        _1216 = _1061;
        _1217 = _1060;
        _1218 = _1075;
        _1219 = _1074;
        _1220 = _1073;
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
    }
    else
    {
        _1209 = _897;
        _1210 = _897;
        _1211 = _897;
        _1212 = _897;
        _1213 = _897;
        _1214 = _897;
        _1215 = _897;
        _1216 = _897;
        _1217 = _897;
        _1218 = _897;
        _1219 = _897;
        _1220 = _897;
        _1221 = 0.0;
        _1222 = 0.0;
        _1223 = 0.0;
    }
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _909)) + _909;
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _910)) + _910;
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _911)) + _911;
    float _1256 = fma(_1235, cbSceneParam._m0[89u].z, fma(_1234, cbSceneParam._m0[89u].y, _1233 * cbSceneParam._m0[89u].x));
    float _1259 = fma(_1235, cbSceneParam._m0[90u].z, fma(_1234, cbSceneParam._m0[90u].y, _1233 * cbSceneParam._m0[90u].x));
    float _1262 = fma(_1235, cbSceneParam._m0[91u].z, fma(_1234, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1233));
    float _1277 = _506 * 0.5;
    float _1278 = _507 * 0.5;
    float _1279 = _508 * 0.5;
    float _1280 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1283 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1286 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1320;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1293 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_896, _900, _903, _906));
        float _1297 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_898, _901, _904, _907));
        float _1301 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_899, _902, _905, _908));
        float _1308 = dot(vec4(cbModelParam._m0[39u]), vec4(_1277, _1278, _1279, 1.0));
        _1320 = dot(vec3(isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1308) ? 0.0 : (isnan(0.0) ? _1308 : max(0.0, _1308))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1320 = 1.0;
    }
    float _1331;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1322 = dot(vec4(cbModelParam._m0[40u]), vec4(_1277, _1278, _1279, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1322) ? 0.0 : (isnan(0.0) ? _1322 : max(0.0, _1322))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1335 = (_1331 * cbModelParam._m0[1u].x) + (_1320 * (1.0 - cbModelParam._m0[1u].x));
    float _1345 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _341);
    float _1346 = isnan(_1345) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1345 : min(cbModelParam._m0[25u].z, _1345));
    float _1428;
    float _1430;
    float _1432;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1395 = fma(_567, cbModelParam._m0[13u].z, fma(_563, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _559)) + cbModelParam._m0[13u].w;
        float _1399 = fma(_567, cbModelParam._m0[14u].z, fma(_563, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _559)) + cbModelParam._m0[14u].w;
        float _1403 = fma(_567, cbModelParam._m0[15u].z, fma(_563, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _559)) + cbModelParam._m0[15u].w;
        float _1406 = fma(_508, cbModelParam._m0[13u].z, fma(_507, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _506));
        float _1409 = fma(_508, cbModelParam._m0[14u].z, fma(_507, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _506));
        float _1412 = fma(_508, cbModelParam._m0[15u].z, fma(_507, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _506));
        float _1440;
        if (_1406 > 0.0)
        {
            _1440 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1440 = frontier_phi_17_15_ladder;
        }
        float _1614;
        if (_1409 > 0.0)
        {
            _1614 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1614 = frontier_phi_26_22_ladder;
        }
        float _1910;
        if (_1412 > 0.0)
        {
            _1910 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1910 = frontier_phi_38_33_ladder;
        }
        float _1912 = isnan(_1614) ? _1440 : (isnan(_1440) ? _1614 : min(_1440, _1614));
        float _1913 = isnan(_1910) ? _1912 : (isnan(_1912) ? _1910 : min(_1912, _1910));
        float _1917 = (_1913 * _1406) + _1395;
        float _1918 = (_1913 * _1409) + _1399;
        float _1919 = (_1913 * _1412) + _1403;
        float _1920 = _1913 * 9.9999997473787516355514526367188e-05;
        float _1922 = (-1.0) - _1920;
        float _1924 = _1920 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1919 > _1924) || ((_1919 < _1922) || ((_1918 > _1924) || ((_1918 < _1922) || ((_1917 < _1922) || (_1917 > _1924))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2064 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1919, cbModelParam._m0[9u].z, fma(_1918, cbModelParam._m0[9u].y, _1917 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1919, cbModelParam._m0[10u].z, fma(_1918, cbModelParam._m0[10u].y, _1917 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1919, cbModelParam._m0[11u].z, fma(_1918, cbModelParam._m0[11u].y, _1917 * cbModelParam._m0[11u].x))), _1346);
            frontier_phi_16_38_ladder = _2064.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2064.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2064.x * cbModelParam._m0[1u].y;
        }
        _1428 = frontier_phi_16_38_ladder_2;
        _1430 = frontier_phi_16_38_ladder_1;
        _1432 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_506, _507, _508), _1346);
        _1428 = _1416.x * cbModelParam._m0[1u].y;
        _1430 = _1416.y * cbModelParam._m0[1u].y;
        _1432 = _1416.z * cbModelParam._m0[1u].y;
    }
    float _1436 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _341);
    float _1437 = isnan(_1436) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1436 : min(cbModelParam._m0[25u].w, _1436));
    float _1530;
    float _1532;
    float _1534;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1494 = fma(_567, cbModelParam._m0[21u].z, fma(_563, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _559)) + cbModelParam._m0[21u].w;
        float _1498 = fma(_567, cbModelParam._m0[22u].z, fma(_563, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _559)) + cbModelParam._m0[22u].w;
        float _1502 = fma(_567, cbModelParam._m0[23u].z, fma(_563, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _559)) + cbModelParam._m0[23u].w;
        float _1505 = fma(_508, cbModelParam._m0[21u].z, fma(_507, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _506));
        float _1508 = fma(_508, cbModelParam._m0[22u].z, fma(_507, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _506));
        float _1511 = fma(_508, cbModelParam._m0[23u].z, fma(_507, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _506));
        float _1619;
        if (_1505 > 0.0)
        {
            _1619 = abs((1.0 - _1494) / _1505);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1494 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1619 = frontier_phi_28_24_ladder;
        }
        float _1937;
        if (_1508 > 0.0)
        {
            _1937 = abs((1.0 - _1498) / _1508);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1498 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1937 = frontier_phi_40_35_ladder;
        }
        float _2264;
        if (_1511 > 0.0)
        {
            _2264 = abs((1.0 - _1502) / _1511);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1502 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2264 = frontier_phi_50_47_ladder;
        }
        float _2266 = isnan(_1937) ? _1619 : (isnan(_1619) ? _1937 : min(_1619, _1937));
        float _2267 = isnan(_2264) ? _2266 : (isnan(_2266) ? _2264 : min(_2266, _2264));
        float _2271 = (_2267 * _1505) + _1494;
        float _2272 = (_2267 * _1508) + _1498;
        float _2273 = (_2267 * _1511) + _1502;
        float _2274 = _2267 * 9.9999997473787516355514526367188e-05;
        float _2275 = (-1.0) - _2274;
        float _2277 = _2274 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2273 > _2277) || ((_2273 < _2275) || ((_2272 > _2277) || ((_2272 < _2275) || ((_2271 < _2275) || (_2271 > _2277))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2273, cbModelParam._m0[17u].z, fma(_2272, cbModelParam._m0[17u].y, _2271 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2273, cbModelParam._m0[18u].z, fma(_2272, cbModelParam._m0[18u].y, _2271 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2273, cbModelParam._m0[19u].z, fma(_2272, cbModelParam._m0[19u].y, _2271 * cbModelParam._m0[19u].x))), _1437);
            frontier_phi_25_50_ladder = _2391.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2391.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2391.x * cbModelParam._m0[1u].z;
        }
        _1530 = frontier_phi_25_50_ladder_2;
        _1532 = frontier_phi_25_50_ladder_1;
        _1534 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_506, _507, _508), _1437);
        _1530 = _1514.x * cbModelParam._m0[1u].z;
        _1532 = _1514.y * cbModelParam._m0[1u].z;
        _1534 = _1514.z * cbModelParam._m0[1u].z;
    }
    float _1546 = ((((1.0 - _527) * ((_514 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_527 * _514)) * _498;
    float _1547 = _1546 * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1548 = _1546 * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1549 = _1546 * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1552 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1548, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1548, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1548, cbSceneParam._m0[91u].y, _1547 * cbSceneParam._m0[91u].x));
    float _1593 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1597 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1601 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1605 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1606 = _1593 / _1605;
    float _1607 = _1597 / _1605;
    float _1608 = _1601 / _1605;
    float _1755;
    float _1756;
    float _1757;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1635 = ((uint(_1608 > cbSceneParam._m0[59u].y) + uint(_1608 > cbSceneParam._m0[59u].x)) + uint(_1608 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1636 = _1635 + 43u;
        uint _1644 = _1635 + 44u;
        uint _1652 = _1635 + 45u;
        uint _1660 = _1635 + 46u;
        float _1671 = fma(_1605, cbSceneParam._m0[_1636].w, fma(_1601, cbSceneParam._m0[_1636].z, fma(_1597, cbSceneParam._m0[_1636].y, _1593 * cbSceneParam._m0[_1636].x)));
        float _1675 = fma(_1605, cbSceneParam._m0[_1644].w, fma(_1601, cbSceneParam._m0[_1644].z, fma(_1597, cbSceneParam._m0[_1644].y, _1593 * cbSceneParam._m0[_1644].x)));
        float _1683 = fma(_1605, cbSceneParam._m0[_1660].w, fma(_1601, cbSceneParam._m0[_1660].z, fma(_1597, cbSceneParam._m0[_1660].y, _1593 * cbSceneParam._m0[_1660].x)));
        float _1688 = cbSceneParam._m0[33u].z * _1683;
        float _1690 = cbSceneParam._m0[33u].w * _1683;
        float _1693 = fma(_1605, cbSceneParam._m0[_1652].w, fma(_1601, cbSceneParam._m0[_1652].z, fma(_1597, cbSceneParam._m0[_1652].y, _1593 * cbSceneParam._m0[_1652].x))) / _1683;
        float _1741 = (cbSceneParam._m0[33u].x - sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608))) * cbSceneParam._m0[33u].y;
        float _4051 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1748 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1688 + _1671) / _1683, (_1690 + _1675) / _1683), _1693), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1690 + _1671) / _1683, (_1675 - _1688) / _1683), _1693), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1671 - _1688) / _1683, (_1675 - _1690) / _1683), _1693), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1671 - _1690) / _1683, (_1688 + _1675) / _1683), _1693), 0.0)).x), vec4(0.25)));
        _1755 = 1.0 - (_1748 * cbSceneParam._m0[34u].x);
        _1756 = 1.0 - (_1748 * cbSceneParam._m0[34u].y);
        _1757 = 1.0 - (_1748 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1755 = 1.0;
        _1756 = 1.0;
        _1757 = 1.0;
    }
    float _1821;
    float _1823;
    float _1825;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1809 = fma(_1605, cbSceneParam._m0[63u].w, fma(_1601, cbSceneParam._m0[63u].z, fma(_1597, cbSceneParam._m0[63u].y, _1593 * cbSceneParam._m0[63u].x)));
        float _1810 = fma(_1605, cbSceneParam._m0[60u].w, fma(_1601, cbSceneParam._m0[60u].z, fma(_1597, cbSceneParam._m0[60u].y, _1593 * cbSceneParam._m0[60u].x))) / _1809;
        float _1811 = fma(_1605, cbSceneParam._m0[61u].w, fma(_1601, cbSceneParam._m0[61u].z, fma(_1597, cbSceneParam._m0[61u].y, _1593 * cbSceneParam._m0[61u].x))) / _1809;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1810 >= cbSceneParam._m0[64u].x) && (_1811 >= cbSceneParam._m0[64u].y)) && (_1810 <= cbSceneParam._m0[64u].z)) && (_1811 <= cbSceneParam._m0[64u].w))
        {
            float _1950 = fma(_1605, cbSceneParam._m0[62u].w, fma(_1601, cbSceneParam._m0[62u].z, fma(_1597, cbSceneParam._m0[62u].y, _1593 * cbSceneParam._m0[62u].x))) / _1809;
            float _1954 = isnan(cbSceneParam._m0[41u].w) ? _1950 : (isnan(_1950) ? cbSceneParam._m0[41u].w : max(_1950, cbSceneParam._m0[41u].w));
            float _1997 = (cbSceneParam._m0[33u].x - sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608))) * cbSceneParam._m0[33u].y;
            float _4067 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
            float _2004 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1810, cbSceneParam._m0[33u].w + _1811), _1954), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1810, _1811 - cbSceneParam._m0[33u].z), _1954), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1810 - cbSceneParam._m0[33u].z, _1811 - cbSceneParam._m0[33u].w), _1954), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1810 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1811), _1954), 0.0)).x), vec4(0.25)));
            float _2008 = 1.0 - (_2004 * cbSceneParam._m0[34u].x);
            float _2009 = 1.0 - (_2004 * cbSceneParam._m0[34u].y);
            float _2010 = 1.0 - (_2004 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2010) ? _1757 : (isnan(_1757) ? _2010 : min(_1757, _2010));
            frontier_phi_37_36_ladder_1 = isnan(_2009) ? _1756 : (isnan(_1756) ? _2009 : min(_1756, _2009));
            frontier_phi_37_36_ladder_2 = isnan(_2008) ? _1755 : (isnan(_1755) ? _2008 : min(_1755, _2008));
        }
        else
        {
            frontier_phi_37_36_ladder = _1757;
            frontier_phi_37_36_ladder_1 = _1756;
            frontier_phi_37_36_ladder_2 = _1755;
        }
        _1821 = frontier_phi_37_36_ladder_2;
        _1823 = frontier_phi_37_36_ladder_1;
        _1825 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1821 = _1755;
        _1823 = _1756;
        _1825 = _1757;
    }
    uvec4 _1830 = floatBitsToUint(cbInstanceData._m0[_472 + 5u]);
    uint _1832 = _1830.x * 14u;
    uint _1833 = _1832 + 13u;
    float _1840 = _498 + (-1.0);
    float _1845 = (cbLight._m0[_1833].x * _1840) + 1.0;
    float _1846 = (cbLight._m0[_1833].y * _1840) + 1.0;
    float _1847 = (cbLight._m0[_1833].z * _1840) + 1.0;
    float _1848 = (cbLight._m0[_1833].w * _1840) + 1.0;
    uint _1849 = _1832 + 5u;
    float _1855 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
    uint _1859 = _1832 + 4u;
    float _1869 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
    uint _1873 = _1832 | 1u;
    float _1884 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_338, _339, _340));
    float _1887 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_338, _339, _340));
    float _4103 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _4114 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1892 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.3183098733425140380859375;
    float _1894 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * 0.3183098733425140380859375;
    float _1901 = ((cbLight._m0[_1849].x * _1855) * _1894) + (((cbLight._m0[_1859].x * _1821) * _1869) * _1892);
    float _1902 = ((_1855 * cbLight._m0[_1849].y) * _1894) + (((cbLight._m0[_1859].y * _1823) * _1869) * _1892);
    float _1903 = ((_1855 * cbLight._m0[_1849].z) * _1894) + (((cbLight._m0[_1859].z * _1825) * _1869) * _1892);
    uvec4 _1907 = floatBitsToUint(cbLight._m0[_1832 + 12u]);
    bool _1909 = _1907.x == 0u;
    float _2011;
    float _2013;
    float _2015;
    if (_1909)
    {
        _2011 = _1901;
        _2013 = _1902;
        _2015 = _1903;
    }
    else
    {
        uint _2019 = _1832 + 6u;
        float _2035 = (dot(vec3(cbLight._m0[_1832 + 2u].xyz), vec3(_338, _339, _340)) * 0.5) + 0.5;
        float _2036 = _2035 * _2035;
        float _4125 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2037 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2038 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2011 = (((cbLight._m0[_2019].x * 0.3183098733425140380859375) * _2037) * _2038) + _1901;
        _2013 = (((cbLight._m0[_2019].y * 0.3183098733425140380859375) * _2037) * _2038) + _1902;
        _2015 = (((cbLight._m0[_2019].z * 0.3183098733425140380859375) * _2037) * _2038) + _1903;
    }
    bool _2018 = _1907.y == 0u;
    float _2073;
    float _2075;
    float _2077;
    if (_2018)
    {
        _2073 = _2011;
        _2075 = _2013;
        _2077 = _2015;
    }
    else
    {
        uint _2235 = _1832 + 7u;
        float _2251 = (dot(vec3(cbLight._m0[_1832 + 3u].xyz), vec3(_338, _339, _340)) * 0.5) + 0.5;
        float _2252 = _2251 * _2251;
        float _4141 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2253 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2254 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2073 = (((cbLight._m0[_2235].x * 0.3183098733425140380859375) * _2253) * _2254) + _2011;
        _2075 = (((cbLight._m0[_2235].y * 0.3183098733425140380859375) * _2253) * _2254) + _2013;
        _2077 = (((cbLight._m0[_2235].z * 0.3183098733425140380859375) * _2253) * _2254) + _2015;
    }
    uint _2080 = _1832 + 8u;
    float _2093 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1832].w)) * _341) * 0.949999988079071044921875);
    float _2094 = _2093 * _2093;
    float _2095 = cbLight._m0[_1832].x + _416;
    float _2096 = cbLight._m0[_1832].y + _417;
    float _2097 = cbLight._m0[_1832].z + _418;
    float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
    float _2102 = _2101 * _2095;
    float _2103 = _2101 * _2096;
    float _2104 = _2101 * _2097;
    float _2105 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_1832].xyz));
    float _4157 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _4168 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _2109 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _2110 = dot(vec3(_338, _339, _340), vec3(_2102, _2103, _2104));
    float _4179 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _2114 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_2102, _2103, _2104));
    float _4190 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2118 = _2094 * _2094;
    float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
    float _2133 = (exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2134 = 1.0 - _2094;
    float _2145 = (0.5 / (((_2109 * ((_2108 * _2134) + _2094)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2134) + _2094) * _2108))) * _2108;
    float _4201 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2147 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
    uint _2161 = _1832 + 9u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1873].w)) * _341) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_1873].x + _416;
    float _2175 = cbLight._m0[_1873].y + _417;
    float _2176 = cbLight._m0[_1873].z + _418;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_1873].xyz));
    float _4212 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2188 = dot(vec3(_338, _339, _340), vec3(_2181, _2182, _2183));
    float _4223 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2192 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_2181, _2182, _2183));
    float _4234 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2196 = _2173 * _2173;
    float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
    float _2209 = (exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2210 = 1.0 - _2173;
    float _2220 = (0.5 / (((_2109 * ((_2187 * _2210) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2210) + _2173) * _2187))) * _2187;
    float _4245 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2222 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
    float _2232 = (((_2209 * cbLight._m0[_2161].x) * _2222) * _1855) + ((((cbLight._m0[_2080].x * _1821) * _2133) * _2147) * _1869);
    float _2233 = (((_2209 * cbLight._m0[_2161].y) * _2222) * _1855) + ((((cbLight._m0[_2080].y * _1823) * _2133) * _2147) * _1869);
    float _2234 = (((_2209 * cbLight._m0[_2161].z) * _2222) * _1855) + ((((cbLight._m0[_2080].z * _1825) * _2133) * _2147) * _1869);
    float _2290;
    float _2292;
    float _2294;
    if (_1909)
    {
        _2290 = _2232;
        _2292 = _2233;
        _2294 = _2234;
    }
    else
    {
        uint _2296 = _1832 + 2u;
        uint _2300 = _1832 + 10u;
        float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _341) * 0.949999988079071044921875);
        float _2315 = _2314 * _2314;
        float _2316 = cbLight._m0[_2296].x + _416;
        float _2317 = cbLight._m0[_2296].y + _417;
        float _2318 = cbLight._m0[_2296].z + _418;
        float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
        float _2323 = _2322 * _2316;
        float _2324 = _2322 * _2317;
        float _2325 = _2322 * _2318;
        float _2326 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_2296].xyz));
        float _4256 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2330 = dot(vec3(_338, _339, _340), vec3(_2323, _2324, _2325));
        float _4267 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2334 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2323, _2324, _2325));
        float _4278 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2338 = _2315 * _2315;
        float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
        float _2351 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2352 = 1.0 - _2315;
        float _2362 = (0.5 / (((_2109 * ((_2329 * _2352) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2352) + _2315) * _2329))) * _2329;
        float _4289 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2364 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
        float _2365 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2290 = (((_2351 * cbLight._m0[_2300].x) * _2364) * _2365) + _2232;
        _2292 = (((_2351 * cbLight._m0[_2300].y) * _2364) * _2365) + _2233;
        _2294 = (((_2351 * cbLight._m0[_2300].z) * _2364) * _2365) + _2234;
    }
    float _2396;
    float _2398;
    float _2400;
    if (_2018)
    {
        _2396 = _2290;
        _2398 = _2292;
        _2400 = _2294;
    }
    else
    {
        uint _2407 = _1832 + 3u;
        uint _2411 = _1832 + 11u;
        float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _341) * 0.949999988079071044921875);
        float _2426 = _2425 * _2425;
        float _2427 = cbLight._m0[_2407].x + _416;
        float _2428 = cbLight._m0[_2407].y + _417;
        float _2429 = cbLight._m0[_2407].z + _418;
        float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
        float _2434 = _2433 * _2427;
        float _2435 = _2433 * _2428;
        float _2436 = _2433 * _2429;
        float _2437 = dot(vec3(_338, _339, _340), vec3(cbLight._m0[_2407].xyz));
        float _4305 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2441 = dot(vec3(_338, _339, _340), vec3(_2434, _2435, _2436));
        float _4316 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2445 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2434, _2435, _2436));
        float _4327 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2449 = _2426 * _2426;
        float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
        float _2462 = (exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2463 = 1.0 - _2426;
        float _2473 = (0.5 / (((_2109 * ((_2440 * _2463) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2463) + _2426) * _2440))) * _2440;
        float _4338 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2475 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
        float _2476 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2396 = (((_2462 * cbLight._m0[_2411].x) * _2475) * _2476) + _2290;
        _2398 = (((_2462 * cbLight._m0[_2411].y) * _2475) * _2476) + _2292;
        _2400 = (((_2462 * cbLight._m0[_2411].z) * _2475) * _2476) + _2294;
    }
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    if (_1830.y == 0u)
    {
        uvec4 _2497 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2498 = _2497.x;
        uint _2509 = uint((float(_2497.y) * floor(float(uint(cbSceneParam._m0[85u].y * _433) / _2498))) + floor(float(uint(cbSceneParam._m0[85u].x * _432) / _2498)));
        float _2519 = (log2(_1608 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2520 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        uint _2523 = uint(isnan(14.0) ? _2520 : (isnan(_2520) ? 14.0 : min(_2520, 14.0)));
        uvec4 _2528 = texelFetch(g_lightClusterGridBuffer, int(((_2523 << 2u) + (_2509 << 6u)) >> 2u));
        uint _2529 = _2528.x;
        uint _2530 = _2497.z;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        if (((((1u << ((_2530 >> 4u) & 15u)) + 4294967295u) & _2529) == 0u) || ((_2530 & 240u) == 0u))
        {
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
        }
        else
        {
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            uint _2767 = 0u;
            uint _2776;
            bool _2777;
            for (;;)
            {
                _2776 = texelFetch(g_lightClassification, int((((_2523 << 5u) + (_2509 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                _2777 = _2776 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2777)
                {
                    frontier_phi_71_pred = _2766;
                    frontier_phi_71_pred_1 = _2765;
                    frontier_phi_71_pred_2 = _2764;
                    frontier_phi_71_pred_3 = _2763;
                    frontier_phi_71_pred_4 = _2762;
                    frontier_phi_71_pred_5 = _2761;
                }
                else
                {
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    uint _2912;
                    _2906 = _2761;
                    _2907 = _2762;
                    _2908 = _2763;
                    _2909 = _2764;
                    _2910 = _2765;
                    _2911 = _2766;
                    _2912 = _2776;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    for (;;)
                    {
                        uint _2916 = uint(findLSB(_2912)) + (_2767 << 5u);
                        uint _2913 = (_2912 + 4294967295u) & _2912;
                        uint _2918 = _2916 * 48u;
                        vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 3u)).x));
                        uint _2938 = (_2916 * 48u) + 4u;
                        vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2957 = (_2916 * 48u) + 8u;
                        vec3 _2968 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x));
                        float _2972 = _2932.x - _1606;
                        float _2973 = _2932.y - _1607;
                        float _2974 = _2932.z - _1608;
                        float _2975 = dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974));
                        float _2978 = inversesqrt(_2975);
                        float _2979 = _2978 * _2972;
                        float _2980 = _2978 * _2973;
                        float _2981 = _2978 * _2974;
                        float _2982 = dot(vec3(_453, _456, _459), vec3(_2979, _2980, _2981));
                        float _2987 = 1.0 - (_2975 * _2932.w);
                        float _4364 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2988 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _2989 = sqrt(_2975) * _2951.w;
                        float _2992 = 1.39999997615814208984375 / (_2989 + 1.39999997615814208984375);
                        float _2993 = _2992 * _2992;
                        float _2996 = ((1.0 - _2993) * _2982) + _2993;
                        float _2999 = _2989 * _2989;
                        float _3003 = ((isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0))) * _2988) / ((_2999 * 0.699999988079071044921875) + 1.0);
                        float _3007 = (-0.0) - _1606;
                        float _3008 = (-0.0) - _1607;
                        float _3009 = (-0.0) - _1608;
                        float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
                        float _3014 = _3013 * _3007;
                        float _3015 = _3013 * _3008;
                        float _3016 = _3013 * _3009;
                        float _3023 = exp2(log2(1.0 / ((_2999 * 3.5) + 5.0)) * 0.25);
                        float _3024 = 1.0 - _514;
                        float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                        float _3032 = _3031 * _3031;
                        float _3033 = _3032 * _3032;
                        float _3034 = _3014 + _2979;
                        float _3035 = _3015 + _2980;
                        float _3036 = _3016 + _2981;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3044 = dot(vec3(_453, _456, _459), vec3(_3014, _3015, _3016));
                        float _4380 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3047 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3048 = dot(vec3(_453, _456, _459), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                        float _4391 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3051 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                        float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                        float _3056 = _2992 * _3032;
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _2982) + _3057;
                        float _4402 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3062 = 1.0 - _3032;
                        float _3072 = (0.5 / (((_3061 * ((_3047 * _3062) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3061 * _3062) + _3032) * _3047))) * _3061;
                        float _4413 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3083 = (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) / ((_3055 * _3055) * ((_2999 * 2.1991131305694580078125) + 3.141590118408203125))) * _2988;
                        _2836 = (_3003 * _2951.x) + _2909;
                        _2837 = (_3003 * _2951.y) + _2910;
                        _2838 = (_3003 * _2951.z) + _2911;
                        _2833 = (_3083 * _2968.x) + _2906;
                        _2834 = (_3083 * _2968.y) + _2907;
                        _2835 = (_3083 * _2968.z) + _2908;
                        if (_2913 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2906 = _2833;
                            _2907 = _2834;
                            _2908 = _2835;
                            _2909 = _2836;
                            _2910 = _2837;
                            _2911 = _2838;
                            _2912 = _2913;
                        }
                    }
                    frontier_phi_71_pred = _2838;
                    frontier_phi_71_pred_1 = _2837;
                    frontier_phi_71_pred_2 = _2836;
                    frontier_phi_71_pred_3 = _2835;
                    frontier_phi_71_pred_4 = _2834;
                    frontier_phi_71_pred_5 = _2833;
                }
                _2620 = frontier_phi_71_pred;
                _2618 = frontier_phi_71_pred_1;
                _2616 = frontier_phi_71_pred_2;
                _2614 = frontier_phi_71_pred_3;
                _2612 = frontier_phi_71_pred_4;
                _2610 = frontier_phi_71_pred_5;
                uint _2768 = _2767 + 1u;
                if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2761 = _2610;
                    _2762 = _2612;
                    _2763 = _2614;
                    _2764 = _2616;
                    _2765 = _2618;
                    _2766 = _2620;
                    _2767 = _2768;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
        }
        uvec4 _2623 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2624 = _2623.z;
        uint _2626 = (_2624 >> 8u) & 15u;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        if (((4294967295u << _2626) & _2529) == 0u)
        {
            _2729 = _2609;
            _2731 = _2611;
            _2733 = _2613;
            _2735 = _2615;
            _2737 = _2617;
            _2739 = _2619;
        }
        else
        {
            float _2754 = inversesqrt(dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608)));
            float _2755 = _2754 * _1606;
            float _2756 = _2754 * _1607;
            float _2757 = _2754 * _1608;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2626 < ((_2624 >> 12u) & 15u))
            {
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2889 = _2609;
                float _2890 = _2611;
                float _2891 = _2613;
                float _2892 = _2615;
                float _2893 = _2617;
                float _2894 = _2619;
                uint _2895 = _2626;
                uint _2904;
                bool _2905;
                for (;;)
                {
                    _2904 = texelFetch(g_lightClassification, int((((_2523 << 5u) + (_2509 << 9u)) + (_2895 << 2u)) >> 2u)).x;
                    _2905 = _2904 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2905)
                    {
                        frontier_phi_82_pred = _2894;
                        frontier_phi_82_pred_1 = _2893;
                        frontier_phi_82_pred_2 = _2892;
                        frontier_phi_82_pred_3 = _2891;
                        frontier_phi_82_pred_4 = _2890;
                        frontier_phi_82_pred_5 = _2889;
                    }
                    else
                    {
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3110 = _2889;
                        float _3111 = _2890;
                        float _3112 = _2891;
                        float _3113 = _2892;
                        float _3114 = _2893;
                        float _3115 = _2894;
                        uint _3116 = _2904;
                        uint _3117;
                        vec4 _3142;
                        float _3143;
                        vec4 _3158;
                        vec3 _3170;
                        vec4 _3186;
                        vec4 _3202;
                        float _3249;
                        bool _3250;
                        for (;;)
                        {
                            uint _3127 = ((_2895 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3116));
                            _3117 = (_3116 + 4294967295u) & _3116;
                            uint _3129 = _3127 * 40u;
                            _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            _3143 = _3142.w;
                            uint _3145 = (_3127 * 40u) + 4u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3160 = (_3127 * 40u) + 8u;
                            _3170 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x));
                            uint _3173 = (_3127 * 40u) + 16u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3189 = (_3127 * 40u) + 20u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3205 = (_3127 * 40u) + 24u;
                            vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3224 = (_3127 * 40u) + 28u;
                            vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3249 = fma(_1608, _3237.z, fma(_1607, _3237.y, _3237.x * _1606)) + _3237.w;
                            _3250 = !((fma(_1608, _3218.z, fma(_1607, _3218.y, _3218.x * _1606)) + _3218.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3250)
                            {
                                float _3277 = _3142.x - _1606;
                                float _3278 = _3142.y - _1607;
                                float _3279 = _3142.z - _1608;
                                float _3280 = dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279));
                                float _3283 = inversesqrt(_3280);
                                float _3284 = _3283 * _3277;
                                float _3285 = _3283 * _3278;
                                float _3286 = _3283 * _3279;
                                float _3290 = 1.0 - (_3280 / (_3143 * _3143));
                                float _4424 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3291 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3295 = sqrt(_3280) * _3158.w;
                                float _3297 = 1.39999997615814208984375 / (_3295 + 1.39999997615814208984375);
                                float _3298 = _3297 * _3297;
                                float _3301 = ((1.0 - _3298) * dot(vec3(_3284, _3285, _3286), vec3(_453, _456, _459))) + _3298;
                                float _3304 = _3295 * _3295;
                                float _3308 = (fma(_1608, _3186.z, fma(_1607, _3186.y, _3186.x * _1606)) + _3186.w) / _3249;
                                float _3309 = (fma(_1608, _3202.z, fma(_1607, _3202.y, _3202.x * _1606)) + _3202.w) / _3249;
                                float _3313 = 1.0 - dot(vec2(_3308, _3309), vec2(_3308, _3309));
                                float _4440 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3315 = _3314 * (((isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0))) * _3291) / ((_3304 * 0.699999988079071044921875) + 1.0));
                                float _3327 = exp2(log2(1.0 / ((_3304 * 3.5) + 5.0)) * 0.25);
                                float _3328 = 1.0 - _514;
                                float _3335 = sqrt(1.0 - ((1.0 - (_3328 * _3328)) * (1.0 - (_3327 * _3327))));
                                float _3336 = _3335 * _3335;
                                float _3337 = _3336 * _3336;
                                float _3338 = _3284 - _2755;
                                float _3339 = _3285 - _2756;
                                float _3340 = _3286 - _2757;
                                float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                                float _3348 = dot(vec3(_453, _456, _459), vec3((-0.0) - _2755, (-0.0) - _2756, (-0.0) - _2757));
                                float _4451 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3351 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3352 = dot(vec3(_453, _456, _459), vec3(_3344 * _3338, _3344 * _3339, _3344 * _3340));
                                float _4462 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3355 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3359 = ((_3355 * _3355) * (_3337 + (-1.0))) + 1.0;
                                float _3360 = _3297 * _3336;
                                float _3361 = _3360 * _3360;
                                float _3367 = ((1.0 - _3361) * dot(vec3(_453, _456, _459), vec3(_3284, _3285, _3286))) + _3361;
                                float _4473 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3369 = 1.0 - _3336;
                                float _3379 = (0.5 / (((_3368 * ((_3351 * _3369) + _3336)) + 9.9999999392252902907785028219223e-09) + (((_3368 * _3369) + _3336) * _3351))) * _3368;
                                float _4484 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3389 = (_3314 * _3291) * (((_3337 * 3.1415927410125732421875) * (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) / ((_3359 * _3359) * ((_3304 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3315 * _3158.z;
                                frontier_phi_88_pred_1 = _3315 * _3158.y;
                                frontier_phi_88_pred_2 = _3315 * _3158.x;
                                frontier_phi_88_pred_3 = _3389 * _3170.z;
                                frontier_phi_88_pred_4 = _3389 * _3170.y;
                                frontier_phi_88_pred_5 = _3389 * _3170.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3398 = frontier_phi_88_pred;
                            _3397 = frontier_phi_88_pred_1;
                            _3396 = frontier_phi_88_pred_2;
                            _3395 = frontier_phi_88_pred_3;
                            _3394 = frontier_phi_88_pred_4;
                            _3393 = frontier_phi_88_pred_5;
                            _3100 = _3396 + _3113;
                            _3101 = _3397 + _3114;
                            _3102 = _3398 + _3115;
                            _3097 = _3393 + _3110;
                            _3098 = _3394 + _3111;
                            _3099 = _3395 + _3112;
                            if (_3117 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3117;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3102;
                        frontier_phi_82_pred_1 = _3101;
                        frontier_phi_82_pred_2 = _3100;
                        frontier_phi_82_pred_3 = _3099;
                        frontier_phi_82_pred_4 = _3098;
                        frontier_phi_82_pred_5 = _3097;
                    }
                    _2740 = frontier_phi_82_pred;
                    _2738 = frontier_phi_82_pred_1;
                    _2736 = frontier_phi_82_pred_2;
                    _2734 = frontier_phi_82_pred_3;
                    _2732 = frontier_phi_82_pred_4;
                    _2730 = frontier_phi_82_pred_5;
                    uint _2896 = _2895 + 1u;
                    if (_2896 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2889 = _2730;
                        _2890 = _2732;
                        _2891 = _2734;
                        _2892 = _2736;
                        _2893 = _2738;
                        _2894 = _2740;
                        _2895 = _2896;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2736;
                frontier_phi_63_64_ladder_1 = _2740;
                frontier_phi_63_64_ladder_2 = _2738;
                frontier_phi_63_64_ladder_3 = _2734;
                frontier_phi_63_64_ladder_4 = _2732;
                frontier_phi_63_64_ladder_5 = _2730;
            }
            else
            {
                frontier_phi_63_64_ladder = _2615;
                frontier_phi_63_64_ladder_1 = _2619;
                frontier_phi_63_64_ladder_2 = _2617;
                frontier_phi_63_64_ladder_3 = _2613;
                frontier_phi_63_64_ladder_4 = _2611;
                frontier_phi_63_64_ladder_5 = _2609;
            }
            _2729 = frontier_phi_63_64_ladder_5;
            _2731 = frontier_phi_63_64_ladder_4;
            _2733 = frontier_phi_63_64_ladder_3;
            _2735 = frontier_phi_63_64_ladder;
            _2737 = frontier_phi_63_64_ladder_2;
            _2739 = frontier_phi_63_64_ladder_1;
        }
        float _2744 = isnan(1.0) ? _498 : (isnan(_498) ? 1.0 : min(_498, 1.0));
        _2542 = (_2744 * _2735) + _2073;
        _2544 = (_2744 * _2737) + _2075;
        _2546 = (_2744 * _2739) + _2077;
        _2548 = ((_2729 * 0.039999999105930328369140625) * _2744) + _2396;
        _2550 = ((_2731 * 0.039999999105930328369140625) * _2744) + _2398;
        _2552 = ((_2733 * 0.039999999105930328369140625) * _2744) + _2400;
    }
    else
    {
        _2542 = _2073;
        _2544 = _2075;
        _2546 = _2077;
        _2548 = _2396;
        _2550 = _2398;
        _2552 = _2400;
    }
    float _4500 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _4511 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _4522 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _2569 = ((isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2542 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _498))) + ((_2548 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1335)) * cbPerFrame._m0[3u].x);
    float _2570 = ((isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2544 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _498))) + ((_2550 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1335)) * cbPerFrame._m0[3u].x);
    float _2571 = ((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2546 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _498))) + ((_2552 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1335)) * cbPerFrame._m0[3u].x);
    uint _2572 = _472 + 6u;
    float _2580 = _432 / cbSceneParam._m0[86u].x;
    float _2581 = _433 / cbSceneParam._m0[86u].y;
    vec4 _2595 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2580, _2581, (log2((isnan(cbSceneParam._m0[77u].w) ? _358 : (isnan(_358) ? cbSceneParam._m0[77u].w : min(_358, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2597 = _2595.x;
    float _2598 = _2595.y;
    float _2599 = _2595.z;
    float _2600 = _2595.w;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    if (_358 > cbSceneParam._m0[78u].w)
    {
        float _2634 = isnan(_358) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _358 : min(cbSceneParam._m0[80u].w, _358));
        float _2635 = _2634 / _358;
        float _2646 = _2635 * _409;
        float _2647 = _410 * _2635;
        float _2648 = (-0.0) - _2647;
        float _2649 = _2635 * _411;
        float _2651 = (cbSceneParam._m0[77u].w * _2648) / _2634;
        float _2652 = _2651 + cbSceneParam._m0[79u].w;
        float _2653 = cbSceneParam._m0[79u].w - _2647;
        float _2659 = sqrt(((_2646 * _2646) + (_2647 * _2647)) + (_2649 * _2649));
        float _2662 = (1.0 - (cbSceneParam._m0[77u].w / _2634)) * _2659;
        float _2667 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2669 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2846;
        if (abs((_2648 - _2651) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2846 = ((((_2652 > 0.0) ? exp2(_2667 * _2652) : (2.0 - exp2(_2669 * _2652))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2662;
        }
        else
        {
            float _2790 = 1.0 / cbSceneParam._m0[80u].x;
            float _2791 = isnan(_2653) ? _2652 : (isnan(_2652) ? _2653 : max(_2652, _2653));
            float _2792 = isnan(_2653) ? _2652 : (isnan(_2652) ? _2653 : min(_2652, _2653));
            float _2801 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : min(_2791, 0.0));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            _2846 = ((abs(_2659 / _2648) * cbSceneParam._m0[80u].y) * ((((_2801 - _2802) * 2.0) - ((exp2(_2667 * (isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0)))) - exp2(_2667 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0))))) * _2790)) - ((exp2(_2669 * _2801) - exp2(_2669 * _2802)) * _2790))) + (_2662 * cbSceneParam._m0[80u].z);
        }
        vec4 _2848 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2580, _2581, 1.0), 0.0);
        float _2857 = exp2((_2846 * (-1.44269502162933349609375)) * (1.0 - _2848.w));
        float _2858 = log2(_2857);
        float _2874 = log2(_2600);
        _2671 = (exp2(_2874 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].x)) * _2848.x) / cbSceneParam._m0[78u].x)) + _2597;
        _2673 = (exp2(_2874 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].y)) * _2848.y) / cbSceneParam._m0[78u].y)) + _2598;
        _2675 = (exp2(_2874 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2858 * cbSceneParam._m0[78u].z)) * _2848.z) / cbSceneParam._m0[78u].z)) + _2599;
        _2677 = _2857 * _2600;
    }
    else
    {
        _2671 = _2597;
        _2673 = _2598;
        _2675 = _2599;
        _2677 = _2600;
    }
    bool _2884;
    vec4 _2687;
    vec4 _2709;
    float _2711;
    float _2715;
    float _2716;
    float _2717;
    float _2718;
    bool _2728;
    for (;;)
    {
        _2687 = cbMatDynParam._m0[0u];
        float _2689 = roundEven(_2687.y);
        bool _2690 = _2689 == 3.0;
        float _2691 = log2(_2677);
        float _2698 = exp2(_2691 * cbSceneParam._m0[78u].x) * _2569;
        float _2699 = exp2(_2691 * cbSceneParam._m0[78u].y) * _2570;
        float _2700 = exp2(_2691 * cbSceneParam._m0[78u].z) * _2571;
        float _2707 = _421 + (-0.5);
        _2709 = cbMtdParam._m0[1u];
        _2711 = _2709.y * _2707;
        float _2714 = (_2689 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2715 = _2714 * (_2690 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2671)));
        _2716 = _2714 * (_2690 ? _2699 : (_2699 + (cbSceneParam._m0[72u].w * _2673)));
        _2717 = _2714 * (_2690 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2675)));
        _2718 = _2707 * 0.999000012874603271484375;
        _2728 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2728)
        {
            if ((cbInstanceData._m0[_472 + 7u].x + _2718) < 0.5)
            {
                _2884 = true;
                break;
            }
        }
        uint _2825 = _474 + uint(_2687.w);
        if ((cbInstanceData._m0[_2825].w < 1.0) && ((cbInstanceData._m0[_2825].w + _2718) < 0.5))
        {
            _2884 = true;
            break;
        }
        if ((_2711 + _296) < _2709.x)
        {
            _2884 = true;
            break;
        }
        _2884 = false;
        break;
    }
    float _3088;
    if (_2884)
    {
        discard_state = true;
        _3088 = 0.0;
    }
    else
    {
        _3088 = cbInstanceData._m0[_2572].w;
    }
    SV_Target.x = _2715;
    SV_Target.y = _2716;
    SV_Target.z = _2717;
    SV_Target.w = _3088;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2572].w;
    discard_exit();
}


