#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _798;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _182 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _189 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _219 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _225 = _219.x * cbMtdParam._m0[9u].x;
    float _226 = _219.y * cbMtdParam._m0[9u].y;
    float _227 = _219.z * cbMtdParam._m0[9u].z;
    vec4 _239 = texture(sampler2D(S_AMSN_M0_M1_di_soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _243 = _239.z;
    float _247 = (_239.x * 2.0) + (-1.0);
    float _249 = (_239.y * 2.0) + (-1.0);
    float _250 = dot(vec2(_247, _249), vec2(_247, _249));
    float _3138 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _256 = sqrt(1.0 - (isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0))));
    float _259 = fma(_256, _189 * NORMAL.x, fma(_249, _196 * TANGENT.x, (_182 * _174) * _247));
    float _262 = fma(_256, _189 * NORMAL.y, fma(_249, _196 * TANGENT.y, (_182 * _175) * _247));
    float _265 = fma(_256, _189 * NORMAL.z, fma(_249, _196 * TANGENT.z, (_182 * _176) * _247));
    float _269 = inversesqrt(dot(vec3(_259, _262, _265), vec3(_259, _262, _265)));
    float _270 = _269 * _259;
    float _271 = _269 * _262;
    float _272 = _269 * _265;
    float _3149 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _273 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
    float _3160 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _3171 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3182 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _292 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _334 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _344 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _334);
    float _345 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _334);
    float _346 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _334);
    float _350 = inversesqrt(dot(vec3(_344, _345, _346), vec3(_344, _345, _346)));
    float _351 = _344 * _350;
    float _352 = _345 * _350;
    float _353 = _346 * _350;
    float _359 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _360 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _381 = fma(_272, cbSceneParam._m0[5u].z, fma(_271, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _270));
    float _384 = fma(_272, cbSceneParam._m0[6u].z, fma(_271, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _270));
    float _387 = fma(_272, cbSceneParam._m0[7u].z, fma(_271, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _270));
    uint _400 = uint(roundEven(NORMAL.w)) * 13u;
    uint _403 = (_400 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _409 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0)))) * cbInstanceData._m0[_403].x;
    float _410 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0)))) * cbInstanceData._m0[_403].y;
    float _411 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0)))) * cbInstanceData._m0[_403].z;
    float _3193 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _412 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
    float _3204 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _413 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
    float _3215 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _414 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
    vec4 _423 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _359, cbSceneParam._m0[86u].y * _360));
    float _426 = _423.x * TEXCOORD_1.w;
    float _427 = dot(vec3(_270, _271, _272), vec3(_351, _352, _353));
    float _430 = _427 * 2.0;
    float _434 = (_430 * _270) - _351;
    float _435 = (_430 * _271) - _352;
    float _436 = (_430 * _272) - _353;
    float _440 = abs(dot(vec3(_351, _352, _353), vec3(_270, _271, _272)));
    float _3226 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _442 = sqrt(_273);
    float _455 = exp2((_442 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_442 * 3.0));
    float _487 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _491 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _495 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _797;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _522 = fma(_495, cbModelParam._m0[26u].z, fma(_491, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _487));
        float _526 = fma(_495, cbModelParam._m0[27u].z, fma(_491, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _487));
        float _530 = fma(_495, cbModelParam._m0[28u].z, fma(_491, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _487));
        float _555 = _487 + _270;
        float _556 = _491 + _271;
        float _557 = _495 + _272;
        float _567 = fma(_557, cbModelParam._m0[26u].z, fma(_556, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _555)) - _522;
        float _568 = fma(_557, cbModelParam._m0[27u].z, fma(_556, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _555)) - _526;
        float _569 = fma(_557, cbModelParam._m0[28u].z, fma(_556, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _555)) - _530;
        float _573 = inversesqrt(dot(vec3(_567, _568, _569), vec3(_567, _568, _569)));
        float _586 = ((_573 * _567) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_522 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _587 = ((_573 * _568) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_526 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _588 = ((_573 * _569) / cbModelParam._m0[34u].z) + ((((((_530 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _591 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_586, _587, _588), 0.0);
        vec4 _598 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_586, _587, _588), 0.0);
        vec4 _605 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_586, _587, _588), 0.0);
        vec4 _612 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_586, _587, _588), 0.0);
        float _625 = exp2((_591.w + (-0.5)) * 20.0) * 2.0;
        float _626 = _625 * (_591.x + (-0.5));
        float _627 = _625 * (_591.y + (-0.5));
        float _628 = _625 * (_591.z + (-0.5));
        float _635 = exp2((_598.w + (-0.5)) * 20.0) * 2.0;
        float _636 = _635 * (_598.x + (-0.5));
        float _637 = _635 * (_598.y + (-0.5));
        float _638 = _635 * (_598.z + (-0.5));
        float _645 = exp2((_605.w + (-0.5)) * 20.0) * 2.0;
        float _646 = _645 * (_605.x + (-0.5));
        float _647 = _645 * (_605.y + (-0.5));
        float _648 = _645 * (_605.z + (-0.5));
        float _655 = exp2((_612.w + (-0.5)) * 20.0) * 2.0;
        float _656 = _655 * (_612.x + (-0.5));
        float _657 = _655 * (_612.y + (-0.5));
        float _658 = _655 * (_612.z + (-0.5));
        float _659 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _660 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _661 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _662 = _626 * 0.5;
        float _663 = _636 * 0.5;
        float _664 = _646 * 0.5;
        float _665 = dot(vec3(_662, _663, _664), vec3(_662, _663, _664));
        float _670 = (_665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_665);
        float _679 = (dot(vec3(_270, _271, _272), vec3(_670 * _662, _670 * _663, _670 * _664)) + 1.0) * 0.5;
        float _3252 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _689 = sqrt(((_663 * _663) + (_662 * _662)) + (_664 * _664)) / (_659 + 9.9999997473787516355514526367188e-06);
        float _3263 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
        float _691 = _690 * 2.0;
        float _695 = (1.0 - _690) / (_690 + 1.0);
        float _3274 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _696 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
        float _705 = ((((1.0 - _696) * (_691 + 2.0)) * exp2(log2(isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))) * (_691 + 1.0))) + _696) * _659;
        float _706 = _627 * 0.5;
        float _707 = _637 * 0.5;
        float _708 = _647 * 0.5;
        float _709 = dot(vec3(_706, _707, _708), vec3(_706, _707, _708));
        float _714 = (_709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_709);
        float _722 = (dot(vec3(_270, _271, _272), vec3(_714 * _706, _714 * _707, _714 * _708)) + 1.0) * 0.5;
        float _3285 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _731 = sqrt(((_707 * _707) + (_706 * _706)) + (_708 * _708)) / (_660 + 9.9999997473787516355514526367188e-06);
        float _3296 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _733 = _732 * 2.0;
        float _737 = (1.0 - _732) / (_732 + 1.0);
        float _3307 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
        float _747 = ((((1.0 - _738) * (_733 + 2.0)) * exp2(log2(isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))) * (_733 + 1.0))) + _738) * _660;
        float _748 = _628 * 0.5;
        float _749 = _638 * 0.5;
        float _750 = _648 * 0.5;
        float _751 = dot(vec3(_748, _749, _750), vec3(_748, _749, _750));
        float _756 = (_751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_751);
        float _764 = (dot(vec3(_270, _271, _272), vec3(_756 * _748, _756 * _749, _756 * _750)) + 1.0) * 0.5;
        float _3318 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _773 = sqrt(((_749 * _749) + (_748 * _748)) + (_750 * _750)) / (_661 + 9.9999997473787516355514526367188e-06);
        float _3329 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _775 = _774 * 2.0;
        float _779 = (1.0 - _774) / (_774 + 1.0);
        float _3340 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _789 = ((((1.0 - _780) * (_775 + 2.0)) * exp2(log2(isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (_775 + 1.0))) + _780) * _661;
        _797 = _628;
        _799 = _627;
        _800 = _626;
        _801 = _638;
        _802 = _637;
        _803 = _636;
        _804 = _648;
        _805 = _647;
        _806 = _646;
        _807 = _661;
        _808 = _660;
        _809 = _659;
        _810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0)));
        _811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0)));
        _812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0)));
    }
    else
    {
        _797 = _798;
        _799 = _798;
        _800 = _798;
        _801 = _798;
        _802 = _798;
        _803 = _798;
        _804 = _798;
        _805 = _798;
        _806 = _798;
        _807 = _798;
        _808 = _798;
        _809 = _798;
        _810 = 0.0;
        _811 = 0.0;
        _812 = 0.0;
    }
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _838 = fma(_495, cbModelParam._m0[30u].z, fma(_491, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _487));
        float _842 = fma(_495, cbModelParam._m0[31u].z, fma(_491, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _487));
        float _846 = fma(_495, cbModelParam._m0[32u].z, fma(_491, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _487));
        float _869 = _487 + _270;
        float _870 = _491 + _271;
        float _871 = _495 + _272;
        float _881 = fma(_871, cbModelParam._m0[30u].z, fma(_870, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _869)) - _838;
        float _882 = fma(_871, cbModelParam._m0[31u].z, fma(_870, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _869)) - _842;
        float _883 = fma(_871, cbModelParam._m0[32u].z, fma(_870, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _869)) - _846;
        float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
        float _900 = ((_887 * _881) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_838 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_887 * _882) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_842 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_887 * _883) / cbModelParam._m0[35u].z) + ((((((_846 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        float _937 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_904.x + (-0.5));
        float _939 = _937 * (_904.y + (-0.5));
        float _940 = _937 * (_904.z + (-0.5));
        float _947 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_911.x + (-0.5));
        float _949 = _947 * (_911.y + (-0.5));
        float _950 = _947 * (_911.z + (-0.5));
        float _957 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_918.x + (-0.5));
        float _959 = _957 * (_918.y + (-0.5));
        float _960 = _957 * (_918.z + (-0.5));
        float _967 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_925.x + (-0.5));
        float _969 = _967 * (_925.y + (-0.5));
        float _970 = _967 * (_925.z + (-0.5));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = _938 * 0.5;
        float _975 = _948 * 0.5;
        float _976 = _958 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_270, _271, _272), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3381 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3392 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3403 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) * (_1001 + 1.0))) + _1006) * _971;
        float _1016 = _939 * 0.5;
        float _1017 = _949 * 0.5;
        float _1018 = _959 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_270, _271, _272), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3414 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3425 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3436 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * (_1043 + 1.0))) + _1048) * _972;
        float _1058 = _940 * 0.5;
        float _1059 = _950 * 0.5;
        float _1060 = _960 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_270, _271, _272), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3469 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_1085 + 1.0))) + _1090) * _973;
        _1107 = _940;
        _1108 = _939;
        _1109 = _938;
        _1110 = _950;
        _1111 = _949;
        _1112 = _948;
        _1113 = _960;
        _1114 = _959;
        _1115 = _958;
        _1116 = _973;
        _1117 = _972;
        _1118 = _971;
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
    }
    else
    {
        _1107 = _798;
        _1108 = _798;
        _1109 = _798;
        _1110 = _798;
        _1111 = _798;
        _1112 = _798;
        _1113 = _798;
        _1114 = _798;
        _1115 = _798;
        _1116 = _798;
        _1117 = _798;
        _1118 = _798;
        _1119 = 0.0;
        _1120 = 0.0;
        _1121 = 0.0;
    }
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _810)) + _810;
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _811)) + _811;
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _812)) + _812;
    float _1154 = fma(_1133, cbSceneParam._m0[89u].z, fma(_1132, cbSceneParam._m0[89u].y, _1131 * cbSceneParam._m0[89u].x));
    float _1157 = fma(_1133, cbSceneParam._m0[90u].z, fma(_1132, cbSceneParam._m0[90u].y, _1131 * cbSceneParam._m0[90u].x));
    float _1160 = fma(_1133, cbSceneParam._m0[91u].z, fma(_1132, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1131));
    float _1175 = _434 * 0.5;
    float _1176 = _435 * 0.5;
    float _1177 = _436 * 0.5;
    float _1178 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1181 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1184 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1218;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1191 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_797, _801, _804, _807));
        float _1195 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_799, _802, _805, _808));
        float _1199 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_800, _803, _806, _809));
        float _1206 = dot(vec4(cbModelParam._m0[39u]), vec4(_1175, _1176, _1177, 1.0));
        _1218 = dot(vec3(isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1206) ? 0.0 : (isnan(0.0) ? _1206 : max(0.0, _1206))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1218 = 1.0;
    }
    float _1229;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1220 = dot(vec4(cbModelParam._m0[40u]), vec4(_1175, _1176, _1177, 1.0));
        _1229 = dot(vec3(isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)), isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1220) ? 0.0 : (isnan(0.0) ? _1220 : max(0.0, _1220))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1229 = 1.0;
    }
    float _1233 = (_1229 * cbModelParam._m0[1u].x) + (_1218 * (1.0 - cbModelParam._m0[1u].x));
    float _1243 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _273);
    float _1244 = isnan(_1243) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1243 : min(cbModelParam._m0[25u].z, _1243));
    float _1326;
    float _1328;
    float _1330;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1293 = fma(_495, cbModelParam._m0[13u].z, fma(_491, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _487)) + cbModelParam._m0[13u].w;
        float _1297 = fma(_495, cbModelParam._m0[14u].z, fma(_491, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _487)) + cbModelParam._m0[14u].w;
        float _1301 = fma(_495, cbModelParam._m0[15u].z, fma(_491, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _487)) + cbModelParam._m0[15u].w;
        float _1304 = fma(_436, cbModelParam._m0[13u].z, fma(_435, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _434));
        float _1307 = fma(_436, cbModelParam._m0[14u].z, fma(_435, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _434));
        float _1310 = fma(_436, cbModelParam._m0[15u].z, fma(_435, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _434));
        float _1338;
        if (_1304 > 0.0)
        {
            _1338 = abs((1.0 - _1293) / _1304);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1304 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1293 + 1.0) / _1304);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1338 = frontier_phi_14_12_ladder;
        }
        float _1565;
        if (_1307 > 0.0)
        {
            _1565 = abs((1.0 - _1297) / _1307);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1297 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1565 = frontier_phi_23_19_ladder;
        }
        float _1811;
        if (_1310 > 0.0)
        {
            _1811 = abs((1.0 - _1301) / _1310);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1301 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1811 = frontier_phi_35_30_ladder;
        }
        float _1813 = isnan(_1565) ? _1338 : (isnan(_1338) ? _1565 : min(_1338, _1565));
        float _1814 = isnan(_1811) ? _1813 : (isnan(_1813) ? _1811 : min(_1813, _1811));
        float _1818 = (_1814 * _1304) + _1293;
        float _1819 = (_1814 * _1307) + _1297;
        float _1820 = (_1814 * _1310) + _1301;
        float _1821 = _1814 * 9.9999997473787516355514526367188e-05;
        float _1823 = (-1.0) - _1821;
        float _1825 = _1821 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1820 > _1825) || ((_1820 < _1823) || ((_1819 > _1825) || ((_1819 < _1823) || ((_1818 < _1823) || (_1818 > _1825))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1944 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1820, cbModelParam._m0[9u].z, fma(_1819, cbModelParam._m0[9u].y, _1818 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1820, cbModelParam._m0[10u].z, fma(_1819, cbModelParam._m0[10u].y, _1818 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1820, cbModelParam._m0[11u].z, fma(_1819, cbModelParam._m0[11u].y, _1818 * cbModelParam._m0[11u].x))), _1244);
            frontier_phi_13_35_ladder = _1944.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1944.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1944.x * cbModelParam._m0[1u].y;
        }
        _1326 = frontier_phi_13_35_ladder_2;
        _1328 = frontier_phi_13_35_ladder_1;
        _1330 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_434, _435, _436), _1244);
        _1326 = _1314.x * cbModelParam._m0[1u].y;
        _1328 = _1314.y * cbModelParam._m0[1u].y;
        _1330 = _1314.z * cbModelParam._m0[1u].y;
    }
    float _1334 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _273);
    float _1335 = isnan(_1334) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1334 : min(cbModelParam._m0[25u].w, _1334));
    float _1428;
    float _1430;
    float _1432;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1392 = fma(_495, cbModelParam._m0[21u].z, fma(_491, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _487)) + cbModelParam._m0[21u].w;
        float _1396 = fma(_495, cbModelParam._m0[22u].z, fma(_491, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _487)) + cbModelParam._m0[22u].w;
        float _1400 = fma(_495, cbModelParam._m0[23u].z, fma(_491, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _487)) + cbModelParam._m0[23u].w;
        float _1403 = fma(_436, cbModelParam._m0[21u].z, fma(_435, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _434));
        float _1406 = fma(_436, cbModelParam._m0[22u].z, fma(_435, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _434));
        float _1409 = fma(_436, cbModelParam._m0[23u].z, fma(_435, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _434));
        float _1570;
        if (_1403 > 0.0)
        {
            _1570 = abs((1.0 - _1392) / _1403);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1392 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1570 = frontier_phi_25_21_ladder;
        }
        float _1838;
        if (_1406 > 0.0)
        {
            _1838 = abs((1.0 - _1396) / _1406);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1396 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1838 = frontier_phi_37_32_ladder;
        }
        float _2043;
        if (_1409 > 0.0)
        {
            _2043 = abs((1.0 - _1400) / _1409);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1400 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2043 = frontier_phi_46_43_ladder;
        }
        float _2045 = isnan(_1838) ? _1570 : (isnan(_1570) ? _1838 : min(_1570, _1838));
        float _2046 = isnan(_2043) ? _2045 : (isnan(_2045) ? _2043 : min(_2045, _2043));
        float _2050 = (_2046 * _1403) + _1392;
        float _2051 = (_2046 * _1406) + _1396;
        float _2052 = (_2046 * _1409) + _1400;
        float _2053 = _2046 * 9.9999997473787516355514526367188e-05;
        float _2054 = (-1.0) - _2053;
        float _2056 = _2053 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2052 > _2056) || ((_2052 < _2054) || ((_2051 > _2056) || ((_2051 < _2054) || ((_2050 < _2054) || (_2050 > _2056))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2251 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2052, cbModelParam._m0[17u].z, fma(_2051, cbModelParam._m0[17u].y, _2050 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2052, cbModelParam._m0[18u].z, fma(_2051, cbModelParam._m0[18u].y, _2050 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2052, cbModelParam._m0[19u].z, fma(_2051, cbModelParam._m0[19u].y, _2050 * cbModelParam._m0[19u].x))), _1335);
            frontier_phi_22_46_ladder = _2251.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2251.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2251.x * cbModelParam._m0[1u].z;
        }
        _1428 = frontier_phi_22_46_ladder_2;
        _1430 = frontier_phi_22_46_ladder_1;
        _1432 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1412 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_434, _435, _436), _1335);
        _1428 = _1412.x * cbModelParam._m0[1u].z;
        _1430 = _1412.y * cbModelParam._m0[1u].z;
        _1432 = _1412.z * cbModelParam._m0[1u].z;
    }
    float _1444 = ((((1.0 - _455) * ((_442 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_455 * _442)) * _426;
    float _1445 = _1444 * ((cbModelParam._m0[1u].w * (_1428 - _1326)) + _1326);
    float _1446 = _1444 * ((cbModelParam._m0[1u].w * (_1430 - _1328)) + _1328);
    float _1447 = _1444 * ((cbModelParam._m0[1u].w * (_1432 - _1330)) + _1330);
    float _1450 = fma(_1447, cbSceneParam._m0[89u].z, fma(_1446, cbSceneParam._m0[89u].y, _1445 * cbSceneParam._m0[89u].x));
    float _1453 = fma(_1447, cbSceneParam._m0[90u].z, fma(_1446, cbSceneParam._m0[90u].y, _1445 * cbSceneParam._m0[90u].x));
    float _1456 = fma(_1447, cbSceneParam._m0[91u].z, fma(_1446, cbSceneParam._m0[91u].y, _1445 * cbSceneParam._m0[91u].x));
    vec4 _1464 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_359, _360));
    float _1466 = _1464.w;
    float _1478 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1466);
    float _1479 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1466);
    float _1480 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1466);
    uvec4 _1484 = floatBitsToUint(cbInstanceData._m0[_400 + 5u]);
    uint _1486 = _1484.x * 14u;
    uint _1487 = _1486 + 13u;
    float _1494 = _426 + (-1.0);
    float _1499 = (cbLight._m0[_1487].x * _1494) + 1.0;
    float _1500 = (cbLight._m0[_1487].y * _1494) + 1.0;
    float _1501 = (cbLight._m0[_1487].z * _1494) + 1.0;
    float _1502 = (cbLight._m0[_1487].w * _1494) + 1.0;
    uint _1503 = _1486 + 5u;
    float _1509 = isnan(1.0) ? _1500 : (isnan(_1500) ? 1.0 : min(_1500, 1.0));
    uint _1513 = _1486 + 4u;
    float _1523 = isnan(1.0) ? _1499 : (isnan(_1499) ? 1.0 : min(_1499, 1.0));
    uint _1527 = _1486 | 1u;
    float _1538 = dot(vec3(cbLight._m0[_1486].xyz), vec3(_270, _271, _272));
    float _1541 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_270, _271, _272));
    float _3605 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
    float _3616 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
    float _1546 = (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * 0.3183098733425140380859375;
    float _1548 = (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * 0.3183098733425140380859375;
    float _1555 = ((cbLight._m0[_1503].x * _1509) * _1548) + (((cbLight._m0[_1513].x * _1478) * _1523) * _1546);
    float _1556 = ((_1509 * cbLight._m0[_1503].y) * _1548) + (((cbLight._m0[_1513].y * _1479) * _1523) * _1546);
    float _1557 = ((_1509 * cbLight._m0[_1503].z) * _1548) + (((cbLight._m0[_1513].z * _1480) * _1523) * _1546);
    uvec4 _1562 = floatBitsToUint(cbLight._m0[_1486 + 12u]);
    bool _1564 = _1562.x == 0u;
    float _1575;
    float _1577;
    float _1579;
    if (_1564)
    {
        _1575 = _1555;
        _1577 = _1556;
        _1579 = _1557;
    }
    else
    {
        uint _1583 = _1486 + 6u;
        float _1599 = (dot(vec3(cbLight._m0[_1486 + 2u].xyz), vec3(_270, _271, _272)) * 0.5) + 0.5;
        float _1600 = _1599 * _1599;
        float _3627 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1602 = isnan(1.0) ? _1501 : (isnan(_1501) ? 1.0 : min(_1501, 1.0));
        _1575 = (((cbLight._m0[_1583].x * 0.3183098733425140380859375) * _1601) * _1602) + _1555;
        _1577 = (((cbLight._m0[_1583].y * 0.3183098733425140380859375) * _1601) * _1602) + _1556;
        _1579 = (((cbLight._m0[_1583].z * 0.3183098733425140380859375) * _1601) * _1602) + _1557;
    }
    bool _1582 = _1562.y == 0u;
    float _1620;
    float _1622;
    float _1624;
    if (_1582)
    {
        _1620 = _1575;
        _1622 = _1577;
        _1624 = _1579;
    }
    else
    {
        uint _1782 = _1486 + 7u;
        float _1798 = (dot(vec3(cbLight._m0[_1486 + 3u].xyz), vec3(_270, _271, _272)) * 0.5) + 0.5;
        float _1799 = _1798 * _1798;
        float _3643 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1801 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
        _1620 = (((cbLight._m0[_1782].x * 0.3183098733425140380859375) * _1800) * _1801) + _1575;
        _1622 = (((cbLight._m0[_1782].y * 0.3183098733425140380859375) * _1800) * _1801) + _1577;
        _1624 = (((cbLight._m0[_1782].z * 0.3183098733425140380859375) * _1800) * _1801) + _1579;
    }
    uint _1627 = _1486 + 8u;
    float _1640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1486].w)) * _273) * 0.949999988079071044921875);
    float _1641 = _1640 * _1640;
    float _1642 = cbLight._m0[_1486].x + _351;
    float _1643 = cbLight._m0[_1486].y + _352;
    float _1644 = cbLight._m0[_1486].z + _353;
    float _1648 = inversesqrt(dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644)));
    float _1649 = _1648 * _1642;
    float _1650 = _1648 * _1643;
    float _1651 = _1648 * _1644;
    float _1652 = dot(vec3(_270, _271, _272), vec3(cbLight._m0[_1486].xyz));
    float _3659 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
    float _1655 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _1656 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _1657 = dot(vec3(_270, _271, _272), vec3(_1649, _1650, _1651));
    float _3681 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1660 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _1661 = dot(vec3(cbLight._m0[_1486].xyz), vec3(_1649, _1650, _1651));
    float _3692 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1665 = _1641 * _1641;
    float _1669 = ((_1660 * _1660) * (_1665 + (-1.0))) + 1.0;
    float _1680 = (exp2(log2(1.0 - (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1681 = 1.0 - _1641;
    float _1692 = (0.5 / (((_1656 * ((_1655 * _1681) + _1641)) + 9.9999999392252902907785028219223e-09) + (((_1656 * _1681) + _1641) * _1655))) * _1655;
    float _3703 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1694 = (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1665 / ((_1669 * _1669) * 3.141590118408203125));
    uint _1708 = _1486 + 9u;
    float _1719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1527].w)) * _273) * 0.949999988079071044921875);
    float _1720 = _1719 * _1719;
    float _1721 = cbLight._m0[_1527].x + _351;
    float _1722 = cbLight._m0[_1527].y + _352;
    float _1723 = cbLight._m0[_1527].z + _353;
    float _1727 = inversesqrt(dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723)));
    float _1728 = _1727 * _1721;
    float _1729 = _1727 * _1722;
    float _1730 = _1727 * _1723;
    float _1731 = dot(vec3(_270, _271, _272), vec3(cbLight._m0[_1527].xyz));
    float _3714 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1734 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _1735 = dot(vec3(_270, _271, _272), vec3(_1728, _1729, _1730));
    float _3725 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1738 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _1739 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_1728, _1729, _1730));
    float _3736 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1743 = _1720 * _1720;
    float _1747 = ((_1738 * _1738) * (_1743 + (-1.0))) + 1.0;
    float _1756 = (exp2(log2(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1757 = 1.0 - _1720;
    float _1767 = (0.5 / (((_1656 * ((_1734 * _1757) + _1720)) + 9.9999999392252902907785028219223e-09) + (((_1656 * _1757) + _1720) * _1734))) * _1734;
    float _3747 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1769 = (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1743 / ((_1747 * _1747) * 3.141590118408203125));
    float _1779 = (((_1756 * cbLight._m0[_1708].x) * _1769) * _1509) + ((((cbLight._m0[_1627].x * _1478) * _1680) * _1694) * _1523);
    float _1780 = (((_1756 * cbLight._m0[_1708].y) * _1769) * _1509) + ((((cbLight._m0[_1627].y * _1479) * _1680) * _1694) * _1523);
    float _1781 = (((_1756 * cbLight._m0[_1708].z) * _1769) * _1509) + ((((cbLight._m0[_1627].z * _1480) * _1680) * _1694) * _1523);
    float _1843;
    float _1845;
    float _1847;
    if (_1564)
    {
        _1843 = _1779;
        _1845 = _1780;
        _1847 = _1781;
    }
    else
    {
        uint _1849 = _1486 + 2u;
        uint _1853 = _1486 + 10u;
        float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1849].w)) * _273) * 0.949999988079071044921875);
        float _1868 = _1867 * _1867;
        float _1869 = cbLight._m0[_1849].x + _351;
        float _1870 = cbLight._m0[_1849].y + _352;
        float _1871 = cbLight._m0[_1849].z + _353;
        float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
        float _1876 = _1875 * _1869;
        float _1877 = _1875 * _1870;
        float _1878 = _1875 * _1871;
        float _1879 = dot(vec3(_270, _271, _272), vec3(cbLight._m0[_1849].xyz));
        float _3758 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1882 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1883 = dot(vec3(_270, _271, _272), vec3(_1876, _1877, _1878));
        float _3769 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1886 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1887 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_1876, _1877, _1878));
        float _3780 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1891 = _1868 * _1868;
        float _1895 = ((_1886 * _1886) * (_1891 + (-1.0))) + 1.0;
        float _1904 = (exp2(log2(1.0 - (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1905 = 1.0 - _1868;
        float _1915 = (0.5 / (((_1656 * ((_1882 * _1905) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1656 * _1905) + _1868) * _1882))) * _1882;
        float _3791 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1917 = (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1891 / ((_1895 * _1895) * 3.141590118408203125));
        float _1918 = isnan(1.0) ? _1501 : (isnan(_1501) ? 1.0 : min(_1501, 1.0));
        _1843 = (((_1904 * cbLight._m0[_1853].x) * _1917) * _1918) + _1779;
        _1845 = (((_1904 * cbLight._m0[_1853].y) * _1917) * _1918) + _1780;
        _1847 = (((_1904 * cbLight._m0[_1853].z) * _1917) * _1918) + _1781;
    }
    float _1953;
    float _1955;
    float _1957;
    if (_1582)
    {
        _1953 = _1843;
        _1955 = _1845;
        _1957 = _1847;
    }
    else
    {
        uint _1964 = _1486 + 3u;
        uint _1968 = _1486 + 11u;
        float _1982 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1964].w)) * _273) * 0.949999988079071044921875);
        float _1983 = _1982 * _1982;
        float _1984 = cbLight._m0[_1964].x + _351;
        float _1985 = cbLight._m0[_1964].y + _352;
        float _1986 = cbLight._m0[_1964].z + _353;
        float _1990 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
        float _1991 = _1990 * _1984;
        float _1992 = _1990 * _1985;
        float _1993 = _1990 * _1986;
        float _1994 = dot(vec3(_270, _271, _272), vec3(cbLight._m0[_1964].xyz));
        float _3807 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1997 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1998 = dot(vec3(_270, _271, _272), vec3(_1991, _1992, _1993));
        float _3818 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2001 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _2002 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_1991, _1992, _1993));
        float _3829 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2006 = _1983 * _1983;
        float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
        float _2019 = (exp2(log2(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2020 = 1.0 - _1983;
        float _2030 = (0.5 / (((_1656 * ((_1997 * _2020) + _1983)) + 9.9999999392252902907785028219223e-09) + (((_1656 * _2020) + _1983) * _1997))) * _1997;
        float _3840 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2032 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
        float _2033 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
        _1953 = (((_2019 * cbLight._m0[_1968].x) * _2032) * _2033) + _1843;
        _1955 = (((_2019 * cbLight._m0[_1968].y) * _2032) * _2033) + _1845;
        _1957 = (((_2019 * cbLight._m0[_1968].z) * _2032) * _2033) + _1847;
    }
    float _2168;
    float _2170;
    float _2172;
    float _2174;
    float _2176;
    float _2178;
    if (_1484.y == 0u)
    {
        float _2108 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2109 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2108;
        float _2110 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2108;
        float _2111 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2108;
        uvec4 _2123 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2124 = _2123.x;
        uint _2135 = uint((float(_2123.y) * floor(float(uint(cbSceneParam._m0[85u].y * _360) / _2124))) + floor(float(uint(cbSceneParam._m0[85u].x * _359) / _2124)));
        float _2145 = (log2(_2111 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2146 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        uint _2149 = uint(isnan(14.0) ? _2146 : (isnan(_2146) ? 14.0 : min(_2146, 14.0)));
        uvec4 _2154 = texelFetch(g_lightClusterGridBuffer, int(((_2149 << 2u) + (_2135 << 6u)) >> 2u));
        uint _2155 = _2154.x;
        uint _2156 = _2123.z;
        float _2256;
        float _2258;
        float _2260;
        float _2262;
        float _2264;
        float _2266;
        if (((((1u << ((_2156 >> 4u) & 15u)) + 4294967295u) & _2155) == 0u) || ((_2156 & 240u) == 0u))
        {
            _2256 = 0.0;
            _2258 = 0.0;
            _2260 = 0.0;
            _2262 = 0.0;
            _2264 = 0.0;
            _2266 = 0.0;
        }
        else
        {
            float _2257;
            float _2259;
            float _2261;
            float _2263;
            float _2265;
            float _2267;
            float _2401 = 0.0;
            float _2402 = 0.0;
            float _2403 = 0.0;
            float _2404 = 0.0;
            float _2405 = 0.0;
            float _2406 = 0.0;
            uint _2407 = 0u;
            uint _2416;
            bool _2417;
            for (;;)
            {
                _2416 = texelFetch(g_lightClassification, int((((_2149 << 5u) + (_2135 << 9u)) + (_2407 << 2u)) >> 2u)).x;
                _2417 = _2416 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2417)
                {
                    frontier_phi_61_pred = _2401;
                    frontier_phi_61_pred_1 = _2406;
                    frontier_phi_61_pred_2 = _2405;
                    frontier_phi_61_pred_3 = _2404;
                    frontier_phi_61_pred_4 = _2403;
                    frontier_phi_61_pred_5 = _2402;
                }
                else
                {
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    uint _2531;
                    _2525 = _2401;
                    _2526 = _2402;
                    _2527 = _2403;
                    _2528 = _2404;
                    _2529 = _2405;
                    _2530 = _2406;
                    _2531 = _2416;
                    float _2457;
                    float _2458;
                    float _2459;
                    float _2460;
                    float _2461;
                    float _2462;
                    for (;;)
                    {
                        uint _2535 = uint(findLSB(_2531)) + (_2407 << 5u);
                        uint _2532 = (_2531 + 4294967295u) & _2531;
                        uint _2537 = _2535 * 48u;
                        vec4 _2551 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2537)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 3u)).x));
                        uint _2557 = (_2535 * 48u) + 4u;
                        vec4 _2570 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2557)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 3u)).x));
                        uint _2576 = (_2535 * 48u) + 8u;
                        vec3 _2587 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2576)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 2u)).x));
                        float _2591 = _2551.x - _2109;
                        float _2592 = _2551.y - _2110;
                        float _2593 = _2551.z - _2111;
                        float _2594 = dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593));
                        float _2597 = inversesqrt(_2594);
                        float _2598 = _2597 * _2591;
                        float _2599 = _2597 * _2592;
                        float _2600 = _2597 * _2593;
                        float _2601 = dot(vec3(_381, _384, _387), vec3(_2598, _2599, _2600));
                        float _2606 = 1.0 - (_2594 * _2551.w);
                        float _3866 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
                        float _2607 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
                        float _2608 = sqrt(_2594) * _2570.w;
                        float _2611 = 1.39999997615814208984375 / (_2608 + 1.39999997615814208984375);
                        float _2612 = _2611 * _2611;
                        float _2615 = ((1.0 - _2612) * _2601) + _2612;
                        float _2618 = _2608 * _2608;
                        float _2622 = ((isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0))) * _2607) / ((_2618 * 0.699999988079071044921875) + 1.0);
                        float _2626 = (-0.0) - _2109;
                        float _2627 = (-0.0) - _2110;
                        float _2628 = (-0.0) - _2111;
                        float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
                        float _2633 = _2632 * _2626;
                        float _2634 = _2632 * _2627;
                        float _2635 = _2632 * _2628;
                        float _2643 = exp2(log2(1.0 / ((_2618 * 3.5) + 5.0)) * 0.25);
                        float _2644 = 1.0 - _442;
                        float _2651 = sqrt(1.0 - ((1.0 - (_2644 * _2644)) * (1.0 - (_2643 * _2643))));
                        float _2652 = _2651 * _2651;
                        float _2653 = _2652 * _2652;
                        float _2654 = _2633 + _2598;
                        float _2655 = _2634 + _2599;
                        float _2656 = _2635 + _2600;
                        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
                        float _2664 = dot(vec3(_381, _384, _387), vec3(_2633, _2634, _2635));
                        float _3882 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                        float _2667 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
                        float _2668 = dot(vec3(_381, _384, _387), vec3(_2660 * _2654, _2660 * _2655, _2660 * _2656));
                        float _3893 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
                        float _2671 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
                        float _2675 = ((_2671 * _2671) * (_2653 + (-1.0))) + 1.0;
                        float _2676 = _2611 * _2652;
                        float _2677 = _2676 * _2676;
                        float _2680 = ((1.0 - _2677) * _2601) + _2677;
                        float _3904 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                        float _2681 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
                        float _2682 = 1.0 - _2652;
                        float _2692 = (0.5 / (((_2681 * ((_2667 * _2682) + _2652)) + 9.9999999392252902907785028219223e-09) + (((_2681 * _2682) + _2652) * _2667))) * _2681;
                        float _3915 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
                        float _2703 = (((_2653 * 3.1415927410125732421875) * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) / ((_2675 * _2675) * ((_2618 * 2.1991131305694580078125) + 3.141590118408203125))) * _2607;
                        _2460 = (_2622 * _2570.x) + _2528;
                        _2461 = (_2622 * _2570.y) + _2529;
                        _2462 = (_2622 * _2570.z) + _2530;
                        _2457 = (_2703 * _2587.x) + _2525;
                        _2458 = (_2703 * _2587.y) + _2526;
                        _2459 = (_2703 * _2587.z) + _2527;
                        if (_2532 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2525 = _2457;
                            _2526 = _2458;
                            _2527 = _2459;
                            _2528 = _2460;
                            _2529 = _2461;
                            _2530 = _2462;
                            _2531 = _2532;
                        }
                    }
                    frontier_phi_61_pred = _2457;
                    frontier_phi_61_pred_1 = _2462;
                    frontier_phi_61_pred_2 = _2461;
                    frontier_phi_61_pred_3 = _2460;
                    frontier_phi_61_pred_4 = _2459;
                    frontier_phi_61_pred_5 = _2458;
                }
                _2257 = frontier_phi_61_pred;
                _2267 = frontier_phi_61_pred_1;
                _2265 = frontier_phi_61_pred_2;
                _2263 = frontier_phi_61_pred_3;
                _2261 = frontier_phi_61_pred_4;
                _2259 = frontier_phi_61_pred_5;
                uint _2408 = _2407 + 1u;
                if (_2408 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2401 = _2257;
                    _2402 = _2259;
                    _2403 = _2261;
                    _2404 = _2263;
                    _2405 = _2265;
                    _2406 = _2267;
                    _2407 = _2408;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2256 = _2257;
            _2258 = _2259;
            _2260 = _2261;
            _2262 = _2263;
            _2264 = _2265;
            _2266 = _2267;
        }
        uvec4 _2270 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2271 = _2270.z;
        uint _2273 = (_2271 >> 8u) & 15u;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        if (((4294967295u << _2273) & _2155) == 0u)
        {
            _2369 = _2256;
            _2371 = _2258;
            _2373 = _2260;
            _2375 = _2262;
            _2377 = _2264;
            _2379 = _2266;
        }
        else
        {
            float _2394 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
            float _2395 = _2394 * _2109;
            float _2396 = _2394 * _2110;
            float _2397 = _2394 * _2111;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2273 < ((_2271 >> 12u) & 15u))
            {
                float _2370;
                float _2372;
                float _2374;
                float _2376;
                float _2378;
                float _2380;
                float _2508 = _2256;
                float _2509 = _2258;
                float _2510 = _2260;
                float _2511 = _2262;
                float _2512 = _2264;
                float _2513 = _2266;
                uint _2514 = _2273;
                uint _2523;
                bool _2524;
                for (;;)
                {
                    _2523 = texelFetch(g_lightClassification, int((((_2149 << 5u) + (_2135 << 9u)) + (_2514 << 2u)) >> 2u)).x;
                    _2524 = _2523 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2524)
                    {
                        frontier_phi_67_pred = _2511;
                        frontier_phi_67_pred_1 = _2512;
                        frontier_phi_67_pred_2 = _2513;
                        frontier_phi_67_pred_3 = _2510;
                        frontier_phi_67_pred_4 = _2509;
                        frontier_phi_67_pred_5 = _2508;
                    }
                    else
                    {
                        float _2708;
                        float _2709;
                        float _2710;
                        float _2711;
                        float _2712;
                        float _2713;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _2721 = _2508;
                        float _2722 = _2509;
                        float _2723 = _2510;
                        float _2724 = _2511;
                        float _2725 = _2512;
                        float _2726 = _2513;
                        uint _2727 = _2523;
                        uint _2728;
                        vec4 _2753;
                        float _2754;
                        vec4 _2769;
                        vec3 _2781;
                        vec4 _2797;
                        vec4 _2813;
                        float _2860;
                        bool _2861;
                        for (;;)
                        {
                            uint _2738 = ((_2514 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2727));
                            _2728 = (_2727 + 4294967295u) & _2727;
                            uint _2740 = _2738 * 40u;
                            _2753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 3u)).x));
                            _2754 = _2753.w;
                            uint _2756 = (_2738 * 40u) + 4u;
                            _2769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 3u)).x));
                            uint _2771 = (_2738 * 40u) + 8u;
                            _2781 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 2u)).x));
                            uint _2784 = (_2738 * 40u) + 16u;
                            _2797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 3u)).x));
                            uint _2800 = (_2738 * 40u) + 20u;
                            _2813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 3u)).x));
                            uint _2816 = (_2738 * 40u) + 24u;
                            vec4 _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            uint _2835 = (_2738 * 40u) + 28u;
                            vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            _2860 = fma(_2111, _2848.z, fma(_2110, _2848.y, _2848.x * _2109)) + _2848.w;
                            _2861 = !((fma(_2111, _2829.z, fma(_2110, _2829.y, _2829.x * _2109)) + _2829.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2861)
                            {
                                float _2888 = _2753.x - _2109;
                                float _2889 = _2753.y - _2110;
                                float _2890 = _2753.z - _2111;
                                float _2891 = dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890));
                                float _2894 = inversesqrt(_2891);
                                float _2895 = _2894 * _2888;
                                float _2896 = _2894 * _2889;
                                float _2897 = _2894 * _2890;
                                float _2901 = 1.0 - (_2891 / (_2754 * _2754));
                                float _3926 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                                float _2902 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
                                float _2906 = sqrt(_2891) * _2769.w;
                                float _2908 = 1.39999997615814208984375 / (_2906 + 1.39999997615814208984375);
                                float _2909 = _2908 * _2908;
                                float _2912 = ((1.0 - _2909) * dot(vec3(_2895, _2896, _2897), vec3(_381, _384, _387))) + _2909;
                                float _2915 = _2906 * _2906;
                                float _2919 = (fma(_2111, _2797.z, fma(_2110, _2797.y, _2797.x * _2109)) + _2797.w) / _2860;
                                float _2920 = (fma(_2111, _2813.z, fma(_2110, _2813.y, _2813.x * _2109)) + _2813.w) / _2860;
                                float _2924 = 1.0 - dot(vec2(_2919, _2920), vec2(_2919, _2920));
                                float _3942 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                                float _2925 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
                                float _2926 = _2925 * (((isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))) * _2902) / ((_2915 * 0.699999988079071044921875) + 1.0));
                                float _2938 = exp2(log2(1.0 / ((_2915 * 3.5) + 5.0)) * 0.25);
                                float _2939 = 1.0 - _442;
                                float _2946 = sqrt(1.0 - ((1.0 - (_2939 * _2939)) * (1.0 - (_2938 * _2938))));
                                float _2947 = _2946 * _2946;
                                float _2948 = _2947 * _2947;
                                float _2949 = _2895 - _2395;
                                float _2950 = _2896 - _2396;
                                float _2951 = _2897 - _2397;
                                float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
                                float _2959 = dot(vec3(_381, _384, _387), vec3((-0.0) - _2395, (-0.0) - _2396, (-0.0) - _2397));
                                float _3953 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                                float _2962 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                                float _2963 = dot(vec3(_381, _384, _387), vec3(_2955 * _2949, _2955 * _2950, _2955 * _2951));
                                float _3964 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                                float _2966 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                                float _2970 = ((_2966 * _2966) * (_2948 + (-1.0))) + 1.0;
                                float _2971 = _2908 * _2947;
                                float _2972 = _2971 * _2971;
                                float _2978 = ((1.0 - _2972) * dot(vec3(_381, _384, _387), vec3(_2895, _2896, _2897))) + _2972;
                                float _3975 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                                float _2979 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                                float _2980 = 1.0 - _2947;
                                float _2990 = (0.5 / (((_2979 * ((_2962 * _2980) + _2947)) + 9.9999999392252902907785028219223e-09) + (((_2979 * _2980) + _2947) * _2962))) * _2979;
                                float _3986 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                                float _3000 = (_2925 * _2902) * (((_2948 * 3.1415927410125732421875) * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) / ((_2970 * _2970) * ((_2915 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3000 * _2781.x;
                                frontier_phi_73_pred_1 = _3000 * _2781.y;
                                frontier_phi_73_pred_2 = _2926 * _2769.z;
                                frontier_phi_73_pred_3 = _2926 * _2769.y;
                                frontier_phi_73_pred_4 = _2926 * _2769.x;
                                frontier_phi_73_pred_5 = _3000 * _2781.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3004 = frontier_phi_73_pred;
                            _3005 = frontier_phi_73_pred_1;
                            _3009 = frontier_phi_73_pred_2;
                            _3008 = frontier_phi_73_pred_3;
                            _3007 = frontier_phi_73_pred_4;
                            _3006 = frontier_phi_73_pred_5;
                            _2711 = _3007 + _2724;
                            _2712 = _3008 + _2725;
                            _2713 = _3009 + _2726;
                            _2708 = _3004 + _2721;
                            _2709 = _3005 + _2722;
                            _2710 = _3006 + _2723;
                            if (_2728 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2721 = _2708;
                                _2722 = _2709;
                                _2723 = _2710;
                                _2724 = _2711;
                                _2725 = _2712;
                                _2726 = _2713;
                                _2727 = _2728;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2711;
                        frontier_phi_67_pred_1 = _2712;
                        frontier_phi_67_pred_2 = _2713;
                        frontier_phi_67_pred_3 = _2710;
                        frontier_phi_67_pred_4 = _2709;
                        frontier_phi_67_pred_5 = _2708;
                    }
                    _2376 = frontier_phi_67_pred;
                    _2378 = frontier_phi_67_pred_1;
                    _2380 = frontier_phi_67_pred_2;
                    _2374 = frontier_phi_67_pred_3;
                    _2372 = frontier_phi_67_pred_4;
                    _2370 = frontier_phi_67_pred_5;
                    uint _2515 = _2514 + 1u;
                    if (_2515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2508 = _2370;
                        _2509 = _2372;
                        _2510 = _2374;
                        _2511 = _2376;
                        _2512 = _2378;
                        _2513 = _2380;
                        _2514 = _2515;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2378;
                frontier_phi_55_56_ladder_1 = _2380;
                frontier_phi_55_56_ladder_2 = _2376;
                frontier_phi_55_56_ladder_3 = _2374;
                frontier_phi_55_56_ladder_4 = _2372;
                frontier_phi_55_56_ladder_5 = _2370;
            }
            else
            {
                frontier_phi_55_56_ladder = _2264;
                frontier_phi_55_56_ladder_1 = _2266;
                frontier_phi_55_56_ladder_2 = _2262;
                frontier_phi_55_56_ladder_3 = _2260;
                frontier_phi_55_56_ladder_4 = _2258;
                frontier_phi_55_56_ladder_5 = _2256;
            }
            _2369 = frontier_phi_55_56_ladder_5;
            _2371 = frontier_phi_55_56_ladder_4;
            _2373 = frontier_phi_55_56_ladder_3;
            _2375 = frontier_phi_55_56_ladder_2;
            _2377 = frontier_phi_55_56_ladder;
            _2379 = frontier_phi_55_56_ladder_1;
        }
        float _2384 = isnan(1.0) ? _426 : (isnan(_426) ? 1.0 : min(_426, 1.0));
        _2168 = (_2384 * _2375) + _1620;
        _2170 = (_2384 * _2377) + _1622;
        _2172 = (_2384 * _2379) + _1624;
        _2174 = ((_2369 * 0.039999999105930328369140625) * _2384) + _1953;
        _2176 = ((_2371 * 0.039999999105930328369140625) * _2384) + _1955;
        _2178 = ((_2373 * 0.039999999105930328369140625) * _2384) + _1957;
    }
    else
    {
        _2168 = _1620;
        _2170 = _1622;
        _2172 = _1624;
        _2174 = _1953;
        _2176 = _1955;
        _2178 = _1957;
    }
    float _4002 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _4013 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _4024 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    uint _2198 = _400 + 6u;
    float _2206 = _359 / cbSceneParam._m0[86u].x;
    float _2207 = _360 / cbSceneParam._m0[86u].y;
    vec4 _2221 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2206, _2207, (log2((isnan(cbSceneParam._m0[77u].w) ? _292 : (isnan(_292) ? cbSceneParam._m0[77u].w : min(_292, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2223 = _2221.x;
    float _2224 = _2221.y;
    float _2225 = _2221.z;
    float _2226 = _2221.w;
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    if (_292 > cbSceneParam._m0[78u].w)
    {
        float _2281 = isnan(_292) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _292 : min(cbSceneParam._m0[80u].w, _292));
        float _2282 = _2281 / _292;
        float _2293 = _2282 * _344;
        float _2294 = _345 * _2282;
        float _2295 = (-0.0) - _2294;
        float _2297 = _2282 * _346;
        float _2299 = (cbSceneParam._m0[77u].w * _2295) / _2281;
        float _2300 = _2299 + cbSceneParam._m0[79u].w;
        float _2301 = cbSceneParam._m0[79u].w - _2294;
        float _2307 = sqrt(((_2293 * _2293) + (_2294 * _2294)) + (_2297 * _2297));
        float _2310 = (1.0 - (cbSceneParam._m0[77u].w / _2281)) * _2307;
        float _2315 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2317 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2470;
        if (abs((_2295 - _2299) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2470 = ((((_2300 > 0.0) ? exp2(_2315 * _2300) : (2.0 - exp2(_2317 * _2300))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2310;
        }
        else
        {
            float _2430 = 1.0 / cbSceneParam._m0[80u].x;
            float _2431 = isnan(_2301) ? _2300 : (isnan(_2300) ? _2301 : max(_2300, _2301));
            float _2432 = isnan(_2301) ? _2300 : (isnan(_2300) ? _2301 : min(_2300, _2301));
            float _2441 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : min(_2431, 0.0));
            float _2442 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : min(_2432, 0.0));
            _2470 = ((abs(_2307 / _2295) * cbSceneParam._m0[80u].y) * ((((_2441 - _2442) * 2.0) - ((exp2(_2315 * (isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0)))) - exp2(_2315 * (isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0))))) * _2430)) - ((exp2(_2317 * _2441) - exp2(_2317 * _2442)) * _2430))) + (_2310 * cbSceneParam._m0[80u].z);
        }
        vec4 _2472 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2206, _2207, 1.0), 0.0);
        float _2481 = exp2((_2470 * (-1.44269502162933349609375)) * (1.0 - _2472.w));
        float _2482 = log2(_2481);
        float _2498 = log2(_2226);
        _2319 = (exp2(_2498 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2482 * cbSceneParam._m0[78u].x)) * _2472.x) / cbSceneParam._m0[78u].x)) + _2223;
        _2321 = (exp2(_2498 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2482 * cbSceneParam._m0[78u].y)) * _2472.y) / cbSceneParam._m0[78u].y)) + _2224;
        _2323 = (exp2(_2498 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2482 * cbSceneParam._m0[78u].z)) * _2472.z) / cbSceneParam._m0[78u].z)) + _2225;
        _2325 = _2481 * _2226;
    }
    else
    {
        _2319 = _2223;
        _2321 = _2224;
        _2323 = _2225;
        _2325 = _2226;
    }
    float _2337 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2338 = _2337 == 3.0;
    float _2339 = log2(_2325);
    float _2346 = exp2(_2339 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_2168 + ((isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0))) * _426))) + ((_2174 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _1233)) * cbPerFrame._m0[3u].x));
    float _2347 = exp2(_2339 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_2170 + ((isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))) * _426))) + ((_2176 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _1233)) * cbPerFrame._m0[3u].x));
    float _2348 = exp2(_2339 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2172 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _426))) + ((_2178 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _1233)) * cbPerFrame._m0[3u].x));
    float _2357 = (_2337 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2357 * (_2338 ? _2346 : (_2346 + (cbSceneParam._m0[72u].w * _2319)));
    SV_Target.y = _2357 * (_2338 ? _2347 : (_2347 + (cbSceneParam._m0[72u].w * _2321)));
    SV_Target.z = _2357 * (_2338 ? _2348 : (_2348 + (cbSceneParam._m0[72u].w * _2323)));
    SV_Target.w = cbInstanceData._m0[_2198].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2198].w;
}


