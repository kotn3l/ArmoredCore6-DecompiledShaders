#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _900;
float _3291;
float _3292;
float _3293;
float _3294;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.w;
    float _242 = _235.x * cbMtdParam._m0[9u].x;
    float _243 = _235.y * cbMtdParam._m0[9u].y;
    float _244 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(M_AMSN_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _263 = _260.x + cbMtdParam._m0[10u].x;
    vec4 _275 = texture(sampler2D(M_AMSN_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _279 = _275.z;
    float _283 = (_275.x * 2.0) + (-1.0);
    float _285 = (_275.y * 2.0) + (-1.0);
    float _286 = dot(vec2(_283, _285), vec2(_283, _285));
    float _3303 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _292 = sqrt(1.0 - (isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0))));
    float _295 = fma(_292, _213, fma(_285, _205 * TANGENT.x, (_191 * _184) * _283));
    float _298 = fma(_292, _214, fma(_285, _205 * TANGENT.y, (_191 * _185) * _283));
    float _301 = fma(_292, _215, fma(_285, _205 * TANGENT.z, (_191 * _186) * _283));
    float _305 = inversesqrt(dot(vec3(_295, _298, _301), vec3(_295, _298, _301)));
    float _306 = _305 * _295;
    float _307 = _305 * _298;
    float _308 = _305 * _301;
    float _312 = inversesqrt(dot(vec3(_306, _307, _308), vec3(_306, _307, _308)));
    float _313 = _312 * _306;
    float _314 = _312 * _307;
    float _315 = _312 * _308;
    float _3314 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _316 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
    float _3325 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3336 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3347 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3358 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _320 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    float _336 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    vec4 _401 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _403 = _401.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _579 = sqrt(((_387 * _387) + (_388 * _388)) + (_389 * _389));
        float _585 = (cbMatDynParam._m0[5u].x * _579) + cbMatDynParam._m0[5u].y;
        float _3369 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _586 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _590 = (cbMatDynParam._m0[5u].z * _579) + cbMatDynParam._m0[5u].w;
        float _3380 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) - _586)) + _586) < ((_403 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _415 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _416 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _436 = fma(_315, cbSceneParam._m0[5u].z, fma(_314, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _313));
    float _439 = fma(_315, cbSceneParam._m0[6u].z, fma(_314, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _313));
    float _442 = fma(_315, cbSceneParam._m0[7u].z, fma(_314, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _313));
    uint _455 = uint(roundEven(NORMAL.w)) * 13u;
    uint _457 = _455 + 9u;
    uint _458 = _457 + uint(cbMatDynParam._m0[0u].w);
    float _464 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0)))) * cbInstanceData._m0[_458].x;
    float _465 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0)))) * cbInstanceData._m0[_458].y;
    float _466 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0)))) * cbInstanceData._m0[_458].z;
    float _3391 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    float _3402 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _468 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _3413 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _470 = 1.0 - _320;
    float _471 = _467 * _470;
    float _472 = _468 * _470;
    float _473 = _469 * _470;
    float _478 = (_467 + (-0.039999999105930328369140625)) * _320;
    float _479 = (_468 + (-0.039999999105930328369140625)) * _320;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _320;
    float _481 = _478 + 0.039999999105930328369140625;
    float _483 = _479 + 0.039999999105930328369140625;
    float _484 = _480 + 0.039999999105930328369140625;
    vec4 _493 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _415, cbSceneParam._m0[86u].y * _416));
    float _496 = _493.x * TEXCOORD.z;
    float _497 = dot(vec3(_313, _314, _315), vec3(_394, _395, _396));
    float _500 = _497 * 2.0;
    float _504 = (_500 * _313) - _394;
    float _505 = (_500 * _314) - _395;
    float _506 = (_500 * _315) - _396;
    float _510 = abs(dot(vec3(_394, _395, _396), vec3(_313, _314, _315)));
    float _3424 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _512 = sqrt(_316);
    float _525 = exp2((_512 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_512 * 3.0));
    float _531 = (1.0 - _525) * ((_512 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _532 = _525 * _512;
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _899;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _624 = fma(_568, cbModelParam._m0[26u].z, fma(_564, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _560));
        float _628 = fma(_568, cbModelParam._m0[27u].z, fma(_564, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _560));
        float _632 = fma(_568, cbModelParam._m0[28u].z, fma(_564, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _560));
        float _657 = _560 + _313;
        float _658 = _564 + _314;
        float _659 = _568 + _315;
        float _669 = fma(_659, cbModelParam._m0[26u].z, fma(_658, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _657)) - _624;
        float _670 = fma(_659, cbModelParam._m0[27u].z, fma(_658, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _657)) - _628;
        float _671 = fma(_659, cbModelParam._m0[28u].z, fma(_658, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _657)) - _632;
        float _675 = inversesqrt(dot(vec3(_669, _670, _671), vec3(_669, _670, _671)));
        float _688 = ((_675 * _669) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_624 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _689 = ((_675 * _670) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_628 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _690 = ((_675 * _671) / cbModelParam._m0[34u].z) + ((((((_632 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        float _727 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_693.x + (-0.5));
        float _729 = _727 * (_693.y + (-0.5));
        float _730 = _727 * (_693.z + (-0.5));
        float _737 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_700.x + (-0.5));
        float _739 = _737 * (_700.y + (-0.5));
        float _740 = _737 * (_700.z + (-0.5));
        float _747 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_707.x + (-0.5));
        float _749 = _747 * (_707.y + (-0.5));
        float _750 = _747 * (_707.z + (-0.5));
        float _757 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_714.x + (-0.5));
        float _759 = _757 * (_714.y + (-0.5));
        float _760 = _757 * (_714.z + (-0.5));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = _728 * 0.5;
        float _765 = _738 * 0.5;
        float _766 = _748 * 0.5;
        float _767 = dot(vec3(_764, _765, _766), vec3(_764, _765, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _781 = (dot(vec3(_313, _314, _315), vec3(_772 * _764, _772 * _765, _772 * _766)) + 1.0) * 0.5;
        float _3450 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _791 = sqrt(((_765 * _765) + (_764 * _764)) + (_766 * _766)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3461 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _3472 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_793 + 1.0))) + _798) * _761;
        float _808 = _729 * 0.5;
        float _809 = _739 * 0.5;
        float _810 = _749 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _824 = (dot(vec3(_313, _314, _315), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3483 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _833 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3494 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3505 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * (_835 + 1.0))) + _840) * _762;
        float _850 = _730 * 0.5;
        float _851 = _740 * 0.5;
        float _852 = _750 * 0.5;
        float _853 = dot(vec3(_850, _851, _852), vec3(_850, _851, _852));
        float _858 = (_853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_853);
        float _866 = (dot(vec3(_313, _314, _315), vec3(_858 * _850, _858 * _851, _858 * _852)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _875 = sqrt(((_851 * _851) + (_850 * _850)) + (_852 * _852)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _877 = _876 * 2.0;
        float _881 = (1.0 - _876) / (_876 + 1.0);
        float _3538 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _891 = ((((1.0 - _882) * (_877 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_877 + 1.0))) + _882) * _763;
        _899 = _730;
        _901 = _729;
        _902 = _728;
        _903 = _740;
        _904 = _739;
        _905 = _738;
        _906 = _750;
        _907 = _749;
        _908 = _748;
        _909 = _763;
        _910 = _762;
        _911 = _761;
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)));
    }
    else
    {
        _899 = _900;
        _901 = _900;
        _902 = _900;
        _903 = _900;
        _904 = _900;
        _905 = _900;
        _906 = _900;
        _907 = _900;
        _908 = _900;
        _909 = _900;
        _910 = _900;
        _911 = _900;
        _912 = 0.0;
        _913 = 0.0;
        _914 = 0.0;
    }
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _943 = fma(_568, cbModelParam._m0[30u].z, fma(_564, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _560));
        float _947 = fma(_568, cbModelParam._m0[31u].z, fma(_564, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _560));
        float _951 = fma(_568, cbModelParam._m0[32u].z, fma(_564, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _560));
        float _974 = _560 + _313;
        float _975 = _564 + _314;
        float _976 = _568 + _315;
        float _986 = fma(_976, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974)) - _943;
        float _987 = fma(_976, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974)) - _947;
        float _988 = fma(_976, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974)) - _951;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_943 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_947 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[35u].z) + ((((((_951 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1042 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1009.x + (-0.5));
        float _1044 = _1042 * (_1009.y + (-0.5));
        float _1045 = _1042 * (_1009.z + (-0.5));
        float _1052 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1016.x + (-0.5));
        float _1054 = _1052 * (_1016.y + (-0.5));
        float _1055 = _1052 * (_1016.z + (-0.5));
        float _1062 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1023.x + (-0.5));
        float _1064 = _1062 * (_1023.y + (-0.5));
        float _1065 = _1062 * (_1023.z + (-0.5));
        float _1072 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1030.x + (-0.5));
        float _1074 = _1072 * (_1030.y + (-0.5));
        float _1075 = _1072 * (_1030.z + (-0.5));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = _1043 * 0.5;
        float _1080 = _1053 * 0.5;
        float _1081 = _1063 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_313, _314, _315), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3601 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1106 + 1.0))) + _1111) * _1076;
        float _1121 = _1044 * 0.5;
        float _1122 = _1054 * 0.5;
        float _1123 = _1064 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_313, _314, _315), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3634 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_1148 + 1.0))) + _1153) * _1077;
        float _1163 = _1045 * 0.5;
        float _1164 = _1055 * 0.5;
        float _1165 = _1065 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_313, _314, _315), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3645 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3656 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3667 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1190 + 1.0))) + _1195) * _1078;
        _1212 = _1045;
        _1213 = _1044;
        _1214 = _1043;
        _1215 = _1055;
        _1216 = _1054;
        _1217 = _1053;
        _1218 = _1065;
        _1219 = _1064;
        _1220 = _1063;
        _1221 = _1078;
        _1222 = _1077;
        _1223 = _1076;
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
    }
    else
    {
        _1212 = _900;
        _1213 = _900;
        _1214 = _900;
        _1215 = _900;
        _1216 = _900;
        _1217 = _900;
        _1218 = _900;
        _1219 = _900;
        _1220 = _900;
        _1221 = _900;
        _1222 = _900;
        _1223 = _900;
        _1224 = 0.0;
        _1225 = 0.0;
        _1226 = 0.0;
    }
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _912)) + _912;
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _913)) + _913;
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _914)) + _914;
    float _1259 = fma(_1238, cbSceneParam._m0[89u].z, fma(_1237, cbSceneParam._m0[89u].y, _1236 * cbSceneParam._m0[89u].x));
    float _1262 = fma(_1238, cbSceneParam._m0[90u].z, fma(_1237, cbSceneParam._m0[90u].y, _1236 * cbSceneParam._m0[90u].x));
    float _1265 = fma(_1238, cbSceneParam._m0[91u].z, fma(_1237, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1236));
    float _1280 = _504 * 0.5;
    float _1281 = _505 * 0.5;
    float _1282 = _506 * 0.5;
    float _1283 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1286 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1289 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1323;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1296 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_899, _903, _906, _909));
        float _1300 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_901, _904, _907, _910));
        float _1304 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_902, _905, _908, _911));
        float _1311 = dot(vec4(cbModelParam._m0[39u]), vec4(_1280, _1281, _1282, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1311) ? 0.0 : (isnan(0.0) ? _1311 : max(0.0, _1311))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1334;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1325 = dot(vec4(cbModelParam._m0[40u]), vec4(_1280, _1281, _1282, 1.0));
        _1334 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1325) ? 0.0 : (isnan(0.0) ? _1325 : max(0.0, _1325))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1334 = 1.0;
    }
    float _1338 = (_1334 * cbModelParam._m0[1u].x) + (_1323 * (1.0 - cbModelParam._m0[1u].x));
    float _1348 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _316);
    float _1349 = isnan(_1348) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1348 : min(cbModelParam._m0[25u].z, _1348));
    float _1431;
    float _1433;
    float _1435;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1398 = fma(_568, cbModelParam._m0[13u].z, fma(_564, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _560)) + cbModelParam._m0[13u].w;
        float _1402 = fma(_568, cbModelParam._m0[14u].z, fma(_564, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _560)) + cbModelParam._m0[14u].w;
        float _1406 = fma(_568, cbModelParam._m0[15u].z, fma(_564, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _560)) + cbModelParam._m0[15u].w;
        float _1409 = fma(_506, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504));
        float _1412 = fma(_506, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504));
        float _1415 = fma(_506, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504));
        float _1443;
        if (_1409 > 0.0)
        {
            _1443 = abs((1.0 - _1398) / _1409);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1398 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1443 = frontier_phi_19_17_ladder;
        }
        float _1651;
        if (_1412 > 0.0)
        {
            _1651 = abs((1.0 - _1402) / _1412);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1402 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1651 = frontier_phi_28_24_ladder;
        }
        float _1905;
        if (_1415 > 0.0)
        {
            _1905 = abs((1.0 - _1406) / _1415);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1406 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1905 = frontier_phi_40_35_ladder;
        }
        float _1907 = isnan(_1651) ? _1443 : (isnan(_1443) ? _1651 : min(_1443, _1651));
        float _1908 = isnan(_1905) ? _1907 : (isnan(_1907) ? _1905 : min(_1907, _1905));
        float _1912 = (_1908 * _1409) + _1398;
        float _1913 = (_1908 * _1412) + _1402;
        float _1914 = (_1908 * _1415) + _1406;
        float _1915 = _1908 * 9.9999997473787516355514526367188e-05;
        float _1917 = (-1.0) - _1915;
        float _1919 = _1915 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1914 > _1919) || ((_1914 < _1917) || ((_1913 > _1919) || ((_1913 < _1917) || ((_1912 < _1917) || (_1912 > _1919))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2042 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1914, cbModelParam._m0[9u].z, fma(_1913, cbModelParam._m0[9u].y, _1912 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1914, cbModelParam._m0[10u].z, fma(_1913, cbModelParam._m0[10u].y, _1912 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1914, cbModelParam._m0[11u].z, fma(_1913, cbModelParam._m0[11u].y, _1912 * cbModelParam._m0[11u].x))), _1349);
            frontier_phi_18_40_ladder = _2042.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2042.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2042.x * cbModelParam._m0[1u].y;
        }
        _1431 = frontier_phi_18_40_ladder_2;
        _1433 = frontier_phi_18_40_ladder_1;
        _1435 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1419 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_504, _505, _506), _1349);
        _1431 = _1419.x * cbModelParam._m0[1u].y;
        _1433 = _1419.y * cbModelParam._m0[1u].y;
        _1435 = _1419.z * cbModelParam._m0[1u].y;
    }
    float _1439 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _316);
    float _1440 = isnan(_1439) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1439 : min(cbModelParam._m0[25u].w, _1439));
    float _1533;
    float _1535;
    float _1537;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1497 = fma(_568, cbModelParam._m0[21u].z, fma(_564, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _560)) + cbModelParam._m0[21u].w;
        float _1501 = fma(_568, cbModelParam._m0[22u].z, fma(_564, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _560)) + cbModelParam._m0[22u].w;
        float _1505 = fma(_568, cbModelParam._m0[23u].z, fma(_564, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _560)) + cbModelParam._m0[23u].w;
        float _1508 = fma(_506, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504));
        float _1511 = fma(_506, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504));
        float _1514 = fma(_506, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504));
        float _1656;
        if (_1508 > 0.0)
        {
            _1656 = abs((1.0 - _1497) / _1508);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1497 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1656 = frontier_phi_30_26_ladder;
        }
        float _1932;
        if (_1511 > 0.0)
        {
            _1932 = abs((1.0 - _1501) / _1511);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1501 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1932 = frontier_phi_42_37_ladder;
        }
        float _2145;
        if (_1514 > 0.0)
        {
            _2145 = abs((1.0 - _1505) / _1514);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1505 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2145 = frontier_phi_51_48_ladder;
        }
        float _2147 = isnan(_1932) ? _1656 : (isnan(_1656) ? _1932 : min(_1656, _1932));
        float _2148 = isnan(_2145) ? _2147 : (isnan(_2147) ? _2145 : min(_2147, _2145));
        float _2152 = (_2148 * _1508) + _1497;
        float _2153 = (_2148 * _1511) + _1501;
        float _2154 = (_2148 * _1514) + _1505;
        float _2155 = _2148 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2155;
        float _2158 = _2155 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2154 > _2158) || ((_2154 < _2156) || ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 < _2156) || (_2152 > _2158))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2154, cbModelParam._m0[17u].z, fma(_2153, cbModelParam._m0[17u].y, _2152 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2154, cbModelParam._m0[18u].z, fma(_2153, cbModelParam._m0[18u].y, _2152 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2154, cbModelParam._m0[19u].z, fma(_2153, cbModelParam._m0[19u].y, _2152 * cbModelParam._m0[19u].x))), _1440);
            frontier_phi_27_51_ladder = _2352.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2352.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2352.x * cbModelParam._m0[1u].z;
        }
        _1533 = frontier_phi_27_51_ladder_2;
        _1535 = frontier_phi_27_51_ladder_1;
        _1537 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_504, _505, _506), _1440);
        _1533 = _1517.x * cbModelParam._m0[1u].z;
        _1535 = _1517.y * cbModelParam._m0[1u].z;
        _1537 = _1517.z * cbModelParam._m0[1u].z;
    }
    float _1550 = (((_531 * _481) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1533 - _1431)) + _1431);
    float _1552 = (((_531 * _483) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1535 - _1433)) + _1433);
    float _1554 = (((_531 * _484) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1557 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1550 * cbSceneParam._m0[89u].x));
    float _1560 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1550 * cbSceneParam._m0[90u].x));
    float _1563 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, _1550 * cbSceneParam._m0[91u].x));
    uvec4 _1573 = floatBitsToUint(cbInstanceData._m0[_455 + 5u]);
    uint _1575 = _1573.x * 14u;
    uint _1576 = _1575 + 13u;
    float _1583 = _496 + (-1.0);
    float _1588 = (cbLight._m0[_1576].x * _1583) + 1.0;
    float _1589 = (cbLight._m0[_1576].y * _1583) + 1.0;
    float _1590 = (cbLight._m0[_1576].z * _1583) + 1.0;
    float _1591 = (cbLight._m0[_1576].w * _1583) + 1.0;
    uint _1592 = _1575 + 5u;
    float _1598 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
    uint _1602 = _1575 + 4u;
    float _1609 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
    uint _1613 = _1575 | 1u;
    float _1624 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_313, _314, _315));
    float _1627 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_313, _314, _315));
    float _3803 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _3814 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1632 = (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * 0.3183098733425140380859375;
    float _1634 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * 0.3183098733425140380859375;
    float _1641 = ((cbLight._m0[_1592].x * _1598) * _1634) + ((cbLight._m0[_1602].x * _1609) * _1632);
    float _1642 = ((_1598 * cbLight._m0[_1592].y) * _1634) + ((_1609 * cbLight._m0[_1602].y) * _1632);
    float _1643 = ((_1598 * cbLight._m0[_1592].z) * _1634) + ((_1609 * cbLight._m0[_1602].z) * _1632);
    uvec4 _1648 = floatBitsToUint(cbLight._m0[_1575 + 12u]);
    bool _1650 = _1648.x == 0u;
    float _1661;
    float _1663;
    float _1665;
    if (_1650)
    {
        _1661 = _1641;
        _1663 = _1642;
        _1665 = _1643;
    }
    else
    {
        uint _1669 = _1575 + 6u;
        float _1685 = (dot(vec3(cbLight._m0[_1575 + 2u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _1686 = _1685 * _1685;
        float _3825 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1688 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _1661 = (((cbLight._m0[_1669].x * 0.3183098733425140380859375) * _1687) * _1688) + _1641;
        _1663 = (((cbLight._m0[_1669].y * 0.3183098733425140380859375) * _1687) * _1688) + _1642;
        _1665 = (((cbLight._m0[_1669].z * 0.3183098733425140380859375) * _1687) * _1688) + _1643;
    }
    bool _1668 = _1648.y == 0u;
    float _1706;
    float _1708;
    float _1710;
    if (_1668)
    {
        _1706 = _1661;
        _1708 = _1663;
        _1710 = _1665;
    }
    else
    {
        uint _1876 = _1575 + 7u;
        float _1892 = (dot(vec3(cbLight._m0[_1575 + 3u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _1893 = _1892 * _1892;
        float _3841 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1895 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _1706 = (((cbLight._m0[_1876].x * 0.3183098733425140380859375) * _1894) * _1895) + _1661;
        _1708 = (((cbLight._m0[_1876].y * 0.3183098733425140380859375) * _1894) * _1895) + _1663;
        _1710 = (((cbLight._m0[_1876].z * 0.3183098733425140380859375) * _1894) * _1895) + _1665;
    }
    uint _1713 = _1575 + 8u;
    float _1726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1575].w)) * _316) * 0.949999988079071044921875);
    float _1727 = _1726 * _1726;
    float _1728 = cbLight._m0[_1575].x + _394;
    float _1729 = cbLight._m0[_1575].y + _395;
    float _1730 = cbLight._m0[_1575].z + _396;
    float _1734 = inversesqrt(dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730)));
    float _1735 = _1734 * _1728;
    float _1736 = _1734 * _1729;
    float _1737 = _1734 * _1730;
    float _1738 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1575].xyz));
    float _3857 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1741 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _1742 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _1743 = dot(vec3(_313, _314, _315), vec3(_1735, _1736, _1737));
    float _3879 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _1747 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_1735, _1736, _1737));
    float _3890 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1751 = _1727 * _1727;
    float _1755 = ((_1746 * _1746) * (_1751 + (-1.0))) + 1.0;
    float _1763 = exp2(log2(1.0 - (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * 5.0);
    float _1764 = 0.959999978542327880859375 - _478;
    float _1766 = 0.959999978542327880859375 - _479;
    float _1767 = 0.959999978542327880859375 - _480;
    float _1774 = 1.0 - _1727;
    float _1785 = (0.5 / (((_1742 * ((_1741 * _1774) + _1727)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _1774) + _1727) * _1741))) * _1741;
    float _3901 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1787 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1751 / ((_1755 * _1755) * 3.141590118408203125));
    uint _1798 = _1575 + 9u;
    float _1809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1613].w)) * _316) * 0.949999988079071044921875);
    float _1810 = _1809 * _1809;
    float _1811 = cbLight._m0[_1613].x + _394;
    float _1812 = cbLight._m0[_1613].y + _395;
    float _1813 = cbLight._m0[_1613].z + _396;
    float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
    float _1818 = _1817 * _1811;
    float _1819 = _1817 * _1812;
    float _1820 = _1817 * _1813;
    float _1821 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1613].xyz));
    float _3912 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _1825 = dot(vec3(_313, _314, _315), vec3(_1818, _1819, _1820));
    float _3923 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _1829 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_1818, _1819, _1820));
    float _3934 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1833 = _1810 * _1810;
    float _1837 = ((_1828 * _1828) * (_1833 + (-1.0))) + 1.0;
    float _1844 = exp2(log2(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * 5.0);
    float _1851 = 1.0 - _1810;
    float _1861 = (0.5 / (((_1742 * ((_1824 * _1851) + _1810)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _1851) + _1810) * _1824))) * _1824;
    float _3945 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1863 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1833 / ((_1837 * _1837) * 3.141590118408203125));
    float _1873 = (((((_1844 * _1764) + _481) * cbLight._m0[_1798].x) * _1863) * _1598) + (((((_1763 * _1764) + _481) * cbLight._m0[_1713].x) * _1787) * _1609);
    float _1874 = (((((_1844 * _1766) + _483) * cbLight._m0[_1798].y) * _1863) * _1598) + (((((_1763 * _1766) + _483) * cbLight._m0[_1713].y) * _1787) * _1609);
    float _1875 = (((((_1844 * _1767) + _484) * cbLight._m0[_1798].z) * _1863) * _1598) + (((((_1763 * _1767) + _484) * cbLight._m0[_1713].z) * _1787) * _1609);
    float _1937;
    float _1939;
    float _1941;
    if (_1650)
    {
        _1937 = _1873;
        _1939 = _1874;
        _1941 = _1875;
    }
    else
    {
        uint _1943 = _1575 + 2u;
        uint _1947 = _1575 + 10u;
        float _1961 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _316) * 0.949999988079071044921875);
        float _1962 = _1961 * _1961;
        float _1963 = cbLight._m0[_1943].x + _394;
        float _1964 = cbLight._m0[_1943].y + _395;
        float _1965 = cbLight._m0[_1943].z + _396;
        float _1969 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
        float _1970 = _1969 * _1963;
        float _1971 = _1969 * _1964;
        float _1972 = _1969 * _1965;
        float _1973 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1943].xyz));
        float _3956 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1976 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1977 = dot(vec3(_313, _314, _315), vec3(_1970, _1971, _1972));
        float _3967 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1980 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1981 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_1970, _1971, _1972));
        float _3978 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1985 = _1962 * _1962;
        float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
        float _1996 = exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0);
        float _2003 = 1.0 - _1962;
        float _2013 = (0.5 / (((_1742 * ((_1976 * _2003) + _1962)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _2003) + _1962) * _1976))) * _1976;
        float _3989 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2015 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
        float _2016 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _1937 = (((((_1996 * _1764) + _481) * cbLight._m0[_1947].x) * _2015) * _2016) + _1873;
        _1939 = (((((_1996 * _1766) + _483) * cbLight._m0[_1947].y) * _2015) * _2016) + _1874;
        _1941 = (((((_1996 * _1767) + _484) * cbLight._m0[_1947].z) * _2015) * _2016) + _1875;
    }
    float _2051;
    float _2053;
    float _2055;
    if (_1668)
    {
        _2051 = _1937;
        _2053 = _1939;
        _2055 = _1941;
    }
    else
    {
        uint _2062 = _1575 + 3u;
        uint _2066 = _1575 + 11u;
        float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _316) * 0.949999988079071044921875);
        float _2081 = _2080 * _2080;
        float _2082 = cbLight._m0[_2062].x + _394;
        float _2083 = cbLight._m0[_2062].y + _395;
        float _2084 = cbLight._m0[_2062].z + _396;
        float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
        float _2089 = _2088 * _2082;
        float _2090 = _2088 * _2083;
        float _2091 = _2088 * _2084;
        float _2092 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_2062].xyz));
        float _4005 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _2096 = dot(vec3(_313, _314, _315), vec3(_2089, _2090, _2091));
        float _4016 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2100 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2089, _2090, _2091));
        float _4027 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2104 = _2081 * _2081;
        float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
        float _2115 = exp2(log2(1.0 - (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * 5.0);
        float _2122 = 1.0 - _2081;
        float _2132 = (0.5 / (((_1742 * ((_2095 * _2122) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_1742 * _2122) + _2081) * _2095))) * _2095;
        float _4038 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
        float _2135 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _2051 = (((((_2115 * _1764) + _481) * cbLight._m0[_2066].x) * _2134) * _2135) + _1937;
        _2053 = (((((_2115 * _1766) + _483) * cbLight._m0[_2066].y) * _2134) * _2135) + _1939;
        _2055 = (((((_2115 * _1767) + _484) * cbLight._m0[_2066].z) * _2134) * _2135) + _1941;
    }
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    if (_1573.y == 0u)
    {
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2210;
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2210;
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2210;
        uvec4 _2225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2226 = _2225.x;
        uint _2237 = uint((float(_2225.y) * floor(float(uint(cbSceneParam._m0[85u].y * _416) / _2226))) + floor(float(uint(cbSceneParam._m0[85u].x * _415) / _2226)));
        float _2247 = (log2(_2213 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2248 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        uint _2251 = uint(isnan(14.0) ? _2248 : (isnan(_2248) ? 14.0 : min(_2248, 14.0)));
        uvec4 _2256 = texelFetch(g_lightClusterGridBuffer, int(((_2251 << 2u) + (_2237 << 6u)) >> 2u));
        uint _2257 = _2256.x;
        uint _2258 = _2225.z;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        if (((((1u << ((_2258 >> 4u) & 15u)) + 4294967295u) & _2257) == 0u) || ((_2258 & 240u) == 0u))
        {
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
        }
        else
        {
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            uint _2515 = 0u;
            uint _2524;
            bool _2525;
            for (;;)
            {
                _2524 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2515 << 2u)) >> 2u)).x;
                _2525 = _2524 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2525)
                {
                    frontier_phi_68_pred = _2511;
                    frontier_phi_68_pred_1 = _2514;
                    frontier_phi_68_pred_2 = _2513;
                    frontier_phi_68_pred_3 = _2512;
                    frontier_phi_68_pred_4 = _2510;
                    frontier_phi_68_pred_5 = _2509;
                }
                else
                {
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    uint _2660;
                    _2654 = _2509;
                    _2655 = _2510;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2514;
                    _2660 = _2524;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    for (;;)
                    {
                        uint _2664 = uint(findLSB(_2660)) + (_2515 << 5u);
                        uint _2661 = (_2660 + 4294967295u) & _2660;
                        uint _2666 = _2664 * 48u;
                        vec4 _2680 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 3u)).x));
                        uint _2686 = (_2664 * 48u) + 4u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2686)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 3u)).x));
                        uint _2705 = (_2664 * 48u) + 8u;
                        vec3 _2716 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x));
                        float _2720 = _2680.x - _2211;
                        float _2721 = _2680.y - _2212;
                        float _2722 = _2680.z - _2213;
                        float _2723 = dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722));
                        float _2726 = inversesqrt(_2723);
                        float _2727 = _2726 * _2720;
                        float _2728 = _2726 * _2721;
                        float _2729 = _2726 * _2722;
                        float _2730 = dot(vec3(_436, _439, _442), vec3(_2727, _2728, _2729));
                        float _2735 = 1.0 - (_2723 * _2680.w);
                        float _4064 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2736 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                        float _2737 = sqrt(_2723) * _2699.w;
                        float _2740 = 1.39999997615814208984375 / (_2737 + 1.39999997615814208984375);
                        float _2741 = _2740 * _2740;
                        float _2744 = ((1.0 - _2741) * _2730) + _2741;
                        float _2747 = _2737 * _2737;
                        float _2751 = ((isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))) * _2736) / ((_2747 * 0.699999988079071044921875) + 1.0);
                        float _2755 = (-0.0) - _2211;
                        float _2756 = (-0.0) - _2212;
                        float _2757 = (-0.0) - _2213;
                        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
                        float _2762 = _2761 * _2755;
                        float _2763 = _2761 * _2756;
                        float _2764 = _2761 * _2757;
                        float _2772 = exp2(log2(1.0 / ((_2747 * 3.5) + 5.0)) * 0.25);
                        float _2773 = 1.0 - _512;
                        float _2780 = sqrt(1.0 - ((1.0 - (_2773 * _2773)) * (1.0 - (_2772 * _2772))));
                        float _2781 = _2780 * _2780;
                        float _2782 = _2781 * _2781;
                        float _2783 = _2762 + _2727;
                        float _2784 = _2763 + _2728;
                        float _2785 = _2764 + _2729;
                        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
                        float _2793 = dot(vec3(_436, _439, _442), vec3(_2762, _2763, _2764));
                        float _4080 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2796 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                        float _2797 = dot(vec3(_436, _439, _442), vec3(_2789 * _2783, _2789 * _2784, _2789 * _2785));
                        float _4091 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2800 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2804 = ((_2800 * _2800) * (_2782 + (-1.0))) + 1.0;
                        float _2805 = _2740 * _2781;
                        float _2806 = _2805 * _2805;
                        float _2809 = ((1.0 - _2806) * _2730) + _2806;
                        float _4102 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2810 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                        float _2811 = 1.0 - _2781;
                        float _2821 = (0.5 / (((_2810 * ((_2796 * _2811) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2810 * _2811) + _2781) * _2796))) * _2810;
                        float _4113 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2832 = (((_2782 * 3.1415927410125732421875) * (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) / ((_2804 * _2804) * ((_2747 * 2.1991131305694580078125) + 3.141590118408203125))) * _2736;
                        _2584 = (_2751 * _2699.x) + _2657;
                        _2585 = (_2751 * _2699.y) + _2658;
                        _2586 = (_2751 * _2699.z) + _2659;
                        _2581 = (_2832 * _2716.x) + _2654;
                        _2582 = (_2832 * _2716.y) + _2655;
                        _2583 = (_2832 * _2716.z) + _2656;
                        if (_2661 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2654 = _2581;
                            _2655 = _2582;
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2586;
                            _2660 = _2661;
                        }
                    }
                    frontier_phi_68_pred = _2583;
                    frontier_phi_68_pred_1 = _2586;
                    frontier_phi_68_pred_2 = _2585;
                    frontier_phi_68_pred_3 = _2584;
                    frontier_phi_68_pred_4 = _2582;
                    frontier_phi_68_pred_5 = _2581;
                }
                _2362 = frontier_phi_68_pred;
                _2368 = frontier_phi_68_pred_1;
                _2366 = frontier_phi_68_pred_2;
                _2364 = frontier_phi_68_pred_3;
                _2360 = frontier_phi_68_pred_4;
                _2358 = frontier_phi_68_pred_5;
                uint _2516 = _2515 + 1u;
                if (_2516 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2509 = _2358;
                    _2510 = _2360;
                    _2511 = _2362;
                    _2512 = _2364;
                    _2513 = _2366;
                    _2514 = _2368;
                    _2515 = _2516;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
        }
        uvec4 _2371 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2372 = _2371.z;
        uint _2374 = (_2372 >> 8u) & 15u;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        if (((4294967295u << _2374) & _2257) == 0u)
        {
            _2477 = _2357;
            _2479 = _2359;
            _2481 = _2361;
            _2483 = _2363;
            _2485 = _2365;
            _2487 = _2367;
        }
        else
        {
            float _2502 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
            float _2503 = _2502 * _2211;
            float _2504 = _2502 * _2212;
            float _2505 = _2502 * _2213;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2374 < ((_2372 >> 12u) & 15u))
            {
                float _2478;
                float _2480;
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2637 = _2357;
                float _2638 = _2359;
                float _2639 = _2361;
                float _2640 = _2363;
                float _2641 = _2365;
                float _2642 = _2367;
                uint _2643 = _2374;
                uint _2652;
                bool _2653;
                for (;;)
                {
                    _2652 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2643 << 2u)) >> 2u)).x;
                    _2653 = _2652 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2653)
                    {
                        frontier_phi_79_pred = _2642;
                        frontier_phi_79_pred_1 = _2641;
                        frontier_phi_79_pred_2 = _2640;
                        frontier_phi_79_pred_3 = _2639;
                        frontier_phi_79_pred_4 = _2638;
                        frontier_phi_79_pred_5 = _2637;
                    }
                    else
                    {
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _2859 = _2637;
                        float _2860 = _2638;
                        float _2861 = _2639;
                        float _2862 = _2640;
                        float _2863 = _2641;
                        float _2864 = _2642;
                        uint _2865 = _2652;
                        uint _2866;
                        vec4 _2891;
                        float _2892;
                        vec4 _2907;
                        vec3 _2919;
                        vec4 _2935;
                        vec4 _2951;
                        float _2998;
                        bool _2999;
                        for (;;)
                        {
                            uint _2876 = ((_2643 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2865));
                            _2866 = (_2865 + 4294967295u) & _2865;
                            uint _2878 = _2876 * 40u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            _2892 = _2891.w;
                            uint _2894 = (_2876 * 40u) + 4u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2909 = (_2876 * 40u) + 8u;
                            _2919 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x));
                            uint _2922 = (_2876 * 40u) + 16u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            uint _2938 = (_2876 * 40u) + 20u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2954 = (_2876 * 40u) + 24u;
                            vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2973 = (_2876 * 40u) + 28u;
                            vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            _2998 = fma(_2213, _2986.z, fma(_2212, _2986.y, _2986.x * _2211)) + _2986.w;
                            _2999 = !((fma(_2213, _2967.z, fma(_2212, _2967.y, _2967.x * _2211)) + _2967.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2999)
                            {
                                float _3026 = _2891.x - _2211;
                                float _3027 = _2891.y - _2212;
                                float _3028 = _2891.z - _2213;
                                float _3029 = dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028));
                                float _3032 = inversesqrt(_3029);
                                float _3033 = _3032 * _3026;
                                float _3034 = _3032 * _3027;
                                float _3035 = _3032 * _3028;
                                float _3039 = 1.0 - (_3029 / (_2892 * _2892));
                                float _4124 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3040 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                                float _3044 = sqrt(_3029) * _2907.w;
                                float _3046 = 1.39999997615814208984375 / (_3044 + 1.39999997615814208984375);
                                float _3047 = _3046 * _3046;
                                float _3050 = ((1.0 - _3047) * dot(vec3(_3033, _3034, _3035), vec3(_436, _439, _442))) + _3047;
                                float _3053 = _3044 * _3044;
                                float _3057 = (fma(_2213, _2935.z, fma(_2212, _2935.y, _2935.x * _2211)) + _2935.w) / _2998;
                                float _3058 = (fma(_2213, _2951.z, fma(_2212, _2951.y, _2951.x * _2211)) + _2951.w) / _2998;
                                float _3062 = 1.0 - dot(vec2(_3057, _3058), vec2(_3057, _3058));
                                float _4140 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3063 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3064 = _3063 * (((isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0))) * _3040) / ((_3053 * 0.699999988079071044921875) + 1.0));
                                float _3076 = exp2(log2(1.0 / ((_3053 * 3.5) + 5.0)) * 0.25);
                                float _3077 = 1.0 - _512;
                                float _3084 = sqrt(1.0 - ((1.0 - (_3077 * _3077)) * (1.0 - (_3076 * _3076))));
                                float _3085 = _3084 * _3084;
                                float _3086 = _3085 * _3085;
                                float _3087 = _3033 - _2503;
                                float _3088 = _3034 - _2504;
                                float _3089 = _3035 - _2505;
                                float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                                float _3097 = dot(vec3(_436, _439, _442), vec3((-0.0) - _2503, (-0.0) - _2504, (-0.0) - _2505));
                                float _4151 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3100 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3101 = dot(vec3(_436, _439, _442), vec3(_3093 * _3087, _3093 * _3088, _3093 * _3089));
                                float _4162 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3104 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                                float _3108 = ((_3104 * _3104) * (_3086 + (-1.0))) + 1.0;
                                float _3109 = _3046 * _3085;
                                float _3110 = _3109 * _3109;
                                float _3116 = ((1.0 - _3110) * dot(vec3(_436, _439, _442), vec3(_3033, _3034, _3035))) + _3110;
                                float _4173 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3118 = 1.0 - _3085;
                                float _3128 = (0.5 / (((_3117 * ((_3100 * _3118) + _3085)) + 9.9999999392252902907785028219223e-09) + (((_3117 * _3118) + _3085) * _3100))) * _3117;
                                float _4184 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3138 = (_3063 * _3040) * (((_3086 * 3.1415927410125732421875) * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) / ((_3108 * _3108) * ((_3053 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3064 * _2907.z;
                                frontier_phi_85_pred_1 = _3064 * _2907.y;
                                frontier_phi_85_pred_2 = _3064 * _2907.x;
                                frontier_phi_85_pred_3 = _3138 * _2919.z;
                                frontier_phi_85_pred_4 = _3138 * _2919.y;
                                frontier_phi_85_pred_5 = _3138 * _2919.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3147 = frontier_phi_85_pred;
                            _3146 = frontier_phi_85_pred_1;
                            _3145 = frontier_phi_85_pred_2;
                            _3144 = frontier_phi_85_pred_3;
                            _3143 = frontier_phi_85_pred_4;
                            _3142 = frontier_phi_85_pred_5;
                            _2849 = _3145 + _2862;
                            _2850 = _3146 + _2863;
                            _2851 = _3147 + _2864;
                            _2846 = _3142 + _2859;
                            _2847 = _3143 + _2860;
                            _2848 = _3144 + _2861;
                            if (_2866 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2866;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2851;
                        frontier_phi_79_pred_1 = _2850;
                        frontier_phi_79_pred_2 = _2849;
                        frontier_phi_79_pred_3 = _2848;
                        frontier_phi_79_pred_4 = _2847;
                        frontier_phi_79_pred_5 = _2846;
                    }
                    _2488 = frontier_phi_79_pred;
                    _2486 = frontier_phi_79_pred_1;
                    _2484 = frontier_phi_79_pred_2;
                    _2482 = frontier_phi_79_pred_3;
                    _2480 = frontier_phi_79_pred_4;
                    _2478 = frontier_phi_79_pred_5;
                    uint _2644 = _2643 + 1u;
                    if (_2644 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2637 = _2478;
                        _2638 = _2480;
                        _2639 = _2482;
                        _2640 = _2484;
                        _2641 = _2486;
                        _2642 = _2488;
                        _2643 = _2644;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2484;
                frontier_phi_60_61_ladder_1 = _2488;
                frontier_phi_60_61_ladder_2 = _2486;
                frontier_phi_60_61_ladder_3 = _2482;
                frontier_phi_60_61_ladder_4 = _2480;
                frontier_phi_60_61_ladder_5 = _2478;
            }
            else
            {
                frontier_phi_60_61_ladder = _2363;
                frontier_phi_60_61_ladder_1 = _2367;
                frontier_phi_60_61_ladder_2 = _2365;
                frontier_phi_60_61_ladder_3 = _2361;
                frontier_phi_60_61_ladder_4 = _2359;
                frontier_phi_60_61_ladder_5 = _2357;
            }
            _2477 = frontier_phi_60_61_ladder_5;
            _2479 = frontier_phi_60_61_ladder_4;
            _2481 = frontier_phi_60_61_ladder_3;
            _2483 = frontier_phi_60_61_ladder;
            _2485 = frontier_phi_60_61_ladder_2;
            _2487 = frontier_phi_60_61_ladder_1;
        }
        float _2492 = isnan(1.0) ? _496 : (isnan(_496) ? 1.0 : min(_496, 1.0));
        _2269 = (_2492 * _2483) + _1706;
        _2271 = (_2492 * _2485) + _1708;
        _2273 = (_2492 * _2487) + _1710;
        _2275 = ((_2477 * _481) * _2492) + _2051;
        _2277 = ((_2479 * _483) * _2492) + _2053;
        _2279 = ((_2481 * _484) * _2492) + _2055;
    }
    else
    {
        _2269 = _1706;
        _2271 = _1708;
        _2273 = _1710;
        _2275 = _2051;
        _2277 = _2053;
        _2279 = _2055;
    }
    float _4200 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _4211 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4222 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _2296 = ((isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2269 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _496))) + ((_2275 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1338)) * cbPerFrame._m0[3u].x);
    float _2297 = ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2271 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _496))) + ((_2277 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1338)) * cbPerFrame._m0[3u].x);
    float _2298 = ((isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2273 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _496))) + ((_2279 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1338)) * cbPerFrame._m0[3u].x);
    uint _2299 = _455 + 6u;
    float _2307 = _415 / cbSceneParam._m0[86u].x;
    float _2308 = _416 / cbSceneParam._m0[86u].y;
    vec4 _2322 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, (log2((isnan(cbSceneParam._m0[77u].w) ? _336 : (isnan(_336) ? cbSceneParam._m0[77u].w : min(_336, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2324 = _2322.x;
    float _2325 = _2322.y;
    float _2326 = _2322.z;
    float _2327 = _2322.w;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    if (_336 > cbSceneParam._m0[78u].w)
    {
        float _2382 = isnan(_336) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _336 : min(cbSceneParam._m0[80u].w, _336));
        float _2383 = _2382 / _336;
        float _2394 = _2383 * _387;
        float _2395 = _388 * _2383;
        float _2396 = (-0.0) - _2395;
        float _2397 = _2383 * _389;
        float _2399 = (cbSceneParam._m0[77u].w * _2396) / _2382;
        float _2400 = _2399 + cbSceneParam._m0[79u].w;
        float _2401 = cbSceneParam._m0[79u].w - _2395;
        float _2407 = sqrt(((_2394 * _2394) + (_2395 * _2395)) + (_2397 * _2397));
        float _2410 = (1.0 - (cbSceneParam._m0[77u].w / _2382)) * _2407;
        float _2415 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2417 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2594;
        if (abs((_2396 - _2399) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2594 = ((((_2400 > 0.0) ? exp2(_2415 * _2400) : (2.0 - exp2(_2417 * _2400))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2410;
        }
        else
        {
            float _2538 = 1.0 / cbSceneParam._m0[80u].x;
            float _2539 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : max(_2400, _2401));
            float _2540 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : min(_2400, _2401));
            float _2549 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : min(_2539, 0.0));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            _2594 = ((abs(_2407 / _2396) * cbSceneParam._m0[80u].y) * ((((_2549 - _2550) * 2.0) - ((exp2(_2415 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0)))) - exp2(_2415 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0))))) * _2538)) - ((exp2(_2417 * _2549) - exp2(_2417 * _2550)) * _2538))) + (_2410 * cbSceneParam._m0[80u].z);
        }
        vec4 _2596 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, 1.0), 0.0);
        float _2605 = exp2((_2594 * (-1.44269502162933349609375)) * (1.0 - _2596.w));
        float _2606 = log2(_2605);
        float _2622 = log2(_2327);
        _2419 = (exp2(_2622 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].x)) * _2596.x) / cbSceneParam._m0[78u].x)) + _2324;
        _2421 = (exp2(_2622 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].y)) * _2596.y) / cbSceneParam._m0[78u].y)) + _2325;
        _2423 = (exp2(_2622 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].z)) * _2596.z) / cbSceneParam._m0[78u].z)) + _2326;
        _2425 = _2605 * _2327;
    }
    else
    {
        _2419 = _2324;
        _2421 = _2325;
        _2423 = _2326;
        _2425 = _2327;
    }
    bool _2632;
    vec4 _2435;
    vec4 _2457;
    float _2459;
    float _2463;
    float _2464;
    float _2465;
    float _2466;
    bool _2476;
    for (;;)
    {
        _2435 = cbMatDynParam._m0[0u];
        float _2437 = roundEven(_2435.y);
        bool _2438 = _2437 == 3.0;
        float _2439 = log2(_2425);
        float _2446 = exp2(_2439 * cbSceneParam._m0[78u].x) * _2296;
        float _2447 = exp2(_2439 * cbSceneParam._m0[78u].y) * _2297;
        float _2448 = exp2(_2439 * cbSceneParam._m0[78u].z) * _2298;
        float _2455 = _403 + (-0.5);
        _2457 = cbMtdParam._m0[1u];
        _2459 = _2457.y * _2455;
        float _2462 = (_2437 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2463 = _2462 * (_2438 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2419)));
        _2464 = _2462 * (_2438 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2421)));
        _2465 = _2462 * (_2438 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2423)));
        _2466 = _2455 * 0.999000012874603271484375;
        _2476 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2476)
        {
            if ((cbInstanceData._m0[_455 + 7u].x + _2466) < 0.5)
            {
                _2632 = true;
                break;
            }
        }
        uint _2573 = _457 + uint(_2435.w);
        if ((cbInstanceData._m0[_2573].w < 1.0) && ((cbInstanceData._m0[_2573].w + _2466) < 0.5))
        {
            _2632 = true;
            break;
        }
        if ((_2459 + _241) < _2457.x)
        {
            _2632 = true;
            break;
        }
        _2632 = false;
        break;
    }
    float _2837;
    if (_2632)
    {
        discard_state = true;
        _2837 = 0.0;
    }
    else
    {
        _2837 = cbInstanceData._m0[_2299].w;
    }
    SV_Target.x = _2463;
    SV_Target.y = _2464;
    SV_Target.z = _2465;
    SV_Target.w = _2837;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2299].w;
    discard_exit();
}


