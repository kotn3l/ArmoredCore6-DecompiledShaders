#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _856;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _257 = texture(sampler2D(M_AMSN_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _260 = _257.x + cbMtdParam._m0[10u].x;
    vec4 _272 = texture(sampler2D(M_AMSN_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _272.z;
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3217 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0))));
    float _292 = fma(_289, _211, fma(_282, _203 * TANGENT.x, (_189 * _182) * _280));
    float _295 = fma(_289, _212, fma(_282, _203 * TANGENT.y, (_189 * _183) * _280));
    float _298 = fma(_289, _213, fma(_282, _203 * TANGENT.z, (_189 * _184) * _280));
    float _302 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _303 = _302 * _292;
    float _304 = _302 * _295;
    float _305 = _302 * _298;
    float _309 = inversesqrt(dot(vec3(_303, _304, _305), vec3(_303, _304, _305)));
    float _310 = _309 * _303;
    float _311 = _309 * _304;
    float _312 = _309 * _305;
    float _3228 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _313 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    float _3239 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3250 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3261 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3272 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _317 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
    float _333 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _374 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _384 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _374);
    float _385 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _374);
    float _386 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _374);
    float _390 = inversesqrt(dot(vec3(_384, _385, _386), vec3(_384, _385, _386)));
    float _391 = _384 * _390;
    float _392 = _385 * _390;
    float _393 = _386 * _390;
    float _399 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _400 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _421 = fma(_312, cbSceneParam._m0[5u].z, fma(_311, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _310));
    float _424 = fma(_312, cbSceneParam._m0[6u].z, fma(_311, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _310));
    float _427 = fma(_312, cbSceneParam._m0[7u].z, fma(_311, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _310));
    uint _440 = uint(roundEven(NORMAL.w)) * 13u;
    uint _443 = (_440 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _449 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0)))) * cbInstanceData._m0[_443].x;
    float _450 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * cbInstanceData._m0[_443].y;
    float _451 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0)))) * cbInstanceData._m0[_443].z;
    float _3283 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _3294 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    float _3305 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _455 = 1.0 - _317;
    float _456 = _452 * _455;
    float _457 = _453 * _455;
    float _458 = _454 * _455;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _317;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _317;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _317;
    float _466 = _463 + 0.039999999105930328369140625;
    float _468 = _464 + 0.039999999105930328369140625;
    float _469 = _465 + 0.039999999105930328369140625;
    vec4 _478 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _399, cbSceneParam._m0[86u].y * _400));
    float _481 = _478.x * TEXCOORD.z;
    float _482 = dot(vec3(_310, _311, _312), vec3(_391, _392, _393));
    float _485 = _482 * 2.0;
    float _489 = (_485 * _310) - _391;
    float _490 = (_485 * _311) - _392;
    float _491 = (_485 * _312) - _393;
    float _495 = abs(dot(vec3(_391, _392, _393), vec3(_310, _311, _312)));
    float _3316 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _497 = sqrt(_313);
    float _510 = exp2((_497 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_497 * 3.0));
    float _516 = (1.0 - _510) * ((_497 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _517 = _510 * _497;
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _855;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _580 = fma(_553, cbModelParam._m0[26u].z, fma(_549, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _545));
        float _584 = fma(_553, cbModelParam._m0[27u].z, fma(_549, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _545));
        float _588 = fma(_553, cbModelParam._m0[28u].z, fma(_549, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _545));
        float _613 = _545 + _310;
        float _614 = _549 + _311;
        float _615 = _553 + _312;
        float _625 = fma(_615, cbModelParam._m0[26u].z, fma(_614, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _613)) - _580;
        float _626 = fma(_615, cbModelParam._m0[27u].z, fma(_614, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _613)) - _584;
        float _627 = fma(_615, cbModelParam._m0[28u].z, fma(_614, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _613)) - _588;
        float _631 = inversesqrt(dot(vec3(_625, _626, _627), vec3(_625, _626, _627)));
        float _644 = ((_631 * _625) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_580 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_631 * _626) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_584 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_631 * _627) / cbModelParam._m0[34u].z) + ((((((_588 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        float _683 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_649.x + (-0.5));
        float _685 = _683 * (_649.y + (-0.5));
        float _686 = _683 * (_649.z + (-0.5));
        float _693 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_656.x + (-0.5));
        float _695 = _693 * (_656.y + (-0.5));
        float _696 = _693 * (_656.z + (-0.5));
        float _703 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_663.x + (-0.5));
        float _705 = _703 * (_663.y + (-0.5));
        float _706 = _703 * (_663.z + (-0.5));
        float _713 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_670.x + (-0.5));
        float _715 = _713 * (_670.y + (-0.5));
        float _716 = _713 * (_670.z + (-0.5));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = _684 * 0.5;
        float _721 = _694 * 0.5;
        float _722 = _704 * 0.5;
        float _723 = dot(vec3(_720, _721, _722), vec3(_720, _721, _722));
        float _728 = (_723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_723);
        float _737 = (dot(vec3(_310, _311, _312), vec3(_728 * _720, _728 * _721, _728 * _722)) + 1.0) * 0.5;
        float _3342 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _747 = sqrt(((_721 * _721) + (_720 * _720)) + (_722 * _722)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3353 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _749 = _748 * 2.0;
        float _753 = (1.0 - _748) / (_748 + 1.0);
        float _3364 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _763 = ((((1.0 - _754) * (_749 + 2.0)) * exp2(log2(isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (_749 + 1.0))) + _754) * _717;
        float _764 = _685 * 0.5;
        float _765 = _695 * 0.5;
        float _766 = _705 * 0.5;
        float _767 = dot(vec3(_764, _765, _766), vec3(_764, _765, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _780 = (dot(vec3(_310, _311, _312), vec3(_772 * _764, _772 * _765, _772 * _766)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _789 = sqrt(((_765 * _765) + (_764 * _764)) + (_766 * _766)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _791 = _790 * 2.0;
        float _795 = (1.0 - _790) / (_790 + 1.0);
        float _3397 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _805 = ((((1.0 - _796) * (_791 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_791 + 1.0))) + _796) * _718;
        float _806 = _686 * 0.5;
        float _807 = _696 * 0.5;
        float _808 = _706 * 0.5;
        float _809 = dot(vec3(_806, _807, _808), vec3(_806, _807, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _822 = (dot(vec3(_310, _311, _312), vec3(_814 * _806, _814 * _807, _814 * _808)) + 1.0) * 0.5;
        float _3408 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _831 = sqrt(((_807 * _807) + (_806 * _806)) + (_808 * _808)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3419 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3430 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * (_833 + 1.0))) + _838) * _719;
        _855 = _686;
        _857 = _685;
        _858 = _684;
        _859 = _696;
        _860 = _695;
        _861 = _694;
        _862 = _706;
        _863 = _705;
        _864 = _704;
        _865 = _719;
        _866 = _718;
        _867 = _717;
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0)));
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
    }
    else
    {
        _855 = _856;
        _857 = _856;
        _858 = _856;
        _859 = _856;
        _860 = _856;
        _861 = _856;
        _862 = _856;
        _863 = _856;
        _864 = _856;
        _865 = _856;
        _866 = _856;
        _867 = _856;
        _868 = 0.0;
        _869 = 0.0;
        _870 = 0.0;
    }
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _896 = fma(_553, cbModelParam._m0[30u].z, fma(_549, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _545));
        float _900 = fma(_553, cbModelParam._m0[31u].z, fma(_549, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _545));
        float _904 = fma(_553, cbModelParam._m0[32u].z, fma(_549, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _545));
        float _927 = _545 + _310;
        float _928 = _549 + _311;
        float _929 = _553 + _312;
        float _939 = fma(_929, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _927)) - _896;
        float _940 = fma(_929, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _927)) - _900;
        float _941 = fma(_929, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _927)) - _904;
        float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
        float _958 = ((_945 * _939) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_896 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_945 * _940) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_900 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_945 * _941) / cbModelParam._m0[35u].z) + ((((((_904 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        float _995 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_962.x + (-0.5));
        float _997 = _995 * (_962.y + (-0.5));
        float _998 = _995 * (_962.z + (-0.5));
        float _1005 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_969.x + (-0.5));
        float _1007 = _1005 * (_969.y + (-0.5));
        float _1008 = _1005 * (_969.z + (-0.5));
        float _1015 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_976.x + (-0.5));
        float _1017 = _1015 * (_976.y + (-0.5));
        float _1018 = _1015 * (_976.z + (-0.5));
        float _1025 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_983.x + (-0.5));
        float _1027 = _1025 * (_983.y + (-0.5));
        float _1028 = _1025 * (_983.z + (-0.5));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = _996 * 0.5;
        float _1033 = _1006 * 0.5;
        float _1034 = _1016 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_310, _311, _312), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3493 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_1059 + 1.0))) + _1064) * _1029;
        float _1074 = _997 * 0.5;
        float _1075 = _1007 * 0.5;
        float _1076 = _1017 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_310, _311, _312), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3526 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_1101 + 1.0))) + _1106) * _1030;
        float _1116 = _998 * 0.5;
        float _1117 = _1008 * 0.5;
        float _1118 = _1018 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_310, _311, _312), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3559 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_1143 + 1.0))) + _1148) * _1031;
        _1165 = _998;
        _1166 = _997;
        _1167 = _996;
        _1168 = _1008;
        _1169 = _1007;
        _1170 = _1006;
        _1171 = _1018;
        _1172 = _1017;
        _1173 = _1016;
        _1174 = _1031;
        _1175 = _1030;
        _1176 = _1029;
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
    }
    else
    {
        _1165 = _856;
        _1166 = _856;
        _1167 = _856;
        _1168 = _856;
        _1169 = _856;
        _1170 = _856;
        _1171 = _856;
        _1172 = _856;
        _1173 = _856;
        _1174 = _856;
        _1175 = _856;
        _1176 = _856;
        _1177 = 0.0;
        _1178 = 0.0;
        _1179 = 0.0;
    }
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _868)) + _868;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _870)) + _870;
    float _1212 = fma(_1191, cbSceneParam._m0[89u].z, fma(_1190, cbSceneParam._m0[89u].y, _1189 * cbSceneParam._m0[89u].x));
    float _1215 = fma(_1191, cbSceneParam._m0[90u].z, fma(_1190, cbSceneParam._m0[90u].y, _1189 * cbSceneParam._m0[90u].x));
    float _1218 = fma(_1191, cbSceneParam._m0[91u].z, fma(_1190, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1189));
    float _1233 = _489 * 0.5;
    float _1234 = _490 * 0.5;
    float _1235 = _491 * 0.5;
    float _1236 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1239 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1242 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1276;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1249 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_855, _859, _862, _865));
        float _1253 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_857, _860, _863, _866));
        float _1257 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_858, _861, _864, _867));
        float _1264 = dot(vec4(cbModelParam._m0[39u]), vec4(_1233, _1234, _1235, 1.0));
        _1276 = dot(vec3(isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1264) ? 0.0 : (isnan(0.0) ? _1264 : max(0.0, _1264))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1276 = 1.0;
    }
    float _1287;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1278 = dot(vec4(cbModelParam._m0[40u]), vec4(_1233, _1234, _1235, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1278) ? 0.0 : (isnan(0.0) ? _1278 : max(0.0, _1278))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1291 = (_1287 * cbModelParam._m0[1u].x) + (_1276 * (1.0 - cbModelParam._m0[1u].x));
    float _1301 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _313);
    float _1302 = isnan(_1301) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1301 : min(cbModelParam._m0[25u].z, _1301));
    float _1384;
    float _1386;
    float _1388;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1351 = fma(_553, cbModelParam._m0[13u].z, fma(_549, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _545)) + cbModelParam._m0[13u].w;
        float _1355 = fma(_553, cbModelParam._m0[14u].z, fma(_549, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _545)) + cbModelParam._m0[14u].w;
        float _1359 = fma(_553, cbModelParam._m0[15u].z, fma(_549, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _545)) + cbModelParam._m0[15u].w;
        float _1362 = fma(_491, cbModelParam._m0[13u].z, fma(_490, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _489));
        float _1365 = fma(_491, cbModelParam._m0[14u].z, fma(_490, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _489));
        float _1368 = fma(_491, cbModelParam._m0[15u].z, fma(_490, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _489));
        float _1396;
        if (_1362 > 0.0)
        {
            _1396 = abs((1.0 - _1351) / _1362);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1351 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1396 = frontier_phi_16_14_ladder;
        }
        float _1625;
        if (_1365 > 0.0)
        {
            _1625 = abs((1.0 - _1355) / _1365);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1355 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1625 = frontier_phi_25_21_ladder;
        }
        float _1882;
        if (_1368 > 0.0)
        {
            _1882 = abs((1.0 - _1359) / _1368);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1359 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1882 = frontier_phi_37_32_ladder;
        }
        float _1884 = isnan(_1625) ? _1396 : (isnan(_1396) ? _1625 : min(_1396, _1625));
        float _1885 = isnan(_1882) ? _1884 : (isnan(_1884) ? _1882 : min(_1884, _1882));
        float _1889 = (_1885 * _1362) + _1351;
        float _1890 = (_1885 * _1365) + _1355;
        float _1891 = (_1885 * _1368) + _1359;
        float _1892 = _1885 * 9.9999997473787516355514526367188e-05;
        float _1894 = (-1.0) - _1892;
        float _1896 = _1892 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1891 > _1896) || ((_1891 < _1894) || ((_1890 > _1896) || ((_1890 < _1894) || ((_1889 < _1894) || (_1889 > _1896))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1891, cbModelParam._m0[9u].z, fma(_1890, cbModelParam._m0[9u].y, _1889 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1891, cbModelParam._m0[10u].z, fma(_1890, cbModelParam._m0[10u].y, _1889 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1891, cbModelParam._m0[11u].z, fma(_1890, cbModelParam._m0[11u].y, _1889 * cbModelParam._m0[11u].x))), _1302);
            frontier_phi_15_37_ladder = _2019.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2019.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2019.x * cbModelParam._m0[1u].y;
        }
        _1384 = frontier_phi_15_37_ladder_2;
        _1386 = frontier_phi_15_37_ladder_1;
        _1388 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1372 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_489, _490, _491), _1302);
        _1384 = _1372.x * cbModelParam._m0[1u].y;
        _1386 = _1372.y * cbModelParam._m0[1u].y;
        _1388 = _1372.z * cbModelParam._m0[1u].y;
    }
    float _1392 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _313);
    float _1393 = isnan(_1392) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1392 : min(cbModelParam._m0[25u].w, _1392));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1450 = fma(_553, cbModelParam._m0[21u].z, fma(_549, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _545)) + cbModelParam._m0[21u].w;
        float _1454 = fma(_553, cbModelParam._m0[22u].z, fma(_549, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _545)) + cbModelParam._m0[22u].w;
        float _1458 = fma(_553, cbModelParam._m0[23u].z, fma(_549, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _545)) + cbModelParam._m0[23u].w;
        float _1461 = fma(_491, cbModelParam._m0[21u].z, fma(_490, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _489));
        float _1464 = fma(_491, cbModelParam._m0[22u].z, fma(_490, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _489));
        float _1467 = fma(_491, cbModelParam._m0[23u].z, fma(_490, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _489));
        float _1630;
        if (_1461 > 0.0)
        {
            _1630 = abs((1.0 - _1450) / _1461);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1450 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1630 = frontier_phi_27_23_ladder;
        }
        float _1909;
        if (_1464 > 0.0)
        {
            _1909 = abs((1.0 - _1454) / _1464);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1454 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1909 = frontier_phi_39_34_ladder;
        }
        float _2122;
        if (_1467 > 0.0)
        {
            _2122 = abs((1.0 - _1458) / _1467);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1458 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2122 = frontier_phi_48_45_ladder;
        }
        float _2124 = isnan(_1909) ? _1630 : (isnan(_1630) ? _1909 : min(_1630, _1909));
        float _2125 = isnan(_2122) ? _2124 : (isnan(_2124) ? _2122 : min(_2124, _2122));
        float _2129 = (_2125 * _1461) + _1450;
        float _2130 = (_2125 * _1464) + _1454;
        float _2131 = (_2125 * _1467) + _1458;
        float _2132 = _2125 * 9.9999997473787516355514526367188e-05;
        float _2133 = (-1.0) - _2132;
        float _2135 = _2132 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2131 > _2135) || ((_2131 < _2133) || ((_2130 > _2135) || ((_2130 < _2133) || ((_2129 < _2133) || (_2129 > _2135))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2329 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2131, cbModelParam._m0[17u].z, fma(_2130, cbModelParam._m0[17u].y, _2129 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2131, cbModelParam._m0[18u].z, fma(_2130, cbModelParam._m0[18u].y, _2129 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2131, cbModelParam._m0[19u].z, fma(_2130, cbModelParam._m0[19u].y, _2129 * cbModelParam._m0[19u].x))), _1393);
            frontier_phi_24_48_ladder = _2329.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2329.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2329.x * cbModelParam._m0[1u].z;
        }
        _1486 = frontier_phi_24_48_ladder_2;
        _1488 = frontier_phi_24_48_ladder_1;
        _1490 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1470 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_489, _490, _491), _1393);
        _1486 = _1470.x * cbModelParam._m0[1u].z;
        _1488 = _1470.y * cbModelParam._m0[1u].z;
        _1490 = _1470.z * cbModelParam._m0[1u].z;
    }
    float _1503 = (((_516 * _466) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1505 = (((_516 * _468) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1507 = (((_516 * _469) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1510 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1505, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1513 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1505, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1516 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1505, cbSceneParam._m0[91u].y, _1503 * cbSceneParam._m0[91u].x));
    vec4 _1524 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_399, _400));
    float _1526 = _1524.w;
    float _1538 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1526);
    float _1539 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1526);
    float _1540 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1526);
    uvec4 _1544 = floatBitsToUint(cbInstanceData._m0[_440 + 5u]);
    uint _1546 = _1544.x * 14u;
    uint _1547 = _1546 + 13u;
    float _1554 = _481 + (-1.0);
    float _1559 = (cbLight._m0[_1547].x * _1554) + 1.0;
    float _1560 = (cbLight._m0[_1547].y * _1554) + 1.0;
    float _1561 = (cbLight._m0[_1547].z * _1554) + 1.0;
    float _1562 = (cbLight._m0[_1547].w * _1554) + 1.0;
    uint _1563 = _1546 + 5u;
    float _1569 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
    uint _1573 = _1546 + 4u;
    float _1583 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
    uint _1587 = _1546 | 1u;
    float _1598 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_310, _311, _312));
    float _1601 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_310, _311, _312));
    float _3695 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _3706 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
    float _1606 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.3183098733425140380859375;
    float _1608 = (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 0.3183098733425140380859375;
    float _1615 = ((cbLight._m0[_1563].x * _1569) * _1608) + (((cbLight._m0[_1573].x * _1538) * _1583) * _1606);
    float _1616 = ((_1569 * cbLight._m0[_1563].y) * _1608) + (((cbLight._m0[_1573].y * _1539) * _1583) * _1606);
    float _1617 = ((_1569 * cbLight._m0[_1563].z) * _1608) + (((cbLight._m0[_1573].z * _1540) * _1583) * _1606);
    uvec4 _1622 = floatBitsToUint(cbLight._m0[_1546 + 12u]);
    bool _1624 = _1622.x == 0u;
    float _1635;
    float _1637;
    float _1639;
    if (_1624)
    {
        _1635 = _1615;
        _1637 = _1616;
        _1639 = _1617;
    }
    else
    {
        uint _1643 = _1546 + 6u;
        float _1659 = (dot(vec3(cbLight._m0[_1546 + 2u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _1660 = _1659 * _1659;
        float _3717 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1662 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _1635 = (((cbLight._m0[_1643].x * 0.3183098733425140380859375) * _1661) * _1662) + _1615;
        _1637 = (((cbLight._m0[_1643].y * 0.3183098733425140380859375) * _1661) * _1662) + _1616;
        _1639 = (((cbLight._m0[_1643].z * 0.3183098733425140380859375) * _1661) * _1662) + _1617;
    }
    bool _1642 = _1622.y == 0u;
    float _1680;
    float _1682;
    float _1684;
    if (_1642)
    {
        _1680 = _1635;
        _1682 = _1637;
        _1684 = _1639;
    }
    else
    {
        uint _1853 = _1546 + 7u;
        float _1869 = (dot(vec3(cbLight._m0[_1546 + 3u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _1870 = _1869 * _1869;
        float _3733 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1872 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1680 = (((cbLight._m0[_1853].x * 0.3183098733425140380859375) * _1871) * _1872) + _1635;
        _1682 = (((cbLight._m0[_1853].y * 0.3183098733425140380859375) * _1871) * _1872) + _1637;
        _1684 = (((cbLight._m0[_1853].z * 0.3183098733425140380859375) * _1871) * _1872) + _1639;
    }
    uint _1687 = _1546 + 8u;
    float _1700 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1546].w)) * _313) * 0.949999988079071044921875);
    float _1701 = _1700 * _1700;
    float _1702 = cbLight._m0[_1546].x + _391;
    float _1703 = cbLight._m0[_1546].y + _392;
    float _1704 = cbLight._m0[_1546].z + _393;
    float _1708 = inversesqrt(dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704)));
    float _1709 = _1708 * _1702;
    float _1710 = _1708 * _1703;
    float _1711 = _1708 * _1704;
    float _1712 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1546].xyz));
    float _3749 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1715 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _1716 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _1717 = dot(vec3(_310, _311, _312), vec3(_1709, _1710, _1711));
    float _3771 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1720 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _1721 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_1709, _1710, _1711));
    float _3782 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1725 = _1701 * _1701;
    float _1729 = ((_1720 * _1720) * (_1725 + (-1.0))) + 1.0;
    float _1737 = exp2(log2(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * 5.0);
    float _1738 = 0.959999978542327880859375 - _463;
    float _1740 = 0.959999978542327880859375 - _464;
    float _1741 = 0.959999978542327880859375 - _465;
    float _1748 = 1.0 - _1701;
    float _1759 = (0.5 / (((_1716 * ((_1715 * _1748) + _1701)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _1748) + _1701) * _1715))) * _1715;
    float _3793 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1761 = (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1725 / ((_1729 * _1729) * 3.141590118408203125));
    uint _1775 = _1546 + 9u;
    float _1786 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1587].w)) * _313) * 0.949999988079071044921875);
    float _1787 = _1786 * _1786;
    float _1788 = cbLight._m0[_1587].x + _391;
    float _1789 = cbLight._m0[_1587].y + _392;
    float _1790 = cbLight._m0[_1587].z + _393;
    float _1794 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
    float _1795 = _1794 * _1788;
    float _1796 = _1794 * _1789;
    float _1797 = _1794 * _1790;
    float _1798 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1587].xyz));
    float _3804 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _1802 = dot(vec3(_310, _311, _312), vec3(_1795, _1796, _1797));
    float _3815 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1805 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _1806 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_1795, _1796, _1797));
    float _3826 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1810 = _1787 * _1787;
    float _1814 = ((_1805 * _1805) * (_1810 + (-1.0))) + 1.0;
    float _1821 = exp2(log2(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * 5.0);
    float _1828 = 1.0 - _1787;
    float _1838 = (0.5 / (((_1716 * ((_1801 * _1828) + _1787)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _1828) + _1787) * _1801))) * _1801;
    float _3837 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1810 / ((_1814 * _1814) * 3.141590118408203125));
    float _1850 = (((((_1821 * _1738) + _466) * cbLight._m0[_1775].x) * _1840) * _1569) + ((((cbLight._m0[_1687].x * _1538) * ((_1737 * _1738) + _466)) * _1761) * _1583);
    float _1851 = (((((_1821 * _1740) + _468) * cbLight._m0[_1775].y) * _1840) * _1569) + ((((cbLight._m0[_1687].y * _1539) * ((_1737 * _1740) + _468)) * _1761) * _1583);
    float _1852 = (((((_1821 * _1741) + _469) * cbLight._m0[_1775].z) * _1840) * _1569) + ((((cbLight._m0[_1687].z * _1540) * ((_1737 * _1741) + _469)) * _1761) * _1583);
    float _1914;
    float _1916;
    float _1918;
    if (_1624)
    {
        _1914 = _1850;
        _1916 = _1851;
        _1918 = _1852;
    }
    else
    {
        uint _1920 = _1546 + 2u;
        uint _1924 = _1546 + 10u;
        float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _313) * 0.949999988079071044921875);
        float _1939 = _1938 * _1938;
        float _1940 = cbLight._m0[_1920].x + _391;
        float _1941 = cbLight._m0[_1920].y + _392;
        float _1942 = cbLight._m0[_1920].z + _393;
        float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
        float _1947 = _1946 * _1940;
        float _1948 = _1946 * _1941;
        float _1949 = _1946 * _1942;
        float _1950 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1920].xyz));
        float _3848 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1953 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1954 = dot(vec3(_310, _311, _312), vec3(_1947, _1948, _1949));
        float _3859 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1957 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1958 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_1947, _1948, _1949));
        float _3870 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1962 = _1939 * _1939;
        float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
        float _1973 = exp2(log2(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * 5.0);
        float _1980 = 1.0 - _1939;
        float _1990 = (0.5 / (((_1716 * ((_1953 * _1980) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _1980) + _1939) * _1953))) * _1953;
        float _3881 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1992 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
        float _1993 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _1914 = (((((_1973 * _1738) + _466) * cbLight._m0[_1924].x) * _1992) * _1993) + _1850;
        _1916 = (((((_1973 * _1740) + _468) * cbLight._m0[_1924].y) * _1992) * _1993) + _1851;
        _1918 = (((((_1973 * _1741) + _469) * cbLight._m0[_1924].z) * _1992) * _1993) + _1852;
    }
    float _2028;
    float _2030;
    float _2032;
    if (_1642)
    {
        _2028 = _1914;
        _2030 = _1916;
        _2032 = _1918;
    }
    else
    {
        uint _2039 = _1546 + 3u;
        uint _2043 = _1546 + 11u;
        float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _313) * 0.949999988079071044921875);
        float _2058 = _2057 * _2057;
        float _2059 = cbLight._m0[_2039].x + _391;
        float _2060 = cbLight._m0[_2039].y + _392;
        float _2061 = cbLight._m0[_2039].z + _393;
        float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
        float _2066 = _2065 * _2059;
        float _2067 = _2065 * _2060;
        float _2068 = _2065 * _2061;
        float _2069 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2039].xyz));
        float _3897 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _2073 = dot(vec3(_310, _311, _312), vec3(_2066, _2067, _2068));
        float _3908 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _2077 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2066, _2067, _2068));
        float _3919 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2081 = _2058 * _2058;
        float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
        float _2092 = exp2(log2(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * 5.0);
        float _2099 = 1.0 - _2058;
        float _2109 = (0.5 / (((_1716 * ((_2072 * _2099) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _2099) + _2058) * _2072))) * _2072;
        float _3930 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2111 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
        float _2112 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _2028 = (((((_2092 * _1738) + _466) * cbLight._m0[_2043].x) * _2111) * _2112) + _1914;
        _2030 = (((((_2092 * _1740) + _468) * cbLight._m0[_2043].y) * _2111) * _2112) + _1916;
        _2032 = (((((_2092 * _1741) + _469) * cbLight._m0[_2043].z) * _2111) * _2112) + _1918;
    }
    float _2246;
    float _2248;
    float _2250;
    float _2252;
    float _2254;
    float _2256;
    if (_1544.y == 0u)
    {
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2187;
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2187;
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2187;
        uvec4 _2202 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2203 = _2202.x;
        uint _2214 = uint((float(_2202.y) * floor(float(uint(cbSceneParam._m0[85u].y * _400) / _2203))) + floor(float(uint(cbSceneParam._m0[85u].x * _399) / _2203)));
        float _2224 = (log2(_2190 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2225 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        uint _2228 = uint(isnan(14.0) ? _2225 : (isnan(_2225) ? 14.0 : min(_2225, 14.0)));
        uvec4 _2233 = texelFetch(g_lightClusterGridBuffer, int(((_2228 << 2u) + (_2214 << 6u)) >> 2u));
        uint _2234 = _2233.x;
        uint _2235 = _2202.z;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        if (((((1u << ((_2235 >> 4u) & 15u)) + 4294967295u) & _2234) == 0u) || ((_2235 & 240u) == 0u))
        {
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
        }
        else
        {
            float _2335;
            float _2337;
            float _2339;
            float _2341;
            float _2343;
            float _2345;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            float _2483 = 0.0;
            uint _2484 = 0u;
            uint _2493;
            bool _2494;
            for (;;)
            {
                _2493 = texelFetch(g_lightClassification, int((((_2228 << 5u) + (_2214 << 9u)) + (_2484 << 2u)) >> 2u)).x;
                _2494 = _2493 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2494)
                {
                    frontier_phi_63_pred = _2483;
                    frontier_phi_63_pred_1 = _2482;
                    frontier_phi_63_pred_2 = _2481;
                    frontier_phi_63_pred_3 = _2480;
                    frontier_phi_63_pred_4 = _2479;
                    frontier_phi_63_pred_5 = _2478;
                }
                else
                {
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    uint _2608;
                    _2602 = _2478;
                    _2603 = _2479;
                    _2604 = _2480;
                    _2605 = _2481;
                    _2606 = _2482;
                    _2607 = _2483;
                    _2608 = _2493;
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    for (;;)
                    {
                        uint _2612 = uint(findLSB(_2608)) + (_2484 << 5u);
                        uint _2609 = (_2608 + 4294967295u) & _2608;
                        uint _2614 = _2612 * 48u;
                        vec4 _2628 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2614)).x, texelFetch(g_PointLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2614 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2614 + 3u)).x));
                        uint _2634 = (_2612 * 48u) + 4u;
                        vec4 _2647 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2634)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 3u)).x));
                        uint _2653 = (_2612 * 48u) + 8u;
                        vec3 _2664 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2653)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 2u)).x));
                        float _2668 = _2628.x - _2188;
                        float _2669 = _2628.y - _2189;
                        float _2670 = _2628.z - _2190;
                        float _2671 = dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670));
                        float _2674 = inversesqrt(_2671);
                        float _2675 = _2674 * _2668;
                        float _2676 = _2674 * _2669;
                        float _2677 = _2674 * _2670;
                        float _2678 = dot(vec3(_421, _424, _427), vec3(_2675, _2676, _2677));
                        float _2683 = 1.0 - (_2671 * _2628.w);
                        float _3956 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                        float _2684 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                        float _2685 = sqrt(_2671) * _2647.w;
                        float _2688 = 1.39999997615814208984375 / (_2685 + 1.39999997615814208984375);
                        float _2689 = _2688 * _2688;
                        float _2692 = ((1.0 - _2689) * _2678) + _2689;
                        float _2695 = _2685 * _2685;
                        float _2699 = ((isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0))) * _2684) / ((_2695 * 0.699999988079071044921875) + 1.0);
                        float _2703 = (-0.0) - _2188;
                        float _2704 = (-0.0) - _2189;
                        float _2705 = (-0.0) - _2190;
                        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
                        float _2710 = _2709 * _2703;
                        float _2711 = _2709 * _2704;
                        float _2712 = _2709 * _2705;
                        float _2720 = exp2(log2(1.0 / ((_2695 * 3.5) + 5.0)) * 0.25);
                        float _2721 = 1.0 - _497;
                        float _2728 = sqrt(1.0 - ((1.0 - (_2721 * _2721)) * (1.0 - (_2720 * _2720))));
                        float _2729 = _2728 * _2728;
                        float _2730 = _2729 * _2729;
                        float _2731 = _2710 + _2675;
                        float _2732 = _2711 + _2676;
                        float _2733 = _2712 + _2677;
                        float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
                        float _2741 = dot(vec3(_421, _424, _427), vec3(_2710, _2711, _2712));
                        float _3972 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2744 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                        float _2745 = dot(vec3(_421, _424, _427), vec3(_2737 * _2731, _2737 * _2732, _2737 * _2733));
                        float _3983 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                        float _2748 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                        float _2752 = ((_2748 * _2748) * (_2730 + (-1.0))) + 1.0;
                        float _2753 = _2688 * _2729;
                        float _2754 = _2753 * _2753;
                        float _2757 = ((1.0 - _2754) * _2678) + _2754;
                        float _3994 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                        float _2758 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2759 = 1.0 - _2729;
                        float _2769 = (0.5 / (((_2758 * ((_2744 * _2759) + _2729)) + 9.9999999392252902907785028219223e-09) + (((_2758 * _2759) + _2729) * _2744))) * _2758;
                        float _4005 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2780 = (((_2730 * 3.1415927410125732421875) * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) / ((_2752 * _2752) * ((_2695 * 2.1991131305694580078125) + 3.141590118408203125))) * _2684;
                        _2537 = (_2699 * _2647.x) + _2605;
                        _2538 = (_2699 * _2647.y) + _2606;
                        _2539 = (_2699 * _2647.z) + _2607;
                        _2534 = (_2780 * _2664.x) + _2602;
                        _2535 = (_2780 * _2664.y) + _2603;
                        _2536 = (_2780 * _2664.z) + _2604;
                        if (_2609 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2602 = _2534;
                            _2603 = _2535;
                            _2604 = _2536;
                            _2605 = _2537;
                            _2606 = _2538;
                            _2607 = _2539;
                            _2608 = _2609;
                        }
                    }
                    frontier_phi_63_pred = _2539;
                    frontier_phi_63_pred_1 = _2538;
                    frontier_phi_63_pred_2 = _2537;
                    frontier_phi_63_pred_3 = _2536;
                    frontier_phi_63_pred_4 = _2535;
                    frontier_phi_63_pred_5 = _2534;
                }
                _2345 = frontier_phi_63_pred;
                _2343 = frontier_phi_63_pred_1;
                _2341 = frontier_phi_63_pred_2;
                _2339 = frontier_phi_63_pred_3;
                _2337 = frontier_phi_63_pred_4;
                _2335 = frontier_phi_63_pred_5;
                uint _2485 = _2484 + 1u;
                if (_2485 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2478 = _2335;
                    _2479 = _2337;
                    _2480 = _2339;
                    _2481 = _2341;
                    _2482 = _2343;
                    _2483 = _2345;
                    _2484 = _2485;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
        }
        uvec4 _2348 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2349 = _2348.z;
        uint _2351 = (_2349 >> 8u) & 15u;
        float _2446;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        if (((4294967295u << _2351) & _2234) == 0u)
        {
            _2446 = _2334;
            _2448 = _2336;
            _2450 = _2338;
            _2452 = _2340;
            _2454 = _2342;
            _2456 = _2344;
        }
        else
        {
            float _2471 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
            float _2472 = _2471 * _2188;
            float _2473 = _2471 * _2189;
            float _2474 = _2471 * _2190;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2351 < ((_2349 >> 12u) & 15u))
            {
                float _2447;
                float _2449;
                float _2451;
                float _2453;
                float _2455;
                float _2457;
                float _2585 = _2334;
                float _2586 = _2336;
                float _2587 = _2338;
                float _2588 = _2340;
                float _2589 = _2342;
                float _2590 = _2344;
                uint _2591 = _2351;
                uint _2600;
                bool _2601;
                for (;;)
                {
                    _2600 = texelFetch(g_lightClassification, int((((_2228 << 5u) + (_2214 << 9u)) + (_2591 << 2u)) >> 2u)).x;
                    _2601 = _2600 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2601)
                    {
                        frontier_phi_69_pred = _2590;
                        frontier_phi_69_pred_1 = _2589;
                        frontier_phi_69_pred_2 = _2588;
                        frontier_phi_69_pred_3 = _2587;
                        frontier_phi_69_pred_4 = _2586;
                        frontier_phi_69_pred_5 = _2585;
                    }
                    else
                    {
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _2798 = _2585;
                        float _2799 = _2586;
                        float _2800 = _2587;
                        float _2801 = _2588;
                        float _2802 = _2589;
                        float _2803 = _2590;
                        uint _2804 = _2600;
                        uint _2805;
                        vec4 _2830;
                        float _2831;
                        vec4 _2846;
                        vec3 _2858;
                        vec4 _2874;
                        vec4 _2890;
                        float _2937;
                        bool _2938;
                        for (;;)
                        {
                            uint _2815 = ((_2591 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2804));
                            _2805 = (_2804 + 4294967295u) & _2804;
                            uint _2817 = _2815 * 40u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            _2831 = _2830.w;
                            uint _2833 = (_2815 * 40u) + 4u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2848 = (_2815 * 40u) + 8u;
                            _2858 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x));
                            uint _2861 = (_2815 * 40u) + 16u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2877 = (_2815 * 40u) + 20u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2893 = (_2815 * 40u) + 24u;
                            vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2912 = (_2815 * 40u) + 28u;
                            vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            _2937 = fma(_2190, _2925.z, fma(_2189, _2925.y, _2925.x * _2188)) + _2925.w;
                            _2938 = !((fma(_2190, _2906.z, fma(_2189, _2906.y, _2906.x * _2188)) + _2906.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2938)
                            {
                                float _2965 = _2830.x - _2188;
                                float _2966 = _2830.y - _2189;
                                float _2967 = _2830.z - _2190;
                                float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                                float _2971 = inversesqrt(_2968);
                                float _2972 = _2971 * _2965;
                                float _2973 = _2971 * _2966;
                                float _2974 = _2971 * _2967;
                                float _2978 = 1.0 - (_2968 / (_2831 * _2831));
                                float _4016 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                                float _2979 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                                float _2983 = sqrt(_2968) * _2846.w;
                                float _2985 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                                float _2986 = _2985 * _2985;
                                float _2989 = ((1.0 - _2986) * dot(vec3(_2972, _2973, _2974), vec3(_421, _424, _427))) + _2986;
                                float _2992 = _2983 * _2983;
                                float _2996 = (fma(_2190, _2874.z, fma(_2189, _2874.y, _2874.x * _2188)) + _2874.w) / _2937;
                                float _2997 = (fma(_2190, _2890.z, fma(_2189, _2890.y, _2890.x * _2188)) + _2890.w) / _2937;
                                float _3001 = 1.0 - dot(vec2(_2996, _2997), vec2(_2996, _2997));
                                float _4032 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3002 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                                float _3003 = _3002 * (((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2979) / ((_2992 * 0.699999988079071044921875) + 1.0));
                                float _3015 = exp2(log2(1.0 / ((_2992 * 3.5) + 5.0)) * 0.25);
                                float _3016 = 1.0 - _497;
                                float _3023 = sqrt(1.0 - ((1.0 - (_3016 * _3016)) * (1.0 - (_3015 * _3015))));
                                float _3024 = _3023 * _3023;
                                float _3025 = _3024 * _3024;
                                float _3026 = _2972 - _2472;
                                float _3027 = _2973 - _2473;
                                float _3028 = _2974 - _2474;
                                float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                                float _3036 = dot(vec3(_421, _424, _427), vec3((-0.0) - _2472, (-0.0) - _2473, (-0.0) - _2474));
                                float _4043 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3039 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                                float _3040 = dot(vec3(_421, _424, _427), vec3(_3032 * _3026, _3032 * _3027, _3032 * _3028));
                                float _4054 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3043 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _3047 = ((_3043 * _3043) * (_3025 + (-1.0))) + 1.0;
                                float _3048 = _2985 * _3024;
                                float _3049 = _3048 * _3048;
                                float _3055 = ((1.0 - _3049) * dot(vec3(_421, _424, _427), vec3(_2972, _2973, _2974))) + _3049;
                                float _4065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3056 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3057 = 1.0 - _3024;
                                float _3067 = (0.5 / (((_3056 * ((_3039 * _3057) + _3024)) + 9.9999999392252902907785028219223e-09) + (((_3056 * _3057) + _3024) * _3039))) * _3056;
                                float _4076 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3077 = (_3002 * _2979) * (((_3025 * 3.1415927410125732421875) * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) / ((_3047 * _3047) * ((_2992 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3003 * _2846.z;
                                frontier_phi_75_pred_1 = _3003 * _2846.y;
                                frontier_phi_75_pred_2 = _3003 * _2846.x;
                                frontier_phi_75_pred_3 = _3077 * _2858.z;
                                frontier_phi_75_pred_4 = _3077 * _2858.y;
                                frontier_phi_75_pred_5 = _3077 * _2858.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3086 = frontier_phi_75_pred;
                            _3085 = frontier_phi_75_pred_1;
                            _3084 = frontier_phi_75_pred_2;
                            _3083 = frontier_phi_75_pred_3;
                            _3082 = frontier_phi_75_pred_4;
                            _3081 = frontier_phi_75_pred_5;
                            _2788 = _3084 + _2801;
                            _2789 = _3085 + _2802;
                            _2790 = _3086 + _2803;
                            _2785 = _3081 + _2798;
                            _2786 = _3082 + _2799;
                            _2787 = _3083 + _2800;
                            if (_2805 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2805;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2790;
                        frontier_phi_69_pred_1 = _2789;
                        frontier_phi_69_pred_2 = _2788;
                        frontier_phi_69_pred_3 = _2787;
                        frontier_phi_69_pred_4 = _2786;
                        frontier_phi_69_pred_5 = _2785;
                    }
                    _2457 = frontier_phi_69_pred;
                    _2455 = frontier_phi_69_pred_1;
                    _2453 = frontier_phi_69_pred_2;
                    _2451 = frontier_phi_69_pred_3;
                    _2449 = frontier_phi_69_pred_4;
                    _2447 = frontier_phi_69_pred_5;
                    uint _2592 = _2591 + 1u;
                    if (_2592 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2585 = _2447;
                        _2586 = _2449;
                        _2587 = _2451;
                        _2588 = _2453;
                        _2589 = _2455;
                        _2590 = _2457;
                        _2591 = _2592;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2457;
                frontier_phi_57_58_ladder_1 = _2455;
                frontier_phi_57_58_ladder_2 = _2453;
                frontier_phi_57_58_ladder_3 = _2451;
                frontier_phi_57_58_ladder_4 = _2449;
                frontier_phi_57_58_ladder_5 = _2447;
            }
            else
            {
                frontier_phi_57_58_ladder = _2344;
                frontier_phi_57_58_ladder_1 = _2342;
                frontier_phi_57_58_ladder_2 = _2340;
                frontier_phi_57_58_ladder_3 = _2338;
                frontier_phi_57_58_ladder_4 = _2336;
                frontier_phi_57_58_ladder_5 = _2334;
            }
            _2446 = frontier_phi_57_58_ladder_5;
            _2448 = frontier_phi_57_58_ladder_4;
            _2450 = frontier_phi_57_58_ladder_3;
            _2452 = frontier_phi_57_58_ladder_2;
            _2454 = frontier_phi_57_58_ladder_1;
            _2456 = frontier_phi_57_58_ladder;
        }
        float _2461 = isnan(1.0) ? _481 : (isnan(_481) ? 1.0 : min(_481, 1.0));
        _2246 = (_2461 * _2452) + _1680;
        _2248 = (_2461 * _2454) + _1682;
        _2250 = (_2461 * _2456) + _1684;
        _2252 = ((_2446 * _466) * _2461) + _2028;
        _2254 = ((_2448 * _468) * _2461) + _2030;
        _2256 = ((_2450 * _469) * _2461) + _2032;
    }
    else
    {
        _2246 = _1680;
        _2248 = _1682;
        _2250 = _1684;
        _2252 = _2028;
        _2254 = _2030;
        _2256 = _2032;
    }
    float _4092 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4103 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4114 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    uint _2276 = _440 + 6u;
    float _2284 = _399 / cbSceneParam._m0[86u].x;
    float _2285 = _400 / cbSceneParam._m0[86u].y;
    vec4 _2299 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2284, _2285, (log2((isnan(cbSceneParam._m0[77u].w) ? _333 : (isnan(_333) ? cbSceneParam._m0[77u].w : min(_333, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2301 = _2299.x;
    float _2302 = _2299.y;
    float _2303 = _2299.z;
    float _2304 = _2299.w;
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    if (_333 > cbSceneParam._m0[78u].w)
    {
        float _2359 = isnan(_333) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _333 : min(cbSceneParam._m0[80u].w, _333));
        float _2360 = _2359 / _333;
        float _2371 = _2360 * _384;
        float _2372 = _385 * _2360;
        float _2373 = (-0.0) - _2372;
        float _2374 = _2360 * _386;
        float _2376 = (cbSceneParam._m0[77u].w * _2373) / _2359;
        float _2377 = _2376 + cbSceneParam._m0[79u].w;
        float _2378 = cbSceneParam._m0[79u].w - _2372;
        float _2384 = sqrt(((_2371 * _2371) + (_2372 * _2372)) + (_2374 * _2374));
        float _2387 = (1.0 - (cbSceneParam._m0[77u].w / _2359)) * _2384;
        float _2392 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2394 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2547;
        if (abs((_2373 - _2376) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2547 = ((((_2377 > 0.0) ? exp2(_2392 * _2377) : (2.0 - exp2(_2394 * _2377))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2387;
        }
        else
        {
            float _2507 = 1.0 / cbSceneParam._m0[80u].x;
            float _2508 = isnan(_2378) ? _2377 : (isnan(_2377) ? _2378 : max(_2377, _2378));
            float _2509 = isnan(_2378) ? _2377 : (isnan(_2377) ? _2378 : min(_2377, _2378));
            float _2518 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : min(_2508, 0.0));
            float _2519 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : min(_2509, 0.0));
            _2547 = ((abs(_2384 / _2373) * cbSceneParam._m0[80u].y) * ((((_2518 - _2519) * 2.0) - ((exp2(_2392 * (isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0)))) - exp2(_2392 * (isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0))))) * _2507)) - ((exp2(_2394 * _2518) - exp2(_2394 * _2519)) * _2507))) + (_2387 * cbSceneParam._m0[80u].z);
        }
        vec4 _2549 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2284, _2285, 1.0), 0.0);
        float _2558 = exp2((_2547 * (-1.44269502162933349609375)) * (1.0 - _2549.w));
        float _2559 = log2(_2558);
        float _2575 = log2(_2304);
        _2396 = (exp2(_2575 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2559 * cbSceneParam._m0[78u].x)) * _2549.x) / cbSceneParam._m0[78u].x)) + _2301;
        _2398 = (exp2(_2575 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2559 * cbSceneParam._m0[78u].y)) * _2549.y) / cbSceneParam._m0[78u].y)) + _2302;
        _2400 = (exp2(_2575 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2559 * cbSceneParam._m0[78u].z)) * _2549.z) / cbSceneParam._m0[78u].z)) + _2303;
        _2402 = _2558 * _2304;
    }
    else
    {
        _2396 = _2301;
        _2398 = _2302;
        _2400 = _2303;
        _2402 = _2304;
    }
    float _2414 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2415 = _2414 == 3.0;
    float _2416 = log2(_2402);
    float _2423 = exp2(_2416 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_2246 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _481))) + ((_2252 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1291)) * cbPerFrame._m0[3u].x));
    float _2424 = exp2(_2416 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2248 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _481))) + ((_2254 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1291)) * cbPerFrame._m0[3u].x));
    float _2425 = exp2(_2416 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2250 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _481))) + ((_2256 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1291)) * cbPerFrame._m0[3u].x));
    float _2434 = (_2414 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2434 * (_2415 ? _2423 : (_2423 + (cbSceneParam._m0[72u].w * _2396)));
    SV_Target.y = _2434 * (_2415 ? _2424 : (_2424 + (cbSceneParam._m0[72u].w * _2398)));
    SV_Target.z = _2434 * (_2415 ? _2425 : (_2425 + (cbSceneParam._m0[72u].w * _2400)));
    SV_Target.w = cbInstanceData._m0[_2276].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2276].w;
}


