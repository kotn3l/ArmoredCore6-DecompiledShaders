#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _848;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _229 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _229.x;
    float _233 = _229.y;
    float _234 = _229.z;
    vec4 _250 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _250.z;
    float _258 = (_250.x * 2.0) + (-1.0);
    float _260 = (_250.y * 2.0) + (-1.0);
    float _261 = dot(vec2(_258, _260), vec2(_258, _260));
    float _3260 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _267 = sqrt(1.0 - (isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0))));
    vec4 _280 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _290 = fma(_267, _213, fma(_260, _205 * TANGENT.x, (_191 * _184) * _258));
    float _293 = fma(_267, _214, fma(_260, _205 * TANGENT.y, (_191 * _185) * _258));
    float _296 = fma(_267, _215, fma(_260, _205 * TANGENT.z, (_191 * _186) * _258));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _3271 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _304 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    float _3282 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3293 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3304 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3315 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _308 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    float _391 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _392 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _416 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _419 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = _432 + 9u;
    uint _435 = _434 + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3326 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _3337 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    float _3348 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _447 = 1.0 - _308;
    float _448 = _444 * _447;
    float _449 = _445 * _447;
    float _450 = _446 * _447;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _308;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _308;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _308;
    float _458 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    vec4 _470 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _391, cbSceneParam._m0[86u].y * _392));
    float _473 = _470.x * TEXCOORD.z;
    float _474 = dot(vec3(_301, _302, _303), vec3(_383, _384, _385));
    float _477 = _474 * 2.0;
    float _481 = (_477 * _301) - _383;
    float _482 = (_477 * _302) - _384;
    float _483 = (_477 * _303) - _385;
    float _487 = abs(dot(vec3(_383, _384, _385), vec3(_301, _302, _303)));
    float _3359 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _489 = sqrt(_304);
    float _502 = exp2((_489 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_489 * 3.0));
    float _508 = (1.0 - _502) * ((_489 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _509 = _502 * _489;
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _847;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _572 = fma(_545, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537));
        float _576 = fma(_545, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537));
        float _580 = fma(_545, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537));
        float _605 = _537 + _301;
        float _606 = _541 + _302;
        float _607 = _545 + _303;
        float _617 = fma(_607, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _605)) - _572;
        float _618 = fma(_607, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _605)) - _576;
        float _619 = fma(_607, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _605)) - _580;
        float _623 = inversesqrt(dot(vec3(_617, _618, _619), vec3(_617, _618, _619)));
        float _636 = ((_623 * _617) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_572 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_623 * _618) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_576 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_623 * _619) / cbModelParam._m0[34u].z) + ((((((_580 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        float _675 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_641.x + (-0.5));
        float _677 = _675 * (_641.y + (-0.5));
        float _678 = _675 * (_641.z + (-0.5));
        float _685 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_648.x + (-0.5));
        float _687 = _685 * (_648.y + (-0.5));
        float _688 = _685 * (_648.z + (-0.5));
        float _695 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_655.x + (-0.5));
        float _697 = _695 * (_655.y + (-0.5));
        float _698 = _695 * (_655.z + (-0.5));
        float _705 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_662.x + (-0.5));
        float _707 = _705 * (_662.y + (-0.5));
        float _708 = _705 * (_662.z + (-0.5));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = _676 * 0.5;
        float _713 = _686 * 0.5;
        float _714 = _696 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _729 = (dot(vec3(_301, _302, _303), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _739 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _3407 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_741 + 1.0))) + _746) * _709;
        float _756 = _677 * 0.5;
        float _757 = _687 * 0.5;
        float _758 = _697 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _772 = (dot(vec3(_301, _302, _303), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _781 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3440 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_783 + 1.0))) + _788) * _710;
        float _798 = _678 * 0.5;
        float _799 = _688 * 0.5;
        float _800 = _698 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_301, _302, _303), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3473 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_825 + 1.0))) + _830) * _711;
        _847 = _678;
        _849 = _677;
        _850 = _676;
        _851 = _688;
        _852 = _687;
        _853 = _686;
        _854 = _698;
        _855 = _697;
        _856 = _696;
        _857 = _711;
        _858 = _710;
        _859 = _709;
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
    }
    else
    {
        _847 = _848;
        _849 = _848;
        _850 = _848;
        _851 = _848;
        _852 = _848;
        _853 = _848;
        _854 = _848;
        _855 = _848;
        _856 = _848;
        _857 = _848;
        _858 = _848;
        _859 = _848;
        _860 = 0.0;
        _861 = 0.0;
        _862 = 0.0;
    }
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _888 = fma(_545, cbModelParam._m0[30u].z, fma(_541, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _537));
        float _892 = fma(_545, cbModelParam._m0[31u].z, fma(_541, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _537));
        float _896 = fma(_545, cbModelParam._m0[32u].z, fma(_541, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _537));
        float _919 = _537 + _301;
        float _920 = _541 + _302;
        float _921 = _545 + _303;
        float _931 = fma(_921, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919)) - _888;
        float _932 = fma(_921, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919)) - _892;
        float _933 = fma(_921, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919)) - _896;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_888 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_892 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[35u].z) + ((((((_896 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _987 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_954.x + (-0.5));
        float _989 = _987 * (_954.y + (-0.5));
        float _990 = _987 * (_954.z + (-0.5));
        float _997 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_961.x + (-0.5));
        float _999 = _997 * (_961.y + (-0.5));
        float _1000 = _997 * (_961.z + (-0.5));
        float _1007 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_968.x + (-0.5));
        float _1009 = _1007 * (_968.y + (-0.5));
        float _1010 = _1007 * (_968.z + (-0.5));
        float _1017 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_975.x + (-0.5));
        float _1019 = _1017 * (_975.y + (-0.5));
        float _1020 = _1017 * (_975.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_301, _302, _303), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3536 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1051 + 1.0))) + _1056) * _1021;
        float _1066 = _989 * 0.5;
        float _1067 = _999 * 0.5;
        float _1068 = _1009 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_301, _302, _303), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3569 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1093 + 1.0))) + _1098) * _1022;
        float _1108 = _990 * 0.5;
        float _1109 = _1000 * 0.5;
        float _1110 = _1010 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_301, _302, _303), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3602 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1135 + 1.0))) + _1140) * _1023;
        _1157 = _990;
        _1158 = _989;
        _1159 = _988;
        _1160 = _1000;
        _1161 = _999;
        _1162 = _998;
        _1163 = _1010;
        _1164 = _1009;
        _1165 = _1008;
        _1166 = _1023;
        _1167 = _1022;
        _1168 = _1021;
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
    }
    else
    {
        _1157 = _848;
        _1158 = _848;
        _1159 = _848;
        _1160 = _848;
        _1161 = _848;
        _1162 = _848;
        _1163 = _848;
        _1164 = _848;
        _1165 = _848;
        _1166 = _848;
        _1167 = _848;
        _1168 = _848;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1204 = fma(_1183, cbSceneParam._m0[89u].z, fma(_1182, cbSceneParam._m0[89u].y, _1181 * cbSceneParam._m0[89u].x));
    float _1207 = fma(_1183, cbSceneParam._m0[90u].z, fma(_1182, cbSceneParam._m0[90u].y, _1181 * cbSceneParam._m0[90u].x));
    float _1210 = fma(_1183, cbSceneParam._m0[91u].z, fma(_1182, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1181));
    float _1225 = _481 * 0.5;
    float _1226 = _482 * 0.5;
    float _1227 = _483 * 0.5;
    float _1228 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1231 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1234 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1268;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1241 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_847, _851, _854, _857));
        float _1245 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_849, _852, _855, _858));
        float _1249 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_850, _853, _856, _859));
        float _1256 = dot(vec4(cbModelParam._m0[39u]), vec4(_1225, _1226, _1227, 1.0));
        _1268 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1268 = 1.0;
    }
    float _1279;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1270 = dot(vec4(cbModelParam._m0[40u]), vec4(_1225, _1226, _1227, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1283 = (_1279 * cbModelParam._m0[1u].x) + (_1268 * (1.0 - cbModelParam._m0[1u].x));
    float _1293 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _304);
    float _1294 = isnan(_1293) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1293 : min(cbModelParam._m0[25u].z, _1293));
    float _1376;
    float _1378;
    float _1380;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1343 = fma(_545, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537)) + cbModelParam._m0[13u].w;
        float _1347 = fma(_545, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537)) + cbModelParam._m0[14u].w;
        float _1351 = fma(_545, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537)) + cbModelParam._m0[15u].w;
        float _1354 = fma(_483, cbModelParam._m0[13u].z, fma(_482, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481));
        float _1357 = fma(_483, cbModelParam._m0[14u].z, fma(_482, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481));
        float _1360 = fma(_483, cbModelParam._m0[15u].z, fma(_482, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481));
        float _1388;
        if (_1354 > 0.0)
        {
            _1388 = abs((1.0 - _1343) / _1354);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1343 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1388 = frontier_phi_16_14_ladder;
        }
        float _1596;
        if (_1357 > 0.0)
        {
            _1596 = abs((1.0 - _1347) / _1357);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1347 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1596 = frontier_phi_25_21_ladder;
        }
        float _1850;
        if (_1360 > 0.0)
        {
            _1850 = abs((1.0 - _1351) / _1360);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1351 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1850 = frontier_phi_37_32_ladder;
        }
        float _1852 = isnan(_1596) ? _1388 : (isnan(_1388) ? _1596 : min(_1388, _1596));
        float _1853 = isnan(_1850) ? _1852 : (isnan(_1852) ? _1850 : min(_1852, _1850));
        float _1857 = (_1853 * _1354) + _1343;
        float _1858 = (_1853 * _1357) + _1347;
        float _1859 = (_1853 * _1360) + _1351;
        float _1860 = _1853 * 9.9999997473787516355514526367188e-05;
        float _1862 = (-1.0) - _1860;
        float _1864 = _1860 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1859 > _1864) || ((_1859 < _1862) || ((_1858 > _1864) || ((_1858 < _1862) || ((_1857 < _1862) || (_1857 > _1864))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1987 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1859, cbModelParam._m0[9u].z, fma(_1858, cbModelParam._m0[9u].y, _1857 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1859, cbModelParam._m0[10u].z, fma(_1858, cbModelParam._m0[10u].y, _1857 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1859, cbModelParam._m0[11u].z, fma(_1858, cbModelParam._m0[11u].y, _1857 * cbModelParam._m0[11u].x))), _1294);
            frontier_phi_15_37_ladder = _1987.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1987.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1987.x * cbModelParam._m0[1u].y;
        }
        _1376 = frontier_phi_15_37_ladder_2;
        _1378 = frontier_phi_15_37_ladder_1;
        _1380 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_481, _482, _483), _1294);
        _1376 = _1364.x * cbModelParam._m0[1u].y;
        _1378 = _1364.y * cbModelParam._m0[1u].y;
        _1380 = _1364.z * cbModelParam._m0[1u].y;
    }
    float _1384 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _304);
    float _1385 = isnan(_1384) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1384 : min(cbModelParam._m0[25u].w, _1384));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1442 = fma(_545, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537)) + cbModelParam._m0[21u].w;
        float _1446 = fma(_545, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537)) + cbModelParam._m0[22u].w;
        float _1450 = fma(_545, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537)) + cbModelParam._m0[23u].w;
        float _1453 = fma(_483, cbModelParam._m0[21u].z, fma(_482, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481));
        float _1456 = fma(_483, cbModelParam._m0[22u].z, fma(_482, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481));
        float _1459 = fma(_483, cbModelParam._m0[23u].z, fma(_482, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481));
        float _1601;
        if (_1453 > 0.0)
        {
            _1601 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1601 = frontier_phi_27_23_ladder;
        }
        float _1877;
        if (_1456 > 0.0)
        {
            _1877 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1877 = frontier_phi_39_34_ladder;
        }
        float _2090;
        if (_1459 > 0.0)
        {
            _2090 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2090 = frontier_phi_48_45_ladder;
        }
        float _2092 = isnan(_1877) ? _1601 : (isnan(_1601) ? _1877 : min(_1601, _1877));
        float _2093 = isnan(_2090) ? _2092 : (isnan(_2092) ? _2090 : min(_2092, _2090));
        float _2097 = (_2093 * _1453) + _1442;
        float _2098 = (_2093 * _1456) + _1446;
        float _2099 = (_2093 * _1459) + _1450;
        float _2100 = _2093 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2100;
        float _2103 = _2100 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2099 > _2103) || ((_2099 < _2101) || ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 < _2101) || (_2097 > _2103))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2326 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2099, cbModelParam._m0[17u].z, fma(_2098, cbModelParam._m0[17u].y, _2097 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2099, cbModelParam._m0[18u].z, fma(_2098, cbModelParam._m0[18u].y, _2097 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2099, cbModelParam._m0[19u].z, fma(_2098, cbModelParam._m0[19u].y, _2097 * cbModelParam._m0[19u].x))), _1385);
            frontier_phi_24_48_ladder = _2326.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2326.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2326.x * cbModelParam._m0[1u].z;
        }
        _1478 = frontier_phi_24_48_ladder_2;
        _1480 = frontier_phi_24_48_ladder_1;
        _1482 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1462 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_481, _482, _483), _1385);
        _1478 = _1462.x * cbModelParam._m0[1u].z;
        _1480 = _1462.y * cbModelParam._m0[1u].z;
        _1482 = _1462.z * cbModelParam._m0[1u].z;
    }
    float _1495 = (((_508 * _458) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1497 = (((_508 * _460) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1499 = (((_508 * _461) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1502 = fma(_1499, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1495 * cbSceneParam._m0[89u].x));
    float _1505 = fma(_1499, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1495 * cbSceneParam._m0[90u].x));
    float _1508 = fma(_1499, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, _1495 * cbSceneParam._m0[91u].x));
    uvec4 _1518 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1520 = _1518.x * 14u;
    uint _1521 = _1520 + 13u;
    float _1528 = _473 + (-1.0);
    float _1533 = (cbLight._m0[_1521].x * _1528) + 1.0;
    float _1534 = (cbLight._m0[_1521].y * _1528) + 1.0;
    float _1535 = (cbLight._m0[_1521].z * _1528) + 1.0;
    float _1536 = (cbLight._m0[_1521].w * _1528) + 1.0;
    uint _1537 = _1520 + 5u;
    float _1543 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
    uint _1547 = _1520 + 4u;
    float _1554 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
    uint _1558 = _1520 | 1u;
    float _1569 = dot(vec3(cbLight._m0[_1520].xyz), vec3(_301, _302, _303));
    float _1572 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_301, _302, _303));
    float _3738 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _3749 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1577 = (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * 0.3183098733425140380859375;
    float _1579 = (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * 0.3183098733425140380859375;
    float _1586 = ((cbLight._m0[_1537].x * _1543) * _1579) + ((cbLight._m0[_1547].x * _1554) * _1577);
    float _1587 = ((_1543 * cbLight._m0[_1537].y) * _1579) + ((_1554 * cbLight._m0[_1547].y) * _1577);
    float _1588 = ((_1543 * cbLight._m0[_1537].z) * _1579) + ((_1554 * cbLight._m0[_1547].z) * _1577);
    uvec4 _1593 = floatBitsToUint(cbLight._m0[_1520 + 12u]);
    bool _1595 = _1593.x == 0u;
    float _1606;
    float _1608;
    float _1610;
    if (_1595)
    {
        _1606 = _1586;
        _1608 = _1587;
        _1610 = _1588;
    }
    else
    {
        uint _1614 = _1520 + 6u;
        float _1630 = (dot(vec3(cbLight._m0[_1520 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1631 = _1630 * _1630;
        float _3760 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1633 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1606 = (((cbLight._m0[_1614].x * 0.3183098733425140380859375) * _1632) * _1633) + _1586;
        _1608 = (((cbLight._m0[_1614].y * 0.3183098733425140380859375) * _1632) * _1633) + _1587;
        _1610 = (((cbLight._m0[_1614].z * 0.3183098733425140380859375) * _1632) * _1633) + _1588;
    }
    bool _1613 = _1593.y == 0u;
    float _1651;
    float _1653;
    float _1655;
    if (_1613)
    {
        _1651 = _1606;
        _1653 = _1608;
        _1655 = _1610;
    }
    else
    {
        uint _1821 = _1520 + 7u;
        float _1837 = (dot(vec3(cbLight._m0[_1520 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1838 = _1837 * _1837;
        float _3776 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1840 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
        _1651 = (((cbLight._m0[_1821].x * 0.3183098733425140380859375) * _1839) * _1840) + _1606;
        _1653 = (((cbLight._m0[_1821].y * 0.3183098733425140380859375) * _1839) * _1840) + _1608;
        _1655 = (((cbLight._m0[_1821].z * 0.3183098733425140380859375) * _1839) * _1840) + _1610;
    }
    uint _1658 = _1520 + 8u;
    float _1671 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1520].w)) * _304) * 0.949999988079071044921875);
    float _1672 = _1671 * _1671;
    float _1673 = cbLight._m0[_1520].x + _383;
    float _1674 = cbLight._m0[_1520].y + _384;
    float _1675 = cbLight._m0[_1520].z + _385;
    float _1679 = inversesqrt(dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675)));
    float _1680 = _1679 * _1673;
    float _1681 = _1679 * _1674;
    float _1682 = _1679 * _1675;
    float _1683 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1520].xyz));
    float _3792 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1686 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _1687 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _1688 = dot(vec3(_301, _302, _303), vec3(_1680, _1681, _1682));
    float _3814 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1691 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _1692 = dot(vec3(cbLight._m0[_1520].xyz), vec3(_1680, _1681, _1682));
    float _3825 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1696 = _1672 * _1672;
    float _1700 = ((_1691 * _1691) * (_1696 + (-1.0))) + 1.0;
    float _1708 = exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0);
    float _1709 = 0.959999978542327880859375 - _455;
    float _1711 = 0.959999978542327880859375 - _456;
    float _1712 = 0.959999978542327880859375 - _457;
    float _1719 = 1.0 - _1672;
    float _1730 = (0.5 / (((_1687 * ((_1686 * _1719) + _1672)) + 9.9999999392252902907785028219223e-09) + (((_1687 * _1719) + _1672) * _1686))) * _1686;
    float _3836 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1732 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1696 / ((_1700 * _1700) * 3.141590118408203125));
    uint _1743 = _1520 + 9u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1558].w)) * _304) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1558].x + _383;
    float _1757 = cbLight._m0[_1558].y + _384;
    float _1758 = cbLight._m0[_1558].z + _385;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1558].xyz));
    float _3847 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _1770 = dot(vec3(_301, _302, _303), vec3(_1763, _1764, _1765));
    float _3858 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _1774 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_1763, _1764, _1765));
    float _3869 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1778 = _1755 * _1755;
    float _1782 = ((_1773 * _1773) * (_1778 + (-1.0))) + 1.0;
    float _1789 = exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0);
    float _1796 = 1.0 - _1755;
    float _1806 = (0.5 / (((_1687 * ((_1769 * _1796) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1687 * _1796) + _1755) * _1769))) * _1769;
    float _3880 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1808 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1778 / ((_1782 * _1782) * 3.141590118408203125));
    float _1818 = (((((_1789 * _1709) + _458) * cbLight._m0[_1743].x) * _1808) * _1543) + (((((_1708 * _1709) + _458) * cbLight._m0[_1658].x) * _1732) * _1554);
    float _1819 = (((((_1789 * _1711) + _460) * cbLight._m0[_1743].y) * _1808) * _1543) + (((((_1708 * _1711) + _460) * cbLight._m0[_1658].y) * _1732) * _1554);
    float _1820 = (((((_1789 * _1712) + _461) * cbLight._m0[_1743].z) * _1808) * _1543) + (((((_1708 * _1712) + _461) * cbLight._m0[_1658].z) * _1732) * _1554);
    float _1882;
    float _1884;
    float _1886;
    if (_1595)
    {
        _1882 = _1818;
        _1884 = _1819;
        _1886 = _1820;
    }
    else
    {
        uint _1888 = _1520 + 2u;
        uint _1892 = _1520 + 10u;
        float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _304) * 0.949999988079071044921875);
        float _1907 = _1906 * _1906;
        float _1908 = cbLight._m0[_1888].x + _383;
        float _1909 = cbLight._m0[_1888].y + _384;
        float _1910 = cbLight._m0[_1888].z + _385;
        float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
        float _1915 = _1914 * _1908;
        float _1916 = _1914 * _1909;
        float _1917 = _1914 * _1910;
        float _1918 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1888].xyz));
        float _3891 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1921 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1922 = dot(vec3(_301, _302, _303), vec3(_1915, _1916, _1917));
        float _3902 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1925 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1926 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_1915, _1916, _1917));
        float _3913 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1930 = _1907 * _1907;
        float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
        float _1941 = exp2(log2(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * 5.0);
        float _1948 = 1.0 - _1907;
        float _1958 = (0.5 / (((_1687 * ((_1921 * _1948) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1687 * _1948) + _1907) * _1921))) * _1921;
        float _3924 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1960 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
        float _1961 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
        _1882 = (((((_1941 * _1709) + _458) * cbLight._m0[_1892].x) * _1960) * _1961) + _1818;
        _1884 = (((((_1941 * _1711) + _460) * cbLight._m0[_1892].y) * _1960) * _1961) + _1819;
        _1886 = (((((_1941 * _1712) + _461) * cbLight._m0[_1892].z) * _1960) * _1961) + _1820;
    }
    float _1996;
    float _1998;
    float _2000;
    if (_1613)
    {
        _1996 = _1882;
        _1998 = _1884;
        _2000 = _1886;
    }
    else
    {
        uint _2007 = _1520 + 3u;
        uint _2011 = _1520 + 11u;
        float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _304) * 0.949999988079071044921875);
        float _2026 = _2025 * _2025;
        float _2027 = cbLight._m0[_2007].x + _383;
        float _2028 = cbLight._m0[_2007].y + _384;
        float _2029 = cbLight._m0[_2007].z + _385;
        float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
        float _2034 = _2033 * _2027;
        float _2035 = _2033 * _2028;
        float _2036 = _2033 * _2029;
        float _2037 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2007].xyz));
        float _3940 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2040 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _2041 = dot(vec3(_301, _302, _303), vec3(_2034, _2035, _2036));
        float _3951 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2044 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2045 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2034, _2035, _2036));
        float _3962 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2049 = _2026 * _2026;
        float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
        float _2060 = exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0);
        float _2067 = 1.0 - _2026;
        float _2077 = (0.5 / (((_1687 * ((_2040 * _2067) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_1687 * _2067) + _2026) * _2040))) * _2040;
        float _3973 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2079 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
        float _2080 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
        _1996 = (((((_2060 * _1709) + _458) * cbLight._m0[_2011].x) * _2079) * _2080) + _1882;
        _1998 = (((((_2060 * _1711) + _460) * cbLight._m0[_2011].y) * _2079) * _2080) + _1884;
        _2000 = (((((_2060 * _1712) + _461) * cbLight._m0[_2011].z) * _2079) * _2080) + _1886;
    }
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    float _2222;
    float _2224;
    if (_1518.y == 0u)
    {
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2155;
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2155;
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2155;
        uvec4 _2170 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2171 = _2170.x;
        uint _2182 = uint((float(_2170.y) * floor(float(uint(cbSceneParam._m0[85u].y * _392) / _2171))) + floor(float(uint(cbSceneParam._m0[85u].x * _391) / _2171)));
        float _2192 = (log2(_2158 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2193 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        uint _2196 = uint(isnan(14.0) ? _2193 : (isnan(_2193) ? 14.0 : min(_2193, 14.0)));
        uvec4 _2201 = texelFetch(g_lightClusterGridBuffer, int(((_2196 << 2u) + (_2182 << 6u)) >> 2u));
        uint _2202 = _2201.x;
        uint _2203 = _2170.z;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        if (((((1u << ((_2203 >> 4u) & 15u)) + 4294967295u) & _2202) == 0u) || ((_2203 & 240u) == 0u))
        {
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
        }
        else
        {
            float _2332;
            float _2334;
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            uint _2527 = 0u;
            uint _2536;
            bool _2537;
            for (;;)
            {
                _2536 = texelFetch(g_lightClassification, int((((_2196 << 5u) + (_2182 << 9u)) + (_2527 << 2u)) >> 2u)).x;
                _2537 = _2536 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2537)
                {
                    frontier_phi_63_pred = _2526;
                    frontier_phi_63_pred_1 = _2525;
                    frontier_phi_63_pred_2 = _2524;
                    frontier_phi_63_pred_3 = _2523;
                    frontier_phi_63_pred_4 = _2522;
                    frontier_phi_63_pred_5 = _2521;
                }
                else
                {
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    uint _2651;
                    _2645 = _2521;
                    _2646 = _2522;
                    _2647 = _2523;
                    _2648 = _2524;
                    _2649 = _2525;
                    _2650 = _2526;
                    _2651 = _2536;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    for (;;)
                    {
                        uint _2655 = uint(findLSB(_2651)) + (_2527 << 5u);
                        uint _2652 = (_2651 + 4294967295u) & _2651;
                        uint _2657 = _2655 * 48u;
                        vec4 _2671 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2657)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 3u)).x));
                        uint _2677 = (_2655 * 48u) + 4u;
                        vec4 _2690 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2677)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 3u)).x));
                        uint _2696 = (_2655 * 48u) + 8u;
                        vec3 _2707 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2696)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 2u)).x));
                        float _2711 = _2671.x - _2156;
                        float _2712 = _2671.y - _2157;
                        float _2713 = _2671.z - _2158;
                        float _2714 = dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713));
                        float _2717 = inversesqrt(_2714);
                        float _2718 = _2717 * _2711;
                        float _2719 = _2717 * _2712;
                        float _2720 = _2717 * _2713;
                        float _2721 = dot(vec3(_413, _416, _419), vec3(_2718, _2719, _2720));
                        float _2726 = 1.0 - (_2714 * _2671.w);
                        float _3999 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2727 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2728 = sqrt(_2714) * _2690.w;
                        float _2731 = 1.39999997615814208984375 / (_2728 + 1.39999997615814208984375);
                        float _2732 = _2731 * _2731;
                        float _2735 = ((1.0 - _2732) * _2721) + _2732;
                        float _2738 = _2728 * _2728;
                        float _2742 = ((isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0))) * _2727) / ((_2738 * 0.699999988079071044921875) + 1.0);
                        float _2746 = (-0.0) - _2156;
                        float _2747 = (-0.0) - _2157;
                        float _2748 = (-0.0) - _2158;
                        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
                        float _2753 = _2752 * _2746;
                        float _2754 = _2752 * _2747;
                        float _2755 = _2752 * _2748;
                        float _2763 = exp2(log2(1.0 / ((_2738 * 3.5) + 5.0)) * 0.25);
                        float _2764 = 1.0 - _489;
                        float _2771 = sqrt(1.0 - ((1.0 - (_2764 * _2764)) * (1.0 - (_2763 * _2763))));
                        float _2772 = _2771 * _2771;
                        float _2773 = _2772 * _2772;
                        float _2774 = _2753 + _2718;
                        float _2775 = _2754 + _2719;
                        float _2776 = _2755 + _2720;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2784 = dot(vec3(_413, _416, _419), vec3(_2753, _2754, _2755));
                        float _4015 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2787 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2788 = dot(vec3(_413, _416, _419), vec3(_2780 * _2774, _2780 * _2775, _2780 * _2776));
                        float _4026 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2791 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                        float _2795 = ((_2791 * _2791) * (_2773 + (-1.0))) + 1.0;
                        float _2796 = _2731 * _2772;
                        float _2797 = _2796 * _2796;
                        float _2800 = ((1.0 - _2797) * _2721) + _2797;
                        float _4037 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2801 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                        float _2802 = 1.0 - _2772;
                        float _2812 = (0.5 / (((_2801 * ((_2787 * _2802) + _2772)) + 9.9999999392252902907785028219223e-09) + (((_2801 * _2802) + _2772) * _2787))) * _2801;
                        float _4048 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2823 = (((_2773 * 3.1415927410125732421875) * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) / ((_2795 * _2795) * ((_2738 * 2.1991131305694580078125) + 3.141590118408203125))) * _2727;
                        _2580 = (_2742 * _2690.x) + _2648;
                        _2581 = (_2742 * _2690.y) + _2649;
                        _2582 = (_2742 * _2690.z) + _2650;
                        _2577 = (_2823 * _2707.x) + _2645;
                        _2578 = (_2823 * _2707.y) + _2646;
                        _2579 = (_2823 * _2707.z) + _2647;
                        if (_2652 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2645 = _2577;
                            _2646 = _2578;
                            _2647 = _2579;
                            _2648 = _2580;
                            _2649 = _2581;
                            _2650 = _2582;
                            _2651 = _2652;
                        }
                    }
                    frontier_phi_63_pred = _2582;
                    frontier_phi_63_pred_1 = _2581;
                    frontier_phi_63_pred_2 = _2580;
                    frontier_phi_63_pred_3 = _2579;
                    frontier_phi_63_pred_4 = _2578;
                    frontier_phi_63_pred_5 = _2577;
                }
                _2342 = frontier_phi_63_pred;
                _2340 = frontier_phi_63_pred_1;
                _2338 = frontier_phi_63_pred_2;
                _2336 = frontier_phi_63_pred_3;
                _2334 = frontier_phi_63_pred_4;
                _2332 = frontier_phi_63_pred_5;
                uint _2528 = _2527 + 1u;
                if (_2528 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2521 = _2332;
                    _2522 = _2334;
                    _2523 = _2336;
                    _2524 = _2338;
                    _2525 = _2340;
                    _2526 = _2342;
                    _2527 = _2528;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
        }
        uvec4 _2345 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2346 = _2345.z;
        uint _2348 = (_2346 >> 8u) & 15u;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        if (((4294967295u << _2348) & _2202) == 0u)
        {
            _2489 = _2331;
            _2491 = _2333;
            _2493 = _2335;
            _2495 = _2337;
            _2497 = _2339;
            _2499 = _2341;
        }
        else
        {
            float _2514 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
            float _2515 = _2514 * _2156;
            float _2516 = _2514 * _2157;
            float _2517 = _2514 * _2158;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2348 < ((_2346 >> 12u) & 15u))
            {
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2628 = _2331;
                float _2629 = _2333;
                float _2630 = _2335;
                float _2631 = _2337;
                float _2632 = _2339;
                float _2633 = _2341;
                uint _2634 = _2348;
                uint _2643;
                bool _2644;
                for (;;)
                {
                    _2643 = texelFetch(g_lightClassification, int((((_2196 << 5u) + (_2182 << 9u)) + (_2634 << 2u)) >> 2u)).x;
                    _2644 = _2643 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2644)
                    {
                        frontier_phi_69_pred = _2633;
                        frontier_phi_69_pred_1 = _2632;
                        frontier_phi_69_pred_2 = _2631;
                        frontier_phi_69_pred_3 = _2630;
                        frontier_phi_69_pred_4 = _2629;
                        frontier_phi_69_pred_5 = _2628;
                    }
                    else
                    {
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _2841 = _2628;
                        float _2842 = _2629;
                        float _2843 = _2630;
                        float _2844 = _2631;
                        float _2845 = _2632;
                        float _2846 = _2633;
                        uint _2847 = _2643;
                        uint _2848;
                        vec4 _2873;
                        float _2874;
                        vec4 _2889;
                        vec3 _2901;
                        vec4 _2917;
                        vec4 _2933;
                        float _2980;
                        bool _2981;
                        for (;;)
                        {
                            uint _2858 = ((_2634 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2847));
                            _2848 = (_2847 + 4294967295u) & _2847;
                            uint _2860 = _2858 * 40u;
                            _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            _2874 = _2873.w;
                            uint _2876 = (_2858 * 40u) + 4u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2891 = (_2858 * 40u) + 8u;
                            _2901 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x));
                            uint _2904 = (_2858 * 40u) + 16u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2920 = (_2858 * 40u) + 20u;
                            _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            uint _2936 = (_2858 * 40u) + 24u;
                            vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2955 = (_2858 * 40u) + 28u;
                            vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            _2980 = fma(_2158, _2968.z, fma(_2157, _2968.y, _2968.x * _2156)) + _2968.w;
                            _2981 = !((fma(_2158, _2949.z, fma(_2157, _2949.y, _2949.x * _2156)) + _2949.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2981)
                            {
                                float _3008 = _2873.x - _2156;
                                float _3009 = _2873.y - _2157;
                                float _3010 = _2873.z - _2158;
                                float _3011 = dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010));
                                float _3014 = inversesqrt(_3011);
                                float _3015 = _3014 * _3008;
                                float _3016 = _3014 * _3009;
                                float _3017 = _3014 * _3010;
                                float _3021 = 1.0 - (_3011 / (_2874 * _2874));
                                float _4059 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3022 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3026 = sqrt(_3011) * _2889.w;
                                float _3028 = 1.39999997615814208984375 / (_3026 + 1.39999997615814208984375);
                                float _3029 = _3028 * _3028;
                                float _3032 = ((1.0 - _3029) * dot(vec3(_3015, _3016, _3017), vec3(_413, _416, _419))) + _3029;
                                float _3035 = _3026 * _3026;
                                float _3039 = (fma(_2158, _2917.z, fma(_2157, _2917.y, _2917.x * _2156)) + _2917.w) / _2980;
                                float _3040 = (fma(_2158, _2933.z, fma(_2157, _2933.y, _2933.x * _2156)) + _2933.w) / _2980;
                                float _3044 = 1.0 - dot(vec2(_3039, _3040), vec2(_3039, _3040));
                                float _4075 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3045 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3046 = _3045 * (((isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0))) * _3022) / ((_3035 * 0.699999988079071044921875) + 1.0));
                                float _3058 = exp2(log2(1.0 / ((_3035 * 3.5) + 5.0)) * 0.25);
                                float _3059 = 1.0 - _489;
                                float _3066 = sqrt(1.0 - ((1.0 - (_3059 * _3059)) * (1.0 - (_3058 * _3058))));
                                float _3067 = _3066 * _3066;
                                float _3068 = _3067 * _3067;
                                float _3069 = _3015 - _2515;
                                float _3070 = _3016 - _2516;
                                float _3071 = _3017 - _2517;
                                float _3075 = inversesqrt(dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071)));
                                float _3079 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2515, (-0.0) - _2516, (-0.0) - _2517));
                                float _4086 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3082 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3083 = dot(vec3(_413, _416, _419), vec3(_3075 * _3069, _3075 * _3070, _3075 * _3071));
                                float _4097 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3086 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                                float _3090 = ((_3086 * _3086) * (_3068 + (-1.0))) + 1.0;
                                float _3091 = _3028 * _3067;
                                float _3092 = _3091 * _3091;
                                float _3098 = ((1.0 - _3092) * dot(vec3(_413, _416, _419), vec3(_3015, _3016, _3017))) + _3092;
                                float _4108 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3100 = 1.0 - _3067;
                                float _3110 = (0.5 / (((_3099 * ((_3082 * _3100) + _3067)) + 9.9999999392252902907785028219223e-09) + (((_3099 * _3100) + _3067) * _3082))) * _3099;
                                float _4119 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3120 = (_3045 * _3022) * (((_3068 * 3.1415927410125732421875) * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) / ((_3090 * _3090) * ((_3035 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3046 * _2889.z;
                                frontier_phi_75_pred_1 = _3046 * _2889.y;
                                frontier_phi_75_pred_2 = _3046 * _2889.x;
                                frontier_phi_75_pred_3 = _3120 * _2901.z;
                                frontier_phi_75_pred_4 = _3120 * _2901.y;
                                frontier_phi_75_pred_5 = _3120 * _2901.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3129 = frontier_phi_75_pred;
                            _3128 = frontier_phi_75_pred_1;
                            _3127 = frontier_phi_75_pred_2;
                            _3126 = frontier_phi_75_pred_3;
                            _3125 = frontier_phi_75_pred_4;
                            _3124 = frontier_phi_75_pred_5;
                            _2831 = _3127 + _2844;
                            _2832 = _3128 + _2845;
                            _2833 = _3129 + _2846;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            _2830 = _3126 + _2843;
                            if (_2848 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2848;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2833;
                        frontier_phi_69_pred_1 = _2832;
                        frontier_phi_69_pred_2 = _2831;
                        frontier_phi_69_pred_3 = _2830;
                        frontier_phi_69_pred_4 = _2829;
                        frontier_phi_69_pred_5 = _2828;
                    }
                    _2500 = frontier_phi_69_pred;
                    _2498 = frontier_phi_69_pred_1;
                    _2496 = frontier_phi_69_pred_2;
                    _2494 = frontier_phi_69_pred_3;
                    _2492 = frontier_phi_69_pred_4;
                    _2490 = frontier_phi_69_pred_5;
                    uint _2635 = _2634 + 1u;
                    if (_2635 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2628 = _2490;
                        _2629 = _2492;
                        _2630 = _2494;
                        _2631 = _2496;
                        _2632 = _2498;
                        _2633 = _2500;
                        _2634 = _2635;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2500;
                frontier_phi_57_58_ladder_1 = _2498;
                frontier_phi_57_58_ladder_2 = _2496;
                frontier_phi_57_58_ladder_3 = _2494;
                frontier_phi_57_58_ladder_4 = _2492;
                frontier_phi_57_58_ladder_5 = _2490;
            }
            else
            {
                frontier_phi_57_58_ladder = _2341;
                frontier_phi_57_58_ladder_1 = _2339;
                frontier_phi_57_58_ladder_2 = _2337;
                frontier_phi_57_58_ladder_3 = _2335;
                frontier_phi_57_58_ladder_4 = _2333;
                frontier_phi_57_58_ladder_5 = _2331;
            }
            _2489 = frontier_phi_57_58_ladder_5;
            _2491 = frontier_phi_57_58_ladder_4;
            _2493 = frontier_phi_57_58_ladder_3;
            _2495 = frontier_phi_57_58_ladder_2;
            _2497 = frontier_phi_57_58_ladder_1;
            _2499 = frontier_phi_57_58_ladder;
        }
        float _2504 = isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0));
        _2214 = (_2504 * _2495) + _1651;
        _2216 = (_2504 * _2497) + _1653;
        _2218 = (_2504 * _2499) + _1655;
        _2220 = ((_2489 * _458) * _2504) + _1996;
        _2222 = ((_2491 * _460) * _2504) + _1998;
        _2224 = ((_2493 * _461) * _2504) + _2000;
    }
    else
    {
        _2214 = _1651;
        _2216 = _1653;
        _2218 = _1655;
        _2220 = _1996;
        _2222 = _1998;
        _2224 = _2000;
    }
    uint _2230 = _434 + uint(cbMatDynParam._m0[0u].w);
    float _2236 = (_280.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2230].x;
    float _2237 = (_280.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2230].y;
    float _2238 = (_280.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2230].z;
    float _4135 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4146 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4157 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _2255 = (((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2214 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _473))) + ((_2220 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + _2236;
    float _2257 = (_2237 + ((_2222 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2216 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _473)));
    float _2259 = (_2238 + ((_2224 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2218 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _473)));
    float _4183 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2272 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2281 = _391 / cbSceneParam._m0[86u].x;
    float _2282 = _392 / cbSceneParam._m0[86u].y;
    vec4 _2296 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2281, _2282, (log2((isnan(cbSceneParam._m0[77u].w) ? _324 : (isnan(_324) ? cbSceneParam._m0[77u].w : min(_324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2298 = _2296.x;
    float _2299 = _2296.y;
    float _2300 = _2296.z;
    float _2301 = _2296.w;
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    if (_324 > cbSceneParam._m0[78u].w)
    {
        float _2356 = isnan(_324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _324 : min(cbSceneParam._m0[80u].w, _324));
        float _2357 = _2356 / _324;
        float _2368 = _2357 * _376;
        float _2369 = _377 * _2357;
        float _2370 = (-0.0) - _2369;
        float _2371 = _2357 * _378;
        float _2373 = (cbSceneParam._m0[77u].w * _2370) / _2356;
        float _2374 = _2373 + cbSceneParam._m0[79u].w;
        float _2375 = cbSceneParam._m0[79u].w - _2369;
        float _2381 = sqrt(((_2368 * _2368) + (_2369 * _2369)) + (_2371 * _2371));
        float _2384 = (1.0 - (cbSceneParam._m0[77u].w / _2356)) * _2381;
        float _2389 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2391 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2590;
        if (abs((_2370 - _2373) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2590 = ((((_2374 > 0.0) ? exp2(_2389 * _2374) : (2.0 - exp2(_2391 * _2374))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2384;
        }
        else
        {
            float _2550 = 1.0 / cbSceneParam._m0[80u].x;
            float _2551 = isnan(_2375) ? _2374 : (isnan(_2374) ? _2375 : max(_2374, _2375));
            float _2552 = isnan(_2375) ? _2374 : (isnan(_2374) ? _2375 : min(_2374, _2375));
            float _2561 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : min(_2551, 0.0));
            float _2562 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : min(_2552, 0.0));
            _2590 = ((abs(_2381 / _2370) * cbSceneParam._m0[80u].y) * ((((_2561 - _2562) * 2.0) - ((exp2(_2389 * (isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0)))) - exp2(_2389 * (isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0))))) * _2550)) - ((exp2(_2391 * _2561) - exp2(_2391 * _2562)) * _2550))) + (_2384 * cbSceneParam._m0[80u].z);
        }
        vec4 _2592 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2281, _2282, 1.0), 0.0);
        float _2601 = exp2((_2590 * (-1.44269502162933349609375)) * (1.0 - _2592.w));
        float _2602 = log2(_2601);
        float _2618 = log2(_2301);
        _2393 = (exp2(_2618 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2602 * cbSceneParam._m0[78u].x)) * _2592.x) / cbSceneParam._m0[78u].x)) + _2298;
        _2395 = (exp2(_2618 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2602 * cbSceneParam._m0[78u].y)) * _2592.y) / cbSceneParam._m0[78u].y)) + _2299;
        _2397 = (exp2(_2618 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2602 * cbSceneParam._m0[78u].z)) * _2592.z) / cbSceneParam._m0[78u].z)) + _2300;
        _2399 = _2601 * _2301;
    }
    else
    {
        _2393 = _2298;
        _2395 = _2299;
        _2397 = _2300;
        _2399 = _2301;
    }
    bool _2412 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2413 = log2(_2399);
    float _2417 = exp2(_2413 * cbSceneParam._m0[78u].x);
    float _2418 = exp2(_2413 * cbSceneParam._m0[78u].y);
    float _2419 = exp2(_2413 * cbSceneParam._m0[78u].z);
    float _2420 = _2417 * (isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0)));
    float _2421 = _2418 * (isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0)));
    float _2422 = _2419 * (isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0)));
    vec4 _2430 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_391, _392));
    float _2432 = _2430.x;
    float _2453 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2432)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2432))) - _324) * 0.100000001490116119384765625;
    float _4234 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2456 = _2455 * cbInstanceData._m0[_432 + 6u].w;
    float _2465 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2465 * (_2412 ? _2420 : (_2420 + (cbSceneParam._m0[72u].w * _2393)));
    SV_Target.y = _2465 * (_2412 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2395)));
    SV_Target.z = _2465 * (_2412 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2397)));
    SV_Target.w = _2456;
    SV_Target_1.x = ((((cbMtdParam._m0[2u].x * _2236) * _2272) * _2417) * _2455) * _2465;
    SV_Target_1.y = ((((cbMtdParam._m0[2u].y * _2237) * _2272) * _2418) * _2455) * _2465;
    SV_Target_1.z = ((((cbMtdParam._m0[2u].z * _2238) * _2272) * _2419) * _2455) * _2465;
    SV_Target_1.w = _2456;
}


