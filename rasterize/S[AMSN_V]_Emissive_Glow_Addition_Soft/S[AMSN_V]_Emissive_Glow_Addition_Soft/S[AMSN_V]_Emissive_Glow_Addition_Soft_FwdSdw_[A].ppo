#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _897;
float _3646;
float _3647;
float _3648;
float _3649;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    vec4 _237 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _237.x;
    float _241 = _237.y;
    float _242 = _237.z;
    vec4 _258 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _258.z;
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _3658 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))));
    vec4 _288 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _298 = fma(_275, _221, fma(_268, _213 * TANGENT.x, (_199 * _192) * _266));
    float _301 = fma(_275, _222, fma(_268, _213 * TANGENT.y, (_199 * _193) * _266));
    float _304 = fma(_275, _223, fma(_268, _213 * TANGENT.z, (_199 * _194) * _266));
    float _308 = inversesqrt(dot(vec3(_298, _301, _304), vec3(_298, _301, _304)));
    float _309 = _308 * _298;
    float _310 = _308 * _301;
    float _311 = _308 * _304;
    float _3669 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _312 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3691 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3702 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3713 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _316 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _332 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _374 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _384 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _374);
    float _385 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _374);
    float _386 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _374);
    float _390 = inversesqrt(dot(vec3(_384, _385, _386), vec3(_384, _385, _386)));
    float _391 = _384 * _390;
    float _392 = _385 * _390;
    float _393 = _386 * _390;
    vec4 _398 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _400 = _398.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _576 = sqrt(((_384 * _384) + (_385 * _385)) + (_386 * _386));
        float _582 = (cbMatDynParam._m0[5u].x * _576) + cbMatDynParam._m0[5u].y;
        float _3724 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        float _583 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _587 = (cbMatDynParam._m0[5u].z * _576) + cbMatDynParam._m0[5u].w;
        float _3735 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) - _583)) + _583) < ((_400 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _412 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _413 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _433 = fma(_311, cbSceneParam._m0[5u].z, fma(_310, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _309));
    float _436 = fma(_311, cbSceneParam._m0[6u].z, fma(_310, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _309));
    float _439 = fma(_311, cbSceneParam._m0[7u].z, fma(_310, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _309));
    uint _452 = uint(roundEven(NORMAL.w)) * 13u;
    uint _454 = _452 + 9u;
    uint _455 = _454 + uint(cbMatDynParam._m0[0u].w);
    float _461 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_455].x;
    float _462 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_455].y;
    float _463 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_455].z;
    float _3746 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _466 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _467 = 1.0 - _316;
    float _468 = _464 * _467;
    float _469 = _465 * _467;
    float _470 = _466 * _467;
    float _475 = (_464 + (-0.039999999105930328369140625)) * _316;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _316;
    float _477 = (_466 + (-0.039999999105930328369140625)) * _316;
    float _478 = _475 + 0.039999999105930328369140625;
    float _480 = _476 + 0.039999999105930328369140625;
    float _481 = _477 + 0.039999999105930328369140625;
    vec4 _490 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _412, cbSceneParam._m0[86u].y * _413));
    float _493 = _490.x * TEXCOORD.z;
    float _494 = dot(vec3(_309, _310, _311), vec3(_391, _392, _393));
    float _497 = _494 * 2.0;
    float _501 = (_497 * _309) - _391;
    float _502 = (_497 * _310) - _392;
    float _503 = (_497 * _311) - _393;
    float _507 = abs(dot(vec3(_391, _392, _393), vec3(_309, _310, _311)));
    float _3779 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _509 = sqrt(_312);
    float _522 = exp2((_509 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_509 * 3.0));
    float _528 = (1.0 - _522) * ((_509 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _529 = _522 * _509;
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _896;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _621 = fma(_565, cbModelParam._m0[26u].z, fma(_561, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _557));
        float _625 = fma(_565, cbModelParam._m0[27u].z, fma(_561, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _557));
        float _629 = fma(_565, cbModelParam._m0[28u].z, fma(_561, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _557));
        float _654 = _557 + _309;
        float _655 = _561 + _310;
        float _656 = _565 + _311;
        float _666 = fma(_656, cbModelParam._m0[26u].z, fma(_655, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _654)) - _621;
        float _667 = fma(_656, cbModelParam._m0[27u].z, fma(_655, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _654)) - _625;
        float _668 = fma(_656, cbModelParam._m0[28u].z, fma(_655, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _654)) - _629;
        float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
        float _685 = ((_672 * _666) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_621 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_672 * _667) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_625 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _687 = ((_672 * _668) / cbModelParam._m0[34u].z) + ((((((_629 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_685, _686, _687), 0.0);
        float _724 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_690.x + (-0.5));
        float _726 = _724 * (_690.y + (-0.5));
        float _727 = _724 * (_690.z + (-0.5));
        float _734 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_697.x + (-0.5));
        float _736 = _734 * (_697.y + (-0.5));
        float _737 = _734 * (_697.z + (-0.5));
        float _744 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_704.x + (-0.5));
        float _746 = _744 * (_704.y + (-0.5));
        float _747 = _744 * (_704.z + (-0.5));
        float _754 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_711.x + (-0.5));
        float _756 = _754 * (_711.y + (-0.5));
        float _757 = _754 * (_711.z + (-0.5));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = _725 * 0.5;
        float _762 = _735 * 0.5;
        float _763 = _745 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _778 = (dot(vec3(_309, _310, _311), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _788 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3827 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_790 + 1.0))) + _795) * _758;
        float _805 = _726 * 0.5;
        float _806 = _736 * 0.5;
        float _807 = _746 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_309, _310, _311), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3860 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_832 + 1.0))) + _837) * _759;
        float _847 = _727 * 0.5;
        float _848 = _737 * 0.5;
        float _849 = _747 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _863 = (dot(vec3(_309, _310, _311), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _872 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3893 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_874 + 1.0))) + _879) * _760;
        _896 = _727;
        _898 = _726;
        _899 = _725;
        _900 = _737;
        _901 = _736;
        _902 = _735;
        _903 = _747;
        _904 = _746;
        _905 = _745;
        _906 = _760;
        _907 = _759;
        _908 = _758;
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
    }
    else
    {
        _896 = _897;
        _898 = _897;
        _899 = _897;
        _900 = _897;
        _901 = _897;
        _902 = _897;
        _903 = _897;
        _904 = _897;
        _905 = _897;
        _906 = _897;
        _907 = _897;
        _908 = _897;
        _909 = 0.0;
        _910 = 0.0;
        _911 = 0.0;
    }
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _940 = fma(_565, cbModelParam._m0[30u].z, fma(_561, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _557));
        float _944 = fma(_565, cbModelParam._m0[31u].z, fma(_561, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _557));
        float _948 = fma(_565, cbModelParam._m0[32u].z, fma(_561, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _557));
        float _971 = _557 + _309;
        float _972 = _561 + _310;
        float _973 = _565 + _311;
        float _983 = fma(_973, cbModelParam._m0[30u].z, fma(_972, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _971)) - _940;
        float _984 = fma(_973, cbModelParam._m0[31u].z, fma(_972, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _971)) - _944;
        float _985 = fma(_973, cbModelParam._m0[32u].z, fma(_972, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _971)) - _948;
        float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
        float _1002 = ((_989 * _983) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_940 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_989 * _984) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_944 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_989 * _985) / cbModelParam._m0[35u].z) + ((((((_948 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        float _1039 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1006.x + (-0.5));
        float _1041 = _1039 * (_1006.y + (-0.5));
        float _1042 = _1039 * (_1006.z + (-0.5));
        float _1049 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1013.x + (-0.5));
        float _1051 = _1049 * (_1013.y + (-0.5));
        float _1052 = _1049 * (_1013.z + (-0.5));
        float _1059 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1020.x + (-0.5));
        float _1061 = _1059 * (_1020.y + (-0.5));
        float _1062 = _1059 * (_1020.z + (-0.5));
        float _1069 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1027.x + (-0.5));
        float _1071 = _1069 * (_1027.y + (-0.5));
        float _1072 = _1069 * (_1027.z + (-0.5));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = _1040 * 0.5;
        float _1077 = _1050 * 0.5;
        float _1078 = _1060 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_309, _310, _311), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3956 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1103 + 1.0))) + _1108) * _1073;
        float _1118 = _1041 * 0.5;
        float _1119 = _1051 * 0.5;
        float _1120 = _1061 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_309, _310, _311), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3989 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1145 + 1.0))) + _1150) * _1074;
        float _1160 = _1042 * 0.5;
        float _1161 = _1052 * 0.5;
        float _1162 = _1062 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_309, _310, _311), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _4022 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1187 + 1.0))) + _1192) * _1075;
        _1209 = _1042;
        _1210 = _1041;
        _1211 = _1040;
        _1212 = _1052;
        _1213 = _1051;
        _1214 = _1050;
        _1215 = _1062;
        _1216 = _1061;
        _1217 = _1060;
        _1218 = _1075;
        _1219 = _1074;
        _1220 = _1073;
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
    }
    else
    {
        _1209 = _897;
        _1210 = _897;
        _1211 = _897;
        _1212 = _897;
        _1213 = _897;
        _1214 = _897;
        _1215 = _897;
        _1216 = _897;
        _1217 = _897;
        _1218 = _897;
        _1219 = _897;
        _1220 = _897;
        _1221 = 0.0;
        _1222 = 0.0;
        _1223 = 0.0;
    }
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _909)) + _909;
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _910)) + _910;
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _911)) + _911;
    float _1256 = fma(_1235, cbSceneParam._m0[89u].z, fma(_1234, cbSceneParam._m0[89u].y, _1233 * cbSceneParam._m0[89u].x));
    float _1259 = fma(_1235, cbSceneParam._m0[90u].z, fma(_1234, cbSceneParam._m0[90u].y, _1233 * cbSceneParam._m0[90u].x));
    float _1262 = fma(_1235, cbSceneParam._m0[91u].z, fma(_1234, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1233));
    float _1277 = _501 * 0.5;
    float _1278 = _502 * 0.5;
    float _1279 = _503 * 0.5;
    float _1280 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1283 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1286 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1320;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1293 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_896, _900, _903, _906));
        float _1297 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_898, _901, _904, _907));
        float _1301 = dot(vec4(_1277, _1278, _1279, 1.0), vec4(_899, _902, _905, _908));
        float _1308 = dot(vec4(cbModelParam._m0[39u]), vec4(_1277, _1278, _1279, 1.0));
        _1320 = dot(vec3(isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1308) ? 0.0 : (isnan(0.0) ? _1308 : max(0.0, _1308))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1320 = 1.0;
    }
    float _1331;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1322 = dot(vec4(cbModelParam._m0[40u]), vec4(_1277, _1278, _1279, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1322) ? 0.0 : (isnan(0.0) ? _1322 : max(0.0, _1322))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1335 = (_1331 * cbModelParam._m0[1u].x) + (_1320 * (1.0 - cbModelParam._m0[1u].x));
    float _1345 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _312);
    float _1346 = isnan(_1345) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1345 : min(cbModelParam._m0[25u].z, _1345));
    float _1428;
    float _1430;
    float _1432;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1395 = fma(_565, cbModelParam._m0[13u].z, fma(_561, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _557)) + cbModelParam._m0[13u].w;
        float _1399 = fma(_565, cbModelParam._m0[14u].z, fma(_561, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _557)) + cbModelParam._m0[14u].w;
        float _1403 = fma(_565, cbModelParam._m0[15u].z, fma(_561, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _557)) + cbModelParam._m0[15u].w;
        float _1406 = fma(_503, cbModelParam._m0[13u].z, fma(_502, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _501));
        float _1409 = fma(_503, cbModelParam._m0[14u].z, fma(_502, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _501));
        float _1412 = fma(_503, cbModelParam._m0[15u].z, fma(_502, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _501));
        float _1440;
        if (_1406 > 0.0)
        {
            _1440 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1440 = frontier_phi_19_17_ladder;
        }
        float _1616;
        if (_1409 > 0.0)
        {
            _1616 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1616 = frontier_phi_28_24_ladder;
        }
        float _1912;
        if (_1412 > 0.0)
        {
            _1912 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1912 = frontier_phi_40_35_ladder;
        }
        float _1914 = isnan(_1616) ? _1440 : (isnan(_1440) ? _1616 : min(_1440, _1616));
        float _1915 = isnan(_1912) ? _1914 : (isnan(_1914) ? _1912 : min(_1914, _1912));
        float _1919 = (_1915 * _1406) + _1395;
        float _1920 = (_1915 * _1409) + _1399;
        float _1921 = (_1915 * _1412) + _1403;
        float _1922 = _1915 * 9.9999997473787516355514526367188e-05;
        float _1924 = (-1.0) - _1922;
        float _1926 = _1922 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1921 > _1926) || ((_1921 < _1924) || ((_1920 > _1926) || ((_1920 < _1924) || ((_1919 < _1924) || (_1919 > _1926))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1921, cbModelParam._m0[9u].z, fma(_1920, cbModelParam._m0[9u].y, _1919 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1921, cbModelParam._m0[10u].z, fma(_1920, cbModelParam._m0[10u].y, _1919 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1921, cbModelParam._m0[11u].z, fma(_1920, cbModelParam._m0[11u].y, _1919 * cbModelParam._m0[11u].x))), _1346);
            frontier_phi_18_40_ladder = _2066.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2066.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2066.x * cbModelParam._m0[1u].y;
        }
        _1428 = frontier_phi_18_40_ladder_2;
        _1430 = frontier_phi_18_40_ladder_1;
        _1432 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_501, _502, _503), _1346);
        _1428 = _1416.x * cbModelParam._m0[1u].y;
        _1430 = _1416.y * cbModelParam._m0[1u].y;
        _1432 = _1416.z * cbModelParam._m0[1u].y;
    }
    float _1436 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _312);
    float _1437 = isnan(_1436) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1436 : min(cbModelParam._m0[25u].w, _1436));
    float _1530;
    float _1532;
    float _1534;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1494 = fma(_565, cbModelParam._m0[21u].z, fma(_561, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _557)) + cbModelParam._m0[21u].w;
        float _1498 = fma(_565, cbModelParam._m0[22u].z, fma(_561, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _557)) + cbModelParam._m0[22u].w;
        float _1502 = fma(_565, cbModelParam._m0[23u].z, fma(_561, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _557)) + cbModelParam._m0[23u].w;
        float _1505 = fma(_503, cbModelParam._m0[21u].z, fma(_502, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _501));
        float _1508 = fma(_503, cbModelParam._m0[22u].z, fma(_502, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _501));
        float _1511 = fma(_503, cbModelParam._m0[23u].z, fma(_502, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _501));
        float _1621;
        if (_1505 > 0.0)
        {
            _1621 = abs((1.0 - _1494) / _1505);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1494 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1621 = frontier_phi_30_26_ladder;
        }
        float _1939;
        if (_1508 > 0.0)
        {
            _1939 = abs((1.0 - _1498) / _1508);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1498 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1939 = frontier_phi_42_37_ladder;
        }
        float _2277;
        if (_1511 > 0.0)
        {
            _2277 = abs((1.0 - _1502) / _1511);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1502 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2277 = frontier_phi_52_49_ladder;
        }
        float _2279 = isnan(_1939) ? _1621 : (isnan(_1621) ? _1939 : min(_1621, _1939));
        float _2280 = isnan(_2277) ? _2279 : (isnan(_2279) ? _2277 : min(_2279, _2277));
        float _2284 = (_2280 * _1505) + _1494;
        float _2285 = (_2280 * _1508) + _1498;
        float _2286 = (_2280 * _1511) + _1502;
        float _2287 = _2280 * 9.9999997473787516355514526367188e-05;
        float _2288 = (-1.0) - _2287;
        float _2290 = _2287 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2286 > _2290) || ((_2286 < _2288) || ((_2285 > _2290) || ((_2285 < _2288) || ((_2284 < _2288) || (_2284 > _2290))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2286, cbModelParam._m0[17u].z, fma(_2285, cbModelParam._m0[17u].y, _2284 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2286, cbModelParam._m0[18u].z, fma(_2285, cbModelParam._m0[18u].y, _2284 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2286, cbModelParam._m0[19u].z, fma(_2285, cbModelParam._m0[19u].y, _2284 * cbModelParam._m0[19u].x))), _1437);
            frontier_phi_27_52_ladder = _2408.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2408.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2408.x * cbModelParam._m0[1u].z;
        }
        _1530 = frontier_phi_27_52_ladder_2;
        _1532 = frontier_phi_27_52_ladder_1;
        _1534 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_501, _502, _503), _1437);
        _1530 = _1514.x * cbModelParam._m0[1u].z;
        _1532 = _1514.y * cbModelParam._m0[1u].z;
        _1534 = _1514.z * cbModelParam._m0[1u].z;
    }
    float _1547 = (((_528 * _478) + _529) * _493) * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1549 = (((_528 * _480) + _529) * _493) * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1551 = (((_528 * _481) + _529) * _493) * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1554 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1549, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1557 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1549, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1560 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1549, cbSceneParam._m0[91u].y, _1547 * cbSceneParam._m0[91u].x));
    float _1595 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1599 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1603 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1607 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1608 = _1595 / _1607;
    float _1609 = _1599 / _1607;
    float _1610 = _1603 / _1607;
    float _1757;
    float _1758;
    float _1759;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1637 = ((uint(_1610 > cbSceneParam._m0[59u].y) + uint(_1610 > cbSceneParam._m0[59u].x)) + uint(_1610 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1638 = _1637 + 43u;
        uint _1646 = _1637 + 44u;
        uint _1654 = _1637 + 45u;
        uint _1662 = _1637 + 46u;
        float _1673 = fma(_1607, cbSceneParam._m0[_1638].w, fma(_1603, cbSceneParam._m0[_1638].z, fma(_1599, cbSceneParam._m0[_1638].y, _1595 * cbSceneParam._m0[_1638].x)));
        float _1677 = fma(_1607, cbSceneParam._m0[_1646].w, fma(_1603, cbSceneParam._m0[_1646].z, fma(_1599, cbSceneParam._m0[_1646].y, _1595 * cbSceneParam._m0[_1646].x)));
        float _1685 = fma(_1607, cbSceneParam._m0[_1662].w, fma(_1603, cbSceneParam._m0[_1662].z, fma(_1599, cbSceneParam._m0[_1662].y, _1595 * cbSceneParam._m0[_1662].x)));
        float _1690 = cbSceneParam._m0[33u].z * _1685;
        float _1692 = cbSceneParam._m0[33u].w * _1685;
        float _1695 = fma(_1607, cbSceneParam._m0[_1654].w, fma(_1603, cbSceneParam._m0[_1654].z, fma(_1599, cbSceneParam._m0[_1654].y, _1595 * cbSceneParam._m0[_1654].x))) / _1685;
        float _1743 = (cbSceneParam._m0[33u].x - sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610))) * cbSceneParam._m0[33u].y;
        float _4148 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1750 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1690 + _1673) / _1685, (_1692 + _1677) / _1685), _1695), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1692 + _1673) / _1685, (_1677 - _1690) / _1685), _1695), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1673 - _1690) / _1685, (_1677 - _1692) / _1685), _1695), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1673 - _1692) / _1685, (_1690 + _1677) / _1685), _1695), 0.0)).x), vec4(0.25)));
        _1757 = 1.0 - (_1750 * cbSceneParam._m0[34u].x);
        _1758 = 1.0 - (_1750 * cbSceneParam._m0[34u].y);
        _1759 = 1.0 - (_1750 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1757 = 1.0;
        _1758 = 1.0;
        _1759 = 1.0;
    }
    float _1823;
    float _1825;
    float _1827;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1811 = fma(_1607, cbSceneParam._m0[63u].w, fma(_1603, cbSceneParam._m0[63u].z, fma(_1599, cbSceneParam._m0[63u].y, _1595 * cbSceneParam._m0[63u].x)));
        float _1812 = fma(_1607, cbSceneParam._m0[60u].w, fma(_1603, cbSceneParam._m0[60u].z, fma(_1599, cbSceneParam._m0[60u].y, _1595 * cbSceneParam._m0[60u].x))) / _1811;
        float _1813 = fma(_1607, cbSceneParam._m0[61u].w, fma(_1603, cbSceneParam._m0[61u].z, fma(_1599, cbSceneParam._m0[61u].y, _1595 * cbSceneParam._m0[61u].x))) / _1811;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1812 >= cbSceneParam._m0[64u].x) && (_1813 >= cbSceneParam._m0[64u].y)) && (_1812 <= cbSceneParam._m0[64u].z)) && (_1813 <= cbSceneParam._m0[64u].w))
        {
            float _1952 = fma(_1607, cbSceneParam._m0[62u].w, fma(_1603, cbSceneParam._m0[62u].z, fma(_1599, cbSceneParam._m0[62u].y, _1595 * cbSceneParam._m0[62u].x))) / _1811;
            float _1956 = isnan(cbSceneParam._m0[41u].w) ? _1952 : (isnan(_1952) ? cbSceneParam._m0[41u].w : max(_1952, cbSceneParam._m0[41u].w));
            float _1999 = (cbSceneParam._m0[33u].x - sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610))) * cbSceneParam._m0[33u].y;
            float _4164 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
            float _2006 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1812, cbSceneParam._m0[33u].w + _1813), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1812, _1813 - cbSceneParam._m0[33u].z), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1812 - cbSceneParam._m0[33u].z, _1813 - cbSceneParam._m0[33u].w), _1956), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1812 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1813), _1956), 0.0)).x), vec4(0.25)));
            float _2010 = 1.0 - (_2006 * cbSceneParam._m0[34u].x);
            float _2011 = 1.0 - (_2006 * cbSceneParam._m0[34u].y);
            float _2012 = 1.0 - (_2006 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2011) ? _1758 : (isnan(_1758) ? _2011 : min(_1758, _2011));
            frontier_phi_39_38_ladder_1 = isnan(_2010) ? _1757 : (isnan(_1757) ? _2010 : min(_1757, _2010));
            frontier_phi_39_38_ladder_2 = isnan(_2012) ? _1759 : (isnan(_1759) ? _2012 : min(_1759, _2012));
        }
        else
        {
            frontier_phi_39_38_ladder = _1758;
            frontier_phi_39_38_ladder_1 = _1757;
            frontier_phi_39_38_ladder_2 = _1759;
        }
        _1823 = frontier_phi_39_38_ladder_1;
        _1825 = frontier_phi_39_38_ladder;
        _1827 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1823 = _1757;
        _1825 = _1758;
        _1827 = _1759;
    }
    uvec4 _1832 = floatBitsToUint(cbInstanceData._m0[_452 + 5u]);
    uint _1834 = _1832.x * 14u;
    uint _1835 = _1834 + 13u;
    float _1842 = _493 + (-1.0);
    float _1847 = (cbLight._m0[_1835].x * _1842) + 1.0;
    float _1848 = (cbLight._m0[_1835].y * _1842) + 1.0;
    float _1849 = (cbLight._m0[_1835].z * _1842) + 1.0;
    float _1850 = (cbLight._m0[_1835].w * _1842) + 1.0;
    uint _1851 = _1834 + 5u;
    float _1857 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1861 = _1834 + 4u;
    float _1871 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1875 = _1834 | 1u;
    float _1886 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_309, _310, _311));
    float _1889 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_309, _310, _311));
    float _4200 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _4211 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1894 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * 0.3183098733425140380859375;
    float _1896 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.3183098733425140380859375;
    float _1903 = ((cbLight._m0[_1851].x * _1857) * _1896) + (((cbLight._m0[_1861].x * _1823) * _1871) * _1894);
    float _1904 = ((_1857 * cbLight._m0[_1851].y) * _1896) + (((cbLight._m0[_1861].y * _1825) * _1871) * _1894);
    float _1905 = ((_1857 * cbLight._m0[_1851].z) * _1896) + (((cbLight._m0[_1861].z * _1827) * _1871) * _1894);
    uvec4 _1909 = floatBitsToUint(cbLight._m0[_1834 + 12u]);
    bool _1911 = _1909.x == 0u;
    float _2013;
    float _2015;
    float _2017;
    if (_1911)
    {
        _2013 = _1903;
        _2015 = _1904;
        _2017 = _1905;
    }
    else
    {
        uint _2021 = _1834 + 6u;
        float _2037 = (dot(vec3(cbLight._m0[_1834 + 2u].xyz), vec3(_309, _310, _311)) * 0.5) + 0.5;
        float _2038 = _2037 * _2037;
        float _4222 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2039 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2040 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2013 = (((cbLight._m0[_2021].x * 0.3183098733425140380859375) * _2039) * _2040) + _1903;
        _2015 = (((cbLight._m0[_2021].y * 0.3183098733425140380859375) * _2039) * _2040) + _1904;
        _2017 = (((cbLight._m0[_2021].z * 0.3183098733425140380859375) * _2039) * _2040) + _1905;
    }
    bool _2020 = _1909.y == 0u;
    float _2075;
    float _2077;
    float _2079;
    if (_2020)
    {
        _2075 = _2013;
        _2077 = _2015;
        _2079 = _2017;
    }
    else
    {
        uint _2248 = _1834 + 7u;
        float _2264 = (dot(vec3(cbLight._m0[_1834 + 3u].xyz), vec3(_309, _310, _311)) * 0.5) + 0.5;
        float _2265 = _2264 * _2264;
        float _4238 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2266 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2267 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2075 = (((cbLight._m0[_2248].x * 0.3183098733425140380859375) * _2266) * _2267) + _2013;
        _2077 = (((cbLight._m0[_2248].y * 0.3183098733425140380859375) * _2266) * _2267) + _2015;
        _2079 = (((cbLight._m0[_2248].z * 0.3183098733425140380859375) * _2266) * _2267) + _2017;
    }
    uint _2082 = _1834 + 8u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _312) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1834].x + _391;
    float _2098 = cbLight._m0[_1834].y + _392;
    float _2099 = cbLight._m0[_1834].z + _393;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1834].xyz));
    float _4254 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _4265 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _2111 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2112 = dot(vec3(_309, _310, _311), vec3(_2104, _2105, _2106));
    float _4276 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2116 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_2104, _2105, _2106));
    float _4287 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2120 = _2096 * _2096;
    float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
    float _2132 = exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0);
    float _2133 = 0.959999978542327880859375 - _475;
    float _2135 = 0.959999978542327880859375 - _476;
    float _2136 = 0.959999978542327880859375 - _477;
    float _2143 = 1.0 - _2096;
    float _2154 = (0.5 / (((_2111 * ((_2110 * _2143) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2143) + _2096) * _2110))) * _2110;
    float _4298 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2156 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
    uint _2170 = _1834 + 9u;
    float _2181 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _312) * 0.949999988079071044921875);
    float _2182 = _2181 * _2181;
    float _2183 = cbLight._m0[_1875].x + _391;
    float _2184 = cbLight._m0[_1875].y + _392;
    float _2185 = cbLight._m0[_1875].z + _393;
    float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
    float _2190 = _2189 * _2183;
    float _2191 = _2189 * _2184;
    float _2192 = _2189 * _2185;
    float _2193 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1875].xyz));
    float _4309 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2197 = dot(vec3(_309, _310, _311), vec3(_2190, _2191, _2192));
    float _4320 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2201 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2190, _2191, _2192));
    float _4331 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2205 = _2182 * _2182;
    float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
    float _2216 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
    float _2223 = 1.0 - _2182;
    float _2233 = (0.5 / (((_2111 * ((_2196 * _2223) + _2182)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2223) + _2182) * _2196))) * _2196;
    float _4342 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
    float _2245 = (((((_2216 * _2133) + _478) * cbLight._m0[_2170].x) * _2235) * _1857) + ((((cbLight._m0[_2082].x * _1823) * ((_2132 * _2133) + _478)) * _2156) * _1871);
    float _2246 = (((((_2216 * _2135) + _480) * cbLight._m0[_2170].y) * _2235) * _1857) + ((((cbLight._m0[_2082].y * _1825) * ((_2132 * _2135) + _480)) * _2156) * _1871);
    float _2247 = (((((_2216 * _2136) + _481) * cbLight._m0[_2170].z) * _2235) * _1857) + ((((cbLight._m0[_2082].z * _1827) * ((_2132 * _2136) + _481)) * _2156) * _1871);
    float _2303;
    float _2305;
    float _2307;
    if (_1911)
    {
        _2303 = _2245;
        _2305 = _2246;
        _2307 = _2247;
    }
    else
    {
        uint _2309 = _1834 + 2u;
        uint _2313 = _1834 + 10u;
        float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _312) * 0.949999988079071044921875);
        float _2328 = _2327 * _2327;
        float _2329 = cbLight._m0[_2309].x + _391;
        float _2330 = cbLight._m0[_2309].y + _392;
        float _2331 = cbLight._m0[_2309].z + _393;
        float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
        float _2336 = _2335 * _2329;
        float _2337 = _2335 * _2330;
        float _2338 = _2335 * _2331;
        float _2339 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_2309].xyz));
        float _4353 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2343 = dot(vec3(_309, _310, _311), vec3(_2336, _2337, _2338));
        float _4364 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2347 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2336, _2337, _2338));
        float _4375 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2351 = _2328 * _2328;
        float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
        float _2362 = exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0);
        float _2369 = 1.0 - _2328;
        float _2379 = (0.5 / (((_2111 * ((_2342 * _2369) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2369) + _2328) * _2342))) * _2342;
        float _4386 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2381 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
        float _2382 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2303 = (((((_2362 * _2133) + _478) * cbLight._m0[_2313].x) * _2381) * _2382) + _2245;
        _2305 = (((((_2362 * _2135) + _480) * cbLight._m0[_2313].y) * _2381) * _2382) + _2246;
        _2307 = (((((_2362 * _2136) + _481) * cbLight._m0[_2313].z) * _2381) * _2382) + _2247;
    }
    float _2413;
    float _2415;
    float _2417;
    if (_2020)
    {
        _2413 = _2303;
        _2415 = _2305;
        _2417 = _2307;
    }
    else
    {
        uint _2424 = _1834 + 3u;
        uint _2428 = _1834 + 11u;
        float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _312) * 0.949999988079071044921875);
        float _2443 = _2442 * _2442;
        float _2444 = cbLight._m0[_2424].x + _391;
        float _2445 = cbLight._m0[_2424].y + _392;
        float _2446 = cbLight._m0[_2424].z + _393;
        float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
        float _2451 = _2450 * _2444;
        float _2452 = _2450 * _2445;
        float _2453 = _2450 * _2446;
        float _2454 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_2424].xyz));
        float _4402 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2458 = dot(vec3(_309, _310, _311), vec3(_2451, _2452, _2453));
        float _4413 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2462 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2451, _2452, _2453));
        float _4424 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2466 = _2443 * _2443;
        float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
        float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) * 5.0);
        float _2484 = 1.0 - _2443;
        float _2494 = (0.5 / (((_2111 * ((_2457 * _2484) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2111 * _2484) + _2443) * _2457))) * _2457;
        float _4435 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2496 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
        float _2497 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2413 = (((((_2477 * _2133) + _478) * cbLight._m0[_2428].x) * _2496) * _2497) + _2303;
        _2415 = (((((_2477 * _2135) + _480) * cbLight._m0[_2428].y) * _2496) * _2497) + _2305;
        _2417 = (((((_2477 * _2136) + _481) * cbLight._m0[_2428].z) * _2496) * _2497) + _2307;
    }
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    if (_1832.y == 0u)
    {
        uvec4 _2518 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2519 = _2518.x;
        uint _2530 = uint((float(_2518.y) * floor(float(uint(cbSceneParam._m0[85u].y * _413) / _2519))) + floor(float(uint(cbSceneParam._m0[85u].x * _412) / _2519)));
        float _2540 = (log2(_1610 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2541 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        uint _2544 = uint(isnan(14.0) ? _2541 : (isnan(_2541) ? 14.0 : min(_2541, 14.0)));
        uvec4 _2549 = texelFetch(g_lightClusterGridBuffer, int(((_2544 << 2u) + (_2530 << 6u)) >> 2u));
        uint _2550 = _2549.x;
        uint _2551 = _2518.z;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        if (((((1u << ((_2551 >> 4u) & 15u)) + 4294967295u) & _2550) == 0u) || ((_2551 & 240u) == 0u))
        {
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
        }
        else
        {
            float _2659;
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            uint _2862 = 0u;
            uint _2871;
            bool _2872;
            for (;;)
            {
                _2871 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2862 << 2u)) >> 2u)).x;
                _2872 = _2871 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2872)
                {
                    frontier_phi_73_pred = _2861;
                    frontier_phi_73_pred_1 = _2860;
                    frontier_phi_73_pred_2 = _2859;
                    frontier_phi_73_pred_3 = _2858;
                    frontier_phi_73_pred_4 = _2857;
                    frontier_phi_73_pred_5 = _2856;
                }
                else
                {
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    uint _3007;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2871;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    for (;;)
                    {
                        uint _3011 = uint(findLSB(_3007)) + (_2862 << 5u);
                        uint _3008 = (_3007 + 4294967295u) & _3007;
                        uint _3013 = _3011 * 48u;
                        vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3033 = (_3011 * 48u) + 4u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 3u)).x));
                        uint _3052 = (_3011 * 48u) + 8u;
                        vec3 _3063 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x));
                        float _3067 = _3027.x - _1608;
                        float _3068 = _3027.y - _1609;
                        float _3069 = _3027.z - _1610;
                        float _3070 = dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069));
                        float _3073 = inversesqrt(_3070);
                        float _3074 = _3073 * _3067;
                        float _3075 = _3073 * _3068;
                        float _3076 = _3073 * _3069;
                        float _3077 = dot(vec3(_433, _436, _439), vec3(_3074, _3075, _3076));
                        float _3082 = 1.0 - (_3070 * _3027.w);
                        float _4461 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3084 = sqrt(_3070) * _3046.w;
                        float _3087 = 1.39999997615814208984375 / (_3084 + 1.39999997615814208984375);
                        float _3088 = _3087 * _3087;
                        float _3091 = ((1.0 - _3088) * _3077) + _3088;
                        float _3094 = _3084 * _3084;
                        float _3098 = ((isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))) * _3083) / ((_3094 * 0.699999988079071044921875) + 1.0);
                        float _3102 = (-0.0) - _1608;
                        float _3103 = (-0.0) - _1609;
                        float _3104 = (-0.0) - _1610;
                        float _3108 = inversesqrt(dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104)));
                        float _3109 = _3108 * _3102;
                        float _3110 = _3108 * _3103;
                        float _3111 = _3108 * _3104;
                        float _3118 = exp2(log2(1.0 / ((_3094 * 3.5) + 5.0)) * 0.25);
                        float _3119 = 1.0 - _509;
                        float _3126 = sqrt(1.0 - ((1.0 - (_3119 * _3119)) * (1.0 - (_3118 * _3118))));
                        float _3127 = _3126 * _3126;
                        float _3128 = _3127 * _3127;
                        float _3129 = _3109 + _3074;
                        float _3130 = _3110 + _3075;
                        float _3131 = _3111 + _3076;
                        float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                        float _3139 = dot(vec3(_433, _436, _439), vec3(_3109, _3110, _3111));
                        float _4477 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3143 = dot(vec3(_433, _436, _439), vec3(_3135 * _3129, _3135 * _3130, _3135 * _3131));
                        float _4488 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3150 = ((_3146 * _3146) * (_3128 + (-1.0))) + 1.0;
                        float _3151 = _3087 * _3127;
                        float _3152 = _3151 * _3151;
                        float _3155 = ((1.0 - _3152) * _3077) + _3152;
                        float _4499 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3157 = 1.0 - _3127;
                        float _3167 = (0.5 / (((_3156 * ((_3142 * _3157) + _3127)) + 9.9999999392252902907785028219223e-09) + (((_3156 * _3157) + _3127) * _3142))) * _3156;
                        float _4510 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3178 = (((_3128 * 3.1415927410125732421875) * (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) / ((_3150 * _3150) * ((_3094 * 2.1991131305694580078125) + 3.141590118408203125))) * _3083;
                        _2931 = (_3098 * _3046.x) + _3004;
                        _2932 = (_3098 * _3046.y) + _3005;
                        _2933 = (_3098 * _3046.z) + _3006;
                        _2928 = (_3178 * _3063.x) + _3001;
                        _2929 = (_3178 * _3063.y) + _3002;
                        _2930 = (_3178 * _3063.z) + _3003;
                        if (_3008 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _3008;
                        }
                    }
                    frontier_phi_73_pred = _2933;
                    frontier_phi_73_pred_1 = _2932;
                    frontier_phi_73_pred_2 = _2931;
                    frontier_phi_73_pred_3 = _2930;
                    frontier_phi_73_pred_4 = _2929;
                    frontier_phi_73_pred_5 = _2928;
                }
                _2669 = frontier_phi_73_pred;
                _2667 = frontier_phi_73_pred_1;
                _2665 = frontier_phi_73_pred_2;
                _2663 = frontier_phi_73_pred_3;
                _2661 = frontier_phi_73_pred_4;
                _2659 = frontier_phi_73_pred_5;
                uint _2863 = _2862 + 1u;
                if (_2863 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2856 = _2659;
                    _2857 = _2661;
                    _2858 = _2663;
                    _2859 = _2665;
                    _2860 = _2667;
                    _2861 = _2669;
                    _2862 = _2863;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
        }
        uvec4 _2672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2673 = _2672.z;
        uint _2675 = (_2673 >> 8u) & 15u;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        if (((4294967295u << _2675) & _2550) == 0u)
        {
            _2824 = _2658;
            _2826 = _2660;
            _2828 = _2662;
            _2830 = _2664;
            _2832 = _2666;
            _2834 = _2668;
        }
        else
        {
            float _2849 = inversesqrt(dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610)));
            float _2850 = _2849 * _1608;
            float _2851 = _2849 * _1609;
            float _2852 = _2849 * _1610;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2675 < ((_2673 >> 12u) & 15u))
            {
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2984 = _2658;
                float _2985 = _2660;
                float _2986 = _2662;
                float _2987 = _2664;
                float _2988 = _2666;
                float _2989 = _2668;
                uint _2990 = _2675;
                uint _2999;
                bool _3000;
                for (;;)
                {
                    _2999 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                    _3000 = _2999 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3000)
                    {
                        frontier_phi_84_pred = _2988;
                        frontier_phi_84_pred_1 = _2987;
                        frontier_phi_84_pred_2 = _2986;
                        frontier_phi_84_pred_3 = _2985;
                        frontier_phi_84_pred_4 = _2984;
                        frontier_phi_84_pred_5 = _2989;
                    }
                    else
                    {
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3205 = _2984;
                        float _3206 = _2985;
                        float _3207 = _2986;
                        float _3208 = _2987;
                        float _3209 = _2988;
                        float _3210 = _2989;
                        uint _3211 = _2999;
                        uint _3212;
                        vec4 _3237;
                        float _3238;
                        vec4 _3253;
                        vec3 _3265;
                        vec4 _3281;
                        vec4 _3297;
                        float _3344;
                        bool _3345;
                        for (;;)
                        {
                            uint _3222 = ((_2990 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3211));
                            _3212 = (_3211 + 4294967295u) & _3211;
                            uint _3224 = _3222 * 40u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3238 = _3237.w;
                            uint _3240 = (_3222 * 40u) + 4u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3222 * 40u) + 8u;
                            _3265 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x));
                            uint _3268 = (_3222 * 40u) + 16u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3284 = (_3222 * 40u) + 20u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3300 = (_3222 * 40u) + 24u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3319 = (_3222 * 40u) + 28u;
                            vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3344 = fma(_1610, _3332.z, fma(_1609, _3332.y, _3332.x * _1608)) + _3332.w;
                            _3345 = !((fma(_1610, _3313.z, fma(_1609, _3313.y, _3313.x * _1608)) + _3313.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3345)
                            {
                                float _3372 = _3237.x - _1608;
                                float _3373 = _3237.y - _1609;
                                float _3374 = _3237.z - _1610;
                                float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                                float _3378 = inversesqrt(_3375);
                                float _3379 = _3378 * _3372;
                                float _3380 = _3378 * _3373;
                                float _3381 = _3378 * _3374;
                                float _3385 = 1.0 - (_3375 / (_3238 * _3238));
                                float _4521 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3390 = sqrt(_3375) * _3253.w;
                                float _3392 = 1.39999997615814208984375 / (_3390 + 1.39999997615814208984375);
                                float _3393 = _3392 * _3392;
                                float _3396 = ((1.0 - _3393) * dot(vec3(_3379, _3380, _3381), vec3(_433, _436, _439))) + _3393;
                                float _3399 = _3390 * _3390;
                                float _3403 = (fma(_1610, _3281.z, fma(_1609, _3281.y, _3281.x * _1608)) + _3281.w) / _3344;
                                float _3404 = (fma(_1610, _3297.z, fma(_1609, _3297.y, _3297.x * _1608)) + _3297.w) / _3344;
                                float _3408 = 1.0 - dot(vec2(_3403, _3404), vec2(_3403, _3404));
                                float _4537 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3410 = _3409 * (((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3386) / ((_3399 * 0.699999988079071044921875) + 1.0));
                                float _3422 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                                float _3423 = 1.0 - _509;
                                float _3430 = sqrt(1.0 - ((1.0 - (_3423 * _3423)) * (1.0 - (_3422 * _3422))));
                                float _3431 = _3430 * _3430;
                                float _3432 = _3431 * _3431;
                                float _3433 = _3379 - _2850;
                                float _3434 = _3380 - _2851;
                                float _3435 = _3381 - _2852;
                                float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                                float _3443 = dot(vec3(_433, _436, _439), vec3((-0.0) - _2850, (-0.0) - _2851, (-0.0) - _2852));
                                float _4548 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3446 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3447 = dot(vec3(_433, _436, _439), vec3(_3439 * _3433, _3439 * _3434, _3439 * _3435));
                                float _4559 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3454 = ((_3450 * _3450) * (_3432 + (-1.0))) + 1.0;
                                float _3455 = _3392 * _3431;
                                float _3456 = _3455 * _3455;
                                float _3462 = ((1.0 - _3456) * dot(vec3(_433, _436, _439), vec3(_3379, _3380, _3381))) + _3456;
                                float _4570 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3464 = 1.0 - _3431;
                                float _3474 = (0.5 / (((_3463 * ((_3446 * _3464) + _3431)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3431) * _3446))) * _3463;
                                float _4581 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3484 = (_3409 * _3386) * (((_3432 * 3.1415927410125732421875) * (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) / ((_3454 * _3454) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3410 * _3253.y;
                                frontier_phi_90_pred_1 = _3410 * _3253.x;
                                frontier_phi_90_pred_2 = _3484 * _3265.z;
                                frontier_phi_90_pred_3 = _3484 * _3265.y;
                                frontier_phi_90_pred_4 = _3484 * _3265.x;
                                frontier_phi_90_pred_5 = _3410 * _3253.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3492 = frontier_phi_90_pred;
                            _3491 = frontier_phi_90_pred_1;
                            _3490 = frontier_phi_90_pred_2;
                            _3489 = frontier_phi_90_pred_3;
                            _3488 = frontier_phi_90_pred_4;
                            _3493 = frontier_phi_90_pred_5;
                            _3195 = _3491 + _3208;
                            _3196 = _3492 + _3209;
                            _3197 = _3493 + _3210;
                            _3192 = _3488 + _3205;
                            _3193 = _3489 + _3206;
                            _3194 = _3490 + _3207;
                            if (_3212 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3212;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3196;
                        frontier_phi_84_pred_1 = _3195;
                        frontier_phi_84_pred_2 = _3194;
                        frontier_phi_84_pred_3 = _3193;
                        frontier_phi_84_pred_4 = _3192;
                        frontier_phi_84_pred_5 = _3197;
                    }
                    _2833 = frontier_phi_84_pred;
                    _2831 = frontier_phi_84_pred_1;
                    _2829 = frontier_phi_84_pred_2;
                    _2827 = frontier_phi_84_pred_3;
                    _2825 = frontier_phi_84_pred_4;
                    _2835 = frontier_phi_84_pred_5;
                    uint _2991 = _2990 + 1u;
                    if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2984 = _2825;
                        _2985 = _2827;
                        _2986 = _2829;
                        _2987 = _2831;
                        _2988 = _2833;
                        _2989 = _2835;
                        _2990 = _2991;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2835;
                frontier_phi_65_66_ladder_1 = _2831;
                frontier_phi_65_66_ladder_2 = _2833;
                frontier_phi_65_66_ladder_3 = _2827;
                frontier_phi_65_66_ladder_4 = _2825;
                frontier_phi_65_66_ladder_5 = _2829;
            }
            else
            {
                frontier_phi_65_66_ladder = _2668;
                frontier_phi_65_66_ladder_1 = _2664;
                frontier_phi_65_66_ladder_2 = _2666;
                frontier_phi_65_66_ladder_3 = _2660;
                frontier_phi_65_66_ladder_4 = _2658;
                frontier_phi_65_66_ladder_5 = _2662;
            }
            _2824 = frontier_phi_65_66_ladder_4;
            _2826 = frontier_phi_65_66_ladder_3;
            _2828 = frontier_phi_65_66_ladder_5;
            _2830 = frontier_phi_65_66_ladder_1;
            _2832 = frontier_phi_65_66_ladder_2;
            _2834 = frontier_phi_65_66_ladder;
        }
        float _2839 = isnan(1.0) ? _493 : (isnan(_493) ? 1.0 : min(_493, 1.0));
        _2562 = (_2839 * _2830) + _2075;
        _2564 = (_2839 * _2832) + _2077;
        _2566 = (_2839 * _2834) + _2079;
        _2568 = ((_2824 * _478) * _2839) + _2413;
        _2570 = ((_2826 * _480) * _2839) + _2415;
        _2572 = ((_2828 * _481) * _2839) + _2417;
    }
    else
    {
        _2562 = _2075;
        _2564 = _2077;
        _2566 = _2079;
        _2568 = _2413;
        _2570 = _2415;
        _2572 = _2417;
    }
    uint _2578 = _454 + uint(cbMatDynParam._m0[0u].w);
    float _2584 = (_288.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2578].x;
    float _2585 = (_288.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2578].y;
    float _2586 = (_288.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2578].z;
    float _4597 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4608 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4619 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _2603 = (((isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2562 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _493))) + ((_2568 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1335)) * cbPerFrame._m0[3u].x)) + _2584;
    float _2605 = (_2585 + ((_2570 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1335)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2564 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _493)));
    float _2607 = (_2586 + ((_2572 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1335)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2566 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _493)));
    float _2608 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2609 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2610 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2616 = cbMtdParam._m0[2u].x * _2584;
    float _2617 = cbMtdParam._m0[2u].y * _2585;
    float _2618 = cbMtdParam._m0[2u].z * _2586;
    float _4645 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2620 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    uint _2621 = _452 + 6u;
    float _2629 = _412 / cbSceneParam._m0[86u].x;
    float _2630 = _413 / cbSceneParam._m0[86u].y;
    vec4 _2644 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2629, _2630, (log2((isnan(cbSceneParam._m0[77u].w) ? _332 : (isnan(_332) ? cbSceneParam._m0[77u].w : min(_332, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2646 = _2644.x;
    float _2647 = _2644.y;
    float _2648 = _2644.z;
    float _2649 = _2644.w;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    if (_332 > cbSceneParam._m0[78u].w)
    {
        float _2683 = isnan(_332) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _332 : min(cbSceneParam._m0[80u].w, _332));
        float _2684 = _2683 / _332;
        float _2695 = _2684 * _384;
        float _2696 = _385 * _2684;
        float _2697 = (-0.0) - _2696;
        float _2698 = _2684 * _386;
        float _2700 = (cbSceneParam._m0[77u].w * _2697) / _2683;
        float _2701 = _2700 + cbSceneParam._m0[79u].w;
        float _2702 = cbSceneParam._m0[79u].w - _2696;
        float _2708 = sqrt(((_2695 * _2695) + (_2696 * _2696)) + (_2698 * _2698));
        float _2711 = (1.0 - (cbSceneParam._m0[77u].w / _2683)) * _2708;
        float _2716 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2718 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2941;
        if (abs((_2697 - _2700) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2941 = ((((_2701 > 0.0) ? exp2(_2716 * _2701) : (2.0 - exp2(_2718 * _2701))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2711;
        }
        else
        {
            float _2885 = 1.0 / cbSceneParam._m0[80u].x;
            float _2886 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : max(_2701, _2702));
            float _2887 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : min(_2701, _2702));
            float _2896 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : min(_2886, 0.0));
            float _2897 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : min(_2887, 0.0));
            _2941 = ((abs(_2708 / _2697) * cbSceneParam._m0[80u].y) * ((((_2896 - _2897) * 2.0) - ((exp2(_2716 * (isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0)))) - exp2(_2716 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0))))) * _2885)) - ((exp2(_2718 * _2896) - exp2(_2718 * _2897)) * _2885))) + (_2711 * cbSceneParam._m0[80u].z);
        }
        vec4 _2943 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2629, _2630, 1.0), 0.0);
        float _2952 = exp2((_2941 * (-1.44269502162933349609375)) * (1.0 - _2943.w));
        float _2953 = log2(_2952);
        float _2969 = log2(_2649);
        _2720 = (exp2(_2969 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].x)) * _2943.x) / cbSceneParam._m0[78u].x)) + _2646;
        _2722 = (exp2(_2969 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].y)) * _2943.y) / cbSceneParam._m0[78u].y)) + _2647;
        _2724 = (exp2(_2969 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].z)) * _2943.z) / cbSceneParam._m0[78u].z)) + _2648;
        _2726 = _2952 * _2649;
    }
    else
    {
        _2720 = _2646;
        _2722 = _2647;
        _2724 = _2648;
        _2726 = _2649;
    }
    bool _2979;
    float _2783;
    vec4 _2786;
    float _2788;
    vec4 _2790;
    float _2798;
    float _2799;
    float _2800;
    float _2804;
    float _2808;
    float _2812;
    float _2813;
    bool _2823;
    for (;;)
    {
        bool _2739 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2740 = log2(_2726);
        float _2744 = exp2(_2740 * cbSceneParam._m0[78u].x);
        float _2745 = exp2(_2740 * cbSceneParam._m0[78u].y);
        float _2746 = exp2(_2740 * cbSceneParam._m0[78u].z);
        float _2747 = _2744 * _2608;
        float _2748 = _2745 * _2609;
        float _2749 = _2746 * _2610;
        vec4 _2757 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_412, _413));
        float _2759 = _2757.x;
        float _2780 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2759)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2759))) - _332) * 0.100000001490116119384765625;
        float _4696 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2782 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        _2783 = _2782 * cbInstanceData._m0[_2621].w;
        float _2784 = _400 + (-0.5);
        _2786 = cbMtdParam._m0[1u];
        _2788 = _2786.y * _2784;
        _2790 = cbMatDynParam._m0[0u];
        float _2797 = (roundEven(_2790.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2798 = _2797 * (_2739 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2720)));
        _2799 = _2797 * (_2739 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2722)));
        _2800 = _2797 * (_2739 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2724)));
        _2804 = (((_2616 * _2620) * _2744) * _2782) * _2797;
        _2808 = (((_2617 * _2620) * _2745) * _2782) * _2797;
        _2812 = (((_2618 * _2620) * _2746) * _2782) * _2797;
        _2813 = _2784 * 0.999000012874603271484375;
        _2823 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2823)
        {
            if ((cbInstanceData._m0[_452 + 7u].x + _2813) < 0.5)
            {
                _2979 = true;
                break;
            }
        }
        uint _2920 = _454 + uint(_2790.w);
        if ((cbInstanceData._m0[_2920].w < 1.0) && ((cbInstanceData._m0[_2920].w + _2813) < 0.5))
        {
            _2979 = true;
            break;
        }
        if ((_2788 + 1.0) < _2786.x)
        {
            _2979 = true;
            break;
        }
        _2979 = false;
        break;
    }
    float _3183;
    if (_2979)
    {
        discard_state = true;
        _3183 = 0.0;
    }
    else
    {
        _3183 = _2783;
    }
    SV_Target.x = _2798;
    SV_Target.y = _2799;
    SV_Target.z = _2800;
    SV_Target.w = _3183;
    SV_Target_1.x = _2804;
    SV_Target_1.y = _2808;
    SV_Target_1.z = _2812;
    SV_Target_1.w = _2783;
    discard_exit();
}


