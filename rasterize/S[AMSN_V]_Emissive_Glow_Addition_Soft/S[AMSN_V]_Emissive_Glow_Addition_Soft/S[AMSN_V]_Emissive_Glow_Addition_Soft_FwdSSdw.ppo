#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _850;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _231 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _231.x;
    float _235 = _231.y;
    float _236 = _231.z;
    vec4 _252 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _252.z;
    float _260 = (_252.x * 2.0) + (-1.0);
    float _262 = (_252.y * 2.0) + (-1.0);
    float _263 = dot(vec2(_260, _262), vec2(_260, _262));
    float _3286 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _269 = sqrt(1.0 - (isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0))));
    vec4 _282 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _292 = fma(_269, _215, fma(_262, _207 * TANGENT.x, (_193 * _186) * _260));
    float _295 = fma(_269, _216, fma(_262, _207 * TANGENT.y, (_193 * _187) * _260));
    float _298 = fma(_269, _217, fma(_262, _207 * TANGENT.z, (_193 * _188) * _260));
    float _302 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _303 = _302 * _292;
    float _304 = _302 * _295;
    float _305 = _302 * _298;
    float _3297 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _306 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _3308 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3319 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3330 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3341 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _310 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _326 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    float _393 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _394 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _415 = fma(_305, cbSceneParam._m0[5u].z, fma(_304, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _303));
    float _418 = fma(_305, cbSceneParam._m0[6u].z, fma(_304, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _303));
    float _421 = fma(_305, cbSceneParam._m0[7u].z, fma(_304, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _303));
    uint _434 = uint(roundEven(NORMAL.w)) * 13u;
    uint _436 = _434 + 9u;
    uint _437 = _436 + uint(cbMatDynParam._m0[0u].w);
    float _443 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0)))) * cbInstanceData._m0[_437].x;
    float _444 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * cbInstanceData._m0[_437].y;
    float _445 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0)))) * cbInstanceData._m0[_437].z;
    float _3352 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _3363 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _3374 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _449 = 1.0 - _310;
    float _450 = _446 * _449;
    float _451 = _447 * _449;
    float _452 = _448 * _449;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _310;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _310;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _310;
    float _460 = _457 + 0.039999999105930328369140625;
    float _462 = _458 + 0.039999999105930328369140625;
    float _463 = _459 + 0.039999999105930328369140625;
    vec4 _472 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _393, cbSceneParam._m0[86u].y * _394));
    float _475 = _472.x * TEXCOORD.z;
    float _476 = dot(vec3(_303, _304, _305), vec3(_385, _386, _387));
    float _479 = _476 * 2.0;
    float _483 = (_479 * _303) - _385;
    float _484 = (_479 * _304) - _386;
    float _485 = (_479 * _305) - _387;
    float _489 = abs(dot(vec3(_385, _386, _387), vec3(_303, _304, _305)));
    float _3385 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _491 = sqrt(_306);
    float _504 = exp2((_491 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_491 * 3.0));
    float _510 = (1.0 - _504) * ((_491 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _511 = _504 * _491;
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _849;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _574 = fma(_547, cbModelParam._m0[26u].z, fma(_543, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _539));
        float _578 = fma(_547, cbModelParam._m0[27u].z, fma(_543, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _539));
        float _582 = fma(_547, cbModelParam._m0[28u].z, fma(_543, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _539));
        float _607 = _539 + _303;
        float _608 = _543 + _304;
        float _609 = _547 + _305;
        float _619 = fma(_609, cbModelParam._m0[26u].z, fma(_608, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _607)) - _574;
        float _620 = fma(_609, cbModelParam._m0[27u].z, fma(_608, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _607)) - _578;
        float _621 = fma(_609, cbModelParam._m0[28u].z, fma(_608, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _607)) - _582;
        float _625 = inversesqrt(dot(vec3(_619, _620, _621), vec3(_619, _620, _621)));
        float _638 = ((_625 * _619) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_574 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _639 = ((_625 * _620) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_578 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _640 = ((_625 * _621) / cbModelParam._m0[34u].z) + ((((((_582 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        float _677 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_643.x + (-0.5));
        float _679 = _677 * (_643.y + (-0.5));
        float _680 = _677 * (_643.z + (-0.5));
        float _687 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_650.x + (-0.5));
        float _689 = _687 * (_650.y + (-0.5));
        float _690 = _687 * (_650.z + (-0.5));
        float _697 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_657.x + (-0.5));
        float _699 = _697 * (_657.y + (-0.5));
        float _700 = _697 * (_657.z + (-0.5));
        float _707 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_664.x + (-0.5));
        float _709 = _707 * (_664.y + (-0.5));
        float _710 = _707 * (_664.z + (-0.5));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = _678 * 0.5;
        float _715 = _688 * 0.5;
        float _716 = _698 * 0.5;
        float _717 = dot(vec3(_714, _715, _716), vec3(_714, _715, _716));
        float _722 = (_717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_717);
        float _731 = (dot(vec3(_303, _304, _305), vec3(_722 * _714, _722 * _715, _722 * _716)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _741 = sqrt(((_715 * _715) + (_714 * _714)) + (_716 * _716)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _743 = _742 * 2.0;
        float _747 = (1.0 - _742) / (_742 + 1.0);
        float _3433 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _757 = ((((1.0 - _748) * (_743 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_743 + 1.0))) + _748) * _711;
        float _758 = _679 * 0.5;
        float _759 = _689 * 0.5;
        float _760 = _699 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _774 = (dot(vec3(_303, _304, _305), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _783 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3466 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_785 + 1.0))) + _790) * _712;
        float _800 = _680 * 0.5;
        float _801 = _690 * 0.5;
        float _802 = _700 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _816 = (dot(vec3(_303, _304, _305), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _825 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3499 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_827 + 1.0))) + _832) * _713;
        _849 = _680;
        _851 = _679;
        _852 = _678;
        _853 = _690;
        _854 = _689;
        _855 = _688;
        _856 = _700;
        _857 = _699;
        _858 = _698;
        _859 = _713;
        _860 = _712;
        _861 = _711;
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
    }
    else
    {
        _849 = _850;
        _851 = _850;
        _852 = _850;
        _853 = _850;
        _854 = _850;
        _855 = _850;
        _856 = _850;
        _857 = _850;
        _858 = _850;
        _859 = _850;
        _860 = _850;
        _861 = _850;
        _862 = 0.0;
        _863 = 0.0;
        _864 = 0.0;
    }
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _890 = fma(_547, cbModelParam._m0[30u].z, fma(_543, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _539));
        float _894 = fma(_547, cbModelParam._m0[31u].z, fma(_543, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _539));
        float _898 = fma(_547, cbModelParam._m0[32u].z, fma(_543, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _539));
        float _921 = _539 + _303;
        float _922 = _543 + _304;
        float _923 = _547 + _305;
        float _933 = fma(_923, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _921)) - _890;
        float _934 = fma(_923, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _921)) - _894;
        float _935 = fma(_923, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _921)) - _898;
        float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
        float _952 = ((_939 * _933) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_890 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_939 * _934) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_894 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_939 * _935) / cbModelParam._m0[35u].z) + ((((((_898 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        float _989 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_956.x + (-0.5));
        float _991 = _989 * (_956.y + (-0.5));
        float _992 = _989 * (_956.z + (-0.5));
        float _999 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_963.x + (-0.5));
        float _1001 = _999 * (_963.y + (-0.5));
        float _1002 = _999 * (_963.z + (-0.5));
        float _1009 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_970.x + (-0.5));
        float _1011 = _1009 * (_970.y + (-0.5));
        float _1012 = _1009 * (_970.z + (-0.5));
        float _1019 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_977.x + (-0.5));
        float _1021 = _1019 * (_977.y + (-0.5));
        float _1022 = _1019 * (_977.z + (-0.5));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = _990 * 0.5;
        float _1027 = _1000 * 0.5;
        float _1028 = _1010 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_303, _304, _305), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3562 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_1053 + 1.0))) + _1058) * _1023;
        float _1068 = _991 * 0.5;
        float _1069 = _1001 * 0.5;
        float _1070 = _1011 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_303, _304, _305), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3595 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_1095 + 1.0))) + _1100) * _1024;
        float _1110 = _992 * 0.5;
        float _1111 = _1002 * 0.5;
        float _1112 = _1012 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_303, _304, _305), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3628 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1137 + 1.0))) + _1142) * _1025;
        _1159 = _992;
        _1160 = _991;
        _1161 = _990;
        _1162 = _1002;
        _1163 = _1001;
        _1164 = _1000;
        _1165 = _1012;
        _1166 = _1011;
        _1167 = _1010;
        _1168 = _1025;
        _1169 = _1024;
        _1170 = _1023;
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
    }
    else
    {
        _1159 = _850;
        _1160 = _850;
        _1161 = _850;
        _1162 = _850;
        _1163 = _850;
        _1164 = _850;
        _1165 = _850;
        _1166 = _850;
        _1167 = _850;
        _1168 = _850;
        _1169 = _850;
        _1170 = _850;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _863)) + _863;
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _864)) + _864;
    float _1206 = fma(_1185, cbSceneParam._m0[89u].z, fma(_1184, cbSceneParam._m0[89u].y, _1183 * cbSceneParam._m0[89u].x));
    float _1209 = fma(_1185, cbSceneParam._m0[90u].z, fma(_1184, cbSceneParam._m0[90u].y, _1183 * cbSceneParam._m0[90u].x));
    float _1212 = fma(_1185, cbSceneParam._m0[91u].z, fma(_1184, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1183));
    float _1227 = _483 * 0.5;
    float _1228 = _484 * 0.5;
    float _1229 = _485 * 0.5;
    float _1230 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1233 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1236 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1270;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1243 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_849, _853, _856, _859));
        float _1247 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_851, _854, _857, _860));
        float _1251 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_852, _855, _858, _861));
        float _1258 = dot(vec4(cbModelParam._m0[39u]), vec4(_1227, _1228, _1229, 1.0));
        _1270 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1258) ? 0.0 : (isnan(0.0) ? _1258 : max(0.0, _1258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1270 = 1.0;
    }
    float _1281;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1272 = dot(vec4(cbModelParam._m0[40u]), vec4(_1227, _1228, _1229, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1272) ? 0.0 : (isnan(0.0) ? _1272 : max(0.0, _1272))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1285 = (_1281 * cbModelParam._m0[1u].x) + (_1270 * (1.0 - cbModelParam._m0[1u].x));
    float _1295 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _306);
    float _1296 = isnan(_1295) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1295 : min(cbModelParam._m0[25u].z, _1295));
    float _1378;
    float _1380;
    float _1382;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1345 = fma(_547, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _539)) + cbModelParam._m0[13u].w;
        float _1349 = fma(_547, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _539)) + cbModelParam._m0[14u].w;
        float _1353 = fma(_547, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _539)) + cbModelParam._m0[15u].w;
        float _1356 = fma(_485, cbModelParam._m0[13u].z, fma(_484, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _483));
        float _1359 = fma(_485, cbModelParam._m0[14u].z, fma(_484, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _483));
        float _1362 = fma(_485, cbModelParam._m0[15u].z, fma(_484, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _483));
        float _1390;
        if (_1356 > 0.0)
        {
            _1390 = abs((1.0 - _1345) / _1356);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1345 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1390 = frontier_phi_16_14_ladder;
        }
        float _1619;
        if (_1359 > 0.0)
        {
            _1619 = abs((1.0 - _1349) / _1359);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1349 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1619 = frontier_phi_25_21_ladder;
        }
        float _1876;
        if (_1362 > 0.0)
        {
            _1876 = abs((1.0 - _1353) / _1362);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1353 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1876 = frontier_phi_37_32_ladder;
        }
        float _1878 = isnan(_1619) ? _1390 : (isnan(_1390) ? _1619 : min(_1390, _1619));
        float _1879 = isnan(_1876) ? _1878 : (isnan(_1878) ? _1876 : min(_1878, _1876));
        float _1883 = (_1879 * _1356) + _1345;
        float _1884 = (_1879 * _1359) + _1349;
        float _1885 = (_1879 * _1362) + _1353;
        float _1886 = _1879 * 9.9999997473787516355514526367188e-05;
        float _1888 = (-1.0) - _1886;
        float _1890 = _1886 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1885 > _1890) || ((_1885 < _1888) || ((_1884 > _1890) || ((_1884 < _1888) || ((_1883 < _1888) || (_1883 > _1890))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2013 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1885, cbModelParam._m0[9u].z, fma(_1884, cbModelParam._m0[9u].y, _1883 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1885, cbModelParam._m0[10u].z, fma(_1884, cbModelParam._m0[10u].y, _1883 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1885, cbModelParam._m0[11u].z, fma(_1884, cbModelParam._m0[11u].y, _1883 * cbModelParam._m0[11u].x))), _1296);
            frontier_phi_15_37_ladder = _2013.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2013.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2013.x * cbModelParam._m0[1u].y;
        }
        _1378 = frontier_phi_15_37_ladder_2;
        _1380 = frontier_phi_15_37_ladder_1;
        _1382 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1366 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_483, _484, _485), _1296);
        _1378 = _1366.x * cbModelParam._m0[1u].y;
        _1380 = _1366.y * cbModelParam._m0[1u].y;
        _1382 = _1366.z * cbModelParam._m0[1u].y;
    }
    float _1386 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _306);
    float _1387 = isnan(_1386) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1386 : min(cbModelParam._m0[25u].w, _1386));
    float _1480;
    float _1482;
    float _1484;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1444 = fma(_547, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _539)) + cbModelParam._m0[21u].w;
        float _1448 = fma(_547, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _539)) + cbModelParam._m0[22u].w;
        float _1452 = fma(_547, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _539)) + cbModelParam._m0[23u].w;
        float _1455 = fma(_485, cbModelParam._m0[21u].z, fma(_484, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _483));
        float _1458 = fma(_485, cbModelParam._m0[22u].z, fma(_484, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _483));
        float _1461 = fma(_485, cbModelParam._m0[23u].z, fma(_484, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _483));
        float _1624;
        if (_1455 > 0.0)
        {
            _1624 = abs((1.0 - _1444) / _1455);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1444 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1624 = frontier_phi_27_23_ladder;
        }
        float _1903;
        if (_1458 > 0.0)
        {
            _1903 = abs((1.0 - _1448) / _1458);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1448 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1903 = frontier_phi_39_34_ladder;
        }
        float _2116;
        if (_1461 > 0.0)
        {
            _2116 = abs((1.0 - _1452) / _1461);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1452 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2116 = frontier_phi_48_45_ladder;
        }
        float _2118 = isnan(_1903) ? _1624 : (isnan(_1624) ? _1903 : min(_1624, _1903));
        float _2119 = isnan(_2116) ? _2118 : (isnan(_2118) ? _2116 : min(_2118, _2116));
        float _2123 = (_2119 * _1455) + _1444;
        float _2124 = (_2119 * _1458) + _1448;
        float _2125 = (_2119 * _1461) + _1452;
        float _2126 = _2119 * 9.9999997473787516355514526367188e-05;
        float _2127 = (-1.0) - _2126;
        float _2129 = _2126 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2125 > _2129) || ((_2125 < _2127) || ((_2124 > _2129) || ((_2124 < _2127) || ((_2123 < _2127) || (_2123 > _2129))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2125, cbModelParam._m0[17u].z, fma(_2124, cbModelParam._m0[17u].y, _2123 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2125, cbModelParam._m0[18u].z, fma(_2124, cbModelParam._m0[18u].y, _2123 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2125, cbModelParam._m0[19u].z, fma(_2124, cbModelParam._m0[19u].y, _2123 * cbModelParam._m0[19u].x))), _1387);
            frontier_phi_24_48_ladder = _2352.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2352.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2352.x * cbModelParam._m0[1u].z;
        }
        _1480 = frontier_phi_24_48_ladder_2;
        _1482 = frontier_phi_24_48_ladder_1;
        _1484 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1464 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_483, _484, _485), _1387);
        _1480 = _1464.x * cbModelParam._m0[1u].z;
        _1482 = _1464.y * cbModelParam._m0[1u].z;
        _1484 = _1464.z * cbModelParam._m0[1u].z;
    }
    float _1497 = (((_510 * _460) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1499 = (((_510 * _462) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1501 = (((_510 * _463) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1484 - _1382)) + _1382);
    float _1504 = fma(_1501, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1497 * cbSceneParam._m0[89u].x));
    float _1507 = fma(_1501, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1497 * cbSceneParam._m0[90u].x));
    float _1510 = fma(_1501, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, _1497 * cbSceneParam._m0[91u].x));
    vec4 _1518 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_393, _394));
    float _1520 = _1518.w;
    float _1532 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1520);
    float _1533 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1520);
    float _1534 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1520);
    uvec4 _1538 = floatBitsToUint(cbInstanceData._m0[_434 + 5u]);
    uint _1540 = _1538.x * 14u;
    uint _1541 = _1540 + 13u;
    float _1548 = _475 + (-1.0);
    float _1553 = (cbLight._m0[_1541].x * _1548) + 1.0;
    float _1554 = (cbLight._m0[_1541].y * _1548) + 1.0;
    float _1555 = (cbLight._m0[_1541].z * _1548) + 1.0;
    float _1556 = (cbLight._m0[_1541].w * _1548) + 1.0;
    uint _1557 = _1540 + 5u;
    float _1563 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
    uint _1567 = _1540 + 4u;
    float _1577 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
    uint _1581 = _1540 | 1u;
    float _1592 = dot(vec3(cbLight._m0[_1540].xyz), vec3(_303, _304, _305));
    float _1595 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_303, _304, _305));
    float _3764 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _3775 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1600 = (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * 0.3183098733425140380859375;
    float _1602 = (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.3183098733425140380859375;
    float _1609 = ((cbLight._m0[_1557].x * _1563) * _1602) + (((cbLight._m0[_1567].x * _1532) * _1577) * _1600);
    float _1610 = ((_1563 * cbLight._m0[_1557].y) * _1602) + (((cbLight._m0[_1567].y * _1533) * _1577) * _1600);
    float _1611 = ((_1563 * cbLight._m0[_1557].z) * _1602) + (((cbLight._m0[_1567].z * _1534) * _1577) * _1600);
    uvec4 _1616 = floatBitsToUint(cbLight._m0[_1540 + 12u]);
    bool _1618 = _1616.x == 0u;
    float _1629;
    float _1631;
    float _1633;
    if (_1618)
    {
        _1629 = _1609;
        _1631 = _1610;
        _1633 = _1611;
    }
    else
    {
        uint _1637 = _1540 + 6u;
        float _1653 = (dot(vec3(cbLight._m0[_1540 + 2u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1654 = _1653 * _1653;
        float _3786 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1656 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _1629 = (((cbLight._m0[_1637].x * 0.3183098733425140380859375) * _1655) * _1656) + _1609;
        _1631 = (((cbLight._m0[_1637].y * 0.3183098733425140380859375) * _1655) * _1656) + _1610;
        _1633 = (((cbLight._m0[_1637].z * 0.3183098733425140380859375) * _1655) * _1656) + _1611;
    }
    bool _1636 = _1616.y == 0u;
    float _1674;
    float _1676;
    float _1678;
    if (_1636)
    {
        _1674 = _1629;
        _1676 = _1631;
        _1678 = _1633;
    }
    else
    {
        uint _1847 = _1540 + 7u;
        float _1863 = (dot(vec3(cbLight._m0[_1540 + 3u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1864 = _1863 * _1863;
        float _3802 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1866 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
        _1674 = (((cbLight._m0[_1847].x * 0.3183098733425140380859375) * _1865) * _1866) + _1629;
        _1676 = (((cbLight._m0[_1847].y * 0.3183098733425140380859375) * _1865) * _1866) + _1631;
        _1678 = (((cbLight._m0[_1847].z * 0.3183098733425140380859375) * _1865) * _1866) + _1633;
    }
    uint _1681 = _1540 + 8u;
    float _1694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1540].w)) * _306) * 0.949999988079071044921875);
    float _1695 = _1694 * _1694;
    float _1696 = cbLight._m0[_1540].x + _385;
    float _1697 = cbLight._m0[_1540].y + _386;
    float _1698 = cbLight._m0[_1540].z + _387;
    float _1702 = inversesqrt(dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698)));
    float _1703 = _1702 * _1696;
    float _1704 = _1702 * _1697;
    float _1705 = _1702 * _1698;
    float _1706 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1540].xyz));
    float _3818 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1709 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _1710 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _1711 = dot(vec3(_303, _304, _305), vec3(_1703, _1704, _1705));
    float _3840 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1714 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _1715 = dot(vec3(cbLight._m0[_1540].xyz), vec3(_1703, _1704, _1705));
    float _3851 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1719 = _1695 * _1695;
    float _1723 = ((_1714 * _1714) * (_1719 + (-1.0))) + 1.0;
    float _1731 = exp2(log2(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * 5.0);
    float _1732 = 0.959999978542327880859375 - _457;
    float _1734 = 0.959999978542327880859375 - _458;
    float _1735 = 0.959999978542327880859375 - _459;
    float _1742 = 1.0 - _1695;
    float _1753 = (0.5 / (((_1710 * ((_1709 * _1742) + _1695)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1742) + _1695) * _1709))) * _1709;
    float _3862 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1755 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1719 / ((_1723 * _1723) * 3.141590118408203125));
    uint _1769 = _1540 + 9u;
    float _1780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1581].w)) * _306) * 0.949999988079071044921875);
    float _1781 = _1780 * _1780;
    float _1782 = cbLight._m0[_1581].x + _385;
    float _1783 = cbLight._m0[_1581].y + _386;
    float _1784 = cbLight._m0[_1581].z + _387;
    float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
    float _1789 = _1788 * _1782;
    float _1790 = _1788 * _1783;
    float _1791 = _1788 * _1784;
    float _1792 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1581].xyz));
    float _3873 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _1796 = dot(vec3(_303, _304, _305), vec3(_1789, _1790, _1791));
    float _3884 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1800 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_1789, _1790, _1791));
    float _3895 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1804 = _1781 * _1781;
    float _1808 = ((_1799 * _1799) * (_1804 + (-1.0))) + 1.0;
    float _1815 = exp2(log2(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * 5.0);
    float _1822 = 1.0 - _1781;
    float _1832 = (0.5 / (((_1710 * ((_1795 * _1822) + _1781)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1822) + _1781) * _1795))) * _1795;
    float _3906 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1834 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1804 / ((_1808 * _1808) * 3.141590118408203125));
    float _1844 = (((((_1815 * _1732) + _460) * cbLight._m0[_1769].x) * _1834) * _1563) + ((((cbLight._m0[_1681].x * _1532) * ((_1731 * _1732) + _460)) * _1755) * _1577);
    float _1845 = (((((_1815 * _1734) + _462) * cbLight._m0[_1769].y) * _1834) * _1563) + ((((cbLight._m0[_1681].y * _1533) * ((_1731 * _1734) + _462)) * _1755) * _1577);
    float _1846 = (((((_1815 * _1735) + _463) * cbLight._m0[_1769].z) * _1834) * _1563) + ((((cbLight._m0[_1681].z * _1534) * ((_1731 * _1735) + _463)) * _1755) * _1577);
    float _1908;
    float _1910;
    float _1912;
    if (_1618)
    {
        _1908 = _1844;
        _1910 = _1845;
        _1912 = _1846;
    }
    else
    {
        uint _1914 = _1540 + 2u;
        uint _1918 = _1540 + 10u;
        float _1932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _306) * 0.949999988079071044921875);
        float _1933 = _1932 * _1932;
        float _1934 = cbLight._m0[_1914].x + _385;
        float _1935 = cbLight._m0[_1914].y + _386;
        float _1936 = cbLight._m0[_1914].z + _387;
        float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
        float _1941 = _1940 * _1934;
        float _1942 = _1940 * _1935;
        float _1943 = _1940 * _1936;
        float _1944 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1914].xyz));
        float _3917 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1947 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1948 = dot(vec3(_303, _304, _305), vec3(_1941, _1942, _1943));
        float _3928 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1951 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1952 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_1941, _1942, _1943));
        float _3939 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1956 = _1933 * _1933;
        float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
        float _1967 = exp2(log2(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * 5.0);
        float _1974 = 1.0 - _1933;
        float _1984 = (0.5 / (((_1710 * ((_1947 * _1974) + _1933)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1974) + _1933) * _1947))) * _1947;
        float _3950 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1986 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
        float _1987 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _1908 = (((((_1967 * _1732) + _460) * cbLight._m0[_1918].x) * _1986) * _1987) + _1844;
        _1910 = (((((_1967 * _1734) + _462) * cbLight._m0[_1918].y) * _1986) * _1987) + _1845;
        _1912 = (((((_1967 * _1735) + _463) * cbLight._m0[_1918].z) * _1986) * _1987) + _1846;
    }
    float _2022;
    float _2024;
    float _2026;
    if (_1636)
    {
        _2022 = _1908;
        _2024 = _1910;
        _2026 = _1912;
    }
    else
    {
        uint _2033 = _1540 + 3u;
        uint _2037 = _1540 + 11u;
        float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _306) * 0.949999988079071044921875);
        float _2052 = _2051 * _2051;
        float _2053 = cbLight._m0[_2033].x + _385;
        float _2054 = cbLight._m0[_2033].y + _386;
        float _2055 = cbLight._m0[_2033].z + _387;
        float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
        float _2060 = _2059 * _2053;
        float _2061 = _2059 * _2054;
        float _2062 = _2059 * _2055;
        float _2063 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2033].xyz));
        float _3966 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2066 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _2067 = dot(vec3(_303, _304, _305), vec3(_2060, _2061, _2062));
        float _3977 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2070 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2071 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2060, _2061, _2062));
        float _3988 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2075 = _2052 * _2052;
        float _2079 = ((_2070 * _2070) * (_2075 + (-1.0))) + 1.0;
        float _2086 = exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0);
        float _2093 = 1.0 - _2052;
        float _2103 = (0.5 / (((_1710 * ((_2066 * _2093) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _2093) + _2052) * _2066))) * _2066;
        float _3999 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2105 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_2075 / ((_2079 * _2079) * 3.141590118408203125));
        float _2106 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
        _2022 = (((((_2086 * _1732) + _460) * cbLight._m0[_2037].x) * _2105) * _2106) + _1908;
        _2024 = (((((_2086 * _1734) + _462) * cbLight._m0[_2037].y) * _2105) * _2106) + _1910;
        _2026 = (((((_2086 * _1735) + _463) * cbLight._m0[_2037].z) * _2105) * _2106) + _1912;
    }
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    float _2250;
    if (_1538.y == 0u)
    {
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2181;
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2181;
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2181;
        uvec4 _2196 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2197 = _2196.x;
        uint _2208 = uint((float(_2196.y) * floor(float(uint(cbSceneParam._m0[85u].y * _394) / _2197))) + floor(float(uint(cbSceneParam._m0[85u].x * _393) / _2197)));
        float _2218 = (log2(_2184 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2219 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        uint _2222 = uint(isnan(14.0) ? _2219 : (isnan(_2219) ? 14.0 : min(_2219, 14.0)));
        uvec4 _2227 = texelFetch(g_lightClusterGridBuffer, int(((_2222 << 2u) + (_2208 << 6u)) >> 2u));
        uint _2228 = _2227.x;
        uint _2229 = _2196.z;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        if (((((1u << ((_2229 >> 4u) & 15u)) + 4294967295u) & _2228) == 0u) || ((_2229 & 240u) == 0u))
        {
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
        }
        else
        {
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            uint _2553 = 0u;
            uint _2562;
            bool _2563;
            for (;;)
            {
                _2562 = texelFetch(g_lightClassification, int((((_2222 << 5u) + (_2208 << 9u)) + (_2553 << 2u)) >> 2u)).x;
                _2563 = _2562 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2563)
                {
                    frontier_phi_63_pred = _2552;
                    frontier_phi_63_pred_1 = _2551;
                    frontier_phi_63_pred_2 = _2550;
                    frontier_phi_63_pred_3 = _2549;
                    frontier_phi_63_pred_4 = _2548;
                    frontier_phi_63_pred_5 = _2547;
                }
                else
                {
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    uint _2677;
                    _2671 = _2547;
                    _2672 = _2548;
                    _2673 = _2549;
                    _2674 = _2550;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2562;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    for (;;)
                    {
                        uint _2681 = uint(findLSB(_2677)) + (_2553 << 5u);
                        uint _2678 = (_2677 + 4294967295u) & _2677;
                        uint _2683 = _2681 * 48u;
                        vec4 _2697 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2683)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 3u)).x));
                        uint _2703 = (_2681 * 48u) + 4u;
                        vec4 _2716 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2703)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 3u)).x));
                        uint _2722 = (_2681 * 48u) + 8u;
                        vec3 _2733 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2722)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 2u)).x));
                        float _2737 = _2697.x - _2182;
                        float _2738 = _2697.y - _2183;
                        float _2739 = _2697.z - _2184;
                        float _2740 = dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739));
                        float _2743 = inversesqrt(_2740);
                        float _2744 = _2743 * _2737;
                        float _2745 = _2743 * _2738;
                        float _2746 = _2743 * _2739;
                        float _2747 = dot(vec3(_415, _418, _421), vec3(_2744, _2745, _2746));
                        float _2752 = 1.0 - (_2740 * _2697.w);
                        float _4025 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2753 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _2754 = sqrt(_2740) * _2716.w;
                        float _2757 = 1.39999997615814208984375 / (_2754 + 1.39999997615814208984375);
                        float _2758 = _2757 * _2757;
                        float _2761 = ((1.0 - _2758) * _2747) + _2758;
                        float _2764 = _2754 * _2754;
                        float _2768 = ((isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0))) * _2753) / ((_2764 * 0.699999988079071044921875) + 1.0);
                        float _2772 = (-0.0) - _2182;
                        float _2773 = (-0.0) - _2183;
                        float _2774 = (-0.0) - _2184;
                        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
                        float _2779 = _2778 * _2772;
                        float _2780 = _2778 * _2773;
                        float _2781 = _2778 * _2774;
                        float _2789 = exp2(log2(1.0 / ((_2764 * 3.5) + 5.0)) * 0.25);
                        float _2790 = 1.0 - _491;
                        float _2797 = sqrt(1.0 - ((1.0 - (_2790 * _2790)) * (1.0 - (_2789 * _2789))));
                        float _2798 = _2797 * _2797;
                        float _2799 = _2798 * _2798;
                        float _2800 = _2779 + _2744;
                        float _2801 = _2780 + _2745;
                        float _2802 = _2781 + _2746;
                        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
                        float _2810 = dot(vec3(_415, _418, _421), vec3(_2779, _2780, _2781));
                        float _4041 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2813 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                        float _2814 = dot(vec3(_415, _418, _421), vec3(_2806 * _2800, _2806 * _2801, _2806 * _2802));
                        float _4052 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2817 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                        float _2821 = ((_2817 * _2817) * (_2799 + (-1.0))) + 1.0;
                        float _2822 = _2757 * _2798;
                        float _2823 = _2822 * _2822;
                        float _2826 = ((1.0 - _2823) * _2747) + _2823;
                        float _4063 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2827 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                        float _2828 = 1.0 - _2798;
                        float _2838 = (0.5 / (((_2827 * ((_2813 * _2828) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2827 * _2828) + _2798) * _2813))) * _2827;
                        float _4074 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2849 = (((_2799 * 3.1415927410125732421875) * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) / ((_2821 * _2821) * ((_2764 * 2.1991131305694580078125) + 3.141590118408203125))) * _2753;
                        _2606 = (_2768 * _2716.x) + _2674;
                        _2607 = (_2768 * _2716.y) + _2675;
                        _2608 = (_2768 * _2716.z) + _2676;
                        _2603 = (_2849 * _2733.x) + _2671;
                        _2604 = (_2849 * _2733.y) + _2672;
                        _2605 = (_2849 * _2733.z) + _2673;
                        if (_2678 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2671 = _2603;
                            _2672 = _2604;
                            _2673 = _2605;
                            _2674 = _2606;
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2678;
                        }
                    }
                    frontier_phi_63_pred = _2608;
                    frontier_phi_63_pred_1 = _2607;
                    frontier_phi_63_pred_2 = _2606;
                    frontier_phi_63_pred_3 = _2605;
                    frontier_phi_63_pred_4 = _2604;
                    frontier_phi_63_pred_5 = _2603;
                }
                _2368 = frontier_phi_63_pred;
                _2366 = frontier_phi_63_pred_1;
                _2364 = frontier_phi_63_pred_2;
                _2362 = frontier_phi_63_pred_3;
                _2360 = frontier_phi_63_pred_4;
                _2358 = frontier_phi_63_pred_5;
                uint _2554 = _2553 + 1u;
                if (_2554 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2547 = _2358;
                    _2548 = _2360;
                    _2549 = _2362;
                    _2550 = _2364;
                    _2551 = _2366;
                    _2552 = _2368;
                    _2553 = _2554;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
        }
        uvec4 _2371 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2372 = _2371.z;
        uint _2374 = (_2372 >> 8u) & 15u;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        if (((4294967295u << _2374) & _2228) == 0u)
        {
            _2515 = _2357;
            _2517 = _2359;
            _2519 = _2361;
            _2521 = _2363;
            _2523 = _2365;
            _2525 = _2367;
        }
        else
        {
            float _2540 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
            float _2541 = _2540 * _2182;
            float _2542 = _2540 * _2183;
            float _2543 = _2540 * _2184;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2374 < ((_2372 >> 12u) & 15u))
            {
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2654 = _2357;
                float _2655 = _2359;
                float _2656 = _2361;
                float _2657 = _2363;
                float _2658 = _2365;
                float _2659 = _2367;
                uint _2660 = _2374;
                uint _2669;
                bool _2670;
                for (;;)
                {
                    _2669 = texelFetch(g_lightClassification, int((((_2222 << 5u) + (_2208 << 9u)) + (_2660 << 2u)) >> 2u)).x;
                    _2670 = _2669 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2670)
                    {
                        frontier_phi_69_pred = _2659;
                        frontier_phi_69_pred_1 = _2658;
                        frontier_phi_69_pred_2 = _2657;
                        frontier_phi_69_pred_3 = _2656;
                        frontier_phi_69_pred_4 = _2655;
                        frontier_phi_69_pred_5 = _2654;
                    }
                    else
                    {
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _2867 = _2654;
                        float _2868 = _2655;
                        float _2869 = _2656;
                        float _2870 = _2657;
                        float _2871 = _2658;
                        float _2872 = _2659;
                        uint _2873 = _2669;
                        uint _2874;
                        vec4 _2899;
                        float _2900;
                        vec4 _2915;
                        vec3 _2927;
                        vec4 _2943;
                        vec4 _2959;
                        float _3006;
                        bool _3007;
                        for (;;)
                        {
                            uint _2884 = ((_2660 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2873));
                            _2874 = (_2873 + 4294967295u) & _2873;
                            uint _2886 = _2884 * 40u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            _2900 = _2899.w;
                            uint _2902 = (_2884 * 40u) + 4u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2917 = (_2884 * 40u) + 8u;
                            _2927 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x));
                            uint _2930 = (_2884 * 40u) + 16u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2946 = (_2884 * 40u) + 20u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2962 = (_2884 * 40u) + 24u;
                            vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2981 = (_2884 * 40u) + 28u;
                            vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            _3006 = fma(_2184, _2994.z, fma(_2183, _2994.y, _2994.x * _2182)) + _2994.w;
                            _3007 = !((fma(_2184, _2975.z, fma(_2183, _2975.y, _2975.x * _2182)) + _2975.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3007)
                            {
                                float _3034 = _2899.x - _2182;
                                float _3035 = _2899.y - _2183;
                                float _3036 = _2899.z - _2184;
                                float _3037 = dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036));
                                float _3040 = inversesqrt(_3037);
                                float _3041 = _3040 * _3034;
                                float _3042 = _3040 * _3035;
                                float _3043 = _3040 * _3036;
                                float _3047 = 1.0 - (_3037 / (_2900 * _2900));
                                float _4085 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3048 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                                float _3052 = sqrt(_3037) * _2915.w;
                                float _3054 = 1.39999997615814208984375 / (_3052 + 1.39999997615814208984375);
                                float _3055 = _3054 * _3054;
                                float _3058 = ((1.0 - _3055) * dot(vec3(_3041, _3042, _3043), vec3(_415, _418, _421))) + _3055;
                                float _3061 = _3052 * _3052;
                                float _3065 = (fma(_2184, _2943.z, fma(_2183, _2943.y, _2943.x * _2182)) + _2943.w) / _3006;
                                float _3066 = (fma(_2184, _2959.z, fma(_2183, _2959.y, _2959.x * _2182)) + _2959.w) / _3006;
                                float _3070 = 1.0 - dot(vec2(_3065, _3066), vec2(_3065, _3066));
                                float _4101 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3071 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3072 = _3071 * (((isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))) * _3048) / ((_3061 * 0.699999988079071044921875) + 1.0));
                                float _3084 = exp2(log2(1.0 / ((_3061 * 3.5) + 5.0)) * 0.25);
                                float _3085 = 1.0 - _491;
                                float _3092 = sqrt(1.0 - ((1.0 - (_3085 * _3085)) * (1.0 - (_3084 * _3084))));
                                float _3093 = _3092 * _3092;
                                float _3094 = _3093 * _3093;
                                float _3095 = _3041 - _2541;
                                float _3096 = _3042 - _2542;
                                float _3097 = _3043 - _2543;
                                float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                                float _3105 = dot(vec3(_415, _418, _421), vec3((-0.0) - _2541, (-0.0) - _2542, (-0.0) - _2543));
                                float _4112 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3108 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                                float _3109 = dot(vec3(_415, _418, _421), vec3(_3101 * _3095, _3101 * _3096, _3101 * _3097));
                                float _4123 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3112 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                                float _3116 = ((_3112 * _3112) * (_3094 + (-1.0))) + 1.0;
                                float _3117 = _3054 * _3093;
                                float _3118 = _3117 * _3117;
                                float _3124 = ((1.0 - _3118) * dot(vec3(_415, _418, _421), vec3(_3041, _3042, _3043))) + _3118;
                                float _4134 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3125 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3126 = 1.0 - _3093;
                                float _3136 = (0.5 / (((_3125 * ((_3108 * _3126) + _3093)) + 9.9999999392252902907785028219223e-09) + (((_3125 * _3126) + _3093) * _3108))) * _3125;
                                float _4145 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3146 = (_3071 * _3048) * (((_3094 * 3.1415927410125732421875) * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) / ((_3116 * _3116) * ((_3061 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3072 * _2915.z;
                                frontier_phi_75_pred_1 = _3072 * _2915.y;
                                frontier_phi_75_pred_2 = _3072 * _2915.x;
                                frontier_phi_75_pred_3 = _3146 * _2927.z;
                                frontier_phi_75_pred_4 = _3146 * _2927.y;
                                frontier_phi_75_pred_5 = _3146 * _2927.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3155 = frontier_phi_75_pred;
                            _3154 = frontier_phi_75_pred_1;
                            _3153 = frontier_phi_75_pred_2;
                            _3152 = frontier_phi_75_pred_3;
                            _3151 = frontier_phi_75_pred_4;
                            _3150 = frontier_phi_75_pred_5;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            _2856 = _3152 + _2869;
                            if (_2874 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2874;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2859;
                        frontier_phi_69_pred_1 = _2858;
                        frontier_phi_69_pred_2 = _2857;
                        frontier_phi_69_pred_3 = _2856;
                        frontier_phi_69_pred_4 = _2855;
                        frontier_phi_69_pred_5 = _2854;
                    }
                    _2526 = frontier_phi_69_pred;
                    _2524 = frontier_phi_69_pred_1;
                    _2522 = frontier_phi_69_pred_2;
                    _2520 = frontier_phi_69_pred_3;
                    _2518 = frontier_phi_69_pred_4;
                    _2516 = frontier_phi_69_pred_5;
                    uint _2661 = _2660 + 1u;
                    if (_2661 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2654 = _2516;
                        _2655 = _2518;
                        _2656 = _2520;
                        _2657 = _2522;
                        _2658 = _2524;
                        _2659 = _2526;
                        _2660 = _2661;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2526;
                frontier_phi_57_58_ladder_1 = _2524;
                frontier_phi_57_58_ladder_2 = _2522;
                frontier_phi_57_58_ladder_3 = _2520;
                frontier_phi_57_58_ladder_4 = _2518;
                frontier_phi_57_58_ladder_5 = _2516;
            }
            else
            {
                frontier_phi_57_58_ladder = _2367;
                frontier_phi_57_58_ladder_1 = _2365;
                frontier_phi_57_58_ladder_2 = _2363;
                frontier_phi_57_58_ladder_3 = _2361;
                frontier_phi_57_58_ladder_4 = _2359;
                frontier_phi_57_58_ladder_5 = _2357;
            }
            _2515 = frontier_phi_57_58_ladder_5;
            _2517 = frontier_phi_57_58_ladder_4;
            _2519 = frontier_phi_57_58_ladder_3;
            _2521 = frontier_phi_57_58_ladder_2;
            _2523 = frontier_phi_57_58_ladder_1;
            _2525 = frontier_phi_57_58_ladder;
        }
        float _2530 = isnan(1.0) ? _475 : (isnan(_475) ? 1.0 : min(_475, 1.0));
        _2240 = (_2530 * _2521) + _1674;
        _2242 = (_2530 * _2523) + _1676;
        _2244 = (_2530 * _2525) + _1678;
        _2246 = ((_2515 * _460) * _2530) + _2022;
        _2248 = ((_2517 * _462) * _2530) + _2024;
        _2250 = ((_2519 * _463) * _2530) + _2026;
    }
    else
    {
        _2240 = _1674;
        _2242 = _1676;
        _2244 = _1678;
        _2246 = _2022;
        _2248 = _2024;
        _2250 = _2026;
    }
    uint _2256 = _436 + uint(cbMatDynParam._m0[0u].w);
    float _2262 = (_282.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2256].x;
    float _2263 = (_282.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2256].y;
    float _2264 = (_282.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2256].z;
    float _4161 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4172 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4183 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _2281 = (((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2240 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _475))) + ((_2246 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1285)) * cbPerFrame._m0[3u].x)) + _2262;
    float _2283 = (_2263 + ((_2248 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1285)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2242 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _475)));
    float _2285 = (_2264 + ((_2250 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1285)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2244 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _475)));
    float _4209 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2298 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _2307 = _393 / cbSceneParam._m0[86u].x;
    float _2308 = _394 / cbSceneParam._m0[86u].y;
    vec4 _2322 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, (log2((isnan(cbSceneParam._m0[77u].w) ? _326 : (isnan(_326) ? cbSceneParam._m0[77u].w : min(_326, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2324 = _2322.x;
    float _2325 = _2322.y;
    float _2326 = _2322.z;
    float _2327 = _2322.w;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    if (_326 > cbSceneParam._m0[78u].w)
    {
        float _2382 = isnan(_326) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _326 : min(cbSceneParam._m0[80u].w, _326));
        float _2383 = _2382 / _326;
        float _2394 = _2383 * _378;
        float _2395 = _379 * _2383;
        float _2396 = (-0.0) - _2395;
        float _2397 = _2383 * _380;
        float _2399 = (cbSceneParam._m0[77u].w * _2396) / _2382;
        float _2400 = _2399 + cbSceneParam._m0[79u].w;
        float _2401 = cbSceneParam._m0[79u].w - _2395;
        float _2407 = sqrt(((_2394 * _2394) + (_2395 * _2395)) + (_2397 * _2397));
        float _2410 = (1.0 - (cbSceneParam._m0[77u].w / _2382)) * _2407;
        float _2415 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2417 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2616;
        if (abs((_2396 - _2399) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2616 = ((((_2400 > 0.0) ? exp2(_2415 * _2400) : (2.0 - exp2(_2417 * _2400))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2410;
        }
        else
        {
            float _2576 = 1.0 / cbSceneParam._m0[80u].x;
            float _2577 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : max(_2400, _2401));
            float _2578 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : min(_2400, _2401));
            float _2587 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : min(_2577, 0.0));
            float _2588 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : min(_2578, 0.0));
            _2616 = ((abs(_2407 / _2396) * cbSceneParam._m0[80u].y) * ((((_2587 - _2588) * 2.0) - ((exp2(_2415 * (isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0)))) - exp2(_2415 * (isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0))))) * _2576)) - ((exp2(_2417 * _2587) - exp2(_2417 * _2588)) * _2576))) + (_2410 * cbSceneParam._m0[80u].z);
        }
        vec4 _2618 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, 1.0), 0.0);
        float _2627 = exp2((_2616 * (-1.44269502162933349609375)) * (1.0 - _2618.w));
        float _2628 = log2(_2627);
        float _2644 = log2(_2327);
        _2419 = (exp2(_2644 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2628 * cbSceneParam._m0[78u].x)) * _2618.x) / cbSceneParam._m0[78u].x)) + _2324;
        _2421 = (exp2(_2644 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2628 * cbSceneParam._m0[78u].y)) * _2618.y) / cbSceneParam._m0[78u].y)) + _2325;
        _2423 = (exp2(_2644 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2628 * cbSceneParam._m0[78u].z)) * _2618.z) / cbSceneParam._m0[78u].z)) + _2326;
        _2425 = _2627 * _2327;
    }
    else
    {
        _2419 = _2324;
        _2421 = _2325;
        _2423 = _2326;
        _2425 = _2327;
    }
    bool _2438 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2439 = log2(_2425);
    float _2443 = exp2(_2439 * cbSceneParam._m0[78u].x);
    float _2444 = exp2(_2439 * cbSceneParam._m0[78u].y);
    float _2445 = exp2(_2439 * cbSceneParam._m0[78u].z);
    float _2446 = _2443 * (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0)));
    float _2447 = _2444 * (isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0)));
    float _2448 = _2445 * (isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0)));
    vec4 _2456 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_393, _394));
    float _2458 = _2456.x;
    float _2479 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2458)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2458))) - _326) * 0.100000001490116119384765625;
    float _4260 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _2482 = _2481 * cbInstanceData._m0[_434 + 6u].w;
    float _2491 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2491 * (_2438 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2419)));
    SV_Target.y = _2491 * (_2438 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2421)));
    SV_Target.z = _2491 * (_2438 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2423)));
    SV_Target.w = _2482;
    SV_Target_1.x = ((((cbMtdParam._m0[2u].x * _2262) * _2298) * _2443) * _2481) * _2491;
    SV_Target_1.y = ((((cbMtdParam._m0[2u].y * _2263) * _2298) * _2444) * _2481) * _2491;
    SV_Target_1.z = ((((cbMtdParam._m0[2u].z * _2264) * _2298) * _2445) * _2481) * _2491;
    SV_Target_1.w = _2482;
}


