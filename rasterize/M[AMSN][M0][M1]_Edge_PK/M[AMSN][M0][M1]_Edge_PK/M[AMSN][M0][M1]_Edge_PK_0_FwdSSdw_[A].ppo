#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _904;
float _3318;
float _3319;
float _3320;
float _3321;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _237 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _237.w;
    float _244 = _237.x * cbMtdParam._m0[9u].x;
    float _245 = _237.y * cbMtdParam._m0[9u].y;
    float _246 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _258 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _260 = _258.x;
    vec4 _272 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _272.z;
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3330 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))));
    float _294 = gl_FragCoord.x * 0.125;
    float _296 = gl_FragCoord.y * 0.125;
    float _307 = fma(_289, _215, fma(_282, _207 * TANGENT.x, (_193 * _186) * _280));
    float _310 = fma(_289, _216, fma(_282, _207 * TANGENT.y, (_193 * _187) * _280));
    float _313 = fma(_289, _217, fma(_282, _207 * TANGENT.z, (_193 * _188) * _280));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    float _318 = _317 * _307;
    float _319 = _317 * _310;
    float _320 = _317 * _313;
    float _3341 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _321 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _3352 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3363 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3374 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3385 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _325 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    if (!(cbMtdParam._m0[10u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_294, _296)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _345 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _386 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _396 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _386);
    float _397 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _386);
    float _398 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _386);
    float _402 = inversesqrt(dot(vec3(_396, _397, _398), vec3(_396, _397, _398)));
    float _403 = _396 * _402;
    float _404 = _397 * _402;
    float _405 = _398 * _402;
    vec4 _407 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_294, _296));
    float _409 = _407.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _585 = sqrt(((_396 * _396) + (_397 * _397)) + (_398 * _398));
        float _591 = (cbMatDynParam._m0[5u].x * _585) + cbMatDynParam._m0[5u].y;
        float _3396 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _592 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _596 = (cbMatDynParam._m0[5u].z * _585) + cbMatDynParam._m0[5u].w;
        float _3407 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) - _592)) + _592) < ((_409 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _421 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _422 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _442 = fma(_320, cbSceneParam._m0[5u].z, fma(_319, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _318));
    float _445 = fma(_320, cbSceneParam._m0[6u].z, fma(_319, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _318));
    float _448 = fma(_320, cbSceneParam._m0[7u].z, fma(_319, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _318));
    uint _461 = uint(roundEven(NORMAL.w)) * 13u;
    uint _463 = _461 + 9u;
    uint _464 = _463 + uint(cbMatDynParam._m0[0u].w);
    float _470 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0)))) * cbInstanceData._m0[_464].x;
    float _471 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0)))) * cbInstanceData._m0[_464].y;
    float _472 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * cbInstanceData._m0[_464].z;
    float _3418 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _476 = 1.0 - _325;
    float _477 = _473 * _476;
    float _478 = _474 * _476;
    float _479 = _475 * _476;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _325;
    float _485 = (_474 + (-0.039999999105930328369140625)) * _325;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _325;
    float _487 = _484 + 0.039999999105930328369140625;
    float _489 = _485 + 0.039999999105930328369140625;
    float _490 = _486 + 0.039999999105930328369140625;
    vec4 _499 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _421, cbSceneParam._m0[86u].y * _422));
    float _502 = _499.x * TEXCOORD.z;
    float _503 = dot(vec3(_318, _319, _320), vec3(_403, _404, _405));
    float _506 = _503 * 2.0;
    float _510 = (_506 * _318) - _403;
    float _511 = (_506 * _319) - _404;
    float _512 = (_506 * _320) - _405;
    float _516 = abs(dot(vec3(_403, _404, _405), vec3(_318, _319, _320)));
    float _3451 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _518 = sqrt(_321);
    float _531 = exp2((_518 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_518 * 3.0));
    float _537 = (1.0 - _531) * ((_518 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _538 = _531 * _518;
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _903;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _628 = fma(_574, cbModelParam._m0[26u].z, fma(_570, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _566));
        float _632 = fma(_574, cbModelParam._m0[27u].z, fma(_570, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _566));
        float _636 = fma(_574, cbModelParam._m0[28u].z, fma(_570, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _566));
        float _661 = _566 + _318;
        float _662 = _570 + _319;
        float _663 = _574 + _320;
        float _673 = fma(_663, cbModelParam._m0[26u].z, fma(_662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _661)) - _628;
        float _674 = fma(_663, cbModelParam._m0[27u].z, fma(_662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _661)) - _632;
        float _675 = fma(_663, cbModelParam._m0[28u].z, fma(_662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _661)) - _636;
        float _679 = inversesqrt(dot(vec3(_673, _674, _675), vec3(_673, _674, _675)));
        float _692 = ((_679 * _673) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_628 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _693 = ((_679 * _674) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_632 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _694 = ((_679 * _675) / cbModelParam._m0[34u].z) + ((((((_636 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        float _731 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_697.x + (-0.5));
        float _733 = _731 * (_697.y + (-0.5));
        float _734 = _731 * (_697.z + (-0.5));
        float _741 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_704.x + (-0.5));
        float _743 = _741 * (_704.y + (-0.5));
        float _744 = _741 * (_704.z + (-0.5));
        float _751 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_711.x + (-0.5));
        float _753 = _751 * (_711.y + (-0.5));
        float _754 = _751 * (_711.z + (-0.5));
        float _761 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_718.x + (-0.5));
        float _763 = _761 * (_718.y + (-0.5));
        float _764 = _761 * (_718.z + (-0.5));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = _732 * 0.5;
        float _769 = _742 * 0.5;
        float _770 = _752 * 0.5;
        float _771 = dot(vec3(_768, _769, _770), vec3(_768, _769, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _785 = (dot(vec3(_318, _319, _320), vec3(_776 * _768, _776 * _769, _776 * _770)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _795 = sqrt(((_769 * _769) + (_768 * _768)) + (_770 * _770)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _797 = _796 * 2.0;
        float _801 = (1.0 - _796) / (_796 + 1.0);
        float _3499 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _811 = ((((1.0 - _802) * (_797 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_797 + 1.0))) + _802) * _765;
        float _812 = _733 * 0.5;
        float _813 = _743 * 0.5;
        float _814 = _753 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _828 = (dot(vec3(_318, _319, _320), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _837 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3532 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_839 + 1.0))) + _844) * _766;
        float _854 = _734 * 0.5;
        float _855 = _744 * 0.5;
        float _856 = _754 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _870 = (dot(vec3(_318, _319, _320), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _879 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3565 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_881 + 1.0))) + _886) * _767;
        _903 = _734;
        _905 = _733;
        _906 = _732;
        _907 = _744;
        _908 = _743;
        _909 = _742;
        _910 = _754;
        _911 = _753;
        _912 = _752;
        _913 = _767;
        _914 = _766;
        _915 = _765;
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0)));
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
    }
    else
    {
        _903 = _904;
        _905 = _904;
        _906 = _904;
        _907 = _904;
        _908 = _904;
        _909 = _904;
        _910 = _904;
        _911 = _904;
        _912 = _904;
        _913 = _904;
        _914 = _904;
        _915 = _904;
        _916 = 0.0;
        _917 = 0.0;
        _918 = 0.0;
    }
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _944 = fma(_574, cbModelParam._m0[30u].z, fma(_570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _566));
        float _948 = fma(_574, cbModelParam._m0[31u].z, fma(_570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _566));
        float _952 = fma(_574, cbModelParam._m0[32u].z, fma(_570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _566));
        float _975 = _566 + _318;
        float _976 = _570 + _319;
        float _977 = _574 + _320;
        float _987 = fma(_977, cbModelParam._m0[30u].z, fma(_976, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _975)) - _944;
        float _988 = fma(_977, cbModelParam._m0[31u].z, fma(_976, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _975)) - _948;
        float _989 = fma(_977, cbModelParam._m0[32u].z, fma(_976, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _975)) - _952;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_944 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_948 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[35u].z) + ((((((_952 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1043 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1010.x + (-0.5));
        float _1045 = _1043 * (_1010.y + (-0.5));
        float _1046 = _1043 * (_1010.z + (-0.5));
        float _1053 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1017.x + (-0.5));
        float _1055 = _1053 * (_1017.y + (-0.5));
        float _1056 = _1053 * (_1017.z + (-0.5));
        float _1063 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1024.x + (-0.5));
        float _1065 = _1063 * (_1024.y + (-0.5));
        float _1066 = _1063 * (_1024.z + (-0.5));
        float _1073 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1031.x + (-0.5));
        float _1075 = _1073 * (_1031.y + (-0.5));
        float _1076 = _1073 * (_1031.z + (-0.5));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = _1044 * 0.5;
        float _1081 = _1054 * 0.5;
        float _1082 = _1064 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_318, _319, _320), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3628 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1107 + 1.0))) + _1112) * _1077;
        float _1122 = _1045 * 0.5;
        float _1123 = _1055 * 0.5;
        float _1124 = _1065 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_318, _319, _320), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3661 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1149 + 1.0))) + _1154) * _1078;
        float _1164 = _1046 * 0.5;
        float _1165 = _1056 * 0.5;
        float _1166 = _1066 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_318, _319, _320), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3694 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1191 + 1.0))) + _1196) * _1079;
        _1213 = _1046;
        _1214 = _1045;
        _1215 = _1044;
        _1216 = _1056;
        _1217 = _1055;
        _1218 = _1054;
        _1219 = _1066;
        _1220 = _1065;
        _1221 = _1064;
        _1222 = _1079;
        _1223 = _1078;
        _1224 = _1077;
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
    }
    else
    {
        _1213 = _904;
        _1214 = _904;
        _1215 = _904;
        _1216 = _904;
        _1217 = _904;
        _1218 = _904;
        _1219 = _904;
        _1220 = _904;
        _1221 = _904;
        _1222 = _904;
        _1223 = _904;
        _1224 = _904;
        _1225 = 0.0;
        _1226 = 0.0;
        _1227 = 0.0;
    }
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _916)) + _916;
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _917)) + _917;
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _918)) + _918;
    float _1260 = fma(_1239, cbSceneParam._m0[89u].z, fma(_1238, cbSceneParam._m0[89u].y, _1237 * cbSceneParam._m0[89u].x));
    float _1263 = fma(_1239, cbSceneParam._m0[90u].z, fma(_1238, cbSceneParam._m0[90u].y, _1237 * cbSceneParam._m0[90u].x));
    float _1266 = fma(_1239, cbSceneParam._m0[91u].z, fma(_1238, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1237));
    float _1281 = _510 * 0.5;
    float _1282 = _511 * 0.5;
    float _1283 = _512 * 0.5;
    float _1284 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1287 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1290 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1324;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1297 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_903, _907, _910, _913));
        float _1301 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_905, _908, _911, _914));
        float _1305 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_906, _909, _912, _915));
        float _1312 = dot(vec4(cbModelParam._m0[39u]), vec4(_1281, _1282, _1283, 1.0));
        _1324 = dot(vec3(isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1312) ? 0.0 : (isnan(0.0) ? _1312 : max(0.0, _1312))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1324 = 1.0;
    }
    float _1335;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1326 = dot(vec4(cbModelParam._m0[40u]), vec4(_1281, _1282, _1283, 1.0));
        _1335 = dot(vec3(isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1326) ? 0.0 : (isnan(0.0) ? _1326 : max(0.0, _1326))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1335 = 1.0;
    }
    float _1339 = (_1335 * cbModelParam._m0[1u].x) + (_1324 * (1.0 - cbModelParam._m0[1u].x));
    float _1349 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _321);
    float _1350 = isnan(_1349) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1349 : min(cbModelParam._m0[25u].z, _1349));
    float _1432;
    float _1434;
    float _1436;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1399 = fma(_574, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566)) + cbModelParam._m0[13u].w;
        float _1403 = fma(_574, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566)) + cbModelParam._m0[14u].w;
        float _1407 = fma(_574, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566)) + cbModelParam._m0[15u].w;
        float _1410 = fma(_512, cbModelParam._m0[13u].z, fma(_511, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _510));
        float _1413 = fma(_512, cbModelParam._m0[14u].z, fma(_511, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _510));
        float _1416 = fma(_512, cbModelParam._m0[15u].z, fma(_511, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _510));
        float _1444;
        if (_1410 > 0.0)
        {
            _1444 = abs((1.0 - _1399) / _1410);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1399 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1444 = frontier_phi_21_19_ladder;
        }
        float _1673;
        if (_1413 > 0.0)
        {
            _1673 = abs((1.0 - _1403) / _1413);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1403 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1673 = frontier_phi_30_26_ladder;
        }
        float _1930;
        if (_1416 > 0.0)
        {
            _1930 = abs((1.0 - _1407) / _1416);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1407 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1930 = frontier_phi_42_37_ladder;
        }
        float _1932 = isnan(_1673) ? _1444 : (isnan(_1444) ? _1673 : min(_1444, _1673));
        float _1933 = isnan(_1930) ? _1932 : (isnan(_1932) ? _1930 : min(_1932, _1930));
        float _1937 = (_1933 * _1410) + _1399;
        float _1938 = (_1933 * _1413) + _1403;
        float _1939 = (_1933 * _1416) + _1407;
        float _1940 = _1933 * 9.9999997473787516355514526367188e-05;
        float _1942 = (-1.0) - _1940;
        float _1944 = _1940 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_1939 > _1944) || ((_1939 < _1942) || ((_1938 > _1944) || ((_1938 < _1942) || ((_1937 < _1942) || (_1937 > _1944))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2067 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1939, cbModelParam._m0[9u].z, fma(_1938, cbModelParam._m0[9u].y, _1937 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1939, cbModelParam._m0[10u].z, fma(_1938, cbModelParam._m0[10u].y, _1937 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1939, cbModelParam._m0[11u].z, fma(_1938, cbModelParam._m0[11u].y, _1937 * cbModelParam._m0[11u].x))), _1350);
            frontier_phi_20_42_ladder = _2067.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2067.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2067.x * cbModelParam._m0[1u].y;
        }
        _1432 = frontier_phi_20_42_ladder_2;
        _1434 = frontier_phi_20_42_ladder_1;
        _1436 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_510, _511, _512), _1350);
        _1432 = _1420.x * cbModelParam._m0[1u].y;
        _1434 = _1420.y * cbModelParam._m0[1u].y;
        _1436 = _1420.z * cbModelParam._m0[1u].y;
    }
    float _1440 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _321);
    float _1441 = isnan(_1440) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1440 : min(cbModelParam._m0[25u].w, _1440));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1498 = fma(_574, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566)) + cbModelParam._m0[21u].w;
        float _1502 = fma(_574, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566)) + cbModelParam._m0[22u].w;
        float _1506 = fma(_574, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566)) + cbModelParam._m0[23u].w;
        float _1509 = fma(_512, cbModelParam._m0[21u].z, fma(_511, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _510));
        float _1512 = fma(_512, cbModelParam._m0[22u].z, fma(_511, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _510));
        float _1515 = fma(_512, cbModelParam._m0[23u].z, fma(_511, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _510));
        float _1678;
        if (_1509 > 0.0)
        {
            _1678 = abs((1.0 - _1498) / _1509);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1498 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1678 = frontier_phi_32_28_ladder;
        }
        float _1957;
        if (_1512 > 0.0)
        {
            _1957 = abs((1.0 - _1502) / _1512);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1502 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _1957 = frontier_phi_44_39_ladder;
        }
        float _2170;
        if (_1515 > 0.0)
        {
            _2170 = abs((1.0 - _1506) / _1515);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1506 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2170 = frontier_phi_53_50_ladder;
        }
        float _2172 = isnan(_1957) ? _1678 : (isnan(_1678) ? _1957 : min(_1678, _1957));
        float _2173 = isnan(_2170) ? _2172 : (isnan(_2172) ? _2170 : min(_2172, _2170));
        float _2177 = (_2173 * _1509) + _1498;
        float _2178 = (_2173 * _1512) + _1502;
        float _2179 = (_2173 * _1515) + _1506;
        float _2180 = _2173 * 9.9999997473787516355514526367188e-05;
        float _2181 = (-1.0) - _2180;
        float _2183 = _2180 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2179 > _2183) || ((_2179 < _2181) || ((_2178 > _2183) || ((_2178 < _2181) || ((_2177 < _2181) || (_2177 > _2183))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2179, cbModelParam._m0[17u].z, fma(_2178, cbModelParam._m0[17u].y, _2177 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2179, cbModelParam._m0[18u].z, fma(_2178, cbModelParam._m0[18u].y, _2177 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2179, cbModelParam._m0[19u].z, fma(_2178, cbModelParam._m0[19u].y, _2177 * cbModelParam._m0[19u].x))), _1441);
            frontier_phi_29_53_ladder = _2377.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2377.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2377.x * cbModelParam._m0[1u].z;
        }
        _1534 = frontier_phi_29_53_ladder_2;
        _1536 = frontier_phi_29_53_ladder_1;
        _1538 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1518 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_510, _511, _512), _1441);
        _1534 = _1518.x * cbModelParam._m0[1u].z;
        _1536 = _1518.y * cbModelParam._m0[1u].z;
        _1538 = _1518.z * cbModelParam._m0[1u].z;
    }
    float _1551 = (((_537 * _487) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1553 = (((_537 * _489) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1555 = (((_537 * _490) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1538 - _1436)) + _1436);
    float _1558 = fma(_1555, cbSceneParam._m0[89u].z, fma(_1553, cbSceneParam._m0[89u].y, _1551 * cbSceneParam._m0[89u].x));
    float _1561 = fma(_1555, cbSceneParam._m0[90u].z, fma(_1553, cbSceneParam._m0[90u].y, _1551 * cbSceneParam._m0[90u].x));
    float _1564 = fma(_1555, cbSceneParam._m0[91u].z, fma(_1553, cbSceneParam._m0[91u].y, _1551 * cbSceneParam._m0[91u].x));
    vec4 _1572 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_421, _422));
    float _1574 = _1572.w;
    float _1586 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1574);
    float _1587 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1574);
    float _1588 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1574);
    uvec4 _1592 = floatBitsToUint(cbInstanceData._m0[_461 + 5u]);
    uint _1594 = _1592.x * 14u;
    uint _1595 = _1594 + 13u;
    float _1602 = _502 + (-1.0);
    float _1607 = (cbLight._m0[_1595].x * _1602) + 1.0;
    float _1608 = (cbLight._m0[_1595].y * _1602) + 1.0;
    float _1609 = (cbLight._m0[_1595].z * _1602) + 1.0;
    float _1610 = (cbLight._m0[_1595].w * _1602) + 1.0;
    uint _1611 = _1594 + 5u;
    float _1617 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
    uint _1621 = _1594 + 4u;
    float _1631 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
    uint _1635 = _1594 | 1u;
    float _1646 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_318, _319, _320));
    float _1649 = dot(vec3(cbLight._m0[_1635].xyz), vec3(_318, _319, _320));
    float _3830 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _3841 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1654 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.3183098733425140380859375;
    float _1656 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.3183098733425140380859375;
    float _1663 = ((cbLight._m0[_1611].x * _1617) * _1656) + (((cbLight._m0[_1621].x * _1586) * _1631) * _1654);
    float _1664 = ((_1617 * cbLight._m0[_1611].y) * _1656) + (((cbLight._m0[_1621].y * _1587) * _1631) * _1654);
    float _1665 = ((_1617 * cbLight._m0[_1611].z) * _1656) + (((cbLight._m0[_1621].z * _1588) * _1631) * _1654);
    uvec4 _1670 = floatBitsToUint(cbLight._m0[_1594 + 12u]);
    bool _1672 = _1670.x == 0u;
    float _1683;
    float _1685;
    float _1687;
    if (_1672)
    {
        _1683 = _1663;
        _1685 = _1664;
        _1687 = _1665;
    }
    else
    {
        uint _1691 = _1594 + 6u;
        float _1707 = (dot(vec3(cbLight._m0[_1594 + 2u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1708 = _1707 * _1707;
        float _3852 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1710 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
        _1683 = (((cbLight._m0[_1691].x * 0.3183098733425140380859375) * _1709) * _1710) + _1663;
        _1685 = (((cbLight._m0[_1691].y * 0.3183098733425140380859375) * _1709) * _1710) + _1664;
        _1687 = (((cbLight._m0[_1691].z * 0.3183098733425140380859375) * _1709) * _1710) + _1665;
    }
    bool _1690 = _1670.y == 0u;
    float _1728;
    float _1730;
    float _1732;
    if (_1690)
    {
        _1728 = _1683;
        _1730 = _1685;
        _1732 = _1687;
    }
    else
    {
        uint _1901 = _1594 + 7u;
        float _1917 = (dot(vec3(cbLight._m0[_1594 + 3u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1918 = _1917 * _1917;
        float _3868 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1920 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _1728 = (((cbLight._m0[_1901].x * 0.3183098733425140380859375) * _1919) * _1920) + _1683;
        _1730 = (((cbLight._m0[_1901].y * 0.3183098733425140380859375) * _1919) * _1920) + _1685;
        _1732 = (((cbLight._m0[_1901].z * 0.3183098733425140380859375) * _1919) * _1920) + _1687;
    }
    uint _1735 = _1594 + 8u;
    float _1748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1594].w)) * _321) * 0.949999988079071044921875);
    float _1749 = _1748 * _1748;
    float _1750 = cbLight._m0[_1594].x + _403;
    float _1751 = cbLight._m0[_1594].y + _404;
    float _1752 = cbLight._m0[_1594].z + _405;
    float _1756 = inversesqrt(dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752)));
    float _1757 = _1756 * _1750;
    float _1758 = _1756 * _1751;
    float _1759 = _1756 * _1752;
    float _1760 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1594].xyz));
    float _3884 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1763 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _1764 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1765 = dot(vec3(_318, _319, _320), vec3(_1757, _1758, _1759));
    float _3906 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _1769 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_1757, _1758, _1759));
    float _3917 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1773 = _1749 * _1749;
    float _1777 = ((_1768 * _1768) * (_1773 + (-1.0))) + 1.0;
    float _1785 = exp2(log2(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * 5.0);
    float _1786 = 0.959999978542327880859375 - _484;
    float _1788 = 0.959999978542327880859375 - _485;
    float _1789 = 0.959999978542327880859375 - _486;
    float _1796 = 1.0 - _1749;
    float _1807 = (0.5 / (((_1764 * ((_1763 * _1796) + _1749)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _1796) + _1749) * _1763))) * _1763;
    float _3928 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1809 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1773 / ((_1777 * _1777) * 3.141590118408203125));
    uint _1823 = _1594 + 9u;
    float _1834 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1635].w)) * _321) * 0.949999988079071044921875);
    float _1835 = _1834 * _1834;
    float _1836 = cbLight._m0[_1635].x + _403;
    float _1837 = cbLight._m0[_1635].y + _404;
    float _1838 = cbLight._m0[_1635].z + _405;
    float _1842 = inversesqrt(dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838)));
    float _1843 = _1842 * _1836;
    float _1844 = _1842 * _1837;
    float _1845 = _1842 * _1838;
    float _1846 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1635].xyz));
    float _3939 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1849 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1850 = dot(vec3(_318, _319, _320), vec3(_1843, _1844, _1845));
    float _3950 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1854 = dot(vec3(cbLight._m0[_1635].xyz), vec3(_1843, _1844, _1845));
    float _3961 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1858 = _1835 * _1835;
    float _1862 = ((_1853 * _1853) * (_1858 + (-1.0))) + 1.0;
    float _1869 = exp2(log2(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * 5.0);
    float _1876 = 1.0 - _1835;
    float _1886 = (0.5 / (((_1764 * ((_1849 * _1876) + _1835)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _1876) + _1835) * _1849))) * _1849;
    float _3972 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1888 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1858 / ((_1862 * _1862) * 3.141590118408203125));
    float _1898 = (((((_1869 * _1786) + _487) * cbLight._m0[_1823].x) * _1888) * _1617) + ((((cbLight._m0[_1735].x * _1586) * ((_1785 * _1786) + _487)) * _1809) * _1631);
    float _1899 = (((((_1869 * _1788) + _489) * cbLight._m0[_1823].y) * _1888) * _1617) + ((((cbLight._m0[_1735].y * _1587) * ((_1785 * _1788) + _489)) * _1809) * _1631);
    float _1900 = (((((_1869 * _1789) + _490) * cbLight._m0[_1823].z) * _1888) * _1617) + ((((cbLight._m0[_1735].z * _1588) * ((_1785 * _1789) + _490)) * _1809) * _1631);
    float _1962;
    float _1964;
    float _1966;
    if (_1672)
    {
        _1962 = _1898;
        _1964 = _1899;
        _1966 = _1900;
    }
    else
    {
        uint _1968 = _1594 + 2u;
        uint _1972 = _1594 + 10u;
        float _1986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _321) * 0.949999988079071044921875);
        float _1987 = _1986 * _1986;
        float _1988 = cbLight._m0[_1968].x + _403;
        float _1989 = cbLight._m0[_1968].y + _404;
        float _1990 = cbLight._m0[_1968].z + _405;
        float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
        float _1995 = _1994 * _1988;
        float _1996 = _1994 * _1989;
        float _1997 = _1994 * _1990;
        float _1998 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1968].xyz));
        float _3983 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2001 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _2002 = dot(vec3(_318, _319, _320), vec3(_1995, _1996, _1997));
        float _3994 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2005 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2006 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_1995, _1996, _1997));
        float _4005 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2010 = _1987 * _1987;
        float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
        float _2021 = exp2(log2(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * 5.0);
        float _2028 = 1.0 - _1987;
        float _2038 = (0.5 / (((_1764 * ((_2001 * _2028) + _1987)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _2028) + _1987) * _2001))) * _2001;
        float _4016 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2040 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
        float _2041 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
        _1962 = (((((_2021 * _1786) + _487) * cbLight._m0[_1972].x) * _2040) * _2041) + _1898;
        _1964 = (((((_2021 * _1788) + _489) * cbLight._m0[_1972].y) * _2040) * _2041) + _1899;
        _1966 = (((((_2021 * _1789) + _490) * cbLight._m0[_1972].z) * _2040) * _2041) + _1900;
    }
    float _2076;
    float _2078;
    float _2080;
    if (_1690)
    {
        _2076 = _1962;
        _2078 = _1964;
        _2080 = _1966;
    }
    else
    {
        uint _2087 = _1594 + 3u;
        uint _2091 = _1594 + 11u;
        float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _321) * 0.949999988079071044921875);
        float _2106 = _2105 * _2105;
        float _2107 = cbLight._m0[_2087].x + _403;
        float _2108 = cbLight._m0[_2087].y + _404;
        float _2109 = cbLight._m0[_2087].z + _405;
        float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
        float _2114 = _2113 * _2107;
        float _2115 = _2113 * _2108;
        float _2116 = _2113 * _2109;
        float _2117 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2087].xyz));
        float _4032 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2121 = dot(vec3(_318, _319, _320), vec3(_2114, _2115, _2116));
        float _4043 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2125 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2114, _2115, _2116));
        float _4054 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2129 = _2106 * _2106;
        float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
        float _2140 = exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0);
        float _2147 = 1.0 - _2106;
        float _2157 = (0.5 / (((_1764 * ((_2120 * _2147) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_1764 * _2147) + _2106) * _2120))) * _2120;
        float _4065 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2159 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
        float _2160 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _2076 = (((((_2140 * _1786) + _487) * cbLight._m0[_2091].x) * _2159) * _2160) + _1962;
        _2078 = (((((_2140 * _1788) + _489) * cbLight._m0[_2091].y) * _2159) * _2160) + _1964;
        _2080 = (((((_2140 * _1789) + _490) * cbLight._m0[_2091].z) * _2159) * _2160) + _1966;
    }
    float _2294;
    float _2296;
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    if (_1592.y == 0u)
    {
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2235;
        float _2237 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2235;
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2235;
        uvec4 _2250 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2251 = _2250.x;
        uint _2262 = uint((float(_2250.y) * floor(float(uint(cbSceneParam._m0[85u].y * _422) / _2251))) + floor(float(uint(cbSceneParam._m0[85u].x * _421) / _2251)));
        float _2272 = (log2(_2238 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2273 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        uint _2276 = uint(isnan(14.0) ? _2273 : (isnan(_2273) ? 14.0 : min(_2273, 14.0)));
        uvec4 _2281 = texelFetch(g_lightClusterGridBuffer, int(((_2276 << 2u) + (_2262 << 6u)) >> 2u));
        uint _2282 = _2281.x;
        uint _2283 = _2250.z;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        if (((((1u << ((_2283 >> 4u) & 15u)) + 4294967295u) & _2282) == 0u) || ((_2283 & 240u) == 0u))
        {
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
        }
        else
        {
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2391;
            float _2393;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            uint _2540 = 0u;
            uint _2549;
            bool _2550;
            for (;;)
            {
                _2549 = texelFetch(g_lightClassification, int((((_2276 << 5u) + (_2262 << 9u)) + (_2540 << 2u)) >> 2u)).x;
                _2550 = _2549 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2550)
                {
                    frontier_phi_70_pred = _2536;
                    frontier_phi_70_pred_1 = _2539;
                    frontier_phi_70_pred_2 = _2538;
                    frontier_phi_70_pred_3 = _2537;
                    frontier_phi_70_pred_4 = _2535;
                    frontier_phi_70_pred_5 = _2534;
                }
                else
                {
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    uint _2685;
                    _2679 = _2534;
                    _2680 = _2535;
                    _2681 = _2536;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2539;
                    _2685 = _2549;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    for (;;)
                    {
                        uint _2689 = uint(findLSB(_2685)) + (_2540 << 5u);
                        uint _2686 = (_2685 + 4294967295u) & _2685;
                        uint _2691 = _2689 * 48u;
                        vec4 _2705 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2691)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 3u)).x));
                        uint _2711 = (_2689 * 48u) + 4u;
                        vec4 _2724 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2711)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 3u)).x));
                        uint _2730 = (_2689 * 48u) + 8u;
                        vec3 _2741 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2730)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 2u)).x));
                        float _2745 = _2705.x - _2236;
                        float _2746 = _2705.y - _2237;
                        float _2747 = _2705.z - _2238;
                        float _2748 = dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747));
                        float _2751 = inversesqrt(_2748);
                        float _2752 = _2751 * _2745;
                        float _2753 = _2751 * _2746;
                        float _2754 = _2751 * _2747;
                        float _2755 = dot(vec3(_442, _445, _448), vec3(_2752, _2753, _2754));
                        float _2760 = 1.0 - (_2748 * _2705.w);
                        float _4091 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2761 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2762 = sqrt(_2748) * _2724.w;
                        float _2765 = 1.39999997615814208984375 / (_2762 + 1.39999997615814208984375);
                        float _2766 = _2765 * _2765;
                        float _2769 = ((1.0 - _2766) * _2755) + _2766;
                        float _2772 = _2762 * _2762;
                        float _2776 = ((isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0))) * _2761) / ((_2772 * 0.699999988079071044921875) + 1.0);
                        float _2780 = (-0.0) - _2236;
                        float _2781 = (-0.0) - _2237;
                        float _2782 = (-0.0) - _2238;
                        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
                        float _2787 = _2786 * _2780;
                        float _2788 = _2786 * _2781;
                        float _2789 = _2786 * _2782;
                        float _2797 = exp2(log2(1.0 / ((_2772 * 3.5) + 5.0)) * 0.25);
                        float _2798 = 1.0 - _518;
                        float _2805 = sqrt(1.0 - ((1.0 - (_2798 * _2798)) * (1.0 - (_2797 * _2797))));
                        float _2806 = _2805 * _2805;
                        float _2807 = _2806 * _2806;
                        float _2808 = _2787 + _2752;
                        float _2809 = _2788 + _2753;
                        float _2810 = _2789 + _2754;
                        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
                        float _2818 = dot(vec3(_442, _445, _448), vec3(_2787, _2788, _2789));
                        float _4107 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2821 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2822 = dot(vec3(_442, _445, _448), vec3(_2814 * _2808, _2814 * _2809, _2814 * _2810));
                        float _4118 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2825 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2829 = ((_2825 * _2825) * (_2807 + (-1.0))) + 1.0;
                        float _2830 = _2765 * _2806;
                        float _2831 = _2830 * _2830;
                        float _2834 = ((1.0 - _2831) * _2755) + _2831;
                        float _4129 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2835 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2836 = 1.0 - _2806;
                        float _2846 = (0.5 / (((_2835 * ((_2821 * _2836) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2835 * _2836) + _2806) * _2821))) * _2835;
                        float _4140 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2857 = (((_2807 * 3.1415927410125732421875) * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) / ((_2829 * _2829) * ((_2772 * 2.1991131305694580078125) + 3.141590118408203125))) * _2761;
                        _2609 = (_2776 * _2724.x) + _2682;
                        _2610 = (_2776 * _2724.y) + _2683;
                        _2611 = (_2776 * _2724.z) + _2684;
                        _2606 = (_2857 * _2741.x) + _2679;
                        _2607 = (_2857 * _2741.y) + _2680;
                        _2608 = (_2857 * _2741.z) + _2681;
                        if (_2686 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2679 = _2606;
                            _2680 = _2607;
                            _2681 = _2608;
                            _2682 = _2609;
                            _2683 = _2610;
                            _2684 = _2611;
                            _2685 = _2686;
                        }
                    }
                    frontier_phi_70_pred = _2608;
                    frontier_phi_70_pred_1 = _2611;
                    frontier_phi_70_pred_2 = _2610;
                    frontier_phi_70_pred_3 = _2609;
                    frontier_phi_70_pred_4 = _2607;
                    frontier_phi_70_pred_5 = _2606;
                }
                _2387 = frontier_phi_70_pred;
                _2393 = frontier_phi_70_pred_1;
                _2391 = frontier_phi_70_pred_2;
                _2389 = frontier_phi_70_pred_3;
                _2385 = frontier_phi_70_pred_4;
                _2383 = frontier_phi_70_pred_5;
                uint _2541 = _2540 + 1u;
                if (_2541 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2534 = _2383;
                    _2535 = _2385;
                    _2536 = _2387;
                    _2537 = _2389;
                    _2538 = _2391;
                    _2539 = _2393;
                    _2540 = _2541;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
        }
        uvec4 _2396 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2397 = _2396.z;
        uint _2399 = (_2397 >> 8u) & 15u;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        if (((4294967295u << _2399) & _2282) == 0u)
        {
            _2502 = _2382;
            _2504 = _2384;
            _2506 = _2386;
            _2508 = _2388;
            _2510 = _2390;
            _2512 = _2392;
        }
        else
        {
            float _2527 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
            float _2528 = _2527 * _2236;
            float _2529 = _2527 * _2237;
            float _2530 = _2527 * _2238;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2399 < ((_2397 >> 12u) & 15u))
            {
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2662 = _2382;
                float _2663 = _2384;
                float _2664 = _2386;
                float _2665 = _2388;
                float _2666 = _2390;
                float _2667 = _2392;
                uint _2668 = _2399;
                uint _2677;
                bool _2678;
                for (;;)
                {
                    _2677 = texelFetch(g_lightClassification, int((((_2276 << 5u) + (_2262 << 9u)) + (_2668 << 2u)) >> 2u)).x;
                    _2678 = _2677 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2678)
                    {
                        frontier_phi_81_pred = _2667;
                        frontier_phi_81_pred_1 = _2666;
                        frontier_phi_81_pred_2 = _2665;
                        frontier_phi_81_pred_3 = _2664;
                        frontier_phi_81_pred_4 = _2663;
                        frontier_phi_81_pred_5 = _2662;
                    }
                    else
                    {
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _2884 = _2662;
                        float _2885 = _2663;
                        float _2886 = _2664;
                        float _2887 = _2665;
                        float _2888 = _2666;
                        float _2889 = _2667;
                        uint _2890 = _2677;
                        uint _2891;
                        vec4 _2916;
                        float _2917;
                        vec4 _2932;
                        vec3 _2944;
                        vec4 _2960;
                        vec4 _2976;
                        float _3023;
                        bool _3024;
                        for (;;)
                        {
                            uint _2901 = ((_2668 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2890));
                            _2891 = (_2890 + 4294967295u) & _2890;
                            uint _2903 = _2901 * 40u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            _2917 = _2916.w;
                            uint _2919 = (_2901 * 40u) + 4u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2934 = (_2901 * 40u) + 8u;
                            _2944 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x));
                            uint _2947 = (_2901 * 40u) + 16u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2963 = (_2901 * 40u) + 20u;
                            _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2979 = (_2901 * 40u) + 24u;
                            vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2998 = (_2901 * 40u) + 28u;
                            vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            _3023 = fma(_2238, _3011.z, fma(_2237, _3011.y, _3011.x * _2236)) + _3011.w;
                            _3024 = !((fma(_2238, _2992.z, fma(_2237, _2992.y, _2992.x * _2236)) + _2992.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3024)
                            {
                                float _3051 = _2916.x - _2236;
                                float _3052 = _2916.y - _2237;
                                float _3053 = _2916.z - _2238;
                                float _3054 = dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053));
                                float _3057 = inversesqrt(_3054);
                                float _3058 = _3057 * _3051;
                                float _3059 = _3057 * _3052;
                                float _3060 = _3057 * _3053;
                                float _3064 = 1.0 - (_3054 / (_2917 * _2917));
                                float _4151 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3069 = sqrt(_3054) * _2932.w;
                                float _3071 = 1.39999997615814208984375 / (_3069 + 1.39999997615814208984375);
                                float _3072 = _3071 * _3071;
                                float _3075 = ((1.0 - _3072) * dot(vec3(_3058, _3059, _3060), vec3(_442, _445, _448))) + _3072;
                                float _3078 = _3069 * _3069;
                                float _3082 = (fma(_2238, _2960.z, fma(_2237, _2960.y, _2960.x * _2236)) + _2960.w) / _3023;
                                float _3083 = (fma(_2238, _2976.z, fma(_2237, _2976.y, _2976.x * _2236)) + _2976.w) / _3023;
                                float _3087 = 1.0 - dot(vec2(_3082, _3083), vec2(_3082, _3083));
                                float _4167 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3089 = _3088 * (((isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))) * _3065) / ((_3078 * 0.699999988079071044921875) + 1.0));
                                float _3101 = exp2(log2(1.0 / ((_3078 * 3.5) + 5.0)) * 0.25);
                                float _3102 = 1.0 - _518;
                                float _3109 = sqrt(1.0 - ((1.0 - (_3102 * _3102)) * (1.0 - (_3101 * _3101))));
                                float _3110 = _3109 * _3109;
                                float _3111 = _3110 * _3110;
                                float _3112 = _3058 - _2528;
                                float _3113 = _3059 - _2529;
                                float _3114 = _3060 - _2530;
                                float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                                float _3122 = dot(vec3(_442, _445, _448), vec3((-0.0) - _2528, (-0.0) - _2529, (-0.0) - _2530));
                                float _4178 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3125 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3126 = dot(vec3(_442, _445, _448), vec3(_3118 * _3112, _3118 * _3113, _3118 * _3114));
                                float _4189 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3129 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3133 = ((_3129 * _3129) * (_3111 + (-1.0))) + 1.0;
                                float _3134 = _3071 * _3110;
                                float _3135 = _3134 * _3134;
                                float _3141 = ((1.0 - _3135) * dot(vec3(_442, _445, _448), vec3(_3058, _3059, _3060))) + _3135;
                                float _4200 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3142 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3143 = 1.0 - _3110;
                                float _3153 = (0.5 / (((_3142 * ((_3125 * _3143) + _3110)) + 9.9999999392252902907785028219223e-09) + (((_3142 * _3143) + _3110) * _3125))) * _3142;
                                float _4211 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3163 = (_3088 * _3065) * (((_3111 * 3.1415927410125732421875) * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) / ((_3133 * _3133) * ((_3078 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3089 * _2932.z;
                                frontier_phi_87_pred_1 = _3089 * _2932.y;
                                frontier_phi_87_pred_2 = _3089 * _2932.x;
                                frontier_phi_87_pred_3 = _3163 * _2944.z;
                                frontier_phi_87_pred_4 = _3163 * _2944.y;
                                frontier_phi_87_pred_5 = _3163 * _2944.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3172 = frontier_phi_87_pred;
                            _3171 = frontier_phi_87_pred_1;
                            _3170 = frontier_phi_87_pred_2;
                            _3169 = frontier_phi_87_pred_3;
                            _3168 = frontier_phi_87_pred_4;
                            _3167 = frontier_phi_87_pred_5;
                            _2874 = _3170 + _2887;
                            _2875 = _3171 + _2888;
                            _2876 = _3172 + _2889;
                            _2871 = _3167 + _2884;
                            _2872 = _3168 + _2885;
                            _2873 = _3169 + _2886;
                            if (_2891 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2891;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2876;
                        frontier_phi_81_pred_1 = _2875;
                        frontier_phi_81_pred_2 = _2874;
                        frontier_phi_81_pred_3 = _2873;
                        frontier_phi_81_pred_4 = _2872;
                        frontier_phi_81_pred_5 = _2871;
                    }
                    _2513 = frontier_phi_81_pred;
                    _2511 = frontier_phi_81_pred_1;
                    _2509 = frontier_phi_81_pred_2;
                    _2507 = frontier_phi_81_pred_3;
                    _2505 = frontier_phi_81_pred_4;
                    _2503 = frontier_phi_81_pred_5;
                    uint _2669 = _2668 + 1u;
                    if (_2669 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2662 = _2503;
                        _2663 = _2505;
                        _2664 = _2507;
                        _2665 = _2509;
                        _2666 = _2511;
                        _2667 = _2513;
                        _2668 = _2669;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2509;
                frontier_phi_62_63_ladder_1 = _2513;
                frontier_phi_62_63_ladder_2 = _2511;
                frontier_phi_62_63_ladder_3 = _2507;
                frontier_phi_62_63_ladder_4 = _2505;
                frontier_phi_62_63_ladder_5 = _2503;
            }
            else
            {
                frontier_phi_62_63_ladder = _2388;
                frontier_phi_62_63_ladder_1 = _2392;
                frontier_phi_62_63_ladder_2 = _2390;
                frontier_phi_62_63_ladder_3 = _2386;
                frontier_phi_62_63_ladder_4 = _2384;
                frontier_phi_62_63_ladder_5 = _2382;
            }
            _2502 = frontier_phi_62_63_ladder_5;
            _2504 = frontier_phi_62_63_ladder_4;
            _2506 = frontier_phi_62_63_ladder_3;
            _2508 = frontier_phi_62_63_ladder;
            _2510 = frontier_phi_62_63_ladder_2;
            _2512 = frontier_phi_62_63_ladder_1;
        }
        float _2517 = isnan(1.0) ? _502 : (isnan(_502) ? 1.0 : min(_502, 1.0));
        _2294 = (_2517 * _2508) + _1728;
        _2296 = (_2517 * _2510) + _1730;
        _2298 = (_2517 * _2512) + _1732;
        _2300 = ((_2502 * _487) * _2517) + _2076;
        _2302 = ((_2504 * _489) * _2517) + _2078;
        _2304 = ((_2506 * _490) * _2517) + _2080;
    }
    else
    {
        _2294 = _1728;
        _2296 = _1730;
        _2298 = _1732;
        _2300 = _2076;
        _2302 = _2078;
        _2304 = _2080;
    }
    float _4227 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4238 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _4249 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _2321 = ((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2294 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _502))) + ((_2300 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1339)) * cbPerFrame._m0[3u].x);
    float _2322 = ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2296 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _502))) + ((_2302 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1339)) * cbPerFrame._m0[3u].x);
    float _2323 = ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2298 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _502))) + ((_2304 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1339)) * cbPerFrame._m0[3u].x);
    uint _2324 = _461 + 6u;
    float _2332 = _421 / cbSceneParam._m0[86u].x;
    float _2333 = _422 / cbSceneParam._m0[86u].y;
    vec4 _2347 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, (log2((isnan(cbSceneParam._m0[77u].w) ? _345 : (isnan(_345) ? cbSceneParam._m0[77u].w : min(_345, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2349 = _2347.x;
    float _2350 = _2347.y;
    float _2351 = _2347.z;
    float _2352 = _2347.w;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_345 > cbSceneParam._m0[78u].w)
    {
        float _2407 = isnan(_345) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _345 : min(cbSceneParam._m0[80u].w, _345));
        float _2408 = _2407 / _345;
        float _2419 = _2408 * _396;
        float _2420 = _397 * _2408;
        float _2421 = (-0.0) - _2420;
        float _2422 = _2408 * _398;
        float _2424 = (cbSceneParam._m0[77u].w * _2421) / _2407;
        float _2425 = _2424 + cbSceneParam._m0[79u].w;
        float _2426 = cbSceneParam._m0[79u].w - _2420;
        float _2432 = sqrt(((_2419 * _2419) + (_2420 * _2420)) + (_2422 * _2422));
        float _2435 = (1.0 - (cbSceneParam._m0[77u].w / _2407)) * _2432;
        float _2440 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2442 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2619;
        if (abs((_2421 - _2424) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2619 = ((((_2425 > 0.0) ? exp2(_2440 * _2425) : (2.0 - exp2(_2442 * _2425))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2435;
        }
        else
        {
            float _2563 = 1.0 / cbSceneParam._m0[80u].x;
            float _2564 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : max(_2425, _2426));
            float _2565 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : min(_2425, _2426));
            float _2574 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : min(_2564, 0.0));
            float _2575 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : min(_2565, 0.0));
            _2619 = ((abs(_2432 / _2421) * cbSceneParam._m0[80u].y) * ((((_2574 - _2575) * 2.0) - ((exp2(_2440 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0)))) - exp2(_2440 * (isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0))))) * _2563)) - ((exp2(_2442 * _2574) - exp2(_2442 * _2575)) * _2563))) + (_2435 * cbSceneParam._m0[80u].z);
        }
        vec4 _2621 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, 1.0), 0.0);
        float _2630 = exp2((_2619 * (-1.44269502162933349609375)) * (1.0 - _2621.w));
        float _2631 = log2(_2630);
        float _2647 = log2(_2352);
        _2444 = (exp2(_2647 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2631 * cbSceneParam._m0[78u].x)) * _2621.x) / cbSceneParam._m0[78u].x)) + _2349;
        _2446 = (exp2(_2647 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2631 * cbSceneParam._m0[78u].y)) * _2621.y) / cbSceneParam._m0[78u].y)) + _2350;
        _2448 = (exp2(_2647 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2631 * cbSceneParam._m0[78u].z)) * _2621.z) / cbSceneParam._m0[78u].z)) + _2351;
        _2450 = _2630 * _2352;
    }
    else
    {
        _2444 = _2349;
        _2446 = _2350;
        _2448 = _2351;
        _2450 = _2352;
    }
    bool _2657;
    vec4 _2460;
    vec4 _2482;
    float _2484;
    float _2488;
    float _2489;
    float _2490;
    float _2491;
    bool _2501;
    for (;;)
    {
        _2460 = cbMatDynParam._m0[0u];
        float _2462 = roundEven(_2460.y);
        bool _2463 = _2462 == 3.0;
        float _2464 = log2(_2450);
        float _2471 = exp2(_2464 * cbSceneParam._m0[78u].x) * _2321;
        float _2472 = exp2(_2464 * cbSceneParam._m0[78u].y) * _2322;
        float _2473 = exp2(_2464 * cbSceneParam._m0[78u].z) * _2323;
        float _2480 = _409 + (-0.5);
        _2482 = cbMtdParam._m0[1u];
        _2484 = _2482.y * _2480;
        float _2487 = (_2462 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2488 = _2487 * (_2463 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2444)));
        _2489 = _2487 * (_2463 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2446)));
        _2490 = _2487 * (_2463 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2448)));
        _2491 = _2480 * 0.999000012874603271484375;
        _2501 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2501)
        {
            if ((cbInstanceData._m0[_461 + 7u].x + _2491) < 0.5)
            {
                _2657 = true;
                break;
            }
        }
        uint _2598 = _463 + uint(_2460.w);
        if ((cbInstanceData._m0[_2598].w < 1.0) && ((cbInstanceData._m0[_2598].w + _2491) < 0.5))
        {
            _2657 = true;
            break;
        }
        if ((_2484 + _243) < _2482.x)
        {
            _2657 = true;
            break;
        }
        _2657 = false;
        break;
    }
    float _2862;
    if (_2657)
    {
        discard_state = true;
        _2862 = 0.0;
    }
    else
    {
        _2862 = cbInstanceData._m0[_2324].w;
    }
    SV_Target.x = _2488;
    SV_Target.y = _2489;
    SV_Target.z = _2490;
    SV_Target.w = _2862;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2324].w;
    discard_exit();
}


