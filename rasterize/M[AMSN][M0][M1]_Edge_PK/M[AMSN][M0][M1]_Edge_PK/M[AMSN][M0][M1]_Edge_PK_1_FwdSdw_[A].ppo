#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _871;
float _3523;
float _3524;
float _3525;
float _3526;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _237 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _237.w;
    float _244 = _237.x * cbMtdParam._m0[9u].x;
    float _245 = _237.y * cbMtdParam._m0[9u].y;
    float _246 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _258 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _258.z;
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _3535 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))));
    float _280 = gl_FragCoord.x * 0.125;
    float _282 = gl_FragCoord.y * 0.125;
    float _293 = fma(_275, _215, fma(_268, _207 * TANGENT.x, (_193 * _186) * _266));
    float _296 = fma(_275, _216, fma(_268, _207 * TANGENT.y, (_193 * _187) * _266));
    float _299 = fma(_275, _217, fma(_268, _207 * TANGENT.z, (_193 * _188) * _266));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3546 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _307 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _3557 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3568 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3579 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    if (!(cbMtdParam._m0[10u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_280, _282)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _330 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _371 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _381 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _371);
    float _382 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _371);
    float _383 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _371);
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _388 = _381 * _387;
    float _389 = _382 * _387;
    float _390 = _383 * _387;
    vec4 _392 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_280, _282));
    float _394 = _392.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _552 = sqrt(((_381 * _381) + (_382 * _382)) + (_383 * _383));
        float _558 = (cbMatDynParam._m0[5u].x * _552) + cbMatDynParam._m0[5u].y;
        float _3590 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        float _559 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _563 = (cbMatDynParam._m0[5u].z * _552) + cbMatDynParam._m0[5u].w;
        float _3601 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) - _559)) + _559) < ((_394 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _427 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _430 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _433 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    uint _446 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = _446 + 9u;
    uint _449 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _455 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * cbInstanceData._m0[_449].x;
    float _456 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * cbInstanceData._m0[_449].y;
    float _457 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) * cbInstanceData._m0[_449].z;
    float _3612 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _3623 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _3634 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    vec4 _469 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _472 = _469.x * TEXCOORD.z;
    float _473 = dot(vec3(_304, _305, _306), vec3(_388, _389, _390));
    float _476 = _473 * 2.0;
    float _480 = (_476 * _304) - _388;
    float _481 = (_476 * _305) - _389;
    float _482 = (_476 * _306) - _390;
    float _486 = abs(dot(vec3(_388, _389, _390), vec3(_304, _305, _306)));
    float _3645 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _488 = sqrt(_307);
    float _501 = exp2((_488 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_488 * 3.0));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _870;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _595 = fma(_541, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _533));
        float _599 = fma(_541, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _533));
        float _603 = fma(_541, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _533));
        float _628 = _533 + _304;
        float _629 = _537 + _305;
        float _630 = _541 + _306;
        float _640 = fma(_630, cbModelParam._m0[26u].z, fma(_629, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _628)) - _595;
        float _641 = fma(_630, cbModelParam._m0[27u].z, fma(_629, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _628)) - _599;
        float _642 = fma(_630, cbModelParam._m0[28u].z, fma(_629, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _628)) - _603;
        float _646 = inversesqrt(dot(vec3(_640, _641, _642), vec3(_640, _641, _642)));
        float _659 = ((_646 * _640) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_595 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _660 = ((_646 * _641) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_599 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _661 = ((_646 * _642) / cbModelParam._m0[34u].z) + ((((((_603 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        float _698 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_664.x + (-0.5));
        float _700 = _698 * (_664.y + (-0.5));
        float _701 = _698 * (_664.z + (-0.5));
        float _708 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_671.x + (-0.5));
        float _710 = _708 * (_671.y + (-0.5));
        float _711 = _708 * (_671.z + (-0.5));
        float _718 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_678.x + (-0.5));
        float _720 = _718 * (_678.y + (-0.5));
        float _721 = _718 * (_678.z + (-0.5));
        float _728 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_685.x + (-0.5));
        float _730 = _728 * (_685.y + (-0.5));
        float _731 = _728 * (_685.z + (-0.5));
        float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = _699 * 0.5;
        float _736 = _709 * 0.5;
        float _737 = _719 * 0.5;
        float _738 = dot(vec3(_735, _736, _737), vec3(_735, _736, _737));
        float _743 = (_738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_738);
        float _752 = (dot(vec3(_304, _305, _306), vec3(_743 * _735, _743 * _736, _743 * _737)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _762 = sqrt(((_736 * _736) + (_735 * _735)) + (_737 * _737)) / (_732 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _764 = _763 * 2.0;
        float _768 = (1.0 - _763) / (_763 + 1.0);
        float _3693 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _778 = ((((1.0 - _769) * (_764 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_764 + 1.0))) + _769) * _732;
        float _779 = _700 * 0.5;
        float _780 = _710 * 0.5;
        float _781 = _720 * 0.5;
        float _782 = dot(vec3(_779, _780, _781), vec3(_779, _780, _781));
        float _787 = (_782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_782);
        float _795 = (dot(vec3(_304, _305, _306), vec3(_787 * _779, _787 * _780, _787 * _781)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _804 = sqrt(((_780 * _780) + (_779 * _779)) + (_781 * _781)) / (_733 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3726 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_806 + 1.0))) + _811) * _733;
        float _821 = _701 * 0.5;
        float _822 = _711 * 0.5;
        float _823 = _721 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _837 = (dot(vec3(_304, _305, _306), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _846 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3759 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_848 + 1.0))) + _853) * _734;
        _870 = _701;
        _872 = _700;
        _873 = _699;
        _874 = _711;
        _875 = _710;
        _876 = _709;
        _877 = _721;
        _878 = _720;
        _879 = _719;
        _880 = _734;
        _881 = _733;
        _882 = _732;
        _883 = cbModelParam._m0[36u].z * (isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0)));
        _884 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
    }
    else
    {
        _870 = _871;
        _872 = _871;
        _873 = _871;
        _874 = _871;
        _875 = _871;
        _876 = _871;
        _877 = _871;
        _878 = _871;
        _879 = _871;
        _880 = _871;
        _881 = _871;
        _882 = _871;
        _883 = 0.0;
        _884 = 0.0;
        _885 = 0.0;
    }
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _911 = fma(_541, cbModelParam._m0[30u].z, fma(_537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _533));
        float _915 = fma(_541, cbModelParam._m0[31u].z, fma(_537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _533));
        float _919 = fma(_541, cbModelParam._m0[32u].z, fma(_537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _533));
        float _942 = _533 + _304;
        float _943 = _537 + _305;
        float _944 = _541 + _306;
        float _954 = fma(_944, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942)) - _911;
        float _955 = fma(_944, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942)) - _915;
        float _956 = fma(_944, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942)) - _919;
        float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
        float _973 = ((_960 * _954) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_911 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_960 * _955) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_915 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_960 * _956) / cbModelParam._m0[35u].z) + ((((((_919 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        float _1010 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_977.x + (-0.5));
        float _1012 = _1010 * (_977.y + (-0.5));
        float _1013 = _1010 * (_977.z + (-0.5));
        float _1020 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_984.x + (-0.5));
        float _1022 = _1020 * (_984.y + (-0.5));
        float _1023 = _1020 * (_984.z + (-0.5));
        float _1030 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_991.x + (-0.5));
        float _1032 = _1030 * (_991.y + (-0.5));
        float _1033 = _1030 * (_991.z + (-0.5));
        float _1040 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_998.x + (-0.5));
        float _1042 = _1040 * (_998.y + (-0.5));
        float _1043 = _1040 * (_998.z + (-0.5));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1011 * 0.5;
        float _1048 = _1021 * 0.5;
        float _1049 = _1031 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_304, _305, _306), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3822 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1074 + 1.0))) + _1079) * _1044;
        float _1089 = _1012 * 0.5;
        float _1090 = _1022 * 0.5;
        float _1091 = _1032 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_304, _305, _306), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3855 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1116 + 1.0))) + _1121) * _1045;
        float _1131 = _1013 * 0.5;
        float _1132 = _1023 * 0.5;
        float _1133 = _1033 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_304, _305, _306), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3888 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1158 + 1.0))) + _1163) * _1046;
        _1180 = _1013;
        _1181 = _1012;
        _1182 = _1011;
        _1183 = _1023;
        _1184 = _1022;
        _1185 = _1021;
        _1186 = _1033;
        _1187 = _1032;
        _1188 = _1031;
        _1189 = _1046;
        _1190 = _1045;
        _1191 = _1044;
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
    }
    else
    {
        _1180 = _871;
        _1181 = _871;
        _1182 = _871;
        _1183 = _871;
        _1184 = _871;
        _1185 = _871;
        _1186 = _871;
        _1187 = _871;
        _1188 = _871;
        _1189 = _871;
        _1190 = _871;
        _1191 = _871;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _883)) + _883;
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _884)) + _884;
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _885)) + _885;
    float _1227 = fma(_1206, cbSceneParam._m0[89u].z, fma(_1205, cbSceneParam._m0[89u].y, _1204 * cbSceneParam._m0[89u].x));
    float _1230 = fma(_1206, cbSceneParam._m0[90u].z, fma(_1205, cbSceneParam._m0[90u].y, _1204 * cbSceneParam._m0[90u].x));
    float _1233 = fma(_1206, cbSceneParam._m0[91u].z, fma(_1205, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1204));
    float _1248 = _480 * 0.5;
    float _1249 = _481 * 0.5;
    float _1250 = _482 * 0.5;
    float _1251 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1254 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1257 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1291;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1264 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_870, _874, _877, _880));
        float _1268 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_872, _875, _878, _881));
        float _1272 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_873, _876, _879, _882));
        float _1279 = dot(vec4(cbModelParam._m0[39u]), vec4(_1248, _1249, _1250, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1302;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1293 = dot(vec4(cbModelParam._m0[40u]), vec4(_1248, _1249, _1250, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1293) ? 0.0 : (isnan(0.0) ? _1293 : max(0.0, _1293))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1306 = (_1302 * cbModelParam._m0[1u].x) + (_1291 * (1.0 - cbModelParam._m0[1u].x));
    float _1316 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _307);
    float _1317 = isnan(_1316) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1316 : min(cbModelParam._m0[25u].z, _1316));
    float _1399;
    float _1401;
    float _1403;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1366 = fma(_541, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533)) + cbModelParam._m0[13u].w;
        float _1370 = fma(_541, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533)) + cbModelParam._m0[14u].w;
        float _1374 = fma(_541, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533)) + cbModelParam._m0[15u].w;
        float _1377 = fma(_482, cbModelParam._m0[13u].z, fma(_481, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _480));
        float _1380 = fma(_482, cbModelParam._m0[14u].z, fma(_481, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _480));
        float _1383 = fma(_482, cbModelParam._m0[15u].z, fma(_481, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _480));
        float _1411;
        if (_1377 > 0.0)
        {
            _1411 = abs((1.0 - _1366) / _1377);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1366 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1411 = frontier_phi_21_19_ladder;
        }
        float _1585;
        if (_1380 > 0.0)
        {
            _1585 = abs((1.0 - _1370) / _1380);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1370 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1585 = frontier_phi_30_26_ladder;
        }
        float _1881;
        if (_1383 > 0.0)
        {
            _1881 = abs((1.0 - _1374) / _1383);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1374 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1881 = frontier_phi_42_37_ladder;
        }
        float _1883 = isnan(_1585) ? _1411 : (isnan(_1411) ? _1585 : min(_1411, _1585));
        float _1884 = isnan(_1881) ? _1883 : (isnan(_1883) ? _1881 : min(_1883, _1881));
        float _1888 = (_1884 * _1377) + _1366;
        float _1889 = (_1884 * _1380) + _1370;
        float _1890 = (_1884 * _1383) + _1374;
        float _1891 = _1884 * 9.9999997473787516355514526367188e-05;
        float _1893 = (-1.0) - _1891;
        float _1895 = _1891 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_1890 > _1895) || ((_1890 < _1893) || ((_1889 > _1895) || ((_1889 < _1893) || ((_1888 < _1893) || (_1888 > _1895))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2035 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1890, cbModelParam._m0[9u].z, fma(_1889, cbModelParam._m0[9u].y, _1888 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1890, cbModelParam._m0[10u].z, fma(_1889, cbModelParam._m0[10u].y, _1888 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1890, cbModelParam._m0[11u].z, fma(_1889, cbModelParam._m0[11u].y, _1888 * cbModelParam._m0[11u].x))), _1317);
            frontier_phi_20_42_ladder = _2035.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2035.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2035.x * cbModelParam._m0[1u].y;
        }
        _1399 = frontier_phi_20_42_ladder_2;
        _1401 = frontier_phi_20_42_ladder_1;
        _1403 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1387 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_480, _481, _482), _1317);
        _1399 = _1387.x * cbModelParam._m0[1u].y;
        _1401 = _1387.y * cbModelParam._m0[1u].y;
        _1403 = _1387.z * cbModelParam._m0[1u].y;
    }
    float _1407 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _307);
    float _1408 = isnan(_1407) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1407 : min(cbModelParam._m0[25u].w, _1407));
    float _1501;
    float _1503;
    float _1505;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1465 = fma(_541, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533)) + cbModelParam._m0[21u].w;
        float _1469 = fma(_541, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533)) + cbModelParam._m0[22u].w;
        float _1473 = fma(_541, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533)) + cbModelParam._m0[23u].w;
        float _1476 = fma(_482, cbModelParam._m0[21u].z, fma(_481, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _480));
        float _1479 = fma(_482, cbModelParam._m0[22u].z, fma(_481, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _480));
        float _1482 = fma(_482, cbModelParam._m0[23u].z, fma(_481, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _480));
        float _1590;
        if (_1476 > 0.0)
        {
            _1590 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1590 = frontier_phi_32_28_ladder;
        }
        float _1908;
        if (_1479 > 0.0)
        {
            _1908 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _1908 = frontier_phi_44_39_ladder;
        }
        float _2235;
        if (_1482 > 0.0)
        {
            _2235 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2235 = frontier_phi_54_51_ladder;
        }
        float _2237 = isnan(_1908) ? _1590 : (isnan(_1590) ? _1908 : min(_1590, _1908));
        float _2238 = isnan(_2235) ? _2237 : (isnan(_2237) ? _2235 : min(_2237, _2235));
        float _2242 = (_2238 * _1476) + _1465;
        float _2243 = (_2238 * _1479) + _1469;
        float _2244 = (_2238 * _1482) + _1473;
        float _2245 = _2238 * 9.9999997473787516355514526367188e-05;
        float _2246 = (-1.0) - _2245;
        float _2248 = _2245 + 1.0;
        float frontier_phi_29_54_ladder;
        float frontier_phi_29_54_ladder_1;
        float frontier_phi_29_54_ladder_2;
        if ((_2244 > _2248) || ((_2244 < _2246) || ((_2243 > _2248) || ((_2243 < _2246) || ((_2242 < _2246) || (_2242 > _2248))))))
        {
            frontier_phi_29_54_ladder = 0.0;
            frontier_phi_29_54_ladder_1 = 0.0;
            frontier_phi_29_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2244, cbModelParam._m0[17u].z, fma(_2243, cbModelParam._m0[17u].y, _2242 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2244, cbModelParam._m0[18u].z, fma(_2243, cbModelParam._m0[18u].y, _2242 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2244, cbModelParam._m0[19u].z, fma(_2243, cbModelParam._m0[19u].y, _2242 * cbModelParam._m0[19u].x))), _1408);
            frontier_phi_29_54_ladder = _2362.z * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_1 = _2362.y * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_2 = _2362.x * cbModelParam._m0[1u].z;
        }
        _1501 = frontier_phi_29_54_ladder_2;
        _1503 = frontier_phi_29_54_ladder_1;
        _1505 = frontier_phi_29_54_ladder;
    }
    else
    {
        vec4 _1485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_480, _481, _482), _1408);
        _1501 = _1485.x * cbModelParam._m0[1u].z;
        _1503 = _1485.y * cbModelParam._m0[1u].z;
        _1505 = _1485.z * cbModelParam._m0[1u].z;
    }
    float _1517 = ((((1.0 - _501) * ((_488 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_501 * _488)) * _472;
    float _1518 = _1517 * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1519 = _1517 * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1520 = _1517 * ((cbModelParam._m0[1u].w * (_1505 - _1403)) + _1403);
    float _1523 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, _1518 * cbSceneParam._m0[91u].x));
    float _1564 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1568 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1572 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1576 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1577 = _1564 / _1576;
    float _1578 = _1568 / _1576;
    float _1579 = _1572 / _1576;
    float _1726;
    float _1727;
    float _1728;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1606 = ((uint(_1579 > cbSceneParam._m0[59u].y) + uint(_1579 > cbSceneParam._m0[59u].x)) + uint(_1579 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1607 = _1606 + 43u;
        uint _1615 = _1606 + 44u;
        uint _1623 = _1606 + 45u;
        uint _1631 = _1606 + 46u;
        float _1642 = fma(_1576, cbSceneParam._m0[_1607].w, fma(_1572, cbSceneParam._m0[_1607].z, fma(_1568, cbSceneParam._m0[_1607].y, _1564 * cbSceneParam._m0[_1607].x)));
        float _1646 = fma(_1576, cbSceneParam._m0[_1615].w, fma(_1572, cbSceneParam._m0[_1615].z, fma(_1568, cbSceneParam._m0[_1615].y, _1564 * cbSceneParam._m0[_1615].x)));
        float _1654 = fma(_1576, cbSceneParam._m0[_1631].w, fma(_1572, cbSceneParam._m0[_1631].z, fma(_1568, cbSceneParam._m0[_1631].y, _1564 * cbSceneParam._m0[_1631].x)));
        float _1659 = cbSceneParam._m0[33u].z * _1654;
        float _1661 = cbSceneParam._m0[33u].w * _1654;
        float _1664 = fma(_1576, cbSceneParam._m0[_1623].w, fma(_1572, cbSceneParam._m0[_1623].z, fma(_1568, cbSceneParam._m0[_1623].y, _1564 * cbSceneParam._m0[_1623].x))) / _1654;
        float _1712 = (cbSceneParam._m0[33u].x - sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579))) * cbSceneParam._m0[33u].y;
        float _4014 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1719 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1659 + _1642) / _1654, (_1661 + _1646) / _1654), _1664), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1661 + _1642) / _1654, (_1646 - _1659) / _1654), _1664), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 - _1659) / _1654, (_1646 - _1661) / _1654), _1664), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 - _1661) / _1654, (_1659 + _1646) / _1654), _1664), 0.0)).x), vec4(0.25)));
        _1726 = 1.0 - (_1719 * cbSceneParam._m0[34u].x);
        _1727 = 1.0 - (_1719 * cbSceneParam._m0[34u].y);
        _1728 = 1.0 - (_1719 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1726 = 1.0;
        _1727 = 1.0;
        _1728 = 1.0;
    }
    float _1792;
    float _1794;
    float _1796;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1780 = fma(_1576, cbSceneParam._m0[63u].w, fma(_1572, cbSceneParam._m0[63u].z, fma(_1568, cbSceneParam._m0[63u].y, _1564 * cbSceneParam._m0[63u].x)));
        float _1781 = fma(_1576, cbSceneParam._m0[60u].w, fma(_1572, cbSceneParam._m0[60u].z, fma(_1568, cbSceneParam._m0[60u].y, _1564 * cbSceneParam._m0[60u].x))) / _1780;
        float _1782 = fma(_1576, cbSceneParam._m0[61u].w, fma(_1572, cbSceneParam._m0[61u].z, fma(_1568, cbSceneParam._m0[61u].y, _1564 * cbSceneParam._m0[61u].x))) / _1780;
        float frontier_phi_41_40_ladder;
        float frontier_phi_41_40_ladder_1;
        float frontier_phi_41_40_ladder_2;
        if ((((_1781 >= cbSceneParam._m0[64u].x) && (_1782 >= cbSceneParam._m0[64u].y)) && (_1781 <= cbSceneParam._m0[64u].z)) && (_1782 <= cbSceneParam._m0[64u].w))
        {
            float _1921 = fma(_1576, cbSceneParam._m0[62u].w, fma(_1572, cbSceneParam._m0[62u].z, fma(_1568, cbSceneParam._m0[62u].y, _1564 * cbSceneParam._m0[62u].x))) / _1780;
            float _1925 = isnan(cbSceneParam._m0[41u].w) ? _1921 : (isnan(_1921) ? cbSceneParam._m0[41u].w : max(_1921, cbSceneParam._m0[41u].w));
            float _1968 = (cbSceneParam._m0[33u].x - sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579))) * cbSceneParam._m0[33u].y;
            float _4030 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
            float _1975 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1781, cbSceneParam._m0[33u].w + _1782), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1781, _1782 - cbSceneParam._m0[33u].z), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1781 - cbSceneParam._m0[33u].z, _1782 - cbSceneParam._m0[33u].w), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1781 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1782), _1925), 0.0)).x), vec4(0.25)));
            float _1979 = 1.0 - (_1975 * cbSceneParam._m0[34u].x);
            float _1980 = 1.0 - (_1975 * cbSceneParam._m0[34u].y);
            float _1981 = 1.0 - (_1975 * cbSceneParam._m0[34u].z);
            frontier_phi_41_40_ladder = isnan(_1980) ? _1727 : (isnan(_1727) ? _1980 : min(_1727, _1980));
            frontier_phi_41_40_ladder_1 = isnan(_1979) ? _1726 : (isnan(_1726) ? _1979 : min(_1726, _1979));
            frontier_phi_41_40_ladder_2 = isnan(_1981) ? _1728 : (isnan(_1728) ? _1981 : min(_1728, _1981));
        }
        else
        {
            frontier_phi_41_40_ladder = _1727;
            frontier_phi_41_40_ladder_1 = _1726;
            frontier_phi_41_40_ladder_2 = _1728;
        }
        _1792 = frontier_phi_41_40_ladder_1;
        _1794 = frontier_phi_41_40_ladder;
        _1796 = frontier_phi_41_40_ladder_2;
    }
    else
    {
        _1792 = _1726;
        _1794 = _1727;
        _1796 = _1728;
    }
    uvec4 _1801 = floatBitsToUint(cbInstanceData._m0[_446 + 5u]);
    uint _1803 = _1801.x * 14u;
    uint _1804 = _1803 + 13u;
    float _1811 = _472 + (-1.0);
    float _1816 = (cbLight._m0[_1804].x * _1811) + 1.0;
    float _1817 = (cbLight._m0[_1804].y * _1811) + 1.0;
    float _1818 = (cbLight._m0[_1804].z * _1811) + 1.0;
    float _1819 = (cbLight._m0[_1804].w * _1811) + 1.0;
    uint _1820 = _1803 + 5u;
    float _1826 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
    uint _1830 = _1803 + 4u;
    float _1840 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
    uint _1844 = _1803 | 1u;
    float _1855 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_304, _305, _306));
    float _1858 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_304, _305, _306));
    float _4066 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _4077 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1863 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.3183098733425140380859375;
    float _1865 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.3183098733425140380859375;
    float _1872 = ((cbLight._m0[_1820].x * _1826) * _1865) + (((cbLight._m0[_1830].x * _1792) * _1840) * _1863);
    float _1873 = ((_1826 * cbLight._m0[_1820].y) * _1865) + (((cbLight._m0[_1830].y * _1794) * _1840) * _1863);
    float _1874 = ((_1826 * cbLight._m0[_1820].z) * _1865) + (((cbLight._m0[_1830].z * _1796) * _1840) * _1863);
    uvec4 _1878 = floatBitsToUint(cbLight._m0[_1803 + 12u]);
    bool _1880 = _1878.x == 0u;
    float _1982;
    float _1984;
    float _1986;
    if (_1880)
    {
        _1982 = _1872;
        _1984 = _1873;
        _1986 = _1874;
    }
    else
    {
        uint _1990 = _1803 + 6u;
        float _2006 = (dot(vec3(cbLight._m0[_1803 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _2007 = _2006 * _2006;
        float _4088 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2008 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2009 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _1982 = (((cbLight._m0[_1990].x * 0.3183098733425140380859375) * _2008) * _2009) + _1872;
        _1984 = (((cbLight._m0[_1990].y * 0.3183098733425140380859375) * _2008) * _2009) + _1873;
        _1986 = (((cbLight._m0[_1990].z * 0.3183098733425140380859375) * _2008) * _2009) + _1874;
    }
    bool _1989 = _1878.y == 0u;
    float _2044;
    float _2046;
    float _2048;
    if (_1989)
    {
        _2044 = _1982;
        _2046 = _1984;
        _2048 = _1986;
    }
    else
    {
        uint _2206 = _1803 + 7u;
        float _2222 = (dot(vec3(cbLight._m0[_1803 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _2223 = _2222 * _2222;
        float _4104 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2224 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2225 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _2044 = (((cbLight._m0[_2206].x * 0.3183098733425140380859375) * _2224) * _2225) + _1982;
        _2046 = (((cbLight._m0[_2206].y * 0.3183098733425140380859375) * _2224) * _2225) + _1984;
        _2048 = (((cbLight._m0[_2206].z * 0.3183098733425140380859375) * _2224) * _2225) + _1986;
    }
    uint _2051 = _1803 + 8u;
    float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1803].w)) * _307) * 0.949999988079071044921875);
    float _2065 = _2064 * _2064;
    float _2066 = cbLight._m0[_1803].x + _388;
    float _2067 = cbLight._m0[_1803].y + _389;
    float _2068 = cbLight._m0[_1803].z + _390;
    float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
    float _2073 = _2072 * _2066;
    float _2074 = _2072 * _2067;
    float _2075 = _2072 * _2068;
    float _2076 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1803].xyz));
    float _4120 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _4131 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _2080 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2081 = dot(vec3(_304, _305, _306), vec3(_2073, _2074, _2075));
    float _4142 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2085 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_2073, _2074, _2075));
    float _4153 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2089 = _2065 * _2065;
    float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
    float _2104 = (exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2105 = 1.0 - _2065;
    float _2116 = (0.5 / (((_2080 * ((_2079 * _2105) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2105) + _2065) * _2079))) * _2079;
    float _4164 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2118 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
    uint _2132 = _1803 + 9u;
    float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _307) * 0.949999988079071044921875);
    float _2144 = _2143 * _2143;
    float _2145 = cbLight._m0[_1844].x + _388;
    float _2146 = cbLight._m0[_1844].y + _389;
    float _2147 = cbLight._m0[_1844].z + _390;
    float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
    float _2152 = _2151 * _2145;
    float _2153 = _2151 * _2146;
    float _2154 = _2151 * _2147;
    float _2155 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1844].xyz));
    float _4175 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2159 = dot(vec3(_304, _305, _306), vec3(_2152, _2153, _2154));
    float _4186 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2163 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2152, _2153, _2154));
    float _4197 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2167 = _2144 * _2144;
    float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
    float _2180 = (exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2181 = 1.0 - _2144;
    float _2191 = (0.5 / (((_2080 * ((_2158 * _2181) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2181) + _2144) * _2158))) * _2158;
    float _4208 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
    float _2203 = (((_2180 * cbLight._m0[_2132].x) * _2193) * _1826) + ((((cbLight._m0[_2051].x * _1792) * _2104) * _2118) * _1840);
    float _2204 = (((_2180 * cbLight._m0[_2132].y) * _2193) * _1826) + ((((cbLight._m0[_2051].y * _1794) * _2104) * _2118) * _1840);
    float _2205 = (((_2180 * cbLight._m0[_2132].z) * _2193) * _1826) + ((((cbLight._m0[_2051].z * _1796) * _2104) * _2118) * _1840);
    float _2261;
    float _2263;
    float _2265;
    if (_1880)
    {
        _2261 = _2203;
        _2263 = _2204;
        _2265 = _2205;
    }
    else
    {
        uint _2267 = _1803 + 2u;
        uint _2271 = _1803 + 10u;
        float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _307) * 0.949999988079071044921875);
        float _2286 = _2285 * _2285;
        float _2287 = cbLight._m0[_2267].x + _388;
        float _2288 = cbLight._m0[_2267].y + _389;
        float _2289 = cbLight._m0[_2267].z + _390;
        float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
        float _2294 = _2293 * _2287;
        float _2295 = _2293 * _2288;
        float _2296 = _2293 * _2289;
        float _2297 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2267].xyz));
        float _4219 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2301 = dot(vec3(_304, _305, _306), vec3(_2294, _2295, _2296));
        float _4230 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2305 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2294, _2295, _2296));
        float _4241 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2309 = _2286 * _2286;
        float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
        float _2322 = (exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2323 = 1.0 - _2286;
        float _2333 = (0.5 / (((_2080 * ((_2300 * _2323) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2323) + _2286) * _2300))) * _2300;
        float _4252 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _2261 = (((_2322 * cbLight._m0[_2271].x) * _2335) * _2336) + _2203;
        _2263 = (((_2322 * cbLight._m0[_2271].y) * _2335) * _2336) + _2204;
        _2265 = (((_2322 * cbLight._m0[_2271].z) * _2335) * _2336) + _2205;
    }
    float _2367;
    float _2369;
    float _2371;
    if (_1989)
    {
        _2367 = _2261;
        _2369 = _2263;
        _2371 = _2265;
    }
    else
    {
        uint _2378 = _1803 + 3u;
        uint _2382 = _1803 + 11u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _307) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _388;
        float _2399 = cbLight._m0[_2378].y + _389;
        float _2400 = cbLight._m0[_2378].z + _390;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2378].xyz));
        float _4268 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2412 = dot(vec3(_304, _305, _306), vec3(_2405, _2406, _2407));
        float _4279 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4290 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2433 = (exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2434 = 1.0 - _2397;
        float _2444 = (0.5 / (((_2080 * ((_2411 * _2434) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2434) + _2397) * _2411))) * _2411;
        float _4301 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _2367 = (((_2433 * cbLight._m0[_2382].x) * _2446) * _2447) + _2261;
        _2369 = (((_2433 * cbLight._m0[_2382].y) * _2446) * _2447) + _2263;
        _2371 = (((_2433 * cbLight._m0[_2382].z) * _2446) * _2447) + _2265;
    }
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_1801.y == 0u)
    {
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.x;
        uint _2480 = uint((float(_2468.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2469))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2469)));
        float _2490 = (log2(_1579 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2491 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        uint _2494 = uint(isnan(14.0) ? _2491 : (isnan(_2491) ? 14.0 : min(_2491, 14.0)));
        uvec4 _2499 = texelFetch(g_lightClusterGridBuffer, int(((_2494 << 2u) + (_2480 << 6u)) >> 2u));
        uint _2500 = _2499.x;
        uint _2501 = _2468.z;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        if (((((1u << ((_2501 >> 4u) & 15u)) + 4294967295u) & _2500) == 0u) || ((_2501 & 240u) == 0u))
        {
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
        }
        else
        {
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            uint _2737 = 0u;
            uint _2746;
            bool _2747;
            for (;;)
            {
                _2746 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2737 << 2u)) >> 2u)).x;
                _2747 = _2746 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2747)
                {
                    frontier_phi_75_pred = _2736;
                    frontier_phi_75_pred_1 = _2735;
                    frontier_phi_75_pred_2 = _2734;
                    frontier_phi_75_pred_3 = _2733;
                    frontier_phi_75_pred_4 = _2732;
                    frontier_phi_75_pred_5 = _2731;
                }
                else
                {
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    uint _2882;
                    _2876 = _2731;
                    _2877 = _2732;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2735;
                    _2881 = _2736;
                    _2882 = _2746;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    for (;;)
                    {
                        uint _2886 = uint(findLSB(_2882)) + (_2737 << 5u);
                        uint _2883 = (_2882 + 4294967295u) & _2882;
                        uint _2888 = _2886 * 48u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 3u)).x));
                        uint _2908 = (_2886 * 48u) + 4u;
                        vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 3u)).x));
                        uint _2927 = (_2886 * 48u) + 8u;
                        vec3 _2938 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x));
                        float _2942 = _2902.x - _1577;
                        float _2943 = _2902.y - _1578;
                        float _2944 = _2902.z - _1579;
                        float _2945 = dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944));
                        float _2948 = inversesqrt(_2945);
                        float _2949 = _2948 * _2942;
                        float _2950 = _2948 * _2943;
                        float _2951 = _2948 * _2944;
                        float _2952 = dot(vec3(_427, _430, _433), vec3(_2949, _2950, _2951));
                        float _2957 = 1.0 - (_2945 * _2902.w);
                        float _4327 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2958 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _2959 = sqrt(_2945) * _2921.w;
                        float _2962 = 1.39999997615814208984375 / (_2959 + 1.39999997615814208984375);
                        float _2963 = _2962 * _2962;
                        float _2966 = ((1.0 - _2963) * _2952) + _2963;
                        float _2969 = _2959 * _2959;
                        float _2973 = ((isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))) * _2958) / ((_2969 * 0.699999988079071044921875) + 1.0);
                        float _2977 = (-0.0) - _1577;
                        float _2978 = (-0.0) - _1578;
                        float _2979 = (-0.0) - _1579;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2993 = exp2(log2(1.0 / ((_2969 * 3.5) + 5.0)) * 0.25);
                        float _2994 = 1.0 - _488;
                        float _3001 = sqrt(1.0 - ((1.0 - (_2994 * _2994)) * (1.0 - (_2993 * _2993))));
                        float _3002 = _3001 * _3001;
                        float _3003 = _3002 * _3002;
                        float _3004 = _2984 + _2949;
                        float _3005 = _2985 + _2950;
                        float _3006 = _2986 + _2951;
                        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
                        float _3014 = dot(vec3(_427, _430, _433), vec3(_2984, _2985, _2986));
                        float _4343 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3017 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3018 = dot(vec3(_427, _430, _433), vec3(_3010 * _3004, _3010 * _3005, _3010 * _3006));
                        float _4354 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3021 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3025 = ((_3021 * _3021) * (_3003 + (-1.0))) + 1.0;
                        float _3026 = _2962 * _3002;
                        float _3027 = _3026 * _3026;
                        float _3030 = ((1.0 - _3027) * _2952) + _3027;
                        float _4365 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3031 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3032 = 1.0 - _3002;
                        float _3042 = (0.5 / (((_3031 * ((_3017 * _3032) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_3031 * _3032) + _3002) * _3017))) * _3031;
                        float _4376 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3053 = (((_3003 * 3.1415927410125732421875) * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) / ((_3025 * _3025) * ((_2969 * 2.1991131305694580078125) + 3.141590118408203125))) * _2958;
                        _2806 = (_2973 * _2921.x) + _2879;
                        _2807 = (_2973 * _2921.y) + _2880;
                        _2808 = (_2973 * _2921.z) + _2881;
                        _2803 = (_3053 * _2938.x) + _2876;
                        _2804 = (_3053 * _2938.y) + _2877;
                        _2805 = (_3053 * _2938.z) + _2878;
                        if (_2883 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2876 = _2803;
                            _2877 = _2804;
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2807;
                            _2881 = _2808;
                            _2882 = _2883;
                        }
                    }
                    frontier_phi_75_pred = _2808;
                    frontier_phi_75_pred_1 = _2807;
                    frontier_phi_75_pred_2 = _2806;
                    frontier_phi_75_pred_3 = _2805;
                    frontier_phi_75_pred_4 = _2804;
                    frontier_phi_75_pred_5 = _2803;
                }
                _2590 = frontier_phi_75_pred;
                _2588 = frontier_phi_75_pred_1;
                _2586 = frontier_phi_75_pred_2;
                _2584 = frontier_phi_75_pred_3;
                _2582 = frontier_phi_75_pred_4;
                _2580 = frontier_phi_75_pred_5;
                uint _2738 = _2737 + 1u;
                if (_2738 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2731 = _2580;
                    _2732 = _2582;
                    _2733 = _2584;
                    _2734 = _2586;
                    _2735 = _2588;
                    _2736 = _2590;
                    _2737 = _2738;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
        }
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.z;
        uint _2596 = (_2594 >> 8u) & 15u;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        if (((4294967295u << _2596) & _2500) == 0u)
        {
            _2699 = _2579;
            _2701 = _2581;
            _2703 = _2583;
            _2705 = _2585;
            _2707 = _2587;
            _2709 = _2589;
        }
        else
        {
            float _2724 = inversesqrt(dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579)));
            float _2725 = _2724 * _1577;
            float _2726 = _2724 * _1578;
            float _2727 = _2724 * _1579;
            float frontier_phi_67_68_ladder;
            float frontier_phi_67_68_ladder_1;
            float frontier_phi_67_68_ladder_2;
            float frontier_phi_67_68_ladder_3;
            float frontier_phi_67_68_ladder_4;
            float frontier_phi_67_68_ladder_5;
            if (_2596 < ((_2594 >> 12u) & 15u))
            {
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2859 = _2579;
                float _2860 = _2581;
                float _2861 = _2583;
                float _2862 = _2585;
                float _2863 = _2587;
                float _2864 = _2589;
                uint _2865 = _2596;
                uint _2874;
                bool _2875;
                for (;;)
                {
                    _2874 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2865 << 2u)) >> 2u)).x;
                    _2875 = _2874 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2875)
                    {
                        frontier_phi_86_pred = _2863;
                        frontier_phi_86_pred_1 = _2862;
                        frontier_phi_86_pred_2 = _2861;
                        frontier_phi_86_pred_3 = _2860;
                        frontier_phi_86_pred_4 = _2859;
                        frontier_phi_86_pred_5 = _2864;
                    }
                    else
                    {
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3080 = _2859;
                        float _3081 = _2860;
                        float _3082 = _2861;
                        float _3083 = _2862;
                        float _3084 = _2863;
                        float _3085 = _2864;
                        uint _3086 = _2874;
                        uint _3087;
                        vec4 _3112;
                        float _3113;
                        vec4 _3128;
                        vec3 _3140;
                        vec4 _3156;
                        vec4 _3172;
                        float _3219;
                        bool _3220;
                        for (;;)
                        {
                            uint _3097 = ((_2865 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3086));
                            _3087 = (_3086 + 4294967295u) & _3086;
                            uint _3099 = _3097 * 40u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            _3113 = _3112.w;
                            uint _3115 = (_3097 * 40u) + 4u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3097 * 40u) + 8u;
                            _3140 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x));
                            uint _3143 = (_3097 * 40u) + 16u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3159 = (_3097 * 40u) + 20u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3175 = (_3097 * 40u) + 24u;
                            vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3194 = (_3097 * 40u) + 28u;
                            vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            _3219 = fma(_1579, _3207.z, fma(_1578, _3207.y, _3207.x * _1577)) + _3207.w;
                            _3220 = !((fma(_1579, _3188.z, fma(_1578, _3188.y, _3188.x * _1577)) + _3188.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3220)
                            {
                                float _3247 = _3112.x - _1577;
                                float _3248 = _3112.y - _1578;
                                float _3249 = _3112.z - _1579;
                                float _3250 = dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249));
                                float _3253 = inversesqrt(_3250);
                                float _3254 = _3253 * _3247;
                                float _3255 = _3253 * _3248;
                                float _3256 = _3253 * _3249;
                                float _3260 = 1.0 - (_3250 / (_3113 * _3113));
                                float _4387 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3261 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3265 = sqrt(_3250) * _3128.w;
                                float _3267 = 1.39999997615814208984375 / (_3265 + 1.39999997615814208984375);
                                float _3268 = _3267 * _3267;
                                float _3271 = ((1.0 - _3268) * dot(vec3(_3254, _3255, _3256), vec3(_427, _430, _433))) + _3268;
                                float _3274 = _3265 * _3265;
                                float _3278 = (fma(_1579, _3156.z, fma(_1578, _3156.y, _3156.x * _1577)) + _3156.w) / _3219;
                                float _3279 = (fma(_1579, _3172.z, fma(_1578, _3172.y, _3172.x * _1577)) + _3172.w) / _3219;
                                float _3283 = 1.0 - dot(vec2(_3278, _3279), vec2(_3278, _3279));
                                float _4403 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3284 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3285 = _3284 * (((isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))) * _3261) / ((_3274 * 0.699999988079071044921875) + 1.0));
                                float _3297 = exp2(log2(1.0 / ((_3274 * 3.5) + 5.0)) * 0.25);
                                float _3298 = 1.0 - _488;
                                float _3305 = sqrt(1.0 - ((1.0 - (_3298 * _3298)) * (1.0 - (_3297 * _3297))));
                                float _3306 = _3305 * _3305;
                                float _3307 = _3306 * _3306;
                                float _3308 = _3254 - _2725;
                                float _3309 = _3255 - _2726;
                                float _3310 = _3256 - _2727;
                                float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                                float _3318 = dot(vec3(_427, _430, _433), vec3((-0.0) - _2725, (-0.0) - _2726, (-0.0) - _2727));
                                float _4414 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3321 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3322 = dot(vec3(_427, _430, _433), vec3(_3314 * _3308, _3314 * _3309, _3314 * _3310));
                                float _4425 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3325 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3329 = ((_3325 * _3325) * (_3307 + (-1.0))) + 1.0;
                                float _3330 = _3267 * _3306;
                                float _3331 = _3330 * _3330;
                                float _3337 = ((1.0 - _3331) * dot(vec3(_427, _430, _433), vec3(_3254, _3255, _3256))) + _3331;
                                float _4436 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3339 = 1.0 - _3306;
                                float _3349 = (0.5 / (((_3338 * ((_3321 * _3339) + _3306)) + 9.9999999392252902907785028219223e-09) + (((_3338 * _3339) + _3306) * _3321))) * _3338;
                                float _4447 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3359 = (_3284 * _3261) * (((_3307 * 3.1415927410125732421875) * (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) / ((_3329 * _3329) * ((_3274 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3285 * _3128.y;
                                frontier_phi_92_pred_1 = _3285 * _3128.x;
                                frontier_phi_92_pred_2 = _3359 * _3140.z;
                                frontier_phi_92_pred_3 = _3359 * _3140.y;
                                frontier_phi_92_pred_4 = _3359 * _3140.x;
                                frontier_phi_92_pred_5 = _3285 * _3128.z;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3367 = frontier_phi_92_pred;
                            _3366 = frontier_phi_92_pred_1;
                            _3365 = frontier_phi_92_pred_2;
                            _3364 = frontier_phi_92_pred_3;
                            _3363 = frontier_phi_92_pred_4;
                            _3368 = frontier_phi_92_pred_5;
                            _3070 = _3366 + _3083;
                            _3071 = _3367 + _3084;
                            _3072 = _3368 + _3085;
                            _3067 = _3363 + _3080;
                            _3068 = _3364 + _3081;
                            _3069 = _3365 + _3082;
                            if (_3087 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3087;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _3071;
                        frontier_phi_86_pred_1 = _3070;
                        frontier_phi_86_pred_2 = _3069;
                        frontier_phi_86_pred_3 = _3068;
                        frontier_phi_86_pred_4 = _3067;
                        frontier_phi_86_pred_5 = _3072;
                    }
                    _2708 = frontier_phi_86_pred;
                    _2706 = frontier_phi_86_pred_1;
                    _2704 = frontier_phi_86_pred_2;
                    _2702 = frontier_phi_86_pred_3;
                    _2700 = frontier_phi_86_pred_4;
                    _2710 = frontier_phi_86_pred_5;
                    uint _2866 = _2865 + 1u;
                    if (_2866 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2859 = _2700;
                        _2860 = _2702;
                        _2861 = _2704;
                        _2862 = _2706;
                        _2863 = _2708;
                        _2864 = _2710;
                        _2865 = _2866;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_67_68_ladder = _2710;
                frontier_phi_67_68_ladder_1 = _2706;
                frontier_phi_67_68_ladder_2 = _2708;
                frontier_phi_67_68_ladder_3 = _2702;
                frontier_phi_67_68_ladder_4 = _2700;
                frontier_phi_67_68_ladder_5 = _2704;
            }
            else
            {
                frontier_phi_67_68_ladder = _2589;
                frontier_phi_67_68_ladder_1 = _2585;
                frontier_phi_67_68_ladder_2 = _2587;
                frontier_phi_67_68_ladder_3 = _2581;
                frontier_phi_67_68_ladder_4 = _2579;
                frontier_phi_67_68_ladder_5 = _2583;
            }
            _2699 = frontier_phi_67_68_ladder_4;
            _2701 = frontier_phi_67_68_ladder_3;
            _2703 = frontier_phi_67_68_ladder_5;
            _2705 = frontier_phi_67_68_ladder_1;
            _2707 = frontier_phi_67_68_ladder_2;
            _2709 = frontier_phi_67_68_ladder;
        }
        float _2714 = isnan(1.0) ? _472 : (isnan(_472) ? 1.0 : min(_472, 1.0));
        _2512 = (_2714 * _2705) + _2044;
        _2514 = (_2714 * _2707) + _2046;
        _2516 = (_2714 * _2709) + _2048;
        _2518 = ((_2699 * 0.039999999105930328369140625) * _2714) + _2367;
        _2520 = ((_2701 * 0.039999999105930328369140625) * _2714) + _2369;
        _2522 = ((_2703 * 0.039999999105930328369140625) * _2714) + _2371;
    }
    else
    {
        _2512 = _2044;
        _2514 = _2046;
        _2516 = _2048;
        _2518 = _2367;
        _2520 = _2369;
        _2522 = _2371;
    }
    float _4463 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4474 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4485 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _2539 = ((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2512 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _472))) + ((_2518 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    float _2540 = ((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2514 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _472))) + ((_2520 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    float _2541 = ((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2516 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _472))) + ((_2522 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    uint _2542 = _446 + 6u;
    float _2550 = _406 / cbSceneParam._m0[86u].x;
    float _2551 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2565 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, (log2((isnan(cbSceneParam._m0[77u].w) ? _330 : (isnan(_330) ? cbSceneParam._m0[77u].w : min(_330, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2567 = _2565.x;
    float _2568 = _2565.y;
    float _2569 = _2565.z;
    float _2570 = _2565.w;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_330 > cbSceneParam._m0[78u].w)
    {
        float _2604 = isnan(_330) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _330 : min(cbSceneParam._m0[80u].w, _330));
        float _2605 = _2604 / _330;
        float _2616 = _2605 * _381;
        float _2617 = _382 * _2605;
        float _2618 = (-0.0) - _2617;
        float _2619 = _2605 * _383;
        float _2621 = (cbSceneParam._m0[77u].w * _2618) / _2604;
        float _2622 = _2621 + cbSceneParam._m0[79u].w;
        float _2623 = cbSceneParam._m0[79u].w - _2617;
        float _2629 = sqrt(((_2616 * _2616) + (_2617 * _2617)) + (_2619 * _2619));
        float _2632 = (1.0 - (cbSceneParam._m0[77u].w / _2604)) * _2629;
        float _2637 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2639 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2816;
        if (abs((_2618 - _2621) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2816 = ((((_2622 > 0.0) ? exp2(_2637 * _2622) : (2.0 - exp2(_2639 * _2622))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2632;
        }
        else
        {
            float _2760 = 1.0 / cbSceneParam._m0[80u].x;
            float _2761 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : max(_2622, _2623));
            float _2762 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : min(_2622, _2623));
            float _2771 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : min(_2761, 0.0));
            float _2772 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : min(_2762, 0.0));
            _2816 = ((abs(_2629 / _2618) * cbSceneParam._m0[80u].y) * ((((_2771 - _2772) * 2.0) - ((exp2(_2637 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0)))) - exp2(_2637 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0))))) * _2760)) - ((exp2(_2639 * _2771) - exp2(_2639 * _2772)) * _2760))) + (_2632 * cbSceneParam._m0[80u].z);
        }
        vec4 _2818 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, 1.0), 0.0);
        float _2827 = exp2((_2816 * (-1.44269502162933349609375)) * (1.0 - _2818.w));
        float _2828 = log2(_2827);
        float _2844 = log2(_2570);
        _2641 = (exp2(_2844 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].x)) * _2818.x) / cbSceneParam._m0[78u].x)) + _2567;
        _2643 = (exp2(_2844 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].y)) * _2818.y) / cbSceneParam._m0[78u].y)) + _2568;
        _2645 = (exp2(_2844 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].z)) * _2818.z) / cbSceneParam._m0[78u].z)) + _2569;
        _2647 = _2827 * _2570;
    }
    else
    {
        _2641 = _2567;
        _2643 = _2568;
        _2645 = _2569;
        _2647 = _2570;
    }
    bool _2854;
    vec4 _2657;
    vec4 _2679;
    float _2681;
    float _2685;
    float _2686;
    float _2687;
    float _2688;
    bool _2698;
    for (;;)
    {
        _2657 = cbMatDynParam._m0[0u];
        float _2659 = roundEven(_2657.y);
        bool _2660 = _2659 == 3.0;
        float _2661 = log2(_2647);
        float _2668 = exp2(_2661 * cbSceneParam._m0[78u].x) * _2539;
        float _2669 = exp2(_2661 * cbSceneParam._m0[78u].y) * _2540;
        float _2670 = exp2(_2661 * cbSceneParam._m0[78u].z) * _2541;
        float _2677 = _394 + (-0.5);
        _2679 = cbMtdParam._m0[1u];
        _2681 = _2679.y * _2677;
        float _2684 = (_2659 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2685 = _2684 * (_2660 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2641)));
        _2686 = _2684 * (_2660 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2643)));
        _2687 = _2684 * (_2660 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2645)));
        _2688 = _2677 * 0.999000012874603271484375;
        _2698 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2698)
        {
            if ((cbInstanceData._m0[_446 + 7u].x + _2688) < 0.5)
            {
                _2854 = true;
                break;
            }
        }
        uint _2795 = _448 + uint(_2657.w);
        if ((cbInstanceData._m0[_2795].w < 1.0) && ((cbInstanceData._m0[_2795].w + _2688) < 0.5))
        {
            _2854 = true;
            break;
        }
        if ((_2681 + _243) < _2679.x)
        {
            _2854 = true;
            break;
        }
        _2854 = false;
        break;
    }
    float _3058;
    if (_2854)
    {
        discard_state = true;
        _3058 = 0.0;
    }
    else
    {
        _3058 = cbInstanceData._m0[_2542].w;
    }
    SV_Target.x = _2685;
    SV_Target.y = _2686;
    SV_Target.z = _2687;
    SV_Target.w = _3058;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2542].w;
    discard_exit();
}


