#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _867;
float _3236;
float _3237;
float _3238;
float _3239;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.w;
    float _240 = _233.x * cbMtdParam._m0[9u].x;
    float _241 = _233.y * cbMtdParam._m0[9u].y;
    float _242 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _254 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _254.z;
    float _262 = (_254.x * 2.0) + (-1.0);
    float _264 = (_254.y * 2.0) + (-1.0);
    float _265 = dot(vec2(_262, _264), vec2(_262, _264));
    float _3248 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _271 = sqrt(1.0 - (isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))));
    float _276 = gl_FragCoord.x * 0.125;
    float _278 = gl_FragCoord.y * 0.125;
    float _289 = fma(_271, _211, fma(_264, _203 * TANGENT.x, (_189 * _182) * _262));
    float _292 = fma(_271, _212, fma(_264, _203 * TANGENT.y, (_189 * _183) * _262));
    float _295 = fma(_271, _213, fma(_264, _203 * TANGENT.z, (_189 * _184) * _262));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _300 = _299 * _289;
    float _301 = _299 * _292;
    float _302 = _299 * _295;
    float _3259 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _303 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    float _3270 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3281 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3292 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    if (!(cbMtdParam._m0[10u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_276, _278)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _326 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _367 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _377 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _367);
    float _378 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _367);
    float _379 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _367);
    float _383 = inversesqrt(dot(vec3(_377, _378, _379), vec3(_377, _378, _379)));
    float _384 = _377 * _383;
    float _385 = _378 * _383;
    float _386 = _379 * _383;
    vec4 _388 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_276, _278));
    float _390 = _388.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _548 = sqrt(((_377 * _377) + (_378 * _378)) + (_379 * _379));
        float _554 = (cbMatDynParam._m0[5u].x * _548) + cbMatDynParam._m0[5u].y;
        float _3303 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
        float _555 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _559 = (cbMatDynParam._m0[5u].z * _548) + cbMatDynParam._m0[5u].w;
        float _3314 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) - _555)) + _555) < ((_390 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _402 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _403 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _423 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _426 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _429 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    uint _442 = uint(roundEven(NORMAL.w)) * 13u;
    uint _444 = _442 + 9u;
    uint _445 = _444 + uint(cbMatDynParam._m0[0u].w);
    float _451 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0)))) * cbInstanceData._m0[_445].x;
    float _452 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0)))) * cbInstanceData._m0[_445].y;
    float _453 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0)))) * cbInstanceData._m0[_445].z;
    float _3325 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
    float _3336 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _3347 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    vec4 _465 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _402, cbSceneParam._m0[86u].y * _403));
    float _468 = _465.x * TEXCOORD.z;
    float _469 = dot(vec3(_300, _301, _302), vec3(_384, _385, _386));
    float _472 = _469 * 2.0;
    float _476 = (_472 * _300) - _384;
    float _477 = (_472 * _301) - _385;
    float _478 = (_472 * _302) - _386;
    float _482 = abs(dot(vec3(_384, _385, _386), vec3(_300, _301, _302)));
    float _3358 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _484 = sqrt(_303);
    float _497 = exp2((_484 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_484 * 3.0));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _866;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _591 = fma(_537, cbModelParam._m0[26u].z, fma(_533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _529));
        float _595 = fma(_537, cbModelParam._m0[27u].z, fma(_533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _529));
        float _599 = fma(_537, cbModelParam._m0[28u].z, fma(_533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _529));
        float _624 = _529 + _300;
        float _625 = _533 + _301;
        float _626 = _537 + _302;
        float _636 = fma(_626, cbModelParam._m0[26u].z, fma(_625, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _624)) - _591;
        float _637 = fma(_626, cbModelParam._m0[27u].z, fma(_625, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _624)) - _595;
        float _638 = fma(_626, cbModelParam._m0[28u].z, fma(_625, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _624)) - _599;
        float _642 = inversesqrt(dot(vec3(_636, _637, _638), vec3(_636, _637, _638)));
        float _655 = ((_642 * _636) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_591 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _656 = ((_642 * _637) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_595 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _657 = ((_642 * _638) / cbModelParam._m0[34u].z) + ((((((_599 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        float _694 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_660.x + (-0.5));
        float _696 = _694 * (_660.y + (-0.5));
        float _697 = _694 * (_660.z + (-0.5));
        float _704 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_667.x + (-0.5));
        float _706 = _704 * (_667.y + (-0.5));
        float _707 = _704 * (_667.z + (-0.5));
        float _714 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_674.x + (-0.5));
        float _716 = _714 * (_674.y + (-0.5));
        float _717 = _714 * (_674.z + (-0.5));
        float _724 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_681.x + (-0.5));
        float _726 = _724 * (_681.y + (-0.5));
        float _727 = _724 * (_681.z + (-0.5));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = _695 * 0.5;
        float _732 = _705 * 0.5;
        float _733 = _715 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _748 = (dot(vec3(_300, _301, _302), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3384 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _758 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3395 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _760 = _759 * 2.0;
        float _764 = (1.0 - _759) / (_759 + 1.0);
        float _3406 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _774 = ((((1.0 - _765) * (_760 + 2.0)) * exp2(log2(isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * (_760 + 1.0))) + _765) * _728;
        float _775 = _696 * 0.5;
        float _776 = _706 * 0.5;
        float _777 = _716 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _791 = (dot(vec3(_300, _301, _302), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3417 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _800 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3428 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3439 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * (_802 + 1.0))) + _807) * _729;
        float _817 = _697 * 0.5;
        float _818 = _707 * 0.5;
        float _819 = _717 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_300, _301, _302), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3450 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3461 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3472 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_844 + 1.0))) + _849) * _730;
        _866 = _697;
        _868 = _696;
        _869 = _695;
        _870 = _707;
        _871 = _706;
        _872 = _705;
        _873 = _717;
        _874 = _716;
        _875 = _715;
        _876 = _730;
        _877 = _729;
        _878 = _728;
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0)));
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
    }
    else
    {
        _866 = _867;
        _868 = _867;
        _869 = _867;
        _870 = _867;
        _871 = _867;
        _872 = _867;
        _873 = _867;
        _874 = _867;
        _875 = _867;
        _876 = _867;
        _877 = _867;
        _878 = _867;
        _879 = 0.0;
        _880 = 0.0;
        _881 = 0.0;
    }
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _907 = fma(_537, cbModelParam._m0[30u].z, fma(_533, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _529));
        float _911 = fma(_537, cbModelParam._m0[31u].z, fma(_533, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _529));
        float _915 = fma(_537, cbModelParam._m0[32u].z, fma(_533, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _529));
        float _938 = _529 + _300;
        float _939 = _533 + _301;
        float _940 = _537 + _302;
        float _950 = fma(_940, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938)) - _907;
        float _951 = fma(_940, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938)) - _911;
        float _952 = fma(_940, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938)) - _915;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_907 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_911 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[35u].z) + ((((((_915 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1006 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_973.x + (-0.5));
        float _1008 = _1006 * (_973.y + (-0.5));
        float _1009 = _1006 * (_973.z + (-0.5));
        float _1016 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_980.x + (-0.5));
        float _1018 = _1016 * (_980.y + (-0.5));
        float _1019 = _1016 * (_980.z + (-0.5));
        float _1026 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_987.x + (-0.5));
        float _1028 = _1026 * (_987.y + (-0.5));
        float _1029 = _1026 * (_987.z + (-0.5));
        float _1036 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_994.x + (-0.5));
        float _1038 = _1036 * (_994.y + (-0.5));
        float _1039 = _1036 * (_994.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_300, _301, _302), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3535 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_1070 + 1.0))) + _1075) * _1040;
        float _1085 = _1008 * 0.5;
        float _1086 = _1018 * 0.5;
        float _1087 = _1028 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_300, _301, _302), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3568 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_1112 + 1.0))) + _1117) * _1041;
        float _1127 = _1009 * 0.5;
        float _1128 = _1019 * 0.5;
        float _1129 = _1029 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_300, _301, _302), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3601 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1154 + 1.0))) + _1159) * _1042;
        _1176 = _1009;
        _1177 = _1008;
        _1178 = _1007;
        _1179 = _1019;
        _1180 = _1018;
        _1181 = _1017;
        _1182 = _1029;
        _1183 = _1028;
        _1184 = _1027;
        _1185 = _1042;
        _1186 = _1041;
        _1187 = _1040;
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1189 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _867;
        _1177 = _867;
        _1178 = _867;
        _1179 = _867;
        _1180 = _867;
        _1181 = _867;
        _1182 = _867;
        _1183 = _867;
        _1184 = _867;
        _1185 = _867;
        _1186 = _867;
        _1187 = _867;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1201 = (cbModelParam._m0[1u].x * (_1189 - _880)) + _880;
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _881)) + _881;
    float _1223 = fma(_1202, cbSceneParam._m0[89u].z, fma(_1201, cbSceneParam._m0[89u].y, _1200 * cbSceneParam._m0[89u].x));
    float _1226 = fma(_1202, cbSceneParam._m0[90u].z, fma(_1201, cbSceneParam._m0[90u].y, _1200 * cbSceneParam._m0[90u].x));
    float _1229 = fma(_1202, cbSceneParam._m0[91u].z, fma(_1201, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1200));
    float _1244 = _476 * 0.5;
    float _1245 = _477 * 0.5;
    float _1246 = _478 * 0.5;
    float _1247 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1250 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1177, _1180, _1183, _1186));
    float _1253 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1287;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1260 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_866, _870, _873, _876));
        float _1264 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_868, _871, _874, _877));
        float _1268 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_869, _872, _875, _878));
        float _1275 = dot(vec4(cbModelParam._m0[39u]), vec4(_1244, _1245, _1246, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1298;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1289 = dot(vec4(cbModelParam._m0[40u]), vec4(_1244, _1245, _1246, 1.0));
        _1298 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1298 = 1.0;
    }
    float _1302 = (_1298 * cbModelParam._m0[1u].x) + (_1287 * (1.0 - cbModelParam._m0[1u].x));
    float _1312 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _303);
    float _1313 = isnan(_1312) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1312 : min(cbModelParam._m0[25u].z, _1312));
    float _1395;
    float _1397;
    float _1399;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1362 = fma(_537, cbModelParam._m0[13u].z, fma(_533, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _529)) + cbModelParam._m0[13u].w;
        float _1366 = fma(_537, cbModelParam._m0[14u].z, fma(_533, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _529)) + cbModelParam._m0[14u].w;
        float _1370 = fma(_537, cbModelParam._m0[15u].z, fma(_533, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _529)) + cbModelParam._m0[15u].w;
        float _1373 = fma(_478, cbModelParam._m0[13u].z, fma(_477, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _476));
        float _1376 = fma(_478, cbModelParam._m0[14u].z, fma(_477, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _476));
        float _1379 = fma(_478, cbModelParam._m0[15u].z, fma(_477, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _476));
        float _1407;
        if (_1373 > 0.0)
        {
            _1407 = abs((1.0 - _1362) / _1373);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1362 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1407 = frontier_phi_21_19_ladder;
        }
        float _1613;
        if (_1376 > 0.0)
        {
            _1613 = abs((1.0 - _1366) / _1376);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1366 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1613 = frontier_phi_30_26_ladder;
        }
        float _1856;
        if (_1379 > 0.0)
        {
            _1856 = abs((1.0 - _1370) / _1379);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1370 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1856 = frontier_phi_42_37_ladder;
        }
        float _1858 = isnan(_1613) ? _1407 : (isnan(_1407) ? _1613 : min(_1407, _1613));
        float _1859 = isnan(_1856) ? _1858 : (isnan(_1858) ? _1856 : min(_1858, _1856));
        float _1863 = (_1859 * _1373) + _1362;
        float _1864 = (_1859 * _1376) + _1366;
        float _1865 = (_1859 * _1379) + _1370;
        float _1866 = _1859 * 9.9999997473787516355514526367188e-05;
        float _1868 = (-1.0) - _1866;
        float _1870 = _1866 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_1865 > _1870) || ((_1865 < _1868) || ((_1864 > _1870) || ((_1864 < _1868) || ((_1863 < _1868) || (_1863 > _1870))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1989 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1865, cbModelParam._m0[9u].z, fma(_1864, cbModelParam._m0[9u].y, _1863 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1865, cbModelParam._m0[10u].z, fma(_1864, cbModelParam._m0[10u].y, _1863 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1865, cbModelParam._m0[11u].z, fma(_1864, cbModelParam._m0[11u].y, _1863 * cbModelParam._m0[11u].x))), _1313);
            frontier_phi_20_42_ladder = _1989.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _1989.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _1989.x * cbModelParam._m0[1u].y;
        }
        _1395 = frontier_phi_20_42_ladder_2;
        _1397 = frontier_phi_20_42_ladder_1;
        _1399 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_476, _477, _478), _1313);
        _1395 = _1383.x * cbModelParam._m0[1u].y;
        _1397 = _1383.y * cbModelParam._m0[1u].y;
        _1399 = _1383.z * cbModelParam._m0[1u].y;
    }
    float _1403 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _303);
    float _1404 = isnan(_1403) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1403 : min(cbModelParam._m0[25u].w, _1403));
    float _1497;
    float _1499;
    float _1501;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1461 = fma(_537, cbModelParam._m0[21u].z, fma(_533, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _529)) + cbModelParam._m0[21u].w;
        float _1465 = fma(_537, cbModelParam._m0[22u].z, fma(_533, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _529)) + cbModelParam._m0[22u].w;
        float _1469 = fma(_537, cbModelParam._m0[23u].z, fma(_533, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _529)) + cbModelParam._m0[23u].w;
        float _1472 = fma(_478, cbModelParam._m0[21u].z, fma(_477, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _476));
        float _1475 = fma(_478, cbModelParam._m0[22u].z, fma(_477, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _476));
        float _1478 = fma(_478, cbModelParam._m0[23u].z, fma(_477, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _476));
        float _1618;
        if (_1472 > 0.0)
        {
            _1618 = abs((1.0 - _1461) / _1472);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1461 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1618 = frontier_phi_32_28_ladder;
        }
        float _1883;
        if (_1475 > 0.0)
        {
            _1883 = abs((1.0 - _1465) / _1475);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1465 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _1883 = frontier_phi_44_39_ladder;
        }
        float _2088;
        if (_1478 > 0.0)
        {
            _2088 = abs((1.0 - _1469) / _1478);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1469 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2088 = frontier_phi_53_50_ladder;
        }
        float _2090 = isnan(_1883) ? _1618 : (isnan(_1618) ? _1883 : min(_1618, _1883));
        float _2091 = isnan(_2088) ? _2090 : (isnan(_2090) ? _2088 : min(_2090, _2088));
        float _2095 = (_2091 * _1472) + _1461;
        float _2096 = (_2091 * _1475) + _1465;
        float _2097 = (_2091 * _1478) + _1469;
        float _2098 = _2091 * 9.9999997473787516355514526367188e-05;
        float _2099 = (-1.0) - _2098;
        float _2101 = _2098 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2097 > _2101) || ((_2097 < _2099) || ((_2096 > _2101) || ((_2096 < _2099) || ((_2095 < _2099) || (_2095 > _2101))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2295 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2097, cbModelParam._m0[17u].z, fma(_2096, cbModelParam._m0[17u].y, _2095 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2097, cbModelParam._m0[18u].z, fma(_2096, cbModelParam._m0[18u].y, _2095 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2097, cbModelParam._m0[19u].z, fma(_2096, cbModelParam._m0[19u].y, _2095 * cbModelParam._m0[19u].x))), _1404);
            frontier_phi_29_53_ladder = _2295.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2295.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2295.x * cbModelParam._m0[1u].z;
        }
        _1497 = frontier_phi_29_53_ladder_2;
        _1499 = frontier_phi_29_53_ladder_1;
        _1501 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1481 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_476, _477, _478), _1404);
        _1497 = _1481.x * cbModelParam._m0[1u].z;
        _1499 = _1481.y * cbModelParam._m0[1u].z;
        _1501 = _1481.z * cbModelParam._m0[1u].z;
    }
    float _1513 = ((((1.0 - _497) * ((_484 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_497 * _484)) * _468;
    float _1514 = _1513 * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1515 = _1513 * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1516 = _1513 * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1519 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1515, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1515, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1515, cbSceneParam._m0[91u].y, _1514 * cbSceneParam._m0[91u].x));
    uvec4 _1535 = floatBitsToUint(cbInstanceData._m0[_442 + 5u]);
    uint _1537 = _1535.x * 14u;
    uint _1538 = _1537 + 13u;
    float _1545 = _468 + (-1.0);
    float _1550 = (cbLight._m0[_1538].x * _1545) + 1.0;
    float _1551 = (cbLight._m0[_1538].y * _1545) + 1.0;
    float _1552 = (cbLight._m0[_1538].z * _1545) + 1.0;
    float _1553 = (cbLight._m0[_1538].w * _1545) + 1.0;
    uint _1554 = _1537 + 5u;
    float _1560 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    uint _1564 = _1537 + 4u;
    float _1571 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1575 = _1537 | 1u;
    float _1586 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_300, _301, _302));
    float _1589 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_300, _301, _302));
    float _3737 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _3748 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1594 = (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * 0.3183098733425140380859375;
    float _1596 = (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * 0.3183098733425140380859375;
    float _1603 = ((cbLight._m0[_1554].x * _1560) * _1596) + ((cbLight._m0[_1564].x * _1571) * _1594);
    float _1604 = ((_1560 * cbLight._m0[_1554].y) * _1596) + ((_1571 * cbLight._m0[_1564].y) * _1594);
    float _1605 = ((_1560 * cbLight._m0[_1554].z) * _1596) + ((_1571 * cbLight._m0[_1564].z) * _1594);
    uvec4 _1610 = floatBitsToUint(cbLight._m0[_1537 + 12u]);
    bool _1612 = _1610.x == 0u;
    float _1623;
    float _1625;
    float _1627;
    if (_1612)
    {
        _1623 = _1603;
        _1625 = _1604;
        _1627 = _1605;
    }
    else
    {
        uint _1631 = _1537 + 6u;
        float _1647 = (dot(vec3(cbLight._m0[_1537 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1648 = _1647 * _1647;
        float _3759 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1650 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1623 = (((cbLight._m0[_1631].x * 0.3183098733425140380859375) * _1649) * _1650) + _1603;
        _1625 = (((cbLight._m0[_1631].y * 0.3183098733425140380859375) * _1649) * _1650) + _1604;
        _1627 = (((cbLight._m0[_1631].z * 0.3183098733425140380859375) * _1649) * _1650) + _1605;
    }
    bool _1630 = _1610.y == 0u;
    float _1668;
    float _1670;
    float _1672;
    if (_1630)
    {
        _1668 = _1623;
        _1670 = _1625;
        _1672 = _1627;
    }
    else
    {
        uint _1827 = _1537 + 7u;
        float _1843 = (dot(vec3(cbLight._m0[_1537 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1844 = _1843 * _1843;
        float _3775 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1846 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1668 = (((cbLight._m0[_1827].x * 0.3183098733425140380859375) * _1845) * _1846) + _1623;
        _1670 = (((cbLight._m0[_1827].y * 0.3183098733425140380859375) * _1845) * _1846) + _1625;
        _1672 = (((cbLight._m0[_1827].z * 0.3183098733425140380859375) * _1845) * _1846) + _1627;
    }
    uint _1675 = _1537 + 8u;
    float _1688 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1537].w)) * _303) * 0.949999988079071044921875);
    float _1689 = _1688 * _1688;
    float _1690 = cbLight._m0[_1537].x + _384;
    float _1691 = cbLight._m0[_1537].y + _385;
    float _1692 = cbLight._m0[_1537].z + _386;
    float _1696 = inversesqrt(dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692)));
    float _1697 = _1696 * _1690;
    float _1698 = _1696 * _1691;
    float _1699 = _1696 * _1692;
    float _1700 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1537].xyz));
    float _3791 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1703 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _1704 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _1705 = dot(vec3(_300, _301, _302), vec3(_1697, _1698, _1699));
    float _3813 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _1709 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_1697, _1698, _1699));
    float _3824 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1713 = _1689 * _1689;
    float _1717 = ((_1708 * _1708) * (_1713 + (-1.0))) + 1.0;
    float _1728 = (exp2(log2(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1729 = 1.0 - _1689;
    float _1740 = (0.5 / (((_1704 * ((_1703 * _1729) + _1689)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1729) + _1689) * _1703))) * _1703;
    float _3835 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1742 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1713 / ((_1717 * _1717) * 3.141590118408203125));
    uint _1753 = _1537 + 9u;
    float _1764 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1575].w)) * _303) * 0.949999988079071044921875);
    float _1765 = _1764 * _1764;
    float _1766 = cbLight._m0[_1575].x + _384;
    float _1767 = cbLight._m0[_1575].y + _385;
    float _1768 = cbLight._m0[_1575].z + _386;
    float _1772 = inversesqrt(dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768)));
    float _1773 = _1772 * _1766;
    float _1774 = _1772 * _1767;
    float _1775 = _1772 * _1768;
    float _1776 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1575].xyz));
    float _3846 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _1780 = dot(vec3(_300, _301, _302), vec3(_1773, _1774, _1775));
    float _3857 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _1784 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_1773, _1774, _1775));
    float _3868 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1788 = _1765 * _1765;
    float _1792 = ((_1783 * _1783) * (_1788 + (-1.0))) + 1.0;
    float _1801 = (exp2(log2(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1802 = 1.0 - _1765;
    float _1812 = (0.5 / (((_1704 * ((_1779 * _1802) + _1765)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1802) + _1765) * _1779))) * _1779;
    float _3879 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1814 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1788 / ((_1792 * _1792) * 3.141590118408203125));
    float _1824 = (((_1801 * cbLight._m0[_1753].x) * _1814) * _1560) + (((_1728 * cbLight._m0[_1675].x) * _1742) * _1571);
    float _1825 = (((_1801 * cbLight._m0[_1753].y) * _1814) * _1560) + (((_1728 * cbLight._m0[_1675].y) * _1742) * _1571);
    float _1826 = (((_1801 * cbLight._m0[_1753].z) * _1814) * _1560) + (((_1728 * cbLight._m0[_1675].z) * _1742) * _1571);
    float _1888;
    float _1890;
    float _1892;
    if (_1612)
    {
        _1888 = _1824;
        _1890 = _1825;
        _1892 = _1826;
    }
    else
    {
        uint _1894 = _1537 + 2u;
        uint _1898 = _1537 + 10u;
        float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _303) * 0.949999988079071044921875);
        float _1913 = _1912 * _1912;
        float _1914 = cbLight._m0[_1894].x + _384;
        float _1915 = cbLight._m0[_1894].y + _385;
        float _1916 = cbLight._m0[_1894].z + _386;
        float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
        float _1921 = _1920 * _1914;
        float _1922 = _1920 * _1915;
        float _1923 = _1920 * _1916;
        float _1924 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1894].xyz));
        float _3890 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1927 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1928 = dot(vec3(_300, _301, _302), vec3(_1921, _1922, _1923));
        float _3901 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1931 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1932 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_1921, _1922, _1923));
        float _3912 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1936 = _1913 * _1913;
        float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
        float _1949 = (exp2(log2(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1950 = 1.0 - _1913;
        float _1960 = (0.5 / (((_1704 * ((_1927 * _1950) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1950) + _1913) * _1927))) * _1927;
        float _3923 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1962 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
        float _1963 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1888 = (((_1949 * cbLight._m0[_1898].x) * _1962) * _1963) + _1824;
        _1890 = (((_1949 * cbLight._m0[_1898].y) * _1962) * _1963) + _1825;
        _1892 = (((_1949 * cbLight._m0[_1898].z) * _1962) * _1963) + _1826;
    }
    float _1998;
    float _2000;
    float _2002;
    if (_1630)
    {
        _1998 = _1888;
        _2000 = _1890;
        _2002 = _1892;
    }
    else
    {
        uint _2009 = _1537 + 3u;
        uint _2013 = _1537 + 11u;
        float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _303) * 0.949999988079071044921875);
        float _2028 = _2027 * _2027;
        float _2029 = cbLight._m0[_2009].x + _384;
        float _2030 = cbLight._m0[_2009].y + _385;
        float _2031 = cbLight._m0[_2009].z + _386;
        float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
        float _2036 = _2035 * _2029;
        float _2037 = _2035 * _2030;
        float _2038 = _2035 * _2031;
        float _2039 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_2009].xyz));
        float _3939 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _2043 = dot(vec3(_300, _301, _302), vec3(_2036, _2037, _2038));
        float _3950 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _2047 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2036, _2037, _2038));
        float _3961 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2051 = _2028 * _2028;
        float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
        float _2064 = (exp2(log2(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2065 = 1.0 - _2028;
        float _2075 = (0.5 / (((_1704 * ((_2042 * _2065) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _2065) + _2028) * _2042))) * _2042;
        float _3972 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2077 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
        float _2078 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1998 = (((_2064 * cbLight._m0[_2013].x) * _2077) * _2078) + _1888;
        _2000 = (((_2064 * cbLight._m0[_2013].y) * _2077) * _2078) + _1890;
        _2002 = (((_2064 * cbLight._m0[_2013].z) * _2077) * _2078) + _1892;
    }
    float _2212;
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    float _2222;
    if (_1535.y == 0u)
    {
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2154 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2153;
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2153;
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2153;
        uvec4 _2168 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2169 = _2168.x;
        uint _2180 = uint((float(_2168.y) * floor(float(uint(cbSceneParam._m0[85u].y * _403) / _2169))) + floor(float(uint(cbSceneParam._m0[85u].x * _402) / _2169)));
        float _2190 = (log2(_2156 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2191 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        uint _2194 = uint(isnan(14.0) ? _2191 : (isnan(_2191) ? 14.0 : min(_2191, 14.0)));
        uvec4 _2199 = texelFetch(g_lightClusterGridBuffer, int(((_2194 << 2u) + (_2180 << 6u)) >> 2u));
        uint _2200 = _2199.x;
        uint _2201 = _2168.z;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        if (((((1u << ((_2201 >> 4u) & 15u)) + 4294967295u) & _2200) == 0u) || ((_2201 & 240u) == 0u))
        {
            _2300 = 0.0;
            _2302 = 0.0;
            _2304 = 0.0;
            _2306 = 0.0;
            _2308 = 0.0;
            _2310 = 0.0;
        }
        else
        {
            float _2301;
            float _2303;
            float _2305;
            float _2307;
            float _2309;
            float _2311;
            float _2452 = 0.0;
            float _2453 = 0.0;
            float _2454 = 0.0;
            float _2455 = 0.0;
            float _2456 = 0.0;
            float _2457 = 0.0;
            uint _2458 = 0u;
            uint _2467;
            bool _2468;
            for (;;)
            {
                _2467 = texelFetch(g_lightClassification, int((((_2194 << 5u) + (_2180 << 9u)) + (_2458 << 2u)) >> 2u)).x;
                _2468 = _2467 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2468)
                {
                    frontier_phi_70_pred = _2454;
                    frontier_phi_70_pred_1 = _2457;
                    frontier_phi_70_pred_2 = _2456;
                    frontier_phi_70_pred_3 = _2455;
                    frontier_phi_70_pred_4 = _2453;
                    frontier_phi_70_pred_5 = _2452;
                }
                else
                {
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    uint _2603;
                    _2597 = _2452;
                    _2598 = _2453;
                    _2599 = _2454;
                    _2600 = _2455;
                    _2601 = _2456;
                    _2602 = _2457;
                    _2603 = _2467;
                    float _2524;
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    float _2529;
                    for (;;)
                    {
                        uint _2607 = uint(findLSB(_2603)) + (_2458 << 5u);
                        uint _2604 = (_2603 + 4294967295u) & _2603;
                        uint _2609 = _2607 * 48u;
                        vec4 _2623 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2609)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 3u)).x));
                        uint _2629 = (_2607 * 48u) + 4u;
                        vec4 _2642 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2629)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 3u)).x));
                        uint _2648 = (_2607 * 48u) + 8u;
                        vec3 _2659 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2648)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 2u)).x));
                        float _2663 = _2623.x - _2154;
                        float _2664 = _2623.y - _2155;
                        float _2665 = _2623.z - _2156;
                        float _2666 = dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665));
                        float _2669 = inversesqrt(_2666);
                        float _2670 = _2669 * _2663;
                        float _2671 = _2669 * _2664;
                        float _2672 = _2669 * _2665;
                        float _2673 = dot(vec3(_423, _426, _429), vec3(_2670, _2671, _2672));
                        float _2678 = 1.0 - (_2666 * _2623.w);
                        float _3998 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
                        float _2679 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _2680 = sqrt(_2666) * _2642.w;
                        float _2683 = 1.39999997615814208984375 / (_2680 + 1.39999997615814208984375);
                        float _2684 = _2683 * _2683;
                        float _2687 = ((1.0 - _2684) * _2673) + _2684;
                        float _2690 = _2680 * _2680;
                        float _2694 = ((isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0))) * _2679) / ((_2690 * 0.699999988079071044921875) + 1.0);
                        float _2698 = (-0.0) - _2154;
                        float _2699 = (-0.0) - _2155;
                        float _2700 = (-0.0) - _2156;
                        float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
                        float _2705 = _2704 * _2698;
                        float _2706 = _2704 * _2699;
                        float _2707 = _2704 * _2700;
                        float _2715 = exp2(log2(1.0 / ((_2690 * 3.5) + 5.0)) * 0.25);
                        float _2716 = 1.0 - _484;
                        float _2723 = sqrt(1.0 - ((1.0 - (_2716 * _2716)) * (1.0 - (_2715 * _2715))));
                        float _2724 = _2723 * _2723;
                        float _2725 = _2724 * _2724;
                        float _2726 = _2705 + _2670;
                        float _2727 = _2706 + _2671;
                        float _2728 = _2707 + _2672;
                        float _2732 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
                        float _2736 = dot(vec3(_423, _426, _429), vec3(_2705, _2706, _2707));
                        float _4014 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2739 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
                        float _2740 = dot(vec3(_423, _426, _429), vec3(_2732 * _2726, _2732 * _2727, _2732 * _2728));
                        float _4025 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
                        float _2743 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _2747 = ((_2743 * _2743) * (_2725 + (-1.0))) + 1.0;
                        float _2748 = _2683 * _2724;
                        float _2749 = _2748 * _2748;
                        float _2752 = ((1.0 - _2749) * _2673) + _2749;
                        float _4036 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2753 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                        float _2754 = 1.0 - _2724;
                        float _2764 = (0.5 / (((_2753 * ((_2739 * _2754) + _2724)) + 9.9999999392252902907785028219223e-09) + (((_2753 * _2754) + _2724) * _2739))) * _2753;
                        float _4047 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2775 = (((_2725 * 3.1415927410125732421875) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) / ((_2747 * _2747) * ((_2690 * 2.1991131305694580078125) + 3.141590118408203125))) * _2679;
                        _2527 = (_2694 * _2642.x) + _2600;
                        _2528 = (_2694 * _2642.y) + _2601;
                        _2529 = (_2694 * _2642.z) + _2602;
                        _2524 = (_2775 * _2659.x) + _2597;
                        _2525 = (_2775 * _2659.y) + _2598;
                        _2526 = (_2775 * _2659.z) + _2599;
                        if (_2604 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2597 = _2524;
                            _2598 = _2525;
                            _2599 = _2526;
                            _2600 = _2527;
                            _2601 = _2528;
                            _2602 = _2529;
                            _2603 = _2604;
                        }
                    }
                    frontier_phi_70_pred = _2526;
                    frontier_phi_70_pred_1 = _2529;
                    frontier_phi_70_pred_2 = _2528;
                    frontier_phi_70_pred_3 = _2527;
                    frontier_phi_70_pred_4 = _2525;
                    frontier_phi_70_pred_5 = _2524;
                }
                _2305 = frontier_phi_70_pred;
                _2311 = frontier_phi_70_pred_1;
                _2309 = frontier_phi_70_pred_2;
                _2307 = frontier_phi_70_pred_3;
                _2303 = frontier_phi_70_pred_4;
                _2301 = frontier_phi_70_pred_5;
                uint _2459 = _2458 + 1u;
                if (_2459 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2452 = _2301;
                    _2453 = _2303;
                    _2454 = _2305;
                    _2455 = _2307;
                    _2456 = _2309;
                    _2457 = _2311;
                    _2458 = _2459;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2300 = _2301;
            _2302 = _2303;
            _2304 = _2305;
            _2306 = _2307;
            _2308 = _2309;
            _2310 = _2311;
        }
        uvec4 _2314 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2315 = _2314.z;
        uint _2317 = (_2315 >> 8u) & 15u;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        if (((4294967295u << _2317) & _2200) == 0u)
        {
            _2420 = _2300;
            _2422 = _2302;
            _2424 = _2304;
            _2426 = _2306;
            _2428 = _2308;
            _2430 = _2310;
        }
        else
        {
            float _2445 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
            float _2446 = _2445 * _2154;
            float _2447 = _2445 * _2155;
            float _2448 = _2445 * _2156;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2317 < ((_2315 >> 12u) & 15u))
            {
                float _2421;
                float _2423;
                float _2425;
                float _2427;
                float _2429;
                float _2431;
                float _2580 = _2300;
                float _2581 = _2302;
                float _2582 = _2304;
                float _2583 = _2306;
                float _2584 = _2308;
                float _2585 = _2310;
                uint _2586 = _2317;
                uint _2595;
                bool _2596;
                for (;;)
                {
                    _2595 = texelFetch(g_lightClassification, int((((_2194 << 5u) + (_2180 << 9u)) + (_2586 << 2u)) >> 2u)).x;
                    _2596 = _2595 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2596)
                    {
                        frontier_phi_81_pred = _2585;
                        frontier_phi_81_pred_1 = _2584;
                        frontier_phi_81_pred_2 = _2583;
                        frontier_phi_81_pred_3 = _2582;
                        frontier_phi_81_pred_4 = _2581;
                        frontier_phi_81_pred_5 = _2580;
                    }
                    else
                    {
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _2802 = _2580;
                        float _2803 = _2581;
                        float _2804 = _2582;
                        float _2805 = _2583;
                        float _2806 = _2584;
                        float _2807 = _2585;
                        uint _2808 = _2595;
                        uint _2809;
                        vec4 _2834;
                        float _2835;
                        vec4 _2850;
                        vec3 _2862;
                        vec4 _2878;
                        vec4 _2894;
                        float _2941;
                        bool _2942;
                        for (;;)
                        {
                            uint _2819 = ((_2586 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2808));
                            _2809 = (_2808 + 4294967295u) & _2808;
                            uint _2821 = _2819 * 40u;
                            _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            _2835 = _2834.w;
                            uint _2837 = (_2819 * 40u) + 4u;
                            _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            uint _2852 = (_2819 * 40u) + 8u;
                            _2862 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x));
                            uint _2865 = (_2819 * 40u) + 16u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2881 = (_2819 * 40u) + 20u;
                            _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            uint _2897 = (_2819 * 40u) + 24u;
                            vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            uint _2916 = (_2819 * 40u) + 28u;
                            vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            _2941 = fma(_2156, _2929.z, fma(_2155, _2929.y, _2929.x * _2154)) + _2929.w;
                            _2942 = !((fma(_2156, _2910.z, fma(_2155, _2910.y, _2910.x * _2154)) + _2910.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2942)
                            {
                                float _2969 = _2834.x - _2154;
                                float _2970 = _2834.y - _2155;
                                float _2971 = _2834.z - _2156;
                                float _2972 = dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971));
                                float _2975 = inversesqrt(_2972);
                                float _2976 = _2975 * _2969;
                                float _2977 = _2975 * _2970;
                                float _2978 = _2975 * _2971;
                                float _2982 = 1.0 - (_2972 / (_2835 * _2835));
                                float _4058 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2983 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _2987 = sqrt(_2972) * _2850.w;
                                float _2989 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                                float _2990 = _2989 * _2989;
                                float _2993 = ((1.0 - _2990) * dot(vec3(_2976, _2977, _2978), vec3(_423, _426, _429))) + _2990;
                                float _2996 = _2987 * _2987;
                                float _3000 = (fma(_2156, _2878.z, fma(_2155, _2878.y, _2878.x * _2154)) + _2878.w) / _2941;
                                float _3001 = (fma(_2156, _2894.z, fma(_2155, _2894.y, _2894.x * _2154)) + _2894.w) / _2941;
                                float _3005 = 1.0 - dot(vec2(_3000, _3001), vec2(_3000, _3001));
                                float _4074 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3006 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                                float _3007 = _3006 * (((isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))) * _2983) / ((_2996 * 0.699999988079071044921875) + 1.0));
                                float _3019 = exp2(log2(1.0 / ((_2996 * 3.5) + 5.0)) * 0.25);
                                float _3020 = 1.0 - _484;
                                float _3027 = sqrt(1.0 - ((1.0 - (_3020 * _3020)) * (1.0 - (_3019 * _3019))));
                                float _3028 = _3027 * _3027;
                                float _3029 = _3028 * _3028;
                                float _3030 = _2976 - _2446;
                                float _3031 = _2977 - _2447;
                                float _3032 = _2978 - _2448;
                                float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
                                float _3040 = dot(vec3(_423, _426, _429), vec3((-0.0) - _2446, (-0.0) - _2447, (-0.0) - _2448));
                                float _4085 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3043 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                                float _3044 = dot(vec3(_423, _426, _429), vec3(_3036 * _3030, _3036 * _3031, _3036 * _3032));
                                float _4096 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3047 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3051 = ((_3047 * _3047) * (_3029 + (-1.0))) + 1.0;
                                float _3052 = _2989 * _3028;
                                float _3053 = _3052 * _3052;
                                float _3059 = ((1.0 - _3053) * dot(vec3(_423, _426, _429), vec3(_2976, _2977, _2978))) + _3053;
                                float _4107 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3060 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                                float _3061 = 1.0 - _3028;
                                float _3071 = (0.5 / (((_3060 * ((_3043 * _3061) + _3028)) + 9.9999999392252902907785028219223e-09) + (((_3060 * _3061) + _3028) * _3043))) * _3060;
                                float _4118 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3081 = (_3006 * _2983) * (((_3029 * 3.1415927410125732421875) * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) / ((_3051 * _3051) * ((_2996 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3007 * _2850.z;
                                frontier_phi_87_pred_1 = _3007 * _2850.y;
                                frontier_phi_87_pred_2 = _3007 * _2850.x;
                                frontier_phi_87_pred_3 = _3081 * _2862.z;
                                frontier_phi_87_pred_4 = _3081 * _2862.y;
                                frontier_phi_87_pred_5 = _3081 * _2862.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3090 = frontier_phi_87_pred;
                            _3089 = frontier_phi_87_pred_1;
                            _3088 = frontier_phi_87_pred_2;
                            _3087 = frontier_phi_87_pred_3;
                            _3086 = frontier_phi_87_pred_4;
                            _3085 = frontier_phi_87_pred_5;
                            _2792 = _3088 + _2805;
                            _2793 = _3089 + _2806;
                            _2794 = _3090 + _2807;
                            _2789 = _3085 + _2802;
                            _2790 = _3086 + _2803;
                            _2791 = _3087 + _2804;
                            if (_2809 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2809;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2794;
                        frontier_phi_81_pred_1 = _2793;
                        frontier_phi_81_pred_2 = _2792;
                        frontier_phi_81_pred_3 = _2791;
                        frontier_phi_81_pred_4 = _2790;
                        frontier_phi_81_pred_5 = _2789;
                    }
                    _2431 = frontier_phi_81_pred;
                    _2429 = frontier_phi_81_pred_1;
                    _2427 = frontier_phi_81_pred_2;
                    _2425 = frontier_phi_81_pred_3;
                    _2423 = frontier_phi_81_pred_4;
                    _2421 = frontier_phi_81_pred_5;
                    uint _2587 = _2586 + 1u;
                    if (_2587 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2580 = _2421;
                        _2581 = _2423;
                        _2582 = _2425;
                        _2583 = _2427;
                        _2584 = _2429;
                        _2585 = _2431;
                        _2586 = _2587;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2427;
                frontier_phi_62_63_ladder_1 = _2431;
                frontier_phi_62_63_ladder_2 = _2429;
                frontier_phi_62_63_ladder_3 = _2425;
                frontier_phi_62_63_ladder_4 = _2423;
                frontier_phi_62_63_ladder_5 = _2421;
            }
            else
            {
                frontier_phi_62_63_ladder = _2306;
                frontier_phi_62_63_ladder_1 = _2310;
                frontier_phi_62_63_ladder_2 = _2308;
                frontier_phi_62_63_ladder_3 = _2304;
                frontier_phi_62_63_ladder_4 = _2302;
                frontier_phi_62_63_ladder_5 = _2300;
            }
            _2420 = frontier_phi_62_63_ladder_5;
            _2422 = frontier_phi_62_63_ladder_4;
            _2424 = frontier_phi_62_63_ladder_3;
            _2426 = frontier_phi_62_63_ladder;
            _2428 = frontier_phi_62_63_ladder_2;
            _2430 = frontier_phi_62_63_ladder_1;
        }
        float _2435 = isnan(1.0) ? _468 : (isnan(_468) ? 1.0 : min(_468, 1.0));
        _2212 = (_2435 * _2426) + _1668;
        _2214 = (_2435 * _2428) + _1670;
        _2216 = (_2435 * _2430) + _1672;
        _2218 = ((_2420 * 0.039999999105930328369140625) * _2435) + _1998;
        _2220 = ((_2422 * 0.039999999105930328369140625) * _2435) + _2000;
        _2222 = ((_2424 * 0.039999999105930328369140625) * _2435) + _2002;
    }
    else
    {
        _2212 = _1668;
        _2214 = _1670;
        _2216 = _1672;
        _2218 = _1998;
        _2220 = _2000;
        _2222 = _2002;
    }
    float _4134 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4145 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4156 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _2239 = ((isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2212 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _468))) + ((_2218 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1302)) * cbPerFrame._m0[3u].x);
    float _2240 = ((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2214 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _468))) + ((_2220 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1302)) * cbPerFrame._m0[3u].x);
    float _2241 = ((isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2216 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _468))) + ((_2222 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1302)) * cbPerFrame._m0[3u].x);
    uint _2242 = _442 + 6u;
    float _2250 = _402 / cbSceneParam._m0[86u].x;
    float _2251 = _403 / cbSceneParam._m0[86u].y;
    vec4 _2265 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2250, _2251, (log2((isnan(cbSceneParam._m0[77u].w) ? _326 : (isnan(_326) ? cbSceneParam._m0[77u].w : min(_326, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2267 = _2265.x;
    float _2268 = _2265.y;
    float _2269 = _2265.z;
    float _2270 = _2265.w;
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    if (_326 > cbSceneParam._m0[78u].w)
    {
        float _2325 = isnan(_326) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _326 : min(cbSceneParam._m0[80u].w, _326));
        float _2326 = _2325 / _326;
        float _2337 = _2326 * _377;
        float _2338 = _378 * _2326;
        float _2339 = (-0.0) - _2338;
        float _2340 = _2326 * _379;
        float _2342 = (cbSceneParam._m0[77u].w * _2339) / _2325;
        float _2343 = _2342 + cbSceneParam._m0[79u].w;
        float _2344 = cbSceneParam._m0[79u].w - _2338;
        float _2350 = sqrt(((_2337 * _2337) + (_2338 * _2338)) + (_2340 * _2340));
        float _2353 = (1.0 - (cbSceneParam._m0[77u].w / _2325)) * _2350;
        float _2358 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2360 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2537;
        if (abs((_2339 - _2342) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2537 = ((((_2343 > 0.0) ? exp2(_2358 * _2343) : (2.0 - exp2(_2360 * _2343))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2353;
        }
        else
        {
            float _2481 = 1.0 / cbSceneParam._m0[80u].x;
            float _2482 = isnan(_2344) ? _2343 : (isnan(_2343) ? _2344 : max(_2343, _2344));
            float _2483 = isnan(_2344) ? _2343 : (isnan(_2343) ? _2344 : min(_2343, _2344));
            float _2492 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : min(_2482, 0.0));
            float _2493 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : min(_2483, 0.0));
            _2537 = ((abs(_2350 / _2339) * cbSceneParam._m0[80u].y) * ((((_2492 - _2493) * 2.0) - ((exp2(_2358 * (isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0)))) - exp2(_2358 * (isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0))))) * _2481)) - ((exp2(_2360 * _2492) - exp2(_2360 * _2493)) * _2481))) + (_2353 * cbSceneParam._m0[80u].z);
        }
        vec4 _2539 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2250, _2251, 1.0), 0.0);
        float _2548 = exp2((_2537 * (-1.44269502162933349609375)) * (1.0 - _2539.w));
        float _2549 = log2(_2548);
        float _2565 = log2(_2270);
        _2362 = (exp2(_2565 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2549 * cbSceneParam._m0[78u].x)) * _2539.x) / cbSceneParam._m0[78u].x)) + _2267;
        _2364 = (exp2(_2565 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2549 * cbSceneParam._m0[78u].y)) * _2539.y) / cbSceneParam._m0[78u].y)) + _2268;
        _2366 = (exp2(_2565 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2549 * cbSceneParam._m0[78u].z)) * _2539.z) / cbSceneParam._m0[78u].z)) + _2269;
        _2368 = _2548 * _2270;
    }
    else
    {
        _2362 = _2267;
        _2364 = _2268;
        _2366 = _2269;
        _2368 = _2270;
    }
    bool _2575;
    vec4 _2378;
    vec4 _2400;
    float _2402;
    float _2406;
    float _2407;
    float _2408;
    float _2409;
    bool _2419;
    for (;;)
    {
        _2378 = cbMatDynParam._m0[0u];
        float _2380 = roundEven(_2378.y);
        bool _2381 = _2380 == 3.0;
        float _2382 = log2(_2368);
        float _2389 = exp2(_2382 * cbSceneParam._m0[78u].x) * _2239;
        float _2390 = exp2(_2382 * cbSceneParam._m0[78u].y) * _2240;
        float _2391 = exp2(_2382 * cbSceneParam._m0[78u].z) * _2241;
        float _2398 = _390 + (-0.5);
        _2400 = cbMtdParam._m0[1u];
        _2402 = _2400.y * _2398;
        float _2405 = (_2380 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2406 = _2405 * (_2381 ? _2389 : (_2389 + (cbSceneParam._m0[72u].w * _2362)));
        _2407 = _2405 * (_2381 ? _2390 : (_2390 + (cbSceneParam._m0[72u].w * _2364)));
        _2408 = _2405 * (_2381 ? _2391 : (_2391 + (cbSceneParam._m0[72u].w * _2366)));
        _2409 = _2398 * 0.999000012874603271484375;
        _2419 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2419)
        {
            if ((cbInstanceData._m0[_442 + 7u].x + _2409) < 0.5)
            {
                _2575 = true;
                break;
            }
        }
        uint _2516 = _444 + uint(_2378.w);
        if ((cbInstanceData._m0[_2516].w < 1.0) && ((cbInstanceData._m0[_2516].w + _2409) < 0.5))
        {
            _2575 = true;
            break;
        }
        if ((_2402 + _239) < _2400.x)
        {
            _2575 = true;
            break;
        }
        _2575 = false;
        break;
    }
    float _2780;
    if (_2575)
    {
        discard_state = true;
        _2780 = 0.0;
    }
    else
    {
        _2780 = cbInstanceData._m0[_2242].w;
    }
    SV_Target.x = _2406;
    SV_Target.y = _2407;
    SV_Target.z = _2408;
    SV_Target.w = _2780;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2242].w;
    discard_exit();
}


