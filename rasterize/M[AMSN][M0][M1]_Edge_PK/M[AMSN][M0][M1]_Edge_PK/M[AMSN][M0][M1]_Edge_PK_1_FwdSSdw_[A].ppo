#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _869;
float _3262;
float _3263;
float _3264;
float _3265;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.w;
    float _242 = _235.x * cbMtdParam._m0[9u].x;
    float _243 = _235.y * cbMtdParam._m0[9u].y;
    float _244 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _256 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _260 = _256.z;
    float _264 = (_256.x * 2.0) + (-1.0);
    float _266 = (_256.y * 2.0) + (-1.0);
    float _267 = dot(vec2(_264, _266), vec2(_264, _266));
    float _3274 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _273 = sqrt(1.0 - (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))));
    float _278 = gl_FragCoord.x * 0.125;
    float _280 = gl_FragCoord.y * 0.125;
    float _291 = fma(_273, _213, fma(_266, _205 * TANGENT.x, (_191 * _184) * _264));
    float _294 = fma(_273, _214, fma(_266, _205 * TANGENT.y, (_191 * _185) * _264));
    float _297 = fma(_273, _215, fma(_266, _205 * TANGENT.z, (_191 * _186) * _264));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _302 = _301 * _291;
    float _303 = _301 * _294;
    float _304 = _301 * _297;
    float _3285 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _305 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _3296 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3307 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3318 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    if (!(cbMtdParam._m0[10u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_278, _280)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _369 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _379 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _369);
    float _380 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _369);
    float _381 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _369);
    float _385 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _386 = _379 * _385;
    float _387 = _380 * _385;
    float _388 = _381 * _385;
    vec4 _390 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_278, _280));
    float _392 = _390.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _550 = sqrt(((_379 * _379) + (_380 * _380)) + (_381 * _381));
        float _556 = (cbMatDynParam._m0[5u].x * _550) + cbMatDynParam._m0[5u].y;
        float _3329 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        float _557 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _561 = (cbMatDynParam._m0[5u].z * _550) + cbMatDynParam._m0[5u].w;
        float _3340 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) - _557)) + _557) < ((_392 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _425 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _428 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _431 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _446 = _444 + 9u;
    uint _447 = _446 + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3351 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
    float _3362 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    float _3373 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    vec4 _467 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _470 = _467.x * TEXCOORD.z;
    float _471 = dot(vec3(_302, _303, _304), vec3(_386, _387, _388));
    float _474 = _471 * 2.0;
    float _478 = (_474 * _302) - _386;
    float _479 = (_474 * _303) - _387;
    float _480 = (_474 * _304) - _388;
    float _484 = abs(dot(vec3(_386, _387, _388), vec3(_302, _303, _304)));
    float _3384 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _486 = sqrt(_305);
    float _499 = exp2((_486 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_486 * 3.0));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _868;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _593 = fma(_539, cbModelParam._m0[26u].z, fma(_535, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _531));
        float _597 = fma(_539, cbModelParam._m0[27u].z, fma(_535, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _531));
        float _601 = fma(_539, cbModelParam._m0[28u].z, fma(_535, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _531));
        float _626 = _531 + _302;
        float _627 = _535 + _303;
        float _628 = _539 + _304;
        float _638 = fma(_628, cbModelParam._m0[26u].z, fma(_627, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _626)) - _593;
        float _639 = fma(_628, cbModelParam._m0[27u].z, fma(_627, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _626)) - _597;
        float _640 = fma(_628, cbModelParam._m0[28u].z, fma(_627, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _626)) - _601;
        float _644 = inversesqrt(dot(vec3(_638, _639, _640), vec3(_638, _639, _640)));
        float _657 = ((_644 * _638) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_593 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _658 = ((_644 * _639) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_597 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _659 = ((_644 * _640) / cbModelParam._m0[34u].z) + ((((((_601 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        float _696 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_662.x + (-0.5));
        float _698 = _696 * (_662.y + (-0.5));
        float _699 = _696 * (_662.z + (-0.5));
        float _706 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_669.x + (-0.5));
        float _708 = _706 * (_669.y + (-0.5));
        float _709 = _706 * (_669.z + (-0.5));
        float _716 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_676.x + (-0.5));
        float _718 = _716 * (_676.y + (-0.5));
        float _719 = _716 * (_676.z + (-0.5));
        float _726 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_683.x + (-0.5));
        float _728 = _726 * (_683.y + (-0.5));
        float _729 = _726 * (_683.z + (-0.5));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = _697 * 0.5;
        float _734 = _707 * 0.5;
        float _735 = _717 * 0.5;
        float _736 = dot(vec3(_733, _734, _735), vec3(_733, _734, _735));
        float _741 = (_736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_736);
        float _750 = (dot(vec3(_302, _303, _304), vec3(_741 * _733, _741 * _734, _741 * _735)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _760 = sqrt(((_734 * _734) + (_733 * _733)) + (_735 * _735)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _762 = _761 * 2.0;
        float _766 = (1.0 - _761) / (_761 + 1.0);
        float _3432 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _776 = ((((1.0 - _767) * (_762 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_762 + 1.0))) + _767) * _730;
        float _777 = _698 * 0.5;
        float _778 = _708 * 0.5;
        float _779 = _718 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _793 = (dot(vec3(_302, _303, _304), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _802 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3465 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_804 + 1.0))) + _809) * _731;
        float _819 = _699 * 0.5;
        float _820 = _709 * 0.5;
        float _821 = _719 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_302, _303, _304), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_732 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3498 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_846 + 1.0))) + _851) * _732;
        _868 = _699;
        _870 = _698;
        _871 = _697;
        _872 = _709;
        _873 = _708;
        _874 = _707;
        _875 = _719;
        _876 = _718;
        _877 = _717;
        _878 = _732;
        _879 = _731;
        _880 = _730;
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0)));
        _882 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _883 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
    }
    else
    {
        _868 = _869;
        _870 = _869;
        _871 = _869;
        _872 = _869;
        _873 = _869;
        _874 = _869;
        _875 = _869;
        _876 = _869;
        _877 = _869;
        _878 = _869;
        _879 = _869;
        _880 = _869;
        _881 = 0.0;
        _882 = 0.0;
        _883 = 0.0;
    }
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _909 = fma(_539, cbModelParam._m0[30u].z, fma(_535, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _531));
        float _913 = fma(_539, cbModelParam._m0[31u].z, fma(_535, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _531));
        float _917 = fma(_539, cbModelParam._m0[32u].z, fma(_535, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _531));
        float _940 = _531 + _302;
        float _941 = _535 + _303;
        float _942 = _539 + _304;
        float _952 = fma(_942, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _940)) - _909;
        float _953 = fma(_942, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _940)) - _913;
        float _954 = fma(_942, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _940)) - _917;
        float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
        float _971 = ((_958 * _952) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_909 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_958 * _953) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_913 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_958 * _954) / cbModelParam._m0[35u].z) + ((((((_917 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        float _1008 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_975.x + (-0.5));
        float _1010 = _1008 * (_975.y + (-0.5));
        float _1011 = _1008 * (_975.z + (-0.5));
        float _1018 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_982.x + (-0.5));
        float _1020 = _1018 * (_982.y + (-0.5));
        float _1021 = _1018 * (_982.z + (-0.5));
        float _1028 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_989.x + (-0.5));
        float _1030 = _1028 * (_989.y + (-0.5));
        float _1031 = _1028 * (_989.z + (-0.5));
        float _1038 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_996.x + (-0.5));
        float _1040 = _1038 * (_996.y + (-0.5));
        float _1041 = _1038 * (_996.z + (-0.5));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = _1009 * 0.5;
        float _1046 = _1019 * 0.5;
        float _1047 = _1029 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_302, _303, _304), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3561 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1072 + 1.0))) + _1077) * _1042;
        float _1087 = _1010 * 0.5;
        float _1088 = _1020 * 0.5;
        float _1089 = _1030 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_302, _303, _304), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3594 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1114 + 1.0))) + _1119) * _1043;
        float _1129 = _1011 * 0.5;
        float _1130 = _1021 * 0.5;
        float _1131 = _1031 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_302, _303, _304), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3627 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1156 + 1.0))) + _1161) * _1044;
        _1178 = _1011;
        _1179 = _1010;
        _1180 = _1009;
        _1181 = _1021;
        _1182 = _1020;
        _1183 = _1019;
        _1184 = _1031;
        _1185 = _1030;
        _1186 = _1029;
        _1187 = _1044;
        _1188 = _1043;
        _1189 = _1042;
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1191 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
    }
    else
    {
        _1178 = _869;
        _1179 = _869;
        _1180 = _869;
        _1181 = _869;
        _1182 = _869;
        _1183 = _869;
        _1184 = _869;
        _1185 = _869;
        _1186 = _869;
        _1187 = _869;
        _1188 = _869;
        _1189 = _869;
        _1190 = 0.0;
        _1191 = 0.0;
        _1192 = 0.0;
    }
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _881)) + _881;
    float _1203 = (cbModelParam._m0[1u].x * (_1191 - _882)) + _882;
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _883)) + _883;
    float _1225 = fma(_1204, cbSceneParam._m0[89u].z, fma(_1203, cbSceneParam._m0[89u].y, _1202 * cbSceneParam._m0[89u].x));
    float _1228 = fma(_1204, cbSceneParam._m0[90u].z, fma(_1203, cbSceneParam._m0[90u].y, _1202 * cbSceneParam._m0[90u].x));
    float _1231 = fma(_1204, cbSceneParam._m0[91u].z, fma(_1203, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1202));
    float _1246 = _478 * 0.5;
    float _1247 = _479 * 0.5;
    float _1248 = _480 * 0.5;
    float _1249 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1252 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1255 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1289;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1262 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_868, _872, _875, _878));
        float _1266 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_870, _873, _876, _879));
        float _1270 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_871, _874, _877, _880));
        float _1277 = dot(vec4(cbModelParam._m0[39u]), vec4(_1246, _1247, _1248, 1.0));
        _1289 = dot(vec3(isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1289 = 1.0;
    }
    float _1300;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1291 = dot(vec4(cbModelParam._m0[40u]), vec4(_1246, _1247, _1248, 1.0));
        _1300 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1300 = 1.0;
    }
    float _1304 = (_1300 * cbModelParam._m0[1u].x) + (_1289 * (1.0 - cbModelParam._m0[1u].x));
    float _1314 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _305);
    float _1315 = isnan(_1314) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1314 : min(cbModelParam._m0[25u].z, _1314));
    float _1397;
    float _1399;
    float _1401;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1364 = fma(_539, cbModelParam._m0[13u].z, fma(_535, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _531)) + cbModelParam._m0[13u].w;
        float _1368 = fma(_539, cbModelParam._m0[14u].z, fma(_535, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _531)) + cbModelParam._m0[14u].w;
        float _1372 = fma(_539, cbModelParam._m0[15u].z, fma(_535, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _531)) + cbModelParam._m0[15u].w;
        float _1375 = fma(_480, cbModelParam._m0[13u].z, fma(_479, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _478));
        float _1378 = fma(_480, cbModelParam._m0[14u].z, fma(_479, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _478));
        float _1381 = fma(_480, cbModelParam._m0[15u].z, fma(_479, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _478));
        float _1409;
        if (_1375 > 0.0)
        {
            _1409 = abs((1.0 - _1364) / _1375);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1364 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1409 = frontier_phi_21_19_ladder;
        }
        float _1636;
        if (_1378 > 0.0)
        {
            _1636 = abs((1.0 - _1368) / _1378);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1368 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1636 = frontier_phi_30_26_ladder;
        }
        float _1882;
        if (_1381 > 0.0)
        {
            _1882 = abs((1.0 - _1372) / _1381);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1372 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1882 = frontier_phi_42_37_ladder;
        }
        float _1884 = isnan(_1636) ? _1409 : (isnan(_1409) ? _1636 : min(_1409, _1636));
        float _1885 = isnan(_1882) ? _1884 : (isnan(_1884) ? _1882 : min(_1884, _1882));
        float _1889 = (_1885 * _1375) + _1364;
        float _1890 = (_1885 * _1378) + _1368;
        float _1891 = (_1885 * _1381) + _1372;
        float _1892 = _1885 * 9.9999997473787516355514526367188e-05;
        float _1894 = (-1.0) - _1892;
        float _1896 = _1892 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_1891 > _1896) || ((_1891 < _1894) || ((_1890 > _1896) || ((_1890 < _1894) || ((_1889 < _1894) || (_1889 > _1896))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2015 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1891, cbModelParam._m0[9u].z, fma(_1890, cbModelParam._m0[9u].y, _1889 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1891, cbModelParam._m0[10u].z, fma(_1890, cbModelParam._m0[10u].y, _1889 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1891, cbModelParam._m0[11u].z, fma(_1890, cbModelParam._m0[11u].y, _1889 * cbModelParam._m0[11u].x))), _1315);
            frontier_phi_20_42_ladder = _2015.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2015.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2015.x * cbModelParam._m0[1u].y;
        }
        _1397 = frontier_phi_20_42_ladder_2;
        _1399 = frontier_phi_20_42_ladder_1;
        _1401 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1385 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_478, _479, _480), _1315);
        _1397 = _1385.x * cbModelParam._m0[1u].y;
        _1399 = _1385.y * cbModelParam._m0[1u].y;
        _1401 = _1385.z * cbModelParam._m0[1u].y;
    }
    float _1405 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _305);
    float _1406 = isnan(_1405) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1405 : min(cbModelParam._m0[25u].w, _1405));
    float _1499;
    float _1501;
    float _1503;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1463 = fma(_539, cbModelParam._m0[21u].z, fma(_535, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _531)) + cbModelParam._m0[21u].w;
        float _1467 = fma(_539, cbModelParam._m0[22u].z, fma(_535, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _531)) + cbModelParam._m0[22u].w;
        float _1471 = fma(_539, cbModelParam._m0[23u].z, fma(_535, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _531)) + cbModelParam._m0[23u].w;
        float _1474 = fma(_480, cbModelParam._m0[21u].z, fma(_479, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _478));
        float _1477 = fma(_480, cbModelParam._m0[22u].z, fma(_479, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _478));
        float _1480 = fma(_480, cbModelParam._m0[23u].z, fma(_479, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _478));
        float _1641;
        if (_1474 > 0.0)
        {
            _1641 = abs((1.0 - _1463) / _1474);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1463 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1641 = frontier_phi_32_28_ladder;
        }
        float _1909;
        if (_1477 > 0.0)
        {
            _1909 = abs((1.0 - _1467) / _1477);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1467 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _1909 = frontier_phi_44_39_ladder;
        }
        float _2114;
        if (_1480 > 0.0)
        {
            _2114 = abs((1.0 - _1471) / _1480);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1471 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2114 = frontier_phi_53_50_ladder;
        }
        float _2116 = isnan(_1909) ? _1641 : (isnan(_1641) ? _1909 : min(_1641, _1909));
        float _2117 = isnan(_2114) ? _2116 : (isnan(_2116) ? _2114 : min(_2116, _2114));
        float _2121 = (_2117 * _1474) + _1463;
        float _2122 = (_2117 * _1477) + _1467;
        float _2123 = (_2117 * _1480) + _1471;
        float _2124 = _2117 * 9.9999997473787516355514526367188e-05;
        float _2125 = (-1.0) - _2124;
        float _2127 = _2124 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2123 > _2127) || ((_2123 < _2125) || ((_2122 > _2127) || ((_2122 < _2125) || ((_2121 < _2125) || (_2121 > _2127))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2321 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2123, cbModelParam._m0[17u].z, fma(_2122, cbModelParam._m0[17u].y, _2121 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2123, cbModelParam._m0[18u].z, fma(_2122, cbModelParam._m0[18u].y, _2121 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2123, cbModelParam._m0[19u].z, fma(_2122, cbModelParam._m0[19u].y, _2121 * cbModelParam._m0[19u].x))), _1406);
            frontier_phi_29_53_ladder = _2321.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2321.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2321.x * cbModelParam._m0[1u].z;
        }
        _1499 = frontier_phi_29_53_ladder_2;
        _1501 = frontier_phi_29_53_ladder_1;
        _1503 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1483 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_478, _479, _480), _1406);
        _1499 = _1483.x * cbModelParam._m0[1u].z;
        _1501 = _1483.y * cbModelParam._m0[1u].z;
        _1503 = _1483.z * cbModelParam._m0[1u].z;
    }
    float _1515 = ((((1.0 - _499) * ((_486 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_499 * _486)) * _470;
    float _1516 = _1515 * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1517 = _1515 * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1518 = _1515 * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1521 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1517, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1524 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1517, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1527 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1517, cbSceneParam._m0[91u].y, _1516 * cbSceneParam._m0[91u].x));
    vec4 _1535 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_404, _405));
    float _1537 = _1535.w;
    float _1549 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1537);
    float _1550 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1537);
    float _1551 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1537);
    uvec4 _1555 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1557 = _1555.x * 14u;
    uint _1558 = _1557 + 13u;
    float _1565 = _470 + (-1.0);
    float _1570 = (cbLight._m0[_1558].x * _1565) + 1.0;
    float _1571 = (cbLight._m0[_1558].y * _1565) + 1.0;
    float _1572 = (cbLight._m0[_1558].z * _1565) + 1.0;
    float _1573 = (cbLight._m0[_1558].w * _1565) + 1.0;
    uint _1574 = _1557 + 5u;
    float _1580 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
    uint _1584 = _1557 + 4u;
    float _1594 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
    uint _1598 = _1557 | 1u;
    float _1609 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_302, _303, _304));
    float _1612 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_302, _303, _304));
    float _3763 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _3774 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1617 = (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * 0.3183098733425140380859375;
    float _1619 = (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 0.3183098733425140380859375;
    float _1626 = ((cbLight._m0[_1574].x * _1580) * _1619) + (((cbLight._m0[_1584].x * _1549) * _1594) * _1617);
    float _1627 = ((_1580 * cbLight._m0[_1574].y) * _1619) + (((cbLight._m0[_1584].y * _1550) * _1594) * _1617);
    float _1628 = ((_1580 * cbLight._m0[_1574].z) * _1619) + (((cbLight._m0[_1584].z * _1551) * _1594) * _1617);
    uvec4 _1633 = floatBitsToUint(cbLight._m0[_1557 + 12u]);
    bool _1635 = _1633.x == 0u;
    float _1646;
    float _1648;
    float _1650;
    if (_1635)
    {
        _1646 = _1626;
        _1648 = _1627;
        _1650 = _1628;
    }
    else
    {
        uint _1654 = _1557 + 6u;
        float _1670 = (dot(vec3(cbLight._m0[_1557 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1671 = _1670 * _1670;
        float _3785 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1673 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1646 = (((cbLight._m0[_1654].x * 0.3183098733425140380859375) * _1672) * _1673) + _1626;
        _1648 = (((cbLight._m0[_1654].y * 0.3183098733425140380859375) * _1672) * _1673) + _1627;
        _1650 = (((cbLight._m0[_1654].z * 0.3183098733425140380859375) * _1672) * _1673) + _1628;
    }
    bool _1653 = _1633.y == 0u;
    float _1691;
    float _1693;
    float _1695;
    if (_1653)
    {
        _1691 = _1646;
        _1693 = _1648;
        _1695 = _1650;
    }
    else
    {
        uint _1853 = _1557 + 7u;
        float _1869 = (dot(vec3(cbLight._m0[_1557 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1870 = _1869 * _1869;
        float _3801 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1872 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _1691 = (((cbLight._m0[_1853].x * 0.3183098733425140380859375) * _1871) * _1872) + _1646;
        _1693 = (((cbLight._m0[_1853].y * 0.3183098733425140380859375) * _1871) * _1872) + _1648;
        _1695 = (((cbLight._m0[_1853].z * 0.3183098733425140380859375) * _1871) * _1872) + _1650;
    }
    uint _1698 = _1557 + 8u;
    float _1711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1557].w)) * _305) * 0.949999988079071044921875);
    float _1712 = _1711 * _1711;
    float _1713 = cbLight._m0[_1557].x + _386;
    float _1714 = cbLight._m0[_1557].y + _387;
    float _1715 = cbLight._m0[_1557].z + _388;
    float _1719 = inversesqrt(dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715)));
    float _1720 = _1719 * _1713;
    float _1721 = _1719 * _1714;
    float _1722 = _1719 * _1715;
    float _1723 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1557].xyz));
    float _3817 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1726 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _1727 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _1728 = dot(vec3(_302, _303, _304), vec3(_1720, _1721, _1722));
    float _3839 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1731 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _1732 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_1720, _1721, _1722));
    float _3850 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1736 = _1712 * _1712;
    float _1740 = ((_1731 * _1731) * (_1736 + (-1.0))) + 1.0;
    float _1751 = (exp2(log2(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1752 = 1.0 - _1712;
    float _1763 = (0.5 / (((_1727 * ((_1726 * _1752) + _1712)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1752) + _1712) * _1726))) * _1726;
    float _3861 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1765 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1736 / ((_1740 * _1740) * 3.141590118408203125));
    uint _1779 = _1557 + 9u;
    float _1790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1598].w)) * _305) * 0.949999988079071044921875);
    float _1791 = _1790 * _1790;
    float _1792 = cbLight._m0[_1598].x + _386;
    float _1793 = cbLight._m0[_1598].y + _387;
    float _1794 = cbLight._m0[_1598].z + _388;
    float _1798 = inversesqrt(dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794)));
    float _1799 = _1798 * _1792;
    float _1800 = _1798 * _1793;
    float _1801 = _1798 * _1794;
    float _1802 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1598].xyz));
    float _3872 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1805 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _1806 = dot(vec3(_302, _303, _304), vec3(_1799, _1800, _1801));
    float _3883 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _1810 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_1799, _1800, _1801));
    float _3894 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1814 = _1791 * _1791;
    float _1818 = ((_1809 * _1809) * (_1814 + (-1.0))) + 1.0;
    float _1827 = (exp2(log2(1.0 - (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1828 = 1.0 - _1791;
    float _1838 = (0.5 / (((_1727 * ((_1805 * _1828) + _1791)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1828) + _1791) * _1805))) * _1805;
    float _3905 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1814 / ((_1818 * _1818) * 3.141590118408203125));
    float _1850 = (((_1827 * cbLight._m0[_1779].x) * _1840) * _1580) + ((((cbLight._m0[_1698].x * _1549) * _1751) * _1765) * _1594);
    float _1851 = (((_1827 * cbLight._m0[_1779].y) * _1840) * _1580) + ((((cbLight._m0[_1698].y * _1550) * _1751) * _1765) * _1594);
    float _1852 = (((_1827 * cbLight._m0[_1779].z) * _1840) * _1580) + ((((cbLight._m0[_1698].z * _1551) * _1751) * _1765) * _1594);
    float _1914;
    float _1916;
    float _1918;
    if (_1635)
    {
        _1914 = _1850;
        _1916 = _1851;
        _1918 = _1852;
    }
    else
    {
        uint _1920 = _1557 + 2u;
        uint _1924 = _1557 + 10u;
        float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _305) * 0.949999988079071044921875);
        float _1939 = _1938 * _1938;
        float _1940 = cbLight._m0[_1920].x + _386;
        float _1941 = cbLight._m0[_1920].y + _387;
        float _1942 = cbLight._m0[_1920].z + _388;
        float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
        float _1947 = _1946 * _1940;
        float _1948 = _1946 * _1941;
        float _1949 = _1946 * _1942;
        float _1950 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1920].xyz));
        float _3916 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1953 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1954 = dot(vec3(_302, _303, _304), vec3(_1947, _1948, _1949));
        float _3927 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1957 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1958 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_1947, _1948, _1949));
        float _3938 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1962 = _1939 * _1939;
        float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
        float _1975 = (exp2(log2(1.0 - (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1976 = 1.0 - _1939;
        float _1986 = (0.5 / (((_1727 * ((_1953 * _1976) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1976) + _1939) * _1953))) * _1953;
        float _3949 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1988 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
        float _1989 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1914 = (((_1975 * cbLight._m0[_1924].x) * _1988) * _1989) + _1850;
        _1916 = (((_1975 * cbLight._m0[_1924].y) * _1988) * _1989) + _1851;
        _1918 = (((_1975 * cbLight._m0[_1924].z) * _1988) * _1989) + _1852;
    }
    float _2024;
    float _2026;
    float _2028;
    if (_1653)
    {
        _2024 = _1914;
        _2026 = _1916;
        _2028 = _1918;
    }
    else
    {
        uint _2035 = _1557 + 3u;
        uint _2039 = _1557 + 11u;
        float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _305) * 0.949999988079071044921875);
        float _2054 = _2053 * _2053;
        float _2055 = cbLight._m0[_2035].x + _386;
        float _2056 = cbLight._m0[_2035].y + _387;
        float _2057 = cbLight._m0[_2035].z + _388;
        float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
        float _2062 = _2061 * _2055;
        float _2063 = _2061 * _2056;
        float _2064 = _2061 * _2057;
        float _2065 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2035].xyz));
        float _3965 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2068 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _2069 = dot(vec3(_302, _303, _304), vec3(_2062, _2063, _2064));
        float _3976 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _2073 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2062, _2063, _2064));
        float _3987 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2077 = _2054 * _2054;
        float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
        float _2090 = (exp2(log2(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2091 = 1.0 - _2054;
        float _2101 = (0.5 / (((_1727 * ((_2068 * _2091) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _2091) + _2054) * _2068))) * _2068;
        float _3998 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2103 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
        float _2104 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _2024 = (((_2090 * cbLight._m0[_2039].x) * _2103) * _2104) + _1914;
        _2026 = (((_2090 * cbLight._m0[_2039].y) * _2103) * _2104) + _1916;
        _2028 = (((_2090 * cbLight._m0[_2039].z) * _2103) * _2104) + _1918;
    }
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    if (_1555.y == 0u)
    {
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2179;
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2179;
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2179;
        uvec4 _2194 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2195 = _2194.x;
        uint _2206 = uint((float(_2194.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2195))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2195)));
        float _2216 = (log2(_2182 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2217 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        uint _2220 = uint(isnan(14.0) ? _2217 : (isnan(_2217) ? 14.0 : min(_2217, 14.0)));
        uvec4 _2225 = texelFetch(g_lightClusterGridBuffer, int(((_2220 << 2u) + (_2206 << 6u)) >> 2u));
        uint _2226 = _2225.x;
        uint _2227 = _2194.z;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        if (((((1u << ((_2227 >> 4u) & 15u)) + 4294967295u) & _2226) == 0u) || ((_2227 & 240u) == 0u))
        {
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
        }
        else
        {
            float _2327;
            float _2329;
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            float _2483 = 0.0;
            uint _2484 = 0u;
            uint _2493;
            bool _2494;
            for (;;)
            {
                _2493 = texelFetch(g_lightClassification, int((((_2220 << 5u) + (_2206 << 9u)) + (_2484 << 2u)) >> 2u)).x;
                _2494 = _2493 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2494)
                {
                    frontier_phi_70_pred = _2480;
                    frontier_phi_70_pred_1 = _2483;
                    frontier_phi_70_pred_2 = _2482;
                    frontier_phi_70_pred_3 = _2481;
                    frontier_phi_70_pred_4 = _2479;
                    frontier_phi_70_pred_5 = _2478;
                }
                else
                {
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    uint _2629;
                    _2623 = _2478;
                    _2624 = _2479;
                    _2625 = _2480;
                    _2626 = _2481;
                    _2627 = _2482;
                    _2628 = _2483;
                    _2629 = _2493;
                    float _2550;
                    float _2551;
                    float _2552;
                    float _2553;
                    float _2554;
                    float _2555;
                    for (;;)
                    {
                        uint _2633 = uint(findLSB(_2629)) + (_2484 << 5u);
                        uint _2630 = (_2629 + 4294967295u) & _2629;
                        uint _2635 = _2633 * 48u;
                        vec4 _2649 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2635)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 3u)).x));
                        uint _2655 = (_2633 * 48u) + 4u;
                        vec4 _2668 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2655)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 3u)).x));
                        uint _2674 = (_2633 * 48u) + 8u;
                        vec3 _2685 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2674)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 2u)).x));
                        float _2689 = _2649.x - _2180;
                        float _2690 = _2649.y - _2181;
                        float _2691 = _2649.z - _2182;
                        float _2692 = dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691));
                        float _2695 = inversesqrt(_2692);
                        float _2696 = _2695 * _2689;
                        float _2697 = _2695 * _2690;
                        float _2698 = _2695 * _2691;
                        float _2699 = dot(vec3(_425, _428, _431), vec3(_2696, _2697, _2698));
                        float _2704 = 1.0 - (_2692 * _2649.w);
                        float _4024 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
                        float _2705 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2706 = sqrt(_2692) * _2668.w;
                        float _2709 = 1.39999997615814208984375 / (_2706 + 1.39999997615814208984375);
                        float _2710 = _2709 * _2709;
                        float _2713 = ((1.0 - _2710) * _2699) + _2710;
                        float _2716 = _2706 * _2706;
                        float _2720 = ((isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0))) * _2705) / ((_2716 * 0.699999988079071044921875) + 1.0);
                        float _2724 = (-0.0) - _2180;
                        float _2725 = (-0.0) - _2181;
                        float _2726 = (-0.0) - _2182;
                        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
                        float _2731 = _2730 * _2724;
                        float _2732 = _2730 * _2725;
                        float _2733 = _2730 * _2726;
                        float _2741 = exp2(log2(1.0 / ((_2716 * 3.5) + 5.0)) * 0.25);
                        float _2742 = 1.0 - _486;
                        float _2749 = sqrt(1.0 - ((1.0 - (_2742 * _2742)) * (1.0 - (_2741 * _2741))));
                        float _2750 = _2749 * _2749;
                        float _2751 = _2750 * _2750;
                        float _2752 = _2731 + _2696;
                        float _2753 = _2732 + _2697;
                        float _2754 = _2733 + _2698;
                        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
                        float _2762 = dot(vec3(_425, _428, _431), vec3(_2731, _2732, _2733));
                        float _4040 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2765 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                        float _2766 = dot(vec3(_425, _428, _431), vec3(_2758 * _2752, _2758 * _2753, _2758 * _2754));
                        float _4051 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2769 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                        float _2773 = ((_2769 * _2769) * (_2751 + (-1.0))) + 1.0;
                        float _2774 = _2709 * _2750;
                        float _2775 = _2774 * _2774;
                        float _2778 = ((1.0 - _2775) * _2699) + _2775;
                        float _4062 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2779 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                        float _2780 = 1.0 - _2750;
                        float _2790 = (0.5 / (((_2779 * ((_2765 * _2780) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2779 * _2780) + _2750) * _2765))) * _2779;
                        float _4073 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2801 = (((_2751 * 3.1415927410125732421875) * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) / ((_2773 * _2773) * ((_2716 * 2.1991131305694580078125) + 3.141590118408203125))) * _2705;
                        _2553 = (_2720 * _2668.x) + _2626;
                        _2554 = (_2720 * _2668.y) + _2627;
                        _2555 = (_2720 * _2668.z) + _2628;
                        _2550 = (_2801 * _2685.x) + _2623;
                        _2551 = (_2801 * _2685.y) + _2624;
                        _2552 = (_2801 * _2685.z) + _2625;
                        if (_2630 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2623 = _2550;
                            _2624 = _2551;
                            _2625 = _2552;
                            _2626 = _2553;
                            _2627 = _2554;
                            _2628 = _2555;
                            _2629 = _2630;
                        }
                    }
                    frontier_phi_70_pred = _2552;
                    frontier_phi_70_pred_1 = _2555;
                    frontier_phi_70_pred_2 = _2554;
                    frontier_phi_70_pred_3 = _2553;
                    frontier_phi_70_pred_4 = _2551;
                    frontier_phi_70_pred_5 = _2550;
                }
                _2331 = frontier_phi_70_pred;
                _2337 = frontier_phi_70_pred_1;
                _2335 = frontier_phi_70_pred_2;
                _2333 = frontier_phi_70_pred_3;
                _2329 = frontier_phi_70_pred_4;
                _2327 = frontier_phi_70_pred_5;
                uint _2485 = _2484 + 1u;
                if (_2485 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2478 = _2327;
                    _2479 = _2329;
                    _2480 = _2331;
                    _2481 = _2333;
                    _2482 = _2335;
                    _2483 = _2337;
                    _2484 = _2485;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
        }
        uvec4 _2340 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2341 = _2340.z;
        uint _2343 = (_2341 >> 8u) & 15u;
        float _2446;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        if (((4294967295u << _2343) & _2226) == 0u)
        {
            _2446 = _2326;
            _2448 = _2328;
            _2450 = _2330;
            _2452 = _2332;
            _2454 = _2334;
            _2456 = _2336;
        }
        else
        {
            float _2471 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
            float _2472 = _2471 * _2180;
            float _2473 = _2471 * _2181;
            float _2474 = _2471 * _2182;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2343 < ((_2341 >> 12u) & 15u))
            {
                float _2447;
                float _2449;
                float _2451;
                float _2453;
                float _2455;
                float _2457;
                float _2606 = _2326;
                float _2607 = _2328;
                float _2608 = _2330;
                float _2609 = _2332;
                float _2610 = _2334;
                float _2611 = _2336;
                uint _2612 = _2343;
                uint _2621;
                bool _2622;
                for (;;)
                {
                    _2621 = texelFetch(g_lightClassification, int((((_2220 << 5u) + (_2206 << 9u)) + (_2612 << 2u)) >> 2u)).x;
                    _2622 = _2621 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2622)
                    {
                        frontier_phi_81_pred = _2611;
                        frontier_phi_81_pred_1 = _2610;
                        frontier_phi_81_pred_2 = _2609;
                        frontier_phi_81_pred_3 = _2608;
                        frontier_phi_81_pred_4 = _2607;
                        frontier_phi_81_pred_5 = _2606;
                    }
                    else
                    {
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2818;
                        float _2819;
                        float _2820;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _2828 = _2606;
                        float _2829 = _2607;
                        float _2830 = _2608;
                        float _2831 = _2609;
                        float _2832 = _2610;
                        float _2833 = _2611;
                        uint _2834 = _2621;
                        uint _2835;
                        vec4 _2860;
                        float _2861;
                        vec4 _2876;
                        vec3 _2888;
                        vec4 _2904;
                        vec4 _2920;
                        float _2967;
                        bool _2968;
                        for (;;)
                        {
                            uint _2845 = ((_2612 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2834));
                            _2835 = (_2834 + 4294967295u) & _2834;
                            uint _2847 = _2845 * 40u;
                            _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            _2861 = _2860.w;
                            uint _2863 = (_2845 * 40u) + 4u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2878 = (_2845 * 40u) + 8u;
                            _2888 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x));
                            uint _2891 = (_2845 * 40u) + 16u;
                            _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2907 = (_2845 * 40u) + 20u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            uint _2923 = (_2845 * 40u) + 24u;
                            vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2942 = (_2845 * 40u) + 28u;
                            vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            _2967 = fma(_2182, _2955.z, fma(_2181, _2955.y, _2955.x * _2180)) + _2955.w;
                            _2968 = !((fma(_2182, _2936.z, fma(_2181, _2936.y, _2936.x * _2180)) + _2936.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2968)
                            {
                                float _2995 = _2860.x - _2180;
                                float _2996 = _2860.y - _2181;
                                float _2997 = _2860.z - _2182;
                                float _2998 = dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997));
                                float _3001 = inversesqrt(_2998);
                                float _3002 = _3001 * _2995;
                                float _3003 = _3001 * _2996;
                                float _3004 = _3001 * _2997;
                                float _3008 = 1.0 - (_2998 / (_2861 * _2861));
                                float _4084 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3009 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3013 = sqrt(_2998) * _2876.w;
                                float _3015 = 1.39999997615814208984375 / (_3013 + 1.39999997615814208984375);
                                float _3016 = _3015 * _3015;
                                float _3019 = ((1.0 - _3016) * dot(vec3(_3002, _3003, _3004), vec3(_425, _428, _431))) + _3016;
                                float _3022 = _3013 * _3013;
                                float _3026 = (fma(_2182, _2904.z, fma(_2181, _2904.y, _2904.x * _2180)) + _2904.w) / _2967;
                                float _3027 = (fma(_2182, _2920.z, fma(_2181, _2920.y, _2920.x * _2180)) + _2920.w) / _2967;
                                float _3031 = 1.0 - dot(vec2(_3026, _3027), vec2(_3026, _3027));
                                float _4100 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3032 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3033 = _3032 * (((isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0))) * _3009) / ((_3022 * 0.699999988079071044921875) + 1.0));
                                float _3045 = exp2(log2(1.0 / ((_3022 * 3.5) + 5.0)) * 0.25);
                                float _3046 = 1.0 - _486;
                                float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                                float _3054 = _3053 * _3053;
                                float _3055 = _3054 * _3054;
                                float _3056 = _3002 - _2472;
                                float _3057 = _3003 - _2473;
                                float _3058 = _3004 - _2474;
                                float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                                float _3066 = dot(vec3(_425, _428, _431), vec3((-0.0) - _2472, (-0.0) - _2473, (-0.0) - _2474));
                                float _4111 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3069 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3070 = dot(vec3(_425, _428, _431), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                                float _4122 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3073 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                                float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                                float _3078 = _3015 * _3054;
                                float _3079 = _3078 * _3078;
                                float _3085 = ((1.0 - _3079) * dot(vec3(_425, _428, _431), vec3(_3002, _3003, _3004))) + _3079;
                                float _4133 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3086 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                                float _3087 = 1.0 - _3054;
                                float _3097 = (0.5 / (((_3086 * ((_3069 * _3087) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3086 * _3087) + _3054) * _3069))) * _3086;
                                float _4144 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3107 = (_3032 * _3009) * (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) / ((_3077 * _3077) * ((_3022 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3033 * _2876.z;
                                frontier_phi_87_pred_1 = _3033 * _2876.y;
                                frontier_phi_87_pred_2 = _3033 * _2876.x;
                                frontier_phi_87_pred_3 = _3107 * _2888.z;
                                frontier_phi_87_pred_4 = _3107 * _2888.y;
                                frontier_phi_87_pred_5 = _3107 * _2888.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3116 = frontier_phi_87_pred;
                            _3115 = frontier_phi_87_pred_1;
                            _3114 = frontier_phi_87_pred_2;
                            _3113 = frontier_phi_87_pred_3;
                            _3112 = frontier_phi_87_pred_4;
                            _3111 = frontier_phi_87_pred_5;
                            _2818 = _3114 + _2831;
                            _2819 = _3115 + _2832;
                            _2820 = _3116 + _2833;
                            _2815 = _3111 + _2828;
                            _2816 = _3112 + _2829;
                            _2817 = _3113 + _2830;
                            if (_2835 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2835;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2820;
                        frontier_phi_81_pred_1 = _2819;
                        frontier_phi_81_pred_2 = _2818;
                        frontier_phi_81_pred_3 = _2817;
                        frontier_phi_81_pred_4 = _2816;
                        frontier_phi_81_pred_5 = _2815;
                    }
                    _2457 = frontier_phi_81_pred;
                    _2455 = frontier_phi_81_pred_1;
                    _2453 = frontier_phi_81_pred_2;
                    _2451 = frontier_phi_81_pred_3;
                    _2449 = frontier_phi_81_pred_4;
                    _2447 = frontier_phi_81_pred_5;
                    uint _2613 = _2612 + 1u;
                    if (_2613 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2606 = _2447;
                        _2607 = _2449;
                        _2608 = _2451;
                        _2609 = _2453;
                        _2610 = _2455;
                        _2611 = _2457;
                        _2612 = _2613;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2453;
                frontier_phi_62_63_ladder_1 = _2457;
                frontier_phi_62_63_ladder_2 = _2455;
                frontier_phi_62_63_ladder_3 = _2451;
                frontier_phi_62_63_ladder_4 = _2449;
                frontier_phi_62_63_ladder_5 = _2447;
            }
            else
            {
                frontier_phi_62_63_ladder = _2332;
                frontier_phi_62_63_ladder_1 = _2336;
                frontier_phi_62_63_ladder_2 = _2334;
                frontier_phi_62_63_ladder_3 = _2330;
                frontier_phi_62_63_ladder_4 = _2328;
                frontier_phi_62_63_ladder_5 = _2326;
            }
            _2446 = frontier_phi_62_63_ladder_5;
            _2448 = frontier_phi_62_63_ladder_4;
            _2450 = frontier_phi_62_63_ladder_3;
            _2452 = frontier_phi_62_63_ladder;
            _2454 = frontier_phi_62_63_ladder_2;
            _2456 = frontier_phi_62_63_ladder_1;
        }
        float _2461 = isnan(1.0) ? _470 : (isnan(_470) ? 1.0 : min(_470, 1.0));
        _2238 = (_2461 * _2452) + _1691;
        _2240 = (_2461 * _2454) + _1693;
        _2242 = (_2461 * _2456) + _1695;
        _2244 = ((_2446 * 0.039999999105930328369140625) * _2461) + _2024;
        _2246 = ((_2448 * 0.039999999105930328369140625) * _2461) + _2026;
        _2248 = ((_2450 * 0.039999999105930328369140625) * _2461) + _2028;
    }
    else
    {
        _2238 = _1691;
        _2240 = _1693;
        _2242 = _1695;
        _2244 = _2024;
        _2246 = _2026;
        _2248 = _2028;
    }
    float _4160 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4171 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4182 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _2265 = ((isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2238 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _470))) + ((_2244 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1304)) * cbPerFrame._m0[3u].x);
    float _2266 = ((isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2240 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _470))) + ((_2246 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _1304)) * cbPerFrame._m0[3u].x);
    float _2267 = ((isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2242 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _470))) + ((_2248 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1304)) * cbPerFrame._m0[3u].x);
    uint _2268 = _444 + 6u;
    float _2276 = _404 / cbSceneParam._m0[86u].x;
    float _2277 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2291 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2276, _2277, (log2((isnan(cbSceneParam._m0[77u].w) ? _328 : (isnan(_328) ? cbSceneParam._m0[77u].w : min(_328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2293 = _2291.x;
    float _2294 = _2291.y;
    float _2295 = _2291.z;
    float _2296 = _2291.w;
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    if (_328 > cbSceneParam._m0[78u].w)
    {
        float _2351 = isnan(_328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _328 : min(cbSceneParam._m0[80u].w, _328));
        float _2352 = _2351 / _328;
        float _2363 = _2352 * _379;
        float _2364 = _380 * _2352;
        float _2365 = (-0.0) - _2364;
        float _2366 = _2352 * _381;
        float _2368 = (cbSceneParam._m0[77u].w * _2365) / _2351;
        float _2369 = _2368 + cbSceneParam._m0[79u].w;
        float _2370 = cbSceneParam._m0[79u].w - _2364;
        float _2376 = sqrt(((_2363 * _2363) + (_2364 * _2364)) + (_2366 * _2366));
        float _2379 = (1.0 - (cbSceneParam._m0[77u].w / _2351)) * _2376;
        float _2384 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2386 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2563;
        if (abs((_2365 - _2368) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2563 = ((((_2369 > 0.0) ? exp2(_2384 * _2369) : (2.0 - exp2(_2386 * _2369))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2379;
        }
        else
        {
            float _2507 = 1.0 / cbSceneParam._m0[80u].x;
            float _2508 = isnan(_2370) ? _2369 : (isnan(_2369) ? _2370 : max(_2369, _2370));
            float _2509 = isnan(_2370) ? _2369 : (isnan(_2369) ? _2370 : min(_2369, _2370));
            float _2518 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : min(_2508, 0.0));
            float _2519 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : min(_2509, 0.0));
            _2563 = ((abs(_2376 / _2365) * cbSceneParam._m0[80u].y) * ((((_2518 - _2519) * 2.0) - ((exp2(_2384 * (isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0)))) - exp2(_2384 * (isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0))))) * _2507)) - ((exp2(_2386 * _2518) - exp2(_2386 * _2519)) * _2507))) + (_2379 * cbSceneParam._m0[80u].z);
        }
        vec4 _2565 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2276, _2277, 1.0), 0.0);
        float _2574 = exp2((_2563 * (-1.44269502162933349609375)) * (1.0 - _2565.w));
        float _2575 = log2(_2574);
        float _2591 = log2(_2296);
        _2388 = (exp2(_2591 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2575 * cbSceneParam._m0[78u].x)) * _2565.x) / cbSceneParam._m0[78u].x)) + _2293;
        _2390 = (exp2(_2591 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2575 * cbSceneParam._m0[78u].y)) * _2565.y) / cbSceneParam._m0[78u].y)) + _2294;
        _2392 = (exp2(_2591 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2575 * cbSceneParam._m0[78u].z)) * _2565.z) / cbSceneParam._m0[78u].z)) + _2295;
        _2394 = _2574 * _2296;
    }
    else
    {
        _2388 = _2293;
        _2390 = _2294;
        _2392 = _2295;
        _2394 = _2296;
    }
    bool _2601;
    vec4 _2404;
    vec4 _2426;
    float _2428;
    float _2432;
    float _2433;
    float _2434;
    float _2435;
    bool _2445;
    for (;;)
    {
        _2404 = cbMatDynParam._m0[0u];
        float _2406 = roundEven(_2404.y);
        bool _2407 = _2406 == 3.0;
        float _2408 = log2(_2394);
        float _2415 = exp2(_2408 * cbSceneParam._m0[78u].x) * _2265;
        float _2416 = exp2(_2408 * cbSceneParam._m0[78u].y) * _2266;
        float _2417 = exp2(_2408 * cbSceneParam._m0[78u].z) * _2267;
        float _2424 = _392 + (-0.5);
        _2426 = cbMtdParam._m0[1u];
        _2428 = _2426.y * _2424;
        float _2431 = (_2406 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2432 = _2431 * (_2407 ? _2415 : (_2415 + (cbSceneParam._m0[72u].w * _2388)));
        _2433 = _2431 * (_2407 ? _2416 : (_2416 + (cbSceneParam._m0[72u].w * _2390)));
        _2434 = _2431 * (_2407 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2392)));
        _2435 = _2424 * 0.999000012874603271484375;
        _2445 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2445)
        {
            if ((cbInstanceData._m0[_444 + 7u].x + _2435) < 0.5)
            {
                _2601 = true;
                break;
            }
        }
        uint _2542 = _446 + uint(_2404.w);
        if ((cbInstanceData._m0[_2542].w < 1.0) && ((cbInstanceData._m0[_2542].w + _2435) < 0.5))
        {
            _2601 = true;
            break;
        }
        if ((_2428 + _241) < _2426.x)
        {
            _2601 = true;
            break;
        }
        _2601 = false;
        break;
    }
    float _2806;
    if (_2601)
    {
        discard_state = true;
        _2806 = 0.0;
    }
    else
    {
        _2806 = cbInstanceData._m0[_2268].w;
    }
    SV_Target.x = _2432;
    SV_Target.y = _2433;
    SV_Target.z = _2434;
    SV_Target.w = _2806;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2268].w;
    discard_exit();
}


