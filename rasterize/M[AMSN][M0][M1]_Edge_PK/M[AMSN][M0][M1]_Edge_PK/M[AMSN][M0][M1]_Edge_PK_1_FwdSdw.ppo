#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _812;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _253.z;
    float _261 = (_253.x * 2.0) + (-1.0);
    float _263 = (_253.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3411 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))));
    float _273 = fma(_270, _211, fma(_263, _203 * TANGENT.x, (_189 * _182) * _261));
    float _276 = fma(_270, _212, fma(_263, _203 * TANGENT.y, (_189 * _183) * _261));
    float _279 = fma(_270, _213, fma(_263, _203 * TANGENT.z, (_189 * _184) * _261));
    float _283 = inversesqrt(dot(vec3(_273, _276, _279), vec3(_273, _276, _279)));
    float _284 = _283 * _273;
    float _285 = _283 * _276;
    float _286 = _283 * _279;
    float _3422 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _287 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3444 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3455 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _306 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _348 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _358 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _348);
    float _359 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _348);
    float _360 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _348);
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _358 * _364;
    float _366 = _359 * _364;
    float _367 = _360 * _364;
    float _373 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _374 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _395 = fma(_286, cbSceneParam._m0[5u].z, fma(_285, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _284));
    float _398 = fma(_286, cbSceneParam._m0[6u].z, fma(_285, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _284));
    float _401 = fma(_286, cbSceneParam._m0[7u].z, fma(_285, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _284));
    uint _414 = uint(roundEven(NORMAL.w)) * 13u;
    uint _417 = (_414 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _423 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_417].x;
    float _424 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_417].y;
    float _425 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_417].z;
    float _3466 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _426 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _427 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    vec4 _437 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _373, cbSceneParam._m0[86u].y * _374));
    float _440 = _437.x * TEXCOORD.z;
    float _441 = dot(vec3(_284, _285, _286), vec3(_365, _366, _367));
    float _444 = _441 * 2.0;
    float _448 = (_444 * _284) - _365;
    float _449 = (_444 * _285) - _366;
    float _450 = (_444 * _286) - _367;
    float _454 = abs(dot(vec3(_365, _366, _367), vec3(_284, _285, _286)));
    float _3499 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _456 = sqrt(_287);
    float _469 = exp2((_456 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_456 * 3.0));
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _811;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _536 = fma(_509, cbModelParam._m0[26u].z, fma(_505, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _501));
        float _540 = fma(_509, cbModelParam._m0[27u].z, fma(_505, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _501));
        float _544 = fma(_509, cbModelParam._m0[28u].z, fma(_505, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _501));
        float _569 = _501 + _284;
        float _570 = _505 + _285;
        float _571 = _509 + _286;
        float _581 = fma(_571, cbModelParam._m0[26u].z, fma(_570, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _569)) - _536;
        float _582 = fma(_571, cbModelParam._m0[27u].z, fma(_570, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _569)) - _540;
        float _583 = fma(_571, cbModelParam._m0[28u].z, fma(_570, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _569)) - _544;
        float _587 = inversesqrt(dot(vec3(_581, _582, _583), vec3(_581, _582, _583)));
        float _600 = ((_587 * _581) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_536 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _601 = ((_587 * _582) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_540 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _602 = ((_587 * _583) / cbModelParam._m0[34u].z) + ((((((_544 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _605 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_600, _601, _602), 0.0);
        vec4 _612 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_600, _601, _602), 0.0);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_600, _601, _602), 0.0);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_600, _601, _602), 0.0);
        float _639 = exp2((_605.w + (-0.5)) * 20.0) * 2.0;
        float _640 = _639 * (_605.x + (-0.5));
        float _641 = _639 * (_605.y + (-0.5));
        float _642 = _639 * (_605.z + (-0.5));
        float _649 = exp2((_612.w + (-0.5)) * 20.0) * 2.0;
        float _650 = _649 * (_612.x + (-0.5));
        float _651 = _649 * (_612.y + (-0.5));
        float _652 = _649 * (_612.z + (-0.5));
        float _659 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_619.x + (-0.5));
        float _661 = _659 * (_619.y + (-0.5));
        float _662 = _659 * (_619.z + (-0.5));
        float _669 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_626.x + (-0.5));
        float _671 = _669 * (_626.y + (-0.5));
        float _672 = _669 * (_626.z + (-0.5));
        float _673 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _674 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _675 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _676 = _640 * 0.5;
        float _677 = _650 * 0.5;
        float _678 = _660 * 0.5;
        float _679 = dot(vec3(_676, _677, _678), vec3(_676, _677, _678));
        float _684 = (_679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_679);
        float _693 = (dot(vec3(_284, _285, _286), vec3(_684 * _676, _684 * _677, _684 * _678)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _703 = sqrt(((_677 * _677) + (_676 * _676)) + (_678 * _678)) / (_673 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _705 = _704 * 2.0;
        float _709 = (1.0 - _704) / (_704 + 1.0);
        float _3547 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _719 = ((((1.0 - _710) * (_705 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_705 + 1.0))) + _710) * _673;
        float _720 = _641 * 0.5;
        float _721 = _651 * 0.5;
        float _722 = _661 * 0.5;
        float _723 = dot(vec3(_720, _721, _722), vec3(_720, _721, _722));
        float _728 = (_723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_723);
        float _736 = (dot(vec3(_284, _285, _286), vec3(_728 * _720, _728 * _721, _728 * _722)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _745 = sqrt(((_721 * _721) + (_720 * _720)) + (_722 * _722)) / (_674 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _747 = _746 * 2.0;
        float _751 = (1.0 - _746) / (_746 + 1.0);
        float _3580 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _761 = ((((1.0 - _752) * (_747 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_747 + 1.0))) + _752) * _674;
        float _762 = _642 * 0.5;
        float _763 = _652 * 0.5;
        float _764 = _662 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _778 = (dot(vec3(_284, _285, _286), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _787 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_675 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3613 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_789 + 1.0))) + _794) * _675;
        _811 = _642;
        _813 = _641;
        _814 = _640;
        _815 = _652;
        _816 = _651;
        _817 = _650;
        _818 = _662;
        _819 = _661;
        _820 = _660;
        _821 = _675;
        _822 = _674;
        _823 = _673;
        _824 = cbModelParam._m0[36u].z * (isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0)));
        _825 = cbModelParam._m0[36u].z * (isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0)));
        _826 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
    }
    else
    {
        _811 = _812;
        _813 = _812;
        _814 = _812;
        _815 = _812;
        _816 = _812;
        _817 = _812;
        _818 = _812;
        _819 = _812;
        _820 = _812;
        _821 = _812;
        _822 = _812;
        _823 = _812;
        _824 = 0.0;
        _825 = 0.0;
        _826 = 0.0;
    }
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _852 = fma(_509, cbModelParam._m0[30u].z, fma(_505, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _501));
        float _856 = fma(_509, cbModelParam._m0[31u].z, fma(_505, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _501));
        float _860 = fma(_509, cbModelParam._m0[32u].z, fma(_505, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _501));
        float _883 = _501 + _284;
        float _884 = _505 + _285;
        float _885 = _509 + _286;
        float _895 = fma(_885, cbModelParam._m0[30u].z, fma(_884, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _883)) - _852;
        float _896 = fma(_885, cbModelParam._m0[31u].z, fma(_884, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _883)) - _856;
        float _897 = fma(_885, cbModelParam._m0[32u].z, fma(_884, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _883)) - _860;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_852 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_856 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[35u].z) + ((((((_860 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _951 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_918.x + (-0.5));
        float _953 = _951 * (_918.y + (-0.5));
        float _954 = _951 * (_918.z + (-0.5));
        float _961 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_925.x + (-0.5));
        float _963 = _961 * (_925.y + (-0.5));
        float _964 = _961 * (_925.z + (-0.5));
        float _971 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_932.x + (-0.5));
        float _973 = _971 * (_932.y + (-0.5));
        float _974 = _971 * (_932.z + (-0.5));
        float _981 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_939.x + (-0.5));
        float _983 = _981 * (_939.y + (-0.5));
        float _984 = _981 * (_939.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_284, _285, _286), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3676 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1015 + 1.0))) + _1020) * _985;
        float _1030 = _953 * 0.5;
        float _1031 = _963 * 0.5;
        float _1032 = _973 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_284, _285, _286), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3709 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1057 + 1.0))) + _1062) * _986;
        float _1072 = _954 * 0.5;
        float _1073 = _964 * 0.5;
        float _1074 = _974 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_284, _285, _286), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3742 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1099 + 1.0))) + _1104) * _987;
        _1121 = _954;
        _1122 = _953;
        _1123 = _952;
        _1124 = _964;
        _1125 = _963;
        _1126 = _962;
        _1127 = _974;
        _1128 = _973;
        _1129 = _972;
        _1130 = _987;
        _1131 = _986;
        _1132 = _985;
        _1133 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1134 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1135 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
    }
    else
    {
        _1121 = _812;
        _1122 = _812;
        _1123 = _812;
        _1124 = _812;
        _1125 = _812;
        _1126 = _812;
        _1127 = _812;
        _1128 = _812;
        _1129 = _812;
        _1130 = _812;
        _1131 = _812;
        _1132 = _812;
        _1133 = 0.0;
        _1134 = 0.0;
        _1135 = 0.0;
    }
    float _1145 = (cbModelParam._m0[1u].x * (_1133 - _824)) + _824;
    float _1146 = (cbModelParam._m0[1u].x * (_1134 - _825)) + _825;
    float _1147 = (cbModelParam._m0[1u].x * (_1135 - _826)) + _826;
    float _1168 = fma(_1147, cbSceneParam._m0[89u].z, fma(_1146, cbSceneParam._m0[89u].y, _1145 * cbSceneParam._m0[89u].x));
    float _1171 = fma(_1147, cbSceneParam._m0[90u].z, fma(_1146, cbSceneParam._m0[90u].y, _1145 * cbSceneParam._m0[90u].x));
    float _1174 = fma(_1147, cbSceneParam._m0[91u].z, fma(_1146, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1145));
    float _1189 = _448 * 0.5;
    float _1190 = _449 * 0.5;
    float _1191 = _450 * 0.5;
    float _1192 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_1123, _1126, _1129, _1132));
    float _1195 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_1122, _1125, _1128, _1131));
    float _1198 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_1121, _1124, _1127, _1130));
    float _1232;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1205 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_811, _815, _818, _821));
        float _1209 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_813, _816, _819, _822));
        float _1213 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_814, _817, _820, _823));
        float _1220 = dot(vec4(cbModelParam._m0[39u]), vec4(_1189, _1190, _1191, 1.0));
        _1232 = dot(vec3(isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)), isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)), isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1220) ? 0.0 : (isnan(0.0) ? _1220 : max(0.0, _1220))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1232 = 1.0;
    }
    float _1243;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1234 = dot(vec4(cbModelParam._m0[40u]), vec4(_1189, _1190, _1191, 1.0));
        _1243 = dot(vec3(isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1234) ? 0.0 : (isnan(0.0) ? _1234 : max(0.0, _1234))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1243 = 1.0;
    }
    float _1247 = (_1243 * cbModelParam._m0[1u].x) + (_1232 * (1.0 - cbModelParam._m0[1u].x));
    float _1257 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _287);
    float _1258 = isnan(_1257) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1257 : min(cbModelParam._m0[25u].z, _1257));
    float _1340;
    float _1342;
    float _1344;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1307 = fma(_509, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _501)) + cbModelParam._m0[13u].w;
        float _1311 = fma(_509, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _501)) + cbModelParam._m0[14u].w;
        float _1315 = fma(_509, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _501)) + cbModelParam._m0[15u].w;
        float _1318 = fma(_450, cbModelParam._m0[13u].z, fma(_449, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _448));
        float _1321 = fma(_450, cbModelParam._m0[14u].z, fma(_449, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _448));
        float _1324 = fma(_450, cbModelParam._m0[15u].z, fma(_449, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _448));
        float _1352;
        if (_1318 > 0.0)
        {
            _1352 = abs((1.0 - _1307) / _1318);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1318 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1307 + 1.0) / _1318);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1352 = frontier_phi_16_14_ladder;
        }
        float _1526;
        if (_1321 > 0.0)
        {
            _1526 = abs((1.0 - _1311) / _1321);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1311 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1526 = frontier_phi_25_21_ladder;
        }
        float _1822;
        if (_1324 > 0.0)
        {
            _1822 = abs((1.0 - _1315) / _1324);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1315 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1822 = frontier_phi_37_32_ladder;
        }
        float _1824 = isnan(_1526) ? _1352 : (isnan(_1352) ? _1526 : min(_1352, _1526));
        float _1825 = isnan(_1822) ? _1824 : (isnan(_1824) ? _1822 : min(_1824, _1822));
        float _1829 = (_1825 * _1318) + _1307;
        float _1830 = (_1825 * _1321) + _1311;
        float _1831 = (_1825 * _1324) + _1315;
        float _1832 = _1825 * 9.9999997473787516355514526367188e-05;
        float _1834 = (-1.0) - _1832;
        float _1836 = _1832 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1831 > _1836) || ((_1831 < _1834) || ((_1830 > _1836) || ((_1830 < _1834) || ((_1829 < _1834) || (_1829 > _1836))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1976 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1831, cbModelParam._m0[9u].z, fma(_1830, cbModelParam._m0[9u].y, _1829 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1831, cbModelParam._m0[10u].z, fma(_1830, cbModelParam._m0[10u].y, _1829 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1831, cbModelParam._m0[11u].z, fma(_1830, cbModelParam._m0[11u].y, _1829 * cbModelParam._m0[11u].x))), _1258);
            frontier_phi_15_37_ladder = _1976.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1976.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1976.z * cbModelParam._m0[1u].y;
        }
        _1340 = frontier_phi_15_37_ladder_1;
        _1342 = frontier_phi_15_37_ladder;
        _1344 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1328 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_448, _449, _450), _1258);
        _1340 = _1328.x * cbModelParam._m0[1u].y;
        _1342 = _1328.y * cbModelParam._m0[1u].y;
        _1344 = _1328.z * cbModelParam._m0[1u].y;
    }
    float _1348 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _287);
    float _1349 = isnan(_1348) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1348 : min(cbModelParam._m0[25u].w, _1348));
    float _1442;
    float _1444;
    float _1446;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1406 = fma(_509, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _501)) + cbModelParam._m0[21u].w;
        float _1410 = fma(_509, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _501)) + cbModelParam._m0[22u].w;
        float _1414 = fma(_509, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _501)) + cbModelParam._m0[23u].w;
        float _1417 = fma(_450, cbModelParam._m0[21u].z, fma(_449, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _448));
        float _1420 = fma(_450, cbModelParam._m0[22u].z, fma(_449, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _448));
        float _1423 = fma(_450, cbModelParam._m0[23u].z, fma(_449, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _448));
        float _1531;
        if (_1417 > 0.0)
        {
            _1531 = abs((1.0 - _1406) / _1417);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1406 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1531 = frontier_phi_27_23_ladder;
        }
        float _1849;
        if (_1420 > 0.0)
        {
            _1849 = abs((1.0 - _1410) / _1420);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1410 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1849 = frontier_phi_39_34_ladder;
        }
        float _2176;
        if (_1423 > 0.0)
        {
            _2176 = abs((1.0 - _1414) / _1423);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1414 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2176 = frontier_phi_49_46_ladder;
        }
        float _2178 = isnan(_1849) ? _1531 : (isnan(_1531) ? _1849 : min(_1531, _1849));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1417) + _1406;
        float _2184 = (_2179 * _1420) + _1410;
        float _2185 = (_2179 * _1423) + _1414;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2187 = (-1.0) - _2186;
        float _2189 = _2186 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2185 > _2189) || ((_2185 < _2187) || ((_2184 > _2189) || ((_2184 < _2187) || ((_2183 < _2187) || (_2183 > _2189))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2303 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2185, cbModelParam._m0[17u].z, fma(_2184, cbModelParam._m0[17u].y, _2183 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2185, cbModelParam._m0[18u].z, fma(_2184, cbModelParam._m0[18u].y, _2183 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2185, cbModelParam._m0[19u].z, fma(_2184, cbModelParam._m0[19u].y, _2183 * cbModelParam._m0[19u].x))), _1349);
            frontier_phi_24_49_ladder = _2303.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2303.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2303.x * cbModelParam._m0[1u].z;
        }
        _1442 = frontier_phi_24_49_ladder_2;
        _1444 = frontier_phi_24_49_ladder_1;
        _1446 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1426 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_448, _449, _450), _1349);
        _1442 = _1426.x * cbModelParam._m0[1u].z;
        _1444 = _1426.y * cbModelParam._m0[1u].z;
        _1446 = _1426.z * cbModelParam._m0[1u].z;
    }
    float _1458 = ((((1.0 - _469) * ((_456 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_469 * _456)) * _440;
    float _1459 = _1458 * ((cbModelParam._m0[1u].w * (_1442 - _1340)) + _1340);
    float _1460 = _1458 * ((cbModelParam._m0[1u].w * (_1444 - _1342)) + _1342);
    float _1461 = _1458 * ((cbModelParam._m0[1u].w * (_1446 - _1344)) + _1344);
    float _1464 = fma(_1461, cbSceneParam._m0[89u].z, fma(_1460, cbSceneParam._m0[89u].y, _1459 * cbSceneParam._m0[89u].x));
    float _1467 = fma(_1461, cbSceneParam._m0[90u].z, fma(_1460, cbSceneParam._m0[90u].y, _1459 * cbSceneParam._m0[90u].x));
    float _1470 = fma(_1461, cbSceneParam._m0[91u].z, fma(_1460, cbSceneParam._m0[91u].y, _1459 * cbSceneParam._m0[91u].x));
    float _1505 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1509 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1513 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1517 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1518 = _1505 / _1517;
    float _1519 = _1509 / _1517;
    float _1520 = _1513 / _1517;
    float _1667;
    float _1668;
    float _1669;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1547 = ((uint(_1520 > cbSceneParam._m0[59u].y) + uint(_1520 > cbSceneParam._m0[59u].x)) + uint(_1520 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1548 = _1547 + 43u;
        uint _1556 = _1547 + 44u;
        uint _1564 = _1547 + 45u;
        uint _1572 = _1547 + 46u;
        float _1583 = fma(_1517, cbSceneParam._m0[_1548].w, fma(_1513, cbSceneParam._m0[_1548].z, fma(_1509, cbSceneParam._m0[_1548].y, _1505 * cbSceneParam._m0[_1548].x)));
        float _1587 = fma(_1517, cbSceneParam._m0[_1556].w, fma(_1513, cbSceneParam._m0[_1556].z, fma(_1509, cbSceneParam._m0[_1556].y, _1505 * cbSceneParam._m0[_1556].x)));
        float _1595 = fma(_1517, cbSceneParam._m0[_1572].w, fma(_1513, cbSceneParam._m0[_1572].z, fma(_1509, cbSceneParam._m0[_1572].y, _1505 * cbSceneParam._m0[_1572].x)));
        float _1600 = cbSceneParam._m0[33u].z * _1595;
        float _1602 = cbSceneParam._m0[33u].w * _1595;
        float _1605 = fma(_1517, cbSceneParam._m0[_1564].w, fma(_1513, cbSceneParam._m0[_1564].z, fma(_1509, cbSceneParam._m0[_1564].y, _1505 * cbSceneParam._m0[_1564].x))) / _1595;
        float _1653 = (cbSceneParam._m0[33u].x - sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520))) * cbSceneParam._m0[33u].y;
        float _3868 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1660 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1600 + _1583) / _1595, (_1602 + _1587) / _1595), _1605), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1602 + _1583) / _1595, (_1587 - _1600) / _1595), _1605), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1583 - _1600) / _1595, (_1587 - _1602) / _1595), _1605), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1583 - _1602) / _1595, (_1600 + _1587) / _1595), _1605), 0.0)).x), vec4(0.25)));
        _1667 = 1.0 - (_1660 * cbSceneParam._m0[34u].x);
        _1668 = 1.0 - (_1660 * cbSceneParam._m0[34u].y);
        _1669 = 1.0 - (_1660 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1667 = 1.0;
        _1668 = 1.0;
        _1669 = 1.0;
    }
    float _1733;
    float _1735;
    float _1737;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1721 = fma(_1517, cbSceneParam._m0[63u].w, fma(_1513, cbSceneParam._m0[63u].z, fma(_1509, cbSceneParam._m0[63u].y, _1505 * cbSceneParam._m0[63u].x)));
        float _1722 = fma(_1517, cbSceneParam._m0[60u].w, fma(_1513, cbSceneParam._m0[60u].z, fma(_1509, cbSceneParam._m0[60u].y, _1505 * cbSceneParam._m0[60u].x))) / _1721;
        float _1723 = fma(_1517, cbSceneParam._m0[61u].w, fma(_1513, cbSceneParam._m0[61u].z, fma(_1509, cbSceneParam._m0[61u].y, _1505 * cbSceneParam._m0[61u].x))) / _1721;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1722 >= cbSceneParam._m0[64u].x) && (_1723 >= cbSceneParam._m0[64u].y)) && (_1722 <= cbSceneParam._m0[64u].z)) && (_1723 <= cbSceneParam._m0[64u].w))
        {
            float _1862 = fma(_1517, cbSceneParam._m0[62u].w, fma(_1513, cbSceneParam._m0[62u].z, fma(_1509, cbSceneParam._m0[62u].y, _1505 * cbSceneParam._m0[62u].x))) / _1721;
            float _1866 = isnan(cbSceneParam._m0[41u].w) ? _1862 : (isnan(_1862) ? cbSceneParam._m0[41u].w : max(_1862, cbSceneParam._m0[41u].w));
            float _1909 = (cbSceneParam._m0[33u].x - sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520))) * cbSceneParam._m0[33u].y;
            float _3884 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
            float _1916 = (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1722, cbSceneParam._m0[33u].w + _1723), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1722, _1723 - cbSceneParam._m0[33u].z), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1722 - cbSceneParam._m0[33u].z, _1723 - cbSceneParam._m0[33u].w), _1866), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1722 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1723), _1866), 0.0)).x), vec4(0.25)));
            float _1920 = 1.0 - (_1916 * cbSceneParam._m0[34u].x);
            float _1921 = 1.0 - (_1916 * cbSceneParam._m0[34u].y);
            float _1922 = 1.0 - (_1916 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1921) ? _1668 : (isnan(_1668) ? _1921 : min(_1668, _1921));
            frontier_phi_36_35_ladder_1 = isnan(_1922) ? _1669 : (isnan(_1669) ? _1922 : min(_1669, _1922));
            frontier_phi_36_35_ladder_2 = isnan(_1920) ? _1667 : (isnan(_1667) ? _1920 : min(_1667, _1920));
        }
        else
        {
            frontier_phi_36_35_ladder = _1668;
            frontier_phi_36_35_ladder_1 = _1669;
            frontier_phi_36_35_ladder_2 = _1667;
        }
        _1733 = frontier_phi_36_35_ladder_2;
        _1735 = frontier_phi_36_35_ladder;
        _1737 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1733 = _1667;
        _1735 = _1668;
        _1737 = _1669;
    }
    uvec4 _1742 = floatBitsToUint(cbInstanceData._m0[_414 + 5u]);
    uint _1744 = _1742.x * 14u;
    uint _1745 = _1744 + 13u;
    float _1752 = _440 + (-1.0);
    float _1757 = (cbLight._m0[_1745].x * _1752) + 1.0;
    float _1758 = (cbLight._m0[_1745].y * _1752) + 1.0;
    float _1759 = (cbLight._m0[_1745].z * _1752) + 1.0;
    float _1760 = (cbLight._m0[_1745].w * _1752) + 1.0;
    uint _1761 = _1744 + 5u;
    float _1767 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
    uint _1771 = _1744 + 4u;
    float _1781 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
    uint _1785 = _1744 | 1u;
    float _1796 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_284, _285, _286));
    float _1799 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_284, _285, _286));
    float _3920 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _3931 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1804 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1806 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.3183098733425140380859375;
    float _1813 = ((cbLight._m0[_1761].x * _1767) * _1806) + (((cbLight._m0[_1771].x * _1733) * _1781) * _1804);
    float _1814 = ((_1767 * cbLight._m0[_1761].y) * _1806) + (((cbLight._m0[_1771].y * _1735) * _1781) * _1804);
    float _1815 = ((_1767 * cbLight._m0[_1761].z) * _1806) + (((cbLight._m0[_1771].z * _1737) * _1781) * _1804);
    uvec4 _1819 = floatBitsToUint(cbLight._m0[_1744 + 12u]);
    bool _1821 = _1819.x == 0u;
    float _1923;
    float _1925;
    float _1927;
    if (_1821)
    {
        _1923 = _1813;
        _1925 = _1814;
        _1927 = _1815;
    }
    else
    {
        uint _1931 = _1744 + 6u;
        float _1947 = (dot(vec3(cbLight._m0[_1744 + 2u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1948 = _1947 * _1947;
        float _3942 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1950 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _1923 = (((cbLight._m0[_1931].x * 0.3183098733425140380859375) * _1949) * _1950) + _1813;
        _1925 = (((cbLight._m0[_1931].y * 0.3183098733425140380859375) * _1949) * _1950) + _1814;
        _1927 = (((cbLight._m0[_1931].z * 0.3183098733425140380859375) * _1949) * _1950) + _1815;
    }
    bool _1930 = _1819.y == 0u;
    float _1985;
    float _1987;
    float _1989;
    if (_1930)
    {
        _1985 = _1923;
        _1987 = _1925;
        _1989 = _1927;
    }
    else
    {
        uint _2147 = _1744 + 7u;
        float _2163 = (dot(vec3(cbLight._m0[_1744 + 3u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _2164 = _2163 * _2163;
        float _3958 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2165 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _2166 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _1985 = (((cbLight._m0[_2147].x * 0.3183098733425140380859375) * _2165) * _2166) + _1923;
        _1987 = (((cbLight._m0[_2147].y * 0.3183098733425140380859375) * _2165) * _2166) + _1925;
        _1989 = (((cbLight._m0[_2147].z * 0.3183098733425140380859375) * _2165) * _2166) + _1927;
    }
    uint _1992 = _1744 + 8u;
    float _2005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1744].w)) * _287) * 0.949999988079071044921875);
    float _2006 = _2005 * _2005;
    float _2007 = cbLight._m0[_1744].x + _365;
    float _2008 = cbLight._m0[_1744].y + _366;
    float _2009 = cbLight._m0[_1744].z + _367;
    float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
    float _2014 = _2013 * _2007;
    float _2015 = _2013 * _2008;
    float _2016 = _2013 * _2009;
    float _2017 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1744].xyz));
    float _3974 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _2021 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _2022 = dot(vec3(_284, _285, _286), vec3(_2014, _2015, _2016));
    float _3996 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _2026 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_2014, _2015, _2016));
    float _4007 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2030 = _2006 * _2006;
    float _2034 = ((_2025 * _2025) * (_2030 + (-1.0))) + 1.0;
    float _2045 = (exp2(log2(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2046 = 1.0 - _2006;
    float _2057 = (0.5 / (((_2021 * ((_2020 * _2046) + _2006)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2046) + _2006) * _2020))) * _2020;
    float _4018 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2059 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_2030 / ((_2034 * _2034) * 3.141590118408203125));
    uint _2073 = _1744 + 9u;
    float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _287) * 0.949999988079071044921875);
    float _2085 = _2084 * _2084;
    float _2086 = cbLight._m0[_1785].x + _365;
    float _2087 = cbLight._m0[_1785].y + _366;
    float _2088 = cbLight._m0[_1785].z + _367;
    float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
    float _2093 = _2092 * _2086;
    float _2094 = _2092 * _2087;
    float _2095 = _2092 * _2088;
    float _2096 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1785].xyz));
    float _4029 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _2100 = dot(vec3(_284, _285, _286), vec3(_2093, _2094, _2095));
    float _4040 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_2093, _2094, _2095));
    float _4051 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2085 * _2085;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2121 = (exp2(log2(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2122 = 1.0 - _2085;
    float _2132 = (0.5 / (((_2021 * ((_2099 * _2122) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2122) + _2085) * _2099))) * _2099;
    float _4062 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    float _2144 = (((_2121 * cbLight._m0[_2073].x) * _2134) * _1767) + ((((cbLight._m0[_1992].x * _1733) * _2045) * _2059) * _1781);
    float _2145 = (((_2121 * cbLight._m0[_2073].y) * _2134) * _1767) + ((((cbLight._m0[_1992].y * _1735) * _2045) * _2059) * _1781);
    float _2146 = (((_2121 * cbLight._m0[_2073].z) * _2134) * _1767) + ((((cbLight._m0[_1992].z * _1737) * _2045) * _2059) * _1781);
    float _2202;
    float _2204;
    float _2206;
    if (_1821)
    {
        _2202 = _2144;
        _2204 = _2145;
        _2206 = _2146;
    }
    else
    {
        uint _2208 = _1744 + 2u;
        uint _2212 = _1744 + 10u;
        float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _287) * 0.949999988079071044921875);
        float _2227 = _2226 * _2226;
        float _2228 = cbLight._m0[_2208].x + _365;
        float _2229 = cbLight._m0[_2208].y + _366;
        float _2230 = cbLight._m0[_2208].z + _367;
        float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
        float _2235 = _2234 * _2228;
        float _2236 = _2234 * _2229;
        float _2237 = _2234 * _2230;
        float _2238 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_2208].xyz));
        float _4073 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2242 = dot(vec3(_284, _285, _286), vec3(_2235, _2236, _2237));
        float _4084 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2246 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2235, _2236, _2237));
        float _4095 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2250 = _2227 * _2227;
        float _2254 = ((_2245 * _2245) * (_2250 + (-1.0))) + 1.0;
        float _2263 = (exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2264 = 1.0 - _2227;
        float _2274 = (0.5 / (((_2021 * ((_2241 * _2264) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2264) + _2227) * _2241))) * _2241;
        float _4106 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2276 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2250 / ((_2254 * _2254) * 3.141590118408203125));
        float _2277 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _2202 = (((_2263 * cbLight._m0[_2212].x) * _2276) * _2277) + _2144;
        _2204 = (((_2263 * cbLight._m0[_2212].y) * _2276) * _2277) + _2145;
        _2206 = (((_2263 * cbLight._m0[_2212].z) * _2276) * _2277) + _2146;
    }
    float _2308;
    float _2310;
    float _2312;
    if (_1930)
    {
        _2308 = _2202;
        _2310 = _2204;
        _2312 = _2206;
    }
    else
    {
        uint _2319 = _1744 + 3u;
        uint _2323 = _1744 + 11u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _287) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _365;
        float _2340 = cbLight._m0[_2319].y + _366;
        float _2341 = cbLight._m0[_2319].z + _367;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_2319].xyz));
        float _4122 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2353 = dot(vec3(_284, _285, _286), vec3(_2346, _2347, _2348));
        float _4133 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4144 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2374 = (exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2375 = 1.0 - _2338;
        float _2385 = (0.5 / (((_2021 * ((_2352 * _2375) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2375) + _2338) * _2352))) * _2352;
        float _4155 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2387 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2388 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _2308 = (((_2374 * cbLight._m0[_2323].x) * _2387) * _2388) + _2202;
        _2310 = (((_2374 * cbLight._m0[_2323].y) * _2387) * _2388) + _2204;
        _2312 = (((_2374 * cbLight._m0[_2323].z) * _2387) * _2388) + _2206;
    }
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    if (_1742.y == 0u)
    {
        uvec4 _2409 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2410 = _2409.x;
        uint _2421 = uint((float(_2409.y) * floor(float(uint(cbSceneParam._m0[85u].y * _374) / _2410))) + floor(float(uint(cbSceneParam._m0[85u].x * _373) / _2410)));
        float _2431 = (log2(_1520 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2432 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        uint _2435 = uint(isnan(14.0) ? _2432 : (isnan(_2432) ? 14.0 : min(_2432, 14.0)));
        uvec4 _2440 = texelFetch(g_lightClusterGridBuffer, int(((_2435 << 2u) + (_2421 << 6u)) >> 2u));
        uint _2441 = _2440.x;
        uint _2442 = _2409.z;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        if (((((1u << ((_2442 >> 4u) & 15u)) + 4294967295u) & _2441) == 0u) || ((_2442 & 240u) == 0u))
        {
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
        }
        else
        {
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2529;
            float _2531;
            float _2664 = 0.0;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            uint _2670 = 0u;
            uint _2679;
            bool _2680;
            for (;;)
            {
                _2679 = texelFetch(g_lightClassification, int((((_2435 << 5u) + (_2421 << 9u)) + (_2670 << 2u)) >> 2u)).x;
                _2680 = _2679 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2680)
                {
                    frontier_phi_68_pred = _2669;
                    frontier_phi_68_pred_1 = _2668;
                    frontier_phi_68_pred_2 = _2667;
                    frontier_phi_68_pred_3 = _2665;
                    frontier_phi_68_pred_4 = _2664;
                    frontier_phi_68_pred_5 = _2666;
                }
                else
                {
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    uint _2794;
                    _2788 = _2664;
                    _2789 = _2665;
                    _2790 = _2666;
                    _2791 = _2667;
                    _2792 = _2668;
                    _2793 = _2669;
                    _2794 = _2679;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    for (;;)
                    {
                        uint _2798 = uint(findLSB(_2794)) + (_2670 << 5u);
                        uint _2795 = (_2794 + 4294967295u) & _2794;
                        uint _2800 = _2798 * 48u;
                        vec4 _2814 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2800)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 3u)).x));
                        uint _2820 = (_2798 * 48u) + 4u;
                        vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 3u)).x));
                        uint _2839 = (_2798 * 48u) + 8u;
                        vec3 _2850 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2839)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 2u)).x));
                        float _2854 = _2814.x - _1518;
                        float _2855 = _2814.y - _1519;
                        float _2856 = _2814.z - _1520;
                        float _2857 = dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856));
                        float _2860 = inversesqrt(_2857);
                        float _2861 = _2860 * _2854;
                        float _2862 = _2860 * _2855;
                        float _2863 = _2860 * _2856;
                        float _2864 = dot(vec3(_395, _398, _401), vec3(_2861, _2862, _2863));
                        float _2869 = 1.0 - (_2857 * _2814.w);
                        float _4181 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2870 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2871 = sqrt(_2857) * _2833.w;
                        float _2874 = 1.39999997615814208984375 / (_2871 + 1.39999997615814208984375);
                        float _2875 = _2874 * _2874;
                        float _2878 = ((1.0 - _2875) * _2864) + _2875;
                        float _2881 = _2871 * _2871;
                        float _2885 = ((isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0))) * _2870) / ((_2881 * 0.699999988079071044921875) + 1.0);
                        float _2889 = (-0.0) - _1518;
                        float _2890 = (-0.0) - _1519;
                        float _2891 = (-0.0) - _1520;
                        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
                        float _2896 = _2895 * _2889;
                        float _2897 = _2895 * _2890;
                        float _2898 = _2895 * _2891;
                        float _2905 = exp2(log2(1.0 / ((_2881 * 3.5) + 5.0)) * 0.25);
                        float _2906 = 1.0 - _456;
                        float _2913 = sqrt(1.0 - ((1.0 - (_2906 * _2906)) * (1.0 - (_2905 * _2905))));
                        float _2914 = _2913 * _2913;
                        float _2915 = _2914 * _2914;
                        float _2916 = _2896 + _2861;
                        float _2917 = _2897 + _2862;
                        float _2918 = _2898 + _2863;
                        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
                        float _2926 = dot(vec3(_395, _398, _401), vec3(_2896, _2897, _2898));
                        float _4197 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2929 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2930 = dot(vec3(_395, _398, _401), vec3(_2922 * _2916, _2922 * _2917, _2922 * _2918));
                        float _4208 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2933 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2937 = ((_2933 * _2933) * (_2915 + (-1.0))) + 1.0;
                        float _2938 = _2874 * _2914;
                        float _2939 = _2938 * _2938;
                        float _2942 = ((1.0 - _2939) * _2864) + _2939;
                        float _4219 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2943 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                        float _2944 = 1.0 - _2914;
                        float _2954 = (0.5 / (((_2943 * ((_2929 * _2944) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2943 * _2944) + _2914) * _2929))) * _2943;
                        float _4230 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2965 = (((_2915 * 3.1415927410125732421875) * (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) / ((_2937 * _2937) * ((_2881 * 2.1991131305694580078125) + 3.141590118408203125))) * _2870;
                        _2723 = (_2885 * _2833.x) + _2791;
                        _2724 = (_2885 * _2833.y) + _2792;
                        _2725 = (_2885 * _2833.z) + _2793;
                        _2720 = (_2965 * _2850.x) + _2788;
                        _2721 = (_2965 * _2850.y) + _2789;
                        _2722 = (_2965 * _2850.z) + _2790;
                        if (_2795 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2788 = _2720;
                            _2789 = _2721;
                            _2790 = _2722;
                            _2791 = _2723;
                            _2792 = _2724;
                            _2793 = _2725;
                            _2794 = _2795;
                        }
                    }
                    frontier_phi_68_pred = _2725;
                    frontier_phi_68_pred_1 = _2724;
                    frontier_phi_68_pred_2 = _2723;
                    frontier_phi_68_pred_3 = _2721;
                    frontier_phi_68_pred_4 = _2720;
                    frontier_phi_68_pred_5 = _2722;
                }
                _2531 = frontier_phi_68_pred;
                _2529 = frontier_phi_68_pred_1;
                _2527 = frontier_phi_68_pred_2;
                _2523 = frontier_phi_68_pred_3;
                _2521 = frontier_phi_68_pred_4;
                _2525 = frontier_phi_68_pred_5;
                uint _2671 = _2670 + 1u;
                if (_2671 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2664 = _2521;
                    _2665 = _2523;
                    _2666 = _2525;
                    _2667 = _2527;
                    _2668 = _2529;
                    _2669 = _2531;
                    _2670 = _2671;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
        }
        uvec4 _2534 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2535 = _2534.z;
        uint _2537 = (_2535 >> 8u) & 15u;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        if (((4294967295u << _2537) & _2441) == 0u)
        {
            _2632 = _2520;
            _2634 = _2522;
            _2636 = _2524;
            _2638 = _2526;
            _2640 = _2528;
            _2642 = _2530;
        }
        else
        {
            float _2657 = inversesqrt(dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520)));
            float _2658 = _2657 * _1518;
            float _2659 = _2657 * _1519;
            float _2660 = _2657 * _1520;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2537 < ((_2535 >> 12u) & 15u))
            {
                float _2633;
                float _2635;
                float _2637;
                float _2639;
                float _2641;
                float _2643;
                float _2771 = _2520;
                float _2772 = _2522;
                float _2773 = _2524;
                float _2774 = _2526;
                float _2775 = _2528;
                float _2776 = _2530;
                uint _2777 = _2537;
                uint _2786;
                bool _2787;
                for (;;)
                {
                    _2786 = texelFetch(g_lightClassification, int((((_2435 << 5u) + (_2421 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                    _2787 = _2786 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2787)
                    {
                        frontier_phi_74_pred = _2773;
                        frontier_phi_74_pred_1 = _2772;
                        frontier_phi_74_pred_2 = _2771;
                        frontier_phi_74_pred_3 = _2776;
                        frontier_phi_74_pred_4 = _2775;
                        frontier_phi_74_pred_5 = _2774;
                    }
                    else
                    {
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _2983 = _2771;
                        float _2984 = _2772;
                        float _2985 = _2773;
                        float _2986 = _2774;
                        float _2987 = _2775;
                        float _2988 = _2776;
                        uint _2989 = _2786;
                        uint _2990;
                        vec4 _3015;
                        float _3016;
                        vec4 _3031;
                        vec3 _3043;
                        vec4 _3059;
                        vec4 _3075;
                        float _3122;
                        bool _3123;
                        for (;;)
                        {
                            uint _3000 = ((_2777 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2989));
                            _2990 = (_2989 + 4294967295u) & _2989;
                            uint _3002 = _3000 * 40u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            _3016 = _3015.w;
                            uint _3018 = (_3000 * 40u) + 4u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3033 = (_3000 * 40u) + 8u;
                            _3043 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x));
                            uint _3046 = (_3000 * 40u) + 16u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3062 = (_3000 * 40u) + 20u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3078 = (_3000 * 40u) + 24u;
                            vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3097 = (_3000 * 40u) + 28u;
                            vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            _3122 = fma(_1520, _3110.z, fma(_1519, _3110.y, _3110.x * _1518)) + _3110.w;
                            _3123 = !((fma(_1520, _3091.z, fma(_1519, _3091.y, _3091.x * _1518)) + _3091.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3123)
                            {
                                float _3150 = _3015.x - _1518;
                                float _3151 = _3015.y - _1519;
                                float _3152 = _3015.z - _1520;
                                float _3153 = dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152));
                                float _3156 = inversesqrt(_3153);
                                float _3157 = _3156 * _3150;
                                float _3158 = _3156 * _3151;
                                float _3159 = _3156 * _3152;
                                float _3163 = 1.0 - (_3153 / (_3016 * _3016));
                                float _4241 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3164 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3168 = sqrt(_3153) * _3031.w;
                                float _3170 = 1.39999997615814208984375 / (_3168 + 1.39999997615814208984375);
                                float _3171 = _3170 * _3170;
                                float _3174 = ((1.0 - _3171) * dot(vec3(_3157, _3158, _3159), vec3(_395, _398, _401))) + _3171;
                                float _3177 = _3168 * _3168;
                                float _3181 = (fma(_1520, _3059.z, fma(_1519, _3059.y, _3059.x * _1518)) + _3059.w) / _3122;
                                float _3182 = (fma(_1520, _3075.z, fma(_1519, _3075.y, _3075.x * _1518)) + _3075.w) / _3122;
                                float _3186 = 1.0 - dot(vec2(_3181, _3182), vec2(_3181, _3182));
                                float _4257 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3188 = _3187 * (((isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))) * _3164) / ((_3177 * 0.699999988079071044921875) + 1.0));
                                float _3200 = exp2(log2(1.0 / ((_3177 * 3.5) + 5.0)) * 0.25);
                                float _3201 = 1.0 - _456;
                                float _3208 = sqrt(1.0 - ((1.0 - (_3201 * _3201)) * (1.0 - (_3200 * _3200))));
                                float _3209 = _3208 * _3208;
                                float _3210 = _3209 * _3209;
                                float _3211 = _3157 - _2658;
                                float _3212 = _3158 - _2659;
                                float _3213 = _3159 - _2660;
                                float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                                float _3221 = dot(vec3(_395, _398, _401), vec3((-0.0) - _2658, (-0.0) - _2659, (-0.0) - _2660));
                                float _4268 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3224 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3225 = dot(vec3(_395, _398, _401), vec3(_3217 * _3211, _3217 * _3212, _3217 * _3213));
                                float _4279 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3228 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3232 = ((_3228 * _3228) * (_3210 + (-1.0))) + 1.0;
                                float _3233 = _3170 * _3209;
                                float _3234 = _3233 * _3233;
                                float _3240 = ((1.0 - _3234) * dot(vec3(_395, _398, _401), vec3(_3157, _3158, _3159))) + _3234;
                                float _4290 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3242 = 1.0 - _3209;
                                float _3252 = (0.5 / (((_3241 * ((_3224 * _3242) + _3209)) + 9.9999999392252902907785028219223e-09) + (((_3241 * _3242) + _3209) * _3224))) * _3241;
                                float _4301 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3262 = (_3187 * _3164) * (((_3210 * 3.1415927410125732421875) * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) / ((_3232 * _3232) * ((_3177 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3262 * _3043.z;
                                frontier_phi_80_pred_1 = _3262 * _3043.y;
                                frontier_phi_80_pred_2 = _3262 * _3043.x;
                                frontier_phi_80_pred_3 = _3188 * _3031.z;
                                frontier_phi_80_pred_4 = _3188 * _3031.y;
                                frontier_phi_80_pred_5 = _3188 * _3031.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3268 = frontier_phi_80_pred;
                            _3267 = frontier_phi_80_pred_1;
                            _3266 = frontier_phi_80_pred_2;
                            _3271 = frontier_phi_80_pred_3;
                            _3270 = frontier_phi_80_pred_4;
                            _3269 = frontier_phi_80_pred_5;
                            _2973 = _3269 + _2986;
                            _2974 = _3270 + _2987;
                            _2975 = _3271 + _2988;
                            _2970 = _3266 + _2983;
                            _2971 = _3267 + _2984;
                            _2972 = _3268 + _2985;
                            if (_2990 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2990;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2972;
                        frontier_phi_74_pred_1 = _2971;
                        frontier_phi_74_pred_2 = _2970;
                        frontier_phi_74_pred_3 = _2975;
                        frontier_phi_74_pred_4 = _2974;
                        frontier_phi_74_pred_5 = _2973;
                    }
                    _2637 = frontier_phi_74_pred;
                    _2635 = frontier_phi_74_pred_1;
                    _2633 = frontier_phi_74_pred_2;
                    _2643 = frontier_phi_74_pred_3;
                    _2641 = frontier_phi_74_pred_4;
                    _2639 = frontier_phi_74_pred_5;
                    uint _2778 = _2777 + 1u;
                    if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2771 = _2633;
                        _2772 = _2635;
                        _2773 = _2637;
                        _2774 = _2639;
                        _2775 = _2641;
                        _2776 = _2643;
                        _2777 = _2778;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2641;
                frontier_phi_62_63_ladder_1 = _2639;
                frontier_phi_62_63_ladder_2 = _2637;
                frontier_phi_62_63_ladder_3 = _2643;
                frontier_phi_62_63_ladder_4 = _2635;
                frontier_phi_62_63_ladder_5 = _2633;
            }
            else
            {
                frontier_phi_62_63_ladder = _2528;
                frontier_phi_62_63_ladder_1 = _2526;
                frontier_phi_62_63_ladder_2 = _2524;
                frontier_phi_62_63_ladder_3 = _2530;
                frontier_phi_62_63_ladder_4 = _2522;
                frontier_phi_62_63_ladder_5 = _2520;
            }
            _2632 = frontier_phi_62_63_ladder_5;
            _2634 = frontier_phi_62_63_ladder_4;
            _2636 = frontier_phi_62_63_ladder_2;
            _2638 = frontier_phi_62_63_ladder_1;
            _2640 = frontier_phi_62_63_ladder;
            _2642 = frontier_phi_62_63_ladder_3;
        }
        float _2647 = isnan(1.0) ? _440 : (isnan(_440) ? 1.0 : min(_440, 1.0));
        _2453 = (_2647 * _2638) + _1985;
        _2455 = (_2647 * _2640) + _1987;
        _2457 = (_2647 * _2642) + _1989;
        _2459 = ((_2632 * 0.039999999105930328369140625) * _2647) + _2308;
        _2461 = ((_2634 * 0.039999999105930328369140625) * _2647) + _2310;
        _2463 = ((_2636 * 0.039999999105930328369140625) * _2647) + _2312;
    }
    else
    {
        _2453 = _1985;
        _2455 = _1987;
        _2457 = _1989;
        _2459 = _2308;
        _2461 = _2310;
        _2463 = _2312;
    }
    float _4317 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _4328 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _4339 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    uint _2483 = _414 + 6u;
    float _2491 = _373 / cbSceneParam._m0[86u].x;
    float _2492 = _374 / cbSceneParam._m0[86u].y;
    vec4 _2506 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2491, _2492, (log2((isnan(cbSceneParam._m0[77u].w) ? _306 : (isnan(_306) ? cbSceneParam._m0[77u].w : min(_306, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2508 = _2506.x;
    float _2509 = _2506.y;
    float _2510 = _2506.z;
    float _2511 = _2506.w;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    if (_306 > cbSceneParam._m0[78u].w)
    {
        float _2545 = isnan(_306) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _306 : min(cbSceneParam._m0[80u].w, _306));
        float _2546 = _2545 / _306;
        float _2557 = _2546 * _358;
        float _2558 = _359 * _2546;
        float _2559 = (-0.0) - _2558;
        float _2560 = _2546 * _360;
        float _2562 = (cbSceneParam._m0[77u].w * _2559) / _2545;
        float _2563 = _2562 + cbSceneParam._m0[79u].w;
        float _2564 = cbSceneParam._m0[79u].w - _2558;
        float _2570 = sqrt(((_2557 * _2557) + (_2558 * _2558)) + (_2560 * _2560));
        float _2573 = (1.0 - (cbSceneParam._m0[77u].w / _2545)) * _2570;
        float _2578 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2580 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2733;
        if (abs((_2559 - _2562) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2733 = ((((_2563 > 0.0) ? exp2(_2578 * _2563) : (2.0 - exp2(_2580 * _2563))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2573;
        }
        else
        {
            float _2693 = 1.0 / cbSceneParam._m0[80u].x;
            float _2694 = isnan(_2564) ? _2563 : (isnan(_2563) ? _2564 : max(_2563, _2564));
            float _2695 = isnan(_2564) ? _2563 : (isnan(_2563) ? _2564 : min(_2563, _2564));
            float _2704 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : min(_2694, 0.0));
            float _2705 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : min(_2695, 0.0));
            _2733 = ((abs(_2570 / _2559) * cbSceneParam._m0[80u].y) * ((((_2704 - _2705) * 2.0) - ((exp2(_2578 * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0)))) - exp2(_2578 * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0))))) * _2693)) - ((exp2(_2580 * _2704) - exp2(_2580 * _2705)) * _2693))) + (_2573 * cbSceneParam._m0[80u].z);
        }
        vec4 _2735 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2491, _2492, 1.0), 0.0);
        float _2744 = exp2((_2733 * (-1.44269502162933349609375)) * (1.0 - _2735.w));
        float _2745 = log2(_2744);
        float _2761 = log2(_2511);
        _2582 = (exp2(_2761 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].x)) * _2735.x) / cbSceneParam._m0[78u].x)) + _2508;
        _2584 = (exp2(_2761 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].y)) * _2735.y) / cbSceneParam._m0[78u].y)) + _2509;
        _2586 = (exp2(_2761 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].z)) * _2735.z) / cbSceneParam._m0[78u].z)) + _2510;
        _2588 = _2744 * _2511;
    }
    else
    {
        _2582 = _2508;
        _2584 = _2509;
        _2586 = _2510;
        _2588 = _2511;
    }
    float _2600 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2601 = _2600 == 3.0;
    float _2602 = log2(_2588);
    float _2609 = exp2(_2602 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2453 + ((isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))) * _440))) + ((_2459 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _1247)) * cbPerFrame._m0[3u].x));
    float _2610 = exp2(_2602 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2455 + ((isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))) * _440))) + ((_2461 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _1247)) * cbPerFrame._m0[3u].x));
    float _2611 = exp2(_2602 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2457 + ((isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0))) * _440))) + ((_2463 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _1247)) * cbPerFrame._m0[3u].x));
    float _2620 = (_2600 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2620 * (_2601 ? _2609 : (_2609 + (cbSceneParam._m0[72u].w * _2582)));
    SV_Target.y = _2620 * (_2601 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2584)));
    SV_Target.z = _2620 * (_2601 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2586)));
    SV_Target.w = cbInstanceData._m0[_2483].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2483].w;
}


