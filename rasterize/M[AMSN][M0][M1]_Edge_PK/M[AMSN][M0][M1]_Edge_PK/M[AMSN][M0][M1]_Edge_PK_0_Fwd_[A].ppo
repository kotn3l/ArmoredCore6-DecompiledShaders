#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _902;
float _3292;
float _3293;
float _3294;
float _3295;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.w;
    float _242 = _235.x * cbMtdParam._m0[9u].x;
    float _243 = _235.y * cbMtdParam._m0[9u].y;
    float _244 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _256 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _258 = _256.x;
    vec4 _270 = texture(sampler2D(M_AMSN_M0_M1_Edge_PK_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3304 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0))));
    float _292 = gl_FragCoord.x * 0.125;
    float _294 = gl_FragCoord.y * 0.125;
    float _305 = fma(_287, _213, fma(_280, _205 * TANGENT.x, (_191 * _184) * _278));
    float _308 = fma(_287, _214, fma(_280, _205 * TANGENT.y, (_191 * _185) * _278));
    float _311 = fma(_287, _215, fma(_280, _205 * TANGENT.z, (_191 * _186) * _278));
    float _315 = inversesqrt(dot(vec3(_305, _308, _311), vec3(_305, _308, _311)));
    float _316 = _315 * _305;
    float _317 = _315 * _308;
    float _318 = _315 * _311;
    float _3315 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _319 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _3326 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3337 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3348 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3359 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _323 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    if (!(cbMtdParam._m0[10u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_292, _294)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _343 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _384 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _394 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _384);
    float _395 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _384);
    float _396 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _384);
    float _400 = inversesqrt(dot(vec3(_394, _395, _396), vec3(_394, _395, _396)));
    float _401 = _394 * _400;
    float _402 = _395 * _400;
    float _403 = _396 * _400;
    vec4 _405 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_292, _294));
    float _407 = _405.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _583 = sqrt(((_394 * _394) + (_395 * _395)) + (_396 * _396));
        float _589 = (cbMatDynParam._m0[5u].x * _583) + cbMatDynParam._m0[5u].y;
        float _3370 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _590 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _594 = (cbMatDynParam._m0[5u].z * _583) + cbMatDynParam._m0[5u].w;
        float _3381 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) - _590)) + _590) < ((_407 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _419 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _420 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _440 = fma(_318, cbSceneParam._m0[5u].z, fma(_317, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _316));
    float _443 = fma(_318, cbSceneParam._m0[6u].z, fma(_317, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _316));
    float _446 = fma(_318, cbSceneParam._m0[7u].z, fma(_317, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _316));
    uint _459 = uint(roundEven(NORMAL.w)) * 13u;
    uint _461 = _459 + 9u;
    uint _462 = _461 + uint(cbMatDynParam._m0[0u].w);
    float _468 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0)))) * cbInstanceData._m0[_462].x;
    float _469 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0)))) * cbInstanceData._m0[_462].y;
    float _470 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0)))) * cbInstanceData._m0[_462].z;
    float _3392 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    float _3403 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _474 = 1.0 - _323;
    float _475 = _471 * _474;
    float _476 = _472 * _474;
    float _477 = _473 * _474;
    float _482 = (_471 + (-0.039999999105930328369140625)) * _323;
    float _483 = (_472 + (-0.039999999105930328369140625)) * _323;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _323;
    float _485 = _482 + 0.039999999105930328369140625;
    float _487 = _483 + 0.039999999105930328369140625;
    float _488 = _484 + 0.039999999105930328369140625;
    vec4 _497 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _419, cbSceneParam._m0[86u].y * _420));
    float _500 = _497.x * TEXCOORD.z;
    float _501 = dot(vec3(_316, _317, _318), vec3(_401, _402, _403));
    float _504 = _501 * 2.0;
    float _508 = (_504 * _316) - _401;
    float _509 = (_504 * _317) - _402;
    float _510 = (_504 * _318) - _403;
    float _514 = abs(dot(vec3(_401, _402, _403), vec3(_316, _317, _318)));
    float _3425 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _516 = sqrt(_319);
    float _529 = exp2((_516 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_516 * 3.0));
    float _535 = (1.0 - _529) * ((_516 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _536 = _529 * _516;
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _901;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _626 = fma(_572, cbModelParam._m0[26u].z, fma(_568, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _564));
        float _630 = fma(_572, cbModelParam._m0[27u].z, fma(_568, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _564));
        float _634 = fma(_572, cbModelParam._m0[28u].z, fma(_568, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _564));
        float _659 = _564 + _316;
        float _660 = _568 + _317;
        float _661 = _572 + _318;
        float _671 = fma(_661, cbModelParam._m0[26u].z, fma(_660, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _659)) - _626;
        float _672 = fma(_661, cbModelParam._m0[27u].z, fma(_660, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _659)) - _630;
        float _673 = fma(_661, cbModelParam._m0[28u].z, fma(_660, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _659)) - _634;
        float _677 = inversesqrt(dot(vec3(_671, _672, _673), vec3(_671, _672, _673)));
        float _690 = ((_677 * _671) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_626 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_677 * _672) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_630 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _692 = ((_677 * _673) / cbModelParam._m0[34u].z) + ((((((_634 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        float _729 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_695.x + (-0.5));
        float _731 = _729 * (_695.y + (-0.5));
        float _732 = _729 * (_695.z + (-0.5));
        float _739 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_702.x + (-0.5));
        float _741 = _739 * (_702.y + (-0.5));
        float _742 = _739 * (_702.z + (-0.5));
        float _749 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_709.x + (-0.5));
        float _751 = _749 * (_709.y + (-0.5));
        float _752 = _749 * (_709.z + (-0.5));
        float _759 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_716.x + (-0.5));
        float _761 = _759 * (_716.y + (-0.5));
        float _762 = _759 * (_716.z + (-0.5));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = _730 * 0.5;
        float _767 = _740 * 0.5;
        float _768 = _750 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _783 = (dot(vec3(_316, _317, _318), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _793 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3473 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_795 + 1.0))) + _800) * _763;
        float _810 = _731 * 0.5;
        float _811 = _741 * 0.5;
        float _812 = _751 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _826 = (dot(vec3(_316, _317, _318), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _835 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _837 = _836 * 2.0;
        float _841 = (1.0 - _836) / (_836 + 1.0);
        float _3506 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _851 = ((((1.0 - _842) * (_837 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_837 + 1.0))) + _842) * _764;
        float _852 = _732 * 0.5;
        float _853 = _742 * 0.5;
        float _854 = _752 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _868 = (dot(vec3(_316, _317, _318), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _877 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _879 = _878 * 2.0;
        float _883 = (1.0 - _878) / (_878 + 1.0);
        float _3539 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _893 = ((((1.0 - _884) * (_879 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_879 + 1.0))) + _884) * _765;
        _901 = _732;
        _903 = _731;
        _904 = _730;
        _905 = _742;
        _906 = _741;
        _907 = _740;
        _908 = _752;
        _909 = _751;
        _910 = _750;
        _911 = _765;
        _912 = _764;
        _913 = _763;
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0)));
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)));
    }
    else
    {
        _901 = _902;
        _903 = _902;
        _904 = _902;
        _905 = _902;
        _906 = _902;
        _907 = _902;
        _908 = _902;
        _909 = _902;
        _910 = _902;
        _911 = _902;
        _912 = _902;
        _913 = _902;
        _914 = 0.0;
        _915 = 0.0;
        _916 = 0.0;
    }
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _942 = fma(_572, cbModelParam._m0[30u].z, fma(_568, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _564));
        float _946 = fma(_572, cbModelParam._m0[31u].z, fma(_568, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _564));
        float _950 = fma(_572, cbModelParam._m0[32u].z, fma(_568, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _564));
        float _973 = _564 + _316;
        float _974 = _568 + _317;
        float _975 = _572 + _318;
        float _985 = fma(_975, cbModelParam._m0[30u].z, fma(_974, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _973)) - _942;
        float _986 = fma(_975, cbModelParam._m0[31u].z, fma(_974, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _973)) - _946;
        float _987 = fma(_975, cbModelParam._m0[32u].z, fma(_974, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _973)) - _950;
        float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
        float _1004 = ((_991 * _985) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_942 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_991 * _986) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_946 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_991 * _987) / cbModelParam._m0[35u].z) + ((((((_950 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        float _1041 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1008.x + (-0.5));
        float _1043 = _1041 * (_1008.y + (-0.5));
        float _1044 = _1041 * (_1008.z + (-0.5));
        float _1051 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1015.x + (-0.5));
        float _1053 = _1051 * (_1015.y + (-0.5));
        float _1054 = _1051 * (_1015.z + (-0.5));
        float _1061 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1022.x + (-0.5));
        float _1063 = _1061 * (_1022.y + (-0.5));
        float _1064 = _1061 * (_1022.z + (-0.5));
        float _1071 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1029.x + (-0.5));
        float _1073 = _1071 * (_1029.y + (-0.5));
        float _1074 = _1071 * (_1029.z + (-0.5));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = _1042 * 0.5;
        float _1079 = _1052 * 0.5;
        float _1080 = _1062 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_316, _317, _318), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3602 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1105 + 1.0))) + _1110) * _1075;
        float _1120 = _1043 * 0.5;
        float _1121 = _1053 * 0.5;
        float _1122 = _1063 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_316, _317, _318), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3635 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1147 + 1.0))) + _1152) * _1076;
        float _1162 = _1044 * 0.5;
        float _1163 = _1054 * 0.5;
        float _1164 = _1064 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_316, _317, _318), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3668 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1189 + 1.0))) + _1194) * _1077;
        _1211 = _1044;
        _1212 = _1043;
        _1213 = _1042;
        _1214 = _1054;
        _1215 = _1053;
        _1216 = _1052;
        _1217 = _1064;
        _1218 = _1063;
        _1219 = _1062;
        _1220 = _1077;
        _1221 = _1076;
        _1222 = _1075;
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
    }
    else
    {
        _1211 = _902;
        _1212 = _902;
        _1213 = _902;
        _1214 = _902;
        _1215 = _902;
        _1216 = _902;
        _1217 = _902;
        _1218 = _902;
        _1219 = _902;
        _1220 = _902;
        _1221 = _902;
        _1222 = _902;
        _1223 = 0.0;
        _1224 = 0.0;
        _1225 = 0.0;
    }
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _914)) + _914;
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _915)) + _915;
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _916)) + _916;
    float _1258 = fma(_1237, cbSceneParam._m0[89u].z, fma(_1236, cbSceneParam._m0[89u].y, _1235 * cbSceneParam._m0[89u].x));
    float _1261 = fma(_1237, cbSceneParam._m0[90u].z, fma(_1236, cbSceneParam._m0[90u].y, _1235 * cbSceneParam._m0[90u].x));
    float _1264 = fma(_1237, cbSceneParam._m0[91u].z, fma(_1236, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1235));
    float _1279 = _508 * 0.5;
    float _1280 = _509 * 0.5;
    float _1281 = _510 * 0.5;
    float _1282 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1285 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1288 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1322;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1295 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_901, _905, _908, _911));
        float _1299 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_903, _906, _909, _912));
        float _1303 = dot(vec4(_1279, _1280, _1281, 1.0), vec4(_904, _907, _910, _913));
        float _1310 = dot(vec4(cbModelParam._m0[39u]), vec4(_1279, _1280, _1281, 1.0));
        _1322 = dot(vec3(isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1310) ? 0.0 : (isnan(0.0) ? _1310 : max(0.0, _1310))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1322 = 1.0;
    }
    float _1333;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1324 = dot(vec4(cbModelParam._m0[40u]), vec4(_1279, _1280, _1281, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1324) ? 0.0 : (isnan(0.0) ? _1324 : max(0.0, _1324))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1337 = (_1333 * cbModelParam._m0[1u].x) + (_1322 * (1.0 - cbModelParam._m0[1u].x));
    float _1347 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _319);
    float _1348 = isnan(_1347) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1347 : min(cbModelParam._m0[25u].z, _1347));
    float _1430;
    float _1432;
    float _1434;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1397 = fma(_572, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _564)) + cbModelParam._m0[13u].w;
        float _1401 = fma(_572, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _564)) + cbModelParam._m0[14u].w;
        float _1405 = fma(_572, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _564)) + cbModelParam._m0[15u].w;
        float _1408 = fma(_510, cbModelParam._m0[13u].z, fma(_509, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _508));
        float _1411 = fma(_510, cbModelParam._m0[14u].z, fma(_509, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _508));
        float _1414 = fma(_510, cbModelParam._m0[15u].z, fma(_509, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _508));
        float _1442;
        if (_1408 > 0.0)
        {
            _1442 = abs((1.0 - _1397) / _1408);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1397 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1442 = frontier_phi_21_19_ladder;
        }
        float _1650;
        if (_1411 > 0.0)
        {
            _1650 = abs((1.0 - _1401) / _1411);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1401 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1650 = frontier_phi_30_26_ladder;
        }
        float _1904;
        if (_1414 > 0.0)
        {
            _1904 = abs((1.0 - _1405) / _1414);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1405 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1904 = frontier_phi_42_37_ladder;
        }
        float _1906 = isnan(_1650) ? _1442 : (isnan(_1442) ? _1650 : min(_1442, _1650));
        float _1907 = isnan(_1904) ? _1906 : (isnan(_1906) ? _1904 : min(_1906, _1904));
        float _1911 = (_1907 * _1408) + _1397;
        float _1912 = (_1907 * _1411) + _1401;
        float _1913 = (_1907 * _1414) + _1405;
        float _1914 = _1907 * 9.9999997473787516355514526367188e-05;
        float _1916 = (-1.0) - _1914;
        float _1918 = _1914 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_1913 > _1918) || ((_1913 < _1916) || ((_1912 > _1918) || ((_1912 < _1916) || ((_1911 < _1916) || (_1911 > _1918))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2041 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1913, cbModelParam._m0[9u].z, fma(_1912, cbModelParam._m0[9u].y, _1911 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1913, cbModelParam._m0[10u].z, fma(_1912, cbModelParam._m0[10u].y, _1911 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1913, cbModelParam._m0[11u].z, fma(_1912, cbModelParam._m0[11u].y, _1911 * cbModelParam._m0[11u].x))), _1348);
            frontier_phi_20_42_ladder = _2041.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2041.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2041.x * cbModelParam._m0[1u].y;
        }
        _1430 = frontier_phi_20_42_ladder_2;
        _1432 = frontier_phi_20_42_ladder_1;
        _1434 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_508, _509, _510), _1348);
        _1430 = _1418.x * cbModelParam._m0[1u].y;
        _1432 = _1418.y * cbModelParam._m0[1u].y;
        _1434 = _1418.z * cbModelParam._m0[1u].y;
    }
    float _1438 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _319);
    float _1439 = isnan(_1438) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1438 : min(cbModelParam._m0[25u].w, _1438));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1496 = fma(_572, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _564)) + cbModelParam._m0[21u].w;
        float _1500 = fma(_572, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _564)) + cbModelParam._m0[22u].w;
        float _1504 = fma(_572, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _564)) + cbModelParam._m0[23u].w;
        float _1507 = fma(_510, cbModelParam._m0[21u].z, fma(_509, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _508));
        float _1510 = fma(_510, cbModelParam._m0[22u].z, fma(_509, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _508));
        float _1513 = fma(_510, cbModelParam._m0[23u].z, fma(_509, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _508));
        float _1655;
        if (_1507 > 0.0)
        {
            _1655 = abs((1.0 - _1496) / _1507);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1496 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1655 = frontier_phi_32_28_ladder;
        }
        float _1931;
        if (_1510 > 0.0)
        {
            _1931 = abs((1.0 - _1500) / _1510);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1500 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _1931 = frontier_phi_44_39_ladder;
        }
        float _2144;
        if (_1513 > 0.0)
        {
            _2144 = abs((1.0 - _1504) / _1513);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1504 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2144 = frontier_phi_53_50_ladder;
        }
        float _2146 = isnan(_1931) ? _1655 : (isnan(_1655) ? _1931 : min(_1655, _1931));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1507) + _1496;
        float _2152 = (_2147 * _1510) + _1500;
        float _2153 = (_2147 * _1513) + _1504;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2155 = (-1.0) - _2154;
        float _2157 = _2154 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2153 > _2157) || ((_2153 < _2155) || ((_2152 > _2157) || ((_2152 < _2155) || ((_2151 < _2155) || (_2151 > _2157))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2153, cbModelParam._m0[17u].z, fma(_2152, cbModelParam._m0[17u].y, _2151 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2153, cbModelParam._m0[18u].z, fma(_2152, cbModelParam._m0[18u].y, _2151 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2153, cbModelParam._m0[19u].z, fma(_2152, cbModelParam._m0[19u].y, _2151 * cbModelParam._m0[19u].x))), _1439);
            frontier_phi_29_53_ladder = _2351.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2351.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2351.x * cbModelParam._m0[1u].z;
        }
        _1532 = frontier_phi_29_53_ladder_2;
        _1534 = frontier_phi_29_53_ladder_1;
        _1536 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1516 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_508, _509, _510), _1439);
        _1532 = _1516.x * cbModelParam._m0[1u].z;
        _1534 = _1516.y * cbModelParam._m0[1u].z;
        _1536 = _1516.z * cbModelParam._m0[1u].z;
    }
    float _1549 = (((_535 * _485) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1551 = (((_535 * _487) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1553 = (((_535 * _488) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1556 = fma(_1553, cbSceneParam._m0[89u].z, fma(_1551, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1559 = fma(_1553, cbSceneParam._m0[90u].z, fma(_1551, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1562 = fma(_1553, cbSceneParam._m0[91u].z, fma(_1551, cbSceneParam._m0[91u].y, _1549 * cbSceneParam._m0[91u].x));
    uvec4 _1572 = floatBitsToUint(cbInstanceData._m0[_459 + 5u]);
    uint _1574 = _1572.x * 14u;
    uint _1575 = _1574 + 13u;
    float _1582 = _500 + (-1.0);
    float _1587 = (cbLight._m0[_1575].x * _1582) + 1.0;
    float _1588 = (cbLight._m0[_1575].y * _1582) + 1.0;
    float _1589 = (cbLight._m0[_1575].z * _1582) + 1.0;
    float _1590 = (cbLight._m0[_1575].w * _1582) + 1.0;
    uint _1591 = _1574 + 5u;
    float _1597 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
    uint _1601 = _1574 + 4u;
    float _1608 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
    uint _1612 = _1574 | 1u;
    float _1623 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_316, _317, _318));
    float _1626 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_316, _317, _318));
    float _3804 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _3815 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1631 = (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * 0.3183098733425140380859375;
    float _1633 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * 0.3183098733425140380859375;
    float _1640 = ((cbLight._m0[_1591].x * _1597) * _1633) + ((cbLight._m0[_1601].x * _1608) * _1631);
    float _1641 = ((_1597 * cbLight._m0[_1591].y) * _1633) + ((_1608 * cbLight._m0[_1601].y) * _1631);
    float _1642 = ((_1597 * cbLight._m0[_1591].z) * _1633) + ((_1608 * cbLight._m0[_1601].z) * _1631);
    uvec4 _1647 = floatBitsToUint(cbLight._m0[_1574 + 12u]);
    bool _1649 = _1647.x == 0u;
    float _1660;
    float _1662;
    float _1664;
    if (_1649)
    {
        _1660 = _1640;
        _1662 = _1641;
        _1664 = _1642;
    }
    else
    {
        uint _1668 = _1574 + 6u;
        float _1684 = (dot(vec3(cbLight._m0[_1574 + 2u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1685 = _1684 * _1684;
        float _3826 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1687 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _1660 = (((cbLight._m0[_1668].x * 0.3183098733425140380859375) * _1686) * _1687) + _1640;
        _1662 = (((cbLight._m0[_1668].y * 0.3183098733425140380859375) * _1686) * _1687) + _1641;
        _1664 = (((cbLight._m0[_1668].z * 0.3183098733425140380859375) * _1686) * _1687) + _1642;
    }
    bool _1667 = _1647.y == 0u;
    float _1705;
    float _1707;
    float _1709;
    if (_1667)
    {
        _1705 = _1660;
        _1707 = _1662;
        _1709 = _1664;
    }
    else
    {
        uint _1875 = _1574 + 7u;
        float _1891 = (dot(vec3(cbLight._m0[_1574 + 3u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1892 = _1891 * _1891;
        float _3842 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1894 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _1705 = (((cbLight._m0[_1875].x * 0.3183098733425140380859375) * _1893) * _1894) + _1660;
        _1707 = (((cbLight._m0[_1875].y * 0.3183098733425140380859375) * _1893) * _1894) + _1662;
        _1709 = (((cbLight._m0[_1875].z * 0.3183098733425140380859375) * _1893) * _1894) + _1664;
    }
    uint _1712 = _1574 + 8u;
    float _1725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1574].w)) * _319) * 0.949999988079071044921875);
    float _1726 = _1725 * _1725;
    float _1727 = cbLight._m0[_1574].x + _401;
    float _1728 = cbLight._m0[_1574].y + _402;
    float _1729 = cbLight._m0[_1574].z + _403;
    float _1733 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
    float _1734 = _1733 * _1727;
    float _1735 = _1733 * _1728;
    float _1736 = _1733 * _1729;
    float _1737 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1574].xyz));
    float _3858 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1740 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _1741 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _1742 = dot(vec3(_316, _317, _318), vec3(_1734, _1735, _1736));
    float _3880 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _1746 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_1734, _1735, _1736));
    float _3891 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1750 = _1726 * _1726;
    float _1754 = ((_1745 * _1745) * (_1750 + (-1.0))) + 1.0;
    float _1762 = exp2(log2(1.0 - (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * 5.0);
    float _1763 = 0.959999978542327880859375 - _482;
    float _1765 = 0.959999978542327880859375 - _483;
    float _1766 = 0.959999978542327880859375 - _484;
    float _1773 = 1.0 - _1726;
    float _1784 = (0.5 / (((_1741 * ((_1740 * _1773) + _1726)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _1773) + _1726) * _1740))) * _1740;
    float _3902 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1786 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1750 / ((_1754 * _1754) * 3.141590118408203125));
    uint _1797 = _1574 + 9u;
    float _1808 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1612].w)) * _319) * 0.949999988079071044921875);
    float _1809 = _1808 * _1808;
    float _1810 = cbLight._m0[_1612].x + _401;
    float _1811 = cbLight._m0[_1612].y + _402;
    float _1812 = cbLight._m0[_1612].z + _403;
    float _1816 = inversesqrt(dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812)));
    float _1817 = _1816 * _1810;
    float _1818 = _1816 * _1811;
    float _1819 = _1816 * _1812;
    float _1820 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1612].xyz));
    float _3913 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _1824 = dot(vec3(_316, _317, _318), vec3(_1817, _1818, _1819));
    float _3924 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _1828 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_1817, _1818, _1819));
    float _3935 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1832 = _1809 * _1809;
    float _1836 = ((_1827 * _1827) * (_1832 + (-1.0))) + 1.0;
    float _1843 = exp2(log2(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * 5.0);
    float _1850 = 1.0 - _1809;
    float _1860 = (0.5 / (((_1741 * ((_1823 * _1850) + _1809)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _1850) + _1809) * _1823))) * _1823;
    float _3946 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1862 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1832 / ((_1836 * _1836) * 3.141590118408203125));
    float _1872 = (((((_1843 * _1763) + _485) * cbLight._m0[_1797].x) * _1862) * _1597) + (((((_1762 * _1763) + _485) * cbLight._m0[_1712].x) * _1786) * _1608);
    float _1873 = (((((_1843 * _1765) + _487) * cbLight._m0[_1797].y) * _1862) * _1597) + (((((_1762 * _1765) + _487) * cbLight._m0[_1712].y) * _1786) * _1608);
    float _1874 = (((((_1843 * _1766) + _488) * cbLight._m0[_1797].z) * _1862) * _1597) + (((((_1762 * _1766) + _488) * cbLight._m0[_1712].z) * _1786) * _1608);
    float _1936;
    float _1938;
    float _1940;
    if (_1649)
    {
        _1936 = _1872;
        _1938 = _1873;
        _1940 = _1874;
    }
    else
    {
        uint _1942 = _1574 + 2u;
        uint _1946 = _1574 + 10u;
        float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _319) * 0.949999988079071044921875);
        float _1961 = _1960 * _1960;
        float _1962 = cbLight._m0[_1942].x + _401;
        float _1963 = cbLight._m0[_1942].y + _402;
        float _1964 = cbLight._m0[_1942].z + _403;
        float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
        float _1969 = _1968 * _1962;
        float _1970 = _1968 * _1963;
        float _1971 = _1968 * _1964;
        float _1972 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1942].xyz));
        float _3957 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1975 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1976 = dot(vec3(_316, _317, _318), vec3(_1969, _1970, _1971));
        float _3968 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1979 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1980 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_1969, _1970, _1971));
        float _3979 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1984 = _1961 * _1961;
        float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
        float _1995 = exp2(log2(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * 5.0);
        float _2002 = 1.0 - _1961;
        float _2012 = (0.5 / (((_1741 * ((_1975 * _2002) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _2002) + _1961) * _1975))) * _1975;
        float _3990 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2014 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
        float _2015 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _1936 = (((((_1995 * _1763) + _485) * cbLight._m0[_1946].x) * _2014) * _2015) + _1872;
        _1938 = (((((_1995 * _1765) + _487) * cbLight._m0[_1946].y) * _2014) * _2015) + _1873;
        _1940 = (((((_1995 * _1766) + _488) * cbLight._m0[_1946].z) * _2014) * _2015) + _1874;
    }
    float _2050;
    float _2052;
    float _2054;
    if (_1667)
    {
        _2050 = _1936;
        _2052 = _1938;
        _2054 = _1940;
    }
    else
    {
        uint _2061 = _1574 + 3u;
        uint _2065 = _1574 + 11u;
        float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _319) * 0.949999988079071044921875);
        float _2080 = _2079 * _2079;
        float _2081 = cbLight._m0[_2061].x + _401;
        float _2082 = cbLight._m0[_2061].y + _402;
        float _2083 = cbLight._m0[_2061].z + _403;
        float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
        float _2088 = _2087 * _2081;
        float _2089 = _2087 * _2082;
        float _2090 = _2087 * _2083;
        float _2091 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_2061].xyz));
        float _4006 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2094 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2095 = dot(vec3(_316, _317, _318), vec3(_2088, _2089, _2090));
        float _4017 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2099 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2088, _2089, _2090));
        float _4028 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2103 = _2080 * _2080;
        float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
        float _2114 = exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0);
        float _2121 = 1.0 - _2080;
        float _2131 = (0.5 / (((_1741 * ((_2094 * _2121) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _2121) + _2080) * _2094))) * _2094;
        float _4039 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2133 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
        float _2134 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _2050 = (((((_2114 * _1763) + _485) * cbLight._m0[_2065].x) * _2133) * _2134) + _1936;
        _2052 = (((((_2114 * _1765) + _487) * cbLight._m0[_2065].y) * _2133) * _2134) + _1938;
        _2054 = (((((_2114 * _1766) + _488) * cbLight._m0[_2065].z) * _2133) * _2134) + _1940;
    }
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    if (_1572.y == 0u)
    {
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2209;
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2209;
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2209;
        uvec4 _2224 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2225 = _2224.x;
        uint _2236 = uint((float(_2224.y) * floor(float(uint(cbSceneParam._m0[85u].y * _420) / _2225))) + floor(float(uint(cbSceneParam._m0[85u].x * _419) / _2225)));
        float _2246 = (log2(_2212 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2247 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        uint _2250 = uint(isnan(14.0) ? _2247 : (isnan(_2247) ? 14.0 : min(_2247, 14.0)));
        uvec4 _2255 = texelFetch(g_lightClusterGridBuffer, int(((_2250 << 2u) + (_2236 << 6u)) >> 2u));
        uint _2256 = _2255.x;
        uint _2257 = _2224.z;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        if (((((1u << ((_2257 >> 4u) & 15u)) + 4294967295u) & _2256) == 0u) || ((_2257 & 240u) == 0u))
        {
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
            _2366 = 0.0;
        }
        else
        {
            float _2357;
            float _2359;
            float _2361;
            float _2363;
            float _2365;
            float _2367;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            uint _2514 = 0u;
            uint _2523;
            bool _2524;
            for (;;)
            {
                _2523 = texelFetch(g_lightClassification, int((((_2250 << 5u) + (_2236 << 9u)) + (_2514 << 2u)) >> 2u)).x;
                _2524 = _2523 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2524)
                {
                    frontier_phi_70_pred = _2510;
                    frontier_phi_70_pred_1 = _2513;
                    frontier_phi_70_pred_2 = _2512;
                    frontier_phi_70_pred_3 = _2511;
                    frontier_phi_70_pred_4 = _2509;
                    frontier_phi_70_pred_5 = _2508;
                }
                else
                {
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    uint _2659;
                    _2653 = _2508;
                    _2654 = _2509;
                    _2655 = _2510;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2523;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    for (;;)
                    {
                        uint _2663 = uint(findLSB(_2659)) + (_2514 << 5u);
                        uint _2660 = (_2659 + 4294967295u) & _2659;
                        uint _2665 = _2663 * 48u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2685 = (_2663 * 48u) + 4u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2704 = (_2663 * 48u) + 8u;
                        vec3 _2715 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x));
                        float _2719 = _2679.x - _2210;
                        float _2720 = _2679.y - _2211;
                        float _2721 = _2679.z - _2212;
                        float _2722 = dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721));
                        float _2725 = inversesqrt(_2722);
                        float _2726 = _2725 * _2719;
                        float _2727 = _2725 * _2720;
                        float _2728 = _2725 * _2721;
                        float _2729 = dot(vec3(_440, _443, _446), vec3(_2726, _2727, _2728));
                        float _2734 = 1.0 - (_2722 * _2679.w);
                        float _4065 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2735 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2736 = sqrt(_2722) * _2698.w;
                        float _2739 = 1.39999997615814208984375 / (_2736 + 1.39999997615814208984375);
                        float _2740 = _2739 * _2739;
                        float _2743 = ((1.0 - _2740) * _2729) + _2740;
                        float _2746 = _2736 * _2736;
                        float _2750 = ((isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))) * _2735) / ((_2746 * 0.699999988079071044921875) + 1.0);
                        float _2754 = (-0.0) - _2210;
                        float _2755 = (-0.0) - _2211;
                        float _2756 = (-0.0) - _2212;
                        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
                        float _2761 = _2760 * _2754;
                        float _2762 = _2760 * _2755;
                        float _2763 = _2760 * _2756;
                        float _2771 = exp2(log2(1.0 / ((_2746 * 3.5) + 5.0)) * 0.25);
                        float _2772 = 1.0 - _516;
                        float _2779 = sqrt(1.0 - ((1.0 - (_2772 * _2772)) * (1.0 - (_2771 * _2771))));
                        float _2780 = _2779 * _2779;
                        float _2781 = _2780 * _2780;
                        float _2782 = _2761 + _2726;
                        float _2783 = _2762 + _2727;
                        float _2784 = _2763 + _2728;
                        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
                        float _2792 = dot(vec3(_440, _443, _446), vec3(_2761, _2762, _2763));
                        float _4081 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2795 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2796 = dot(vec3(_440, _443, _446), vec3(_2788 * _2782, _2788 * _2783, _2788 * _2784));
                        float _4092 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2799 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2803 = ((_2799 * _2799) * (_2781 + (-1.0))) + 1.0;
                        float _2804 = _2739 * _2780;
                        float _2805 = _2804 * _2804;
                        float _2808 = ((1.0 - _2805) * _2729) + _2805;
                        float _4103 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2809 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                        float _2810 = 1.0 - _2780;
                        float _2820 = (0.5 / (((_2809 * ((_2795 * _2810) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2809 * _2810) + _2780) * _2795))) * _2809;
                        float _4114 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2831 = (((_2781 * 3.1415927410125732421875) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) / ((_2803 * _2803) * ((_2746 * 2.1991131305694580078125) + 3.141590118408203125))) * _2735;
                        _2583 = (_2750 * _2698.x) + _2656;
                        _2584 = (_2750 * _2698.y) + _2657;
                        _2585 = (_2750 * _2698.z) + _2658;
                        _2580 = (_2831 * _2715.x) + _2653;
                        _2581 = (_2831 * _2715.y) + _2654;
                        _2582 = (_2831 * _2715.z) + _2655;
                        if (_2660 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2653 = _2580;
                            _2654 = _2581;
                            _2655 = _2582;
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2660;
                        }
                    }
                    frontier_phi_70_pred = _2582;
                    frontier_phi_70_pred_1 = _2585;
                    frontier_phi_70_pred_2 = _2584;
                    frontier_phi_70_pred_3 = _2583;
                    frontier_phi_70_pred_4 = _2581;
                    frontier_phi_70_pred_5 = _2580;
                }
                _2361 = frontier_phi_70_pred;
                _2367 = frontier_phi_70_pred_1;
                _2365 = frontier_phi_70_pred_2;
                _2363 = frontier_phi_70_pred_3;
                _2359 = frontier_phi_70_pred_4;
                _2357 = frontier_phi_70_pred_5;
                uint _2515 = _2514 + 1u;
                if (_2515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2508 = _2357;
                    _2509 = _2359;
                    _2510 = _2361;
                    _2511 = _2363;
                    _2512 = _2365;
                    _2513 = _2367;
                    _2514 = _2515;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
            _2366 = _2367;
        }
        uvec4 _2370 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2371 = _2370.z;
        uint _2373 = (_2371 >> 8u) & 15u;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        if (((4294967295u << _2373) & _2256) == 0u)
        {
            _2476 = _2356;
            _2478 = _2358;
            _2480 = _2360;
            _2482 = _2362;
            _2484 = _2364;
            _2486 = _2366;
        }
        else
        {
            float _2501 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
            float _2502 = _2501 * _2210;
            float _2503 = _2501 * _2211;
            float _2504 = _2501 * _2212;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2373 < ((_2371 >> 12u) & 15u))
            {
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2636 = _2356;
                float _2637 = _2358;
                float _2638 = _2360;
                float _2639 = _2362;
                float _2640 = _2364;
                float _2641 = _2366;
                uint _2642 = _2373;
                uint _2651;
                bool _2652;
                for (;;)
                {
                    _2651 = texelFetch(g_lightClassification, int((((_2250 << 5u) + (_2236 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                    _2652 = _2651 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2652)
                    {
                        frontier_phi_81_pred = _2641;
                        frontier_phi_81_pred_1 = _2640;
                        frontier_phi_81_pred_2 = _2639;
                        frontier_phi_81_pred_3 = _2638;
                        frontier_phi_81_pred_4 = _2637;
                        frontier_phi_81_pred_5 = _2636;
                    }
                    else
                    {
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _2858 = _2636;
                        float _2859 = _2637;
                        float _2860 = _2638;
                        float _2861 = _2639;
                        float _2862 = _2640;
                        float _2863 = _2641;
                        uint _2864 = _2651;
                        uint _2865;
                        vec4 _2890;
                        float _2891;
                        vec4 _2906;
                        vec3 _2918;
                        vec4 _2934;
                        vec4 _2950;
                        float _2997;
                        bool _2998;
                        for (;;)
                        {
                            uint _2875 = ((_2642 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2864));
                            _2865 = (_2864 + 4294967295u) & _2864;
                            uint _2877 = _2875 * 40u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            _2891 = _2890.w;
                            uint _2893 = (_2875 * 40u) + 4u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2908 = (_2875 * 40u) + 8u;
                            _2918 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x));
                            uint _2921 = (_2875 * 40u) + 16u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2937 = (_2875 * 40u) + 20u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2953 = (_2875 * 40u) + 24u;
                            vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2972 = (_2875 * 40u) + 28u;
                            vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            _2997 = fma(_2212, _2985.z, fma(_2211, _2985.y, _2985.x * _2210)) + _2985.w;
                            _2998 = !((fma(_2212, _2966.z, fma(_2211, _2966.y, _2966.x * _2210)) + _2966.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2998)
                            {
                                float _3025 = _2890.x - _2210;
                                float _3026 = _2890.y - _2211;
                                float _3027 = _2890.z - _2212;
                                float _3028 = dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027));
                                float _3031 = inversesqrt(_3028);
                                float _3032 = _3031 * _3025;
                                float _3033 = _3031 * _3026;
                                float _3034 = _3031 * _3027;
                                float _3038 = 1.0 - (_3028 / (_2891 * _2891));
                                float _4125 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3043 = sqrt(_3028) * _2906.w;
                                float _3045 = 1.39999997615814208984375 / (_3043 + 1.39999997615814208984375);
                                float _3046 = _3045 * _3045;
                                float _3049 = ((1.0 - _3046) * dot(vec3(_3032, _3033, _3034), vec3(_440, _443, _446))) + _3046;
                                float _3052 = _3043 * _3043;
                                float _3056 = (fma(_2212, _2934.z, fma(_2211, _2934.y, _2934.x * _2210)) + _2934.w) / _2997;
                                float _3057 = (fma(_2212, _2950.z, fma(_2211, _2950.y, _2950.x * _2210)) + _2950.w) / _2997;
                                float _3061 = 1.0 - dot(vec2(_3056, _3057), vec2(_3056, _3057));
                                float _4141 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3063 = _3062 * (((isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))) * _3039) / ((_3052 * 0.699999988079071044921875) + 1.0));
                                float _3075 = exp2(log2(1.0 / ((_3052 * 3.5) + 5.0)) * 0.25);
                                float _3076 = 1.0 - _516;
                                float _3083 = sqrt(1.0 - ((1.0 - (_3076 * _3076)) * (1.0 - (_3075 * _3075))));
                                float _3084 = _3083 * _3083;
                                float _3085 = _3084 * _3084;
                                float _3086 = _3032 - _2502;
                                float _3087 = _3033 - _2503;
                                float _3088 = _3034 - _2504;
                                float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                                float _3096 = dot(vec3(_440, _443, _446), vec3((-0.0) - _2502, (-0.0) - _2503, (-0.0) - _2504));
                                float _4152 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3099 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3100 = dot(vec3(_440, _443, _446), vec3(_3092 * _3086, _3092 * _3087, _3092 * _3088));
                                float _4163 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3103 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3107 = ((_3103 * _3103) * (_3085 + (-1.0))) + 1.0;
                                float _3108 = _3045 * _3084;
                                float _3109 = _3108 * _3108;
                                float _3115 = ((1.0 - _3109) * dot(vec3(_440, _443, _446), vec3(_3032, _3033, _3034))) + _3109;
                                float _4174 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3117 = 1.0 - _3084;
                                float _3127 = (0.5 / (((_3116 * ((_3099 * _3117) + _3084)) + 9.9999999392252902907785028219223e-09) + (((_3116 * _3117) + _3084) * _3099))) * _3116;
                                float _4185 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3137 = (_3062 * _3039) * (((_3085 * 3.1415927410125732421875) * (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) / ((_3107 * _3107) * ((_3052 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3063 * _2906.z;
                                frontier_phi_87_pred_1 = _3063 * _2906.y;
                                frontier_phi_87_pred_2 = _3063 * _2906.x;
                                frontier_phi_87_pred_3 = _3137 * _2918.z;
                                frontier_phi_87_pred_4 = _3137 * _2918.y;
                                frontier_phi_87_pred_5 = _3137 * _2918.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3146 = frontier_phi_87_pred;
                            _3145 = frontier_phi_87_pred_1;
                            _3144 = frontier_phi_87_pred_2;
                            _3143 = frontier_phi_87_pred_3;
                            _3142 = frontier_phi_87_pred_4;
                            _3141 = frontier_phi_87_pred_5;
                            _2848 = _3144 + _2861;
                            _2849 = _3145 + _2862;
                            _2850 = _3146 + _2863;
                            _2845 = _3141 + _2858;
                            _2846 = _3142 + _2859;
                            _2847 = _3143 + _2860;
                            if (_2865 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2865;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2850;
                        frontier_phi_81_pred_1 = _2849;
                        frontier_phi_81_pred_2 = _2848;
                        frontier_phi_81_pred_3 = _2847;
                        frontier_phi_81_pred_4 = _2846;
                        frontier_phi_81_pred_5 = _2845;
                    }
                    _2487 = frontier_phi_81_pred;
                    _2485 = frontier_phi_81_pred_1;
                    _2483 = frontier_phi_81_pred_2;
                    _2481 = frontier_phi_81_pred_3;
                    _2479 = frontier_phi_81_pred_4;
                    _2477 = frontier_phi_81_pred_5;
                    uint _2643 = _2642 + 1u;
                    if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2636 = _2477;
                        _2637 = _2479;
                        _2638 = _2481;
                        _2639 = _2483;
                        _2640 = _2485;
                        _2641 = _2487;
                        _2642 = _2643;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2483;
                frontier_phi_62_63_ladder_1 = _2487;
                frontier_phi_62_63_ladder_2 = _2485;
                frontier_phi_62_63_ladder_3 = _2481;
                frontier_phi_62_63_ladder_4 = _2479;
                frontier_phi_62_63_ladder_5 = _2477;
            }
            else
            {
                frontier_phi_62_63_ladder = _2362;
                frontier_phi_62_63_ladder_1 = _2366;
                frontier_phi_62_63_ladder_2 = _2364;
                frontier_phi_62_63_ladder_3 = _2360;
                frontier_phi_62_63_ladder_4 = _2358;
                frontier_phi_62_63_ladder_5 = _2356;
            }
            _2476 = frontier_phi_62_63_ladder_5;
            _2478 = frontier_phi_62_63_ladder_4;
            _2480 = frontier_phi_62_63_ladder_3;
            _2482 = frontier_phi_62_63_ladder;
            _2484 = frontier_phi_62_63_ladder_2;
            _2486 = frontier_phi_62_63_ladder_1;
        }
        float _2491 = isnan(1.0) ? _500 : (isnan(_500) ? 1.0 : min(_500, 1.0));
        _2268 = (_2491 * _2482) + _1705;
        _2270 = (_2491 * _2484) + _1707;
        _2272 = (_2491 * _2486) + _1709;
        _2274 = ((_2476 * _485) * _2491) + _2050;
        _2276 = ((_2478 * _487) * _2491) + _2052;
        _2278 = ((_2480 * _488) * _2491) + _2054;
    }
    else
    {
        _2268 = _1705;
        _2270 = _1707;
        _2272 = _1709;
        _2274 = _2050;
        _2276 = _2052;
        _2278 = _2054;
    }
    float _4201 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4212 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _4223 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _2295 = ((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2268 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _500))) + ((_2274 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1337)) * cbPerFrame._m0[3u].x);
    float _2296 = ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2270 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _500))) + ((_2276 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1337)) * cbPerFrame._m0[3u].x);
    float _2297 = ((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2272 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _500))) + ((_2278 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1337)) * cbPerFrame._m0[3u].x);
    uint _2298 = _459 + 6u;
    float _2306 = _419 / cbSceneParam._m0[86u].x;
    float _2307 = _420 / cbSceneParam._m0[86u].y;
    vec4 _2321 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, (log2((isnan(cbSceneParam._m0[77u].w) ? _343 : (isnan(_343) ? cbSceneParam._m0[77u].w : min(_343, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2323 = _2321.x;
    float _2324 = _2321.y;
    float _2325 = _2321.z;
    float _2326 = _2321.w;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_343 > cbSceneParam._m0[78u].w)
    {
        float _2381 = isnan(_343) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _343 : min(cbSceneParam._m0[80u].w, _343));
        float _2382 = _2381 / _343;
        float _2393 = _2382 * _394;
        float _2394 = _395 * _2382;
        float _2395 = (-0.0) - _2394;
        float _2396 = _2382 * _396;
        float _2398 = (cbSceneParam._m0[77u].w * _2395) / _2381;
        float _2399 = _2398 + cbSceneParam._m0[79u].w;
        float _2400 = cbSceneParam._m0[79u].w - _2394;
        float _2406 = sqrt(((_2393 * _2393) + (_2394 * _2394)) + (_2396 * _2396));
        float _2409 = (1.0 - (cbSceneParam._m0[77u].w / _2381)) * _2406;
        float _2414 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2416 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2593;
        if (abs((_2395 - _2398) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2593 = ((((_2399 > 0.0) ? exp2(_2414 * _2399) : (2.0 - exp2(_2416 * _2399))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2409;
        }
        else
        {
            float _2537 = 1.0 / cbSceneParam._m0[80u].x;
            float _2538 = isnan(_2400) ? _2399 : (isnan(_2399) ? _2400 : max(_2399, _2400));
            float _2539 = isnan(_2400) ? _2399 : (isnan(_2399) ? _2400 : min(_2399, _2400));
            float _2548 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : min(_2538, 0.0));
            float _2549 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : min(_2539, 0.0));
            _2593 = ((abs(_2406 / _2395) * cbSceneParam._m0[80u].y) * ((((_2548 - _2549) * 2.0) - ((exp2(_2414 * (isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0)))) - exp2(_2414 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0))))) * _2537)) - ((exp2(_2416 * _2548) - exp2(_2416 * _2549)) * _2537))) + (_2409 * cbSceneParam._m0[80u].z);
        }
        vec4 _2595 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, 1.0), 0.0);
        float _2604 = exp2((_2593 * (-1.44269502162933349609375)) * (1.0 - _2595.w));
        float _2605 = log2(_2604);
        float _2621 = log2(_2326);
        _2418 = (exp2(_2621 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].x)) * _2595.x) / cbSceneParam._m0[78u].x)) + _2323;
        _2420 = (exp2(_2621 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].y)) * _2595.y) / cbSceneParam._m0[78u].y)) + _2324;
        _2422 = (exp2(_2621 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2605 * cbSceneParam._m0[78u].z)) * _2595.z) / cbSceneParam._m0[78u].z)) + _2325;
        _2424 = _2604 * _2326;
    }
    else
    {
        _2418 = _2323;
        _2420 = _2324;
        _2422 = _2325;
        _2424 = _2326;
    }
    bool _2631;
    vec4 _2434;
    vec4 _2456;
    float _2458;
    float _2462;
    float _2463;
    float _2464;
    float _2465;
    bool _2475;
    for (;;)
    {
        _2434 = cbMatDynParam._m0[0u];
        float _2436 = roundEven(_2434.y);
        bool _2437 = _2436 == 3.0;
        float _2438 = log2(_2424);
        float _2445 = exp2(_2438 * cbSceneParam._m0[78u].x) * _2295;
        float _2446 = exp2(_2438 * cbSceneParam._m0[78u].y) * _2296;
        float _2447 = exp2(_2438 * cbSceneParam._m0[78u].z) * _2297;
        float _2454 = _407 + (-0.5);
        _2456 = cbMtdParam._m0[1u];
        _2458 = _2456.y * _2454;
        float _2461 = (_2436 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2462 = _2461 * (_2437 ? _2445 : (_2445 + (cbSceneParam._m0[72u].w * _2418)));
        _2463 = _2461 * (_2437 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2420)));
        _2464 = _2461 * (_2437 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2422)));
        _2465 = _2454 * 0.999000012874603271484375;
        _2475 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2475)
        {
            if ((cbInstanceData._m0[_459 + 7u].x + _2465) < 0.5)
            {
                _2631 = true;
                break;
            }
        }
        uint _2572 = _461 + uint(_2434.w);
        if ((cbInstanceData._m0[_2572].w < 1.0) && ((cbInstanceData._m0[_2572].w + _2465) < 0.5))
        {
            _2631 = true;
            break;
        }
        if ((_2458 + _241) < _2456.x)
        {
            _2631 = true;
            break;
        }
        _2631 = false;
        break;
    }
    float _2836;
    if (_2631)
    {
        discard_state = true;
        _2836 = 0.0;
    }
    else
    {
        _2836 = cbInstanceData._m0[_2298].w;
    }
    SV_Target.x = _2462;
    SV_Target.y = _2463;
    SV_Target.z = _2464;
    SV_Target.w = _2836;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2298].w;
    discard_exit();
}


