#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_GlassLow_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _807;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(M_GlassLow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = (_224.x * 2.0) + (-1.0);
    float _235 = (_224.y * 2.0) + (-1.0);
    float _236 = dot(vec2(_233, _235), vec2(_233, _235));
    float _2928 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _242 = sqrt(1.0 - (isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0))));
    float _247 = ((cbMtdParam._m0[10u].y + _224.z) * 0.5) + cbMtdParam._m0[10u].x;
    float _250 = fma(_242, _188 * NORMAL.x, fma(_235, _195 * TANGENT.x, (_181 * _174) * _233));
    float _253 = fma(_242, _188 * NORMAL.y, fma(_235, _195 * TANGENT.y, (_181 * _175) * _233));
    float _256 = fma(_242, _188 * NORMAL.z, fma(_235, _195 * TANGENT.z, (_181 * _176) * _233));
    float _260 = inversesqrt(dot(vec3(_250, _253, _256), vec3(_250, _253, _256)));
    float _261 = _260 * _250;
    float _262 = _260 * _253;
    float _263 = _260 * _256;
    float _2939 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _264 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
    float _2950 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _265 = isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0));
    float _2961 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _2972 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _2983 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _2994 = isnan(0.0) ? cbMtdParam._m0[10u].w : (isnan(cbMtdParam._m0[10u].w) ? 0.0 : max(cbMtdParam._m0[10u].w, 0.0));
    float _269 = isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0));
    float _285 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _326 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _336 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _326);
    float _337 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _326);
    float _338 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _326);
    float _342 = inversesqrt(dot(vec3(_336, _337, _338), vec3(_336, _337, _338)));
    float _343 = _336 * _342;
    float _344 = _337 * _342;
    float _345 = _338 * _342;
    float _351 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _352 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _373 = fma(_263, cbSceneParam._m0[5u].z, fma(_262, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _261));
    float _376 = fma(_263, cbSceneParam._m0[6u].z, fma(_262, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _261));
    float _379 = fma(_263, cbSceneParam._m0[7u].z, fma(_262, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _261));
    uint _392 = uint(roundEven(NORMAL.w)) * 13u;
    uint _395 = (_392 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _401 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0)))) * cbInstanceData._m0[_395].x;
    float _402 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0)))) * cbInstanceData._m0[_395].y;
    float _403 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0)))) * cbInstanceData._m0[_395].z;
    float _3005 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _404 = isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0));
    float _3016 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _405 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
    float _3027 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _406 = isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0));
    float _407 = 1.0 - _269;
    float _408 = _404 * _407;
    float _409 = _405 * _407;
    float _410 = _406 * _407;
    float _415 = (_404 + (-0.039999999105930328369140625)) * _269;
    float _416 = (_405 + (-0.039999999105930328369140625)) * _269;
    float _417 = (_406 + (-0.039999999105930328369140625)) * _269;
    float _418 = _415 + 0.039999999105930328369140625;
    float _420 = _416 + 0.039999999105930328369140625;
    float _421 = _417 + 0.039999999105930328369140625;
    vec4 _430 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _351, cbSceneParam._m0[86u].y * _352));
    float _433 = _430.x * TEXCOORD.z;
    float _434 = dot(vec3(_261, _262, _263), vec3(_343, _344, _345));
    float _437 = _434 * 2.0;
    float _441 = (_437 * _261) - _343;
    float _442 = (_437 * _262) - _344;
    float _443 = (_437 * _263) - _345;
    float _447 = abs(dot(vec3(_343, _344, _345), vec3(_261, _262, _263)));
    float _3038 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _449 = sqrt(_265);
    float _462 = exp2((_449 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_449 * 3.0));
    float _468 = (1.0 - _462) * ((_449 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _469 = _462 * _449;
    float _497 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _806;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _532 = fma(_505, cbModelParam._m0[26u].z, fma(_501, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _497));
        float _536 = fma(_505, cbModelParam._m0[27u].z, fma(_501, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _497));
        float _540 = fma(_505, cbModelParam._m0[28u].z, fma(_501, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _497));
        float _564 = _497 + _261;
        float _565 = _501 + _262;
        float _566 = _505 + _263;
        float _576 = fma(_566, cbModelParam._m0[26u].z, fma(_565, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _564)) - _532;
        float _577 = fma(_566, cbModelParam._m0[27u].z, fma(_565, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _564)) - _536;
        float _578 = fma(_566, cbModelParam._m0[28u].z, fma(_565, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _564)) - _540;
        float _582 = inversesqrt(dot(vec3(_576, _577, _578), vec3(_576, _577, _578)));
        float _595 = ((_582 * _576) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_532 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _596 = ((_582 * _577) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_536 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _597 = ((_582 * _578) / cbModelParam._m0[34u].z) + ((((((_540 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _600 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_595, _596, _597), 0.0);
        vec4 _607 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_595, _596, _597), 0.0);
        vec4 _614 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_595, _596, _597), 0.0);
        vec4 _621 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_595, _596, _597), 0.0);
        float _634 = exp2((_600.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_600.x + (-0.5));
        float _636 = _634 * (_600.y + (-0.5));
        float _637 = _634 * (_600.z + (-0.5));
        float _644 = exp2((_607.w + (-0.5)) * 20.0) * 2.0;
        float _645 = _644 * (_607.x + (-0.5));
        float _646 = _644 * (_607.y + (-0.5));
        float _647 = _644 * (_607.z + (-0.5));
        float _654 = exp2((_614.w + (-0.5)) * 20.0) * 2.0;
        float _655 = _654 * (_614.x + (-0.5));
        float _656 = _654 * (_614.y + (-0.5));
        float _657 = _654 * (_614.z + (-0.5));
        float _664 = exp2((_621.w + (-0.5)) * 20.0) * 2.0;
        float _665 = _664 * (_621.x + (-0.5));
        float _666 = _664 * (_621.y + (-0.5));
        float _667 = _664 * (_621.z + (-0.5));
        float _668 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _669 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _670 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _671 = _635 * 0.5;
        float _672 = _645 * 0.5;
        float _673 = _655 * 0.5;
        float _674 = dot(vec3(_671, _672, _673), vec3(_671, _672, _673));
        float _679 = (_674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_674);
        float _688 = (dot(vec3(_261, _262, _263), vec3(_679 * _671, _679 * _672, _679 * _673)) + 1.0) * 0.5;
        float _3064 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _698 = sqrt(((_672 * _672) + (_671 * _671)) + (_673 * _673)) / (_668 + 9.9999997473787516355514526367188e-06);
        float _3075 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0));
        float _700 = _699 * 2.0;
        float _704 = (1.0 - _699) / (_699 + 1.0);
        float _3086 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0));
        float _714 = ((((1.0 - _705) * (_700 + 2.0)) * exp2(log2(isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0))) * (_700 + 1.0))) + _705) * _668;
        float _715 = _636 * 0.5;
        float _716 = _646 * 0.5;
        float _717 = _656 * 0.5;
        float _718 = dot(vec3(_715, _716, _717), vec3(_715, _716, _717));
        float _723 = (_718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_718);
        float _731 = (dot(vec3(_261, _262, _263), vec3(_723 * _715, _723 * _716, _723 * _717)) + 1.0) * 0.5;
        float _3097 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _740 = sqrt(((_716 * _716) + (_715 * _715)) + (_717 * _717)) / (_669 + 9.9999997473787516355514526367188e-06);
        float _3108 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
        float _742 = _741 * 2.0;
        float _746 = (1.0 - _741) / (_741 + 1.0);
        float _3119 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
        float _756 = ((((1.0 - _747) * (_742 + 2.0)) * exp2(log2(isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0))) * (_742 + 1.0))) + _747) * _669;
        float _757 = _637 * 0.5;
        float _758 = _647 * 0.5;
        float _759 = _657 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _773 = (dot(vec3(_261, _262, _263), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3130 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _782 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_670 + 9.9999997473787516355514526367188e-06);
        float _3141 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3152 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0))) * (_784 + 1.0))) + _789) * _670;
        _806 = _637;
        _808 = _636;
        _809 = _635;
        _810 = _647;
        _811 = _646;
        _812 = _645;
        _813 = _657;
        _814 = _656;
        _815 = _655;
        _816 = _670;
        _817 = _669;
        _818 = _668;
        _819 = cbModelParam._m0[36u].z * (isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0)));
        _820 = cbModelParam._m0[36u].z * (isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0)));
        _821 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
    }
    else
    {
        _806 = _807;
        _808 = _807;
        _809 = _807;
        _810 = _807;
        _811 = _807;
        _812 = _807;
        _813 = _807;
        _814 = _807;
        _815 = _807;
        _816 = _807;
        _817 = _807;
        _818 = _807;
        _819 = 0.0;
        _820 = 0.0;
        _821 = 0.0;
    }
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _847 = fma(_505, cbModelParam._m0[30u].z, fma(_501, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _497));
        float _851 = fma(_505, cbModelParam._m0[31u].z, fma(_501, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _497));
        float _855 = fma(_505, cbModelParam._m0[32u].z, fma(_501, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _497));
        float _878 = _497 + _261;
        float _879 = _501 + _262;
        float _880 = _505 + _263;
        float _890 = fma(_880, cbModelParam._m0[30u].z, fma(_879, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _878)) - _847;
        float _891 = fma(_880, cbModelParam._m0[31u].z, fma(_879, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _878)) - _851;
        float _892 = fma(_880, cbModelParam._m0[32u].z, fma(_879, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _878)) - _855;
        float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
        float _909 = ((_896 * _890) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_847 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_896 * _891) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_851 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_896 * _892) / cbModelParam._m0[35u].z) + ((((((_855 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        float _946 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_913.x + (-0.5));
        float _948 = _946 * (_913.y + (-0.5));
        float _949 = _946 * (_913.z + (-0.5));
        float _956 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_920.x + (-0.5));
        float _958 = _956 * (_920.y + (-0.5));
        float _959 = _956 * (_920.z + (-0.5));
        float _966 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_927.x + (-0.5));
        float _968 = _966 * (_927.y + (-0.5));
        float _969 = _966 * (_927.z + (-0.5));
        float _976 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_934.x + (-0.5));
        float _978 = _976 * (_934.y + (-0.5));
        float _979 = _976 * (_934.z + (-0.5));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = _947 * 0.5;
        float _984 = _957 * 0.5;
        float _985 = _967 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_261, _262, _263), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3193 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3204 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3215 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0))) * (_1010 + 1.0))) + _1015) * _980;
        float _1025 = _948 * 0.5;
        float _1026 = _958 * 0.5;
        float _1027 = _968 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_261, _262, _263), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3226 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3237 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3248 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * (_1052 + 1.0))) + _1057) * _981;
        float _1067 = _949 * 0.5;
        float _1068 = _959 * 0.5;
        float _1069 = _969 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_261, _262, _263), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3259 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3270 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3281 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (_1094 + 1.0))) + _1099) * _982;
        _1116 = _949;
        _1117 = _948;
        _1118 = _947;
        _1119 = _959;
        _1120 = _958;
        _1121 = _957;
        _1122 = _969;
        _1123 = _968;
        _1124 = _967;
        _1125 = _982;
        _1126 = _981;
        _1127 = _980;
        _1128 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1129 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1130 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
    }
    else
    {
        _1116 = _807;
        _1117 = _807;
        _1118 = _807;
        _1119 = _807;
        _1120 = _807;
        _1121 = _807;
        _1122 = _807;
        _1123 = _807;
        _1124 = _807;
        _1125 = _807;
        _1126 = _807;
        _1127 = _807;
        _1128 = 0.0;
        _1129 = 0.0;
        _1130 = 0.0;
    }
    float _1140 = (cbModelParam._m0[1u].x * (_1128 - _819)) + _819;
    float _1141 = (cbModelParam._m0[1u].x * (_1129 - _820)) + _820;
    float _1142 = (cbModelParam._m0[1u].x * (_1130 - _821)) + _821;
    float _1163 = fma(_1142, cbSceneParam._m0[89u].z, fma(_1141, cbSceneParam._m0[89u].y, _1140 * cbSceneParam._m0[89u].x));
    float _1166 = fma(_1142, cbSceneParam._m0[90u].z, fma(_1141, cbSceneParam._m0[90u].y, _1140 * cbSceneParam._m0[90u].x));
    float _1169 = fma(_1142, cbSceneParam._m0[91u].z, fma(_1141, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1140));
    float _1184 = _441 * 0.5;
    float _1185 = _442 * 0.5;
    float _1186 = _443 * 0.5;
    float _1187 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1118, _1121, _1124, _1127));
    float _1190 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1117, _1120, _1123, _1126));
    float _1193 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1116, _1119, _1122, _1125));
    float _1227;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1200 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_806, _810, _813, _816));
        float _1204 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_808, _811, _814, _817));
        float _1208 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_809, _812, _815, _818));
        float _1215 = dot(vec4(cbModelParam._m0[39u]), vec4(_1184, _1185, _1186, 1.0));
        _1227 = dot(vec3(isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)), isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1215) ? 0.0 : (isnan(0.0) ? _1215 : max(0.0, _1215))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1227 = 1.0;
    }
    float _1238;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1229 = dot(vec4(cbModelParam._m0[40u]), vec4(_1184, _1185, _1186, 1.0));
        _1238 = dot(vec3(isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)), isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1229) ? 0.0 : (isnan(0.0) ? _1229 : max(0.0, _1229))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1238 = 1.0;
    }
    float _1242 = (_1238 * cbModelParam._m0[1u].x) + (_1227 * (1.0 - cbModelParam._m0[1u].x));
    float _1252 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _265);
    float _1253 = isnan(_1252) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1252 : min(cbModelParam._m0[25u].z, _1252));
    float _1335;
    float _1337;
    float _1339;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1302 = fma(_505, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497)) + cbModelParam._m0[13u].w;
        float _1306 = fma(_505, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497)) + cbModelParam._m0[14u].w;
        float _1310 = fma(_505, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497)) + cbModelParam._m0[15u].w;
        float _1313 = fma(_443, cbModelParam._m0[13u].z, fma(_442, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _441));
        float _1316 = fma(_443, cbModelParam._m0[14u].z, fma(_442, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _441));
        float _1319 = fma(_443, cbModelParam._m0[15u].z, fma(_442, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _441));
        float _1347;
        if (_1313 > 0.0)
        {
            _1347 = abs((1.0 - _1302) / _1313);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1302 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1347 = frontier_phi_14_12_ladder;
        }
        float _1763;
        if (_1316 > 0.0)
        {
            _1763 = abs((1.0 - _1306) / _1316);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1316 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1306 + 1.0) / _1316);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1763 = frontier_phi_23_19_ladder;
        }
        float _2064;
        if (_1319 > 0.0)
        {
            _2064 = abs((1.0 - _1310) / _1319);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1319 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1310 + 1.0) / _1319);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2064 = frontier_phi_37_30_ladder;
        }
        float _2066 = isnan(_1763) ? _1347 : (isnan(_1347) ? _1763 : min(_1347, _1763));
        float _2067 = isnan(_2064) ? _2066 : (isnan(_2066) ? _2064 : min(_2066, _2064));
        float _2071 = (_2067 * _1313) + _1302;
        float _2072 = (_2067 * _1316) + _1306;
        float _2073 = (_2067 * _1319) + _1310;
        float _2074 = _2067 * 9.9999997473787516355514526367188e-05;
        float _2075 = (-1.0) - _2074;
        float _2077 = _2074 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2073 > _2077) || ((_2073 < _2075) || ((_2072 > _2077) || ((_2072 < _2075) || ((_2071 < _2075) || (_2071 > _2077))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2199 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2073, cbModelParam._m0[9u].z, fma(_2072, cbModelParam._m0[9u].y, _2071 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2073, cbModelParam._m0[10u].z, fma(_2072, cbModelParam._m0[10u].y, _2071 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2073, cbModelParam._m0[11u].z, fma(_2072, cbModelParam._m0[11u].y, _2071 * cbModelParam._m0[11u].x))), _1253);
            frontier_phi_13_37_ladder = _2199.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2199.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2199.x * cbModelParam._m0[1u].y;
        }
        _1335 = frontier_phi_13_37_ladder_2;
        _1337 = frontier_phi_13_37_ladder_1;
        _1339 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1323 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_441, _442, _443), _1253);
        _1335 = _1323.x * cbModelParam._m0[1u].y;
        _1337 = _1323.y * cbModelParam._m0[1u].y;
        _1339 = _1323.z * cbModelParam._m0[1u].y;
    }
    float _1343 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _265);
    float _1344 = isnan(_1343) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1343 : min(cbModelParam._m0[25u].w, _1343));
    float _1437;
    float _1439;
    float _1441;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1401 = fma(_505, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497)) + cbModelParam._m0[21u].w;
        float _1405 = fma(_505, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497)) + cbModelParam._m0[22u].w;
        float _1409 = fma(_505, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497)) + cbModelParam._m0[23u].w;
        float _1412 = fma(_443, cbModelParam._m0[21u].z, fma(_442, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _441));
        float _1415 = fma(_443, cbModelParam._m0[22u].z, fma(_442, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _441));
        float _1418 = fma(_443, cbModelParam._m0[23u].z, fma(_442, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _441));
        float _1768;
        if (_1412 > 0.0)
        {
            _1768 = abs((1.0 - _1401) / _1412);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1401 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1768 = frontier_phi_25_21_ladder;
        }
        float _2090;
        if (_1415 > 0.0)
        {
            _2090 = abs((1.0 - _1405) / _1415);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1405 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2090 = frontier_phi_39_32_ladder;
        }
        float _2259;
        if (_1418 > 0.0)
        {
            _2259 = abs((1.0 - _1409) / _1418);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1409 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2259 = frontier_phi_53_48_ladder;
        }
        float _2261 = isnan(_2090) ? _1768 : (isnan(_1768) ? _2090 : min(_1768, _2090));
        float _2262 = isnan(_2259) ? _2261 : (isnan(_2261) ? _2259 : min(_2261, _2259));
        float _2266 = (_2262 * _1412) + _1401;
        float _2267 = (_2262 * _1415) + _1405;
        float _2268 = (_2262 * _1418) + _1409;
        float _2269 = _2262 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2269;
        float _2272 = _2269 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2268 > _2272) || ((_2268 < _2270) || ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 < _2270) || (_2266 > _2272))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2501 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2268, cbModelParam._m0[17u].z, fma(_2267, cbModelParam._m0[17u].y, _2266 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2268, cbModelParam._m0[18u].z, fma(_2267, cbModelParam._m0[18u].y, _2266 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2268, cbModelParam._m0[19u].z, fma(_2267, cbModelParam._m0[19u].y, _2266 * cbModelParam._m0[19u].x))), _1344);
            frontier_phi_22_53_ladder = _2501.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _2501.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _2501.x * cbModelParam._m0[1u].z;
        }
        _1437 = frontier_phi_22_53_ladder_2;
        _1439 = frontier_phi_22_53_ladder;
        _1441 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1421 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_441, _442, _443), _1344);
        _1437 = _1421.x * cbModelParam._m0[1u].z;
        _1439 = _1421.y * cbModelParam._m0[1u].z;
        _1441 = _1421.z * cbModelParam._m0[1u].z;
    }
    float _1454 = (((_468 * _418) + _469) * _433) * ((cbModelParam._m0[1u].w * (_1437 - _1335)) + _1335);
    float _1456 = (((_468 * _420) + _469) * _433) * ((cbModelParam._m0[1u].w * (_1439 - _1337)) + _1337);
    float _1458 = (((_468 * _421) + _469) * _433) * ((cbModelParam._m0[1u].w * (_1441 - _1339)) + _1339);
    float _1461 = fma(_1458, cbSceneParam._m0[89u].z, fma(_1456, cbSceneParam._m0[89u].y, _1454 * cbSceneParam._m0[89u].x));
    float _1464 = fma(_1458, cbSceneParam._m0[90u].z, fma(_1456, cbSceneParam._m0[90u].y, _1454 * cbSceneParam._m0[90u].x));
    float _1467 = fma(_1458, cbSceneParam._m0[91u].z, fma(_1456, cbSceneParam._m0[91u].y, _1454 * cbSceneParam._m0[91u].x));
    float _1512 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _497), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _505))).x));
    float _3407 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    float _1517 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _497), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _505))).x));
    float _3418 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
    float _1519 = (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)));
    uvec4 _1523 = floatBitsToUint(cbInstanceData._m0[_392 + 5u]);
    uint _1525 = _1523.x * 14u;
    uint _1526 = _1525 + 13u;
    float _1531 = _433 + (-1.0);
    float _1534 = (cbLight._m0[_1526].x * _1531) + 1.0;
    float _1535 = (cbLight._m0[_1526].y * _1531) + 1.0;
    uint _1536 = _1525 + 5u;
    float _1542 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
    uint _1546 = _1525 + 4u;
    float _1556 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
    uint _1560 = _1525 | 1u;
    float _1571 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_261, _262, _263));
    float _1574 = dot(vec3(cbLight._m0[_1560].xyz), vec3(_261, _262, _263));
    float _3439 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _3450 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
    float _1579 = (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * 0.3183098733425140380859375;
    float _1581 = (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * 0.3183098733425140380859375;
    float _1588 = ((cbLight._m0[_1536].x * _1542) * _1581) + (((cbLight._m0[_1546].x * _1519) * _1556) * _1579);
    float _1589 = ((_1542 * cbLight._m0[_1536].y) * _1581) + (((cbLight._m0[_1546].y * _1519) * _1556) * _1579);
    float _1590 = ((_1542 * cbLight._m0[_1536].z) * _1581) + (((cbLight._m0[_1546].z * _1519) * _1556) * _1579);
    uint _1592 = _1525 + 8u;
    float _1605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1525].w)) * _265) * 0.949999988079071044921875);
    float _1606 = _1605 * _1605;
    float _1607 = cbLight._m0[_1525].x + _343;
    float _1608 = cbLight._m0[_1525].y + _344;
    float _1609 = cbLight._m0[_1525].z + _345;
    float _1613 = inversesqrt(dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609)));
    float _1614 = _1613 * _1607;
    float _1615 = _1613 * _1608;
    float _1616 = _1613 * _1609;
    float _1617 = dot(vec3(_261, _262, _263), vec3(cbLight._m0[_1525].xyz));
    float _3461 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1620 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _3472 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _1621 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _1622 = dot(vec3(_261, _262, _263), vec3(_1614, _1615, _1616));
    float _3483 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _1625 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _1626 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_1614, _1615, _1616));
    float _3494 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1630 = _1606 * _1606;
    float _1634 = ((_1625 * _1625) * (_1630 + (-1.0))) + 1.0;
    float _1642 = exp2(log2(1.0 - (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * 5.0);
    float _1643 = 0.959999978542327880859375 - _415;
    float _1645 = 0.959999978542327880859375 - _416;
    float _1646 = 0.959999978542327880859375 - _417;
    float _1653 = 1.0 - _1606;
    float _1664 = (0.5 / (((_1621 * ((_1620 * _1653) + _1606)) + 9.9999999392252902907785028219223e-09) + (((_1621 * _1653) + _1606) * _1620))) * _1620;
    float _3505 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1666 = (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_1630 / ((_1634 * _1634) * 3.141590118408203125));
    uint _1680 = _1525 + 9u;
    float _1691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1560].w)) * _265) * 0.949999988079071044921875);
    float _1692 = _1691 * _1691;
    float _1693 = cbLight._m0[_1560].x + _343;
    float _1694 = cbLight._m0[_1560].y + _344;
    float _1695 = cbLight._m0[_1560].z + _345;
    float _1699 = inversesqrt(dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695)));
    float _1700 = _1699 * _1693;
    float _1701 = _1699 * _1694;
    float _1702 = _1699 * _1695;
    float _1703 = dot(vec3(_261, _262, _263), vec3(cbLight._m0[_1560].xyz));
    float _3516 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1706 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _1707 = dot(vec3(_261, _262, _263), vec3(_1700, _1701, _1702));
    float _3527 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1710 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _1711 = dot(vec3(cbLight._m0[_1560].xyz), vec3(_1700, _1701, _1702));
    float _3538 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1715 = _1692 * _1692;
    float _1719 = ((_1710 * _1710) * (_1715 + (-1.0))) + 1.0;
    float _1726 = exp2(log2(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * 5.0);
    float _1733 = 1.0 - _1692;
    float _1743 = (0.5 / (((_1621 * ((_1706 * _1733) + _1692)) + 9.9999999392252902907785028219223e-09) + (((_1621 * _1733) + _1692) * _1706))) * _1706;
    float _3549 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1745 = (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_1715 / ((_1719 * _1719) * 3.141590118408203125));
    float _1755 = (((((_1726 * _1643) + _418) * cbLight._m0[_1680].x) * _1745) * _1542) + ((((cbLight._m0[_1592].x * _1519) * ((_1642 * _1643) + _418)) * _1666) * _1556);
    float _1756 = (((((_1726 * _1645) + _420) * cbLight._m0[_1680].y) * _1745) * _1542) + ((((cbLight._m0[_1592].y * _1519) * ((_1642 * _1645) + _420)) * _1666) * _1556);
    float _1757 = (((((_1726 * _1646) + _421) * cbLight._m0[_1680].z) * _1745) * _1542) + ((((cbLight._m0[_1592].z * _1519) * ((_1642 * _1646) + _421)) * _1666) * _1556);
    float _1873;
    float _1875;
    float _1877;
    float _1879;
    float _1881;
    float _1883;
    if (_1523.y == 0u)
    {
        float _1813 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1814 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1813;
        float _1815 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1813;
        float _1816 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1813;
        uvec4 _1828 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1829 = _1828.x;
        uint _1840 = uint((float(_1828.y) * floor(float(uint(cbSceneParam._m0[85u].y * _352) / _1829))) + floor(float(uint(cbSceneParam._m0[85u].x * _351) / _1829)));
        float _1850 = (log2(_1816 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1851 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        uint _1854 = uint(isnan(14.0) ? _1851 : (isnan(_1851) ? 14.0 : min(_1851, 14.0)));
        uvec4 _1859 = texelFetch(g_lightClusterGridBuffer, int(((_1854 << 2u) + (_1840 << 6u)) >> 2u));
        uint _1860 = _1859.x;
        uint _1861 = _1828.z;
        float _1950;
        float _1952;
        float _1954;
        float _1956;
        float _1958;
        float _1960;
        if (((((1u << ((_1861 >> 4u) & 15u)) + 4294967295u) & _1860) == 0u) || ((_1861 & 240u) == 0u))
        {
            _1950 = 0.0;
            _1952 = 0.0;
            _1954 = 0.0;
            _1956 = 0.0;
            _1958 = 0.0;
            _1960 = 0.0;
        }
        else
        {
            float _1951;
            float _1953;
            float _1955;
            float _1957;
            float _1959;
            float _1961;
            float _2127 = 0.0;
            float _2128 = 0.0;
            float _2129 = 0.0;
            float _2130 = 0.0;
            float _2131 = 0.0;
            float _2132 = 0.0;
            uint _2133 = 0u;
            uint _2142;
            bool _2143;
            for (;;)
            {
                _2142 = texelFetch(g_lightClassification, int((((_1854 << 5u) + (_1840 << 9u)) + (_2133 << 2u)) >> 2u)).x;
                _2143 = _2142 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2143)
                {
                    frontier_phi_50_pred = _2130;
                    frontier_phi_50_pred_1 = _2132;
                    frontier_phi_50_pred_2 = _2131;
                    frontier_phi_50_pred_3 = _2129;
                    frontier_phi_50_pred_4 = _2128;
                    frontier_phi_50_pred_5 = _2127;
                }
                else
                {
                    float _2302;
                    float _2303;
                    float _2304;
                    float _2305;
                    float _2306;
                    float _2307;
                    uint _2308;
                    _2302 = _2127;
                    _2303 = _2128;
                    _2304 = _2129;
                    _2305 = _2130;
                    _2306 = _2131;
                    _2307 = _2132;
                    _2308 = _2142;
                    float _2208;
                    float _2209;
                    float _2210;
                    float _2211;
                    float _2212;
                    float _2213;
                    for (;;)
                    {
                        uint _2312 = uint(findLSB(_2308)) + (_2133 << 5u);
                        uint _2309 = (_2308 + 4294967295u) & _2308;
                        uint _2314 = _2312 * 48u;
                        vec4 _2328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2314)).x, texelFetch(g_PointLightRenderingBuffer, int(_2314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2314 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2314 + 3u)).x));
                        uint _2334 = (_2312 * 48u) + 4u;
                        vec4 _2347 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2334)).x, texelFetch(g_PointLightRenderingBuffer, int(_2334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2334 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2334 + 3u)).x));
                        uint _2353 = (_2312 * 48u) + 8u;
                        vec3 _2364 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2353)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 2u)).x));
                        float _2368 = _2328.x - _1814;
                        float _2369 = _2328.y - _1815;
                        float _2370 = _2328.z - _1816;
                        float _2371 = dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370));
                        float _2374 = inversesqrt(_2371);
                        float _2375 = _2374 * _2368;
                        float _2376 = _2374 * _2369;
                        float _2377 = _2374 * _2370;
                        float _2378 = dot(vec3(_373, _376, _379), vec3(_2375, _2376, _2377));
                        float _2383 = 1.0 - (_2371 * _2328.w);
                        float _3570 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
                        float _2384 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
                        float _2385 = sqrt(_2371) * _2347.w;
                        float _2388 = 1.39999997615814208984375 / (_2385 + 1.39999997615814208984375);
                        float _2389 = _2388 * _2388;
                        float _2392 = ((1.0 - _2389) * _2378) + _2389;
                        float _2395 = _2385 * _2385;
                        float _2399 = ((isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0))) * _2384) / ((_2395 * 0.699999988079071044921875) + 1.0);
                        float _2403 = (-0.0) - _1814;
                        float _2404 = (-0.0) - _1815;
                        float _2405 = (-0.0) - _1816;
                        float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
                        float _2410 = _2409 * _2403;
                        float _2411 = _2409 * _2404;
                        float _2412 = _2409 * _2405;
                        float _2420 = exp2(log2(1.0 / ((_2395 * 3.5) + 5.0)) * 0.25);
                        float _2421 = 1.0 - _449;
                        float _2428 = sqrt(1.0 - ((1.0 - (_2421 * _2421)) * (1.0 - (_2420 * _2420))));
                        float _2429 = _2428 * _2428;
                        float _2430 = _2429 * _2429;
                        float _2431 = _2410 + _2375;
                        float _2432 = _2411 + _2376;
                        float _2433 = _2412 + _2377;
                        float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
                        float _2441 = dot(vec3(_373, _376, _379), vec3(_2410, _2411, _2412));
                        float _3586 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
                        float _2444 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
                        float _2445 = dot(vec3(_373, _376, _379), vec3(_2437 * _2431, _2437 * _2432, _2437 * _2433));
                        float _3597 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
                        float _2448 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
                        float _2452 = ((_2448 * _2448) * (_2430 + (-1.0))) + 1.0;
                        float _2453 = _2388 * _2429;
                        float _2454 = _2453 * _2453;
                        float _2457 = ((1.0 - _2454) * _2378) + _2454;
                        float _3608 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
                        float _2458 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
                        float _2459 = 1.0 - _2429;
                        float _2469 = (0.5 / (((_2458 * ((_2444 * _2459) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2458 * _2459) + _2429) * _2444))) * _2458;
                        float _3619 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
                        float _2480 = (((_2430 * 3.1415927410125732421875) * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) / ((_2452 * _2452) * ((_2395 * 2.1991131305694580078125) + 3.141590118408203125))) * _2384;
                        _2211 = (_2399 * _2347.x) + _2305;
                        _2212 = (_2399 * _2347.y) + _2306;
                        _2213 = (_2399 * _2347.z) + _2307;
                        _2208 = (_2480 * _2364.x) + _2302;
                        _2209 = (_2480 * _2364.y) + _2303;
                        _2210 = (_2480 * _2364.z) + _2304;
                        if (_2309 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2302 = _2208;
                            _2303 = _2209;
                            _2304 = _2210;
                            _2305 = _2211;
                            _2306 = _2212;
                            _2307 = _2213;
                            _2308 = _2309;
                        }
                    }
                    frontier_phi_50_pred = _2211;
                    frontier_phi_50_pred_1 = _2213;
                    frontier_phi_50_pred_2 = _2212;
                    frontier_phi_50_pred_3 = _2210;
                    frontier_phi_50_pred_4 = _2209;
                    frontier_phi_50_pred_5 = _2208;
                }
                _1957 = frontier_phi_50_pred;
                _1961 = frontier_phi_50_pred_1;
                _1959 = frontier_phi_50_pred_2;
                _1955 = frontier_phi_50_pred_3;
                _1953 = frontier_phi_50_pred_4;
                _1951 = frontier_phi_50_pred_5;
                uint _2134 = _2133 + 1u;
                if (_2134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2127 = _1951;
                    _2128 = _1953;
                    _2129 = _1955;
                    _2130 = _1957;
                    _2131 = _1959;
                    _2132 = _1961;
                    _2133 = _2134;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1950 = _1951;
            _1952 = _1953;
            _1954 = _1955;
            _1956 = _1957;
            _1958 = _1959;
            _1960 = _1961;
        }
        uvec4 _1964 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1965 = _1964.z;
        uint _1967 = (_1965 >> 8u) & 15u;
        float _2095;
        float _2097;
        float _2099;
        float _2101;
        float _2103;
        float _2105;
        if (((4294967295u << _1967) & _1860) == 0u)
        {
            _2095 = _1950;
            _2097 = _1952;
            _2099 = _1954;
            _2101 = _1956;
            _2103 = _1958;
            _2105 = _1960;
        }
        else
        {
            float _2120 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
            float _2121 = _2120 * _1814;
            float _2122 = _2120 * _1815;
            float _2123 = _2120 * _1816;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_1967 < ((_1965 >> 12u) & 15u))
            {
                float _2096;
                float _2098;
                float _2100;
                float _2102;
                float _2104;
                float _2106;
                float _2285 = _1950;
                float _2286 = _1952;
                float _2287 = _1954;
                float _2288 = _1956;
                float _2289 = _1958;
                float _2290 = _1960;
                uint _2291 = _1967;
                uint _2300;
                bool _2301;
                for (;;)
                {
                    _2300 = texelFetch(g_lightClassification, int((((_1854 << 5u) + (_1840 << 9u)) + (_2291 << 2u)) >> 2u)).x;
                    _2301 = _2300 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2301)
                    {
                        frontier_phi_59_pred = _2290;
                        frontier_phi_59_pred_1 = _2289;
                        frontier_phi_59_pred_2 = _2288;
                        frontier_phi_59_pred_3 = _2287;
                        frontier_phi_59_pred_4 = _2286;
                        frontier_phi_59_pred_5 = _2285;
                    }
                    else
                    {
                        float _2506;
                        float _2507;
                        float _2508;
                        float _2509;
                        float _2510;
                        float _2511;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2519 = _2285;
                        float _2520 = _2286;
                        float _2521 = _2287;
                        float _2522 = _2288;
                        float _2523 = _2289;
                        float _2524 = _2290;
                        uint _2525 = _2300;
                        uint _2526;
                        vec4 _2551;
                        float _2552;
                        vec4 _2567;
                        vec3 _2579;
                        vec4 _2595;
                        vec4 _2611;
                        float _2658;
                        bool _2659;
                        for (;;)
                        {
                            uint _2536 = ((_2291 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2525));
                            _2526 = (_2525 + 4294967295u) & _2525;
                            uint _2538 = _2536 * 40u;
                            _2551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2538 + 3u)).x));
                            _2552 = _2551.w;
                            uint _2554 = (_2536 * 40u) + 4u;
                            _2567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2554 + 3u)).x));
                            uint _2569 = (_2536 * 40u) + 8u;
                            _2579 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 2u)).x));
                            uint _2582 = (_2536 * 40u) + 16u;
                            _2595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 3u)).x));
                            uint _2598 = (_2536 * 40u) + 20u;
                            _2611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 3u)).x));
                            uint _2614 = (_2536 * 40u) + 24u;
                            vec4 _2627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 3u)).x));
                            uint _2633 = (_2536 * 40u) + 28u;
                            vec4 _2646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2633 + 3u)).x));
                            _2658 = fma(_1816, _2646.z, fma(_1815, _2646.y, _2646.x * _1814)) + _2646.w;
                            _2659 = !((fma(_1816, _2627.z, fma(_1815, _2627.y, _2627.x * _1814)) + _2627.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_2659)
                            {
                                float _2686 = _2551.x - _1814;
                                float _2687 = _2551.y - _1815;
                                float _2688 = _2551.z - _1816;
                                float _2689 = dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688));
                                float _2692 = inversesqrt(_2689);
                                float _2693 = _2692 * _2686;
                                float _2694 = _2692 * _2687;
                                float _2695 = _2692 * _2688;
                                float _2699 = 1.0 - (_2689 / (_2552 * _2552));
                                float _3630 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
                                float _2700 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
                                float _2704 = sqrt(_2689) * _2567.w;
                                float _2706 = 1.39999997615814208984375 / (_2704 + 1.39999997615814208984375);
                                float _2707 = _2706 * _2706;
                                float _2710 = ((1.0 - _2707) * dot(vec3(_2693, _2694, _2695), vec3(_373, _376, _379))) + _2707;
                                float _2713 = _2704 * _2704;
                                float _2717 = (fma(_1816, _2595.z, fma(_1815, _2595.y, _2595.x * _1814)) + _2595.w) / _2658;
                                float _2718 = (fma(_1816, _2611.z, fma(_1815, _2611.y, _2611.x * _1814)) + _2611.w) / _2658;
                                float _2722 = 1.0 - dot(vec2(_2717, _2718), vec2(_2717, _2718));
                                float _3646 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                                float _2723 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
                                float _2724 = _2723 * (((isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0))) * _2700) / ((_2713 * 0.699999988079071044921875) + 1.0));
                                float _2736 = exp2(log2(1.0 / ((_2713 * 3.5) + 5.0)) * 0.25);
                                float _2737 = 1.0 - _449;
                                float _2744 = sqrt(1.0 - ((1.0 - (_2737 * _2737)) * (1.0 - (_2736 * _2736))));
                                float _2745 = _2744 * _2744;
                                float _2746 = _2745 * _2745;
                                float _2747 = _2693 - _2121;
                                float _2748 = _2694 - _2122;
                                float _2749 = _2695 - _2123;
                                float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
                                float _2757 = dot(vec3(_373, _376, _379), vec3((-0.0) - _2121, (-0.0) - _2122, (-0.0) - _2123));
                                float _3657 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                                float _2760 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
                                float _2761 = dot(vec3(_373, _376, _379), vec3(_2753 * _2747, _2753 * _2748, _2753 * _2749));
                                float _3668 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                                float _2764 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
                                float _2768 = ((_2764 * _2764) * (_2746 + (-1.0))) + 1.0;
                                float _2769 = _2706 * _2745;
                                float _2770 = _2769 * _2769;
                                float _2776 = ((1.0 - _2770) * dot(vec3(_373, _376, _379), vec3(_2693, _2694, _2695))) + _2770;
                                float _3679 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                                float _2777 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
                                float _2778 = 1.0 - _2745;
                                float _2788 = (0.5 / (((_2777 * ((_2760 * _2778) + _2745)) + 9.9999999392252902907785028219223e-09) + (((_2777 * _2778) + _2745) * _2760))) * _2777;
                                float _3690 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                                float _2798 = (_2723 * _2700) * (((_2746 * 3.1415927410125732421875) * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) / ((_2768 * _2768) * ((_2713 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _2724 * _2567.z;
                                frontier_phi_65_pred_1 = _2724 * _2567.y;
                                frontier_phi_65_pred_2 = _2724 * _2567.x;
                                frontier_phi_65_pred_3 = _2798 * _2579.z;
                                frontier_phi_65_pred_4 = _2798 * _2579.y;
                                frontier_phi_65_pred_5 = _2798 * _2579.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _2807 = frontier_phi_65_pred;
                            _2806 = frontier_phi_65_pred_1;
                            _2805 = frontier_phi_65_pred_2;
                            _2804 = frontier_phi_65_pred_3;
                            _2803 = frontier_phi_65_pred_4;
                            _2802 = frontier_phi_65_pred_5;
                            _2509 = _2805 + _2522;
                            _2510 = _2806 + _2523;
                            _2511 = _2807 + _2524;
                            _2506 = _2802 + _2519;
                            _2507 = _2803 + _2520;
                            _2508 = _2804 + _2521;
                            if (_2526 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2519 = _2506;
                                _2520 = _2507;
                                _2521 = _2508;
                                _2522 = _2509;
                                _2523 = _2510;
                                _2524 = _2511;
                                _2525 = _2526;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _2511;
                        frontier_phi_59_pred_1 = _2510;
                        frontier_phi_59_pred_2 = _2509;
                        frontier_phi_59_pred_3 = _2508;
                        frontier_phi_59_pred_4 = _2507;
                        frontier_phi_59_pred_5 = _2506;
                    }
                    _2106 = frontier_phi_59_pred;
                    _2104 = frontier_phi_59_pred_1;
                    _2102 = frontier_phi_59_pred_2;
                    _2100 = frontier_phi_59_pred_3;
                    _2098 = frontier_phi_59_pred_4;
                    _2096 = frontier_phi_59_pred_5;
                    uint _2292 = _2291 + 1u;
                    if (_2292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2285 = _2096;
                        _2286 = _2098;
                        _2287 = _2100;
                        _2288 = _2102;
                        _2289 = _2104;
                        _2290 = _2106;
                        _2291 = _2292;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2102;
                frontier_phi_41_42_ladder_1 = _2106;
                frontier_phi_41_42_ladder_2 = _2104;
                frontier_phi_41_42_ladder_3 = _2100;
                frontier_phi_41_42_ladder_4 = _2098;
                frontier_phi_41_42_ladder_5 = _2096;
            }
            else
            {
                frontier_phi_41_42_ladder = _1956;
                frontier_phi_41_42_ladder_1 = _1960;
                frontier_phi_41_42_ladder_2 = _1958;
                frontier_phi_41_42_ladder_3 = _1954;
                frontier_phi_41_42_ladder_4 = _1952;
                frontier_phi_41_42_ladder_5 = _1950;
            }
            _2095 = frontier_phi_41_42_ladder_5;
            _2097 = frontier_phi_41_42_ladder_4;
            _2099 = frontier_phi_41_42_ladder_3;
            _2101 = frontier_phi_41_42_ladder;
            _2103 = frontier_phi_41_42_ladder_2;
            _2105 = frontier_phi_41_42_ladder_1;
        }
        float _2110 = isnan(1.0) ? _433 : (isnan(_433) ? 1.0 : min(_433, 1.0));
        _1873 = (_2110 * _2101) + _1588;
        _1875 = (_2110 * _2103) + _1589;
        _1877 = (_2110 * _2105) + _1590;
        _1879 = ((_2095 * _418) * _2110) + _1755;
        _1881 = ((_2097 * _420) * _2110) + _1756;
        _1883 = ((_2099 * _421) * _2110) + _1757;
    }
    else
    {
        _1873 = _1588;
        _1875 = _1589;
        _1877 = _1590;
        _1879 = _1755;
        _1881 = _1756;
        _1883 = _1757;
    }
    float _3706 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3717 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3728 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3739 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _1908 = cbInstanceData._m0[_392 + 6u].w * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)));
    float _1913 = _351 / cbSceneParam._m0[86u].x;
    float _1914 = _352 / cbSceneParam._m0[86u].y;
    vec4 _1928 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1913, _1914, (log2((isnan(cbSceneParam._m0[77u].w) ? _285 : (isnan(_285) ? cbSceneParam._m0[77u].w : min(_285, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1930 = _1928.x;
    float _1931 = _1928.y;
    float _1932 = _1928.z;
    float _1933 = _1928.w;
    float _2014;
    float _2016;
    float _2018;
    float _2020;
    if (_285 > cbSceneParam._m0[78u].w)
    {
        float _1975 = isnan(_285) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _285 : min(cbSceneParam._m0[80u].w, _285));
        float _1976 = _1975 / _285;
        float _1987 = _1976 * _336;
        float _1988 = _337 * _1976;
        float _1989 = (-0.0) - _1988;
        float _1991 = _1976 * _338;
        float _1993 = (cbSceneParam._m0[77u].w * _1989) / _1975;
        float _1994 = _1993 + cbSceneParam._m0[79u].w;
        float _1995 = cbSceneParam._m0[79u].w - _1988;
        float _2001 = sqrt(((_1987 * _1987) + (_1988 * _1988)) + (_1991 * _1991));
        float _2004 = (1.0 - (cbSceneParam._m0[77u].w / _1975)) * _2001;
        float _2010 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2012 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2221;
        if (abs((_1989 - _1993) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2221 = ((((_1994 > 0.0) ? exp2(_2010 * _1994) : (2.0 - exp2(_2012 * _1994))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2004;
        }
        else
        {
            float _2156 = 1.0 / cbSceneParam._m0[80u].x;
            float _2157 = isnan(_1995) ? _1994 : (isnan(_1994) ? _1995 : max(_1994, _1995));
            float _2158 = isnan(_1995) ? _1994 : (isnan(_1994) ? _1995 : min(_1994, _1995));
            float _2167 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : min(_2157, 0.0));
            float _2168 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : min(_2158, 0.0));
            _2221 = ((abs(_2001 / _1989) * cbSceneParam._m0[80u].y) * ((((_2167 - _2168) * 2.0) - ((exp2(_2010 * (isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0)))) - exp2(_2010 * (isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))))) * _2156)) - ((exp2(_2012 * _2167) - exp2(_2012 * _2168)) * _2156))) + (_2004 * cbSceneParam._m0[80u].z);
        }
        vec4 _2223 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1913, _1914, 1.0), 0.0);
        float _2232 = exp2((_2221 * (-1.44269502162933349609375)) * (1.0 - _2223.w));
        float _2233 = log2(_2232);
        float _2249 = log2(_1933);
        _2014 = (exp2(_2249 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2233 * cbSceneParam._m0[78u].x)) * _2223.x) / cbSceneParam._m0[78u].x)) + _1930;
        _2016 = (exp2(_2249 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2233 * cbSceneParam._m0[78u].y)) * _2223.y) / cbSceneParam._m0[78u].y)) + _1931;
        _2018 = (exp2(_2249 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2233 * cbSceneParam._m0[78u].z)) * _2223.z) / cbSceneParam._m0[78u].z)) + _1932;
        _2020 = _2232 * _1933;
    }
    else
    {
        _2014 = _1930;
        _2016 = _1931;
        _2018 = _1932;
        _2020 = _1933;
    }
    float _2032 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2033 = _2032 == 3.0;
    float _2034 = log2(_2020);
    float _2041 = exp2(_2034 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1873 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _433))) + ((_1879 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _1242)) * cbPerFrame._m0[3u].x));
    float _2042 = exp2(_2034 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1875 + ((isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))) * _433))) + ((_1881 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _1242)) * cbPerFrame._m0[3u].x));
    float _2043 = exp2(_2034 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1877 + ((isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))) * _433))) + ((_1883 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _1242)) * cbPerFrame._m0[3u].x));
    float _2052 = (_2032 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2052 * (_2033 ? _2041 : (_2041 + (cbSceneParam._m0[72u].w * _2014)));
    SV_Target.y = _2052 * (_2033 ? _2042 : (_2042 + (cbSceneParam._m0[72u].w * _2016)));
    SV_Target.z = _2052 * (_2033 ? _2043 : (_2043 + (cbSceneParam._m0[72u].w * _2018)));
    SV_Target.w = _1908;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1908;
}


