#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_GlassLow_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _811;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(M_GlassLow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = (_228.x * 2.0) + (-1.0);
    float _239 = (_228.y * 2.0) + (-1.0);
    float _240 = dot(vec2(_237, _239), vec2(_237, _239));
    float _3255 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _246 = sqrt(1.0 - (isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0))));
    float _251 = ((cbMtdParam._m0[10u].y + _228.z) * 0.5) + cbMtdParam._m0[10u].x;
    float _254 = fma(_246, _192 * NORMAL.x, fma(_239, _199 * TANGENT.x, (_185 * _178) * _237));
    float _257 = fma(_246, _192 * NORMAL.y, fma(_239, _199 * TANGENT.y, (_185 * _179) * _237));
    float _260 = fma(_246, _192 * NORMAL.z, fma(_239, _199 * TANGENT.z, (_185 * _180) * _237));
    float _264 = inversesqrt(dot(vec3(_254, _257, _260), vec3(_254, _257, _260)));
    float _265 = _264 * _254;
    float _266 = _264 * _257;
    float _267 = _264 * _260;
    float _3266 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _268 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
    float _3277 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _269 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
    float _3288 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3299 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3310 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3321 = isnan(0.0) ? cbMtdParam._m0[10u].w : (isnan(cbMtdParam._m0[10u].w) ? 0.0 : max(cbMtdParam._m0[10u].w, 0.0));
    float _273 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _289 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _330 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _340 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _330);
    float _341 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _330);
    float _342 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _330);
    float _346 = inversesqrt(dot(vec3(_340, _341, _342), vec3(_340, _341, _342)));
    float _347 = _340 * _346;
    float _348 = _341 * _346;
    float _349 = _342 * _346;
    float _355 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _356 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _377 = fma(_267, cbSceneParam._m0[5u].z, fma(_266, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _265));
    float _380 = fma(_267, cbSceneParam._m0[6u].z, fma(_266, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _265));
    float _383 = fma(_267, cbSceneParam._m0[7u].z, fma(_266, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _265));
    uint _396 = uint(roundEven(NORMAL.w)) * 13u;
    uint _399 = (_396 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _405 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0)))) * cbInstanceData._m0[_399].x;
    float _406 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0)))) * cbInstanceData._m0[_399].y;
    float _407 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0)))) * cbInstanceData._m0[_399].z;
    float _3332 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _408 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
    float _3343 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _409 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
    float _3354 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _410 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
    float _411 = 1.0 - _273;
    float _412 = _408 * _411;
    float _413 = _409 * _411;
    float _414 = _410 * _411;
    float _419 = (_408 + (-0.039999999105930328369140625)) * _273;
    float _420 = (_409 + (-0.039999999105930328369140625)) * _273;
    float _421 = (_410 + (-0.039999999105930328369140625)) * _273;
    float _422 = _419 + 0.039999999105930328369140625;
    float _424 = _420 + 0.039999999105930328369140625;
    float _425 = _421 + 0.039999999105930328369140625;
    vec4 _434 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _355, cbSceneParam._m0[86u].y * _356));
    float _437 = _434.x * TEXCOORD.z;
    float _438 = dot(vec3(_265, _266, _267), vec3(_347, _348, _349));
    float _441 = _438 * 2.0;
    float _445 = (_441 * _265) - _347;
    float _446 = (_441 * _266) - _348;
    float _447 = (_441 * _267) - _349;
    float _451 = abs(dot(vec3(_347, _348, _349), vec3(_265, _266, _267)));
    float _3365 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _453 = sqrt(_269);
    float _466 = exp2((_453 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_453 * 3.0));
    float _472 = (1.0 - _466) * ((_453 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _473 = _466 * _453;
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _810;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _536 = fma(_509, cbModelParam._m0[26u].z, fma(_505, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _501));
        float _540 = fma(_509, cbModelParam._m0[27u].z, fma(_505, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _501));
        float _544 = fma(_509, cbModelParam._m0[28u].z, fma(_505, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _501));
        float _568 = _501 + _265;
        float _569 = _505 + _266;
        float _570 = _509 + _267;
        float _580 = fma(_570, cbModelParam._m0[26u].z, fma(_569, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _568)) - _536;
        float _581 = fma(_570, cbModelParam._m0[27u].z, fma(_569, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _568)) - _540;
        float _582 = fma(_570, cbModelParam._m0[28u].z, fma(_569, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _568)) - _544;
        float _586 = inversesqrt(dot(vec3(_580, _581, _582), vec3(_580, _581, _582)));
        float _599 = ((_586 * _580) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_536 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _600 = ((_586 * _581) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_540 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _601 = ((_586 * _582) / cbModelParam._m0[34u].z) + ((((((_544 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        vec4 _618 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        float _638 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_604.x + (-0.5));
        float _640 = _638 * (_604.y + (-0.5));
        float _641 = _638 * (_604.z + (-0.5));
        float _648 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_611.x + (-0.5));
        float _650 = _648 * (_611.y + (-0.5));
        float _651 = _648 * (_611.z + (-0.5));
        float _658 = exp2((_618.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_618.x + (-0.5));
        float _660 = _658 * (_618.y + (-0.5));
        float _661 = _658 * (_618.z + (-0.5));
        float _668 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_625.x + (-0.5));
        float _670 = _668 * (_625.y + (-0.5));
        float _671 = _668 * (_625.z + (-0.5));
        float _672 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _673 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _674 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _675 = _639 * 0.5;
        float _676 = _649 * 0.5;
        float _677 = _659 * 0.5;
        float _678 = dot(vec3(_675, _676, _677), vec3(_675, _676, _677));
        float _683 = (_678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_678);
        float _692 = (dot(vec3(_265, _266, _267), vec3(_683 * _675, _683 * _676, _683 * _677)) + 1.0) * 0.5;
        float _3391 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _702 = sqrt(((_676 * _676) + (_675 * _675)) + (_677 * _677)) / (_672 + 9.9999997473787516355514526367188e-06);
        float _3402 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _704 = _703 * 2.0;
        float _708 = (1.0 - _703) / (_703 + 1.0);
        float _3413 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _718 = ((((1.0 - _709) * (_704 + 2.0)) * exp2(log2(isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))) * (_704 + 1.0))) + _709) * _672;
        float _719 = _640 * 0.5;
        float _720 = _650 * 0.5;
        float _721 = _660 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _735 = (dot(vec3(_265, _266, _267), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3424 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _744 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_673 + 9.9999997473787516355514526367188e-06);
        float _3435 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3446 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) * (_746 + 1.0))) + _751) * _673;
        float _761 = _641 * 0.5;
        float _762 = _651 * 0.5;
        float _763 = _661 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _777 = (dot(vec3(_265, _266, _267), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3457 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _786 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_674 + 9.9999997473787516355514526367188e-06);
        float _3468 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3479 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * (_788 + 1.0))) + _793) * _674;
        _810 = _641;
        _812 = _640;
        _813 = _639;
        _814 = _651;
        _815 = _650;
        _816 = _649;
        _817 = _661;
        _818 = _660;
        _819 = _659;
        _820 = _674;
        _821 = _673;
        _822 = _672;
        _823 = cbModelParam._m0[36u].z * (isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0)));
        _824 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
        _825 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
    }
    else
    {
        _810 = _811;
        _812 = _811;
        _813 = _811;
        _814 = _811;
        _815 = _811;
        _816 = _811;
        _817 = _811;
        _818 = _811;
        _819 = _811;
        _820 = _811;
        _821 = _811;
        _822 = _811;
        _823 = 0.0;
        _824 = 0.0;
        _825 = 0.0;
    }
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _851 = fma(_509, cbModelParam._m0[30u].z, fma(_505, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _501));
        float _855 = fma(_509, cbModelParam._m0[31u].z, fma(_505, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _501));
        float _859 = fma(_509, cbModelParam._m0[32u].z, fma(_505, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _501));
        float _882 = _501 + _265;
        float _883 = _505 + _266;
        float _884 = _509 + _267;
        float _894 = fma(_884, cbModelParam._m0[30u].z, fma(_883, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _882)) - _851;
        float _895 = fma(_884, cbModelParam._m0[31u].z, fma(_883, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _882)) - _855;
        float _896 = fma(_884, cbModelParam._m0[32u].z, fma(_883, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _882)) - _859;
        float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
        float _913 = ((_900 * _894) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_851 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_900 * _895) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_855 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_900 * _896) / cbModelParam._m0[35u].z) + ((((((_859 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        float _950 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_917.x + (-0.5));
        float _952 = _950 * (_917.y + (-0.5));
        float _953 = _950 * (_917.z + (-0.5));
        float _960 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_924.x + (-0.5));
        float _962 = _960 * (_924.y + (-0.5));
        float _963 = _960 * (_924.z + (-0.5));
        float _970 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_931.x + (-0.5));
        float _972 = _970 * (_931.y + (-0.5));
        float _973 = _970 * (_931.z + (-0.5));
        float _980 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_938.x + (-0.5));
        float _982 = _980 * (_938.y + (-0.5));
        float _983 = _980 * (_938.z + (-0.5));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = _951 * 0.5;
        float _988 = _961 * 0.5;
        float _989 = _971 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_265, _266, _267), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3542 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_1014 + 1.0))) + _1019) * _984;
        float _1029 = _952 * 0.5;
        float _1030 = _962 * 0.5;
        float _1031 = _972 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_265, _266, _267), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3575 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_1056 + 1.0))) + _1061) * _985;
        float _1071 = _953 * 0.5;
        float _1072 = _963 * 0.5;
        float _1073 = _973 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_265, _266, _267), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3608 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_1098 + 1.0))) + _1103) * _986;
        _1120 = _953;
        _1121 = _952;
        _1122 = _951;
        _1123 = _963;
        _1124 = _962;
        _1125 = _961;
        _1126 = _973;
        _1127 = _972;
        _1128 = _971;
        _1129 = _986;
        _1130 = _985;
        _1131 = _984;
        _1132 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1133 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1134 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
    }
    else
    {
        _1120 = _811;
        _1121 = _811;
        _1122 = _811;
        _1123 = _811;
        _1124 = _811;
        _1125 = _811;
        _1126 = _811;
        _1127 = _811;
        _1128 = _811;
        _1129 = _811;
        _1130 = _811;
        _1131 = _811;
        _1132 = 0.0;
        _1133 = 0.0;
        _1134 = 0.0;
    }
    float _1144 = (cbModelParam._m0[1u].x * (_1132 - _823)) + _823;
    float _1145 = (cbModelParam._m0[1u].x * (_1133 - _824)) + _824;
    float _1146 = (cbModelParam._m0[1u].x * (_1134 - _825)) + _825;
    float _1167 = fma(_1146, cbSceneParam._m0[89u].z, fma(_1145, cbSceneParam._m0[89u].y, _1144 * cbSceneParam._m0[89u].x));
    float _1170 = fma(_1146, cbSceneParam._m0[90u].z, fma(_1145, cbSceneParam._m0[90u].y, _1144 * cbSceneParam._m0[90u].x));
    float _1173 = fma(_1146, cbSceneParam._m0[91u].z, fma(_1145, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1144));
    float _1188 = _445 * 0.5;
    float _1189 = _446 * 0.5;
    float _1190 = _447 * 0.5;
    float _1191 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_1122, _1125, _1128, _1131));
    float _1194 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_1121, _1124, _1127, _1130));
    float _1197 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_1120, _1123, _1126, _1129));
    float _1231;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1204 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_810, _814, _817, _820));
        float _1208 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_812, _815, _818, _821));
        float _1212 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_813, _816, _819, _822));
        float _1219 = dot(vec4(cbModelParam._m0[39u]), vec4(_1188, _1189, _1190, 1.0));
        _1231 = dot(vec3(isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)), isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)), isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1219) ? 0.0 : (isnan(0.0) ? _1219 : max(0.0, _1219))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1231 = 1.0;
    }
    float _1242;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1233 = dot(vec4(cbModelParam._m0[40u]), vec4(_1188, _1189, _1190, 1.0));
        _1242 = dot(vec3(isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1233) ? 0.0 : (isnan(0.0) ? _1233 : max(0.0, _1233))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1242 = 1.0;
    }
    float _1246 = (_1242 * cbModelParam._m0[1u].x) + (_1231 * (1.0 - cbModelParam._m0[1u].x));
    float _1256 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _269);
    float _1257 = isnan(_1256) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1256 : min(cbModelParam._m0[25u].z, _1256));
    float _1339;
    float _1341;
    float _1343;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1306 = fma(_509, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _501)) + cbModelParam._m0[13u].w;
        float _1310 = fma(_509, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _501)) + cbModelParam._m0[14u].w;
        float _1314 = fma(_509, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _501)) + cbModelParam._m0[15u].w;
        float _1317 = fma(_447, cbModelParam._m0[13u].z, fma(_446, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _445));
        float _1320 = fma(_447, cbModelParam._m0[14u].z, fma(_446, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _445));
        float _1323 = fma(_447, cbModelParam._m0[15u].z, fma(_446, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _445));
        float _1351;
        if (_1317 > 0.0)
        {
            _1351 = abs((1.0 - _1306) / _1317);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1317 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1306 + 1.0) / _1317);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1351 = frontier_phi_14_12_ladder;
        }
        float _1527;
        if (_1320 > 0.0)
        {
            _1527 = abs((1.0 - _1310) / _1320);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1320 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1310 + 1.0) / _1320);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1527 = frontier_phi_23_19_ladder;
        }
        float _2032;
        if (_1323 > 0.0)
        {
            _2032 = abs((1.0 - _1314) / _1323);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1323 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1314 + 1.0) / _1323);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2032 = frontier_phi_35_30_ladder;
        }
        float _2034 = isnan(_1527) ? _1351 : (isnan(_1351) ? _1527 : min(_1351, _1527));
        float _2035 = isnan(_2032) ? _2034 : (isnan(_2034) ? _2032 : min(_2034, _2032));
        float _2039 = (_2035 * _1317) + _1306;
        float _2040 = (_2035 * _1320) + _1310;
        float _2041 = (_2035 * _1323) + _1314;
        float _2042 = _2035 * 9.9999997473787516355514526367188e-05;
        float _2044 = (-1.0) - _2042;
        float _2046 = _2042 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2041 > _2046) || ((_2041 < _2044) || ((_2040 > _2046) || ((_2040 < _2044) || ((_2039 < _2044) || (_2039 > _2046))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2317 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2041, cbModelParam._m0[9u].z, fma(_2040, cbModelParam._m0[9u].y, _2039 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2041, cbModelParam._m0[10u].z, fma(_2040, cbModelParam._m0[10u].y, _2039 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2041, cbModelParam._m0[11u].z, fma(_2040, cbModelParam._m0[11u].y, _2039 * cbModelParam._m0[11u].x))), _1257);
            frontier_phi_13_35_ladder = _2317.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2317.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2317.x * cbModelParam._m0[1u].y;
        }
        _1339 = frontier_phi_13_35_ladder_2;
        _1341 = frontier_phi_13_35_ladder_1;
        _1343 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1327 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_445, _446, _447), _1257);
        _1339 = _1327.x * cbModelParam._m0[1u].y;
        _1341 = _1327.y * cbModelParam._m0[1u].y;
        _1343 = _1327.z * cbModelParam._m0[1u].y;
    }
    float _1347 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _269);
    float _1348 = isnan(_1347) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1347 : min(cbModelParam._m0[25u].w, _1347));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1405 = fma(_509, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _501)) + cbModelParam._m0[21u].w;
        float _1409 = fma(_509, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _501)) + cbModelParam._m0[22u].w;
        float _1413 = fma(_509, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _501)) + cbModelParam._m0[23u].w;
        float _1416 = fma(_447, cbModelParam._m0[21u].z, fma(_446, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _445));
        float _1419 = fma(_447, cbModelParam._m0[22u].z, fma(_446, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _445));
        float _1422 = fma(_447, cbModelParam._m0[23u].z, fma(_446, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _445));
        float _1532;
        if (_1416 > 0.0)
        {
            _1532 = abs((1.0 - _1405) / _1416);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1405 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1532 = frontier_phi_25_21_ladder;
        }
        float _2059;
        if (_1419 > 0.0)
        {
            _2059 = abs((1.0 - _1409) / _1419);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1409 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2059 = frontier_phi_37_32_ladder;
        }
        float _2439;
        if (_1422 > 0.0)
        {
            _2439 = abs((1.0 - _1413) / _1422);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1413 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2439 = frontier_phi_49_44_ladder;
        }
        float _2441 = isnan(_2059) ? _1532 : (isnan(_1532) ? _2059 : min(_1532, _2059));
        float _2442 = isnan(_2439) ? _2441 : (isnan(_2441) ? _2439 : min(_2441, _2439));
        float _2446 = (_2442 * _1416) + _1405;
        float _2447 = (_2442 * _1419) + _1409;
        float _2448 = (_2442 * _1422) + _1413;
        float _2449 = _2442 * 9.9999997473787516355514526367188e-05;
        float _2450 = (-1.0) - _2449;
        float _2452 = _2449 + 1.0;
        float frontier_phi_22_49_ladder;
        float frontier_phi_22_49_ladder_1;
        float frontier_phi_22_49_ladder_2;
        if ((_2448 > _2452) || ((_2448 < _2450) || ((_2447 > _2452) || ((_2447 < _2450) || ((_2446 < _2450) || (_2446 > _2452))))))
        {
            frontier_phi_22_49_ladder = 0.0;
            frontier_phi_22_49_ladder_1 = 0.0;
            frontier_phi_22_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2448, cbModelParam._m0[17u].z, fma(_2447, cbModelParam._m0[17u].y, _2446 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2448, cbModelParam._m0[18u].z, fma(_2447, cbModelParam._m0[18u].y, _2446 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2448, cbModelParam._m0[19u].z, fma(_2447, cbModelParam._m0[19u].y, _2446 * cbModelParam._m0[19u].x))), _1348);
            frontier_phi_22_49_ladder = _2569.z * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_1 = _2569.y * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_2 = _2569.x * cbModelParam._m0[1u].z;
        }
        _1441 = frontier_phi_22_49_ladder_2;
        _1443 = frontier_phi_22_49_ladder_1;
        _1445 = frontier_phi_22_49_ladder;
    }
    else
    {
        vec4 _1425 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_445, _446, _447), _1348);
        _1441 = _1425.x * cbModelParam._m0[1u].z;
        _1443 = _1425.y * cbModelParam._m0[1u].z;
        _1445 = _1425.z * cbModelParam._m0[1u].z;
    }
    float _1458 = (((_472 * _422) + _473) * _437) * ((cbModelParam._m0[1u].w * (_1441 - _1339)) + _1339);
    float _1460 = (((_472 * _424) + _473) * _437) * ((cbModelParam._m0[1u].w * (_1443 - _1341)) + _1341);
    float _1462 = (((_472 * _425) + _473) * _437) * ((cbModelParam._m0[1u].w * (_1445 - _1343)) + _1343);
    float _1465 = fma(_1462, cbSceneParam._m0[89u].z, fma(_1460, cbSceneParam._m0[89u].y, _1458 * cbSceneParam._m0[89u].x));
    float _1468 = fma(_1462, cbSceneParam._m0[90u].z, fma(_1460, cbSceneParam._m0[90u].y, _1458 * cbSceneParam._m0[90u].x));
    float _1471 = fma(_1462, cbSceneParam._m0[91u].z, fma(_1460, cbSceneParam._m0[91u].y, _1458 * cbSceneParam._m0[91u].x));
    float _1506 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1510 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1514 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1518 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1519 = _1506 / _1518;
    float _1520 = _1510 / _1518;
    float _1521 = _1514 / _1518;
    float _1668;
    float _1669;
    float _1670;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1548 = ((uint(_1521 > cbSceneParam._m0[59u].y) + uint(_1521 > cbSceneParam._m0[59u].x)) + uint(_1521 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1549 = _1548 + 43u;
        uint _1557 = _1548 + 44u;
        uint _1565 = _1548 + 45u;
        uint _1573 = _1548 + 46u;
        float _1584 = fma(_1518, cbSceneParam._m0[_1549].w, fma(_1514, cbSceneParam._m0[_1549].z, fma(_1510, cbSceneParam._m0[_1549].y, _1506 * cbSceneParam._m0[_1549].x)));
        float _1588 = fma(_1518, cbSceneParam._m0[_1557].w, fma(_1514, cbSceneParam._m0[_1557].z, fma(_1510, cbSceneParam._m0[_1557].y, _1506 * cbSceneParam._m0[_1557].x)));
        float _1596 = fma(_1518, cbSceneParam._m0[_1573].w, fma(_1514, cbSceneParam._m0[_1573].z, fma(_1510, cbSceneParam._m0[_1573].y, _1506 * cbSceneParam._m0[_1573].x)));
        float _1601 = cbSceneParam._m0[33u].z * _1596;
        float _1603 = cbSceneParam._m0[33u].w * _1596;
        float _1606 = fma(_1518, cbSceneParam._m0[_1565].w, fma(_1514, cbSceneParam._m0[_1565].z, fma(_1510, cbSceneParam._m0[_1565].y, _1506 * cbSceneParam._m0[_1565].x))) / _1596;
        float _1654 = (cbSceneParam._m0[33u].x - sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521))) * cbSceneParam._m0[33u].y;
        float _3734 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1661 = (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1601 + _1584) / _1596, (_1603 + _1588) / _1596), _1606), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1603 + _1584) / _1596, (_1588 - _1601) / _1596), _1606), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1584 - _1601) / _1596, (_1588 - _1603) / _1596), _1606), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1584 - _1603) / _1596, (_1601 + _1588) / _1596), _1606), 0.0)).x), vec4(0.25)));
        _1668 = 1.0 - (_1661 * cbSceneParam._m0[34u].x);
        _1669 = 1.0 - (_1661 * cbSceneParam._m0[34u].y);
        _1670 = 1.0 - (_1661 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1668 = 1.0;
        _1669 = 1.0;
        _1670 = 1.0;
    }
    float _1734;
    float _1736;
    float _1738;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1722 = fma(_1518, cbSceneParam._m0[63u].w, fma(_1514, cbSceneParam._m0[63u].z, fma(_1510, cbSceneParam._m0[63u].y, _1506 * cbSceneParam._m0[63u].x)));
        float _1723 = fma(_1518, cbSceneParam._m0[60u].w, fma(_1514, cbSceneParam._m0[60u].z, fma(_1510, cbSceneParam._m0[60u].y, _1506 * cbSceneParam._m0[60u].x))) / _1722;
        float _1724 = fma(_1518, cbSceneParam._m0[61u].w, fma(_1514, cbSceneParam._m0[61u].z, fma(_1510, cbSceneParam._m0[61u].y, _1506 * cbSceneParam._m0[61u].x))) / _1722;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1723 >= cbSceneParam._m0[64u].x) && (_1724 >= cbSceneParam._m0[64u].y)) && (_1723 <= cbSceneParam._m0[64u].z)) && (_1724 <= cbSceneParam._m0[64u].w))
        {
            float _2072 = fma(_1518, cbSceneParam._m0[62u].w, fma(_1514, cbSceneParam._m0[62u].z, fma(_1510, cbSceneParam._m0[62u].y, _1506 * cbSceneParam._m0[62u].x))) / _1722;
            float _2076 = isnan(cbSceneParam._m0[41u].w) ? _2072 : (isnan(_2072) ? cbSceneParam._m0[41u].w : max(_2072, cbSceneParam._m0[41u].w));
            float _2119 = (cbSceneParam._m0[33u].x - sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521))) * cbSceneParam._m0[33u].y;
            float _3750 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
            float _2126 = (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1723, cbSceneParam._m0[33u].w + _1724), _2076), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1723, _1724 - cbSceneParam._m0[33u].z), _2076), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1723 - cbSceneParam._m0[33u].z, _1724 - cbSceneParam._m0[33u].w), _2076), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1723 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1724), _2076), 0.0)).x), vec4(0.25)));
            float _2130 = 1.0 - (_2126 * cbSceneParam._m0[34u].x);
            float _2131 = 1.0 - (_2126 * cbSceneParam._m0[34u].y);
            float _2132 = 1.0 - (_2126 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2132) ? _1670 : (isnan(_1670) ? _2132 : min(_1670, _2132));
            frontier_phi_34_33_ladder_1 = isnan(_2131) ? _1669 : (isnan(_1669) ? _2131 : min(_1669, _2131));
            frontier_phi_34_33_ladder_2 = isnan(_2130) ? _1668 : (isnan(_1668) ? _2130 : min(_1668, _2130));
        }
        else
        {
            frontier_phi_34_33_ladder = _1670;
            frontier_phi_34_33_ladder_1 = _1669;
            frontier_phi_34_33_ladder_2 = _1668;
        }
        _1734 = frontier_phi_34_33_ladder_2;
        _1736 = frontier_phi_34_33_ladder_1;
        _1738 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1734 = _1668;
        _1736 = _1669;
        _1738 = _1670;
    }
    float _1778 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _501), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _509))).x));
    float _3776 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1783 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _501), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _509))).x));
    float _3787 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1785 = (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)));
    float _1786 = _1785 * _1734;
    float _1787 = _1785 * _1736;
    float _1788 = _1785 * _1738;
    uvec4 _1792 = floatBitsToUint(cbInstanceData._m0[_396 + 5u]);
    uint _1794 = _1792.x * 14u;
    uint _1795 = _1794 + 13u;
    float _1800 = _437 + (-1.0);
    float _1803 = (cbLight._m0[_1795].x * _1800) + 1.0;
    float _1804 = (cbLight._m0[_1795].y * _1800) + 1.0;
    uint _1805 = _1794 + 5u;
    float _1811 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
    uint _1815 = _1794 + 4u;
    float _1825 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
    uint _1829 = _1794 | 1u;
    float _1840 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_265, _266, _267));
    float _1843 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_265, _266, _267));
    float _3808 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _3819 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1848 = (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.3183098733425140380859375;
    float _1850 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * 0.3183098733425140380859375;
    float _1857 = ((cbLight._m0[_1805].x * _1811) * _1850) + (((cbLight._m0[_1815].x * _1786) * _1825) * _1848);
    float _1858 = ((_1811 * cbLight._m0[_1805].y) * _1850) + (((cbLight._m0[_1815].y * _1787) * _1825) * _1848);
    float _1859 = ((_1811 * cbLight._m0[_1805].z) * _1850) + (((cbLight._m0[_1815].z * _1788) * _1825) * _1848);
    uint _1861 = _1794 + 8u;
    float _1874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1794].w)) * _269) * 0.949999988079071044921875);
    float _1875 = _1874 * _1874;
    float _1876 = cbLight._m0[_1794].x + _347;
    float _1877 = cbLight._m0[_1794].y + _348;
    float _1878 = cbLight._m0[_1794].z + _349;
    float _1882 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
    float _1883 = _1882 * _1876;
    float _1884 = _1882 * _1877;
    float _1885 = _1882 * _1878;
    float _1886 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1794].xyz));
    float _3830 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _1890 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _1891 = dot(vec3(_265, _266, _267), vec3(_1883, _1884, _1885));
    float _3852 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_1883, _1884, _1885));
    float _3863 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1875 * _1875;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1911 = exp2(log2(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * 5.0);
    float _1912 = 0.959999978542327880859375 - _419;
    float _1914 = 0.959999978542327880859375 - _420;
    float _1915 = 0.959999978542327880859375 - _421;
    float _1922 = 1.0 - _1875;
    float _1933 = (0.5 / (((_1890 * ((_1889 * _1922) + _1875)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1922) + _1875) * _1889))) * _1889;
    float _3874 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1935 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    uint _1949 = _1794 + 9u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _269) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1829].x + _347;
    float _1963 = cbLight._m0[_1829].y + _348;
    float _1964 = cbLight._m0[_1829].z + _349;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1829].xyz));
    float _3885 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1976 = dot(vec3(_265, _266, _267), vec3(_1969, _1970, _1971));
    float _3896 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_1969, _1970, _1971));
    float _3907 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1984 = _1961 * _1961;
    float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
    float _1995 = exp2(log2(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * 5.0);
    float _2002 = 1.0 - _1961;
    float _2012 = (0.5 / (((_1890 * ((_1975 * _2002) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2002) + _1961) * _1975))) * _1975;
    float _3918 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2014 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
    float _2024 = (((((_1995 * _1912) + _422) * cbLight._m0[_1949].x) * _2014) * _1811) + ((((cbLight._m0[_1861].x * _1786) * ((_1911 * _1912) + _422)) * _1935) * _1825);
    float _2025 = (((((_1995 * _1914) + _424) * cbLight._m0[_1949].y) * _2014) * _1811) + ((((cbLight._m0[_1861].y * _1787) * ((_1911 * _1914) + _424)) * _1935) * _1825);
    float _2026 = (((((_1995 * _1915) + _425) * cbLight._m0[_1949].z) * _2014) * _1811) + ((((cbLight._m0[_1861].z * _1788) * ((_1911 * _1915) + _425)) * _1935) * _1825);
    float _2232;
    float _2234;
    float _2236;
    float _2238;
    float _2240;
    float _2242;
    if (_1792.y == 0u)
    {
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2173 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2172;
        float _2174 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2172;
        float _2175 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2172;
        uvec4 _2187 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2188 = _2187.x;
        uint _2199 = uint((float(_2187.y) * floor(float(uint(cbSceneParam._m0[85u].y * _356) / _2188))) + floor(float(uint(cbSceneParam._m0[85u].x * _355) / _2188)));
        float _2209 = (log2(_2175 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2210 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        uint _2213 = uint(isnan(14.0) ? _2210 : (isnan(_2210) ? 14.0 : min(_2210, 14.0)));
        uvec4 _2218 = texelFetch(g_lightClusterGridBuffer, int(((_2213 << 2u) + (_2199 << 6u)) >> 2u));
        uint _2219 = _2218.x;
        uint _2220 = _2187.z;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        if (((((1u << ((_2220 >> 4u) & 15u)) + 4294967295u) & _2219) == 0u) || ((_2220 & 240u) == 0u))
        {
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
        }
        else
        {
            float _2327;
            float _2329;
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            uint _2503 = 0u;
            uint _2512;
            bool _2513;
            for (;;)
            {
                _2512 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2503 << 2u)) >> 2u)).x;
                _2513 = _2512 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2513)
                {
                    frontier_phi_58_pred = _2500;
                    frontier_phi_58_pred_1 = _2499;
                    frontier_phi_58_pred_2 = _2498;
                    frontier_phi_58_pred_3 = _2497;
                    frontier_phi_58_pred_4 = _2501;
                    frontier_phi_58_pred_5 = _2502;
                }
                else
                {
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    uint _2648;
                    _2642 = _2497;
                    _2643 = _2498;
                    _2644 = _2499;
                    _2645 = _2500;
                    _2646 = _2501;
                    _2647 = _2502;
                    _2648 = _2512;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    for (;;)
                    {
                        uint _2652 = uint(findLSB(_2648)) + (_2503 << 5u);
                        uint _2649 = (_2648 + 4294967295u) & _2648;
                        uint _2654 = _2652 * 48u;
                        vec4 _2668 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2654)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 3u)).x));
                        uint _2674 = (_2652 * 48u) + 4u;
                        vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2674)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 3u)).x));
                        uint _2693 = (_2652 * 48u) + 8u;
                        vec3 _2704 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x));
                        float _2708 = _2668.x - _2173;
                        float _2709 = _2668.y - _2174;
                        float _2710 = _2668.z - _2175;
                        float _2711 = dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710));
                        float _2714 = inversesqrt(_2711);
                        float _2715 = _2714 * _2708;
                        float _2716 = _2714 * _2709;
                        float _2717 = _2714 * _2710;
                        float _2718 = dot(vec3(_377, _380, _383), vec3(_2715, _2716, _2717));
                        float _2723 = 1.0 - (_2711 * _2668.w);
                        float _3939 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2724 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
                        float _2725 = sqrt(_2711) * _2687.w;
                        float _2728 = 1.39999997615814208984375 / (_2725 + 1.39999997615814208984375);
                        float _2729 = _2728 * _2728;
                        float _2732 = ((1.0 - _2729) * _2718) + _2729;
                        float _2735 = _2725 * _2725;
                        float _2739 = ((isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))) * _2724) / ((_2735 * 0.699999988079071044921875) + 1.0);
                        float _2743 = (-0.0) - _2173;
                        float _2744 = (-0.0) - _2174;
                        float _2745 = (-0.0) - _2175;
                        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
                        float _2750 = _2749 * _2743;
                        float _2751 = _2749 * _2744;
                        float _2752 = _2749 * _2745;
                        float _2759 = exp2(log2(1.0 / ((_2735 * 3.5) + 5.0)) * 0.25);
                        float _2760 = 1.0 - _453;
                        float _2767 = sqrt(1.0 - ((1.0 - (_2760 * _2760)) * (1.0 - (_2759 * _2759))));
                        float _2768 = _2767 * _2767;
                        float _2769 = _2768 * _2768;
                        float _2770 = _2750 + _2715;
                        float _2771 = _2751 + _2716;
                        float _2772 = _2752 + _2717;
                        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
                        float _2780 = dot(vec3(_377, _380, _383), vec3(_2750, _2751, _2752));
                        float _3955 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2783 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
                        float _2784 = dot(vec3(_377, _380, _383), vec3(_2776 * _2770, _2776 * _2771, _2776 * _2772));
                        float _3966 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2787 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
                        float _2791 = ((_2787 * _2787) * (_2769 + (-1.0))) + 1.0;
                        float _2792 = _2728 * _2768;
                        float _2793 = _2792 * _2792;
                        float _2796 = ((1.0 - _2793) * _2718) + _2793;
                        float _3977 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2797 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                        float _2798 = 1.0 - _2768;
                        float _2808 = (0.5 / (((_2797 * ((_2783 * _2798) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2797 * _2798) + _2768) * _2783))) * _2797;
                        float _3988 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2819 = (((_2769 * 3.1415927410125732421875) * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) / ((_2791 * _2791) * ((_2735 * 2.1991131305694580078125) + 3.141590118408203125))) * _2724;
                        _2577 = (_2739 * _2687.x) + _2645;
                        _2578 = (_2739 * _2687.y) + _2646;
                        _2579 = (_2739 * _2687.z) + _2647;
                        _2574 = (_2819 * _2704.x) + _2642;
                        _2575 = (_2819 * _2704.y) + _2643;
                        _2576 = (_2819 * _2704.z) + _2644;
                        if (_2649 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2642 = _2574;
                            _2643 = _2575;
                            _2644 = _2576;
                            _2645 = _2577;
                            _2646 = _2578;
                            _2647 = _2579;
                            _2648 = _2649;
                        }
                    }
                    frontier_phi_58_pred = _2577;
                    frontier_phi_58_pred_1 = _2576;
                    frontier_phi_58_pred_2 = _2575;
                    frontier_phi_58_pred_3 = _2574;
                    frontier_phi_58_pred_4 = _2578;
                    frontier_phi_58_pred_5 = _2579;
                }
                _2333 = frontier_phi_58_pred;
                _2331 = frontier_phi_58_pred_1;
                _2329 = frontier_phi_58_pred_2;
                _2327 = frontier_phi_58_pred_3;
                _2335 = frontier_phi_58_pred_4;
                _2337 = frontier_phi_58_pred_5;
                uint _2504 = _2503 + 1u;
                if (_2504 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2497 = _2327;
                    _2498 = _2329;
                    _2499 = _2331;
                    _2500 = _2333;
                    _2501 = _2335;
                    _2502 = _2337;
                    _2503 = _2504;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
        }
        uvec4 _2340 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2341 = _2340.z;
        uint _2343 = (_2341 >> 8u) & 15u;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        if (((4294967295u << _2343) & _2219) == 0u)
        {
            _2465 = _2326;
            _2467 = _2328;
            _2469 = _2330;
            _2471 = _2332;
            _2473 = _2334;
            _2475 = _2336;
        }
        else
        {
            float _2490 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
            float _2491 = _2490 * _2173;
            float _2492 = _2490 * _2174;
            float _2493 = _2490 * _2175;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2343 < ((_2341 >> 12u) & 15u))
            {
                float _2466;
                float _2468;
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2625 = _2326;
                float _2626 = _2328;
                float _2627 = _2330;
                float _2628 = _2332;
                float _2629 = _2334;
                float _2630 = _2336;
                uint _2631 = _2343;
                uint _2640;
                bool _2641;
                for (;;)
                {
                    _2640 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2631 << 2u)) >> 2u)).x;
                    _2641 = _2640 == 0u;
                    float frontier_phi_64_pred;
                    float frontier_phi_64_pred_1;
                    float frontier_phi_64_pred_2;
                    float frontier_phi_64_pred_3;
                    float frontier_phi_64_pred_4;
                    float frontier_phi_64_pred_5;
                    if (_2641)
                    {
                        frontier_phi_64_pred = _2628;
                        frontier_phi_64_pred_1 = _2627;
                        frontier_phi_64_pred_2 = _2626;
                        frontier_phi_64_pred_3 = _2625;
                        frontier_phi_64_pred_4 = _2630;
                        frontier_phi_64_pred_5 = _2629;
                    }
                    else
                    {
                        float _2824;
                        float _2825;
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _2837 = _2625;
                        float _2838 = _2626;
                        float _2839 = _2627;
                        float _2840 = _2628;
                        float _2841 = _2629;
                        float _2842 = _2630;
                        uint _2843 = _2640;
                        uint _2844;
                        vec4 _2869;
                        float _2870;
                        vec4 _2885;
                        vec3 _2897;
                        vec4 _2913;
                        vec4 _2929;
                        float _2976;
                        bool _2977;
                        for (;;)
                        {
                            uint _2854 = ((_2631 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2843));
                            _2844 = (_2843 + 4294967295u) & _2843;
                            uint _2856 = _2854 * 40u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            _2870 = _2869.w;
                            uint _2872 = (_2854 * 40u) + 4u;
                            _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            uint _2887 = (_2854 * 40u) + 8u;
                            _2897 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x));
                            uint _2900 = (_2854 * 40u) + 16u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2916 = (_2854 * 40u) + 20u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2932 = (_2854 * 40u) + 24u;
                            vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2951 = (_2854 * 40u) + 28u;
                            vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            _2976 = fma(_2175, _2964.z, fma(_2174, _2964.y, _2964.x * _2173)) + _2964.w;
                            _2977 = !((fma(_2175, _2945.z, fma(_2174, _2945.y, _2945.x * _2173)) + _2945.w) <= 0.0);
                            float frontier_phi_70_pred;
                            float frontier_phi_70_pred_1;
                            float frontier_phi_70_pred_2;
                            float frontier_phi_70_pred_3;
                            float frontier_phi_70_pred_4;
                            float frontier_phi_70_pred_5;
                            if (_2977)
                            {
                                float _3004 = _2869.x - _2173;
                                float _3005 = _2869.y - _2174;
                                float _3006 = _2869.z - _2175;
                                float _3007 = dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006));
                                float _3010 = inversesqrt(_3007);
                                float _3011 = _3010 * _3004;
                                float _3012 = _3010 * _3005;
                                float _3013 = _3010 * _3006;
                                float _3017 = 1.0 - (_3007 / (_2870 * _2870));
                                float _3999 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3018 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                                float _3022 = sqrt(_3007) * _2885.w;
                                float _3024 = 1.39999997615814208984375 / (_3022 + 1.39999997615814208984375);
                                float _3025 = _3024 * _3024;
                                float _3028 = ((1.0 - _3025) * dot(vec3(_3011, _3012, _3013), vec3(_377, _380, _383))) + _3025;
                                float _3031 = _3022 * _3022;
                                float _3035 = (fma(_2175, _2913.z, fma(_2174, _2913.y, _2913.x * _2173)) + _2913.w) / _2976;
                                float _3036 = (fma(_2175, _2929.z, fma(_2174, _2929.y, _2929.x * _2173)) + _2929.w) / _2976;
                                float _3040 = 1.0 - dot(vec2(_3035, _3036), vec2(_3035, _3036));
                                float _4015 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3041 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                                float _3042 = _3041 * (((isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0))) * _3018) / ((_3031 * 0.699999988079071044921875) + 1.0));
                                float _3054 = exp2(log2(1.0 / ((_3031 * 3.5) + 5.0)) * 0.25);
                                float _3055 = 1.0 - _453;
                                float _3062 = sqrt(1.0 - ((1.0 - (_3055 * _3055)) * (1.0 - (_3054 * _3054))));
                                float _3063 = _3062 * _3062;
                                float _3064 = _3063 * _3063;
                                float _3065 = _3011 - _2491;
                                float _3066 = _3012 - _2492;
                                float _3067 = _3013 - _2493;
                                float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
                                float _3075 = dot(vec3(_377, _380, _383), vec3((-0.0) - _2491, (-0.0) - _2492, (-0.0) - _2493));
                                float _4026 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3078 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                                float _3079 = dot(vec3(_377, _380, _383), vec3(_3071 * _3065, _3071 * _3066, _3071 * _3067));
                                float _4037 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3082 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                                float _3086 = ((_3082 * _3082) * (_3064 + (-1.0))) + 1.0;
                                float _3087 = _3024 * _3063;
                                float _3088 = _3087 * _3087;
                                float _3094 = ((1.0 - _3088) * dot(vec3(_377, _380, _383), vec3(_3011, _3012, _3013))) + _3088;
                                float _4048 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                                float _3096 = 1.0 - _3063;
                                float _3106 = (0.5 / (((_3095 * ((_3078 * _3096) + _3063)) + 9.9999999392252902907785028219223e-09) + (((_3095 * _3096) + _3063) * _3078))) * _3095;
                                float _4059 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3116 = (_3041 * _3018) * (((_3064 * 3.1415927410125732421875) * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) / ((_3086 * _3086) * ((_3031 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_70_pred = _3042 * _2885.x;
                                frontier_phi_70_pred_1 = _3116 * _2897.z;
                                frontier_phi_70_pred_2 = _3116 * _2897.y;
                                frontier_phi_70_pred_3 = _3116 * _2897.x;
                                frontier_phi_70_pred_4 = _3042 * _2885.z;
                                frontier_phi_70_pred_5 = _3042 * _2885.y;
                            }
                            else
                            {
                                frontier_phi_70_pred = 0.0;
                                frontier_phi_70_pred_1 = 0.0;
                                frontier_phi_70_pred_2 = 0.0;
                                frontier_phi_70_pred_3 = 0.0;
                                frontier_phi_70_pred_4 = 0.0;
                                frontier_phi_70_pred_5 = 0.0;
                            }
                            _3123 = frontier_phi_70_pred;
                            _3122 = frontier_phi_70_pred_1;
                            _3121 = frontier_phi_70_pred_2;
                            _3120 = frontier_phi_70_pred_3;
                            _3125 = frontier_phi_70_pred_4;
                            _3124 = frontier_phi_70_pred_5;
                            _2827 = _3123 + _2840;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            _2824 = _3120 + _2837;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            if (_2844 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2844;
                                continue;
                            }
                        }
                        frontier_phi_64_pred = _2827;
                        frontier_phi_64_pred_1 = _2826;
                        frontier_phi_64_pred_2 = _2825;
                        frontier_phi_64_pred_3 = _2824;
                        frontier_phi_64_pred_4 = _2829;
                        frontier_phi_64_pred_5 = _2828;
                    }
                    _2472 = frontier_phi_64_pred;
                    _2470 = frontier_phi_64_pred_1;
                    _2468 = frontier_phi_64_pred_2;
                    _2466 = frontier_phi_64_pred_3;
                    _2476 = frontier_phi_64_pred_4;
                    _2474 = frontier_phi_64_pred_5;
                    uint _2632 = _2631 + 1u;
                    if (_2632 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2625 = _2466;
                        _2626 = _2468;
                        _2627 = _2470;
                        _2628 = _2472;
                        _2629 = _2474;
                        _2630 = _2476;
                        _2631 = _2632;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _2476;
                frontier_phi_51_52_ladder_1 = _2474;
                frontier_phi_51_52_ladder_2 = _2470;
                frontier_phi_51_52_ladder_3 = _2468;
                frontier_phi_51_52_ladder_4 = _2472;
                frontier_phi_51_52_ladder_5 = _2466;
            }
            else
            {
                frontier_phi_51_52_ladder = _2336;
                frontier_phi_51_52_ladder_1 = _2334;
                frontier_phi_51_52_ladder_2 = _2330;
                frontier_phi_51_52_ladder_3 = _2328;
                frontier_phi_51_52_ladder_4 = _2332;
                frontier_phi_51_52_ladder_5 = _2326;
            }
            _2465 = frontier_phi_51_52_ladder_5;
            _2467 = frontier_phi_51_52_ladder_3;
            _2469 = frontier_phi_51_52_ladder_2;
            _2471 = frontier_phi_51_52_ladder_4;
            _2473 = frontier_phi_51_52_ladder_1;
            _2475 = frontier_phi_51_52_ladder;
        }
        float _2480 = isnan(1.0) ? _437 : (isnan(_437) ? 1.0 : min(_437, 1.0));
        _2232 = (_2480 * _2471) + _1857;
        _2234 = (_2480 * _2473) + _1858;
        _2236 = (_2480 * _2475) + _1859;
        _2238 = ((_2465 * _422) * _2480) + _2024;
        _2240 = ((_2467 * _424) * _2480) + _2025;
        _2242 = ((_2469 * _425) * _2480) + _2026;
    }
    else
    {
        _2232 = _1857;
        _2234 = _1858;
        _2236 = _1859;
        _2238 = _2024;
        _2240 = _2025;
        _2242 = _2026;
    }
    float _4075 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _4086 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _4097 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _4108 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _2267 = cbInstanceData._m0[_396 + 6u].w * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)));
    float _2272 = _355 / cbSceneParam._m0[86u].x;
    float _2273 = _356 / cbSceneParam._m0[86u].y;
    vec4 _2287 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2272, _2273, (log2((isnan(cbSceneParam._m0[77u].w) ? _289 : (isnan(_289) ? cbSceneParam._m0[77u].w : min(_289, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2289 = _2287.x;
    float _2290 = _2287.y;
    float _2291 = _2287.z;
    float _2292 = _2287.w;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    if (_289 > cbSceneParam._m0[78u].w)
    {
        float _2351 = isnan(_289) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _289 : min(cbSceneParam._m0[80u].w, _289));
        float _2352 = _2351 / _289;
        float _2363 = _2352 * _340;
        float _2364 = _341 * _2352;
        float _2365 = (-0.0) - _2364;
        float _2367 = _2352 * _342;
        float _2369 = (cbSceneParam._m0[77u].w * _2365) / _2351;
        float _2370 = _2369 + cbSceneParam._m0[79u].w;
        float _2371 = cbSceneParam._m0[79u].w - _2364;
        float _2377 = sqrt(((_2363 * _2363) + (_2364 * _2364)) + (_2367 * _2367));
        float _2380 = (1.0 - (cbSceneParam._m0[77u].w / _2351)) * _2377;
        float _2385 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2387 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2587;
        if (abs((_2365 - _2369) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2587 = ((((_2370 > 0.0) ? exp2(_2385 * _2370) : (2.0 - exp2(_2387 * _2370))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2380;
        }
        else
        {
            float _2526 = 1.0 / cbSceneParam._m0[80u].x;
            float _2527 = isnan(_2371) ? _2370 : (isnan(_2370) ? _2371 : max(_2370, _2371));
            float _2528 = isnan(_2371) ? _2370 : (isnan(_2370) ? _2371 : min(_2370, _2371));
            float _2537 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : min(_2527, 0.0));
            float _2538 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : min(_2528, 0.0));
            _2587 = ((abs(_2377 / _2365) * cbSceneParam._m0[80u].y) * ((((_2537 - _2538) * 2.0) - ((exp2(_2385 * (isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0)))) - exp2(_2385 * (isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0))))) * _2526)) - ((exp2(_2387 * _2537) - exp2(_2387 * _2538)) * _2526))) + (_2380 * cbSceneParam._m0[80u].z);
        }
        vec4 _2589 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2272, _2273, 1.0), 0.0);
        float _2598 = exp2((_2587 * (-1.44269502162933349609375)) * (1.0 - _2589.w));
        float _2599 = log2(_2598);
        float _2615 = log2(_2292);
        _2389 = (exp2(_2615 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].x)) * _2589.x) / cbSceneParam._m0[78u].x)) + _2289;
        _2391 = (exp2(_2615 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].y)) * _2589.y) / cbSceneParam._m0[78u].y)) + _2290;
        _2393 = (exp2(_2615 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].z)) * _2589.z) / cbSceneParam._m0[78u].z)) + _2291;
        _2395 = _2598 * _2292;
    }
    else
    {
        _2389 = _2289;
        _2391 = _2290;
        _2393 = _2291;
        _2395 = _2292;
    }
    float _2407 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2408 = _2407 == 3.0;
    float _2409 = log2(_2395);
    float _2416 = exp2(_2409 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2232 + ((isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))) * _437))) + ((_2238 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _1246)) * cbPerFrame._m0[3u].x));
    float _2417 = exp2(_2409 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2234 + ((isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))) * _437))) + ((_2240 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _1246)) * cbPerFrame._m0[3u].x));
    float _2418 = exp2(_2409 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2236 + ((isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0))) * _437))) + ((_2242 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _1246)) * cbPerFrame._m0[3u].x));
    float _2427 = (_2407 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2427 * (_2408 ? _2416 : (_2416 + (cbSceneParam._m0[72u].w * _2389)));
    SV_Target.y = _2427 * (_2408 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2391)));
    SV_Target.z = _2427 * (_2408 ? _2418 : (_2418 + (cbSceneParam._m0[72u].w * _2393)));
    SV_Target.w = _2267;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2267;
}


