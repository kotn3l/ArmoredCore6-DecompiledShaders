#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_GlassLow_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _852;
float _3027;
float _3028;
float _3029;
float _3030;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(M_GlassLow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = (_228.x * 2.0) + (-1.0);
    float _239 = (_228.y * 2.0) + (-1.0);
    float _240 = dot(vec2(_237, _239), vec2(_237, _239));
    float _3039 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _246 = sqrt(1.0 - (isnan(1.0) ? _3039 : (isnan(_3039) ? 1.0 : min(_3039, 1.0))));
    float _251 = ((cbMtdParam._m0[10u].y + _228.z) * 0.5) + cbMtdParam._m0[10u].x;
    float _254 = fma(_246, _192 * NORMAL.x, fma(_239, _199 * TANGENT.x, (_185 * _178) * _237));
    float _257 = fma(_246, _192 * NORMAL.y, fma(_239, _199 * TANGENT.y, (_185 * _179) * _237));
    float _260 = fma(_246, _192 * NORMAL.z, fma(_239, _199 * TANGENT.z, (_185 * _180) * _237));
    float _264 = inversesqrt(dot(vec3(_254, _257, _260), vec3(_254, _257, _260)));
    float _265 = _264 * _254;
    float _266 = _264 * _257;
    float _267 = _264 * _260;
    float _3050 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _268 = isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0));
    float _3061 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _269 = isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0));
    float _3072 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3083 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3094 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3105 = isnan(0.0) ? cbMtdParam._m0[10u].w : (isnan(cbMtdParam._m0[10u].w) ? 0.0 : max(cbMtdParam._m0[10u].w, 0.0));
    float _273 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
    float _289 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _330 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _340 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _330);
    float _341 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _330);
    float _342 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _330);
    float _346 = inversesqrt(dot(vec3(_340, _341, _342), vec3(_340, _341, _342)));
    float _347 = _340 * _346;
    float _348 = _341 * _346;
    float _349 = _342 * _346;
    vec4 _354 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _356 = _354.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _532 = sqrt(((_340 * _340) + (_341 * _341)) + (_342 * _342));
        float _538 = (cbMatDynParam._m0[5u].x * _532) + cbMatDynParam._m0[5u].y;
        float _3116 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
        float _539 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _543 = (cbMatDynParam._m0[5u].z * _532) + cbMatDynParam._m0[5u].w;
        float _3127 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0))) - _539)) + _539) < ((_356 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _368 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _369 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _389 = fma(_267, cbSceneParam._m0[5u].z, fma(_266, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _265));
    float _392 = fma(_267, cbSceneParam._m0[6u].z, fma(_266, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _265));
    float _395 = fma(_267, cbSceneParam._m0[7u].z, fma(_266, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _265));
    uint _408 = uint(roundEven(NORMAL.w)) * 13u;
    uint _410 = _408 + 9u;
    uint _411 = _410 + uint(cbMatDynParam._m0[0u].w);
    float _417 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0)))) * cbInstanceData._m0[_411].x;
    float _418 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0)))) * cbInstanceData._m0[_411].y;
    float _419 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0)))) * cbInstanceData._m0[_411].z;
    float _3138 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _420 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
    float _3149 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
    float _3160 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _422 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
    float _423 = 1.0 - _273;
    float _424 = _420 * _423;
    float _425 = _421 * _423;
    float _426 = _422 * _423;
    float _431 = (_420 + (-0.039999999105930328369140625)) * _273;
    float _432 = (_421 + (-0.039999999105930328369140625)) * _273;
    float _433 = (_422 + (-0.039999999105930328369140625)) * _273;
    float _434 = _431 + 0.039999999105930328369140625;
    float _436 = _432 + 0.039999999105930328369140625;
    float _437 = _433 + 0.039999999105930328369140625;
    vec4 _446 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _368, cbSceneParam._m0[86u].y * _369));
    float _449 = _446.x * TEXCOORD.z;
    float _450 = dot(vec3(_265, _266, _267), vec3(_347, _348, _349));
    float _453 = _450 * 2.0;
    float _457 = (_453 * _265) - _347;
    float _458 = (_453 * _266) - _348;
    float _459 = (_453 * _267) - _349;
    float _463 = abs(dot(vec3(_347, _348, _349), vec3(_265, _266, _267)));
    float _3171 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _465 = sqrt(_269);
    float _478 = exp2((_465 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_465 * 3.0));
    float _484 = (1.0 - _478) * ((_465 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _485 = _478 * _465;
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _851;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _577 = fma(_521, cbModelParam._m0[26u].z, fma(_517, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _513));
        float _581 = fma(_521, cbModelParam._m0[27u].z, fma(_517, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _513));
        float _585 = fma(_521, cbModelParam._m0[28u].z, fma(_517, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _513));
        float _609 = _513 + _265;
        float _610 = _517 + _266;
        float _611 = _521 + _267;
        float _621 = fma(_611, cbModelParam._m0[26u].z, fma(_610, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _609)) - _577;
        float _622 = fma(_611, cbModelParam._m0[27u].z, fma(_610, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _609)) - _581;
        float _623 = fma(_611, cbModelParam._m0[28u].z, fma(_610, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _609)) - _585;
        float _627 = inversesqrt(dot(vec3(_621, _622, _623), vec3(_621, _622, _623)));
        float _640 = ((_627 * _621) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_577 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _641 = ((_627 * _622) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_581 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_627 * _623) / cbModelParam._m0[34u].z) + ((((((_585 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        float _679 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_645.x + (-0.5));
        float _681 = _679 * (_645.y + (-0.5));
        float _682 = _679 * (_645.z + (-0.5));
        float _689 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_652.x + (-0.5));
        float _691 = _689 * (_652.y + (-0.5));
        float _692 = _689 * (_652.z + (-0.5));
        float _699 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_659.x + (-0.5));
        float _701 = _699 * (_659.y + (-0.5));
        float _702 = _699 * (_659.z + (-0.5));
        float _709 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_666.x + (-0.5));
        float _711 = _709 * (_666.y + (-0.5));
        float _712 = _709 * (_666.z + (-0.5));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = _680 * 0.5;
        float _717 = _690 * 0.5;
        float _718 = _700 * 0.5;
        float _719 = dot(vec3(_716, _717, _718), vec3(_716, _717, _718));
        float _724 = (_719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_719);
        float _733 = (dot(vec3(_265, _266, _267), vec3(_724 * _716, _724 * _717, _724 * _718)) + 1.0) * 0.5;
        float _3197 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _743 = sqrt(((_717 * _717) + (_716 * _716)) + (_718 * _718)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3208 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
        float _745 = _744 * 2.0;
        float _749 = (1.0 - _744) / (_744 + 1.0);
        float _3219 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
        float _759 = ((((1.0 - _750) * (_745 + 2.0)) * exp2(log2(isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0))) * (_745 + 1.0))) + _750) * _713;
        float _760 = _681 * 0.5;
        float _761 = _691 * 0.5;
        float _762 = _701 * 0.5;
        float _763 = dot(vec3(_760, _761, _762), vec3(_760, _761, _762));
        float _768 = (_763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_763);
        float _776 = (dot(vec3(_265, _266, _267), vec3(_768 * _760, _768 * _761, _768 * _762)) + 1.0) * 0.5;
        float _3230 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _785 = sqrt(((_761 * _761) + (_760 * _760)) + (_762 * _762)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3241 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
        float _787 = _786 * 2.0;
        float _791 = (1.0 - _786) / (_786 + 1.0);
        float _3252 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
        float _801 = ((((1.0 - _792) * (_787 + 2.0)) * exp2(log2(isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0))) * (_787 + 1.0))) + _792) * _714;
        float _802 = _682 * 0.5;
        float _803 = _692 * 0.5;
        float _804 = _702 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _818 = (dot(vec3(_265, _266, _267), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3263 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _827 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3274 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3285 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0))) * (_829 + 1.0))) + _834) * _715;
        _851 = _682;
        _853 = _681;
        _854 = _680;
        _855 = _692;
        _856 = _691;
        _857 = _690;
        _858 = _702;
        _859 = _701;
        _860 = _700;
        _861 = _715;
        _862 = _714;
        _863 = _713;
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0)));
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0)));
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
    }
    else
    {
        _851 = _852;
        _853 = _852;
        _854 = _852;
        _855 = _852;
        _856 = _852;
        _857 = _852;
        _858 = _852;
        _859 = _852;
        _860 = _852;
        _861 = _852;
        _862 = _852;
        _863 = _852;
        _864 = 0.0;
        _865 = 0.0;
        _866 = 0.0;
    }
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _895 = fma(_521, cbModelParam._m0[30u].z, fma(_517, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _513));
        float _899 = fma(_521, cbModelParam._m0[31u].z, fma(_517, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _513));
        float _903 = fma(_521, cbModelParam._m0[32u].z, fma(_517, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _513));
        float _926 = _513 + _265;
        float _927 = _517 + _266;
        float _928 = _521 + _267;
        float _938 = fma(_928, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926)) - _895;
        float _939 = fma(_928, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926)) - _899;
        float _940 = fma(_928, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926)) - _903;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_895 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_899 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[35u].z) + ((((((_903 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _994 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_961.x + (-0.5));
        float _996 = _994 * (_961.y + (-0.5));
        float _997 = _994 * (_961.z + (-0.5));
        float _1004 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_968.x + (-0.5));
        float _1006 = _1004 * (_968.y + (-0.5));
        float _1007 = _1004 * (_968.z + (-0.5));
        float _1014 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_975.x + (-0.5));
        float _1016 = _1014 * (_975.y + (-0.5));
        float _1017 = _1014 * (_975.z + (-0.5));
        float _1024 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_982.x + (-0.5));
        float _1026 = _1024 * (_982.y + (-0.5));
        float _1027 = _1024 * (_982.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_265, _266, _267), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3326 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3337 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3348 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))) * (_1058 + 1.0))) + _1063) * _1028;
        float _1073 = _996 * 0.5;
        float _1074 = _1006 * 0.5;
        float _1075 = _1016 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_265, _266, _267), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3359 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3370 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3381 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * (_1100 + 1.0))) + _1105) * _1029;
        float _1115 = _997 * 0.5;
        float _1116 = _1007 * 0.5;
        float _1117 = _1017 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_265, _266, _267), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3392 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3403 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3414 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (_1142 + 1.0))) + _1147) * _1030;
        _1164 = _997;
        _1165 = _996;
        _1166 = _995;
        _1167 = _1007;
        _1168 = _1006;
        _1169 = _1005;
        _1170 = _1017;
        _1171 = _1016;
        _1172 = _1015;
        _1173 = _1030;
        _1174 = _1029;
        _1175 = _1028;
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _852;
        _1165 = _852;
        _1166 = _852;
        _1167 = _852;
        _1168 = _852;
        _1169 = _852;
        _1170 = _852;
        _1171 = _852;
        _1172 = _852;
        _1173 = _852;
        _1174 = _852;
        _1175 = _852;
        _1176 = 0.0;
        _1177 = 0.0;
        _1178 = 0.0;
    }
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _864)) + _864;
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _865)) + _865;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _866)) + _866;
    float _1211 = fma(_1190, cbSceneParam._m0[89u].z, fma(_1189, cbSceneParam._m0[89u].y, _1188 * cbSceneParam._m0[89u].x));
    float _1214 = fma(_1190, cbSceneParam._m0[90u].z, fma(_1189, cbSceneParam._m0[90u].y, _1188 * cbSceneParam._m0[90u].x));
    float _1217 = fma(_1190, cbSceneParam._m0[91u].z, fma(_1189, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1188));
    float _1232 = _457 * 0.5;
    float _1233 = _458 * 0.5;
    float _1234 = _459 * 0.5;
    float _1235 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1238 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1241 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1275;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1248 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_851, _855, _858, _861));
        float _1252 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_853, _856, _859, _862));
        float _1256 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_854, _857, _860, _863));
        float _1263 = dot(vec4(cbModelParam._m0[39u]), vec4(_1232, _1233, _1234, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1263) ? 0.0 : (isnan(0.0) ? _1263 : max(0.0, _1263))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1286;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1277 = dot(vec4(cbModelParam._m0[40u]), vec4(_1232, _1233, _1234, 1.0));
        _1286 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1286 = 1.0;
    }
    float _1290 = (_1286 * cbModelParam._m0[1u].x) + (_1275 * (1.0 - cbModelParam._m0[1u].x));
    float _1300 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _269);
    float _1301 = isnan(_1300) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1300 : min(cbModelParam._m0[25u].z, _1300));
    float _1383;
    float _1385;
    float _1387;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1350 = fma(_521, cbModelParam._m0[13u].z, fma(_517, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _513)) + cbModelParam._m0[13u].w;
        float _1354 = fma(_521, cbModelParam._m0[14u].z, fma(_517, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _513)) + cbModelParam._m0[14u].w;
        float _1358 = fma(_521, cbModelParam._m0[15u].z, fma(_517, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _513)) + cbModelParam._m0[15u].w;
        float _1361 = fma(_459, cbModelParam._m0[13u].z, fma(_458, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _457));
        float _1364 = fma(_459, cbModelParam._m0[14u].z, fma(_458, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _457));
        float _1367 = fma(_459, cbModelParam._m0[15u].z, fma(_458, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _457));
        float _1395;
        if (_1361 > 0.0)
        {
            _1395 = abs((1.0 - _1350) / _1361);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1350 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1395 = frontier_phi_17_15_ladder;
        }
        float _1811;
        if (_1364 > 0.0)
        {
            _1811 = abs((1.0 - _1354) / _1364);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1354 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1811 = frontier_phi_26_22_ladder;
        }
        float _2120;
        if (_1367 > 0.0)
        {
            _2120 = abs((1.0 - _1358) / _1367);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_1358 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _2120 = frontier_phi_40_33_ladder;
        }
        float _2122 = isnan(_1811) ? _1395 : (isnan(_1395) ? _1811 : min(_1395, _1811));
        float _2123 = isnan(_2120) ? _2122 : (isnan(_2122) ? _2120 : min(_2122, _2120));
        float _2127 = (_2123 * _1361) + _1350;
        float _2128 = (_2123 * _1364) + _1354;
        float _2129 = (_2123 * _1367) + _1358;
        float _2130 = _2123 * 9.9999997473787516355514526367188e-05;
        float _2131 = (-1.0) - _2130;
        float _2133 = _2130 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_2129 > _2133) || ((_2129 < _2131) || ((_2128 > _2133) || ((_2128 < _2131) || ((_2127 < _2131) || (_2127 > _2133))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2271 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2129, cbModelParam._m0[9u].z, fma(_2128, cbModelParam._m0[9u].y, _2127 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2129, cbModelParam._m0[10u].z, fma(_2128, cbModelParam._m0[10u].y, _2127 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2129, cbModelParam._m0[11u].z, fma(_2128, cbModelParam._m0[11u].y, _2127 * cbModelParam._m0[11u].x))), _1301);
            frontier_phi_16_40_ladder = _2271.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _2271.y * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _2271.x * cbModelParam._m0[1u].y;
        }
        _1383 = frontier_phi_16_40_ladder_2;
        _1385 = frontier_phi_16_40_ladder_1;
        _1387 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _1371 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_457, _458, _459), _1301);
        _1383 = _1371.x * cbModelParam._m0[1u].y;
        _1385 = _1371.y * cbModelParam._m0[1u].y;
        _1387 = _1371.z * cbModelParam._m0[1u].y;
    }
    float _1391 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _269);
    float _1392 = isnan(_1391) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1391 : min(cbModelParam._m0[25u].w, _1391));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1449 = fma(_521, cbModelParam._m0[21u].z, fma(_517, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _513)) + cbModelParam._m0[21u].w;
        float _1453 = fma(_521, cbModelParam._m0[22u].z, fma(_517, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _513)) + cbModelParam._m0[22u].w;
        float _1457 = fma(_521, cbModelParam._m0[23u].z, fma(_517, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _513)) + cbModelParam._m0[23u].w;
        float _1460 = fma(_459, cbModelParam._m0[21u].z, fma(_458, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _457));
        float _1463 = fma(_459, cbModelParam._m0[22u].z, fma(_458, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _457));
        float _1466 = fma(_459, cbModelParam._m0[23u].z, fma(_458, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _457));
        float _1816;
        if (_1460 > 0.0)
        {
            _1816 = abs((1.0 - _1449) / _1460);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1449 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1816 = frontier_phi_28_24_ladder;
        }
        float _2146;
        if (_1463 > 0.0)
        {
            _2146 = abs((1.0 - _1453) / _1463);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1453 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2146 = frontier_phi_42_35_ladder;
        }
        float _2336;
        if (_1466 > 0.0)
        {
            _2336 = abs((1.0 - _1457) / _1466);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_1457 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _2336 = frontier_phi_60_53_ladder;
        }
        float _2338 = isnan(_2146) ? _1816 : (isnan(_1816) ? _2146 : min(_1816, _2146));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1460) + _1449;
        float _2344 = (_2339 * _1463) + _1453;
        float _2345 = (_2339 * _1466) + _1457;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2346;
        float _2349 = _2346 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_2345 > _2349) || ((_2345 < _2347) || ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 < _2347) || (_2343 > _2349))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2345, cbModelParam._m0[17u].z, fma(_2344, cbModelParam._m0[17u].y, _2343 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2345, cbModelParam._m0[18u].z, fma(_2344, cbModelParam._m0[18u].y, _2343 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2345, cbModelParam._m0[19u].z, fma(_2344, cbModelParam._m0[19u].y, _2343 * cbModelParam._m0[19u].x))), _1392);
            frontier_phi_25_60_ladder = _2587.x * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _2587.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _2587.y * cbModelParam._m0[1u].z;
        }
        _1485 = frontier_phi_25_60_ladder;
        _1487 = frontier_phi_25_60_ladder_2;
        _1489 = frontier_phi_25_60_ladder_1;
    }
    else
    {
        vec4 _1469 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_457, _458, _459), _1392);
        _1485 = _1469.x * cbModelParam._m0[1u].z;
        _1487 = _1469.y * cbModelParam._m0[1u].z;
        _1489 = _1469.z * cbModelParam._m0[1u].z;
    }
    float _1502 = (((_484 * _434) + _485) * _449) * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1504 = (((_484 * _436) + _485) * _449) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1506 = (((_484 * _437) + _485) * _449) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1509 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, _1502 * cbSceneParam._m0[91u].x));
    float _1560 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _513), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _521))).x));
    float _3540 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _1565 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _513), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _521))).x));
    float _3551 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _1567 = (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)));
    uvec4 _1571 = floatBitsToUint(cbInstanceData._m0[_408 + 5u]);
    uint _1573 = _1571.x * 14u;
    uint _1574 = _1573 + 13u;
    float _1579 = _449 + (-1.0);
    float _1582 = (cbLight._m0[_1574].x * _1579) + 1.0;
    float _1583 = (cbLight._m0[_1574].y * _1579) + 1.0;
    uint _1584 = _1573 + 5u;
    float _1590 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
    uint _1594 = _1573 + 4u;
    float _1604 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
    uint _1608 = _1573 | 1u;
    float _1619 = dot(vec3(cbLight._m0[_1573].xyz), vec3(_265, _266, _267));
    float _1622 = dot(vec3(cbLight._m0[_1608].xyz), vec3(_265, _266, _267));
    float _3572 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _3583 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _1627 = (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * 0.3183098733425140380859375;
    float _1629 = (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 0.3183098733425140380859375;
    float _1636 = ((cbLight._m0[_1584].x * _1590) * _1629) + (((cbLight._m0[_1594].x * _1567) * _1604) * _1627);
    float _1637 = ((_1590 * cbLight._m0[_1584].y) * _1629) + (((cbLight._m0[_1594].y * _1567) * _1604) * _1627);
    float _1638 = ((_1590 * cbLight._m0[_1584].z) * _1629) + (((cbLight._m0[_1594].z * _1567) * _1604) * _1627);
    uint _1640 = _1573 + 8u;
    float _1653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1573].w)) * _269) * 0.949999988079071044921875);
    float _1654 = _1653 * _1653;
    float _1655 = cbLight._m0[_1573].x + _347;
    float _1656 = cbLight._m0[_1573].y + _348;
    float _1657 = cbLight._m0[_1573].z + _349;
    float _1661 = inversesqrt(dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657)));
    float _1662 = _1661 * _1655;
    float _1663 = _1661 * _1656;
    float _1664 = _1661 * _1657;
    float _1665 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1573].xyz));
    float _3594 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1668 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _1669 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _1670 = dot(vec3(_265, _266, _267), vec3(_1662, _1663, _1664));
    float _3616 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1673 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _1674 = dot(vec3(cbLight._m0[_1573].xyz), vec3(_1662, _1663, _1664));
    float _3627 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1678 = _1654 * _1654;
    float _1682 = ((_1673 * _1673) * (_1678 + (-1.0))) + 1.0;
    float _1690 = exp2(log2(1.0 - (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * 5.0);
    float _1691 = 0.959999978542327880859375 - _431;
    float _1693 = 0.959999978542327880859375 - _432;
    float _1694 = 0.959999978542327880859375 - _433;
    float _1701 = 1.0 - _1654;
    float _1712 = (0.5 / (((_1669 * ((_1668 * _1701) + _1654)) + 9.9999999392252902907785028219223e-09) + (((_1669 * _1701) + _1654) * _1668))) * _1668;
    float _3638 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1714 = (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1678 / ((_1682 * _1682) * 3.141590118408203125));
    uint _1728 = _1573 + 9u;
    float _1739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1608].w)) * _269) * 0.949999988079071044921875);
    float _1740 = _1739 * _1739;
    float _1741 = cbLight._m0[_1608].x + _347;
    float _1742 = cbLight._m0[_1608].y + _348;
    float _1743 = cbLight._m0[_1608].z + _349;
    float _1747 = inversesqrt(dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743)));
    float _1748 = _1747 * _1741;
    float _1749 = _1747 * _1742;
    float _1750 = _1747 * _1743;
    float _1751 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1608].xyz));
    float _3649 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1754 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _1755 = dot(vec3(_265, _266, _267), vec3(_1748, _1749, _1750));
    float _3660 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1758 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _1759 = dot(vec3(cbLight._m0[_1608].xyz), vec3(_1748, _1749, _1750));
    float _3671 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1763 = _1740 * _1740;
    float _1767 = ((_1758 * _1758) * (_1763 + (-1.0))) + 1.0;
    float _1774 = exp2(log2(1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) * 5.0);
    float _1781 = 1.0 - _1740;
    float _1791 = (0.5 / (((_1669 * ((_1754 * _1781) + _1740)) + 9.9999999392252902907785028219223e-09) + (((_1669 * _1781) + _1740) * _1754))) * _1754;
    float _3682 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1793 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1763 / ((_1767 * _1767) * 3.141590118408203125));
    float _1803 = (((((_1774 * _1691) + _434) * cbLight._m0[_1728].x) * _1793) * _1590) + ((((cbLight._m0[_1640].x * _1567) * ((_1690 * _1691) + _434)) * _1714) * _1604);
    float _1804 = (((((_1774 * _1693) + _436) * cbLight._m0[_1728].y) * _1793) * _1590) + ((((cbLight._m0[_1640].y * _1567) * ((_1690 * _1693) + _436)) * _1714) * _1604);
    float _1805 = (((((_1774 * _1694) + _437) * cbLight._m0[_1728].z) * _1793) * _1590) + ((((cbLight._m0[_1640].z * _1567) * ((_1690 * _1694) + _437)) * _1714) * _1604);
    float _1921;
    float _1923;
    float _1925;
    float _1927;
    float _1929;
    float _1931;
    if (_1571.y == 0u)
    {
        float _1861 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1862 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1861;
        float _1863 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1861;
        float _1864 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1861;
        uvec4 _1876 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1877 = _1876.x;
        uint _1888 = uint((float(_1876.y) * floor(float(uint(cbSceneParam._m0[85u].y * _369) / _1877))) + floor(float(uint(cbSceneParam._m0[85u].x * _368) / _1877)));
        float _1898 = (log2(_1864 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1899 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        uint _1902 = uint(isnan(14.0) ? _1899 : (isnan(_1899) ? 14.0 : min(_1899, 14.0)));
        uvec4 _1907 = texelFetch(g_lightClusterGridBuffer, int(((_1902 << 2u) + (_1888 << 6u)) >> 2u));
        uint _1908 = _1907.x;
        uint _1909 = _1876.z;
        float _1998;
        float _2000;
        float _2002;
        float _2004;
        float _2006;
        float _2008;
        if (((((1u << ((_1909 >> 4u) & 15u)) + 4294967295u) & _1908) == 0u) || ((_1909 & 240u) == 0u))
        {
            _1998 = 0.0;
            _2000 = 0.0;
            _2002 = 0.0;
            _2004 = 0.0;
            _2006 = 0.0;
            _2008 = 0.0;
        }
        else
        {
            float _1999;
            float _2001;
            float _2003;
            float _2005;
            float _2007;
            float _2009;
            float _2183 = 0.0;
            float _2184 = 0.0;
            float _2185 = 0.0;
            float _2186 = 0.0;
            float _2187 = 0.0;
            float _2188 = 0.0;
            uint _2189 = 0u;
            uint _2198;
            bool _2199;
            for (;;)
            {
                _2198 = texelFetch(g_lightClassification, int((((_1902 << 5u) + (_1888 << 9u)) + (_2189 << 2u)) >> 2u)).x;
                _2199 = _2198 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2199)
                {
                    frontier_phi_55_pred = _2187;
                    frontier_phi_55_pred_1 = _2188;
                    frontier_phi_55_pred_2 = _2186;
                    frontier_phi_55_pred_3 = _2185;
                    frontier_phi_55_pred_4 = _2184;
                    frontier_phi_55_pred_5 = _2183;
                }
                else
                {
                    float _2379;
                    float _2380;
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    uint _2385;
                    _2379 = _2183;
                    _2380 = _2184;
                    _2381 = _2185;
                    _2382 = _2186;
                    _2383 = _2187;
                    _2384 = _2188;
                    _2385 = _2198;
                    float _2280;
                    float _2281;
                    float _2282;
                    float _2283;
                    float _2284;
                    float _2285;
                    for (;;)
                    {
                        uint _2389 = uint(findLSB(_2385)) + (_2189 << 5u);
                        uint _2386 = (_2385 + 4294967295u) & _2385;
                        uint _2391 = _2389 * 48u;
                        vec4 _2405 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2391)).x, texelFetch(g_PointLightRenderingBuffer, int(_2391 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2391 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2391 + 3u)).x));
                        uint _2411 = (_2389 * 48u) + 4u;
                        vec4 _2424 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2411)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 3u)).x));
                        uint _2430 = (_2389 * 48u) + 8u;
                        vec3 _2441 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2430)).x, texelFetch(g_PointLightRenderingBuffer, int(_2430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2430 + 2u)).x));
                        float _2445 = _2405.x - _1862;
                        float _2446 = _2405.y - _1863;
                        float _2447 = _2405.z - _1864;
                        float _2448 = dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447));
                        float _2451 = inversesqrt(_2448);
                        float _2452 = _2451 * _2445;
                        float _2453 = _2451 * _2446;
                        float _2454 = _2451 * _2447;
                        float _2455 = dot(vec3(_389, _392, _395), vec3(_2452, _2453, _2454));
                        float _2460 = 1.0 - (_2448 * _2405.w);
                        float _3703 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
                        float _2461 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
                        float _2462 = sqrt(_2448) * _2424.w;
                        float _2465 = 1.39999997615814208984375 / (_2462 + 1.39999997615814208984375);
                        float _2466 = _2465 * _2465;
                        float _2469 = ((1.0 - _2466) * _2455) + _2466;
                        float _2472 = _2462 * _2462;
                        float _2476 = ((isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0))) * _2461) / ((_2472 * 0.699999988079071044921875) + 1.0);
                        float _2480 = (-0.0) - _1862;
                        float _2481 = (-0.0) - _1863;
                        float _2482 = (-0.0) - _1864;
                        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
                        float _2487 = _2486 * _2480;
                        float _2488 = _2486 * _2481;
                        float _2489 = _2486 * _2482;
                        float _2497 = exp2(log2(1.0 / ((_2472 * 3.5) + 5.0)) * 0.25);
                        float _2498 = 1.0 - _465;
                        float _2505 = sqrt(1.0 - ((1.0 - (_2498 * _2498)) * (1.0 - (_2497 * _2497))));
                        float _2506 = _2505 * _2505;
                        float _2507 = _2506 * _2506;
                        float _2508 = _2487 + _2452;
                        float _2509 = _2488 + _2453;
                        float _2510 = _2489 + _2454;
                        float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
                        float _2518 = dot(vec3(_389, _392, _395), vec3(_2487, _2488, _2489));
                        float _3719 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
                        float _2521 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
                        float _2522 = dot(vec3(_389, _392, _395), vec3(_2514 * _2508, _2514 * _2509, _2514 * _2510));
                        float _3730 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
                        float _2525 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
                        float _2529 = ((_2525 * _2525) * (_2507 + (-1.0))) + 1.0;
                        float _2530 = _2465 * _2506;
                        float _2531 = _2530 * _2530;
                        float _2534 = ((1.0 - _2531) * _2455) + _2531;
                        float _3741 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
                        float _2535 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
                        float _2536 = 1.0 - _2506;
                        float _2546 = (0.5 / (((_2535 * ((_2521 * _2536) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2536) + _2506) * _2521))) * _2535;
                        float _3752 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
                        float _2557 = (((_2507 * 3.1415927410125732421875) * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) / ((_2529 * _2529) * ((_2472 * 2.1991131305694580078125) + 3.141590118408203125))) * _2461;
                        _2283 = (_2476 * _2424.x) + _2382;
                        _2284 = (_2476 * _2424.y) + _2383;
                        _2285 = (_2476 * _2424.z) + _2384;
                        _2280 = (_2557 * _2441.x) + _2379;
                        _2281 = (_2557 * _2441.y) + _2380;
                        _2282 = (_2557 * _2441.z) + _2381;
                        if (_2386 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2379 = _2280;
                            _2380 = _2281;
                            _2381 = _2282;
                            _2382 = _2283;
                            _2383 = _2284;
                            _2384 = _2285;
                            _2385 = _2386;
                        }
                    }
                    frontier_phi_55_pred = _2284;
                    frontier_phi_55_pred_1 = _2285;
                    frontier_phi_55_pred_2 = _2283;
                    frontier_phi_55_pred_3 = _2282;
                    frontier_phi_55_pred_4 = _2281;
                    frontier_phi_55_pred_5 = _2280;
                }
                _2007 = frontier_phi_55_pred;
                _2009 = frontier_phi_55_pred_1;
                _2005 = frontier_phi_55_pred_2;
                _2003 = frontier_phi_55_pred_3;
                _2001 = frontier_phi_55_pred_4;
                _1999 = frontier_phi_55_pred_5;
                uint _2190 = _2189 + 1u;
                if (_2190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2183 = _1999;
                    _2184 = _2001;
                    _2185 = _2003;
                    _2186 = _2005;
                    _2187 = _2007;
                    _2188 = _2009;
                    _2189 = _2190;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1998 = _1999;
            _2000 = _2001;
            _2002 = _2003;
            _2004 = _2005;
            _2006 = _2007;
            _2008 = _2009;
        }
        uvec4 _2012 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2013 = _2012.z;
        uint _2015 = (_2013 >> 8u) & 15u;
        float _2151;
        float _2153;
        float _2155;
        float _2157;
        float _2159;
        float _2161;
        if (((4294967295u << _2015) & _1908) == 0u)
        {
            _2151 = _1998;
            _2153 = _2000;
            _2155 = _2002;
            _2157 = _2004;
            _2159 = _2006;
            _2161 = _2008;
        }
        else
        {
            float _2176 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
            float _2177 = _2176 * _1862;
            float _2178 = _2176 * _1863;
            float _2179 = _2176 * _1864;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            float frontier_phi_44_45_ladder_3;
            float frontier_phi_44_45_ladder_4;
            float frontier_phi_44_45_ladder_5;
            if (_2015 < ((_2013 >> 12u) & 15u))
            {
                float _2152;
                float _2154;
                float _2156;
                float _2158;
                float _2160;
                float _2162;
                float _2362 = _1998;
                float _2363 = _2000;
                float _2364 = _2002;
                float _2365 = _2004;
                float _2366 = _2006;
                float _2367 = _2008;
                uint _2368 = _2015;
                uint _2377;
                bool _2378;
                for (;;)
                {
                    _2377 = texelFetch(g_lightClassification, int((((_1902 << 5u) + (_1888 << 9u)) + (_2368 << 2u)) >> 2u)).x;
                    _2378 = _2377 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2378)
                    {
                        frontier_phi_69_pred = _2367;
                        frontier_phi_69_pred_1 = _2366;
                        frontier_phi_69_pred_2 = _2365;
                        frontier_phi_69_pred_3 = _2364;
                        frontier_phi_69_pred_4 = _2363;
                        frontier_phi_69_pred_5 = _2362;
                    }
                    else
                    {
                        float _2592;
                        float _2593;
                        float _2594;
                        float _2595;
                        float _2596;
                        float _2597;
                        float _2888;
                        float _2889;
                        float _2890;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _2605 = _2362;
                        float _2606 = _2363;
                        float _2607 = _2364;
                        float _2608 = _2365;
                        float _2609 = _2366;
                        float _2610 = _2367;
                        uint _2611 = _2377;
                        uint _2612;
                        vec4 _2637;
                        float _2638;
                        vec4 _2653;
                        vec3 _2665;
                        vec4 _2681;
                        vec4 _2697;
                        float _2744;
                        bool _2745;
                        for (;;)
                        {
                            uint _2622 = ((_2368 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2611));
                            _2612 = (_2611 + 4294967295u) & _2611;
                            uint _2624 = _2622 * 40u;
                            _2637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 3u)).x));
                            _2638 = _2637.w;
                            uint _2640 = (_2622 * 40u) + 4u;
                            _2653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 3u)).x));
                            uint _2655 = (_2622 * 40u) + 8u;
                            _2665 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 2u)).x));
                            uint _2668 = (_2622 * 40u) + 16u;
                            _2681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 3u)).x));
                            uint _2684 = (_2622 * 40u) + 20u;
                            _2697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 3u)).x));
                            uint _2700 = (_2622 * 40u) + 24u;
                            vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 3u)).x));
                            uint _2719 = (_2622 * 40u) + 28u;
                            vec4 _2732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 3u)).x));
                            _2744 = fma(_1864, _2732.z, fma(_1863, _2732.y, _2732.x * _1862)) + _2732.w;
                            _2745 = !((fma(_1864, _2713.z, fma(_1863, _2713.y, _2713.x * _1862)) + _2713.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2745)
                            {
                                float _2772 = _2637.x - _1862;
                                float _2773 = _2637.y - _1863;
                                float _2774 = _2637.z - _1864;
                                float _2775 = dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774));
                                float _2778 = inversesqrt(_2775);
                                float _2779 = _2778 * _2772;
                                float _2780 = _2778 * _2773;
                                float _2781 = _2778 * _2774;
                                float _2785 = 1.0 - (_2775 / (_2638 * _2638));
                                float _3763 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                                float _2786 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
                                float _2790 = sqrt(_2775) * _2653.w;
                                float _2792 = 1.39999997615814208984375 / (_2790 + 1.39999997615814208984375);
                                float _2793 = _2792 * _2792;
                                float _2796 = ((1.0 - _2793) * dot(vec3(_2779, _2780, _2781), vec3(_389, _392, _395))) + _2793;
                                float _2799 = _2790 * _2790;
                                float _2803 = (fma(_1864, _2681.z, fma(_1863, _2681.y, _2681.x * _1862)) + _2681.w) / _2744;
                                float _2804 = (fma(_1864, _2697.z, fma(_1863, _2697.y, _2697.x * _1862)) + _2697.w) / _2744;
                                float _2808 = 1.0 - dot(vec2(_2803, _2804), vec2(_2803, _2804));
                                float _3779 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                                float _2809 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
                                float _2810 = _2809 * (((isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0))) * _2786) / ((_2799 * 0.699999988079071044921875) + 1.0));
                                float _2822 = exp2(log2(1.0 / ((_2799 * 3.5) + 5.0)) * 0.25);
                                float _2823 = 1.0 - _465;
                                float _2830 = sqrt(1.0 - ((1.0 - (_2823 * _2823)) * (1.0 - (_2822 * _2822))));
                                float _2831 = _2830 * _2830;
                                float _2832 = _2831 * _2831;
                                float _2833 = _2779 - _2177;
                                float _2834 = _2780 - _2178;
                                float _2835 = _2781 - _2179;
                                float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
                                float _2843 = dot(vec3(_389, _392, _395), vec3((-0.0) - _2177, (-0.0) - _2178, (-0.0) - _2179));
                                float _3790 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                                float _2846 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
                                float _2847 = dot(vec3(_389, _392, _395), vec3(_2839 * _2833, _2839 * _2834, _2839 * _2835));
                                float _3801 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                                float _2850 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
                                float _2854 = ((_2850 * _2850) * (_2832 + (-1.0))) + 1.0;
                                float _2855 = _2792 * _2831;
                                float _2856 = _2855 * _2855;
                                float _2862 = ((1.0 - _2856) * dot(vec3(_389, _392, _395), vec3(_2779, _2780, _2781))) + _2856;
                                float _3812 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                                float _2863 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
                                float _2864 = 1.0 - _2831;
                                float _2874 = (0.5 / (((_2863 * ((_2846 * _2864) + _2831)) + 9.9999999392252902907785028219223e-09) + (((_2863 * _2864) + _2831) * _2846))) * _2863;
                                float _3823 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                                float _2884 = (_2809 * _2786) * (((_2832 * 3.1415927410125732421875) * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) / ((_2854 * _2854) * ((_2799 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2810 * _2653.x;
                                frontier_phi_75_pred_1 = _2810 * _2653.z;
                                frontier_phi_75_pred_2 = _2810 * _2653.y;
                                frontier_phi_75_pred_3 = _2884 * _2665.z;
                                frontier_phi_75_pred_4 = _2884 * _2665.y;
                                frontier_phi_75_pred_5 = _2884 * _2665.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2891 = frontier_phi_75_pred;
                            _2893 = frontier_phi_75_pred_1;
                            _2892 = frontier_phi_75_pred_2;
                            _2890 = frontier_phi_75_pred_3;
                            _2889 = frontier_phi_75_pred_4;
                            _2888 = frontier_phi_75_pred_5;
                            _2595 = _2891 + _2608;
                            _2596 = _2892 + _2609;
                            _2597 = _2893 + _2610;
                            _2592 = _2888 + _2605;
                            _2593 = _2889 + _2606;
                            _2594 = _2890 + _2607;
                            if (_2612 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2605 = _2592;
                                _2606 = _2593;
                                _2607 = _2594;
                                _2608 = _2595;
                                _2609 = _2596;
                                _2610 = _2597;
                                _2611 = _2612;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2597;
                        frontier_phi_69_pred_1 = _2596;
                        frontier_phi_69_pred_2 = _2595;
                        frontier_phi_69_pred_3 = _2594;
                        frontier_phi_69_pred_4 = _2593;
                        frontier_phi_69_pred_5 = _2592;
                    }
                    _2162 = frontier_phi_69_pred;
                    _2160 = frontier_phi_69_pred_1;
                    _2158 = frontier_phi_69_pred_2;
                    _2156 = frontier_phi_69_pred_3;
                    _2154 = frontier_phi_69_pred_4;
                    _2152 = frontier_phi_69_pred_5;
                    uint _2369 = _2368 + 1u;
                    if (_2369 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2362 = _2152;
                        _2363 = _2154;
                        _2364 = _2156;
                        _2365 = _2158;
                        _2366 = _2160;
                        _2367 = _2162;
                        _2368 = _2369;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _2154;
                frontier_phi_44_45_ladder_1 = _2162;
                frontier_phi_44_45_ladder_2 = _2160;
                frontier_phi_44_45_ladder_3 = _2158;
                frontier_phi_44_45_ladder_4 = _2156;
                frontier_phi_44_45_ladder_5 = _2152;
            }
            else
            {
                frontier_phi_44_45_ladder = _2000;
                frontier_phi_44_45_ladder_1 = _2008;
                frontier_phi_44_45_ladder_2 = _2006;
                frontier_phi_44_45_ladder_3 = _2004;
                frontier_phi_44_45_ladder_4 = _2002;
                frontier_phi_44_45_ladder_5 = _1998;
            }
            _2151 = frontier_phi_44_45_ladder_5;
            _2153 = frontier_phi_44_45_ladder;
            _2155 = frontier_phi_44_45_ladder_4;
            _2157 = frontier_phi_44_45_ladder_3;
            _2159 = frontier_phi_44_45_ladder_2;
            _2161 = frontier_phi_44_45_ladder_1;
        }
        float _2166 = isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0));
        _1921 = (_2166 * _2157) + _1636;
        _1923 = (_2166 * _2159) + _1637;
        _1925 = (_2166 * _2161) + _1638;
        _1927 = ((_2151 * _434) * _2166) + _1803;
        _1929 = ((_2153 * _436) * _2166) + _1804;
        _1931 = ((_2155 * _437) * _2166) + _1805;
    }
    else
    {
        _1921 = _1636;
        _1923 = _1637;
        _1925 = _1638;
        _1927 = _1803;
        _1929 = _1804;
        _1931 = _1805;
    }
    float _3839 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3850 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3861 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3872 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _1949 = ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1921 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _449))) + ((_1927 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1290)) * cbPerFrame._m0[3u].x);
    float _1950 = ((isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1923 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _449))) + ((_1929 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1290)) * cbPerFrame._m0[3u].x);
    float _1951 = ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1925 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _449))) + ((_1931 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1290)) * cbPerFrame._m0[3u].x);
    float _1956 = cbInstanceData._m0[_408 + 6u].w * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)));
    float _1961 = _368 / cbSceneParam._m0[86u].x;
    float _1962 = _369 / cbSceneParam._m0[86u].y;
    vec4 _1976 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1961, _1962, (log2((isnan(cbSceneParam._m0[77u].w) ? _289 : (isnan(_289) ? cbSceneParam._m0[77u].w : min(_289, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1978 = _1976.x;
    float _1979 = _1976.y;
    float _1980 = _1976.z;
    float _1981 = _1976.w;
    float _2062;
    float _2064;
    float _2066;
    float _2068;
    if (_289 > cbSceneParam._m0[78u].w)
    {
        float _2023 = isnan(_289) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _289 : min(cbSceneParam._m0[80u].w, _289));
        float _2024 = _2023 / _289;
        float _2035 = _2024 * _340;
        float _2036 = _341 * _2024;
        float _2037 = (-0.0) - _2036;
        float _2039 = _2024 * _342;
        float _2041 = (cbSceneParam._m0[77u].w * _2037) / _2023;
        float _2042 = _2041 + cbSceneParam._m0[79u].w;
        float _2043 = cbSceneParam._m0[79u].w - _2036;
        float _2049 = sqrt(((_2035 * _2035) + (_2036 * _2036)) + (_2039 * _2039));
        float _2052 = (1.0 - (cbSceneParam._m0[77u].w / _2023)) * _2049;
        float _2058 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2060 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2293;
        if (abs((_2037 - _2041) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2293 = ((((_2042 > 0.0) ? exp2(_2058 * _2042) : (2.0 - exp2(_2060 * _2042))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2052;
        }
        else
        {
            float _2212 = 1.0 / cbSceneParam._m0[80u].x;
            float _2213 = isnan(_2043) ? _2042 : (isnan(_2042) ? _2043 : max(_2042, _2043));
            float _2214 = isnan(_2043) ? _2042 : (isnan(_2042) ? _2043 : min(_2042, _2043));
            float _2223 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : min(_2213, 0.0));
            float _2224 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : min(_2214, 0.0));
            _2293 = ((abs(_2049 / _2037) * cbSceneParam._m0[80u].y) * ((((_2223 - _2224) * 2.0) - ((exp2(_2058 * (isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0)))) - exp2(_2058 * (isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0))))) * _2212)) - ((exp2(_2060 * _2223) - exp2(_2060 * _2224)) * _2212))) + (_2052 * cbSceneParam._m0[80u].z);
        }
        vec4 _2295 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1961, _1962, 1.0), 0.0);
        float _2304 = exp2((_2293 * (-1.44269502162933349609375)) * (1.0 - _2295.w));
        float _2305 = log2(_2304);
        float _2321 = log2(_1981);
        _2062 = (exp2(_2321 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2305 * cbSceneParam._m0[78u].x)) * _2295.x) / cbSceneParam._m0[78u].x)) + _1978;
        _2064 = (exp2(_2321 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2305 * cbSceneParam._m0[78u].y)) * _2295.y) / cbSceneParam._m0[78u].y)) + _1979;
        _2066 = (exp2(_2321 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2305 * cbSceneParam._m0[78u].z)) * _2295.z) / cbSceneParam._m0[78u].z)) + _1980;
        _2068 = _2304 * _1981;
    }
    else
    {
        _2062 = _1978;
        _2064 = _1979;
        _2066 = _1980;
        _2068 = _1981;
    }
    bool _2331;
    vec4 _2078;
    vec4 _2100;
    float _2102;
    float _2106;
    float _2107;
    float _2108;
    float _2109;
    bool _2119;
    for (;;)
    {
        _2078 = cbMatDynParam._m0[0u];
        float _2080 = roundEven(_2078.y);
        bool _2081 = _2080 == 3.0;
        float _2082 = log2(_2068);
        float _2089 = exp2(_2082 * cbSceneParam._m0[78u].x) * _1949;
        float _2090 = exp2(_2082 * cbSceneParam._m0[78u].y) * _1950;
        float _2091 = exp2(_2082 * cbSceneParam._m0[78u].z) * _1951;
        float _2098 = _356 + (-0.5);
        _2100 = cbMtdParam._m0[1u];
        _2102 = _2100.y * _2098;
        float _2105 = (_2080 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2106 = _2105 * (_2081 ? _2089 : (_2089 + (cbSceneParam._m0[72u].w * _2062)));
        _2107 = _2105 * (_2081 ? _2090 : (_2090 + (cbSceneParam._m0[72u].w * _2064)));
        _2108 = _2105 * (_2081 ? _2091 : (_2091 + (cbSceneParam._m0[72u].w * _2066)));
        _2109 = _2098 * 0.999000012874603271484375;
        _2119 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2119)
        {
            if ((cbInstanceData._m0[_408 + 7u].x + _2109) < 0.5)
            {
                _2331 = true;
                break;
            }
        }
        uint _2247 = _410 + uint(_2078.w);
        if ((cbInstanceData._m0[_2247].w < 1.0) && ((cbInstanceData._m0[_2247].w + _2109) < 0.5))
        {
            _2331 = true;
            break;
        }
        if ((_2102 + 1.0) < _2100.x)
        {
            _2331 = true;
            break;
        }
        _2331 = false;
        break;
    }
    float _2562;
    if (_2331)
    {
        discard_state = true;
        _2562 = 0.0;
    }
    else
    {
        _2562 = _1956;
    }
    SV_Target.x = _2106;
    SV_Target.y = _2107;
    SV_Target.z = _2108;
    SV_Target.w = _2562;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1956;
    discard_exit();
}


