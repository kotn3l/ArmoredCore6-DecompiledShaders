#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_GlassLow_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _854;
float _3070;
float _3071;
float _3072;
float _3073;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(M_GlassLow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = (_230.x * 2.0) + (-1.0);
    float _241 = (_230.y * 2.0) + (-1.0);
    float _242 = dot(vec2(_239, _241), vec2(_239, _241));
    float _3082 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _248 = sqrt(1.0 - (isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0))));
    float _253 = ((cbMtdParam._m0[10u].y + _230.z) * 0.5) + cbMtdParam._m0[10u].x;
    float _256 = fma(_248, _194 * NORMAL.x, fma(_241, _201 * TANGENT.x, (_187 * _180) * _239));
    float _259 = fma(_248, _194 * NORMAL.y, fma(_241, _201 * TANGENT.y, (_187 * _181) * _239));
    float _262 = fma(_248, _194 * NORMAL.z, fma(_241, _201 * TANGENT.z, (_187 * _182) * _239));
    float _266 = inversesqrt(dot(vec3(_256, _259, _262), vec3(_256, _259, _262)));
    float _267 = _266 * _256;
    float _268 = _266 * _259;
    float _269 = _266 * _262;
    float _3093 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _270 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
    float _3104 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _271 = isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0));
    float _3115 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3126 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3137 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3148 = isnan(0.0) ? cbMtdParam._m0[10u].w : (isnan(cbMtdParam._m0[10u].w) ? 0.0 : max(cbMtdParam._m0[10u].w, 0.0));
    float _275 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
    float _291 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _332 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _342 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _332);
    float _343 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _332);
    float _344 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _332);
    float _348 = inversesqrt(dot(vec3(_342, _343, _344), vec3(_342, _343, _344)));
    float _349 = _342 * _348;
    float _350 = _343 * _348;
    float _351 = _344 * _348;
    vec4 _356 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _358 = _356.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _534 = sqrt(((_342 * _342) + (_343 * _343)) + (_344 * _344));
        float _540 = (cbMatDynParam._m0[5u].x * _534) + cbMatDynParam._m0[5u].y;
        float _3159 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
        float _541 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
        float _545 = (cbMatDynParam._m0[5u].z * _534) + cbMatDynParam._m0[5u].w;
        float _3170 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0))) - _541)) + _541) < ((_358 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _370 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _371 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _391 = fma(_269, cbSceneParam._m0[5u].z, fma(_268, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _267));
    float _394 = fma(_269, cbSceneParam._m0[6u].z, fma(_268, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _267));
    float _397 = fma(_269, cbSceneParam._m0[7u].z, fma(_268, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _267));
    uint _410 = uint(roundEven(NORMAL.w)) * 13u;
    uint _412 = _410 + 9u;
    uint _413 = _412 + uint(cbMatDynParam._m0[0u].w);
    float _419 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0)))) * cbInstanceData._m0[_413].x;
    float _420 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0)))) * cbInstanceData._m0[_413].y;
    float _421 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0)))) * cbInstanceData._m0[_413].z;
    float _3181 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _422 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
    float _3192 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
    float _3203 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _424 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
    float _425 = 1.0 - _275;
    float _426 = _422 * _425;
    float _427 = _423 * _425;
    float _428 = _424 * _425;
    float _433 = (_422 + (-0.039999999105930328369140625)) * _275;
    float _434 = (_423 + (-0.039999999105930328369140625)) * _275;
    float _435 = (_424 + (-0.039999999105930328369140625)) * _275;
    float _436 = _433 + 0.039999999105930328369140625;
    float _438 = _434 + 0.039999999105930328369140625;
    float _439 = _435 + 0.039999999105930328369140625;
    vec4 _448 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _370, cbSceneParam._m0[86u].y * _371));
    float _451 = _448.x * TEXCOORD.z;
    float _452 = dot(vec3(_267, _268, _269), vec3(_349, _350, _351));
    float _455 = _452 * 2.0;
    float _459 = (_455 * _267) - _349;
    float _460 = (_455 * _268) - _350;
    float _461 = (_455 * _269) - _351;
    float _465 = abs(dot(vec3(_349, _350, _351), vec3(_267, _268, _269)));
    float _3214 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _467 = sqrt(_271);
    float _480 = exp2((_467 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_467 * 3.0));
    float _486 = (1.0 - _480) * ((_467 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _487 = _480 * _467;
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _853;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _579 = fma(_523, cbModelParam._m0[26u].z, fma(_519, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _515));
        float _583 = fma(_523, cbModelParam._m0[27u].z, fma(_519, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _515));
        float _587 = fma(_523, cbModelParam._m0[28u].z, fma(_519, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _515));
        float _611 = _515 + _267;
        float _612 = _519 + _268;
        float _613 = _523 + _269;
        float _623 = fma(_613, cbModelParam._m0[26u].z, fma(_612, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611)) - _579;
        float _624 = fma(_613, cbModelParam._m0[27u].z, fma(_612, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611)) - _583;
        float _625 = fma(_613, cbModelParam._m0[28u].z, fma(_612, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611)) - _587;
        float _629 = inversesqrt(dot(vec3(_623, _624, _625), vec3(_623, _624, _625)));
        float _642 = ((_629 * _623) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_579 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_629 * _624) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_583 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_629 * _625) / cbModelParam._m0[34u].z) + ((((((_587 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        float _681 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_647.x + (-0.5));
        float _683 = _681 * (_647.y + (-0.5));
        float _684 = _681 * (_647.z + (-0.5));
        float _691 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_654.x + (-0.5));
        float _693 = _691 * (_654.y + (-0.5));
        float _694 = _691 * (_654.z + (-0.5));
        float _701 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_661.x + (-0.5));
        float _703 = _701 * (_661.y + (-0.5));
        float _704 = _701 * (_661.z + (-0.5));
        float _711 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_668.x + (-0.5));
        float _713 = _711 * (_668.y + (-0.5));
        float _714 = _711 * (_668.z + (-0.5));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = _682 * 0.5;
        float _719 = _692 * 0.5;
        float _720 = _702 * 0.5;
        float _721 = dot(vec3(_718, _719, _720), vec3(_718, _719, _720));
        float _726 = (_721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_721);
        float _735 = (dot(vec3(_267, _268, _269), vec3(_726 * _718, _726 * _719, _726 * _720)) + 1.0) * 0.5;
        float _3240 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _745 = sqrt(((_719 * _719) + (_718 * _718)) + (_720 * _720)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3251 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _747 = _746 * 2.0;
        float _751 = (1.0 - _746) / (_746 + 1.0);
        float _3262 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _761 = ((((1.0 - _752) * (_747 + 2.0)) * exp2(log2(isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))) * (_747 + 1.0))) + _752) * _715;
        float _762 = _683 * 0.5;
        float _763 = _693 * 0.5;
        float _764 = _703 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _778 = (dot(vec3(_267, _268, _269), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3273 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _787 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3284 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3295 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0))) * (_789 + 1.0))) + _794) * _716;
        float _804 = _684 * 0.5;
        float _805 = _694 * 0.5;
        float _806 = _704 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_267, _268, _269), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3306 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3317 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3328 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0))) * (_831 + 1.0))) + _836) * _717;
        _853 = _684;
        _855 = _683;
        _856 = _682;
        _857 = _694;
        _858 = _693;
        _859 = _692;
        _860 = _704;
        _861 = _703;
        _862 = _702;
        _863 = _717;
        _864 = _716;
        _865 = _715;
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
    }
    else
    {
        _853 = _854;
        _855 = _854;
        _856 = _854;
        _857 = _854;
        _858 = _854;
        _859 = _854;
        _860 = _854;
        _861 = _854;
        _862 = _854;
        _863 = _854;
        _864 = _854;
        _865 = _854;
        _866 = 0.0;
        _867 = 0.0;
        _868 = 0.0;
    }
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _897 = fma(_523, cbModelParam._m0[30u].z, fma(_519, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _515));
        float _901 = fma(_523, cbModelParam._m0[31u].z, fma(_519, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _515));
        float _905 = fma(_523, cbModelParam._m0[32u].z, fma(_519, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _515));
        float _928 = _515 + _267;
        float _929 = _519 + _268;
        float _930 = _523 + _269;
        float _940 = fma(_930, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_897 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_901 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[35u].z) + ((((((_905 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _996 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_963.x + (-0.5));
        float _998 = _996 * (_963.y + (-0.5));
        float _999 = _996 * (_963.z + (-0.5));
        float _1006 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_970.x + (-0.5));
        float _1008 = _1006 * (_970.y + (-0.5));
        float _1009 = _1006 * (_970.z + (-0.5));
        float _1016 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_977.x + (-0.5));
        float _1018 = _1016 * (_977.y + (-0.5));
        float _1019 = _1016 * (_977.z + (-0.5));
        float _1026 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_984.x + (-0.5));
        float _1028 = _1026 * (_984.y + (-0.5));
        float _1029 = _1026 * (_984.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_267, _268, _269), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3369 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3380 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3391 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))) * (_1060 + 1.0))) + _1065) * _1030;
        float _1075 = _998 * 0.5;
        float _1076 = _1008 * 0.5;
        float _1077 = _1018 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_267, _268, _269), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3402 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3413 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3424 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) * (_1102 + 1.0))) + _1107) * _1031;
        float _1117 = _999 * 0.5;
        float _1118 = _1009 * 0.5;
        float _1119 = _1019 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_267, _268, _269), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3435 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3446 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3457 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * (_1144 + 1.0))) + _1149) * _1032;
        _1166 = _999;
        _1167 = _998;
        _1168 = _997;
        _1169 = _1009;
        _1170 = _1008;
        _1171 = _1007;
        _1172 = _1019;
        _1173 = _1018;
        _1174 = _1017;
        _1175 = _1032;
        _1176 = _1031;
        _1177 = _1030;
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _854;
        _1167 = _854;
        _1168 = _854;
        _1169 = _854;
        _1170 = _854;
        _1171 = _854;
        _1172 = _854;
        _1173 = _854;
        _1174 = _854;
        _1175 = _854;
        _1176 = _854;
        _1177 = _854;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _866)) + _866;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _867)) + _867;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _868)) + _868;
    float _1213 = fma(_1192, cbSceneParam._m0[89u].z, fma(_1191, cbSceneParam._m0[89u].y, _1190 * cbSceneParam._m0[89u].x));
    float _1216 = fma(_1192, cbSceneParam._m0[90u].z, fma(_1191, cbSceneParam._m0[90u].y, _1190 * cbSceneParam._m0[90u].x));
    float _1219 = fma(_1192, cbSceneParam._m0[91u].z, fma(_1191, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1190));
    float _1234 = _459 * 0.5;
    float _1235 = _460 * 0.5;
    float _1236 = _461 * 0.5;
    float _1237 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1240 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1243 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1277;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1250 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_853, _857, _860, _863));
        float _1254 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_855, _858, _861, _864));
        float _1258 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_856, _859, _862, _865));
        float _1265 = dot(vec4(cbModelParam._m0[39u]), vec4(_1234, _1235, _1236, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1265) ? 0.0 : (isnan(0.0) ? _1265 : max(0.0, _1265))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1288;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1279 = dot(vec4(cbModelParam._m0[40u]), vec4(_1234, _1235, _1236, 1.0));
        _1288 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1288 = 1.0;
    }
    float _1292 = (_1288 * cbModelParam._m0[1u].x) + (_1277 * (1.0 - cbModelParam._m0[1u].x));
    float _1302 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _271);
    float _1303 = isnan(_1302) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1302 : min(cbModelParam._m0[25u].z, _1302));
    float _1385;
    float _1387;
    float _1389;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1352 = fma(_523, cbModelParam._m0[13u].z, fma(_519, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _515)) + cbModelParam._m0[13u].w;
        float _1356 = fma(_523, cbModelParam._m0[14u].z, fma(_519, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _515)) + cbModelParam._m0[14u].w;
        float _1360 = fma(_523, cbModelParam._m0[15u].z, fma(_519, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _515)) + cbModelParam._m0[15u].w;
        float _1363 = fma(_461, cbModelParam._m0[13u].z, fma(_460, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _459));
        float _1366 = fma(_461, cbModelParam._m0[14u].z, fma(_460, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _459));
        float _1369 = fma(_461, cbModelParam._m0[15u].z, fma(_460, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _459));
        float _1397;
        if (_1363 > 0.0)
        {
            _1397 = abs((1.0 - _1352) / _1363);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1352 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1397 = frontier_phi_17_15_ladder;
        }
        float _1854;
        if (_1366 > 0.0)
        {
            _1854 = abs((1.0 - _1356) / _1366);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1356 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1854 = frontier_phi_26_22_ladder;
        }
        float _2163;
        if (_1369 > 0.0)
        {
            _2163 = abs((1.0 - _1360) / _1369);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_1360 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _2163 = frontier_phi_40_33_ladder;
        }
        float _2165 = isnan(_1854) ? _1397 : (isnan(_1397) ? _1854 : min(_1397, _1854));
        float _2166 = isnan(_2163) ? _2165 : (isnan(_2165) ? _2163 : min(_2165, _2163));
        float _2170 = (_2166 * _1363) + _1352;
        float _2171 = (_2166 * _1366) + _1356;
        float _2172 = (_2166 * _1369) + _1360;
        float _2173 = _2166 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2173;
        float _2176 = _2173 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_2172 > _2176) || ((_2172 < _2174) || ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 < _2174) || (_2170 > _2176))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2172, cbModelParam._m0[9u].z, fma(_2171, cbModelParam._m0[9u].y, _2170 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2172, cbModelParam._m0[10u].z, fma(_2171, cbModelParam._m0[10u].y, _2170 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2172, cbModelParam._m0[11u].z, fma(_2171, cbModelParam._m0[11u].y, _2170 * cbModelParam._m0[11u].x))), _1303);
            frontier_phi_16_40_ladder = _2314.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _2314.y * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _2314.x * cbModelParam._m0[1u].y;
        }
        _1385 = frontier_phi_16_40_ladder_2;
        _1387 = frontier_phi_16_40_ladder_1;
        _1389 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _1373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_459, _460, _461), _1303);
        _1385 = _1373.x * cbModelParam._m0[1u].y;
        _1387 = _1373.y * cbModelParam._m0[1u].y;
        _1389 = _1373.z * cbModelParam._m0[1u].y;
    }
    float _1393 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _271);
    float _1394 = isnan(_1393) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1393 : min(cbModelParam._m0[25u].w, _1393));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1451 = fma(_523, cbModelParam._m0[21u].z, fma(_519, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _515)) + cbModelParam._m0[21u].w;
        float _1455 = fma(_523, cbModelParam._m0[22u].z, fma(_519, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _515)) + cbModelParam._m0[22u].w;
        float _1459 = fma(_523, cbModelParam._m0[23u].z, fma(_519, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _515)) + cbModelParam._m0[23u].w;
        float _1462 = fma(_461, cbModelParam._m0[21u].z, fma(_460, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _459));
        float _1465 = fma(_461, cbModelParam._m0[22u].z, fma(_460, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _459));
        float _1468 = fma(_461, cbModelParam._m0[23u].z, fma(_460, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _459));
        float _1859;
        if (_1462 > 0.0)
        {
            _1859 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1859 = frontier_phi_28_24_ladder;
        }
        float _2189;
        if (_1465 > 0.0)
        {
            _2189 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2189 = frontier_phi_42_35_ladder;
        }
        float _2379;
        if (_1468 > 0.0)
        {
            _2379 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _2379 = frontier_phi_60_53_ladder;
        }
        float _2381 = isnan(_2189) ? _1859 : (isnan(_1859) ? _2189 : min(_1859, _2189));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1462) + _1451;
        float _2387 = (_2382 * _1465) + _1455;
        float _2388 = (_2382 * _1468) + _1459;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2389;
        float _2392 = _2389 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_2388 > _2392) || ((_2388 < _2390) || ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 < _2390) || (_2386 > _2392))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2630 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2388, cbModelParam._m0[17u].z, fma(_2387, cbModelParam._m0[17u].y, _2386 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2388, cbModelParam._m0[18u].z, fma(_2387, cbModelParam._m0[18u].y, _2386 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2388, cbModelParam._m0[19u].z, fma(_2387, cbModelParam._m0[19u].y, _2386 * cbModelParam._m0[19u].x))), _1394);
            frontier_phi_25_60_ladder = _2630.x * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _2630.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _2630.y * cbModelParam._m0[1u].z;
        }
        _1487 = frontier_phi_25_60_ladder;
        _1489 = frontier_phi_25_60_ladder_2;
        _1491 = frontier_phi_25_60_ladder_1;
    }
    else
    {
        vec4 _1471 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_459, _460, _461), _1394);
        _1487 = _1471.x * cbModelParam._m0[1u].z;
        _1489 = _1471.y * cbModelParam._m0[1u].z;
        _1491 = _1471.z * cbModelParam._m0[1u].z;
    }
    float _1504 = (((_486 * _436) + _487) * _451) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1506 = (((_486 * _438) + _487) * _451) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1508 = (((_486 * _439) + _487) * _451) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1511 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, _1504 * cbSceneParam._m0[91u].x));
    vec4 _1525 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_370, _371));
    float _1527 = _1525.w;
    float _1557 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1561 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1600 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _1557), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _1561))).x));
    float _3583 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1605 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _1557), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _1561))).x));
    float _3594 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1607 = (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)));
    float _1608 = _1607 * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1527));
    float _1609 = _1607 * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1527));
    float _1610 = _1607 * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1527));
    uvec4 _1614 = floatBitsToUint(cbInstanceData._m0[_410 + 5u]);
    uint _1616 = _1614.x * 14u;
    uint _1617 = _1616 + 13u;
    float _1622 = _451 + (-1.0);
    float _1625 = (cbLight._m0[_1617].x * _1622) + 1.0;
    float _1626 = (cbLight._m0[_1617].y * _1622) + 1.0;
    uint _1627 = _1616 + 5u;
    float _1633 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
    uint _1637 = _1616 + 4u;
    float _1647 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
    uint _1651 = _1616 | 1u;
    float _1662 = dot(vec3(cbLight._m0[_1616].xyz), vec3(_267, _268, _269));
    float _1665 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_267, _268, _269));
    float _3615 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _3626 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1670 = (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * 0.3183098733425140380859375;
    float _1672 = (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * 0.3183098733425140380859375;
    float _1679 = ((cbLight._m0[_1627].x * _1633) * _1672) + (((cbLight._m0[_1637].x * _1608) * _1647) * _1670);
    float _1680 = ((_1633 * cbLight._m0[_1627].y) * _1672) + (((cbLight._m0[_1637].y * _1609) * _1647) * _1670);
    float _1681 = ((_1633 * cbLight._m0[_1627].z) * _1672) + (((cbLight._m0[_1637].z * _1610) * _1647) * _1670);
    uint _1683 = _1616 + 8u;
    float _1696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1616].w)) * _271) * 0.949999988079071044921875);
    float _1697 = _1696 * _1696;
    float _1698 = cbLight._m0[_1616].x + _349;
    float _1699 = cbLight._m0[_1616].y + _350;
    float _1700 = cbLight._m0[_1616].z + _351;
    float _1704 = inversesqrt(dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700)));
    float _1705 = _1704 * _1698;
    float _1706 = _1704 * _1699;
    float _1707 = _1704 * _1700;
    float _1708 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1616].xyz));
    float _3637 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1711 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _1712 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _1713 = dot(vec3(_267, _268, _269), vec3(_1705, _1706, _1707));
    float _3659 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _1717 = dot(vec3(cbLight._m0[_1616].xyz), vec3(_1705, _1706, _1707));
    float _3670 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1721 = _1697 * _1697;
    float _1725 = ((_1716 * _1716) * (_1721 + (-1.0))) + 1.0;
    float _1733 = exp2(log2(1.0 - (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * 5.0);
    float _1734 = 0.959999978542327880859375 - _433;
    float _1736 = 0.959999978542327880859375 - _434;
    float _1737 = 0.959999978542327880859375 - _435;
    float _1744 = 1.0 - _1697;
    float _1755 = (0.5 / (((_1712 * ((_1711 * _1744) + _1697)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1744) + _1697) * _1711))) * _1711;
    float _3681 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1757 = (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1721 / ((_1725 * _1725) * 3.141590118408203125));
    uint _1771 = _1616 + 9u;
    float _1782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1651].w)) * _271) * 0.949999988079071044921875);
    float _1783 = _1782 * _1782;
    float _1784 = cbLight._m0[_1651].x + _349;
    float _1785 = cbLight._m0[_1651].y + _350;
    float _1786 = cbLight._m0[_1651].z + _351;
    float _1790 = inversesqrt(dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786)));
    float _1791 = _1790 * _1784;
    float _1792 = _1790 * _1785;
    float _1793 = _1790 * _1786;
    float _1794 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1651].xyz));
    float _3692 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _1798 = dot(vec3(_267, _268, _269), vec3(_1791, _1792, _1793));
    float _3703 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _1802 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_1791, _1792, _1793));
    float _3714 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1806 = _1783 * _1783;
    float _1810 = ((_1801 * _1801) * (_1806 + (-1.0))) + 1.0;
    float _1817 = exp2(log2(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * 5.0);
    float _1824 = 1.0 - _1783;
    float _1834 = (0.5 / (((_1712 * ((_1797 * _1824) + _1783)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1824) + _1783) * _1797))) * _1797;
    float _3725 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1836 = (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1806 / ((_1810 * _1810) * 3.141590118408203125));
    float _1846 = (((((_1817 * _1734) + _436) * cbLight._m0[_1771].x) * _1836) * _1633) + ((((cbLight._m0[_1683].x * _1608) * ((_1733 * _1734) + _436)) * _1757) * _1647);
    float _1847 = (((((_1817 * _1736) + _438) * cbLight._m0[_1771].y) * _1836) * _1633) + ((((cbLight._m0[_1683].y * _1609) * ((_1733 * _1736) + _438)) * _1757) * _1647);
    float _1848 = (((((_1817 * _1737) + _439) * cbLight._m0[_1771].z) * _1836) * _1633) + ((((cbLight._m0[_1683].z * _1610) * ((_1733 * _1737) + _439)) * _1757) * _1647);
    float _1964;
    float _1966;
    float _1968;
    float _1970;
    float _1972;
    float _1974;
    if (_1614.y == 0u)
    {
        float _1904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1905 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1904;
        float _1906 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1904;
        float _1907 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1904;
        uvec4 _1919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1920 = _1919.x;
        uint _1931 = uint((float(_1919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _371) / _1920))) + floor(float(uint(cbSceneParam._m0[85u].x * _370) / _1920)));
        float _1941 = (log2(_1907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1942 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        uint _1945 = uint(isnan(14.0) ? _1942 : (isnan(_1942) ? 14.0 : min(_1942, 14.0)));
        uvec4 _1950 = texelFetch(g_lightClusterGridBuffer, int(((_1945 << 2u) + (_1931 << 6u)) >> 2u));
        uint _1951 = _1950.x;
        uint _1952 = _1919.z;
        float _2041;
        float _2043;
        float _2045;
        float _2047;
        float _2049;
        float _2051;
        if (((((1u << ((_1952 >> 4u) & 15u)) + 4294967295u) & _1951) == 0u) || ((_1952 & 240u) == 0u))
        {
            _2041 = 0.0;
            _2043 = 0.0;
            _2045 = 0.0;
            _2047 = 0.0;
            _2049 = 0.0;
            _2051 = 0.0;
        }
        else
        {
            float _2042;
            float _2044;
            float _2046;
            float _2048;
            float _2050;
            float _2052;
            float _2226 = 0.0;
            float _2227 = 0.0;
            float _2228 = 0.0;
            float _2229 = 0.0;
            float _2230 = 0.0;
            float _2231 = 0.0;
            uint _2232 = 0u;
            uint _2241;
            bool _2242;
            for (;;)
            {
                _2241 = texelFetch(g_lightClassification, int((((_1945 << 5u) + (_1931 << 9u)) + (_2232 << 2u)) >> 2u)).x;
                _2242 = _2241 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2242)
                {
                    frontier_phi_55_pred = _2230;
                    frontier_phi_55_pred_1 = _2231;
                    frontier_phi_55_pred_2 = _2229;
                    frontier_phi_55_pred_3 = _2228;
                    frontier_phi_55_pred_4 = _2227;
                    frontier_phi_55_pred_5 = _2226;
                }
                else
                {
                    float _2422;
                    float _2423;
                    float _2424;
                    float _2425;
                    float _2426;
                    float _2427;
                    uint _2428;
                    _2422 = _2226;
                    _2423 = _2227;
                    _2424 = _2228;
                    _2425 = _2229;
                    _2426 = _2230;
                    _2427 = _2231;
                    _2428 = _2241;
                    float _2323;
                    float _2324;
                    float _2325;
                    float _2326;
                    float _2327;
                    float _2328;
                    for (;;)
                    {
                        uint _2432 = uint(findLSB(_2428)) + (_2232 << 5u);
                        uint _2429 = (_2428 + 4294967295u) & _2428;
                        uint _2434 = _2432 * 48u;
                        vec4 _2448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2434)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 3u)).x));
                        uint _2454 = (_2432 * 48u) + 4u;
                        vec4 _2467 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2454)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 3u)).x));
                        uint _2473 = (_2432 * 48u) + 8u;
                        vec3 _2484 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2473)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 2u)).x));
                        float _2488 = _2448.x - _1905;
                        float _2489 = _2448.y - _1906;
                        float _2490 = _2448.z - _1907;
                        float _2491 = dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490));
                        float _2494 = inversesqrt(_2491);
                        float _2495 = _2494 * _2488;
                        float _2496 = _2494 * _2489;
                        float _2497 = _2494 * _2490;
                        float _2498 = dot(vec3(_391, _394, _397), vec3(_2495, _2496, _2497));
                        float _2503 = 1.0 - (_2491 * _2448.w);
                        float _3746 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
                        float _2504 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
                        float _2505 = sqrt(_2491) * _2467.w;
                        float _2508 = 1.39999997615814208984375 / (_2505 + 1.39999997615814208984375);
                        float _2509 = _2508 * _2508;
                        float _2512 = ((1.0 - _2509) * _2498) + _2509;
                        float _2515 = _2505 * _2505;
                        float _2519 = ((isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0))) * _2504) / ((_2515 * 0.699999988079071044921875) + 1.0);
                        float _2523 = (-0.0) - _1905;
                        float _2524 = (-0.0) - _1906;
                        float _2525 = (-0.0) - _1907;
                        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
                        float _2530 = _2529 * _2523;
                        float _2531 = _2529 * _2524;
                        float _2532 = _2529 * _2525;
                        float _2540 = exp2(log2(1.0 / ((_2515 * 3.5) + 5.0)) * 0.25);
                        float _2541 = 1.0 - _467;
                        float _2548 = sqrt(1.0 - ((1.0 - (_2541 * _2541)) * (1.0 - (_2540 * _2540))));
                        float _2549 = _2548 * _2548;
                        float _2550 = _2549 * _2549;
                        float _2551 = _2530 + _2495;
                        float _2552 = _2531 + _2496;
                        float _2553 = _2532 + _2497;
                        float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
                        float _2561 = dot(vec3(_391, _394, _397), vec3(_2530, _2531, _2532));
                        float _3762 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
                        float _2564 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
                        float _2565 = dot(vec3(_391, _394, _397), vec3(_2557 * _2551, _2557 * _2552, _2557 * _2553));
                        float _3773 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
                        float _2568 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
                        float _2572 = ((_2568 * _2568) * (_2550 + (-1.0))) + 1.0;
                        float _2573 = _2508 * _2549;
                        float _2574 = _2573 * _2573;
                        float _2577 = ((1.0 - _2574) * _2498) + _2574;
                        float _3784 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
                        float _2578 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
                        float _2579 = 1.0 - _2549;
                        float _2589 = (0.5 / (((_2578 * ((_2564 * _2579) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2579) + _2549) * _2564))) * _2578;
                        float _3795 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
                        float _2600 = (((_2550 * 3.1415927410125732421875) * (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) / ((_2572 * _2572) * ((_2515 * 2.1991131305694580078125) + 3.141590118408203125))) * _2504;
                        _2326 = (_2519 * _2467.x) + _2425;
                        _2327 = (_2519 * _2467.y) + _2426;
                        _2328 = (_2519 * _2467.z) + _2427;
                        _2323 = (_2600 * _2484.x) + _2422;
                        _2324 = (_2600 * _2484.y) + _2423;
                        _2325 = (_2600 * _2484.z) + _2424;
                        if (_2429 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2422 = _2323;
                            _2423 = _2324;
                            _2424 = _2325;
                            _2425 = _2326;
                            _2426 = _2327;
                            _2427 = _2328;
                            _2428 = _2429;
                        }
                    }
                    frontier_phi_55_pred = _2327;
                    frontier_phi_55_pred_1 = _2328;
                    frontier_phi_55_pred_2 = _2326;
                    frontier_phi_55_pred_3 = _2325;
                    frontier_phi_55_pred_4 = _2324;
                    frontier_phi_55_pred_5 = _2323;
                }
                _2050 = frontier_phi_55_pred;
                _2052 = frontier_phi_55_pred_1;
                _2048 = frontier_phi_55_pred_2;
                _2046 = frontier_phi_55_pred_3;
                _2044 = frontier_phi_55_pred_4;
                _2042 = frontier_phi_55_pred_5;
                uint _2233 = _2232 + 1u;
                if (_2233 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2226 = _2042;
                    _2227 = _2044;
                    _2228 = _2046;
                    _2229 = _2048;
                    _2230 = _2050;
                    _2231 = _2052;
                    _2232 = _2233;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2041 = _2042;
            _2043 = _2044;
            _2045 = _2046;
            _2047 = _2048;
            _2049 = _2050;
            _2051 = _2052;
        }
        uvec4 _2055 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2056 = _2055.z;
        uint _2058 = (_2056 >> 8u) & 15u;
        float _2194;
        float _2196;
        float _2198;
        float _2200;
        float _2202;
        float _2204;
        if (((4294967295u << _2058) & _1951) == 0u)
        {
            _2194 = _2041;
            _2196 = _2043;
            _2198 = _2045;
            _2200 = _2047;
            _2202 = _2049;
            _2204 = _2051;
        }
        else
        {
            float _2219 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
            float _2220 = _2219 * _1905;
            float _2221 = _2219 * _1906;
            float _2222 = _2219 * _1907;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            float frontier_phi_44_45_ladder_3;
            float frontier_phi_44_45_ladder_4;
            float frontier_phi_44_45_ladder_5;
            if (_2058 < ((_2056 >> 12u) & 15u))
            {
                float _2195;
                float _2197;
                float _2199;
                float _2201;
                float _2203;
                float _2205;
                float _2405 = _2041;
                float _2406 = _2043;
                float _2407 = _2045;
                float _2408 = _2047;
                float _2409 = _2049;
                float _2410 = _2051;
                uint _2411 = _2058;
                uint _2420;
                bool _2421;
                for (;;)
                {
                    _2420 = texelFetch(g_lightClassification, int((((_1945 << 5u) + (_1931 << 9u)) + (_2411 << 2u)) >> 2u)).x;
                    _2421 = _2420 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2421)
                    {
                        frontier_phi_69_pred = _2410;
                        frontier_phi_69_pred_1 = _2409;
                        frontier_phi_69_pred_2 = _2408;
                        frontier_phi_69_pred_3 = _2407;
                        frontier_phi_69_pred_4 = _2406;
                        frontier_phi_69_pred_5 = _2405;
                    }
                    else
                    {
                        float _2635;
                        float _2636;
                        float _2637;
                        float _2638;
                        float _2639;
                        float _2640;
                        float _2931;
                        float _2932;
                        float _2933;
                        float _2934;
                        float _2935;
                        float _2936;
                        float _2648 = _2405;
                        float _2649 = _2406;
                        float _2650 = _2407;
                        float _2651 = _2408;
                        float _2652 = _2409;
                        float _2653 = _2410;
                        uint _2654 = _2420;
                        uint _2655;
                        vec4 _2680;
                        float _2681;
                        vec4 _2696;
                        vec3 _2708;
                        vec4 _2724;
                        vec4 _2740;
                        float _2787;
                        bool _2788;
                        for (;;)
                        {
                            uint _2665 = ((_2411 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2654));
                            _2655 = (_2654 + 4294967295u) & _2654;
                            uint _2667 = _2665 * 40u;
                            _2680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 3u)).x));
                            _2681 = _2680.w;
                            uint _2683 = (_2665 * 40u) + 4u;
                            _2696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 3u)).x));
                            uint _2698 = (_2665 * 40u) + 8u;
                            _2708 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 2u)).x));
                            uint _2711 = (_2665 * 40u) + 16u;
                            _2724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 3u)).x));
                            uint _2727 = (_2665 * 40u) + 20u;
                            _2740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2727 + 3u)).x));
                            uint _2743 = (_2665 * 40u) + 24u;
                            vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 3u)).x));
                            uint _2762 = (_2665 * 40u) + 28u;
                            vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 3u)).x));
                            _2787 = fma(_1907, _2775.z, fma(_1906, _2775.y, _2775.x * _1905)) + _2775.w;
                            _2788 = !((fma(_1907, _2756.z, fma(_1906, _2756.y, _2756.x * _1905)) + _2756.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2788)
                            {
                                float _2815 = _2680.x - _1905;
                                float _2816 = _2680.y - _1906;
                                float _2817 = _2680.z - _1907;
                                float _2818 = dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817));
                                float _2821 = inversesqrt(_2818);
                                float _2822 = _2821 * _2815;
                                float _2823 = _2821 * _2816;
                                float _2824 = _2821 * _2817;
                                float _2828 = 1.0 - (_2818 / (_2681 * _2681));
                                float _3806 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                                float _2829 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
                                float _2833 = sqrt(_2818) * _2696.w;
                                float _2835 = 1.39999997615814208984375 / (_2833 + 1.39999997615814208984375);
                                float _2836 = _2835 * _2835;
                                float _2839 = ((1.0 - _2836) * dot(vec3(_2822, _2823, _2824), vec3(_391, _394, _397))) + _2836;
                                float _2842 = _2833 * _2833;
                                float _2846 = (fma(_1907, _2724.z, fma(_1906, _2724.y, _2724.x * _1905)) + _2724.w) / _2787;
                                float _2847 = (fma(_1907, _2740.z, fma(_1906, _2740.y, _2740.x * _1905)) + _2740.w) / _2787;
                                float _2851 = 1.0 - dot(vec2(_2846, _2847), vec2(_2846, _2847));
                                float _3822 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                                float _2852 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
                                float _2853 = _2852 * (((isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0))) * _2829) / ((_2842 * 0.699999988079071044921875) + 1.0));
                                float _2865 = exp2(log2(1.0 / ((_2842 * 3.5) + 5.0)) * 0.25);
                                float _2866 = 1.0 - _467;
                                float _2873 = sqrt(1.0 - ((1.0 - (_2866 * _2866)) * (1.0 - (_2865 * _2865))));
                                float _2874 = _2873 * _2873;
                                float _2875 = _2874 * _2874;
                                float _2876 = _2822 - _2220;
                                float _2877 = _2823 - _2221;
                                float _2878 = _2824 - _2222;
                                float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
                                float _2886 = dot(vec3(_391, _394, _397), vec3((-0.0) - _2220, (-0.0) - _2221, (-0.0) - _2222));
                                float _3833 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                                float _2889 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
                                float _2890 = dot(vec3(_391, _394, _397), vec3(_2882 * _2876, _2882 * _2877, _2882 * _2878));
                                float _3844 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                                float _2893 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
                                float _2897 = ((_2893 * _2893) * (_2875 + (-1.0))) + 1.0;
                                float _2898 = _2835 * _2874;
                                float _2899 = _2898 * _2898;
                                float _2905 = ((1.0 - _2899) * dot(vec3(_391, _394, _397), vec3(_2822, _2823, _2824))) + _2899;
                                float _3855 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                                float _2906 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
                                float _2907 = 1.0 - _2874;
                                float _2917 = (0.5 / (((_2906 * ((_2889 * _2907) + _2874)) + 9.9999999392252902907785028219223e-09) + (((_2906 * _2907) + _2874) * _2889))) * _2906;
                                float _3866 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                                float _2927 = (_2852 * _2829) * (((_2875 * 3.1415927410125732421875) * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) / ((_2897 * _2897) * ((_2842 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2853 * _2696.x;
                                frontier_phi_75_pred_1 = _2853 * _2696.z;
                                frontier_phi_75_pred_2 = _2853 * _2696.y;
                                frontier_phi_75_pred_3 = _2927 * _2708.z;
                                frontier_phi_75_pred_4 = _2927 * _2708.y;
                                frontier_phi_75_pred_5 = _2927 * _2708.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2934 = frontier_phi_75_pred;
                            _2936 = frontier_phi_75_pred_1;
                            _2935 = frontier_phi_75_pred_2;
                            _2933 = frontier_phi_75_pred_3;
                            _2932 = frontier_phi_75_pred_4;
                            _2931 = frontier_phi_75_pred_5;
                            _2638 = _2934 + _2651;
                            _2639 = _2935 + _2652;
                            _2640 = _2936 + _2653;
                            _2635 = _2931 + _2648;
                            _2636 = _2932 + _2649;
                            _2637 = _2933 + _2650;
                            if (_2655 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2648 = _2635;
                                _2649 = _2636;
                                _2650 = _2637;
                                _2651 = _2638;
                                _2652 = _2639;
                                _2653 = _2640;
                                _2654 = _2655;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2640;
                        frontier_phi_69_pred_1 = _2639;
                        frontier_phi_69_pred_2 = _2638;
                        frontier_phi_69_pred_3 = _2637;
                        frontier_phi_69_pred_4 = _2636;
                        frontier_phi_69_pred_5 = _2635;
                    }
                    _2205 = frontier_phi_69_pred;
                    _2203 = frontier_phi_69_pred_1;
                    _2201 = frontier_phi_69_pred_2;
                    _2199 = frontier_phi_69_pred_3;
                    _2197 = frontier_phi_69_pred_4;
                    _2195 = frontier_phi_69_pred_5;
                    uint _2412 = _2411 + 1u;
                    if (_2412 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2405 = _2195;
                        _2406 = _2197;
                        _2407 = _2199;
                        _2408 = _2201;
                        _2409 = _2203;
                        _2410 = _2205;
                        _2411 = _2412;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _2197;
                frontier_phi_44_45_ladder_1 = _2205;
                frontier_phi_44_45_ladder_2 = _2203;
                frontier_phi_44_45_ladder_3 = _2201;
                frontier_phi_44_45_ladder_4 = _2199;
                frontier_phi_44_45_ladder_5 = _2195;
            }
            else
            {
                frontier_phi_44_45_ladder = _2043;
                frontier_phi_44_45_ladder_1 = _2051;
                frontier_phi_44_45_ladder_2 = _2049;
                frontier_phi_44_45_ladder_3 = _2047;
                frontier_phi_44_45_ladder_4 = _2045;
                frontier_phi_44_45_ladder_5 = _2041;
            }
            _2194 = frontier_phi_44_45_ladder_5;
            _2196 = frontier_phi_44_45_ladder;
            _2198 = frontier_phi_44_45_ladder_4;
            _2200 = frontier_phi_44_45_ladder_3;
            _2202 = frontier_phi_44_45_ladder_2;
            _2204 = frontier_phi_44_45_ladder_1;
        }
        float _2209 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
        _1964 = (_2209 * _2200) + _1679;
        _1966 = (_2209 * _2202) + _1680;
        _1968 = (_2209 * _2204) + _1681;
        _1970 = ((_2194 * _436) * _2209) + _1846;
        _1972 = ((_2196 * _438) * _2209) + _1847;
        _1974 = ((_2198 * _439) * _2209) + _1848;
    }
    else
    {
        _1964 = _1679;
        _1966 = _1680;
        _1968 = _1681;
        _1970 = _1846;
        _1972 = _1847;
        _1974 = _1848;
    }
    float _3882 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3893 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3904 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3915 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _1992 = ((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1964 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _451))) + ((_1970 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1292)) * cbPerFrame._m0[3u].x);
    float _1993 = ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1966 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _451))) + ((_1972 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1292)) * cbPerFrame._m0[3u].x);
    float _1994 = ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1968 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _451))) + ((_1974 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1292)) * cbPerFrame._m0[3u].x);
    float _1999 = cbInstanceData._m0[_410 + 6u].w * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)));
    float _2004 = _370 / cbSceneParam._m0[86u].x;
    float _2005 = _371 / cbSceneParam._m0[86u].y;
    vec4 _2019 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2004, _2005, (log2((isnan(cbSceneParam._m0[77u].w) ? _291 : (isnan(_291) ? cbSceneParam._m0[77u].w : min(_291, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2021 = _2019.x;
    float _2022 = _2019.y;
    float _2023 = _2019.z;
    float _2024 = _2019.w;
    float _2105;
    float _2107;
    float _2109;
    float _2111;
    if (_291 > cbSceneParam._m0[78u].w)
    {
        float _2066 = isnan(_291) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _291 : min(cbSceneParam._m0[80u].w, _291));
        float _2067 = _2066 / _291;
        float _2078 = _2067 * _342;
        float _2079 = _343 * _2067;
        float _2080 = (-0.0) - _2079;
        float _2082 = _2067 * _344;
        float _2084 = (cbSceneParam._m0[77u].w * _2080) / _2066;
        float _2085 = _2084 + cbSceneParam._m0[79u].w;
        float _2086 = cbSceneParam._m0[79u].w - _2079;
        float _2092 = sqrt(((_2078 * _2078) + (_2079 * _2079)) + (_2082 * _2082));
        float _2095 = (1.0 - (cbSceneParam._m0[77u].w / _2066)) * _2092;
        float _2101 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2103 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2336;
        if (abs((_2080 - _2084) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2336 = ((((_2085 > 0.0) ? exp2(_2101 * _2085) : (2.0 - exp2(_2103 * _2085))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2095;
        }
        else
        {
            float _2255 = 1.0 / cbSceneParam._m0[80u].x;
            float _2256 = isnan(_2086) ? _2085 : (isnan(_2085) ? _2086 : max(_2085, _2086));
            float _2257 = isnan(_2086) ? _2085 : (isnan(_2085) ? _2086 : min(_2085, _2086));
            float _2266 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : min(_2256, 0.0));
            float _2267 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : min(_2257, 0.0));
            _2336 = ((abs(_2092 / _2080) * cbSceneParam._m0[80u].y) * ((((_2266 - _2267) * 2.0) - ((exp2(_2101 * (isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0)))) - exp2(_2101 * (isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))))) * _2255)) - ((exp2(_2103 * _2266) - exp2(_2103 * _2267)) * _2255))) + (_2095 * cbSceneParam._m0[80u].z);
        }
        vec4 _2338 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2004, _2005, 1.0), 0.0);
        float _2347 = exp2((_2336 * (-1.44269502162933349609375)) * (1.0 - _2338.w));
        float _2348 = log2(_2347);
        float _2364 = log2(_2024);
        _2105 = (exp2(_2364 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2348 * cbSceneParam._m0[78u].x)) * _2338.x) / cbSceneParam._m0[78u].x)) + _2021;
        _2107 = (exp2(_2364 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2348 * cbSceneParam._m0[78u].y)) * _2338.y) / cbSceneParam._m0[78u].y)) + _2022;
        _2109 = (exp2(_2364 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2348 * cbSceneParam._m0[78u].z)) * _2338.z) / cbSceneParam._m0[78u].z)) + _2023;
        _2111 = _2347 * _2024;
    }
    else
    {
        _2105 = _2021;
        _2107 = _2022;
        _2109 = _2023;
        _2111 = _2024;
    }
    bool _2374;
    vec4 _2121;
    vec4 _2143;
    float _2145;
    float _2149;
    float _2150;
    float _2151;
    float _2152;
    bool _2162;
    for (;;)
    {
        _2121 = cbMatDynParam._m0[0u];
        float _2123 = roundEven(_2121.y);
        bool _2124 = _2123 == 3.0;
        float _2125 = log2(_2111);
        float _2132 = exp2(_2125 * cbSceneParam._m0[78u].x) * _1992;
        float _2133 = exp2(_2125 * cbSceneParam._m0[78u].y) * _1993;
        float _2134 = exp2(_2125 * cbSceneParam._m0[78u].z) * _1994;
        float _2141 = _358 + (-0.5);
        _2143 = cbMtdParam._m0[1u];
        _2145 = _2143.y * _2141;
        float _2148 = (_2123 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2149 = _2148 * (_2124 ? _2132 : (_2132 + (cbSceneParam._m0[72u].w * _2105)));
        _2150 = _2148 * (_2124 ? _2133 : (_2133 + (cbSceneParam._m0[72u].w * _2107)));
        _2151 = _2148 * (_2124 ? _2134 : (_2134 + (cbSceneParam._m0[72u].w * _2109)));
        _2152 = _2141 * 0.999000012874603271484375;
        _2162 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2162)
        {
            if ((cbInstanceData._m0[_410 + 7u].x + _2152) < 0.5)
            {
                _2374 = true;
                break;
            }
        }
        uint _2290 = _412 + uint(_2121.w);
        if ((cbInstanceData._m0[_2290].w < 1.0) && ((cbInstanceData._m0[_2290].w + _2152) < 0.5))
        {
            _2374 = true;
            break;
        }
        if ((_2145 + 1.0) < _2143.x)
        {
            _2374 = true;
            break;
        }
        _2374 = false;
        break;
    }
    float _2605;
    if (_2374)
    {
        discard_state = true;
        _2605 = 0.0;
    }
    else
    {
        _2605 = _1999;
    }
    SV_Target.x = _2149;
    SV_Target.y = _2150;
    SV_Target.z = _2151;
    SV_Target.w = _2605;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1999;
    discard_exit();
}


