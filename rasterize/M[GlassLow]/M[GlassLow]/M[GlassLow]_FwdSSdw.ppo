#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_GlassLow_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _809;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(M_GlassLow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = (_226.x * 2.0) + (-1.0);
    float _237 = (_226.y * 2.0) + (-1.0);
    float _238 = dot(vec2(_235, _237), vec2(_235, _237));
    float _2971 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _244 = sqrt(1.0 - (isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0))));
    float _249 = ((cbMtdParam._m0[10u].y + _226.z) * 0.5) + cbMtdParam._m0[10u].x;
    float _252 = fma(_244, _190 * NORMAL.x, fma(_237, _197 * TANGENT.x, (_183 * _176) * _235));
    float _255 = fma(_244, _190 * NORMAL.y, fma(_237, _197 * TANGENT.y, (_183 * _177) * _235));
    float _258 = fma(_244, _190 * NORMAL.z, fma(_237, _197 * TANGENT.z, (_183 * _178) * _235));
    float _262 = inversesqrt(dot(vec3(_252, _255, _258), vec3(_252, _255, _258)));
    float _263 = _262 * _252;
    float _264 = _262 * _255;
    float _265 = _262 * _258;
    float _2982 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _266 = isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0));
    float _2993 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _267 = isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0));
    float _3004 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3015 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3026 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3037 = isnan(0.0) ? cbMtdParam._m0[10u].w : (isnan(cbMtdParam._m0[10u].w) ? 0.0 : max(cbMtdParam._m0[10u].w, 0.0));
    float _271 = isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0));
    float _287 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _328 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _338 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _328);
    float _339 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _328);
    float _340 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _328);
    float _344 = inversesqrt(dot(vec3(_338, _339, _340), vec3(_338, _339, _340)));
    float _345 = _338 * _344;
    float _346 = _339 * _344;
    float _347 = _340 * _344;
    float _353 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _354 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _375 = fma(_265, cbSceneParam._m0[5u].z, fma(_264, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _263));
    float _378 = fma(_265, cbSceneParam._m0[6u].z, fma(_264, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _263));
    float _381 = fma(_265, cbSceneParam._m0[7u].z, fma(_264, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _263));
    uint _394 = uint(roundEven(NORMAL.w)) * 13u;
    uint _397 = (_394 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _403 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0)))) * cbInstanceData._m0[_397].x;
    float _404 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0)))) * cbInstanceData._m0[_397].y;
    float _405 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0)))) * cbInstanceData._m0[_397].z;
    float _3048 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _406 = isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0));
    float _3059 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _407 = isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0));
    float _3070 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _408 = isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0));
    float _409 = 1.0 - _271;
    float _410 = _406 * _409;
    float _411 = _407 * _409;
    float _412 = _408 * _409;
    float _417 = (_406 + (-0.039999999105930328369140625)) * _271;
    float _418 = (_407 + (-0.039999999105930328369140625)) * _271;
    float _419 = (_408 + (-0.039999999105930328369140625)) * _271;
    float _420 = _417 + 0.039999999105930328369140625;
    float _422 = _418 + 0.039999999105930328369140625;
    float _423 = _419 + 0.039999999105930328369140625;
    vec4 _432 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _353, cbSceneParam._m0[86u].y * _354));
    float _435 = _432.x * TEXCOORD.z;
    float _436 = dot(vec3(_263, _264, _265), vec3(_345, _346, _347));
    float _439 = _436 * 2.0;
    float _443 = (_439 * _263) - _345;
    float _444 = (_439 * _264) - _346;
    float _445 = (_439 * _265) - _347;
    float _449 = abs(dot(vec3(_345, _346, _347), vec3(_263, _264, _265)));
    float _3081 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _451 = sqrt(_267);
    float _464 = exp2((_451 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_451 * 3.0));
    float _470 = (1.0 - _464) * ((_451 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _471 = _464 * _451;
    float _499 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _503 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _808;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _534 = fma(_507, cbModelParam._m0[26u].z, fma(_503, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _499));
        float _538 = fma(_507, cbModelParam._m0[27u].z, fma(_503, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _499));
        float _542 = fma(_507, cbModelParam._m0[28u].z, fma(_503, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _499));
        float _566 = _499 + _263;
        float _567 = _503 + _264;
        float _568 = _507 + _265;
        float _578 = fma(_568, cbModelParam._m0[26u].z, fma(_567, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _566)) - _534;
        float _579 = fma(_568, cbModelParam._m0[27u].z, fma(_567, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _566)) - _538;
        float _580 = fma(_568, cbModelParam._m0[28u].z, fma(_567, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _566)) - _542;
        float _584 = inversesqrt(dot(vec3(_578, _579, _580), vec3(_578, _579, _580)));
        float _597 = ((_584 * _578) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_534 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _598 = ((_584 * _579) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_538 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _599 = ((_584 * _580) / cbModelParam._m0[34u].z) + ((((((_542 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _602 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_597, _598, _599), 0.0);
        vec4 _609 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_597, _598, _599), 0.0);
        vec4 _616 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_597, _598, _599), 0.0);
        vec4 _623 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_597, _598, _599), 0.0);
        float _636 = exp2((_602.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_602.x + (-0.5));
        float _638 = _636 * (_602.y + (-0.5));
        float _639 = _636 * (_602.z + (-0.5));
        float _646 = exp2((_609.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_609.x + (-0.5));
        float _648 = _646 * (_609.y + (-0.5));
        float _649 = _646 * (_609.z + (-0.5));
        float _656 = exp2((_616.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_616.x + (-0.5));
        float _658 = _656 * (_616.y + (-0.5));
        float _659 = _656 * (_616.z + (-0.5));
        float _666 = exp2((_623.w + (-0.5)) * 20.0) * 2.0;
        float _667 = _666 * (_623.x + (-0.5));
        float _668 = _666 * (_623.y + (-0.5));
        float _669 = _666 * (_623.z + (-0.5));
        float _670 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _671 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _672 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _673 = _637 * 0.5;
        float _674 = _647 * 0.5;
        float _675 = _657 * 0.5;
        float _676 = dot(vec3(_673, _674, _675), vec3(_673, _674, _675));
        float _681 = (_676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_676);
        float _690 = (dot(vec3(_263, _264, _265), vec3(_681 * _673, _681 * _674, _681 * _675)) + 1.0) * 0.5;
        float _3107 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _700 = sqrt(((_674 * _674) + (_673 * _673)) + (_675 * _675)) / (_670 + 9.9999997473787516355514526367188e-06);
        float _3118 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0));
        float _702 = _701 * 2.0;
        float _706 = (1.0 - _701) / (_701 + 1.0);
        float _3129 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0));
        float _716 = ((((1.0 - _707) * (_702 + 2.0)) * exp2(log2(isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0))) * (_702 + 1.0))) + _707) * _670;
        float _717 = _638 * 0.5;
        float _718 = _648 * 0.5;
        float _719 = _658 * 0.5;
        float _720 = dot(vec3(_717, _718, _719), vec3(_717, _718, _719));
        float _725 = (_720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_720);
        float _733 = (dot(vec3(_263, _264, _265), vec3(_725 * _717, _725 * _718, _725 * _719)) + 1.0) * 0.5;
        float _3140 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _742 = sqrt(((_718 * _718) + (_717 * _717)) + (_719 * _719)) / (_671 + 9.9999997473787516355514526367188e-06);
        float _3151 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0));
        float _744 = _743 * 2.0;
        float _748 = (1.0 - _743) / (_743 + 1.0);
        float _3162 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0));
        float _758 = ((((1.0 - _749) * (_744 + 2.0)) * exp2(log2(isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0))) * (_744 + 1.0))) + _749) * _671;
        float _759 = _639 * 0.5;
        float _760 = _649 * 0.5;
        float _761 = _659 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _775 = (dot(vec3(_263, _264, _265), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3173 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _784 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_672 + 9.9999997473787516355514526367188e-06);
        float _3184 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3195 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0))) * (_786 + 1.0))) + _791) * _672;
        _808 = _639;
        _810 = _638;
        _811 = _637;
        _812 = _649;
        _813 = _648;
        _814 = _647;
        _815 = _659;
        _816 = _658;
        _817 = _657;
        _818 = _672;
        _819 = _671;
        _820 = _670;
        _821 = cbModelParam._m0[36u].z * (isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0)));
        _822 = cbModelParam._m0[36u].z * (isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0)));
        _823 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
    }
    else
    {
        _808 = _809;
        _810 = _809;
        _811 = _809;
        _812 = _809;
        _813 = _809;
        _814 = _809;
        _815 = _809;
        _816 = _809;
        _817 = _809;
        _818 = _809;
        _819 = _809;
        _820 = _809;
        _821 = 0.0;
        _822 = 0.0;
        _823 = 0.0;
    }
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _849 = fma(_507, cbModelParam._m0[30u].z, fma(_503, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _499));
        float _853 = fma(_507, cbModelParam._m0[31u].z, fma(_503, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _499));
        float _857 = fma(_507, cbModelParam._m0[32u].z, fma(_503, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _499));
        float _880 = _499 + _263;
        float _881 = _503 + _264;
        float _882 = _507 + _265;
        float _892 = fma(_882, cbModelParam._m0[30u].z, fma(_881, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _880)) - _849;
        float _893 = fma(_882, cbModelParam._m0[31u].z, fma(_881, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _880)) - _853;
        float _894 = fma(_882, cbModelParam._m0[32u].z, fma(_881, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _880)) - _857;
        float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
        float _911 = ((_898 * _892) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_849 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_898 * _893) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_853 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_898 * _894) / cbModelParam._m0[35u].z) + ((((((_857 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        float _948 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_915.x + (-0.5));
        float _950 = _948 * (_915.y + (-0.5));
        float _951 = _948 * (_915.z + (-0.5));
        float _958 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_922.x + (-0.5));
        float _960 = _958 * (_922.y + (-0.5));
        float _961 = _958 * (_922.z + (-0.5));
        float _968 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_929.x + (-0.5));
        float _970 = _968 * (_929.y + (-0.5));
        float _971 = _968 * (_929.z + (-0.5));
        float _978 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_936.x + (-0.5));
        float _980 = _978 * (_936.y + (-0.5));
        float _981 = _978 * (_936.z + (-0.5));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = _949 * 0.5;
        float _986 = _959 * 0.5;
        float _987 = _969 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_263, _264, _265), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3236 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3247 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3258 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0))) * (_1012 + 1.0))) + _1017) * _982;
        float _1027 = _950 * 0.5;
        float _1028 = _960 * 0.5;
        float _1029 = _970 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_263, _264, _265), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3269 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3280 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3291 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0))) * (_1054 + 1.0))) + _1059) * _983;
        float _1069 = _951 * 0.5;
        float _1070 = _961 * 0.5;
        float _1071 = _971 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_263, _264, _265), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3302 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3313 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3324 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))) * (_1096 + 1.0))) + _1101) * _984;
        _1118 = _951;
        _1119 = _950;
        _1120 = _949;
        _1121 = _961;
        _1122 = _960;
        _1123 = _959;
        _1124 = _971;
        _1125 = _970;
        _1126 = _969;
        _1127 = _984;
        _1128 = _983;
        _1129 = _982;
        _1130 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1131 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1132 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
    }
    else
    {
        _1118 = _809;
        _1119 = _809;
        _1120 = _809;
        _1121 = _809;
        _1122 = _809;
        _1123 = _809;
        _1124 = _809;
        _1125 = _809;
        _1126 = _809;
        _1127 = _809;
        _1128 = _809;
        _1129 = _809;
        _1130 = 0.0;
        _1131 = 0.0;
        _1132 = 0.0;
    }
    float _1142 = (cbModelParam._m0[1u].x * (_1130 - _821)) + _821;
    float _1143 = (cbModelParam._m0[1u].x * (_1131 - _822)) + _822;
    float _1144 = (cbModelParam._m0[1u].x * (_1132 - _823)) + _823;
    float _1165 = fma(_1144, cbSceneParam._m0[89u].z, fma(_1143, cbSceneParam._m0[89u].y, _1142 * cbSceneParam._m0[89u].x));
    float _1168 = fma(_1144, cbSceneParam._m0[90u].z, fma(_1143, cbSceneParam._m0[90u].y, _1142 * cbSceneParam._m0[90u].x));
    float _1171 = fma(_1144, cbSceneParam._m0[91u].z, fma(_1143, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1142));
    float _1186 = _443 * 0.5;
    float _1187 = _444 * 0.5;
    float _1188 = _445 * 0.5;
    float _1189 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_1120, _1123, _1126, _1129));
    float _1192 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_1119, _1122, _1125, _1128));
    float _1195 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_1118, _1121, _1124, _1127));
    float _1229;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1202 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_808, _812, _815, _818));
        float _1206 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_810, _813, _816, _819));
        float _1210 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_811, _814, _817, _820));
        float _1217 = dot(vec4(cbModelParam._m0[39u]), vec4(_1186, _1187, _1188, 1.0));
        _1229 = dot(vec3(isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)), isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)), isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1217) ? 0.0 : (isnan(0.0) ? _1217 : max(0.0, _1217))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1229 = 1.0;
    }
    float _1240;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1231 = dot(vec4(cbModelParam._m0[40u]), vec4(_1186, _1187, _1188, 1.0));
        _1240 = dot(vec3(isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)), isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1231) ? 0.0 : (isnan(0.0) ? _1231 : max(0.0, _1231))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1240 = 1.0;
    }
    float _1244 = (_1240 * cbModelParam._m0[1u].x) + (_1229 * (1.0 - cbModelParam._m0[1u].x));
    float _1254 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _267);
    float _1255 = isnan(_1254) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1254 : min(cbModelParam._m0[25u].z, _1254));
    float _1337;
    float _1339;
    float _1341;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1304 = fma(_507, cbModelParam._m0[13u].z, fma(_503, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _499)) + cbModelParam._m0[13u].w;
        float _1308 = fma(_507, cbModelParam._m0[14u].z, fma(_503, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _499)) + cbModelParam._m0[14u].w;
        float _1312 = fma(_507, cbModelParam._m0[15u].z, fma(_503, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _499)) + cbModelParam._m0[15u].w;
        float _1315 = fma(_445, cbModelParam._m0[13u].z, fma(_444, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _443));
        float _1318 = fma(_445, cbModelParam._m0[14u].z, fma(_444, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _443));
        float _1321 = fma(_445, cbModelParam._m0[15u].z, fma(_444, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _443));
        float _1349;
        if (_1315 > 0.0)
        {
            _1349 = abs((1.0 - _1304) / _1315);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1315 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1304 + 1.0) / _1315);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1349 = frontier_phi_14_12_ladder;
        }
        float _1806;
        if (_1318 > 0.0)
        {
            _1806 = abs((1.0 - _1308) / _1318);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1318 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1308 + 1.0) / _1318);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1806 = frontier_phi_23_19_ladder;
        }
        float _2107;
        if (_1321 > 0.0)
        {
            _2107 = abs((1.0 - _1312) / _1321);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1312 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2107 = frontier_phi_37_30_ladder;
        }
        float _2109 = isnan(_1806) ? _1349 : (isnan(_1349) ? _1806 : min(_1349, _1806));
        float _2110 = isnan(_2107) ? _2109 : (isnan(_2109) ? _2107 : min(_2109, _2107));
        float _2114 = (_2110 * _1315) + _1304;
        float _2115 = (_2110 * _1318) + _1308;
        float _2116 = (_2110 * _1321) + _1312;
        float _2117 = _2110 * 9.9999997473787516355514526367188e-05;
        float _2118 = (-1.0) - _2117;
        float _2120 = _2117 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2116 > _2120) || ((_2116 < _2118) || ((_2115 > _2120) || ((_2115 < _2118) || ((_2114 < _2118) || (_2114 > _2120))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2242 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2116, cbModelParam._m0[9u].z, fma(_2115, cbModelParam._m0[9u].y, _2114 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2116, cbModelParam._m0[10u].z, fma(_2115, cbModelParam._m0[10u].y, _2114 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2116, cbModelParam._m0[11u].z, fma(_2115, cbModelParam._m0[11u].y, _2114 * cbModelParam._m0[11u].x))), _1255);
            frontier_phi_13_37_ladder = _2242.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2242.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2242.x * cbModelParam._m0[1u].y;
        }
        _1337 = frontier_phi_13_37_ladder_2;
        _1339 = frontier_phi_13_37_ladder_1;
        _1341 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1325 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_443, _444, _445), _1255);
        _1337 = _1325.x * cbModelParam._m0[1u].y;
        _1339 = _1325.y * cbModelParam._m0[1u].y;
        _1341 = _1325.z * cbModelParam._m0[1u].y;
    }
    float _1345 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _267);
    float _1346 = isnan(_1345) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1345 : min(cbModelParam._m0[25u].w, _1345));
    float _1439;
    float _1441;
    float _1443;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1403 = fma(_507, cbModelParam._m0[21u].z, fma(_503, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _499)) + cbModelParam._m0[21u].w;
        float _1407 = fma(_507, cbModelParam._m0[22u].z, fma(_503, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _499)) + cbModelParam._m0[22u].w;
        float _1411 = fma(_507, cbModelParam._m0[23u].z, fma(_503, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _499)) + cbModelParam._m0[23u].w;
        float _1414 = fma(_445, cbModelParam._m0[21u].z, fma(_444, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _443));
        float _1417 = fma(_445, cbModelParam._m0[22u].z, fma(_444, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _443));
        float _1420 = fma(_445, cbModelParam._m0[23u].z, fma(_444, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _443));
        float _1811;
        if (_1414 > 0.0)
        {
            _1811 = abs((1.0 - _1403) / _1414);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1403 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1811 = frontier_phi_25_21_ladder;
        }
        float _2133;
        if (_1417 > 0.0)
        {
            _2133 = abs((1.0 - _1407) / _1417);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1407 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2133 = frontier_phi_39_32_ladder;
        }
        float _2302;
        if (_1420 > 0.0)
        {
            _2302 = abs((1.0 - _1411) / _1420);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1411 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2302 = frontier_phi_53_48_ladder;
        }
        float _2304 = isnan(_2133) ? _1811 : (isnan(_1811) ? _2133 : min(_1811, _2133));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1414) + _1403;
        float _2310 = (_2305 * _1417) + _1407;
        float _2311 = (_2305 * _1420) + _1411;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2313 = (-1.0) - _2312;
        float _2315 = _2312 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2311 > _2315) || ((_2311 < _2313) || ((_2310 > _2315) || ((_2310 < _2313) || ((_2309 < _2313) || (_2309 > _2315))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2544 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2311, cbModelParam._m0[17u].z, fma(_2310, cbModelParam._m0[17u].y, _2309 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2311, cbModelParam._m0[18u].z, fma(_2310, cbModelParam._m0[18u].y, _2309 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2311, cbModelParam._m0[19u].z, fma(_2310, cbModelParam._m0[19u].y, _2309 * cbModelParam._m0[19u].x))), _1346);
            frontier_phi_22_53_ladder = _2544.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _2544.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _2544.x * cbModelParam._m0[1u].z;
        }
        _1439 = frontier_phi_22_53_ladder_2;
        _1441 = frontier_phi_22_53_ladder;
        _1443 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1423 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_443, _444, _445), _1346);
        _1439 = _1423.x * cbModelParam._m0[1u].z;
        _1441 = _1423.y * cbModelParam._m0[1u].z;
        _1443 = _1423.z * cbModelParam._m0[1u].z;
    }
    float _1456 = (((_470 * _420) + _471) * _435) * ((cbModelParam._m0[1u].w * (_1439 - _1337)) + _1337);
    float _1458 = (((_470 * _422) + _471) * _435) * ((cbModelParam._m0[1u].w * (_1441 - _1339)) + _1339);
    float _1460 = (((_470 * _423) + _471) * _435) * ((cbModelParam._m0[1u].w * (_1443 - _1341)) + _1341);
    float _1463 = fma(_1460, cbSceneParam._m0[89u].z, fma(_1458, cbSceneParam._m0[89u].y, _1456 * cbSceneParam._m0[89u].x));
    float _1466 = fma(_1460, cbSceneParam._m0[90u].z, fma(_1458, cbSceneParam._m0[90u].y, _1456 * cbSceneParam._m0[90u].x));
    float _1469 = fma(_1460, cbSceneParam._m0[91u].z, fma(_1458, cbSceneParam._m0[91u].y, _1456 * cbSceneParam._m0[91u].x));
    vec4 _1477 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_353, _354));
    float _1479 = _1477.w;
    float _1509 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1513 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1552 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _1509), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _1513))).x));
    float _3450 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
    float _1557 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _1509), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _1513))).x));
    float _3461 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
    float _1559 = (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)));
    float _1560 = _1559 * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1479));
    float _1561 = _1559 * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1479));
    float _1562 = _1559 * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1479));
    uvec4 _1566 = floatBitsToUint(cbInstanceData._m0[_394 + 5u]);
    uint _1568 = _1566.x * 14u;
    uint _1569 = _1568 + 13u;
    float _1574 = _435 + (-1.0);
    float _1577 = (cbLight._m0[_1569].x * _1574) + 1.0;
    float _1578 = (cbLight._m0[_1569].y * _1574) + 1.0;
    uint _1579 = _1568 + 5u;
    float _1585 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
    uint _1589 = _1568 + 4u;
    float _1599 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
    uint _1603 = _1568 | 1u;
    float _1614 = dot(vec3(cbLight._m0[_1568].xyz), vec3(_263, _264, _265));
    float _1617 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_263, _264, _265));
    float _3482 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _3493 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1622 = (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * 0.3183098733425140380859375;
    float _1624 = (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * 0.3183098733425140380859375;
    float _1631 = ((cbLight._m0[_1579].x * _1585) * _1624) + (((cbLight._m0[_1589].x * _1560) * _1599) * _1622);
    float _1632 = ((_1585 * cbLight._m0[_1579].y) * _1624) + (((cbLight._m0[_1589].y * _1561) * _1599) * _1622);
    float _1633 = ((_1585 * cbLight._m0[_1579].z) * _1624) + (((cbLight._m0[_1589].z * _1562) * _1599) * _1622);
    uint _1635 = _1568 + 8u;
    float _1648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1568].w)) * _267) * 0.949999988079071044921875);
    float _1649 = _1648 * _1648;
    float _1650 = cbLight._m0[_1568].x + _345;
    float _1651 = cbLight._m0[_1568].y + _346;
    float _1652 = cbLight._m0[_1568].z + _347;
    float _1656 = inversesqrt(dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652)));
    float _1657 = _1656 * _1650;
    float _1658 = _1656 * _1651;
    float _1659 = _1656 * _1652;
    float _1660 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1568].xyz));
    float _3504 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1663 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _1664 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _1665 = dot(vec3(_263, _264, _265), vec3(_1657, _1658, _1659));
    float _3526 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1668 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _1669 = dot(vec3(cbLight._m0[_1568].xyz), vec3(_1657, _1658, _1659));
    float _3537 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1673 = _1649 * _1649;
    float _1677 = ((_1668 * _1668) * (_1673 + (-1.0))) + 1.0;
    float _1685 = exp2(log2(1.0 - (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) * 5.0);
    float _1686 = 0.959999978542327880859375 - _417;
    float _1688 = 0.959999978542327880859375 - _418;
    float _1689 = 0.959999978542327880859375 - _419;
    float _1696 = 1.0 - _1649;
    float _1707 = (0.5 / (((_1664 * ((_1663 * _1696) + _1649)) + 9.9999999392252902907785028219223e-09) + (((_1664 * _1696) + _1649) * _1663))) * _1663;
    float _3548 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1709 = (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_1673 / ((_1677 * _1677) * 3.141590118408203125));
    uint _1723 = _1568 + 9u;
    float _1734 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1603].w)) * _267) * 0.949999988079071044921875);
    float _1735 = _1734 * _1734;
    float _1736 = cbLight._m0[_1603].x + _345;
    float _1737 = cbLight._m0[_1603].y + _346;
    float _1738 = cbLight._m0[_1603].z + _347;
    float _1742 = inversesqrt(dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738)));
    float _1743 = _1742 * _1736;
    float _1744 = _1742 * _1737;
    float _1745 = _1742 * _1738;
    float _1746 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1603].xyz));
    float _3559 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1749 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _1750 = dot(vec3(_263, _264, _265), vec3(_1743, _1744, _1745));
    float _3570 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _1754 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_1743, _1744, _1745));
    float _3581 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1758 = _1735 * _1735;
    float _1762 = ((_1753 * _1753) * (_1758 + (-1.0))) + 1.0;
    float _1769 = exp2(log2(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * 5.0);
    float _1776 = 1.0 - _1735;
    float _1786 = (0.5 / (((_1664 * ((_1749 * _1776) + _1735)) + 9.9999999392252902907785028219223e-09) + (((_1664 * _1776) + _1735) * _1749))) * _1749;
    float _3592 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1788 = (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_1758 / ((_1762 * _1762) * 3.141590118408203125));
    float _1798 = (((((_1769 * _1686) + _420) * cbLight._m0[_1723].x) * _1788) * _1585) + ((((cbLight._m0[_1635].x * _1560) * ((_1685 * _1686) + _420)) * _1709) * _1599);
    float _1799 = (((((_1769 * _1688) + _422) * cbLight._m0[_1723].y) * _1788) * _1585) + ((((cbLight._m0[_1635].y * _1561) * ((_1685 * _1688) + _422)) * _1709) * _1599);
    float _1800 = (((((_1769 * _1689) + _423) * cbLight._m0[_1723].z) * _1788) * _1585) + ((((cbLight._m0[_1635].z * _1562) * ((_1685 * _1689) + _423)) * _1709) * _1599);
    float _1916;
    float _1918;
    float _1920;
    float _1922;
    float _1924;
    float _1926;
    if (_1566.y == 0u)
    {
        float _1856 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1857 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1856;
        float _1858 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1856;
        float _1859 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1856;
        uvec4 _1871 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1872 = _1871.x;
        uint _1883 = uint((float(_1871.y) * floor(float(uint(cbSceneParam._m0[85u].y * _354) / _1872))) + floor(float(uint(cbSceneParam._m0[85u].x * _353) / _1872)));
        float _1893 = (log2(_1859 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1894 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        uint _1897 = uint(isnan(14.0) ? _1894 : (isnan(_1894) ? 14.0 : min(_1894, 14.0)));
        uvec4 _1902 = texelFetch(g_lightClusterGridBuffer, int(((_1897 << 2u) + (_1883 << 6u)) >> 2u));
        uint _1903 = _1902.x;
        uint _1904 = _1871.z;
        float _1993;
        float _1995;
        float _1997;
        float _1999;
        float _2001;
        float _2003;
        if (((((1u << ((_1904 >> 4u) & 15u)) + 4294967295u) & _1903) == 0u) || ((_1904 & 240u) == 0u))
        {
            _1993 = 0.0;
            _1995 = 0.0;
            _1997 = 0.0;
            _1999 = 0.0;
            _2001 = 0.0;
            _2003 = 0.0;
        }
        else
        {
            float _1994;
            float _1996;
            float _1998;
            float _2000;
            float _2002;
            float _2004;
            float _2170 = 0.0;
            float _2171 = 0.0;
            float _2172 = 0.0;
            float _2173 = 0.0;
            float _2174 = 0.0;
            float _2175 = 0.0;
            uint _2176 = 0u;
            uint _2185;
            bool _2186;
            for (;;)
            {
                _2185 = texelFetch(g_lightClassification, int((((_1897 << 5u) + (_1883 << 9u)) + (_2176 << 2u)) >> 2u)).x;
                _2186 = _2185 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2186)
                {
                    frontier_phi_50_pred = _2173;
                    frontier_phi_50_pred_1 = _2175;
                    frontier_phi_50_pred_2 = _2174;
                    frontier_phi_50_pred_3 = _2172;
                    frontier_phi_50_pred_4 = _2171;
                    frontier_phi_50_pred_5 = _2170;
                }
                else
                {
                    float _2345;
                    float _2346;
                    float _2347;
                    float _2348;
                    float _2349;
                    float _2350;
                    uint _2351;
                    _2345 = _2170;
                    _2346 = _2171;
                    _2347 = _2172;
                    _2348 = _2173;
                    _2349 = _2174;
                    _2350 = _2175;
                    _2351 = _2185;
                    float _2251;
                    float _2252;
                    float _2253;
                    float _2254;
                    float _2255;
                    float _2256;
                    for (;;)
                    {
                        uint _2355 = uint(findLSB(_2351)) + (_2176 << 5u);
                        uint _2352 = (_2351 + 4294967295u) & _2351;
                        uint _2357 = _2355 * 48u;
                        vec4 _2371 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2357)).x, texelFetch(g_PointLightRenderingBuffer, int(_2357 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2357 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2357 + 3u)).x));
                        uint _2377 = (_2355 * 48u) + 4u;
                        vec4 _2390 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2377)).x, texelFetch(g_PointLightRenderingBuffer, int(_2377 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2377 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2377 + 3u)).x));
                        uint _2396 = (_2355 * 48u) + 8u;
                        vec3 _2407 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2396)).x, texelFetch(g_PointLightRenderingBuffer, int(_2396 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2396 + 2u)).x));
                        float _2411 = _2371.x - _1857;
                        float _2412 = _2371.y - _1858;
                        float _2413 = _2371.z - _1859;
                        float _2414 = dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413));
                        float _2417 = inversesqrt(_2414);
                        float _2418 = _2417 * _2411;
                        float _2419 = _2417 * _2412;
                        float _2420 = _2417 * _2413;
                        float _2421 = dot(vec3(_375, _378, _381), vec3(_2418, _2419, _2420));
                        float _2426 = 1.0 - (_2414 * _2371.w);
                        float _3613 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
                        float _2427 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
                        float _2428 = sqrt(_2414) * _2390.w;
                        float _2431 = 1.39999997615814208984375 / (_2428 + 1.39999997615814208984375);
                        float _2432 = _2431 * _2431;
                        float _2435 = ((1.0 - _2432) * _2421) + _2432;
                        float _2438 = _2428 * _2428;
                        float _2442 = ((isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0))) * _2427) / ((_2438 * 0.699999988079071044921875) + 1.0);
                        float _2446 = (-0.0) - _1857;
                        float _2447 = (-0.0) - _1858;
                        float _2448 = (-0.0) - _1859;
                        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
                        float _2453 = _2452 * _2446;
                        float _2454 = _2452 * _2447;
                        float _2455 = _2452 * _2448;
                        float _2463 = exp2(log2(1.0 / ((_2438 * 3.5) + 5.0)) * 0.25);
                        float _2464 = 1.0 - _451;
                        float _2471 = sqrt(1.0 - ((1.0 - (_2464 * _2464)) * (1.0 - (_2463 * _2463))));
                        float _2472 = _2471 * _2471;
                        float _2473 = _2472 * _2472;
                        float _2474 = _2453 + _2418;
                        float _2475 = _2454 + _2419;
                        float _2476 = _2455 + _2420;
                        float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
                        float _2484 = dot(vec3(_375, _378, _381), vec3(_2453, _2454, _2455));
                        float _3629 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
                        float _2487 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
                        float _2488 = dot(vec3(_375, _378, _381), vec3(_2480 * _2474, _2480 * _2475, _2480 * _2476));
                        float _3640 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
                        float _2491 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
                        float _2495 = ((_2491 * _2491) * (_2473 + (-1.0))) + 1.0;
                        float _2496 = _2431 * _2472;
                        float _2497 = _2496 * _2496;
                        float _2500 = ((1.0 - _2497) * _2421) + _2497;
                        float _3651 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
                        float _2501 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
                        float _2502 = 1.0 - _2472;
                        float _2512 = (0.5 / (((_2501 * ((_2487 * _2502) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2502) + _2472) * _2487))) * _2501;
                        float _3662 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
                        float _2523 = (((_2473 * 3.1415927410125732421875) * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) / ((_2495 * _2495) * ((_2438 * 2.1991131305694580078125) + 3.141590118408203125))) * _2427;
                        _2254 = (_2442 * _2390.x) + _2348;
                        _2255 = (_2442 * _2390.y) + _2349;
                        _2256 = (_2442 * _2390.z) + _2350;
                        _2251 = (_2523 * _2407.x) + _2345;
                        _2252 = (_2523 * _2407.y) + _2346;
                        _2253 = (_2523 * _2407.z) + _2347;
                        if (_2352 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2345 = _2251;
                            _2346 = _2252;
                            _2347 = _2253;
                            _2348 = _2254;
                            _2349 = _2255;
                            _2350 = _2256;
                            _2351 = _2352;
                        }
                    }
                    frontier_phi_50_pred = _2254;
                    frontier_phi_50_pred_1 = _2256;
                    frontier_phi_50_pred_2 = _2255;
                    frontier_phi_50_pred_3 = _2253;
                    frontier_phi_50_pred_4 = _2252;
                    frontier_phi_50_pred_5 = _2251;
                }
                _2000 = frontier_phi_50_pred;
                _2004 = frontier_phi_50_pred_1;
                _2002 = frontier_phi_50_pred_2;
                _1998 = frontier_phi_50_pred_3;
                _1996 = frontier_phi_50_pred_4;
                _1994 = frontier_phi_50_pred_5;
                uint _2177 = _2176 + 1u;
                if (_2177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2170 = _1994;
                    _2171 = _1996;
                    _2172 = _1998;
                    _2173 = _2000;
                    _2174 = _2002;
                    _2175 = _2004;
                    _2176 = _2177;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1993 = _1994;
            _1995 = _1996;
            _1997 = _1998;
            _1999 = _2000;
            _2001 = _2002;
            _2003 = _2004;
        }
        uvec4 _2007 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2008 = _2007.z;
        uint _2010 = (_2008 >> 8u) & 15u;
        float _2138;
        float _2140;
        float _2142;
        float _2144;
        float _2146;
        float _2148;
        if (((4294967295u << _2010) & _1903) == 0u)
        {
            _2138 = _1993;
            _2140 = _1995;
            _2142 = _1997;
            _2144 = _1999;
            _2146 = _2001;
            _2148 = _2003;
        }
        else
        {
            float _2163 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
            float _2164 = _2163 * _1857;
            float _2165 = _2163 * _1858;
            float _2166 = _2163 * _1859;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2010 < ((_2008 >> 12u) & 15u))
            {
                float _2139;
                float _2141;
                float _2143;
                float _2145;
                float _2147;
                float _2149;
                float _2328 = _1993;
                float _2329 = _1995;
                float _2330 = _1997;
                float _2331 = _1999;
                float _2332 = _2001;
                float _2333 = _2003;
                uint _2334 = _2010;
                uint _2343;
                bool _2344;
                for (;;)
                {
                    _2343 = texelFetch(g_lightClassification, int((((_1897 << 5u) + (_1883 << 9u)) + (_2334 << 2u)) >> 2u)).x;
                    _2344 = _2343 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2344)
                    {
                        frontier_phi_59_pred = _2333;
                        frontier_phi_59_pred_1 = _2332;
                        frontier_phi_59_pred_2 = _2331;
                        frontier_phi_59_pred_3 = _2330;
                        frontier_phi_59_pred_4 = _2329;
                        frontier_phi_59_pred_5 = _2328;
                    }
                    else
                    {
                        float _2549;
                        float _2550;
                        float _2551;
                        float _2552;
                        float _2553;
                        float _2554;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2562 = _2328;
                        float _2563 = _2329;
                        float _2564 = _2330;
                        float _2565 = _2331;
                        float _2566 = _2332;
                        float _2567 = _2333;
                        uint _2568 = _2343;
                        uint _2569;
                        vec4 _2594;
                        float _2595;
                        vec4 _2610;
                        vec3 _2622;
                        vec4 _2638;
                        vec4 _2654;
                        float _2701;
                        bool _2702;
                        for (;;)
                        {
                            uint _2579 = ((_2334 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2568));
                            _2569 = (_2568 + 4294967295u) & _2568;
                            uint _2581 = _2579 * 40u;
                            _2594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 3u)).x));
                            _2595 = _2594.w;
                            uint _2597 = (_2579 * 40u) + 4u;
                            _2610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 3u)).x));
                            uint _2612 = (_2579 * 40u) + 8u;
                            _2622 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 2u)).x));
                            uint _2625 = (_2579 * 40u) + 16u;
                            _2638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 3u)).x));
                            uint _2641 = (_2579 * 40u) + 20u;
                            _2654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 3u)).x));
                            uint _2657 = (_2579 * 40u) + 24u;
                            vec4 _2670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 3u)).x));
                            uint _2676 = (_2579 * 40u) + 28u;
                            vec4 _2689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 3u)).x));
                            _2701 = fma(_1859, _2689.z, fma(_1858, _2689.y, _2689.x * _1857)) + _2689.w;
                            _2702 = !((fma(_1859, _2670.z, fma(_1858, _2670.y, _2670.x * _1857)) + _2670.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_2702)
                            {
                                float _2729 = _2594.x - _1857;
                                float _2730 = _2594.y - _1858;
                                float _2731 = _2594.z - _1859;
                                float _2732 = dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731));
                                float _2735 = inversesqrt(_2732);
                                float _2736 = _2735 * _2729;
                                float _2737 = _2735 * _2730;
                                float _2738 = _2735 * _2731;
                                float _2742 = 1.0 - (_2732 / (_2595 * _2595));
                                float _3673 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                                float _2743 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
                                float _2747 = sqrt(_2732) * _2610.w;
                                float _2749 = 1.39999997615814208984375 / (_2747 + 1.39999997615814208984375);
                                float _2750 = _2749 * _2749;
                                float _2753 = ((1.0 - _2750) * dot(vec3(_2736, _2737, _2738), vec3(_375, _378, _381))) + _2750;
                                float _2756 = _2747 * _2747;
                                float _2760 = (fma(_1859, _2638.z, fma(_1858, _2638.y, _2638.x * _1857)) + _2638.w) / _2701;
                                float _2761 = (fma(_1859, _2654.z, fma(_1858, _2654.y, _2654.x * _1857)) + _2654.w) / _2701;
                                float _2765 = 1.0 - dot(vec2(_2760, _2761), vec2(_2760, _2761));
                                float _3689 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                                float _2766 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
                                float _2767 = _2766 * (((isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0))) * _2743) / ((_2756 * 0.699999988079071044921875) + 1.0));
                                float _2779 = exp2(log2(1.0 / ((_2756 * 3.5) + 5.0)) * 0.25);
                                float _2780 = 1.0 - _451;
                                float _2787 = sqrt(1.0 - ((1.0 - (_2780 * _2780)) * (1.0 - (_2779 * _2779))));
                                float _2788 = _2787 * _2787;
                                float _2789 = _2788 * _2788;
                                float _2790 = _2736 - _2164;
                                float _2791 = _2737 - _2165;
                                float _2792 = _2738 - _2166;
                                float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
                                float _2800 = dot(vec3(_375, _378, _381), vec3((-0.0) - _2164, (-0.0) - _2165, (-0.0) - _2166));
                                float _3700 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                                float _2803 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
                                float _2804 = dot(vec3(_375, _378, _381), vec3(_2796 * _2790, _2796 * _2791, _2796 * _2792));
                                float _3711 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                                float _2807 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
                                float _2811 = ((_2807 * _2807) * (_2789 + (-1.0))) + 1.0;
                                float _2812 = _2749 * _2788;
                                float _2813 = _2812 * _2812;
                                float _2819 = ((1.0 - _2813) * dot(vec3(_375, _378, _381), vec3(_2736, _2737, _2738))) + _2813;
                                float _3722 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                                float _2820 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
                                float _2821 = 1.0 - _2788;
                                float _2831 = (0.5 / (((_2820 * ((_2803 * _2821) + _2788)) + 9.9999999392252902907785028219223e-09) + (((_2820 * _2821) + _2788) * _2803))) * _2820;
                                float _3733 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                                float _2841 = (_2766 * _2743) * (((_2789 * 3.1415927410125732421875) * (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) / ((_2811 * _2811) * ((_2756 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _2767 * _2610.z;
                                frontier_phi_65_pred_1 = _2767 * _2610.y;
                                frontier_phi_65_pred_2 = _2767 * _2610.x;
                                frontier_phi_65_pred_3 = _2841 * _2622.z;
                                frontier_phi_65_pred_4 = _2841 * _2622.y;
                                frontier_phi_65_pred_5 = _2841 * _2622.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _2850 = frontier_phi_65_pred;
                            _2849 = frontier_phi_65_pred_1;
                            _2848 = frontier_phi_65_pred_2;
                            _2847 = frontier_phi_65_pred_3;
                            _2846 = frontier_phi_65_pred_4;
                            _2845 = frontier_phi_65_pred_5;
                            _2552 = _2848 + _2565;
                            _2553 = _2849 + _2566;
                            _2554 = _2850 + _2567;
                            _2549 = _2845 + _2562;
                            _2550 = _2846 + _2563;
                            _2551 = _2847 + _2564;
                            if (_2569 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2562 = _2549;
                                _2563 = _2550;
                                _2564 = _2551;
                                _2565 = _2552;
                                _2566 = _2553;
                                _2567 = _2554;
                                _2568 = _2569;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _2554;
                        frontier_phi_59_pred_1 = _2553;
                        frontier_phi_59_pred_2 = _2552;
                        frontier_phi_59_pred_3 = _2551;
                        frontier_phi_59_pred_4 = _2550;
                        frontier_phi_59_pred_5 = _2549;
                    }
                    _2149 = frontier_phi_59_pred;
                    _2147 = frontier_phi_59_pred_1;
                    _2145 = frontier_phi_59_pred_2;
                    _2143 = frontier_phi_59_pred_3;
                    _2141 = frontier_phi_59_pred_4;
                    _2139 = frontier_phi_59_pred_5;
                    uint _2335 = _2334 + 1u;
                    if (_2335 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2328 = _2139;
                        _2329 = _2141;
                        _2330 = _2143;
                        _2331 = _2145;
                        _2332 = _2147;
                        _2333 = _2149;
                        _2334 = _2335;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2145;
                frontier_phi_41_42_ladder_1 = _2149;
                frontier_phi_41_42_ladder_2 = _2147;
                frontier_phi_41_42_ladder_3 = _2143;
                frontier_phi_41_42_ladder_4 = _2141;
                frontier_phi_41_42_ladder_5 = _2139;
            }
            else
            {
                frontier_phi_41_42_ladder = _1999;
                frontier_phi_41_42_ladder_1 = _2003;
                frontier_phi_41_42_ladder_2 = _2001;
                frontier_phi_41_42_ladder_3 = _1997;
                frontier_phi_41_42_ladder_4 = _1995;
                frontier_phi_41_42_ladder_5 = _1993;
            }
            _2138 = frontier_phi_41_42_ladder_5;
            _2140 = frontier_phi_41_42_ladder_4;
            _2142 = frontier_phi_41_42_ladder_3;
            _2144 = frontier_phi_41_42_ladder;
            _2146 = frontier_phi_41_42_ladder_2;
            _2148 = frontier_phi_41_42_ladder_1;
        }
        float _2153 = isnan(1.0) ? _435 : (isnan(_435) ? 1.0 : min(_435, 1.0));
        _1916 = (_2153 * _2144) + _1631;
        _1918 = (_2153 * _2146) + _1632;
        _1920 = (_2153 * _2148) + _1633;
        _1922 = ((_2138 * _420) * _2153) + _1798;
        _1924 = ((_2140 * _422) * _2153) + _1799;
        _1926 = ((_2142 * _423) * _2153) + _1800;
    }
    else
    {
        _1916 = _1631;
        _1918 = _1632;
        _1920 = _1633;
        _1922 = _1798;
        _1924 = _1799;
        _1926 = _1800;
    }
    float _3749 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3760 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3771 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _3782 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _1951 = cbInstanceData._m0[_394 + 6u].w * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)));
    float _1956 = _353 / cbSceneParam._m0[86u].x;
    float _1957 = _354 / cbSceneParam._m0[86u].y;
    vec4 _1971 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1956, _1957, (log2((isnan(cbSceneParam._m0[77u].w) ? _287 : (isnan(_287) ? cbSceneParam._m0[77u].w : min(_287, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1973 = _1971.x;
    float _1974 = _1971.y;
    float _1975 = _1971.z;
    float _1976 = _1971.w;
    float _2057;
    float _2059;
    float _2061;
    float _2063;
    if (_287 > cbSceneParam._m0[78u].w)
    {
        float _2018 = isnan(_287) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _287 : min(cbSceneParam._m0[80u].w, _287));
        float _2019 = _2018 / _287;
        float _2030 = _2019 * _338;
        float _2031 = _339 * _2019;
        float _2032 = (-0.0) - _2031;
        float _2034 = _2019 * _340;
        float _2036 = (cbSceneParam._m0[77u].w * _2032) / _2018;
        float _2037 = _2036 + cbSceneParam._m0[79u].w;
        float _2038 = cbSceneParam._m0[79u].w - _2031;
        float _2044 = sqrt(((_2030 * _2030) + (_2031 * _2031)) + (_2034 * _2034));
        float _2047 = (1.0 - (cbSceneParam._m0[77u].w / _2018)) * _2044;
        float _2053 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2055 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2264;
        if (abs((_2032 - _2036) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2264 = ((((_2037 > 0.0) ? exp2(_2053 * _2037) : (2.0 - exp2(_2055 * _2037))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2047;
        }
        else
        {
            float _2199 = 1.0 / cbSceneParam._m0[80u].x;
            float _2200 = isnan(_2038) ? _2037 : (isnan(_2037) ? _2038 : max(_2037, _2038));
            float _2201 = isnan(_2038) ? _2037 : (isnan(_2037) ? _2038 : min(_2037, _2038));
            float _2210 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : min(_2200, 0.0));
            float _2211 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : min(_2201, 0.0));
            _2264 = ((abs(_2044 / _2032) * cbSceneParam._m0[80u].y) * ((((_2210 - _2211) * 2.0) - ((exp2(_2053 * (isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0)))) - exp2(_2053 * (isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0))))) * _2199)) - ((exp2(_2055 * _2210) - exp2(_2055 * _2211)) * _2199))) + (_2047 * cbSceneParam._m0[80u].z);
        }
        vec4 _2266 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1956, _1957, 1.0), 0.0);
        float _2275 = exp2((_2264 * (-1.44269502162933349609375)) * (1.0 - _2266.w));
        float _2276 = log2(_2275);
        float _2292 = log2(_1976);
        _2057 = (exp2(_2292 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2276 * cbSceneParam._m0[78u].x)) * _2266.x) / cbSceneParam._m0[78u].x)) + _1973;
        _2059 = (exp2(_2292 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2276 * cbSceneParam._m0[78u].y)) * _2266.y) / cbSceneParam._m0[78u].y)) + _1974;
        _2061 = (exp2(_2292 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2276 * cbSceneParam._m0[78u].z)) * _2266.z) / cbSceneParam._m0[78u].z)) + _1975;
        _2063 = _2275 * _1976;
    }
    else
    {
        _2057 = _1973;
        _2059 = _1974;
        _2061 = _1975;
        _2063 = _1976;
    }
    float _2075 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2076 = _2075 == 3.0;
    float _2077 = log2(_2063);
    float _2084 = exp2(_2077 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1916 + ((isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))) * _435))) + ((_1922 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _1244)) * cbPerFrame._m0[3u].x));
    float _2085 = exp2(_2077 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1918 + ((isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))) * _435))) + ((_1924 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _1244)) * cbPerFrame._m0[3u].x));
    float _2086 = exp2(_2077 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1920 + ((isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))) * _435))) + ((_1926 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _1244)) * cbPerFrame._m0[3u].x));
    float _2095 = (_2075 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2095 * (_2076 ? _2084 : (_2084 + (cbSceneParam._m0[72u].w * _2057)));
    SV_Target.y = _2095 * (_2076 ? _2085 : (_2085 + (cbSceneParam._m0[72u].w * _2059)));
    SV_Target.z = _2095 * (_2076 ? _2086 : (_2086 + (cbSceneParam._m0[72u].w * _2061)));
    SV_Target.w = _1951;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1951;
}


