#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _902;
float _3292;
float _3293;
float _3294;
float _3295;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    float _234 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _235 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _248 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_234 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_235 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _254 = _248.x * cbMtdParam._m0[9u].x;
    float _255 = _248.y * cbMtdParam._m0[9u].y;
    float _256 = _248.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _234) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _235) + cbTextureTilingScale._m0[2u].w));
    float _272 = cbMtdParam._m0[10u].x + _268.x;
    vec4 _284 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _234) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _235) + cbTextureTilingScale._m0[1u].w));
    float _288 = _284.z;
    float _292 = (_284.x * 2.0) + (-1.0);
    float _294 = (_284.y * 2.0) + (-1.0);
    float _295 = dot(vec2(_292, _294), vec2(_292, _294));
    float _3304 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _301 = sqrt(1.0 - (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0))));
    float _304 = fma(_301, _218, fma(_294, _210 * TANGENT.x, (_196 * _189) * _292));
    float _307 = fma(_301, _219, fma(_294, _210 * TANGENT.y, (_196 * _190) * _292));
    float _310 = fma(_301, _220, fma(_294, _210 * TANGENT.z, (_196 * _191) * _292));
    float _314 = inversesqrt(dot(vec3(_304, _307, _310), vec3(_304, _307, _310)));
    float _315 = _314 * _304;
    float _316 = _314 * _307;
    float _317 = _314 * _310;
    float _3315 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _318 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _3326 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3337 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3348 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3359 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _322 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    float _338 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _379 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _389 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _379);
    float _390 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _379);
    float _391 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _379);
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _389 * _395;
    float _397 = _390 * _395;
    float _398 = _391 * _395;
    vec4 _403 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _405 = _403.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _581 = sqrt(((_389 * _389) + (_390 * _390)) + (_391 * _391));
        float _587 = (cbMatDynParam._m0[5u].x * _581) + cbMatDynParam._m0[5u].y;
        float _3370 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _588 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _592 = (cbMatDynParam._m0[5u].z * _581) + cbMatDynParam._m0[5u].w;
        float _3381 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) - _588)) + _588) < ((_405 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _417 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _418 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _438 = fma(_317, cbSceneParam._m0[5u].z, fma(_316, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _315));
    float _441 = fma(_317, cbSceneParam._m0[6u].z, fma(_316, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _315));
    float _444 = fma(_317, cbSceneParam._m0[7u].z, fma(_316, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _315));
    uint _457 = uint(roundEven(NORMAL.w)) * 13u;
    uint _459 = _457 + 9u;
    uint _460 = _459 + uint(cbMatDynParam._m0[0u].w);
    float _466 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0)))) * cbInstanceData._m0[_460].x;
    float _467 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0)))) * cbInstanceData._m0[_460].y;
    float _468 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0)))) * cbInstanceData._m0[_460].z;
    float _3392 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    float _3403 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _472 = 1.0 - _322;
    float _473 = _469 * _472;
    float _474 = _470 * _472;
    float _475 = _471 * _472;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _322;
    float _481 = (_470 + (-0.039999999105930328369140625)) * _322;
    float _482 = (_471 + (-0.039999999105930328369140625)) * _322;
    float _483 = _480 + 0.039999999105930328369140625;
    float _485 = _481 + 0.039999999105930328369140625;
    float _486 = _482 + 0.039999999105930328369140625;
    vec4 _495 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _417, cbSceneParam._m0[86u].y * _418));
    float _498 = _495.x * TEXCOORD.z;
    float _499 = dot(vec3(_315, _316, _317), vec3(_396, _397, _398));
    float _502 = _499 * 2.0;
    float _506 = (_502 * _315) - _396;
    float _507 = (_502 * _316) - _397;
    float _508 = (_502 * _317) - _398;
    float _512 = abs(dot(vec3(_396, _397, _398), vec3(_315, _316, _317)));
    float _3425 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _514 = sqrt(_318);
    float _527 = exp2((_514 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_514 * 3.0));
    float _533 = (1.0 - _527) * ((_514 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _534 = _527 * _514;
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _901;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _626 = fma(_570, cbModelParam._m0[26u].z, fma(_566, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _562));
        float _630 = fma(_570, cbModelParam._m0[27u].z, fma(_566, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _562));
        float _634 = fma(_570, cbModelParam._m0[28u].z, fma(_566, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _562));
        float _659 = _562 + _315;
        float _660 = _566 + _316;
        float _661 = _570 + _317;
        float _671 = fma(_661, cbModelParam._m0[26u].z, fma(_660, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _659)) - _626;
        float _672 = fma(_661, cbModelParam._m0[27u].z, fma(_660, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _659)) - _630;
        float _673 = fma(_661, cbModelParam._m0[28u].z, fma(_660, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _659)) - _634;
        float _677 = inversesqrt(dot(vec3(_671, _672, _673), vec3(_671, _672, _673)));
        float _690 = ((_677 * _671) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_626 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_677 * _672) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_630 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _692 = ((_677 * _673) / cbModelParam._m0[34u].z) + ((((((_634 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_690, _691, _692), 0.0);
        float _729 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_695.x + (-0.5));
        float _731 = _729 * (_695.y + (-0.5));
        float _732 = _729 * (_695.z + (-0.5));
        float _739 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_702.x + (-0.5));
        float _741 = _739 * (_702.y + (-0.5));
        float _742 = _739 * (_702.z + (-0.5));
        float _749 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_709.x + (-0.5));
        float _751 = _749 * (_709.y + (-0.5));
        float _752 = _749 * (_709.z + (-0.5));
        float _759 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_716.x + (-0.5));
        float _761 = _759 * (_716.y + (-0.5));
        float _762 = _759 * (_716.z + (-0.5));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = _730 * 0.5;
        float _767 = _740 * 0.5;
        float _768 = _750 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _783 = (dot(vec3(_315, _316, _317), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _793 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3473 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_795 + 1.0))) + _800) * _763;
        float _810 = _731 * 0.5;
        float _811 = _741 * 0.5;
        float _812 = _751 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _826 = (dot(vec3(_315, _316, _317), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _835 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _837 = _836 * 2.0;
        float _841 = (1.0 - _836) / (_836 + 1.0);
        float _3506 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _851 = ((((1.0 - _842) * (_837 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_837 + 1.0))) + _842) * _764;
        float _852 = _732 * 0.5;
        float _853 = _742 * 0.5;
        float _854 = _752 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _868 = (dot(vec3(_315, _316, _317), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _877 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _879 = _878 * 2.0;
        float _883 = (1.0 - _878) / (_878 + 1.0);
        float _3539 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _893 = ((((1.0 - _884) * (_879 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_879 + 1.0))) + _884) * _765;
        _901 = _732;
        _903 = _731;
        _904 = _730;
        _905 = _742;
        _906 = _741;
        _907 = _740;
        _908 = _752;
        _909 = _751;
        _910 = _750;
        _911 = _765;
        _912 = _764;
        _913 = _763;
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0)));
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)));
    }
    else
    {
        _901 = _902;
        _903 = _902;
        _904 = _902;
        _905 = _902;
        _906 = _902;
        _907 = _902;
        _908 = _902;
        _909 = _902;
        _910 = _902;
        _911 = _902;
        _912 = _902;
        _913 = _902;
        _914 = 0.0;
        _915 = 0.0;
        _916 = 0.0;
    }
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _945 = fma(_570, cbModelParam._m0[30u].z, fma(_566, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _562));
        float _949 = fma(_570, cbModelParam._m0[31u].z, fma(_566, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _562));
        float _953 = fma(_570, cbModelParam._m0[32u].z, fma(_566, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _562));
        float _976 = _562 + _315;
        float _977 = _566 + _316;
        float _978 = _570 + _317;
        float _988 = fma(_978, cbModelParam._m0[30u].z, fma(_977, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976)) - _945;
        float _989 = fma(_978, cbModelParam._m0[31u].z, fma(_977, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976)) - _949;
        float _990 = fma(_978, cbModelParam._m0[32u].z, fma(_977, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976)) - _953;
        float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
        float _1007 = ((_994 * _988) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_945 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_994 * _989) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_949 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_994 * _990) / cbModelParam._m0[35u].z) + ((((((_953 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        float _1044 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1011.x + (-0.5));
        float _1046 = _1044 * (_1011.y + (-0.5));
        float _1047 = _1044 * (_1011.z + (-0.5));
        float _1054 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1018.x + (-0.5));
        float _1056 = _1054 * (_1018.y + (-0.5));
        float _1057 = _1054 * (_1018.z + (-0.5));
        float _1064 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1025.x + (-0.5));
        float _1066 = _1064 * (_1025.y + (-0.5));
        float _1067 = _1064 * (_1025.z + (-0.5));
        float _1074 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1032.x + (-0.5));
        float _1076 = _1074 * (_1032.y + (-0.5));
        float _1077 = _1074 * (_1032.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_315, _316, _317), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3602 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1108 + 1.0))) + _1113) * _1078;
        float _1123 = _1046 * 0.5;
        float _1124 = _1056 * 0.5;
        float _1125 = _1066 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_315, _316, _317), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3635 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1150 + 1.0))) + _1155) * _1079;
        float _1165 = _1047 * 0.5;
        float _1166 = _1057 * 0.5;
        float _1167 = _1067 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_315, _316, _317), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3668 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1192 + 1.0))) + _1197) * _1080;
        _1214 = _1047;
        _1215 = _1046;
        _1216 = _1045;
        _1217 = _1057;
        _1218 = _1056;
        _1219 = _1055;
        _1220 = _1067;
        _1221 = _1066;
        _1222 = _1065;
        _1223 = _1080;
        _1224 = _1079;
        _1225 = _1078;
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
    }
    else
    {
        _1214 = _902;
        _1215 = _902;
        _1216 = _902;
        _1217 = _902;
        _1218 = _902;
        _1219 = _902;
        _1220 = _902;
        _1221 = _902;
        _1222 = _902;
        _1223 = _902;
        _1224 = _902;
        _1225 = _902;
        _1226 = 0.0;
        _1227 = 0.0;
        _1228 = 0.0;
    }
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _914)) + _914;
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _915)) + _915;
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _916)) + _916;
    float _1261 = fma(_1240, cbSceneParam._m0[89u].z, fma(_1239, cbSceneParam._m0[89u].y, _1238 * cbSceneParam._m0[89u].x));
    float _1264 = fma(_1240, cbSceneParam._m0[90u].z, fma(_1239, cbSceneParam._m0[90u].y, _1238 * cbSceneParam._m0[90u].x));
    float _1267 = fma(_1240, cbSceneParam._m0[91u].z, fma(_1239, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1238));
    float _1282 = _506 * 0.5;
    float _1283 = _507 * 0.5;
    float _1284 = _508 * 0.5;
    float _1285 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1288 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1291 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1325;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1298 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_901, _905, _908, _911));
        float _1302 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_903, _906, _909, _912));
        float _1306 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_904, _907, _910, _913));
        float _1313 = dot(vec4(cbModelParam._m0[39u]), vec4(_1282, _1283, _1284, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1313) ? 0.0 : (isnan(0.0) ? _1313 : max(0.0, _1313))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1336;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1327 = dot(vec4(cbModelParam._m0[40u]), vec4(_1282, _1283, _1284, 1.0));
        _1336 = dot(vec3(isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1327) ? 0.0 : (isnan(0.0) ? _1327 : max(0.0, _1327))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1336 = 1.0;
    }
    float _1340 = (_1336 * cbModelParam._m0[1u].x) + (_1325 * (1.0 - cbModelParam._m0[1u].x));
    float _1350 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _318);
    float _1351 = isnan(_1350) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1350 : min(cbModelParam._m0[25u].z, _1350));
    float _1433;
    float _1435;
    float _1437;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1400 = fma(_570, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _562)) + cbModelParam._m0[13u].w;
        float _1404 = fma(_570, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _562)) + cbModelParam._m0[14u].w;
        float _1408 = fma(_570, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _562)) + cbModelParam._m0[15u].w;
        float _1411 = fma(_508, cbModelParam._m0[13u].z, fma(_507, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _506));
        float _1414 = fma(_508, cbModelParam._m0[14u].z, fma(_507, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _506));
        float _1417 = fma(_508, cbModelParam._m0[15u].z, fma(_507, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _506));
        float _1445;
        if (_1411 > 0.0)
        {
            _1445 = abs((1.0 - _1400) / _1411);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1400 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1445 = frontier_phi_19_17_ladder;
        }
        float _1652;
        if (_1414 > 0.0)
        {
            _1652 = abs((1.0 - _1404) / _1414);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1404 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1652 = frontier_phi_28_24_ladder;
        }
        float _1906;
        if (_1417 > 0.0)
        {
            _1906 = abs((1.0 - _1408) / _1417);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1408 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1906 = frontier_phi_40_35_ladder;
        }
        float _1908 = isnan(_1652) ? _1445 : (isnan(_1445) ? _1652 : min(_1445, _1652));
        float _1909 = isnan(_1906) ? _1908 : (isnan(_1908) ? _1906 : min(_1908, _1906));
        float _1913 = (_1909 * _1411) + _1400;
        float _1914 = (_1909 * _1414) + _1404;
        float _1915 = (_1909 * _1417) + _1408;
        float _1916 = _1909 * 9.9999997473787516355514526367188e-05;
        float _1918 = (-1.0) - _1916;
        float _1920 = _1916 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1915 > _1920) || ((_1915 < _1918) || ((_1914 > _1920) || ((_1914 < _1918) || ((_1913 < _1918) || (_1913 > _1920))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2043 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1915, cbModelParam._m0[9u].z, fma(_1914, cbModelParam._m0[9u].y, _1913 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1915, cbModelParam._m0[10u].z, fma(_1914, cbModelParam._m0[10u].y, _1913 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1915, cbModelParam._m0[11u].z, fma(_1914, cbModelParam._m0[11u].y, _1913 * cbModelParam._m0[11u].x))), _1351);
            frontier_phi_18_40_ladder = _2043.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2043.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2043.x * cbModelParam._m0[1u].y;
        }
        _1433 = frontier_phi_18_40_ladder_2;
        _1435 = frontier_phi_18_40_ladder_1;
        _1437 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1421 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_506, _507, _508), _1351);
        _1433 = _1421.x * cbModelParam._m0[1u].y;
        _1435 = _1421.y * cbModelParam._m0[1u].y;
        _1437 = _1421.z * cbModelParam._m0[1u].y;
    }
    float _1441 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _318);
    float _1442 = isnan(_1441) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1441 : min(cbModelParam._m0[25u].w, _1441));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1498 = fma(_570, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _562)) + cbModelParam._m0[21u].w;
        float _1502 = fma(_570, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _562)) + cbModelParam._m0[22u].w;
        float _1506 = fma(_570, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _562)) + cbModelParam._m0[23u].w;
        float _1509 = fma(_508, cbModelParam._m0[21u].z, fma(_507, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _506));
        float _1512 = fma(_508, cbModelParam._m0[22u].z, fma(_507, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _506));
        float _1515 = fma(_508, cbModelParam._m0[23u].z, fma(_507, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _506));
        float _1657;
        if (_1509 > 0.0)
        {
            _1657 = abs((1.0 - _1498) / _1509);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1498 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1657 = frontier_phi_30_26_ladder;
        }
        float _1933;
        if (_1512 > 0.0)
        {
            _1933 = abs((1.0 - _1502) / _1512);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1502 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1933 = frontier_phi_42_37_ladder;
        }
        float _2146;
        if (_1515 > 0.0)
        {
            _2146 = abs((1.0 - _1506) / _1515);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1506 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2146 = frontier_phi_51_48_ladder;
        }
        float _2148 = isnan(_1933) ? _1657 : (isnan(_1657) ? _1933 : min(_1657, _1933));
        float _2149 = isnan(_2146) ? _2148 : (isnan(_2148) ? _2146 : min(_2148, _2146));
        float _2153 = (_2149 * _1509) + _1498;
        float _2154 = (_2149 * _1512) + _1502;
        float _2155 = (_2149 * _1515) + _1506;
        float _2156 = _2149 * 9.9999997473787516355514526367188e-05;
        float _2157 = (-1.0) - _2156;
        float _2159 = _2156 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2155 > _2159) || ((_2155 < _2157) || ((_2154 > _2159) || ((_2154 < _2157) || ((_2153 < _2157) || (_2153 > _2159))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2353 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2155, cbModelParam._m0[17u].z, fma(_2154, cbModelParam._m0[17u].y, _2153 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2155, cbModelParam._m0[18u].z, fma(_2154, cbModelParam._m0[18u].y, _2153 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2155, cbModelParam._m0[19u].z, fma(_2154, cbModelParam._m0[19u].y, _2153 * cbModelParam._m0[19u].x))), _1442);
            frontier_phi_27_51_ladder = _2353.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2353.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2353.x * cbModelParam._m0[1u].z;
        }
        _1534 = frontier_phi_27_51_ladder_2;
        _1536 = frontier_phi_27_51_ladder_1;
        _1538 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1518 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_506, _507, _508), _1442);
        _1534 = _1518.x * cbModelParam._m0[1u].z;
        _1536 = _1518.y * cbModelParam._m0[1u].z;
        _1538 = _1518.z * cbModelParam._m0[1u].z;
    }
    float _1551 = (((_533 * _483) + _534) * _498) * ((cbModelParam._m0[1u].w * (_1534 - _1433)) + _1433);
    float _1553 = (((_533 * _485) + _534) * _498) * ((cbModelParam._m0[1u].w * (_1536 - _1435)) + _1435);
    float _1555 = (((_533 * _486) + _534) * _498) * ((cbModelParam._m0[1u].w * (_1538 - _1437)) + _1437);
    float _1558 = fma(_1555, cbSceneParam._m0[89u].z, fma(_1553, cbSceneParam._m0[89u].y, _1551 * cbSceneParam._m0[89u].x));
    float _1561 = fma(_1555, cbSceneParam._m0[90u].z, fma(_1553, cbSceneParam._m0[90u].y, _1551 * cbSceneParam._m0[90u].x));
    float _1564 = fma(_1555, cbSceneParam._m0[91u].z, fma(_1553, cbSceneParam._m0[91u].y, _1551 * cbSceneParam._m0[91u].x));
    uvec4 _1574 = floatBitsToUint(cbInstanceData._m0[_457 + 5u]);
    uint _1576 = _1574.x * 14u;
    uint _1577 = _1576 + 13u;
    float _1584 = _498 + (-1.0);
    float _1589 = (cbLight._m0[_1577].x * _1584) + 1.0;
    float _1590 = (cbLight._m0[_1577].y * _1584) + 1.0;
    float _1591 = (cbLight._m0[_1577].z * _1584) + 1.0;
    float _1592 = (cbLight._m0[_1577].w * _1584) + 1.0;
    uint _1593 = _1576 + 5u;
    float _1599 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
    uint _1603 = _1576 + 4u;
    float _1610 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
    uint _1614 = _1576 | 1u;
    float _1625 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_315, _316, _317));
    float _1628 = dot(vec3(cbLight._m0[_1614].xyz), vec3(_315, _316, _317));
    float _3804 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
    float _3815 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1633 = (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * 0.3183098733425140380859375;
    float _1635 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * 0.3183098733425140380859375;
    float _1642 = ((cbLight._m0[_1593].x * _1599) * _1635) + ((cbLight._m0[_1603].x * _1610) * _1633);
    float _1643 = ((_1599 * cbLight._m0[_1593].y) * _1635) + ((_1610 * cbLight._m0[_1603].y) * _1633);
    float _1644 = ((_1599 * cbLight._m0[_1593].z) * _1635) + ((_1610 * cbLight._m0[_1603].z) * _1633);
    uvec4 _1649 = floatBitsToUint(cbLight._m0[_1576 + 12u]);
    bool _1651 = _1649.x == 0u;
    float _1662;
    float _1664;
    float _1666;
    if (_1651)
    {
        _1662 = _1642;
        _1664 = _1643;
        _1666 = _1644;
    }
    else
    {
        uint _1670 = _1576 + 6u;
        float _1686 = (dot(vec3(cbLight._m0[_1576 + 2u].xyz), vec3(_315, _316, _317)) * 0.5) + 0.5;
        float _1687 = _1686 * _1686;
        float _3826 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1689 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _1662 = (((cbLight._m0[_1670].x * 0.3183098733425140380859375) * _1688) * _1689) + _1642;
        _1664 = (((cbLight._m0[_1670].y * 0.3183098733425140380859375) * _1688) * _1689) + _1643;
        _1666 = (((cbLight._m0[_1670].z * 0.3183098733425140380859375) * _1688) * _1689) + _1644;
    }
    bool _1669 = _1649.y == 0u;
    float _1707;
    float _1709;
    float _1711;
    if (_1669)
    {
        _1707 = _1662;
        _1709 = _1664;
        _1711 = _1666;
    }
    else
    {
        uint _1877 = _1576 + 7u;
        float _1893 = (dot(vec3(cbLight._m0[_1576 + 3u].xyz), vec3(_315, _316, _317)) * 0.5) + 0.5;
        float _1894 = _1893 * _1893;
        float _3842 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1896 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _1707 = (((cbLight._m0[_1877].x * 0.3183098733425140380859375) * _1895) * _1896) + _1662;
        _1709 = (((cbLight._m0[_1877].y * 0.3183098733425140380859375) * _1895) * _1896) + _1664;
        _1711 = (((cbLight._m0[_1877].z * 0.3183098733425140380859375) * _1895) * _1896) + _1666;
    }
    uint _1714 = _1576 + 8u;
    float _1727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1576].w)) * _318) * 0.949999988079071044921875);
    float _1728 = _1727 * _1727;
    float _1729 = cbLight._m0[_1576].x + _396;
    float _1730 = cbLight._m0[_1576].y + _397;
    float _1731 = cbLight._m0[_1576].z + _398;
    float _1735 = inversesqrt(dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731)));
    float _1736 = _1735 * _1729;
    float _1737 = _1735 * _1730;
    float _1738 = _1735 * _1731;
    float _1739 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1576].xyz));
    float _3858 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1742 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _1743 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _1744 = dot(vec3(_315, _316, _317), vec3(_1736, _1737, _1738));
    float _3880 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1747 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _1748 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_1736, _1737, _1738));
    float _3891 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1752 = _1728 * _1728;
    float _1756 = ((_1747 * _1747) * (_1752 + (-1.0))) + 1.0;
    float _1764 = exp2(log2(1.0 - (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * 5.0);
    float _1765 = 0.959999978542327880859375 - _480;
    float _1767 = 0.959999978542327880859375 - _481;
    float _1768 = 0.959999978542327880859375 - _482;
    float _1775 = 1.0 - _1728;
    float _1786 = (0.5 / (((_1743 * ((_1742 * _1775) + _1728)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _1775) + _1728) * _1742))) * _1742;
    float _3902 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1788 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1752 / ((_1756 * _1756) * 3.141590118408203125));
    uint _1799 = _1576 + 9u;
    float _1810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1614].w)) * _318) * 0.949999988079071044921875);
    float _1811 = _1810 * _1810;
    float _1812 = cbLight._m0[_1614].x + _396;
    float _1813 = cbLight._m0[_1614].y + _397;
    float _1814 = cbLight._m0[_1614].z + _398;
    float _1818 = inversesqrt(dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814)));
    float _1819 = _1818 * _1812;
    float _1820 = _1818 * _1813;
    float _1821 = _1818 * _1814;
    float _1822 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1614].xyz));
    float _3913 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _1826 = dot(vec3(_315, _316, _317), vec3(_1819, _1820, _1821));
    float _3924 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _1830 = dot(vec3(cbLight._m0[_1614].xyz), vec3(_1819, _1820, _1821));
    float _3935 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1834 = _1811 * _1811;
    float _1838 = ((_1829 * _1829) * (_1834 + (-1.0))) + 1.0;
    float _1845 = exp2(log2(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * 5.0);
    float _1852 = 1.0 - _1811;
    float _1862 = (0.5 / (((_1743 * ((_1825 * _1852) + _1811)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _1852) + _1811) * _1825))) * _1825;
    float _3946 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1834 / ((_1838 * _1838) * 3.141590118408203125));
    float _1874 = (((((_1845 * _1765) + _483) * cbLight._m0[_1799].x) * _1864) * _1599) + (((((_1764 * _1765) + _483) * cbLight._m0[_1714].x) * _1788) * _1610);
    float _1875 = (((((_1845 * _1767) + _485) * cbLight._m0[_1799].y) * _1864) * _1599) + (((((_1764 * _1767) + _485) * cbLight._m0[_1714].y) * _1788) * _1610);
    float _1876 = (((((_1845 * _1768) + _486) * cbLight._m0[_1799].z) * _1864) * _1599) + (((((_1764 * _1768) + _486) * cbLight._m0[_1714].z) * _1788) * _1610);
    float _1938;
    float _1940;
    float _1942;
    if (_1651)
    {
        _1938 = _1874;
        _1940 = _1875;
        _1942 = _1876;
    }
    else
    {
        uint _1944 = _1576 + 2u;
        uint _1948 = _1576 + 10u;
        float _1962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _318) * 0.949999988079071044921875);
        float _1963 = _1962 * _1962;
        float _1964 = cbLight._m0[_1944].x + _396;
        float _1965 = cbLight._m0[_1944].y + _397;
        float _1966 = cbLight._m0[_1944].z + _398;
        float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
        float _1971 = _1970 * _1964;
        float _1972 = _1970 * _1965;
        float _1973 = _1970 * _1966;
        float _1974 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1944].xyz));
        float _3957 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1977 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1978 = dot(vec3(_315, _316, _317), vec3(_1971, _1972, _1973));
        float _3968 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1981 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1982 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_1971, _1972, _1973));
        float _3979 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1986 = _1963 * _1963;
        float _1990 = ((_1981 * _1981) * (_1986 + (-1.0))) + 1.0;
        float _1997 = exp2(log2(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * 5.0);
        float _2004 = 1.0 - _1963;
        float _2014 = (0.5 / (((_1743 * ((_1977 * _2004) + _1963)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _2004) + _1963) * _1977))) * _1977;
        float _3990 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2016 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1986 / ((_1990 * _1990) * 3.141590118408203125));
        float _2017 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _1938 = (((((_1997 * _1765) + _483) * cbLight._m0[_1948].x) * _2016) * _2017) + _1874;
        _1940 = (((((_1997 * _1767) + _485) * cbLight._m0[_1948].y) * _2016) * _2017) + _1875;
        _1942 = (((((_1997 * _1768) + _486) * cbLight._m0[_1948].z) * _2016) * _2017) + _1876;
    }
    float _2052;
    float _2054;
    float _2056;
    if (_1669)
    {
        _2052 = _1938;
        _2054 = _1940;
        _2056 = _1942;
    }
    else
    {
        uint _2063 = _1576 + 3u;
        uint _2067 = _1576 + 11u;
        float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _318) * 0.949999988079071044921875);
        float _2082 = _2081 * _2081;
        float _2083 = cbLight._m0[_2063].x + _396;
        float _2084 = cbLight._m0[_2063].y + _397;
        float _2085 = cbLight._m0[_2063].z + _398;
        float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
        float _2090 = _2089 * _2083;
        float _2091 = _2089 * _2084;
        float _2092 = _2089 * _2085;
        float _2093 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_2063].xyz));
        float _4006 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2096 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2097 = dot(vec3(_315, _316, _317), vec3(_2090, _2091, _2092));
        float _4017 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2101 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2090, _2091, _2092));
        float _4028 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2105 = _2082 * _2082;
        float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
        float _2116 = exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0);
        float _2123 = 1.0 - _2082;
        float _2133 = (0.5 / (((_1743 * ((_2096 * _2123) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _2123) + _2082) * _2096))) * _2096;
        float _4039 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2135 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
        float _2136 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _2052 = (((((_2116 * _1765) + _483) * cbLight._m0[_2067].x) * _2135) * _2136) + _1938;
        _2054 = (((((_2116 * _1767) + _485) * cbLight._m0[_2067].y) * _2135) * _2136) + _1940;
        _2056 = (((((_2116 * _1768) + _486) * cbLight._m0[_2067].z) * _2135) * _2136) + _1942;
    }
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    if (_1574.y == 0u)
    {
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2211;
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2211;
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2211;
        uvec4 _2226 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2227 = _2226.x;
        uint _2238 = uint((float(_2226.y) * floor(float(uint(cbSceneParam._m0[85u].y * _418) / _2227))) + floor(float(uint(cbSceneParam._m0[85u].x * _417) / _2227)));
        float _2248 = (log2(_2214 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2249 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        uint _2252 = uint(isnan(14.0) ? _2249 : (isnan(_2249) ? 14.0 : min(_2249, 14.0)));
        uvec4 _2257 = texelFetch(g_lightClusterGridBuffer, int(((_2252 << 2u) + (_2238 << 6u)) >> 2u));
        uint _2258 = _2257.x;
        uint _2259 = _2226.z;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        float _2368;
        if (((((1u << ((_2259 >> 4u) & 15u)) + 4294967295u) & _2258) == 0u) || ((_2259 & 240u) == 0u))
        {
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
        }
        else
        {
            float _2359;
            float _2361;
            float _2363;
            float _2365;
            float _2367;
            float _2369;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            uint _2516 = 0u;
            uint _2525;
            bool _2526;
            for (;;)
            {
                _2525 = texelFetch(g_lightClassification, int((((_2252 << 5u) + (_2238 << 9u)) + (_2516 << 2u)) >> 2u)).x;
                _2526 = _2525 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2526)
                {
                    frontier_phi_68_pred = _2512;
                    frontier_phi_68_pred_1 = _2515;
                    frontier_phi_68_pred_2 = _2514;
                    frontier_phi_68_pred_3 = _2513;
                    frontier_phi_68_pred_4 = _2511;
                    frontier_phi_68_pred_5 = _2510;
                }
                else
                {
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    uint _2661;
                    _2655 = _2510;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2514;
                    _2660 = _2515;
                    _2661 = _2525;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    for (;;)
                    {
                        uint _2665 = uint(findLSB(_2661)) + (_2516 << 5u);
                        uint _2662 = (_2661 + 4294967295u) & _2661;
                        uint _2667 = _2665 * 48u;
                        vec4 _2681 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2667)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 3u)).x));
                        uint _2687 = (_2665 * 48u) + 4u;
                        vec4 _2700 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 3u)).x));
                        uint _2706 = (_2665 * 48u) + 8u;
                        vec3 _2717 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x));
                        float _2721 = _2681.x - _2212;
                        float _2722 = _2681.y - _2213;
                        float _2723 = _2681.z - _2214;
                        float _2724 = dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723));
                        float _2727 = inversesqrt(_2724);
                        float _2728 = _2727 * _2721;
                        float _2729 = _2727 * _2722;
                        float _2730 = _2727 * _2723;
                        float _2731 = dot(vec3(_438, _441, _444), vec3(_2728, _2729, _2730));
                        float _2736 = 1.0 - (_2724 * _2681.w);
                        float _4065 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2737 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2738 = sqrt(_2724) * _2700.w;
                        float _2741 = 1.39999997615814208984375 / (_2738 + 1.39999997615814208984375);
                        float _2742 = _2741 * _2741;
                        float _2745 = ((1.0 - _2742) * _2731) + _2742;
                        float _2748 = _2738 * _2738;
                        float _2752 = ((isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0))) * _2737) / ((_2748 * 0.699999988079071044921875) + 1.0);
                        float _2756 = (-0.0) - _2212;
                        float _2757 = (-0.0) - _2213;
                        float _2758 = (-0.0) - _2214;
                        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
                        float _2763 = _2762 * _2756;
                        float _2764 = _2762 * _2757;
                        float _2765 = _2762 * _2758;
                        float _2773 = exp2(log2(1.0 / ((_2748 * 3.5) + 5.0)) * 0.25);
                        float _2774 = 1.0 - _514;
                        float _2781 = sqrt(1.0 - ((1.0 - (_2774 * _2774)) * (1.0 - (_2773 * _2773))));
                        float _2782 = _2781 * _2781;
                        float _2783 = _2782 * _2782;
                        float _2784 = _2763 + _2728;
                        float _2785 = _2764 + _2729;
                        float _2786 = _2765 + _2730;
                        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
                        float _2794 = dot(vec3(_438, _441, _444), vec3(_2763, _2764, _2765));
                        float _4081 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2797 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2798 = dot(vec3(_438, _441, _444), vec3(_2790 * _2784, _2790 * _2785, _2790 * _2786));
                        float _4092 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2801 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2805 = ((_2801 * _2801) * (_2783 + (-1.0))) + 1.0;
                        float _2806 = _2741 * _2782;
                        float _2807 = _2806 * _2806;
                        float _2810 = ((1.0 - _2807) * _2731) + _2807;
                        float _4103 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2811 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                        float _2812 = 1.0 - _2782;
                        float _2822 = (0.5 / (((_2811 * ((_2797 * _2812) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2811 * _2812) + _2782) * _2797))) * _2811;
                        float _4114 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2833 = (((_2783 * 3.1415927410125732421875) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) / ((_2805 * _2805) * ((_2748 * 2.1991131305694580078125) + 3.141590118408203125))) * _2737;
                        _2585 = (_2752 * _2700.x) + _2658;
                        _2586 = (_2752 * _2700.y) + _2659;
                        _2587 = (_2752 * _2700.z) + _2660;
                        _2582 = (_2833 * _2717.x) + _2655;
                        _2583 = (_2833 * _2717.y) + _2656;
                        _2584 = (_2833 * _2717.z) + _2657;
                        if (_2662 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2655 = _2582;
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2586;
                            _2660 = _2587;
                            _2661 = _2662;
                        }
                    }
                    frontier_phi_68_pred = _2584;
                    frontier_phi_68_pred_1 = _2587;
                    frontier_phi_68_pred_2 = _2586;
                    frontier_phi_68_pred_3 = _2585;
                    frontier_phi_68_pred_4 = _2583;
                    frontier_phi_68_pred_5 = _2582;
                }
                _2363 = frontier_phi_68_pred;
                _2369 = frontier_phi_68_pred_1;
                _2367 = frontier_phi_68_pred_2;
                _2365 = frontier_phi_68_pred_3;
                _2361 = frontier_phi_68_pred_4;
                _2359 = frontier_phi_68_pred_5;
                uint _2517 = _2516 + 1u;
                if (_2517 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2510 = _2359;
                    _2511 = _2361;
                    _2512 = _2363;
                    _2513 = _2365;
                    _2514 = _2367;
                    _2515 = _2369;
                    _2516 = _2517;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
        }
        uvec4 _2372 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2373 = _2372.z;
        uint _2375 = (_2373 >> 8u) & 15u;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        if (((4294967295u << _2375) & _2258) == 0u)
        {
            _2478 = _2358;
            _2480 = _2360;
            _2482 = _2362;
            _2484 = _2364;
            _2486 = _2366;
            _2488 = _2368;
        }
        else
        {
            float _2503 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
            float _2504 = _2503 * _2212;
            float _2505 = _2503 * _2213;
            float _2506 = _2503 * _2214;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2375 < ((_2373 >> 12u) & 15u))
            {
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2638 = _2358;
                float _2639 = _2360;
                float _2640 = _2362;
                float _2641 = _2364;
                float _2642 = _2366;
                float _2643 = _2368;
                uint _2644 = _2375;
                uint _2653;
                bool _2654;
                for (;;)
                {
                    _2653 = texelFetch(g_lightClassification, int((((_2252 << 5u) + (_2238 << 9u)) + (_2644 << 2u)) >> 2u)).x;
                    _2654 = _2653 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2654)
                    {
                        frontier_phi_79_pred = _2643;
                        frontier_phi_79_pred_1 = _2642;
                        frontier_phi_79_pred_2 = _2641;
                        frontier_phi_79_pred_3 = _2640;
                        frontier_phi_79_pred_4 = _2639;
                        frontier_phi_79_pred_5 = _2638;
                    }
                    else
                    {
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _2860 = _2638;
                        float _2861 = _2639;
                        float _2862 = _2640;
                        float _2863 = _2641;
                        float _2864 = _2642;
                        float _2865 = _2643;
                        uint _2866 = _2653;
                        uint _2867;
                        vec4 _2892;
                        float _2893;
                        vec4 _2908;
                        vec3 _2920;
                        vec4 _2936;
                        vec4 _2952;
                        float _2999;
                        bool _3000;
                        for (;;)
                        {
                            uint _2877 = ((_2644 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2866));
                            _2867 = (_2866 + 4294967295u) & _2866;
                            uint _2879 = _2877 * 40u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            _2893 = _2892.w;
                            uint _2895 = (_2877 * 40u) + 4u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2910 = (_2877 * 40u) + 8u;
                            _2920 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x));
                            uint _2923 = (_2877 * 40u) + 16u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2939 = (_2877 * 40u) + 20u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2955 = (_2877 * 40u) + 24u;
                            vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2974 = (_2877 * 40u) + 28u;
                            vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            _2999 = fma(_2214, _2987.z, fma(_2213, _2987.y, _2987.x * _2212)) + _2987.w;
                            _3000 = !((fma(_2214, _2968.z, fma(_2213, _2968.y, _2968.x * _2212)) + _2968.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3000)
                            {
                                float _3027 = _2892.x - _2212;
                                float _3028 = _2892.y - _2213;
                                float _3029 = _2892.z - _2214;
                                float _3030 = dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029));
                                float _3033 = inversesqrt(_3030);
                                float _3034 = _3033 * _3027;
                                float _3035 = _3033 * _3028;
                                float _3036 = _3033 * _3029;
                                float _3040 = 1.0 - (_3030 / (_2893 * _2893));
                                float _4125 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3041 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3045 = sqrt(_3030) * _2908.w;
                                float _3047 = 1.39999997615814208984375 / (_3045 + 1.39999997615814208984375);
                                float _3048 = _3047 * _3047;
                                float _3051 = ((1.0 - _3048) * dot(vec3(_3034, _3035, _3036), vec3(_438, _441, _444))) + _3048;
                                float _3054 = _3045 * _3045;
                                float _3058 = (fma(_2214, _2936.z, fma(_2213, _2936.y, _2936.x * _2212)) + _2936.w) / _2999;
                                float _3059 = (fma(_2214, _2952.z, fma(_2213, _2952.y, _2952.x * _2212)) + _2952.w) / _2999;
                                float _3063 = 1.0 - dot(vec2(_3058, _3059), vec2(_3058, _3059));
                                float _4141 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3065 = _3064 * (((isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))) * _3041) / ((_3054 * 0.699999988079071044921875) + 1.0));
                                float _3077 = exp2(log2(1.0 / ((_3054 * 3.5) + 5.0)) * 0.25);
                                float _3078 = 1.0 - _514;
                                float _3085 = sqrt(1.0 - ((1.0 - (_3078 * _3078)) * (1.0 - (_3077 * _3077))));
                                float _3086 = _3085 * _3085;
                                float _3087 = _3086 * _3086;
                                float _3088 = _3034 - _2504;
                                float _3089 = _3035 - _2505;
                                float _3090 = _3036 - _2506;
                                float _3094 = inversesqrt(dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090)));
                                float _3098 = dot(vec3(_438, _441, _444), vec3((-0.0) - _2504, (-0.0) - _2505, (-0.0) - _2506));
                                float _4152 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3101 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3102 = dot(vec3(_438, _441, _444), vec3(_3094 * _3088, _3094 * _3089, _3094 * _3090));
                                float _4163 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3105 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3109 = ((_3105 * _3105) * (_3087 + (-1.0))) + 1.0;
                                float _3110 = _3047 * _3086;
                                float _3111 = _3110 * _3110;
                                float _3117 = ((1.0 - _3111) * dot(vec3(_438, _441, _444), vec3(_3034, _3035, _3036))) + _3111;
                                float _4174 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3119 = 1.0 - _3086;
                                float _3129 = (0.5 / (((_3118 * ((_3101 * _3119) + _3086)) + 9.9999999392252902907785028219223e-09) + (((_3118 * _3119) + _3086) * _3101))) * _3118;
                                float _4185 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3139 = (_3064 * _3041) * (((_3087 * 3.1415927410125732421875) * (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) / ((_3109 * _3109) * ((_3054 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3065 * _2908.z;
                                frontier_phi_85_pred_1 = _3065 * _2908.y;
                                frontier_phi_85_pred_2 = _3065 * _2908.x;
                                frontier_phi_85_pred_3 = _3139 * _2920.z;
                                frontier_phi_85_pred_4 = _3139 * _2920.y;
                                frontier_phi_85_pred_5 = _3139 * _2920.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3148 = frontier_phi_85_pred;
                            _3147 = frontier_phi_85_pred_1;
                            _3146 = frontier_phi_85_pred_2;
                            _3145 = frontier_phi_85_pred_3;
                            _3144 = frontier_phi_85_pred_4;
                            _3143 = frontier_phi_85_pred_5;
                            _2850 = _3146 + _2863;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            _2847 = _3143 + _2860;
                            _2848 = _3144 + _2861;
                            _2849 = _3145 + _2862;
                            if (_2867 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2867;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2852;
                        frontier_phi_79_pred_1 = _2851;
                        frontier_phi_79_pred_2 = _2850;
                        frontier_phi_79_pred_3 = _2849;
                        frontier_phi_79_pred_4 = _2848;
                        frontier_phi_79_pred_5 = _2847;
                    }
                    _2489 = frontier_phi_79_pred;
                    _2487 = frontier_phi_79_pred_1;
                    _2485 = frontier_phi_79_pred_2;
                    _2483 = frontier_phi_79_pred_3;
                    _2481 = frontier_phi_79_pred_4;
                    _2479 = frontier_phi_79_pred_5;
                    uint _2645 = _2644 + 1u;
                    if (_2645 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2638 = _2479;
                        _2639 = _2481;
                        _2640 = _2483;
                        _2641 = _2485;
                        _2642 = _2487;
                        _2643 = _2489;
                        _2644 = _2645;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2485;
                frontier_phi_60_61_ladder_1 = _2489;
                frontier_phi_60_61_ladder_2 = _2487;
                frontier_phi_60_61_ladder_3 = _2483;
                frontier_phi_60_61_ladder_4 = _2481;
                frontier_phi_60_61_ladder_5 = _2479;
            }
            else
            {
                frontier_phi_60_61_ladder = _2364;
                frontier_phi_60_61_ladder_1 = _2368;
                frontier_phi_60_61_ladder_2 = _2366;
                frontier_phi_60_61_ladder_3 = _2362;
                frontier_phi_60_61_ladder_4 = _2360;
                frontier_phi_60_61_ladder_5 = _2358;
            }
            _2478 = frontier_phi_60_61_ladder_5;
            _2480 = frontier_phi_60_61_ladder_4;
            _2482 = frontier_phi_60_61_ladder_3;
            _2484 = frontier_phi_60_61_ladder;
            _2486 = frontier_phi_60_61_ladder_2;
            _2488 = frontier_phi_60_61_ladder_1;
        }
        float _2493 = isnan(1.0) ? _498 : (isnan(_498) ? 1.0 : min(_498, 1.0));
        _2270 = (_2493 * _2484) + _1707;
        _2272 = (_2493 * _2486) + _1709;
        _2274 = (_2493 * _2488) + _1711;
        _2276 = ((_2478 * _483) * _2493) + _2052;
        _2278 = ((_2480 * _485) * _2493) + _2054;
        _2280 = ((_2482 * _486) * _2493) + _2056;
    }
    else
    {
        _2270 = _1707;
        _2272 = _1709;
        _2274 = _1711;
        _2276 = _2052;
        _2278 = _2054;
        _2280 = _2056;
    }
    float _4201 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4212 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _4223 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _2297 = ((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2270 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _498))) + ((_2276 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1340)) * cbPerFrame._m0[3u].x);
    float _2298 = ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2272 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _498))) + ((_2278 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1340)) * cbPerFrame._m0[3u].x);
    float _2299 = ((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2274 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _498))) + ((_2280 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1340)) * cbPerFrame._m0[3u].x);
    uint _2300 = _457 + 6u;
    float _2308 = _417 / cbSceneParam._m0[86u].x;
    float _2309 = _418 / cbSceneParam._m0[86u].y;
    vec4 _2323 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2308, _2309, (log2((isnan(cbSceneParam._m0[77u].w) ? _338 : (isnan(_338) ? cbSceneParam._m0[77u].w : min(_338, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2325 = _2323.x;
    float _2326 = _2323.y;
    float _2327 = _2323.z;
    float _2328 = _2323.w;
    float _2420;
    float _2422;
    float _2424;
    float _2426;
    if (_338 > cbSceneParam._m0[78u].w)
    {
        float _2383 = isnan(_338) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _338 : min(cbSceneParam._m0[80u].w, _338));
        float _2384 = _2383 / _338;
        float _2395 = _2384 * _389;
        float _2396 = _390 * _2384;
        float _2397 = (-0.0) - _2396;
        float _2398 = _2384 * _391;
        float _2400 = (cbSceneParam._m0[77u].w * _2397) / _2383;
        float _2401 = _2400 + cbSceneParam._m0[79u].w;
        float _2402 = cbSceneParam._m0[79u].w - _2396;
        float _2408 = sqrt(((_2395 * _2395) + (_2396 * _2396)) + (_2398 * _2398));
        float _2411 = (1.0 - (cbSceneParam._m0[77u].w / _2383)) * _2408;
        float _2416 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2418 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2595;
        if (abs((_2397 - _2400) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2595 = ((((_2401 > 0.0) ? exp2(_2416 * _2401) : (2.0 - exp2(_2418 * _2401))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2411;
        }
        else
        {
            float _2539 = 1.0 / cbSceneParam._m0[80u].x;
            float _2540 = isnan(_2402) ? _2401 : (isnan(_2401) ? _2402 : max(_2401, _2402));
            float _2541 = isnan(_2402) ? _2401 : (isnan(_2401) ? _2402 : min(_2401, _2402));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            _2595 = ((abs(_2408 / _2397) * cbSceneParam._m0[80u].y) * ((((_2550 - _2551) * 2.0) - ((exp2(_2416 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0)))) - exp2(_2416 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0))))) * _2539)) - ((exp2(_2418 * _2550) - exp2(_2418 * _2551)) * _2539))) + (_2411 * cbSceneParam._m0[80u].z);
        }
        vec4 _2597 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2308, _2309, 1.0), 0.0);
        float _2606 = exp2((_2595 * (-1.44269502162933349609375)) * (1.0 - _2597.w));
        float _2607 = log2(_2606);
        float _2623 = log2(_2328);
        _2420 = (exp2(_2623 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2607 * cbSceneParam._m0[78u].x)) * _2597.x) / cbSceneParam._m0[78u].x)) + _2325;
        _2422 = (exp2(_2623 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2607 * cbSceneParam._m0[78u].y)) * _2597.y) / cbSceneParam._m0[78u].y)) + _2326;
        _2424 = (exp2(_2623 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2607 * cbSceneParam._m0[78u].z)) * _2597.z) / cbSceneParam._m0[78u].z)) + _2327;
        _2426 = _2606 * _2328;
    }
    else
    {
        _2420 = _2325;
        _2422 = _2326;
        _2424 = _2327;
        _2426 = _2328;
    }
    bool _2633;
    vec4 _2436;
    vec4 _2458;
    float _2460;
    float _2464;
    float _2465;
    float _2466;
    float _2467;
    bool _2477;
    for (;;)
    {
        _2436 = cbMatDynParam._m0[0u];
        float _2438 = roundEven(_2436.y);
        bool _2439 = _2438 == 3.0;
        float _2440 = log2(_2426);
        float _2447 = exp2(_2440 * cbSceneParam._m0[78u].x) * _2297;
        float _2448 = exp2(_2440 * cbSceneParam._m0[78u].y) * _2298;
        float _2449 = exp2(_2440 * cbSceneParam._m0[78u].z) * _2299;
        float _2456 = _405 + (-0.5);
        _2458 = cbMtdParam._m0[1u];
        _2460 = _2458.y * _2456;
        float _2463 = (_2438 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2464 = _2463 * (_2439 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2420)));
        _2465 = _2463 * (_2439 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2422)));
        _2466 = _2463 * (_2439 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2424)));
        _2467 = _2456 * 0.999000012874603271484375;
        _2477 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2477)
        {
            if ((cbInstanceData._m0[_457 + 7u].x + _2467) < 0.5)
            {
                _2633 = true;
                break;
            }
        }
        uint _2574 = _459 + uint(_2436.w);
        if ((cbInstanceData._m0[_2574].w < 1.0) && ((cbInstanceData._m0[_2574].w + _2467) < 0.5))
        {
            _2633 = true;
            break;
        }
        if ((_2460 + 1.0) < _2458.x)
        {
            _2633 = true;
            break;
        }
        _2633 = false;
        break;
    }
    float _2838;
    if (_2633)
    {
        discard_state = true;
        _2838 = 0.0;
    }
    else
    {
        _2838 = cbInstanceData._m0[_2300].w;
    }
    SV_Target.x = _2464;
    SV_Target.y = _2465;
    SV_Target.z = _2466;
    SV_Target.w = _2838;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2300].w;
    discard_exit();
}


