#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _904;
float _3318;
float _3319;
float _3320;
float _3321;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    float _236 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _237 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _250 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_236 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_237 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _256 = _250.x * cbMtdParam._m0[9u].x;
    float _257 = _250.y * cbMtdParam._m0[9u].y;
    float _258 = _250.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _236) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _237) + cbTextureTilingScale._m0[2u].w));
    float _274 = cbMtdParam._m0[10u].x + _270.x;
    vec4 _286 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _236) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _237) + cbTextureTilingScale._m0[1u].w));
    float _290 = _286.z;
    float _294 = (_286.x * 2.0) + (-1.0);
    float _296 = (_286.y * 2.0) + (-1.0);
    float _297 = dot(vec2(_294, _296), vec2(_294, _296));
    float _3330 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _303 = sqrt(1.0 - (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))));
    float _306 = fma(_303, _220, fma(_296, _212 * TANGENT.x, (_198 * _191) * _294));
    float _309 = fma(_303, _221, fma(_296, _212 * TANGENT.y, (_198 * _192) * _294));
    float _312 = fma(_303, _222, fma(_296, _212 * TANGENT.z, (_198 * _193) * _294));
    float _316 = inversesqrt(dot(vec3(_306, _309, _312), vec3(_306, _309, _312)));
    float _317 = _316 * _306;
    float _318 = _316 * _309;
    float _319 = _316 * _312;
    float _3341 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _320 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _3352 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3363 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3374 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3385 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _324 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _340 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _381 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _391 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _381);
    float _392 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _381);
    float _393 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _381);
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _391 * _397;
    float _399 = _392 * _397;
    float _400 = _393 * _397;
    vec4 _405 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _407 = _405.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _583 = sqrt(((_391 * _391) + (_392 * _392)) + (_393 * _393));
        float _589 = (cbMatDynParam._m0[5u].x * _583) + cbMatDynParam._m0[5u].y;
        float _3396 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _590 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _594 = (cbMatDynParam._m0[5u].z * _583) + cbMatDynParam._m0[5u].w;
        float _3407 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) - _590)) + _590) < ((_407 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _419 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _420 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _440 = fma(_319, cbSceneParam._m0[5u].z, fma(_318, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _317));
    float _443 = fma(_319, cbSceneParam._m0[6u].z, fma(_318, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _317));
    float _446 = fma(_319, cbSceneParam._m0[7u].z, fma(_318, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _317));
    uint _459 = uint(roundEven(NORMAL.w)) * 13u;
    uint _461 = _459 + 9u;
    uint _462 = _461 + uint(cbMatDynParam._m0[0u].w);
    float _468 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0)))) * cbInstanceData._m0[_462].x;
    float _469 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0)))) * cbInstanceData._m0[_462].y;
    float _470 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * cbInstanceData._m0[_462].z;
    float _3418 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _474 = 1.0 - _324;
    float _475 = _471 * _474;
    float _476 = _472 * _474;
    float _477 = _473 * _474;
    float _482 = (_471 + (-0.039999999105930328369140625)) * _324;
    float _483 = (_472 + (-0.039999999105930328369140625)) * _324;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _324;
    float _485 = _482 + 0.039999999105930328369140625;
    float _487 = _483 + 0.039999999105930328369140625;
    float _488 = _484 + 0.039999999105930328369140625;
    vec4 _497 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _419, cbSceneParam._m0[86u].y * _420));
    float _500 = _497.x * TEXCOORD.z;
    float _501 = dot(vec3(_317, _318, _319), vec3(_398, _399, _400));
    float _504 = _501 * 2.0;
    float _508 = (_504 * _317) - _398;
    float _509 = (_504 * _318) - _399;
    float _510 = (_504 * _319) - _400;
    float _514 = abs(dot(vec3(_398, _399, _400), vec3(_317, _318, _319)));
    float _3451 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _516 = sqrt(_320);
    float _529 = exp2((_516 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_516 * 3.0));
    float _535 = (1.0 - _529) * ((_516 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _536 = _529 * _516;
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _903;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _628 = fma(_572, cbModelParam._m0[26u].z, fma(_568, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _564));
        float _632 = fma(_572, cbModelParam._m0[27u].z, fma(_568, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _564));
        float _636 = fma(_572, cbModelParam._m0[28u].z, fma(_568, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _564));
        float _661 = _564 + _317;
        float _662 = _568 + _318;
        float _663 = _572 + _319;
        float _673 = fma(_663, cbModelParam._m0[26u].z, fma(_662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _661)) - _628;
        float _674 = fma(_663, cbModelParam._m0[27u].z, fma(_662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _661)) - _632;
        float _675 = fma(_663, cbModelParam._m0[28u].z, fma(_662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _661)) - _636;
        float _679 = inversesqrt(dot(vec3(_673, _674, _675), vec3(_673, _674, _675)));
        float _692 = ((_679 * _673) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_628 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _693 = ((_679 * _674) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_632 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _694 = ((_679 * _675) / cbModelParam._m0[34u].z) + ((((((_636 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_692, _693, _694), 0.0);
        float _731 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_697.x + (-0.5));
        float _733 = _731 * (_697.y + (-0.5));
        float _734 = _731 * (_697.z + (-0.5));
        float _741 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_704.x + (-0.5));
        float _743 = _741 * (_704.y + (-0.5));
        float _744 = _741 * (_704.z + (-0.5));
        float _751 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_711.x + (-0.5));
        float _753 = _751 * (_711.y + (-0.5));
        float _754 = _751 * (_711.z + (-0.5));
        float _761 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_718.x + (-0.5));
        float _763 = _761 * (_718.y + (-0.5));
        float _764 = _761 * (_718.z + (-0.5));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = _732 * 0.5;
        float _769 = _742 * 0.5;
        float _770 = _752 * 0.5;
        float _771 = dot(vec3(_768, _769, _770), vec3(_768, _769, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _785 = (dot(vec3(_317, _318, _319), vec3(_776 * _768, _776 * _769, _776 * _770)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _795 = sqrt(((_769 * _769) + (_768 * _768)) + (_770 * _770)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _797 = _796 * 2.0;
        float _801 = (1.0 - _796) / (_796 + 1.0);
        float _3499 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _811 = ((((1.0 - _802) * (_797 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_797 + 1.0))) + _802) * _765;
        float _812 = _733 * 0.5;
        float _813 = _743 * 0.5;
        float _814 = _753 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _828 = (dot(vec3(_317, _318, _319), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _837 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3532 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_839 + 1.0))) + _844) * _766;
        float _854 = _734 * 0.5;
        float _855 = _744 * 0.5;
        float _856 = _754 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _870 = (dot(vec3(_317, _318, _319), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _879 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3565 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_881 + 1.0))) + _886) * _767;
        _903 = _734;
        _905 = _733;
        _906 = _732;
        _907 = _744;
        _908 = _743;
        _909 = _742;
        _910 = _754;
        _911 = _753;
        _912 = _752;
        _913 = _767;
        _914 = _766;
        _915 = _765;
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0)));
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
    }
    else
    {
        _903 = _904;
        _905 = _904;
        _906 = _904;
        _907 = _904;
        _908 = _904;
        _909 = _904;
        _910 = _904;
        _911 = _904;
        _912 = _904;
        _913 = _904;
        _914 = _904;
        _915 = _904;
        _916 = 0.0;
        _917 = 0.0;
        _918 = 0.0;
    }
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _947 = fma(_572, cbModelParam._m0[30u].z, fma(_568, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _564));
        float _951 = fma(_572, cbModelParam._m0[31u].z, fma(_568, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _564));
        float _955 = fma(_572, cbModelParam._m0[32u].z, fma(_568, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _564));
        float _978 = _564 + _317;
        float _979 = _568 + _318;
        float _980 = _572 + _319;
        float _990 = fma(_980, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978)) - _947;
        float _991 = fma(_980, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978)) - _951;
        float _992 = fma(_980, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978)) - _955;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_947 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_951 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[35u].z) + ((((((_955 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1046 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1013.x + (-0.5));
        float _1048 = _1046 * (_1013.y + (-0.5));
        float _1049 = _1046 * (_1013.z + (-0.5));
        float _1056 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1020.x + (-0.5));
        float _1058 = _1056 * (_1020.y + (-0.5));
        float _1059 = _1056 * (_1020.z + (-0.5));
        float _1066 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1027.x + (-0.5));
        float _1068 = _1066 * (_1027.y + (-0.5));
        float _1069 = _1066 * (_1027.z + (-0.5));
        float _1076 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1034.x + (-0.5));
        float _1078 = _1076 * (_1034.y + (-0.5));
        float _1079 = _1076 * (_1034.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_317, _318, _319), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3628 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1110 + 1.0))) + _1115) * _1080;
        float _1125 = _1048 * 0.5;
        float _1126 = _1058 * 0.5;
        float _1127 = _1068 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_317, _318, _319), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3661 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1152 + 1.0))) + _1157) * _1081;
        float _1167 = _1049 * 0.5;
        float _1168 = _1059 * 0.5;
        float _1169 = _1069 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_317, _318, _319), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3694 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1194 + 1.0))) + _1199) * _1082;
        _1216 = _1049;
        _1217 = _1048;
        _1218 = _1047;
        _1219 = _1059;
        _1220 = _1058;
        _1221 = _1057;
        _1222 = _1069;
        _1223 = _1068;
        _1224 = _1067;
        _1225 = _1082;
        _1226 = _1081;
        _1227 = _1080;
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _904;
        _1217 = _904;
        _1218 = _904;
        _1219 = _904;
        _1220 = _904;
        _1221 = _904;
        _1222 = _904;
        _1223 = _904;
        _1224 = _904;
        _1225 = _904;
        _1226 = _904;
        _1227 = _904;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _916)) + _916;
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _917)) + _917;
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _918)) + _918;
    float _1263 = fma(_1242, cbSceneParam._m0[89u].z, fma(_1241, cbSceneParam._m0[89u].y, _1240 * cbSceneParam._m0[89u].x));
    float _1266 = fma(_1242, cbSceneParam._m0[90u].z, fma(_1241, cbSceneParam._m0[90u].y, _1240 * cbSceneParam._m0[90u].x));
    float _1269 = fma(_1242, cbSceneParam._m0[91u].z, fma(_1241, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1240));
    float _1284 = _508 * 0.5;
    float _1285 = _509 * 0.5;
    float _1286 = _510 * 0.5;
    float _1287 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1290 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1293 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1327;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1300 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_903, _907, _910, _913));
        float _1304 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_905, _908, _911, _914));
        float _1308 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_906, _909, _912, _915));
        float _1315 = dot(vec4(cbModelParam._m0[39u]), vec4(_1284, _1285, _1286, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1315) ? 0.0 : (isnan(0.0) ? _1315 : max(0.0, _1315))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1338;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1329 = dot(vec4(cbModelParam._m0[40u]), vec4(_1284, _1285, _1286, 1.0));
        _1338 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1338 = 1.0;
    }
    float _1342 = (_1338 * cbModelParam._m0[1u].x) + (_1327 * (1.0 - cbModelParam._m0[1u].x));
    float _1352 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _320);
    float _1353 = isnan(_1352) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1352 : min(cbModelParam._m0[25u].z, _1352));
    float _1435;
    float _1437;
    float _1439;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1402 = fma(_572, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _564)) + cbModelParam._m0[13u].w;
        float _1406 = fma(_572, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _564)) + cbModelParam._m0[14u].w;
        float _1410 = fma(_572, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _564)) + cbModelParam._m0[15u].w;
        float _1413 = fma(_510, cbModelParam._m0[13u].z, fma(_509, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _508));
        float _1416 = fma(_510, cbModelParam._m0[14u].z, fma(_509, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _508));
        float _1419 = fma(_510, cbModelParam._m0[15u].z, fma(_509, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _508));
        float _1447;
        if (_1413 > 0.0)
        {
            _1447 = abs((1.0 - _1402) / _1413);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1402 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1447 = frontier_phi_19_17_ladder;
        }
        float _1675;
        if (_1416 > 0.0)
        {
            _1675 = abs((1.0 - _1406) / _1416);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1406 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1675 = frontier_phi_28_24_ladder;
        }
        float _1932;
        if (_1419 > 0.0)
        {
            _1932 = abs((1.0 - _1410) / _1419);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1410 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1932 = frontier_phi_40_35_ladder;
        }
        float _1934 = isnan(_1675) ? _1447 : (isnan(_1447) ? _1675 : min(_1447, _1675));
        float _1935 = isnan(_1932) ? _1934 : (isnan(_1934) ? _1932 : min(_1934, _1932));
        float _1939 = (_1935 * _1413) + _1402;
        float _1940 = (_1935 * _1416) + _1406;
        float _1941 = (_1935 * _1419) + _1410;
        float _1942 = _1935 * 9.9999997473787516355514526367188e-05;
        float _1944 = (-1.0) - _1942;
        float _1946 = _1942 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1941 > _1946) || ((_1941 < _1944) || ((_1940 > _1946) || ((_1940 < _1944) || ((_1939 < _1944) || (_1939 > _1946))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2069 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1941, cbModelParam._m0[9u].z, fma(_1940, cbModelParam._m0[9u].y, _1939 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1941, cbModelParam._m0[10u].z, fma(_1940, cbModelParam._m0[10u].y, _1939 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1941, cbModelParam._m0[11u].z, fma(_1940, cbModelParam._m0[11u].y, _1939 * cbModelParam._m0[11u].x))), _1353);
            frontier_phi_18_40_ladder = _2069.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2069.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2069.x * cbModelParam._m0[1u].y;
        }
        _1435 = frontier_phi_18_40_ladder_2;
        _1437 = frontier_phi_18_40_ladder_1;
        _1439 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_508, _509, _510), _1353);
        _1435 = _1423.x * cbModelParam._m0[1u].y;
        _1437 = _1423.y * cbModelParam._m0[1u].y;
        _1439 = _1423.z * cbModelParam._m0[1u].y;
    }
    float _1443 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _320);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1443 : min(cbModelParam._m0[25u].w, _1443));
    float _1536;
    float _1538;
    float _1540;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1500 = fma(_572, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _564)) + cbModelParam._m0[21u].w;
        float _1504 = fma(_572, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _564)) + cbModelParam._m0[22u].w;
        float _1508 = fma(_572, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _564)) + cbModelParam._m0[23u].w;
        float _1511 = fma(_510, cbModelParam._m0[21u].z, fma(_509, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _508));
        float _1514 = fma(_510, cbModelParam._m0[22u].z, fma(_509, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _508));
        float _1517 = fma(_510, cbModelParam._m0[23u].z, fma(_509, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _508));
        float _1680;
        if (_1511 > 0.0)
        {
            _1680 = abs((1.0 - _1500) / _1511);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1500 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1680 = frontier_phi_30_26_ladder;
        }
        float _1959;
        if (_1514 > 0.0)
        {
            _1959 = abs((1.0 - _1504) / _1514);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1504 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1959 = frontier_phi_42_37_ladder;
        }
        float _2172;
        if (_1517 > 0.0)
        {
            _2172 = abs((1.0 - _1508) / _1517);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1508 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2172 = frontier_phi_51_48_ladder;
        }
        float _2174 = isnan(_1959) ? _1680 : (isnan(_1680) ? _1959 : min(_1680, _1959));
        float _2175 = isnan(_2172) ? _2174 : (isnan(_2174) ? _2172 : min(_2174, _2172));
        float _2179 = (_2175 * _1511) + _1500;
        float _2180 = (_2175 * _1514) + _1504;
        float _2181 = (_2175 * _1517) + _1508;
        float _2182 = _2175 * 9.9999997473787516355514526367188e-05;
        float _2183 = (-1.0) - _2182;
        float _2185 = _2182 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2181 > _2185) || ((_2181 < _2183) || ((_2180 > _2185) || ((_2180 < _2183) || ((_2179 < _2183) || (_2179 > _2185))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2379 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2181, cbModelParam._m0[17u].z, fma(_2180, cbModelParam._m0[17u].y, _2179 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2181, cbModelParam._m0[18u].z, fma(_2180, cbModelParam._m0[18u].y, _2179 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2181, cbModelParam._m0[19u].z, fma(_2180, cbModelParam._m0[19u].y, _2179 * cbModelParam._m0[19u].x))), _1444);
            frontier_phi_27_51_ladder = _2379.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2379.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2379.x * cbModelParam._m0[1u].z;
        }
        _1536 = frontier_phi_27_51_ladder_2;
        _1538 = frontier_phi_27_51_ladder_1;
        _1540 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1520 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_508, _509, _510), _1444);
        _1536 = _1520.x * cbModelParam._m0[1u].z;
        _1538 = _1520.y * cbModelParam._m0[1u].z;
        _1540 = _1520.z * cbModelParam._m0[1u].z;
    }
    float _1553 = (((_535 * _485) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1536 - _1435)) + _1435);
    float _1555 = (((_535 * _487) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1538 - _1437)) + _1437);
    float _1557 = (((_535 * _488) + _536) * _500) * ((cbModelParam._m0[1u].w * (_1540 - _1439)) + _1439);
    float _1560 = fma(_1557, cbSceneParam._m0[89u].z, fma(_1555, cbSceneParam._m0[89u].y, _1553 * cbSceneParam._m0[89u].x));
    float _1563 = fma(_1557, cbSceneParam._m0[90u].z, fma(_1555, cbSceneParam._m0[90u].y, _1553 * cbSceneParam._m0[90u].x));
    float _1566 = fma(_1557, cbSceneParam._m0[91u].z, fma(_1555, cbSceneParam._m0[91u].y, _1553 * cbSceneParam._m0[91u].x));
    vec4 _1574 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_419, _420));
    float _1576 = _1574.w;
    float _1588 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1576);
    float _1589 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1576);
    float _1590 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1576);
    uvec4 _1594 = floatBitsToUint(cbInstanceData._m0[_459 + 5u]);
    uint _1596 = _1594.x * 14u;
    uint _1597 = _1596 + 13u;
    float _1604 = _500 + (-1.0);
    float _1609 = (cbLight._m0[_1597].x * _1604) + 1.0;
    float _1610 = (cbLight._m0[_1597].y * _1604) + 1.0;
    float _1611 = (cbLight._m0[_1597].z * _1604) + 1.0;
    float _1612 = (cbLight._m0[_1597].w * _1604) + 1.0;
    uint _1613 = _1596 + 5u;
    float _1619 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
    uint _1623 = _1596 + 4u;
    float _1633 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
    uint _1637 = _1596 | 1u;
    float _1648 = dot(vec3(cbLight._m0[_1596].xyz), vec3(_317, _318, _319));
    float _1651 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_317, _318, _319));
    float _3830 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _3841 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1656 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.3183098733425140380859375;
    float _1658 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.3183098733425140380859375;
    float _1665 = ((cbLight._m0[_1613].x * _1619) * _1658) + (((cbLight._m0[_1623].x * _1588) * _1633) * _1656);
    float _1666 = ((_1619 * cbLight._m0[_1613].y) * _1658) + (((cbLight._m0[_1623].y * _1589) * _1633) * _1656);
    float _1667 = ((_1619 * cbLight._m0[_1613].z) * _1658) + (((cbLight._m0[_1623].z * _1590) * _1633) * _1656);
    uvec4 _1672 = floatBitsToUint(cbLight._m0[_1596 + 12u]);
    bool _1674 = _1672.x == 0u;
    float _1685;
    float _1687;
    float _1689;
    if (_1674)
    {
        _1685 = _1665;
        _1687 = _1666;
        _1689 = _1667;
    }
    else
    {
        uint _1693 = _1596 + 6u;
        float _1709 = (dot(vec3(cbLight._m0[_1596 + 2u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _1710 = _1709 * _1709;
        float _3852 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1712 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
        _1685 = (((cbLight._m0[_1693].x * 0.3183098733425140380859375) * _1711) * _1712) + _1665;
        _1687 = (((cbLight._m0[_1693].y * 0.3183098733425140380859375) * _1711) * _1712) + _1666;
        _1689 = (((cbLight._m0[_1693].z * 0.3183098733425140380859375) * _1711) * _1712) + _1667;
    }
    bool _1692 = _1672.y == 0u;
    float _1730;
    float _1732;
    float _1734;
    if (_1692)
    {
        _1730 = _1685;
        _1732 = _1687;
        _1734 = _1689;
    }
    else
    {
        uint _1903 = _1596 + 7u;
        float _1919 = (dot(vec3(cbLight._m0[_1596 + 3u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _1920 = _1919 * _1919;
        float _3868 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1921 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1922 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
        _1730 = (((cbLight._m0[_1903].x * 0.3183098733425140380859375) * _1921) * _1922) + _1685;
        _1732 = (((cbLight._m0[_1903].y * 0.3183098733425140380859375) * _1921) * _1922) + _1687;
        _1734 = (((cbLight._m0[_1903].z * 0.3183098733425140380859375) * _1921) * _1922) + _1689;
    }
    uint _1737 = _1596 + 8u;
    float _1750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1596].w)) * _320) * 0.949999988079071044921875);
    float _1751 = _1750 * _1750;
    float _1752 = cbLight._m0[_1596].x + _398;
    float _1753 = cbLight._m0[_1596].y + _399;
    float _1754 = cbLight._m0[_1596].z + _400;
    float _1758 = inversesqrt(dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754)));
    float _1759 = _1758 * _1752;
    float _1760 = _1758 * _1753;
    float _1761 = _1758 * _1754;
    float _1762 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1596].xyz));
    float _3884 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _1766 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1767 = dot(vec3(_317, _318, _319), vec3(_1759, _1760, _1761));
    float _3906 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _1771 = dot(vec3(cbLight._m0[_1596].xyz), vec3(_1759, _1760, _1761));
    float _3917 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1775 = _1751 * _1751;
    float _1779 = ((_1770 * _1770) * (_1775 + (-1.0))) + 1.0;
    float _1787 = exp2(log2(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * 5.0);
    float _1788 = 0.959999978542327880859375 - _482;
    float _1790 = 0.959999978542327880859375 - _483;
    float _1791 = 0.959999978542327880859375 - _484;
    float _1798 = 1.0 - _1751;
    float _1809 = (0.5 / (((_1766 * ((_1765 * _1798) + _1751)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _1798) + _1751) * _1765))) * _1765;
    float _3928 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1811 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1775 / ((_1779 * _1779) * 3.141590118408203125));
    uint _1825 = _1596 + 9u;
    float _1836 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1637].w)) * _320) * 0.949999988079071044921875);
    float _1837 = _1836 * _1836;
    float _1838 = cbLight._m0[_1637].x + _398;
    float _1839 = cbLight._m0[_1637].y + _399;
    float _1840 = cbLight._m0[_1637].z + _400;
    float _1844 = inversesqrt(dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840)));
    float _1845 = _1844 * _1838;
    float _1846 = _1844 * _1839;
    float _1847 = _1844 * _1840;
    float _1848 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1637].xyz));
    float _3939 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1852 = dot(vec3(_317, _318, _319), vec3(_1845, _1846, _1847));
    float _3950 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1856 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_1845, _1846, _1847));
    float _3961 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1860 = _1837 * _1837;
    float _1864 = ((_1855 * _1855) * (_1860 + (-1.0))) + 1.0;
    float _1871 = exp2(log2(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * 5.0);
    float _1878 = 1.0 - _1837;
    float _1888 = (0.5 / (((_1766 * ((_1851 * _1878) + _1837)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _1878) + _1837) * _1851))) * _1851;
    float _3972 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1890 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1860 / ((_1864 * _1864) * 3.141590118408203125));
    float _1900 = (((((_1871 * _1788) + _485) * cbLight._m0[_1825].x) * _1890) * _1619) + ((((cbLight._m0[_1737].x * _1588) * ((_1787 * _1788) + _485)) * _1811) * _1633);
    float _1901 = (((((_1871 * _1790) + _487) * cbLight._m0[_1825].y) * _1890) * _1619) + ((((cbLight._m0[_1737].y * _1589) * ((_1787 * _1790) + _487)) * _1811) * _1633);
    float _1902 = (((((_1871 * _1791) + _488) * cbLight._m0[_1825].z) * _1890) * _1619) + ((((cbLight._m0[_1737].z * _1590) * ((_1787 * _1791) + _488)) * _1811) * _1633);
    float _1964;
    float _1966;
    float _1968;
    if (_1674)
    {
        _1964 = _1900;
        _1966 = _1901;
        _1968 = _1902;
    }
    else
    {
        uint _1970 = _1596 + 2u;
        uint _1974 = _1596 + 10u;
        float _1988 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _320) * 0.949999988079071044921875);
        float _1989 = _1988 * _1988;
        float _1990 = cbLight._m0[_1970].x + _398;
        float _1991 = cbLight._m0[_1970].y + _399;
        float _1992 = cbLight._m0[_1970].z + _400;
        float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
        float _1997 = _1996 * _1990;
        float _1998 = _1996 * _1991;
        float _1999 = _1996 * _1992;
        float _2000 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1970].xyz));
        float _3983 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2003 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _2004 = dot(vec3(_317, _318, _319), vec3(_1997, _1998, _1999));
        float _3994 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2007 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2008 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_1997, _1998, _1999));
        float _4005 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2012 = _1989 * _1989;
        float _2016 = ((_2007 * _2007) * (_2012 + (-1.0))) + 1.0;
        float _2023 = exp2(log2(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * 5.0);
        float _2030 = 1.0 - _1989;
        float _2040 = (0.5 / (((_1766 * ((_2003 * _2030) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _2030) + _1989) * _2003))) * _2003;
        float _4016 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2042 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_2012 / ((_2016 * _2016) * 3.141590118408203125));
        float _2043 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
        _1964 = (((((_2023 * _1788) + _485) * cbLight._m0[_1974].x) * _2042) * _2043) + _1900;
        _1966 = (((((_2023 * _1790) + _487) * cbLight._m0[_1974].y) * _2042) * _2043) + _1901;
        _1968 = (((((_2023 * _1791) + _488) * cbLight._m0[_1974].z) * _2042) * _2043) + _1902;
    }
    float _2078;
    float _2080;
    float _2082;
    if (_1692)
    {
        _2078 = _1964;
        _2080 = _1966;
        _2082 = _1968;
    }
    else
    {
        uint _2089 = _1596 + 3u;
        uint _2093 = _1596 + 11u;
        float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _320) * 0.949999988079071044921875);
        float _2108 = _2107 * _2107;
        float _2109 = cbLight._m0[_2089].x + _398;
        float _2110 = cbLight._m0[_2089].y + _399;
        float _2111 = cbLight._m0[_2089].z + _400;
        float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
        float _2116 = _2115 * _2109;
        float _2117 = _2115 * _2110;
        float _2118 = _2115 * _2111;
        float _2119 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_2089].xyz));
        float _4032 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2122 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2123 = dot(vec3(_317, _318, _319), vec3(_2116, _2117, _2118));
        float _4043 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2127 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2116, _2117, _2118));
        float _4054 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2131 = _2108 * _2108;
        float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
        float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0);
        float _2149 = 1.0 - _2108;
        float _2159 = (0.5 / (((_1766 * ((_2122 * _2149) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _2149) + _2108) * _2122))) * _2122;
        float _4065 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2161 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
        float _2162 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
        _2078 = (((((_2142 * _1788) + _485) * cbLight._m0[_2093].x) * _2161) * _2162) + _1964;
        _2080 = (((((_2142 * _1790) + _487) * cbLight._m0[_2093].y) * _2161) * _2162) + _1966;
        _2082 = (((((_2142 * _1791) + _488) * cbLight._m0[_2093].z) * _2161) * _2162) + _1968;
    }
    float _2296;
    float _2298;
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    if (_1594.y == 0u)
    {
        float _2237 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2237;
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2237;
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2237;
        uvec4 _2252 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2253 = _2252.x;
        uint _2264 = uint((float(_2252.y) * floor(float(uint(cbSceneParam._m0[85u].y * _420) / _2253))) + floor(float(uint(cbSceneParam._m0[85u].x * _419) / _2253)));
        float _2274 = (log2(_2240 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2275 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        uint _2278 = uint(isnan(14.0) ? _2275 : (isnan(_2275) ? 14.0 : min(_2275, 14.0)));
        uvec4 _2283 = texelFetch(g_lightClusterGridBuffer, int(((_2278 << 2u) + (_2264 << 6u)) >> 2u));
        uint _2284 = _2283.x;
        uint _2285 = _2252.z;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        if (((((1u << ((_2285 >> 4u) & 15u)) + 4294967295u) & _2284) == 0u) || ((_2285 & 240u) == 0u))
        {
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
        }
        else
        {
            float _2385;
            float _2387;
            float _2389;
            float _2391;
            float _2393;
            float _2395;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            uint _2542 = 0u;
            uint _2551;
            bool _2552;
            for (;;)
            {
                _2551 = texelFetch(g_lightClassification, int((((_2278 << 5u) + (_2264 << 9u)) + (_2542 << 2u)) >> 2u)).x;
                _2552 = _2551 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2552)
                {
                    frontier_phi_68_pred = _2538;
                    frontier_phi_68_pred_1 = _2541;
                    frontier_phi_68_pred_2 = _2540;
                    frontier_phi_68_pred_3 = _2539;
                    frontier_phi_68_pred_4 = _2537;
                    frontier_phi_68_pred_5 = _2536;
                }
                else
                {
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    uint _2687;
                    _2681 = _2536;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2539;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2551;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    for (;;)
                    {
                        uint _2691 = uint(findLSB(_2687)) + (_2542 << 5u);
                        uint _2688 = (_2687 + 4294967295u) & _2687;
                        uint _2693 = _2691 * 48u;
                        vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 3u)).x));
                        uint _2713 = (_2691 * 48u) + 4u;
                        vec4 _2726 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 3u)).x));
                        uint _2732 = (_2691 * 48u) + 8u;
                        vec3 _2743 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x));
                        float _2747 = _2707.x - _2238;
                        float _2748 = _2707.y - _2239;
                        float _2749 = _2707.z - _2240;
                        float _2750 = dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749));
                        float _2753 = inversesqrt(_2750);
                        float _2754 = _2753 * _2747;
                        float _2755 = _2753 * _2748;
                        float _2756 = _2753 * _2749;
                        float _2757 = dot(vec3(_440, _443, _446), vec3(_2754, _2755, _2756));
                        float _2762 = 1.0 - (_2750 * _2707.w);
                        float _4091 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2763 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2764 = sqrt(_2750) * _2726.w;
                        float _2767 = 1.39999997615814208984375 / (_2764 + 1.39999997615814208984375);
                        float _2768 = _2767 * _2767;
                        float _2771 = ((1.0 - _2768) * _2757) + _2768;
                        float _2774 = _2764 * _2764;
                        float _2778 = ((isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0))) * _2763) / ((_2774 * 0.699999988079071044921875) + 1.0);
                        float _2782 = (-0.0) - _2238;
                        float _2783 = (-0.0) - _2239;
                        float _2784 = (-0.0) - _2240;
                        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
                        float _2789 = _2788 * _2782;
                        float _2790 = _2788 * _2783;
                        float _2791 = _2788 * _2784;
                        float _2799 = exp2(log2(1.0 / ((_2774 * 3.5) + 5.0)) * 0.25);
                        float _2800 = 1.0 - _516;
                        float _2807 = sqrt(1.0 - ((1.0 - (_2800 * _2800)) * (1.0 - (_2799 * _2799))));
                        float _2808 = _2807 * _2807;
                        float _2809 = _2808 * _2808;
                        float _2810 = _2789 + _2754;
                        float _2811 = _2790 + _2755;
                        float _2812 = _2791 + _2756;
                        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
                        float _2820 = dot(vec3(_440, _443, _446), vec3(_2789, _2790, _2791));
                        float _4107 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2823 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2824 = dot(vec3(_440, _443, _446), vec3(_2816 * _2810, _2816 * _2811, _2816 * _2812));
                        float _4118 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2827 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2831 = ((_2827 * _2827) * (_2809 + (-1.0))) + 1.0;
                        float _2832 = _2767 * _2808;
                        float _2833 = _2832 * _2832;
                        float _2836 = ((1.0 - _2833) * _2757) + _2833;
                        float _4129 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2837 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2838 = 1.0 - _2808;
                        float _2848 = (0.5 / (((_2837 * ((_2823 * _2838) + _2808)) + 9.9999999392252902907785028219223e-09) + (((_2837 * _2838) + _2808) * _2823))) * _2837;
                        float _4140 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2859 = (((_2809 * 3.1415927410125732421875) * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) / ((_2831 * _2831) * ((_2774 * 2.1991131305694580078125) + 3.141590118408203125))) * _2763;
                        _2611 = (_2778 * _2726.x) + _2684;
                        _2612 = (_2778 * _2726.y) + _2685;
                        _2613 = (_2778 * _2726.z) + _2686;
                        _2608 = (_2859 * _2743.x) + _2681;
                        _2609 = (_2859 * _2743.y) + _2682;
                        _2610 = (_2859 * _2743.z) + _2683;
                        if (_2688 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2681 = _2608;
                            _2682 = _2609;
                            _2683 = _2610;
                            _2684 = _2611;
                            _2685 = _2612;
                            _2686 = _2613;
                            _2687 = _2688;
                        }
                    }
                    frontier_phi_68_pred = _2610;
                    frontier_phi_68_pred_1 = _2613;
                    frontier_phi_68_pred_2 = _2612;
                    frontier_phi_68_pred_3 = _2611;
                    frontier_phi_68_pred_4 = _2609;
                    frontier_phi_68_pred_5 = _2608;
                }
                _2389 = frontier_phi_68_pred;
                _2395 = frontier_phi_68_pred_1;
                _2393 = frontier_phi_68_pred_2;
                _2391 = frontier_phi_68_pred_3;
                _2387 = frontier_phi_68_pred_4;
                _2385 = frontier_phi_68_pred_5;
                uint _2543 = _2542 + 1u;
                if (_2543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2536 = _2385;
                    _2537 = _2387;
                    _2538 = _2389;
                    _2539 = _2391;
                    _2540 = _2393;
                    _2541 = _2395;
                    _2542 = _2543;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
        }
        uvec4 _2398 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2399 = _2398.z;
        uint _2401 = (_2399 >> 8u) & 15u;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        if (((4294967295u << _2401) & _2284) == 0u)
        {
            _2504 = _2384;
            _2506 = _2386;
            _2508 = _2388;
            _2510 = _2390;
            _2512 = _2392;
            _2514 = _2394;
        }
        else
        {
            float _2529 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
            float _2530 = _2529 * _2238;
            float _2531 = _2529 * _2239;
            float _2532 = _2529 * _2240;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2401 < ((_2399 >> 12u) & 15u))
            {
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2664 = _2384;
                float _2665 = _2386;
                float _2666 = _2388;
                float _2667 = _2390;
                float _2668 = _2392;
                float _2669 = _2394;
                uint _2670 = _2401;
                uint _2679;
                bool _2680;
                for (;;)
                {
                    _2679 = texelFetch(g_lightClassification, int((((_2278 << 5u) + (_2264 << 9u)) + (_2670 << 2u)) >> 2u)).x;
                    _2680 = _2679 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2680)
                    {
                        frontier_phi_79_pred = _2669;
                        frontier_phi_79_pred_1 = _2668;
                        frontier_phi_79_pred_2 = _2667;
                        frontier_phi_79_pred_3 = _2666;
                        frontier_phi_79_pred_4 = _2665;
                        frontier_phi_79_pred_5 = _2664;
                    }
                    else
                    {
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _2886 = _2664;
                        float _2887 = _2665;
                        float _2888 = _2666;
                        float _2889 = _2667;
                        float _2890 = _2668;
                        float _2891 = _2669;
                        uint _2892 = _2679;
                        uint _2893;
                        vec4 _2918;
                        float _2919;
                        vec4 _2934;
                        vec3 _2946;
                        vec4 _2962;
                        vec4 _2978;
                        float _3025;
                        bool _3026;
                        for (;;)
                        {
                            uint _2903 = ((_2670 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2892));
                            _2893 = (_2892 + 4294967295u) & _2892;
                            uint _2905 = _2903 * 40u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            _2919 = _2918.w;
                            uint _2921 = (_2903 * 40u) + 4u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2936 = (_2903 * 40u) + 8u;
                            _2946 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x));
                            uint _2949 = (_2903 * 40u) + 16u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2965 = (_2903 * 40u) + 20u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2981 = (_2903 * 40u) + 24u;
                            vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _3000 = (_2903 * 40u) + 28u;
                            vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            _3025 = fma(_2240, _3013.z, fma(_2239, _3013.y, _3013.x * _2238)) + _3013.w;
                            _3026 = !((fma(_2240, _2994.z, fma(_2239, _2994.y, _2994.x * _2238)) + _2994.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3026)
                            {
                                float _3053 = _2918.x - _2238;
                                float _3054 = _2918.y - _2239;
                                float _3055 = _2918.z - _2240;
                                float _3056 = dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055));
                                float _3059 = inversesqrt(_3056);
                                float _3060 = _3059 * _3053;
                                float _3061 = _3059 * _3054;
                                float _3062 = _3059 * _3055;
                                float _3066 = 1.0 - (_3056 / (_2919 * _2919));
                                float _4151 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3067 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3071 = sqrt(_3056) * _2934.w;
                                float _3073 = 1.39999997615814208984375 / (_3071 + 1.39999997615814208984375);
                                float _3074 = _3073 * _3073;
                                float _3077 = ((1.0 - _3074) * dot(vec3(_3060, _3061, _3062), vec3(_440, _443, _446))) + _3074;
                                float _3080 = _3071 * _3071;
                                float _3084 = (fma(_2240, _2962.z, fma(_2239, _2962.y, _2962.x * _2238)) + _2962.w) / _3025;
                                float _3085 = (fma(_2240, _2978.z, fma(_2239, _2978.y, _2978.x * _2238)) + _2978.w) / _3025;
                                float _3089 = 1.0 - dot(vec2(_3084, _3085), vec2(_3084, _3085));
                                float _4167 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3091 = _3090 * (((isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))) * _3067) / ((_3080 * 0.699999988079071044921875) + 1.0));
                                float _3103 = exp2(log2(1.0 / ((_3080 * 3.5) + 5.0)) * 0.25);
                                float _3104 = 1.0 - _516;
                                float _3111 = sqrt(1.0 - ((1.0 - (_3104 * _3104)) * (1.0 - (_3103 * _3103))));
                                float _3112 = _3111 * _3111;
                                float _3113 = _3112 * _3112;
                                float _3114 = _3060 - _2530;
                                float _3115 = _3061 - _2531;
                                float _3116 = _3062 - _2532;
                                float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                                float _3124 = dot(vec3(_440, _443, _446), vec3((-0.0) - _2530, (-0.0) - _2531, (-0.0) - _2532));
                                float _4178 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3127 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3128 = dot(vec3(_440, _443, _446), vec3(_3120 * _3114, _3120 * _3115, _3120 * _3116));
                                float _4189 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3131 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3135 = ((_3131 * _3131) * (_3113 + (-1.0))) + 1.0;
                                float _3136 = _3073 * _3112;
                                float _3137 = _3136 * _3136;
                                float _3143 = ((1.0 - _3137) * dot(vec3(_440, _443, _446), vec3(_3060, _3061, _3062))) + _3137;
                                float _4200 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3145 = 1.0 - _3112;
                                float _3155 = (0.5 / (((_3144 * ((_3127 * _3145) + _3112)) + 9.9999999392252902907785028219223e-09) + (((_3144 * _3145) + _3112) * _3127))) * _3144;
                                float _4211 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3165 = (_3090 * _3067) * (((_3113 * 3.1415927410125732421875) * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) / ((_3135 * _3135) * ((_3080 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3091 * _2934.z;
                                frontier_phi_85_pred_1 = _3091 * _2934.y;
                                frontier_phi_85_pred_2 = _3091 * _2934.x;
                                frontier_phi_85_pred_3 = _3165 * _2946.z;
                                frontier_phi_85_pred_4 = _3165 * _2946.y;
                                frontier_phi_85_pred_5 = _3165 * _2946.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3174 = frontier_phi_85_pred;
                            _3173 = frontier_phi_85_pred_1;
                            _3172 = frontier_phi_85_pred_2;
                            _3171 = frontier_phi_85_pred_3;
                            _3170 = frontier_phi_85_pred_4;
                            _3169 = frontier_phi_85_pred_5;
                            _2876 = _3172 + _2889;
                            _2877 = _3173 + _2890;
                            _2878 = _3174 + _2891;
                            _2873 = _3169 + _2886;
                            _2874 = _3170 + _2887;
                            _2875 = _3171 + _2888;
                            if (_2893 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2893;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2878;
                        frontier_phi_79_pred_1 = _2877;
                        frontier_phi_79_pred_2 = _2876;
                        frontier_phi_79_pred_3 = _2875;
                        frontier_phi_79_pred_4 = _2874;
                        frontier_phi_79_pred_5 = _2873;
                    }
                    _2515 = frontier_phi_79_pred;
                    _2513 = frontier_phi_79_pred_1;
                    _2511 = frontier_phi_79_pred_2;
                    _2509 = frontier_phi_79_pred_3;
                    _2507 = frontier_phi_79_pred_4;
                    _2505 = frontier_phi_79_pred_5;
                    uint _2671 = _2670 + 1u;
                    if (_2671 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2664 = _2505;
                        _2665 = _2507;
                        _2666 = _2509;
                        _2667 = _2511;
                        _2668 = _2513;
                        _2669 = _2515;
                        _2670 = _2671;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2511;
                frontier_phi_60_61_ladder_1 = _2515;
                frontier_phi_60_61_ladder_2 = _2513;
                frontier_phi_60_61_ladder_3 = _2509;
                frontier_phi_60_61_ladder_4 = _2507;
                frontier_phi_60_61_ladder_5 = _2505;
            }
            else
            {
                frontier_phi_60_61_ladder = _2390;
                frontier_phi_60_61_ladder_1 = _2394;
                frontier_phi_60_61_ladder_2 = _2392;
                frontier_phi_60_61_ladder_3 = _2388;
                frontier_phi_60_61_ladder_4 = _2386;
                frontier_phi_60_61_ladder_5 = _2384;
            }
            _2504 = frontier_phi_60_61_ladder_5;
            _2506 = frontier_phi_60_61_ladder_4;
            _2508 = frontier_phi_60_61_ladder_3;
            _2510 = frontier_phi_60_61_ladder;
            _2512 = frontier_phi_60_61_ladder_2;
            _2514 = frontier_phi_60_61_ladder_1;
        }
        float _2519 = isnan(1.0) ? _500 : (isnan(_500) ? 1.0 : min(_500, 1.0));
        _2296 = (_2519 * _2510) + _1730;
        _2298 = (_2519 * _2512) + _1732;
        _2300 = (_2519 * _2514) + _1734;
        _2302 = ((_2504 * _485) * _2519) + _2078;
        _2304 = ((_2506 * _487) * _2519) + _2080;
        _2306 = ((_2508 * _488) * _2519) + _2082;
    }
    else
    {
        _2296 = _1730;
        _2298 = _1732;
        _2300 = _1734;
        _2302 = _2078;
        _2304 = _2080;
        _2306 = _2082;
    }
    float _4227 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4238 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _4249 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _2323 = ((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2296 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _500))) + ((_2302 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1342)) * cbPerFrame._m0[3u].x);
    float _2324 = ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2298 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _500))) + ((_2304 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1342)) * cbPerFrame._m0[3u].x);
    float _2325 = ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2300 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _500))) + ((_2306 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1342)) * cbPerFrame._m0[3u].x);
    uint _2326 = _459 + 6u;
    float _2334 = _419 / cbSceneParam._m0[86u].x;
    float _2335 = _420 / cbSceneParam._m0[86u].y;
    vec4 _2349 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2334, _2335, (log2((isnan(cbSceneParam._m0[77u].w) ? _340 : (isnan(_340) ? cbSceneParam._m0[77u].w : min(_340, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2351 = _2349.x;
    float _2352 = _2349.y;
    float _2353 = _2349.z;
    float _2354 = _2349.w;
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    if (_340 > cbSceneParam._m0[78u].w)
    {
        float _2409 = isnan(_340) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _340 : min(cbSceneParam._m0[80u].w, _340));
        float _2410 = _2409 / _340;
        float _2421 = _2410 * _391;
        float _2422 = _392 * _2410;
        float _2423 = (-0.0) - _2422;
        float _2424 = _2410 * _393;
        float _2426 = (cbSceneParam._m0[77u].w * _2423) / _2409;
        float _2427 = _2426 + cbSceneParam._m0[79u].w;
        float _2428 = cbSceneParam._m0[79u].w - _2422;
        float _2434 = sqrt(((_2421 * _2421) + (_2422 * _2422)) + (_2424 * _2424));
        float _2437 = (1.0 - (cbSceneParam._m0[77u].w / _2409)) * _2434;
        float _2442 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2444 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2621;
        if (abs((_2423 - _2426) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2621 = ((((_2427 > 0.0) ? exp2(_2442 * _2427) : (2.0 - exp2(_2444 * _2427))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2437;
        }
        else
        {
            float _2565 = 1.0 / cbSceneParam._m0[80u].x;
            float _2566 = isnan(_2428) ? _2427 : (isnan(_2427) ? _2428 : max(_2427, _2428));
            float _2567 = isnan(_2428) ? _2427 : (isnan(_2427) ? _2428 : min(_2427, _2428));
            float _2576 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : min(_2566, 0.0));
            float _2577 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : min(_2567, 0.0));
            _2621 = ((abs(_2434 / _2423) * cbSceneParam._m0[80u].y) * ((((_2576 - _2577) * 2.0) - ((exp2(_2442 * (isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0)))) - exp2(_2442 * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0))))) * _2565)) - ((exp2(_2444 * _2576) - exp2(_2444 * _2577)) * _2565))) + (_2437 * cbSceneParam._m0[80u].z);
        }
        vec4 _2623 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2334, _2335, 1.0), 0.0);
        float _2632 = exp2((_2621 * (-1.44269502162933349609375)) * (1.0 - _2623.w));
        float _2633 = log2(_2632);
        float _2649 = log2(_2354);
        _2446 = (exp2(_2649 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2633 * cbSceneParam._m0[78u].x)) * _2623.x) / cbSceneParam._m0[78u].x)) + _2351;
        _2448 = (exp2(_2649 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2633 * cbSceneParam._m0[78u].y)) * _2623.y) / cbSceneParam._m0[78u].y)) + _2352;
        _2450 = (exp2(_2649 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2633 * cbSceneParam._m0[78u].z)) * _2623.z) / cbSceneParam._m0[78u].z)) + _2353;
        _2452 = _2632 * _2354;
    }
    else
    {
        _2446 = _2351;
        _2448 = _2352;
        _2450 = _2353;
        _2452 = _2354;
    }
    bool _2659;
    vec4 _2462;
    vec4 _2484;
    float _2486;
    float _2490;
    float _2491;
    float _2492;
    float _2493;
    bool _2503;
    for (;;)
    {
        _2462 = cbMatDynParam._m0[0u];
        float _2464 = roundEven(_2462.y);
        bool _2465 = _2464 == 3.0;
        float _2466 = log2(_2452);
        float _2473 = exp2(_2466 * cbSceneParam._m0[78u].x) * _2323;
        float _2474 = exp2(_2466 * cbSceneParam._m0[78u].y) * _2324;
        float _2475 = exp2(_2466 * cbSceneParam._m0[78u].z) * _2325;
        float _2482 = _407 + (-0.5);
        _2484 = cbMtdParam._m0[1u];
        _2486 = _2484.y * _2482;
        float _2489 = (_2464 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2490 = _2489 * (_2465 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2446)));
        _2491 = _2489 * (_2465 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2448)));
        _2492 = _2489 * (_2465 ? _2475 : (_2475 + (cbSceneParam._m0[72u].w * _2450)));
        _2493 = _2482 * 0.999000012874603271484375;
        _2503 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2503)
        {
            if ((cbInstanceData._m0[_459 + 7u].x + _2493) < 0.5)
            {
                _2659 = true;
                break;
            }
        }
        uint _2600 = _461 + uint(_2462.w);
        if ((cbInstanceData._m0[_2600].w < 1.0) && ((cbInstanceData._m0[_2600].w + _2493) < 0.5))
        {
            _2659 = true;
            break;
        }
        if ((_2486 + 1.0) < _2484.x)
        {
            _2659 = true;
            break;
        }
        _2659 = false;
        break;
    }
    float _2864;
    if (_2659)
    {
        discard_state = true;
        _2864 = 0.0;
    }
    else
    {
        _2864 = cbInstanceData._m0[_2326].w;
    }
    SV_Target.x = _2490;
    SV_Target.y = _2491;
    SV_Target.z = _2492;
    SV_Target.w = _2864;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2326].w;
    discard_exit();
}


