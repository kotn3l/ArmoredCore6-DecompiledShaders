#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _840;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    float _228 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _229 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _242 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_228 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_229 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _263 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _228) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _229) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _3176 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0))));
    float _283 = fma(_280, _212, fma(_273, _204 * TANGENT.x, (_190 * _183) * _271));
    float _286 = fma(_280, _213, fma(_273, _204 * TANGENT.y, (_190 * _184) * _271));
    float _289 = fma(_280, _214, fma(_273, _204 * TANGENT.z, (_190 * _185) * _271));
    float _293 = inversesqrt(dot(vec3(_283, _286, _289), vec3(_283, _286, _289)));
    float _294 = _293 * _283;
    float _295 = _293 * _286;
    float _296 = _293 * _289;
    float _3187 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _297 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
    float _3198 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3209 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3220 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3231 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _301 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
    float _317 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _358 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _368 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _358);
    float _369 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _358);
    float _370 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _358);
    float _374 = inversesqrt(dot(vec3(_368, _369, _370), vec3(_368, _369, _370)));
    float _375 = _368 * _374;
    float _376 = _369 * _374;
    float _377 = _370 * _374;
    float _383 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _384 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _405 = fma(_296, cbSceneParam._m0[5u].z, fma(_295, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _294));
    float _408 = fma(_296, cbSceneParam._m0[6u].z, fma(_295, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _294));
    float _411 = fma(_296, cbSceneParam._m0[7u].z, fma(_295, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _294));
    uint _424 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = (_424 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _433 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0)))) * cbInstanceData._m0[_427].x;
    float _434 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0)))) * cbInstanceData._m0[_427].y;
    float _435 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0)))) * cbInstanceData._m0[_427].z;
    float _3242 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
    float _3253 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
    float _3264 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
    float _439 = 1.0 - _301;
    float _440 = _436 * _439;
    float _441 = _437 * _439;
    float _442 = _438 * _439;
    float _447 = (_436 + (-0.039999999105930328369140625)) * _301;
    float _448 = (_437 + (-0.039999999105930328369140625)) * _301;
    float _449 = (_438 + (-0.039999999105930328369140625)) * _301;
    float _450 = _447 + 0.039999999105930328369140625;
    float _452 = _448 + 0.039999999105930328369140625;
    float _453 = _449 + 0.039999999105930328369140625;
    vec4 _462 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _383, cbSceneParam._m0[86u].y * _384));
    float _465 = _462.x * TEXCOORD.z;
    float _466 = dot(vec3(_294, _295, _296), vec3(_375, _376, _377));
    float _469 = _466 * 2.0;
    float _473 = (_469 * _294) - _375;
    float _474 = (_469 * _295) - _376;
    float _475 = (_469 * _296) - _377;
    float _479 = abs(dot(vec3(_375, _376, _377), vec3(_294, _295, _296)));
    float _3275 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _481 = sqrt(_297);
    float _494 = exp2((_481 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_481 * 3.0));
    float _500 = (1.0 - _494) * ((_481 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _501 = _494 * _481;
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _839;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _564 = fma(_537, cbModelParam._m0[26u].z, fma(_533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _529));
        float _568 = fma(_537, cbModelParam._m0[27u].z, fma(_533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _529));
        float _572 = fma(_537, cbModelParam._m0[28u].z, fma(_533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _529));
        float _597 = _529 + _294;
        float _598 = _533 + _295;
        float _599 = _537 + _296;
        float _609 = fma(_599, cbModelParam._m0[26u].z, fma(_598, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _597)) - _564;
        float _610 = fma(_599, cbModelParam._m0[27u].z, fma(_598, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _597)) - _568;
        float _611 = fma(_599, cbModelParam._m0[28u].z, fma(_598, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _597)) - _572;
        float _615 = inversesqrt(dot(vec3(_609, _610, _611), vec3(_609, _610, _611)));
        float _628 = ((_615 * _609) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_564 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _629 = ((_615 * _610) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_568 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _630 = ((_615 * _611) / cbModelParam._m0[34u].z) + ((((((_572 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        float _667 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _668 = _667 * (_633.x + (-0.5));
        float _669 = _667 * (_633.y + (-0.5));
        float _670 = _667 * (_633.z + (-0.5));
        float _677 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_640.x + (-0.5));
        float _679 = _677 * (_640.y + (-0.5));
        float _680 = _677 * (_640.z + (-0.5));
        float _687 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_647.x + (-0.5));
        float _689 = _687 * (_647.y + (-0.5));
        float _690 = _687 * (_647.z + (-0.5));
        float _697 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_654.x + (-0.5));
        float _699 = _697 * (_654.y + (-0.5));
        float _700 = _697 * (_654.z + (-0.5));
        float _701 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _702 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _703 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _704 = _668 * 0.5;
        float _705 = _678 * 0.5;
        float _706 = _688 * 0.5;
        float _707 = dot(vec3(_704, _705, _706), vec3(_704, _705, _706));
        float _712 = (_707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_707);
        float _721 = (dot(vec3(_294, _295, _296), vec3(_712 * _704, _712 * _705, _712 * _706)) + 1.0) * 0.5;
        float _3301 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _731 = sqrt(((_705 * _705) + (_704 * _704)) + (_706 * _706)) / (_701 + 9.9999997473787516355514526367188e-06);
        float _3312 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _733 = _732 * 2.0;
        float _737 = (1.0 - _732) / (_732 + 1.0);
        float _3323 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _747 = ((((1.0 - _738) * (_733 + 2.0)) * exp2(log2(isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * (_733 + 1.0))) + _738) * _701;
        float _748 = _669 * 0.5;
        float _749 = _679 * 0.5;
        float _750 = _689 * 0.5;
        float _751 = dot(vec3(_748, _749, _750), vec3(_748, _749, _750));
        float _756 = (_751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_751);
        float _764 = (dot(vec3(_294, _295, _296), vec3(_756 * _748, _756 * _749, _756 * _750)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _773 = sqrt(((_749 * _749) + (_748 * _748)) + (_750 * _750)) / (_702 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _775 = _774 * 2.0;
        float _779 = (1.0 - _774) / (_774 + 1.0);
        float _3356 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _789 = ((((1.0 - _780) * (_775 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_775 + 1.0))) + _780) * _702;
        float _790 = _670 * 0.5;
        float _791 = _680 * 0.5;
        float _792 = _690 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _806 = (dot(vec3(_294, _295, _296), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _815 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_703 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3389 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_817 + 1.0))) + _822) * _703;
        _839 = _670;
        _841 = _669;
        _842 = _668;
        _843 = _680;
        _844 = _679;
        _845 = _678;
        _846 = _690;
        _847 = _689;
        _848 = _688;
        _849 = _703;
        _850 = _702;
        _851 = _701;
        _852 = cbModelParam._m0[36u].z * (isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0)));
        _853 = cbModelParam._m0[36u].z * (isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0)));
        _854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
    }
    else
    {
        _839 = _840;
        _841 = _840;
        _842 = _840;
        _843 = _840;
        _844 = _840;
        _845 = _840;
        _846 = _840;
        _847 = _840;
        _848 = _840;
        _849 = _840;
        _850 = _840;
        _851 = _840;
        _852 = 0.0;
        _853 = 0.0;
        _854 = 0.0;
    }
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _880 = fma(_537, cbModelParam._m0[30u].z, fma(_533, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _529));
        float _884 = fma(_537, cbModelParam._m0[31u].z, fma(_533, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _529));
        float _888 = fma(_537, cbModelParam._m0[32u].z, fma(_533, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _529));
        float _911 = _529 + _294;
        float _912 = _533 + _295;
        float _913 = _537 + _296;
        float _923 = fma(_913, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _911)) - _880;
        float _924 = fma(_913, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _911)) - _884;
        float _925 = fma(_913, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _911)) - _888;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_880 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_884 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[35u].z) + ((((((_888 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _979 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_946.x + (-0.5));
        float _981 = _979 * (_946.y + (-0.5));
        float _982 = _979 * (_946.z + (-0.5));
        float _989 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_953.x + (-0.5));
        float _991 = _989 * (_953.y + (-0.5));
        float _992 = _989 * (_953.z + (-0.5));
        float _999 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_960.x + (-0.5));
        float _1001 = _999 * (_960.y + (-0.5));
        float _1002 = _999 * (_960.z + (-0.5));
        float _1009 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_967.x + (-0.5));
        float _1011 = _1009 * (_967.y + (-0.5));
        float _1012 = _1009 * (_967.z + (-0.5));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = _980 * 0.5;
        float _1017 = _990 * 0.5;
        float _1018 = _1000 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_294, _295, _296), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3452 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_1043 + 1.0))) + _1048) * _1013;
        float _1058 = _981 * 0.5;
        float _1059 = _991 * 0.5;
        float _1060 = _1001 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_294, _295, _296), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3485 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_1085 + 1.0))) + _1090) * _1014;
        float _1100 = _982 * 0.5;
        float _1101 = _992 * 0.5;
        float _1102 = _1002 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_294, _295, _296), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3518 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_1127 + 1.0))) + _1132) * _1015;
        _1149 = _982;
        _1150 = _981;
        _1151 = _980;
        _1152 = _992;
        _1153 = _991;
        _1154 = _990;
        _1155 = _1002;
        _1156 = _1001;
        _1157 = _1000;
        _1158 = _1015;
        _1159 = _1014;
        _1160 = _1013;
        _1161 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1162 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1163 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
    }
    else
    {
        _1149 = _840;
        _1150 = _840;
        _1151 = _840;
        _1152 = _840;
        _1153 = _840;
        _1154 = _840;
        _1155 = _840;
        _1156 = _840;
        _1157 = _840;
        _1158 = _840;
        _1159 = _840;
        _1160 = _840;
        _1161 = 0.0;
        _1162 = 0.0;
        _1163 = 0.0;
    }
    float _1173 = (cbModelParam._m0[1u].x * (_1161 - _852)) + _852;
    float _1174 = (cbModelParam._m0[1u].x * (_1162 - _853)) + _853;
    float _1175 = (cbModelParam._m0[1u].x * (_1163 - _854)) + _854;
    float _1196 = fma(_1175, cbSceneParam._m0[89u].z, fma(_1174, cbSceneParam._m0[89u].y, _1173 * cbSceneParam._m0[89u].x));
    float _1199 = fma(_1175, cbSceneParam._m0[90u].z, fma(_1174, cbSceneParam._m0[90u].y, _1173 * cbSceneParam._m0[90u].x));
    float _1202 = fma(_1175, cbSceneParam._m0[91u].z, fma(_1174, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1173));
    float _1217 = _473 * 0.5;
    float _1218 = _474 * 0.5;
    float _1219 = _475 * 0.5;
    float _1220 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1151, _1154, _1157, _1160));
    float _1223 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1150, _1153, _1156, _1159));
    float _1226 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1149, _1152, _1155, _1158));
    float _1260;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1233 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_839, _843, _846, _849));
        float _1237 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_841, _844, _847, _850));
        float _1241 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_842, _845, _848, _851));
        float _1248 = dot(vec4(cbModelParam._m0[39u]), vec4(_1217, _1218, _1219, 1.0));
        _1260 = dot(vec3(isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1248) ? 0.0 : (isnan(0.0) ? _1248 : max(0.0, _1248))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1260 = 1.0;
    }
    float _1271;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1262 = dot(vec4(cbModelParam._m0[40u]), vec4(_1217, _1218, _1219, 1.0));
        _1271 = dot(vec3(isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)), isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)), isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1262) ? 0.0 : (isnan(0.0) ? _1262 : max(0.0, _1262))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1271 = 1.0;
    }
    float _1275 = (_1271 * cbModelParam._m0[1u].x) + (_1260 * (1.0 - cbModelParam._m0[1u].x));
    float _1285 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _297);
    float _1286 = isnan(_1285) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1285 : min(cbModelParam._m0[25u].z, _1285));
    float _1368;
    float _1370;
    float _1372;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1335 = fma(_537, cbModelParam._m0[13u].z, fma(_533, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _529)) + cbModelParam._m0[13u].w;
        float _1339 = fma(_537, cbModelParam._m0[14u].z, fma(_533, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _529)) + cbModelParam._m0[14u].w;
        float _1343 = fma(_537, cbModelParam._m0[15u].z, fma(_533, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _529)) + cbModelParam._m0[15u].w;
        float _1346 = fma(_475, cbModelParam._m0[13u].z, fma(_474, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _473));
        float _1349 = fma(_475, cbModelParam._m0[14u].z, fma(_474, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _473));
        float _1352 = fma(_475, cbModelParam._m0[15u].z, fma(_474, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _473));
        float _1380;
        if (_1346 > 0.0)
        {
            _1380 = abs((1.0 - _1335) / _1346);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1335 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1380 = frontier_phi_16_14_ladder;
        }
        float _1587;
        if (_1349 > 0.0)
        {
            _1587 = abs((1.0 - _1339) / _1349);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1339 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1587 = frontier_phi_25_21_ladder;
        }
        float _1841;
        if (_1352 > 0.0)
        {
            _1841 = abs((1.0 - _1343) / _1352);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1343 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1841 = frontier_phi_37_32_ladder;
        }
        float _1843 = isnan(_1587) ? _1380 : (isnan(_1380) ? _1587 : min(_1380, _1587));
        float _1844 = isnan(_1841) ? _1843 : (isnan(_1843) ? _1841 : min(_1843, _1841));
        float _1848 = (_1844 * _1346) + _1335;
        float _1849 = (_1844 * _1349) + _1339;
        float _1850 = (_1844 * _1352) + _1343;
        float _1851 = _1844 * 9.9999997473787516355514526367188e-05;
        float _1853 = (-1.0) - _1851;
        float _1855 = _1851 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1850 > _1855) || ((_1850 < _1853) || ((_1849 > _1855) || ((_1849 < _1853) || ((_1848 < _1853) || (_1848 > _1855))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1978 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1850, cbModelParam._m0[9u].z, fma(_1849, cbModelParam._m0[9u].y, _1848 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1850, cbModelParam._m0[10u].z, fma(_1849, cbModelParam._m0[10u].y, _1848 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1850, cbModelParam._m0[11u].z, fma(_1849, cbModelParam._m0[11u].y, _1848 * cbModelParam._m0[11u].x))), _1286);
            frontier_phi_15_37_ladder = _1978.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1978.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1978.x * cbModelParam._m0[1u].y;
        }
        _1368 = frontier_phi_15_37_ladder_2;
        _1370 = frontier_phi_15_37_ladder_1;
        _1372 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1356 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_473, _474, _475), _1286);
        _1368 = _1356.x * cbModelParam._m0[1u].y;
        _1370 = _1356.y * cbModelParam._m0[1u].y;
        _1372 = _1356.z * cbModelParam._m0[1u].y;
    }
    float _1376 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _297);
    float _1377 = isnan(_1376) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1376 : min(cbModelParam._m0[25u].w, _1376));
    float _1469;
    float _1471;
    float _1473;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1433 = fma(_537, cbModelParam._m0[21u].z, fma(_533, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _529)) + cbModelParam._m0[21u].w;
        float _1437 = fma(_537, cbModelParam._m0[22u].z, fma(_533, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _529)) + cbModelParam._m0[22u].w;
        float _1441 = fma(_537, cbModelParam._m0[23u].z, fma(_533, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _529)) + cbModelParam._m0[23u].w;
        float _1444 = fma(_475, cbModelParam._m0[21u].z, fma(_474, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _473));
        float _1447 = fma(_475, cbModelParam._m0[22u].z, fma(_474, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _473));
        float _1450 = fma(_475, cbModelParam._m0[23u].z, fma(_474, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _473));
        float _1592;
        if (_1444 > 0.0)
        {
            _1592 = abs((1.0 - _1433) / _1444);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1433 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1592 = frontier_phi_27_23_ladder;
        }
        float _1868;
        if (_1447 > 0.0)
        {
            _1868 = abs((1.0 - _1437) / _1447);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1437 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1868 = frontier_phi_39_34_ladder;
        }
        float _2081;
        if (_1450 > 0.0)
        {
            _2081 = abs((1.0 - _1441) / _1450);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1441 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2081 = frontier_phi_48_45_ladder;
        }
        float _2083 = isnan(_1868) ? _1592 : (isnan(_1592) ? _1868 : min(_1592, _1868));
        float _2084 = isnan(_2081) ? _2083 : (isnan(_2083) ? _2081 : min(_2083, _2081));
        float _2088 = (_2084 * _1444) + _1433;
        float _2089 = (_2084 * _1447) + _1437;
        float _2090 = (_2084 * _1450) + _1441;
        float _2091 = _2084 * 9.9999997473787516355514526367188e-05;
        float _2092 = (-1.0) - _2091;
        float _2094 = _2091 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2090 > _2094) || ((_2090 < _2092) || ((_2089 > _2094) || ((_2089 < _2092) || ((_2088 < _2092) || (_2088 > _2094))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2288 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2090, cbModelParam._m0[17u].z, fma(_2089, cbModelParam._m0[17u].y, _2088 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2090, cbModelParam._m0[18u].z, fma(_2089, cbModelParam._m0[18u].y, _2088 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2090, cbModelParam._m0[19u].z, fma(_2089, cbModelParam._m0[19u].y, _2088 * cbModelParam._m0[19u].x))), _1377);
            frontier_phi_24_48_ladder = _2288.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2288.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2288.x * cbModelParam._m0[1u].z;
        }
        _1469 = frontier_phi_24_48_ladder_2;
        _1471 = frontier_phi_24_48_ladder_1;
        _1473 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1453 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_473, _474, _475), _1377);
        _1469 = _1453.x * cbModelParam._m0[1u].z;
        _1471 = _1453.y * cbModelParam._m0[1u].z;
        _1473 = _1453.z * cbModelParam._m0[1u].z;
    }
    float _1486 = (((_500 * _450) + _501) * _465) * ((cbModelParam._m0[1u].w * (_1469 - _1368)) + _1368);
    float _1488 = (((_500 * _452) + _501) * _465) * ((cbModelParam._m0[1u].w * (_1471 - _1370)) + _1370);
    float _1490 = (((_500 * _453) + _501) * _465) * ((cbModelParam._m0[1u].w * (_1473 - _1372)) + _1372);
    float _1493 = fma(_1490, cbSceneParam._m0[89u].z, fma(_1488, cbSceneParam._m0[89u].y, _1486 * cbSceneParam._m0[89u].x));
    float _1496 = fma(_1490, cbSceneParam._m0[90u].z, fma(_1488, cbSceneParam._m0[90u].y, _1486 * cbSceneParam._m0[90u].x));
    float _1499 = fma(_1490, cbSceneParam._m0[91u].z, fma(_1488, cbSceneParam._m0[91u].y, _1486 * cbSceneParam._m0[91u].x));
    uvec4 _1509 = floatBitsToUint(cbInstanceData._m0[_424 + 5u]);
    uint _1511 = _1509.x * 14u;
    uint _1512 = _1511 + 13u;
    float _1519 = _465 + (-1.0);
    float _1524 = (cbLight._m0[_1512].x * _1519) + 1.0;
    float _1525 = (cbLight._m0[_1512].y * _1519) + 1.0;
    float _1526 = (cbLight._m0[_1512].z * _1519) + 1.0;
    float _1527 = (cbLight._m0[_1512].w * _1519) + 1.0;
    uint _1528 = _1511 + 5u;
    float _1534 = isnan(1.0) ? _1525 : (isnan(_1525) ? 1.0 : min(_1525, 1.0));
    uint _1538 = _1511 + 4u;
    float _1545 = isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0));
    uint _1549 = _1511 | 1u;
    float _1560 = dot(vec3(cbLight._m0[_1511].xyz), vec3(_294, _295, _296));
    float _1563 = dot(vec3(cbLight._m0[_1549].xyz), vec3(_294, _295, _296));
    float _3654 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _3665 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
    float _1568 = (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.3183098733425140380859375;
    float _1570 = (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 0.3183098733425140380859375;
    float _1577 = ((cbLight._m0[_1528].x * _1534) * _1570) + ((cbLight._m0[_1538].x * _1545) * _1568);
    float _1578 = ((_1534 * cbLight._m0[_1528].y) * _1570) + ((_1545 * cbLight._m0[_1538].y) * _1568);
    float _1579 = ((_1534 * cbLight._m0[_1528].z) * _1570) + ((_1545 * cbLight._m0[_1538].z) * _1568);
    uvec4 _1584 = floatBitsToUint(cbLight._m0[_1511 + 12u]);
    bool _1586 = _1584.x == 0u;
    float _1597;
    float _1599;
    float _1601;
    if (_1586)
    {
        _1597 = _1577;
        _1599 = _1578;
        _1601 = _1579;
    }
    else
    {
        uint _1605 = _1511 + 6u;
        float _1621 = (dot(vec3(cbLight._m0[_1511 + 2u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _1622 = _1621 * _1621;
        float _3676 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1624 = isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0));
        _1597 = (((cbLight._m0[_1605].x * 0.3183098733425140380859375) * _1623) * _1624) + _1577;
        _1599 = (((cbLight._m0[_1605].y * 0.3183098733425140380859375) * _1623) * _1624) + _1578;
        _1601 = (((cbLight._m0[_1605].z * 0.3183098733425140380859375) * _1623) * _1624) + _1579;
    }
    bool _1604 = _1584.y == 0u;
    float _1642;
    float _1644;
    float _1646;
    if (_1604)
    {
        _1642 = _1597;
        _1644 = _1599;
        _1646 = _1601;
    }
    else
    {
        uint _1812 = _1511 + 7u;
        float _1828 = (dot(vec3(cbLight._m0[_1511 + 3u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _1829 = _1828 * _1828;
        float _3692 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1831 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
        _1642 = (((cbLight._m0[_1812].x * 0.3183098733425140380859375) * _1830) * _1831) + _1597;
        _1644 = (((cbLight._m0[_1812].y * 0.3183098733425140380859375) * _1830) * _1831) + _1599;
        _1646 = (((cbLight._m0[_1812].z * 0.3183098733425140380859375) * _1830) * _1831) + _1601;
    }
    uint _1649 = _1511 + 8u;
    float _1662 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1511].w)) * _297) * 0.949999988079071044921875);
    float _1663 = _1662 * _1662;
    float _1664 = cbLight._m0[_1511].x + _375;
    float _1665 = cbLight._m0[_1511].y + _376;
    float _1666 = cbLight._m0[_1511].z + _377;
    float _1670 = inversesqrt(dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666)));
    float _1671 = _1670 * _1664;
    float _1672 = _1670 * _1665;
    float _1673 = _1670 * _1666;
    float _1674 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1511].xyz));
    float _3708 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1677 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _1678 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _1679 = dot(vec3(_294, _295, _296), vec3(_1671, _1672, _1673));
    float _3730 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1682 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _1683 = dot(vec3(cbLight._m0[_1511].xyz), vec3(_1671, _1672, _1673));
    float _3741 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1687 = _1663 * _1663;
    float _1691 = ((_1682 * _1682) * (_1687 + (-1.0))) + 1.0;
    float _1699 = exp2(log2(1.0 - (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * 5.0);
    float _1700 = 0.959999978542327880859375 - _447;
    float _1702 = 0.959999978542327880859375 - _448;
    float _1703 = 0.959999978542327880859375 - _449;
    float _1710 = 1.0 - _1663;
    float _1721 = (0.5 / (((_1678 * ((_1677 * _1710) + _1663)) + 9.9999999392252902907785028219223e-09) + (((_1678 * _1710) + _1663) * _1677))) * _1677;
    float _3752 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1723 = (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1687 / ((_1691 * _1691) * 3.141590118408203125));
    uint _1734 = _1511 + 9u;
    float _1745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1549].w)) * _297) * 0.949999988079071044921875);
    float _1746 = _1745 * _1745;
    float _1747 = cbLight._m0[_1549].x + _375;
    float _1748 = cbLight._m0[_1549].y + _376;
    float _1749 = cbLight._m0[_1549].z + _377;
    float _1753 = inversesqrt(dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749)));
    float _1754 = _1753 * _1747;
    float _1755 = _1753 * _1748;
    float _1756 = _1753 * _1749;
    float _1757 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1549].xyz));
    float _3763 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _1761 = dot(vec3(_294, _295, _296), vec3(_1754, _1755, _1756));
    float _3774 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _1765 = dot(vec3(cbLight._m0[_1549].xyz), vec3(_1754, _1755, _1756));
    float _3785 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1769 = _1746 * _1746;
    float _1773 = ((_1764 * _1764) * (_1769 + (-1.0))) + 1.0;
    float _1780 = exp2(log2(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * 5.0);
    float _1787 = 1.0 - _1746;
    float _1797 = (0.5 / (((_1678 * ((_1760 * _1787) + _1746)) + 9.9999999392252902907785028219223e-09) + (((_1678 * _1787) + _1746) * _1760))) * _1760;
    float _3796 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1799 = (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1769 / ((_1773 * _1773) * 3.141590118408203125));
    float _1809 = (((((_1780 * _1700) + _450) * cbLight._m0[_1734].x) * _1799) * _1534) + (((((_1699 * _1700) + _450) * cbLight._m0[_1649].x) * _1723) * _1545);
    float _1810 = (((((_1780 * _1702) + _452) * cbLight._m0[_1734].y) * _1799) * _1534) + (((((_1699 * _1702) + _452) * cbLight._m0[_1649].y) * _1723) * _1545);
    float _1811 = (((((_1780 * _1703) + _453) * cbLight._m0[_1734].z) * _1799) * _1534) + (((((_1699 * _1703) + _453) * cbLight._m0[_1649].z) * _1723) * _1545);
    float _1873;
    float _1875;
    float _1877;
    if (_1586)
    {
        _1873 = _1809;
        _1875 = _1810;
        _1877 = _1811;
    }
    else
    {
        uint _1879 = _1511 + 2u;
        uint _1883 = _1511 + 10u;
        float _1897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _297) * 0.949999988079071044921875);
        float _1898 = _1897 * _1897;
        float _1899 = cbLight._m0[_1879].x + _375;
        float _1900 = cbLight._m0[_1879].y + _376;
        float _1901 = cbLight._m0[_1879].z + _377;
        float _1905 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
        float _1906 = _1905 * _1899;
        float _1907 = _1905 * _1900;
        float _1908 = _1905 * _1901;
        float _1909 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1879].xyz));
        float _3807 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1912 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1913 = dot(vec3(_294, _295, _296), vec3(_1906, _1907, _1908));
        float _3818 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1916 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1917 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_1906, _1907, _1908));
        float _3829 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1921 = _1898 * _1898;
        float _1925 = ((_1916 * _1916) * (_1921 + (-1.0))) + 1.0;
        float _1932 = exp2(log2(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * 5.0);
        float _1939 = 1.0 - _1898;
        float _1949 = (0.5 / (((_1678 * ((_1912 * _1939) + _1898)) + 9.9999999392252902907785028219223e-09) + (((_1678 * _1939) + _1898) * _1912))) * _1912;
        float _3840 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1951 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1921 / ((_1925 * _1925) * 3.141590118408203125));
        float _1952 = isnan(1.0) ? _1526 : (isnan(_1526) ? 1.0 : min(_1526, 1.0));
        _1873 = (((((_1932 * _1700) + _450) * cbLight._m0[_1883].x) * _1951) * _1952) + _1809;
        _1875 = (((((_1932 * _1702) + _452) * cbLight._m0[_1883].y) * _1951) * _1952) + _1810;
        _1877 = (((((_1932 * _1703) + _453) * cbLight._m0[_1883].z) * _1951) * _1952) + _1811;
    }
    float _1987;
    float _1989;
    float _1991;
    if (_1604)
    {
        _1987 = _1873;
        _1989 = _1875;
        _1991 = _1877;
    }
    else
    {
        uint _1998 = _1511 + 3u;
        uint _2002 = _1511 + 11u;
        float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _297) * 0.949999988079071044921875);
        float _2017 = _2016 * _2016;
        float _2018 = cbLight._m0[_1998].x + _375;
        float _2019 = cbLight._m0[_1998].y + _376;
        float _2020 = cbLight._m0[_1998].z + _377;
        float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
        float _2025 = _2024 * _2018;
        float _2026 = _2024 * _2019;
        float _2027 = _2024 * _2020;
        float _2028 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1998].xyz));
        float _3856 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2031 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _2032 = dot(vec3(_294, _295, _296), vec3(_2025, _2026, _2027));
        float _3867 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2035 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _2036 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2025, _2026, _2027));
        float _3878 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2040 = _2017 * _2017;
        float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
        float _2051 = exp2(log2(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * 5.0);
        float _2058 = 1.0 - _2017;
        float _2068 = (0.5 / (((_1678 * ((_2031 * _2058) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_1678 * _2058) + _2017) * _2031))) * _2031;
        float _3889 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2070 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
        float _2071 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
        _1987 = (((((_2051 * _1700) + _450) * cbLight._m0[_2002].x) * _2070) * _2071) + _1873;
        _1989 = (((((_2051 * _1702) + _452) * cbLight._m0[_2002].y) * _2070) * _2071) + _1875;
        _1991 = (((((_2051 * _1703) + _453) * cbLight._m0[_2002].z) * _2070) * _2071) + _1877;
    }
    float _2205;
    float _2207;
    float _2209;
    float _2211;
    float _2213;
    float _2215;
    if (_1509.y == 0u)
    {
        float _2146 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2147 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2146;
        float _2148 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2146;
        float _2149 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2146;
        uvec4 _2161 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2162 = _2161.x;
        uint _2173 = uint((float(_2161.y) * floor(float(uint(cbSceneParam._m0[85u].y * _384) / _2162))) + floor(float(uint(cbSceneParam._m0[85u].x * _383) / _2162)));
        float _2183 = (log2(_2149 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2184 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        uint _2187 = uint(isnan(14.0) ? _2184 : (isnan(_2184) ? 14.0 : min(_2184, 14.0)));
        uvec4 _2192 = texelFetch(g_lightClusterGridBuffer, int(((_2187 << 2u) + (_2173 << 6u)) >> 2u));
        uint _2193 = _2192.x;
        uint _2194 = _2161.z;
        float _2293;
        float _2295;
        float _2297;
        float _2299;
        float _2301;
        float _2303;
        if (((((1u << ((_2194 >> 4u) & 15u)) + 4294967295u) & _2193) == 0u) || ((_2194 & 240u) == 0u))
        {
            _2293 = 0.0;
            _2295 = 0.0;
            _2297 = 0.0;
            _2299 = 0.0;
            _2301 = 0.0;
            _2303 = 0.0;
        }
        else
        {
            float _2294;
            float _2296;
            float _2298;
            float _2300;
            float _2302;
            float _2304;
            float _2437 = 0.0;
            float _2438 = 0.0;
            float _2439 = 0.0;
            float _2440 = 0.0;
            float _2441 = 0.0;
            float _2442 = 0.0;
            uint _2443 = 0u;
            uint _2452;
            bool _2453;
            for (;;)
            {
                _2452 = texelFetch(g_lightClassification, int((((_2187 << 5u) + (_2173 << 9u)) + (_2443 << 2u)) >> 2u)).x;
                _2453 = _2452 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2453)
                {
                    frontier_phi_63_pred = _2442;
                    frontier_phi_63_pred_1 = _2441;
                    frontier_phi_63_pred_2 = _2440;
                    frontier_phi_63_pred_3 = _2439;
                    frontier_phi_63_pred_4 = _2438;
                    frontier_phi_63_pred_5 = _2437;
                }
                else
                {
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    uint _2567;
                    _2561 = _2437;
                    _2562 = _2438;
                    _2563 = _2439;
                    _2564 = _2440;
                    _2565 = _2441;
                    _2566 = _2442;
                    _2567 = _2452;
                    float _2493;
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    float _2498;
                    for (;;)
                    {
                        uint _2571 = uint(findLSB(_2567)) + (_2443 << 5u);
                        uint _2568 = (_2567 + 4294967295u) & _2567;
                        uint _2573 = _2571 * 48u;
                        vec4 _2587 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2573)).x, texelFetch(g_PointLightRenderingBuffer, int(_2573 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2573 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2573 + 3u)).x));
                        uint _2593 = (_2571 * 48u) + 4u;
                        vec4 _2606 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2593)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 3u)).x));
                        uint _2612 = (_2571 * 48u) + 8u;
                        vec3 _2623 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2612)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 2u)).x));
                        float _2627 = _2587.x - _2147;
                        float _2628 = _2587.y - _2148;
                        float _2629 = _2587.z - _2149;
                        float _2630 = dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629));
                        float _2633 = inversesqrt(_2630);
                        float _2634 = _2633 * _2627;
                        float _2635 = _2633 * _2628;
                        float _2636 = _2633 * _2629;
                        float _2637 = dot(vec3(_405, _408, _411), vec3(_2634, _2635, _2636));
                        float _2642 = 1.0 - (_2630 * _2587.w);
                        float _3915 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
                        float _2643 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
                        float _2644 = sqrt(_2630) * _2606.w;
                        float _2647 = 1.39999997615814208984375 / (_2644 + 1.39999997615814208984375);
                        float _2648 = _2647 * _2647;
                        float _2651 = ((1.0 - _2648) * _2637) + _2648;
                        float _2654 = _2644 * _2644;
                        float _2658 = ((isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0))) * _2643) / ((_2654 * 0.699999988079071044921875) + 1.0);
                        float _2662 = (-0.0) - _2147;
                        float _2663 = (-0.0) - _2148;
                        float _2664 = (-0.0) - _2149;
                        float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
                        float _2669 = _2668 * _2662;
                        float _2670 = _2668 * _2663;
                        float _2671 = _2668 * _2664;
                        float _2679 = exp2(log2(1.0 / ((_2654 * 3.5) + 5.0)) * 0.25);
                        float _2680 = 1.0 - _481;
                        float _2687 = sqrt(1.0 - ((1.0 - (_2680 * _2680)) * (1.0 - (_2679 * _2679))));
                        float _2688 = _2687 * _2687;
                        float _2689 = _2688 * _2688;
                        float _2690 = _2669 + _2634;
                        float _2691 = _2670 + _2635;
                        float _2692 = _2671 + _2636;
                        float _2696 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
                        float _2700 = dot(vec3(_405, _408, _411), vec3(_2669, _2670, _2671));
                        float _3931 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2703 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
                        float _2704 = dot(vec3(_405, _408, _411), vec3(_2696 * _2690, _2696 * _2691, _2696 * _2692));
                        float _3942 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
                        float _2707 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
                        float _2711 = ((_2707 * _2707) * (_2689 + (-1.0))) + 1.0;
                        float _2712 = _2647 * _2688;
                        float _2713 = _2712 * _2712;
                        float _2716 = ((1.0 - _2713) * _2637) + _2713;
                        float _3953 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                        float _2717 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                        float _2718 = 1.0 - _2688;
                        float _2728 = (0.5 / (((_2717 * ((_2703 * _2718) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2717 * _2718) + _2688) * _2703))) * _2717;
                        float _3964 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2739 = (((_2689 * 3.1415927410125732421875) * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) / ((_2711 * _2711) * ((_2654 * 2.1991131305694580078125) + 3.141590118408203125))) * _2643;
                        _2496 = (_2658 * _2606.x) + _2564;
                        _2497 = (_2658 * _2606.y) + _2565;
                        _2498 = (_2658 * _2606.z) + _2566;
                        _2493 = (_2739 * _2623.x) + _2561;
                        _2494 = (_2739 * _2623.y) + _2562;
                        _2495 = (_2739 * _2623.z) + _2563;
                        if (_2568 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2561 = _2493;
                            _2562 = _2494;
                            _2563 = _2495;
                            _2564 = _2496;
                            _2565 = _2497;
                            _2566 = _2498;
                            _2567 = _2568;
                        }
                    }
                    frontier_phi_63_pred = _2498;
                    frontier_phi_63_pred_1 = _2497;
                    frontier_phi_63_pred_2 = _2496;
                    frontier_phi_63_pred_3 = _2495;
                    frontier_phi_63_pred_4 = _2494;
                    frontier_phi_63_pred_5 = _2493;
                }
                _2304 = frontier_phi_63_pred;
                _2302 = frontier_phi_63_pred_1;
                _2300 = frontier_phi_63_pred_2;
                _2298 = frontier_phi_63_pred_3;
                _2296 = frontier_phi_63_pred_4;
                _2294 = frontier_phi_63_pred_5;
                uint _2444 = _2443 + 1u;
                if (_2444 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2437 = _2294;
                    _2438 = _2296;
                    _2439 = _2298;
                    _2440 = _2300;
                    _2441 = _2302;
                    _2442 = _2304;
                    _2443 = _2444;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2293 = _2294;
            _2295 = _2296;
            _2297 = _2298;
            _2299 = _2300;
            _2301 = _2302;
            _2303 = _2304;
        }
        uvec4 _2307 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2308 = _2307.z;
        uint _2310 = (_2308 >> 8u) & 15u;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        if (((4294967295u << _2310) & _2193) == 0u)
        {
            _2405 = _2293;
            _2407 = _2295;
            _2409 = _2297;
            _2411 = _2299;
            _2413 = _2301;
            _2415 = _2303;
        }
        else
        {
            float _2430 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
            float _2431 = _2430 * _2147;
            float _2432 = _2430 * _2148;
            float _2433 = _2430 * _2149;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2310 < ((_2308 >> 12u) & 15u))
            {
                float _2406;
                float _2408;
                float _2410;
                float _2412;
                float _2414;
                float _2416;
                float _2544 = _2293;
                float _2545 = _2295;
                float _2546 = _2297;
                float _2547 = _2299;
                float _2548 = _2301;
                float _2549 = _2303;
                uint _2550 = _2310;
                uint _2559;
                bool _2560;
                for (;;)
                {
                    _2559 = texelFetch(g_lightClassification, int((((_2187 << 5u) + (_2173 << 9u)) + (_2550 << 2u)) >> 2u)).x;
                    _2560 = _2559 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2560)
                    {
                        frontier_phi_69_pred = _2549;
                        frontier_phi_69_pred_1 = _2548;
                        frontier_phi_69_pred_2 = _2547;
                        frontier_phi_69_pred_3 = _2546;
                        frontier_phi_69_pred_4 = _2545;
                        frontier_phi_69_pred_5 = _2544;
                    }
                    else
                    {
                        float _2744;
                        float _2745;
                        float _2746;
                        float _2747;
                        float _2748;
                        float _2749;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _2757 = _2544;
                        float _2758 = _2545;
                        float _2759 = _2546;
                        float _2760 = _2547;
                        float _2761 = _2548;
                        float _2762 = _2549;
                        uint _2763 = _2559;
                        uint _2764;
                        vec4 _2789;
                        float _2790;
                        vec4 _2805;
                        vec3 _2817;
                        vec4 _2833;
                        vec4 _2849;
                        float _2896;
                        bool _2897;
                        for (;;)
                        {
                            uint _2774 = ((_2550 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2763));
                            _2764 = (_2763 + 4294967295u) & _2763;
                            uint _2776 = _2774 * 40u;
                            _2789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 3u)).x));
                            _2790 = _2789.w;
                            uint _2792 = (_2774 * 40u) + 4u;
                            _2805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 3u)).x));
                            uint _2807 = (_2774 * 40u) + 8u;
                            _2817 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x));
                            uint _2820 = (_2774 * 40u) + 16u;
                            _2833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 3u)).x));
                            uint _2836 = (_2774 * 40u) + 20u;
                            _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            uint _2852 = (_2774 * 40u) + 24u;
                            vec4 _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            uint _2871 = (_2774 * 40u) + 28u;
                            vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            _2896 = fma(_2149, _2884.z, fma(_2148, _2884.y, _2884.x * _2147)) + _2884.w;
                            _2897 = !((fma(_2149, _2865.z, fma(_2148, _2865.y, _2865.x * _2147)) + _2865.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2897)
                            {
                                float _2924 = _2789.x - _2147;
                                float _2925 = _2789.y - _2148;
                                float _2926 = _2789.z - _2149;
                                float _2927 = dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926));
                                float _2930 = inversesqrt(_2927);
                                float _2931 = _2930 * _2924;
                                float _2932 = _2930 * _2925;
                                float _2933 = _2930 * _2926;
                                float _2937 = 1.0 - (_2927 / (_2790 * _2790));
                                float _3975 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                                float _2938 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                                float _2942 = sqrt(_2927) * _2805.w;
                                float _2944 = 1.39999997615814208984375 / (_2942 + 1.39999997615814208984375);
                                float _2945 = _2944 * _2944;
                                float _2948 = ((1.0 - _2945) * dot(vec3(_2931, _2932, _2933), vec3(_405, _408, _411))) + _2945;
                                float _2951 = _2942 * _2942;
                                float _2955 = (fma(_2149, _2833.z, fma(_2148, _2833.y, _2833.x * _2147)) + _2833.w) / _2896;
                                float _2956 = (fma(_2149, _2849.z, fma(_2148, _2849.y, _2849.x * _2147)) + _2849.w) / _2896;
                                float _2960 = 1.0 - dot(vec2(_2955, _2956), vec2(_2955, _2956));
                                float _3991 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2961 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                                float _2962 = _2961 * (((isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))) * _2938) / ((_2951 * 0.699999988079071044921875) + 1.0));
                                float _2974 = exp2(log2(1.0 / ((_2951 * 3.5) + 5.0)) * 0.25);
                                float _2975 = 1.0 - _481;
                                float _2982 = sqrt(1.0 - ((1.0 - (_2975 * _2975)) * (1.0 - (_2974 * _2974))));
                                float _2983 = _2982 * _2982;
                                float _2984 = _2983 * _2983;
                                float _2985 = _2931 - _2431;
                                float _2986 = _2932 - _2432;
                                float _2987 = _2933 - _2433;
                                float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                                float _2995 = dot(vec3(_405, _408, _411), vec3((-0.0) - _2431, (-0.0) - _2432, (-0.0) - _2433));
                                float _4002 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2998 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                                float _2999 = dot(vec3(_405, _408, _411), vec3(_2991 * _2985, _2991 * _2986, _2991 * _2987));
                                float _4013 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                                float _3002 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                                float _3006 = ((_3002 * _3002) * (_2984 + (-1.0))) + 1.0;
                                float _3007 = _2944 * _2983;
                                float _3008 = _3007 * _3007;
                                float _3014 = ((1.0 - _3008) * dot(vec3(_405, _408, _411), vec3(_2931, _2932, _2933))) + _3008;
                                float _4024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3015 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _3016 = 1.0 - _2983;
                                float _3026 = (0.5 / (((_3015 * ((_2998 * _3016) + _2983)) + 9.9999999392252902907785028219223e-09) + (((_3015 * _3016) + _2983) * _2998))) * _3015;
                                float _4035 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3036 = (_2961 * _2938) * (((_2984 * 3.1415927410125732421875) * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) / ((_3006 * _3006) * ((_2951 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2962 * _2805.z;
                                frontier_phi_75_pred_1 = _2962 * _2805.y;
                                frontier_phi_75_pred_2 = _2962 * _2805.x;
                                frontier_phi_75_pred_3 = _3036 * _2817.z;
                                frontier_phi_75_pred_4 = _3036 * _2817.y;
                                frontier_phi_75_pred_5 = _3036 * _2817.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3045 = frontier_phi_75_pred;
                            _3044 = frontier_phi_75_pred_1;
                            _3043 = frontier_phi_75_pred_2;
                            _3042 = frontier_phi_75_pred_3;
                            _3041 = frontier_phi_75_pred_4;
                            _3040 = frontier_phi_75_pred_5;
                            _2747 = _3043 + _2760;
                            _2748 = _3044 + _2761;
                            _2749 = _3045 + _2762;
                            _2744 = _3040 + _2757;
                            _2745 = _3041 + _2758;
                            _2746 = _3042 + _2759;
                            if (_2764 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2746;
                                _2760 = _2747;
                                _2761 = _2748;
                                _2762 = _2749;
                                _2763 = _2764;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2749;
                        frontier_phi_69_pred_1 = _2748;
                        frontier_phi_69_pred_2 = _2747;
                        frontier_phi_69_pred_3 = _2746;
                        frontier_phi_69_pred_4 = _2745;
                        frontier_phi_69_pred_5 = _2744;
                    }
                    _2416 = frontier_phi_69_pred;
                    _2414 = frontier_phi_69_pred_1;
                    _2412 = frontier_phi_69_pred_2;
                    _2410 = frontier_phi_69_pred_3;
                    _2408 = frontier_phi_69_pred_4;
                    _2406 = frontier_phi_69_pred_5;
                    uint _2551 = _2550 + 1u;
                    if (_2551 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2544 = _2406;
                        _2545 = _2408;
                        _2546 = _2410;
                        _2547 = _2412;
                        _2548 = _2414;
                        _2549 = _2416;
                        _2550 = _2551;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2416;
                frontier_phi_57_58_ladder_1 = _2414;
                frontier_phi_57_58_ladder_2 = _2412;
                frontier_phi_57_58_ladder_3 = _2410;
                frontier_phi_57_58_ladder_4 = _2408;
                frontier_phi_57_58_ladder_5 = _2406;
            }
            else
            {
                frontier_phi_57_58_ladder = _2303;
                frontier_phi_57_58_ladder_1 = _2301;
                frontier_phi_57_58_ladder_2 = _2299;
                frontier_phi_57_58_ladder_3 = _2297;
                frontier_phi_57_58_ladder_4 = _2295;
                frontier_phi_57_58_ladder_5 = _2293;
            }
            _2405 = frontier_phi_57_58_ladder_5;
            _2407 = frontier_phi_57_58_ladder_4;
            _2409 = frontier_phi_57_58_ladder_3;
            _2411 = frontier_phi_57_58_ladder_2;
            _2413 = frontier_phi_57_58_ladder_1;
            _2415 = frontier_phi_57_58_ladder;
        }
        float _2420 = isnan(1.0) ? _465 : (isnan(_465) ? 1.0 : min(_465, 1.0));
        _2205 = (_2420 * _2411) + _1642;
        _2207 = (_2420 * _2413) + _1644;
        _2209 = (_2420 * _2415) + _1646;
        _2211 = ((_2405 * _450) * _2420) + _1987;
        _2213 = ((_2407 * _452) * _2420) + _1989;
        _2215 = ((_2409 * _453) * _2420) + _1991;
    }
    else
    {
        _2205 = _1642;
        _2207 = _1644;
        _2209 = _1646;
        _2211 = _1987;
        _2213 = _1989;
        _2215 = _1991;
    }
    float _4051 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4062 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _4073 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    uint _2235 = _424 + 6u;
    float _2243 = _383 / cbSceneParam._m0[86u].x;
    float _2244 = _384 / cbSceneParam._m0[86u].y;
    vec4 _2258 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2243, _2244, (log2((isnan(cbSceneParam._m0[77u].w) ? _317 : (isnan(_317) ? cbSceneParam._m0[77u].w : min(_317, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2260 = _2258.x;
    float _2261 = _2258.y;
    float _2262 = _2258.z;
    float _2263 = _2258.w;
    float _2355;
    float _2357;
    float _2359;
    float _2361;
    if (_317 > cbSceneParam._m0[78u].w)
    {
        float _2318 = isnan(_317) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _317 : min(cbSceneParam._m0[80u].w, _317));
        float _2319 = _2318 / _317;
        float _2330 = _2319 * _368;
        float _2331 = _369 * _2319;
        float _2332 = (-0.0) - _2331;
        float _2333 = _2319 * _370;
        float _2335 = (cbSceneParam._m0[77u].w * _2332) / _2318;
        float _2336 = _2335 + cbSceneParam._m0[79u].w;
        float _2337 = cbSceneParam._m0[79u].w - _2331;
        float _2343 = sqrt(((_2330 * _2330) + (_2331 * _2331)) + (_2333 * _2333));
        float _2346 = (1.0 - (cbSceneParam._m0[77u].w / _2318)) * _2343;
        float _2351 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2353 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2506;
        if (abs((_2332 - _2335) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2506 = ((((_2336 > 0.0) ? exp2(_2351 * _2336) : (2.0 - exp2(_2353 * _2336))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2346;
        }
        else
        {
            float _2466 = 1.0 / cbSceneParam._m0[80u].x;
            float _2467 = isnan(_2337) ? _2336 : (isnan(_2336) ? _2337 : max(_2336, _2337));
            float _2468 = isnan(_2337) ? _2336 : (isnan(_2336) ? _2337 : min(_2336, _2337));
            float _2477 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : min(_2467, 0.0));
            float _2478 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : min(_2468, 0.0));
            _2506 = ((abs(_2343 / _2332) * cbSceneParam._m0[80u].y) * ((((_2477 - _2478) * 2.0) - ((exp2(_2351 * (isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0)))) - exp2(_2351 * (isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0))))) * _2466)) - ((exp2(_2353 * _2477) - exp2(_2353 * _2478)) * _2466))) + (_2346 * cbSceneParam._m0[80u].z);
        }
        vec4 _2508 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2243, _2244, 1.0), 0.0);
        float _2517 = exp2((_2506 * (-1.44269502162933349609375)) * (1.0 - _2508.w));
        float _2518 = log2(_2517);
        float _2534 = log2(_2263);
        _2355 = (exp2(_2534 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2518 * cbSceneParam._m0[78u].x)) * _2508.x) / cbSceneParam._m0[78u].x)) + _2260;
        _2357 = (exp2(_2534 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2518 * cbSceneParam._m0[78u].y)) * _2508.y) / cbSceneParam._m0[78u].y)) + _2261;
        _2359 = (exp2(_2534 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2518 * cbSceneParam._m0[78u].z)) * _2508.z) / cbSceneParam._m0[78u].z)) + _2262;
        _2361 = _2517 * _2263;
    }
    else
    {
        _2355 = _2260;
        _2357 = _2261;
        _2359 = _2262;
        _2361 = _2263;
    }
    float _2373 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2374 = _2373 == 3.0;
    float _2375 = log2(_2361);
    float _2382 = exp2(_2375 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_2205 + ((isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))) * _465))) + ((_2211 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _1275)) * cbPerFrame._m0[3u].x));
    float _2383 = exp2(_2375 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_2207 + ((isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0))) * _465))) + ((_2213 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _1275)) * cbPerFrame._m0[3u].x));
    float _2384 = exp2(_2375 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2209 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _465))) + ((_2215 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _1275)) * cbPerFrame._m0[3u].x));
    float _2393 = (_2373 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2393 * (_2374 ? _2382 : (_2382 + (cbSceneParam._m0[72u].w * _2355)));
    SV_Target.y = _2393 * (_2374 ? _2383 : (_2383 + (cbSceneParam._m0[72u].w * _2357)));
    SV_Target.z = _2393 * (_2374 ? _2384 : (_2384 + (cbSceneParam._m0[72u].w * _2359)));
    SV_Target.w = cbInstanceData._m0[_2235].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2235].w;
}


