#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _887;
float _3301;
float _3302;
float _3303;
float _3304;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    float _234 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _235 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _248 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_234 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_235 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _254 = _248.x * cbMtdParam._m0[9u].x;
    float _255 = _248.y * cbMtdParam._m0[9u].y;
    float _256 = _248.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _234) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _235) + cbTextureTilingScale._m0[1u].w));
    float _273 = _269.z;
    float _277 = (_269.x * 2.0) + (-1.0);
    float _279 = (_269.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3313 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))));
    float _289 = fma(_286, _218, fma(_279, _210 * TANGENT.x, (_196 * _189) * _277));
    float _292 = fma(_286, _219, fma(_279, _210 * TANGENT.y, (_196 * _190) * _277));
    float _295 = fma(_286, _220, fma(_279, _210 * TANGENT.z, (_196 * _191) * _277));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _300 = _299 * _289;
    float _301 = _299 * _292;
    float _302 = _299 * _295;
    float _3324 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _303 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _3335 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3346 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3357 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3368 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _307 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    vec4 _388 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _390 = _388.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _566 = sqrt(((_374 * _374) + (_375 * _375)) + (_376 * _376));
        float _572 = (cbMatDynParam._m0[5u].x * _566) + cbMatDynParam._m0[5u].y;
        float _3379 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
        float _573 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _577 = (cbMatDynParam._m0[5u].z * _566) + cbMatDynParam._m0[5u].w;
        float _3390 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) - _573)) + _573) < ((_390 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _402 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _403 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _423 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _426 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _429 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    uint _442 = uint(roundEven(NORMAL.w)) * 13u;
    uint _444 = _442 + 9u;
    uint _445 = _444 + uint(cbMatDynParam._m0[0u].w);
    float _451 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0)))) * cbInstanceData._m0[_445].x;
    float _452 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) * cbInstanceData._m0[_445].y;
    float _453 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * cbInstanceData._m0[_445].z;
    float _3401 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _457 = 1.0 - _307;
    float _458 = _454 * _457;
    float _459 = _455 * _457;
    float _460 = _456 * _457;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _307;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _307;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _307;
    float _468 = _465 + 0.039999999105930328369140625;
    float _470 = _466 + 0.039999999105930328369140625;
    float _471 = _467 + 0.039999999105930328369140625;
    vec4 _480 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _402, cbSceneParam._m0[86u].y * _403));
    float _483 = _480.x * TEXCOORD.z;
    float _484 = dot(vec3(_300, _301, _302), vec3(_381, _382, _383));
    float _487 = _484 * 2.0;
    float _491 = (_487 * _300) - _381;
    float _492 = (_487 * _301) - _382;
    float _493 = (_487 * _302) - _383;
    float _497 = abs(dot(vec3(_381, _382, _383), vec3(_300, _301, _302)));
    float _3434 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _499 = sqrt(_303);
    float _512 = exp2((_499 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_499 * 3.0));
    float _518 = (1.0 - _512) * ((_499 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _519 = _512 * _499;
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _886;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _611 = fma(_555, cbModelParam._m0[26u].z, fma(_551, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _547));
        float _615 = fma(_555, cbModelParam._m0[27u].z, fma(_551, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _547));
        float _619 = fma(_555, cbModelParam._m0[28u].z, fma(_551, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _547));
        float _644 = _547 + _300;
        float _645 = _551 + _301;
        float _646 = _555 + _302;
        float _656 = fma(_646, cbModelParam._m0[26u].z, fma(_645, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _644)) - _611;
        float _657 = fma(_646, cbModelParam._m0[27u].z, fma(_645, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _644)) - _615;
        float _658 = fma(_646, cbModelParam._m0[28u].z, fma(_645, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _644)) - _619;
        float _662 = inversesqrt(dot(vec3(_656, _657, _658), vec3(_656, _657, _658)));
        float _675 = ((_662 * _656) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_611 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _676 = ((_662 * _657) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_615 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _677 = ((_662 * _658) / cbModelParam._m0[34u].z) + ((((((_619 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        float _714 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_680.x + (-0.5));
        float _716 = _714 * (_680.y + (-0.5));
        float _717 = _714 * (_680.z + (-0.5));
        float _724 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_687.x + (-0.5));
        float _726 = _724 * (_687.y + (-0.5));
        float _727 = _724 * (_687.z + (-0.5));
        float _734 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_694.x + (-0.5));
        float _736 = _734 * (_694.y + (-0.5));
        float _737 = _734 * (_694.z + (-0.5));
        float _744 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_701.x + (-0.5));
        float _746 = _744 * (_701.y + (-0.5));
        float _747 = _744 * (_701.z + (-0.5));
        float _748 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _749 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = _715 * 0.5;
        float _752 = _725 * 0.5;
        float _753 = _735 * 0.5;
        float _754 = dot(vec3(_751, _752, _753), vec3(_751, _752, _753));
        float _759 = (_754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_754);
        float _768 = (dot(vec3(_300, _301, _302), vec3(_759 * _751, _759 * _752, _759 * _753)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _778 = sqrt(((_752 * _752) + (_751 * _751)) + (_753 * _753)) / (_748 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _780 = _779 * 2.0;
        float _784 = (1.0 - _779) / (_779 + 1.0);
        float _3482 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _794 = ((((1.0 - _785) * (_780 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_780 + 1.0))) + _785) * _748;
        float _795 = _716 * 0.5;
        float _796 = _726 * 0.5;
        float _797 = _736 * 0.5;
        float _798 = dot(vec3(_795, _796, _797), vec3(_795, _796, _797));
        float _803 = (_798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_798);
        float _811 = (dot(vec3(_300, _301, _302), vec3(_803 * _795, _803 * _796, _803 * _797)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _820 = sqrt(((_796 * _796) + (_795 * _795)) + (_797 * _797)) / (_749 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3515 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_822 + 1.0))) + _827) * _749;
        float _837 = _717 * 0.5;
        float _838 = _727 * 0.5;
        float _839 = _737 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _853 = (dot(vec3(_300, _301, _302), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _862 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3548 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_864 + 1.0))) + _869) * _750;
        _886 = _717;
        _888 = _716;
        _889 = _715;
        _890 = _727;
        _891 = _726;
        _892 = _725;
        _893 = _737;
        _894 = _736;
        _895 = _735;
        _896 = _750;
        _897 = _749;
        _898 = _748;
        _899 = cbModelParam._m0[36u].z * (isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)));
        _900 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
    }
    else
    {
        _886 = _887;
        _888 = _887;
        _889 = _887;
        _890 = _887;
        _891 = _887;
        _892 = _887;
        _893 = _887;
        _894 = _887;
        _895 = _887;
        _896 = _887;
        _897 = _887;
        _898 = _887;
        _899 = 0.0;
        _900 = 0.0;
        _901 = 0.0;
    }
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _930 = fma(_555, cbModelParam._m0[30u].z, fma(_551, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _547));
        float _934 = fma(_555, cbModelParam._m0[31u].z, fma(_551, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _547));
        float _938 = fma(_555, cbModelParam._m0[32u].z, fma(_551, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _547));
        float _961 = _547 + _300;
        float _962 = _551 + _301;
        float _963 = _555 + _302;
        float _973 = fma(_963, cbModelParam._m0[30u].z, fma(_962, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961)) - _930;
        float _974 = fma(_963, cbModelParam._m0[31u].z, fma(_962, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961)) - _934;
        float _975 = fma(_963, cbModelParam._m0[32u].z, fma(_962, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961)) - _938;
        float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
        float _992 = ((_979 * _973) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_930 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_979 * _974) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_934 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_979 * _975) / cbModelParam._m0[35u].z) + ((((((_938 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        float _1029 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_996.x + (-0.5));
        float _1031 = _1029 * (_996.y + (-0.5));
        float _1032 = _1029 * (_996.z + (-0.5));
        float _1039 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1003.x + (-0.5));
        float _1041 = _1039 * (_1003.y + (-0.5));
        float _1042 = _1039 * (_1003.z + (-0.5));
        float _1049 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1010.x + (-0.5));
        float _1051 = _1049 * (_1010.y + (-0.5));
        float _1052 = _1049 * (_1010.z + (-0.5));
        float _1059 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1017.x + (-0.5));
        float _1061 = _1059 * (_1017.y + (-0.5));
        float _1062 = _1059 * (_1017.z + (-0.5));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = _1030 * 0.5;
        float _1067 = _1040 * 0.5;
        float _1068 = _1050 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_300, _301, _302), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3611 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1093 + 1.0))) + _1098) * _1063;
        float _1108 = _1031 * 0.5;
        float _1109 = _1041 * 0.5;
        float _1110 = _1051 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_300, _301, _302), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3644 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1135 + 1.0))) + _1140) * _1064;
        float _1150 = _1032 * 0.5;
        float _1151 = _1042 * 0.5;
        float _1152 = _1052 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_300, _301, _302), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3677 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1177 + 1.0))) + _1182) * _1065;
        _1199 = _1032;
        _1200 = _1031;
        _1201 = _1030;
        _1202 = _1042;
        _1203 = _1041;
        _1204 = _1040;
        _1205 = _1052;
        _1206 = _1051;
        _1207 = _1050;
        _1208 = _1065;
        _1209 = _1064;
        _1210 = _1063;
        _1211 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1212 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
    }
    else
    {
        _1199 = _887;
        _1200 = _887;
        _1201 = _887;
        _1202 = _887;
        _1203 = _887;
        _1204 = _887;
        _1205 = _887;
        _1206 = _887;
        _1207 = _887;
        _1208 = _887;
        _1209 = _887;
        _1210 = _887;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1223 = (cbModelParam._m0[1u].x * (_1211 - _899)) + _899;
    float _1224 = (cbModelParam._m0[1u].x * (_1212 - _900)) + _900;
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _901)) + _901;
    float _1246 = fma(_1225, cbSceneParam._m0[89u].z, fma(_1224, cbSceneParam._m0[89u].y, _1223 * cbSceneParam._m0[89u].x));
    float _1249 = fma(_1225, cbSceneParam._m0[90u].z, fma(_1224, cbSceneParam._m0[90u].y, _1223 * cbSceneParam._m0[90u].x));
    float _1252 = fma(_1225, cbSceneParam._m0[91u].z, fma(_1224, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1223));
    float _1267 = _491 * 0.5;
    float _1268 = _492 * 0.5;
    float _1269 = _493 * 0.5;
    float _1270 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1273 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1200, _1203, _1206, _1209));
    float _1276 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1199, _1202, _1205, _1208));
    float _1310;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1283 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_886, _890, _893, _896));
        float _1287 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_888, _891, _894, _897));
        float _1291 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_889, _892, _895, _898));
        float _1298 = dot(vec4(cbModelParam._m0[39u]), vec4(_1267, _1268, _1269, 1.0));
        _1310 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1298) ? 0.0 : (isnan(0.0) ? _1298 : max(0.0, _1298))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1310 = 1.0;
    }
    float _1321;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1312 = dot(vec4(cbModelParam._m0[40u]), vec4(_1267, _1268, _1269, 1.0));
        _1321 = dot(vec3(isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1312) ? 0.0 : (isnan(0.0) ? _1312 : max(0.0, _1312))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1321 = 1.0;
    }
    float _1325 = (_1321 * cbModelParam._m0[1u].x) + (_1310 * (1.0 - cbModelParam._m0[1u].x));
    float _1335 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _303);
    float _1336 = isnan(_1335) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1335 : min(cbModelParam._m0[25u].z, _1335));
    float _1418;
    float _1420;
    float _1422;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1385 = fma(_555, cbModelParam._m0[13u].z, fma(_551, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547)) + cbModelParam._m0[13u].w;
        float _1389 = fma(_555, cbModelParam._m0[14u].z, fma(_551, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547)) + cbModelParam._m0[14u].w;
        float _1393 = fma(_555, cbModelParam._m0[15u].z, fma(_551, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547)) + cbModelParam._m0[15u].w;
        float _1396 = fma(_493, cbModelParam._m0[13u].z, fma(_492, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _491));
        float _1399 = fma(_493, cbModelParam._m0[14u].z, fma(_492, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _491));
        float _1402 = fma(_493, cbModelParam._m0[15u].z, fma(_492, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _491));
        float _1430;
        if (_1396 > 0.0)
        {
            _1430 = abs((1.0 - _1385) / _1396);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1385 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1430 = frontier_phi_19_17_ladder;
        }
        float _1658;
        if (_1399 > 0.0)
        {
            _1658 = abs((1.0 - _1389) / _1399);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1389 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1658 = frontier_phi_28_24_ladder;
        }
        float _1915;
        if (_1402 > 0.0)
        {
            _1915 = abs((1.0 - _1393) / _1402);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1393 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1915 = frontier_phi_40_35_ladder;
        }
        float _1917 = isnan(_1658) ? _1430 : (isnan(_1430) ? _1658 : min(_1430, _1658));
        float _1918 = isnan(_1915) ? _1917 : (isnan(_1917) ? _1915 : min(_1917, _1915));
        float _1922 = (_1918 * _1396) + _1385;
        float _1923 = (_1918 * _1399) + _1389;
        float _1924 = (_1918 * _1402) + _1393;
        float _1925 = _1918 * 9.9999997473787516355514526367188e-05;
        float _1927 = (-1.0) - _1925;
        float _1929 = _1925 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1924 > _1929) || ((_1924 < _1927) || ((_1923 > _1929) || ((_1923 < _1927) || ((_1922 < _1927) || (_1922 > _1929))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2052 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1924, cbModelParam._m0[9u].z, fma(_1923, cbModelParam._m0[9u].y, _1922 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1924, cbModelParam._m0[10u].z, fma(_1923, cbModelParam._m0[10u].y, _1922 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1924, cbModelParam._m0[11u].z, fma(_1923, cbModelParam._m0[11u].y, _1922 * cbModelParam._m0[11u].x))), _1336);
            frontier_phi_18_40_ladder = _2052.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2052.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2052.x * cbModelParam._m0[1u].y;
        }
        _1418 = frontier_phi_18_40_ladder_2;
        _1420 = frontier_phi_18_40_ladder_1;
        _1422 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_491, _492, _493), _1336);
        _1418 = _1406.x * cbModelParam._m0[1u].y;
        _1420 = _1406.y * cbModelParam._m0[1u].y;
        _1422 = _1406.z * cbModelParam._m0[1u].y;
    }
    float _1426 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _303);
    float _1427 = isnan(_1426) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1426 : min(cbModelParam._m0[25u].w, _1426));
    float _1519;
    float _1521;
    float _1523;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1483 = fma(_555, cbModelParam._m0[21u].z, fma(_551, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547)) + cbModelParam._m0[21u].w;
        float _1487 = fma(_555, cbModelParam._m0[22u].z, fma(_551, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547)) + cbModelParam._m0[22u].w;
        float _1491 = fma(_555, cbModelParam._m0[23u].z, fma(_551, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547)) + cbModelParam._m0[23u].w;
        float _1494 = fma(_493, cbModelParam._m0[21u].z, fma(_492, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _491));
        float _1497 = fma(_493, cbModelParam._m0[22u].z, fma(_492, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _491));
        float _1500 = fma(_493, cbModelParam._m0[23u].z, fma(_492, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _491));
        float _1663;
        if (_1494 > 0.0)
        {
            _1663 = abs((1.0 - _1483) / _1494);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1483 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1663 = frontier_phi_30_26_ladder;
        }
        float _1942;
        if (_1497 > 0.0)
        {
            _1942 = abs((1.0 - _1487) / _1497);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1487 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1942 = frontier_phi_42_37_ladder;
        }
        float _2155;
        if (_1500 > 0.0)
        {
            _2155 = abs((1.0 - _1491) / _1500);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1491 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2155 = frontier_phi_51_48_ladder;
        }
        float _2157 = isnan(_1942) ? _1663 : (isnan(_1663) ? _1942 : min(_1663, _1942));
        float _2158 = isnan(_2155) ? _2157 : (isnan(_2157) ? _2155 : min(_2157, _2155));
        float _2162 = (_2158 * _1494) + _1483;
        float _2163 = (_2158 * _1497) + _1487;
        float _2164 = (_2158 * _1500) + _1491;
        float _2165 = _2158 * 9.9999997473787516355514526367188e-05;
        float _2166 = (-1.0) - _2165;
        float _2168 = _2165 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2164 > _2168) || ((_2164 < _2166) || ((_2163 > _2168) || ((_2163 < _2166) || ((_2162 < _2166) || (_2162 > _2168))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2164, cbModelParam._m0[17u].z, fma(_2163, cbModelParam._m0[17u].y, _2162 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2164, cbModelParam._m0[18u].z, fma(_2163, cbModelParam._m0[18u].y, _2162 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2164, cbModelParam._m0[19u].z, fma(_2163, cbModelParam._m0[19u].y, _2162 * cbModelParam._m0[19u].x))), _1427);
            frontier_phi_27_51_ladder = _2362.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2362.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2362.x * cbModelParam._m0[1u].z;
        }
        _1519 = frontier_phi_27_51_ladder_2;
        _1521 = frontier_phi_27_51_ladder_1;
        _1523 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1503 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_491, _492, _493), _1427);
        _1519 = _1503.x * cbModelParam._m0[1u].z;
        _1521 = _1503.y * cbModelParam._m0[1u].z;
        _1523 = _1503.z * cbModelParam._m0[1u].z;
    }
    float _1536 = (((_518 * _468) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1519 - _1418)) + _1418);
    float _1538 = (((_518 * _470) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1521 - _1420)) + _1420);
    float _1540 = (((_518 * _471) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1523 - _1422)) + _1422);
    float _1543 = fma(_1540, cbSceneParam._m0[89u].z, fma(_1538, cbSceneParam._m0[89u].y, _1536 * cbSceneParam._m0[89u].x));
    float _1546 = fma(_1540, cbSceneParam._m0[90u].z, fma(_1538, cbSceneParam._m0[90u].y, _1536 * cbSceneParam._m0[90u].x));
    float _1549 = fma(_1540, cbSceneParam._m0[91u].z, fma(_1538, cbSceneParam._m0[91u].y, _1536 * cbSceneParam._m0[91u].x));
    vec4 _1557 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_402, _403));
    float _1559 = _1557.w;
    float _1571 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1559);
    float _1572 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1559);
    float _1573 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1559);
    uvec4 _1577 = floatBitsToUint(cbInstanceData._m0[_442 + 5u]);
    uint _1579 = _1577.x * 14u;
    uint _1580 = _1579 + 13u;
    float _1587 = _483 + (-1.0);
    float _1592 = (cbLight._m0[_1580].x * _1587) + 1.0;
    float _1593 = (cbLight._m0[_1580].y * _1587) + 1.0;
    float _1594 = (cbLight._m0[_1580].z * _1587) + 1.0;
    float _1595 = (cbLight._m0[_1580].w * _1587) + 1.0;
    uint _1596 = _1579 + 5u;
    float _1602 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    uint _1606 = _1579 + 4u;
    float _1616 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
    uint _1620 = _1579 | 1u;
    float _1631 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_300, _301, _302));
    float _1634 = dot(vec3(cbLight._m0[_1620].xyz), vec3(_300, _301, _302));
    float _3813 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _3824 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _1639 = (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.3183098733425140380859375;
    float _1641 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.3183098733425140380859375;
    float _1648 = ((cbLight._m0[_1596].x * _1602) * _1641) + (((cbLight._m0[_1606].x * _1571) * _1616) * _1639);
    float _1649 = ((_1602 * cbLight._m0[_1596].y) * _1641) + (((cbLight._m0[_1606].y * _1572) * _1616) * _1639);
    float _1650 = ((_1602 * cbLight._m0[_1596].z) * _1641) + (((cbLight._m0[_1606].z * _1573) * _1616) * _1639);
    uvec4 _1655 = floatBitsToUint(cbLight._m0[_1579 + 12u]);
    bool _1657 = _1655.x == 0u;
    float _1668;
    float _1670;
    float _1672;
    if (_1657)
    {
        _1668 = _1648;
        _1670 = _1649;
        _1672 = _1650;
    }
    else
    {
        uint _1676 = _1579 + 6u;
        float _1692 = (dot(vec3(cbLight._m0[_1579 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1693 = _1692 * _1692;
        float _3835 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1695 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1668 = (((cbLight._m0[_1676].x * 0.3183098733425140380859375) * _1694) * _1695) + _1648;
        _1670 = (((cbLight._m0[_1676].y * 0.3183098733425140380859375) * _1694) * _1695) + _1649;
        _1672 = (((cbLight._m0[_1676].z * 0.3183098733425140380859375) * _1694) * _1695) + _1650;
    }
    bool _1675 = _1655.y == 0u;
    float _1713;
    float _1715;
    float _1717;
    if (_1675)
    {
        _1713 = _1668;
        _1715 = _1670;
        _1717 = _1672;
    }
    else
    {
        uint _1886 = _1579 + 7u;
        float _1902 = (dot(vec3(cbLight._m0[_1579 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1903 = _1902 * _1902;
        float _3851 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1904 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1905 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1713 = (((cbLight._m0[_1886].x * 0.3183098733425140380859375) * _1904) * _1905) + _1668;
        _1715 = (((cbLight._m0[_1886].y * 0.3183098733425140380859375) * _1904) * _1905) + _1670;
        _1717 = (((cbLight._m0[_1886].z * 0.3183098733425140380859375) * _1904) * _1905) + _1672;
    }
    uint _1720 = _1579 + 8u;
    float _1733 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1579].w)) * _303) * 0.949999988079071044921875);
    float _1734 = _1733 * _1733;
    float _1735 = cbLight._m0[_1579].x + _381;
    float _1736 = cbLight._m0[_1579].y + _382;
    float _1737 = cbLight._m0[_1579].z + _383;
    float _1741 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
    float _1742 = _1741 * _1735;
    float _1743 = _1741 * _1736;
    float _1744 = _1741 * _1737;
    float _1745 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1579].xyz));
    float _3867 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1748 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _1749 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _1750 = dot(vec3(_300, _301, _302), vec3(_1742, _1743, _1744));
    float _3889 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _1754 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_1742, _1743, _1744));
    float _3900 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1758 = _1734 * _1734;
    float _1762 = ((_1753 * _1753) * (_1758 + (-1.0))) + 1.0;
    float _1770 = exp2(log2(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * 5.0);
    float _1771 = 0.959999978542327880859375 - _465;
    float _1773 = 0.959999978542327880859375 - _466;
    float _1774 = 0.959999978542327880859375 - _467;
    float _1781 = 1.0 - _1734;
    float _1792 = (0.5 / (((_1749 * ((_1748 * _1781) + _1734)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1781) + _1734) * _1748))) * _1748;
    float _3911 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1794 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1758 / ((_1762 * _1762) * 3.141590118408203125));
    uint _1808 = _1579 + 9u;
    float _1819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1620].w)) * _303) * 0.949999988079071044921875);
    float _1820 = _1819 * _1819;
    float _1821 = cbLight._m0[_1620].x + _381;
    float _1822 = cbLight._m0[_1620].y + _382;
    float _1823 = cbLight._m0[_1620].z + _383;
    float _1827 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
    float _1828 = _1827 * _1821;
    float _1829 = _1827 * _1822;
    float _1830 = _1827 * _1823;
    float _1831 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1620].xyz));
    float _3922 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _1835 = dot(vec3(_300, _301, _302), vec3(_1828, _1829, _1830));
    float _3933 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1839 = dot(vec3(cbLight._m0[_1620].xyz), vec3(_1828, _1829, _1830));
    float _3944 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1843 = _1820 * _1820;
    float _1847 = ((_1838 * _1838) * (_1843 + (-1.0))) + 1.0;
    float _1854 = exp2(log2(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * 5.0);
    float _1861 = 1.0 - _1820;
    float _1871 = (0.5 / (((_1749 * ((_1834 * _1861) + _1820)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1861) + _1820) * _1834))) * _1834;
    float _3955 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1873 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1843 / ((_1847 * _1847) * 3.141590118408203125));
    float _1883 = (((((_1854 * _1771) + _468) * cbLight._m0[_1808].x) * _1873) * _1602) + ((((cbLight._m0[_1720].x * _1571) * ((_1770 * _1771) + _468)) * _1794) * _1616);
    float _1884 = (((((_1854 * _1773) + _470) * cbLight._m0[_1808].y) * _1873) * _1602) + ((((cbLight._m0[_1720].y * _1572) * ((_1770 * _1773) + _470)) * _1794) * _1616);
    float _1885 = (((((_1854 * _1774) + _471) * cbLight._m0[_1808].z) * _1873) * _1602) + ((((cbLight._m0[_1720].z * _1573) * ((_1770 * _1774) + _471)) * _1794) * _1616);
    float _1947;
    float _1949;
    float _1951;
    if (_1657)
    {
        _1947 = _1883;
        _1949 = _1884;
        _1951 = _1885;
    }
    else
    {
        uint _1953 = _1579 + 2u;
        uint _1957 = _1579 + 10u;
        float _1971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _303) * 0.949999988079071044921875);
        float _1972 = _1971 * _1971;
        float _1973 = cbLight._m0[_1953].x + _381;
        float _1974 = cbLight._m0[_1953].y + _382;
        float _1975 = cbLight._m0[_1953].z + _383;
        float _1979 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
        float _1980 = _1979 * _1973;
        float _1981 = _1979 * _1974;
        float _1982 = _1979 * _1975;
        float _1983 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1953].xyz));
        float _3966 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1986 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1987 = dot(vec3(_300, _301, _302), vec3(_1980, _1981, _1982));
        float _3977 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1990 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1991 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_1980, _1981, _1982));
        float _3988 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1995 = _1972 * _1972;
        float _1999 = ((_1990 * _1990) * (_1995 + (-1.0))) + 1.0;
        float _2006 = exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0);
        float _2013 = 1.0 - _1972;
        float _2023 = (0.5 / (((_1749 * ((_1986 * _2013) + _1972)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _2013) + _1972) * _1986))) * _1986;
        float _3999 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2025 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1995 / ((_1999 * _1999) * 3.141590118408203125));
        float _2026 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1947 = (((((_2006 * _1771) + _468) * cbLight._m0[_1957].x) * _2025) * _2026) + _1883;
        _1949 = (((((_2006 * _1773) + _470) * cbLight._m0[_1957].y) * _2025) * _2026) + _1884;
        _1951 = (((((_2006 * _1774) + _471) * cbLight._m0[_1957].z) * _2025) * _2026) + _1885;
    }
    float _2061;
    float _2063;
    float _2065;
    if (_1675)
    {
        _2061 = _1947;
        _2063 = _1949;
        _2065 = _1951;
    }
    else
    {
        uint _2072 = _1579 + 3u;
        uint _2076 = _1579 + 11u;
        float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _303) * 0.949999988079071044921875);
        float _2091 = _2090 * _2090;
        float _2092 = cbLight._m0[_2072].x + _381;
        float _2093 = cbLight._m0[_2072].y + _382;
        float _2094 = cbLight._m0[_2072].z + _383;
        float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
        float _2099 = _2098 * _2092;
        float _2100 = _2098 * _2093;
        float _2101 = _2098 * _2094;
        float _2102 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_2072].xyz));
        float _4015 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2106 = dot(vec3(_300, _301, _302), vec3(_2099, _2100, _2101));
        float _4026 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2110 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2099, _2100, _2101));
        float _4037 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2114 = _2091 * _2091;
        float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
        float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0);
        float _2132 = 1.0 - _2091;
        float _2142 = (0.5 / (((_1749 * ((_2105 * _2132) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _2132) + _2091) * _2105))) * _2105;
        float _4048 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2144 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
        float _2145 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _2061 = (((((_2125 * _1771) + _468) * cbLight._m0[_2076].x) * _2144) * _2145) + _1947;
        _2063 = (((((_2125 * _1773) + _470) * cbLight._m0[_2076].y) * _2144) * _2145) + _1949;
        _2065 = (((((_2125 * _1774) + _471) * cbLight._m0[_2076].z) * _2144) * _2145) + _1951;
    }
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    if (_1577.y == 0u)
    {
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2221 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2220;
        float _2222 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2220;
        float _2223 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2220;
        uvec4 _2235 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2236 = _2235.x;
        uint _2247 = uint((float(_2235.y) * floor(float(uint(cbSceneParam._m0[85u].y * _403) / _2236))) + floor(float(uint(cbSceneParam._m0[85u].x * _402) / _2236)));
        float _2257 = (log2(_2223 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2258 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        uint _2261 = uint(isnan(14.0) ? _2258 : (isnan(_2258) ? 14.0 : min(_2258, 14.0)));
        uvec4 _2266 = texelFetch(g_lightClusterGridBuffer, int(((_2261 << 2u) + (_2247 << 6u)) >> 2u));
        uint _2267 = _2266.x;
        uint _2268 = _2235.z;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        if (((((1u << ((_2268 >> 4u) & 15u)) + 4294967295u) & _2267) == 0u) || ((_2268 & 240u) == 0u))
        {
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
        }
        else
        {
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            float _2524 = 0.0;
            uint _2525 = 0u;
            uint _2534;
            bool _2535;
            for (;;)
            {
                _2534 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2525 << 2u)) >> 2u)).x;
                _2535 = _2534 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2535)
                {
                    frontier_phi_68_pred = _2521;
                    frontier_phi_68_pred_1 = _2524;
                    frontier_phi_68_pred_2 = _2523;
                    frontier_phi_68_pred_3 = _2522;
                    frontier_phi_68_pred_4 = _2520;
                    frontier_phi_68_pred_5 = _2519;
                }
                else
                {
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    uint _2670;
                    _2664 = _2519;
                    _2665 = _2520;
                    _2666 = _2521;
                    _2667 = _2522;
                    _2668 = _2523;
                    _2669 = _2524;
                    _2670 = _2534;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    for (;;)
                    {
                        uint _2674 = uint(findLSB(_2670)) + (_2525 << 5u);
                        uint _2671 = (_2670 + 4294967295u) & _2670;
                        uint _2676 = _2674 * 48u;
                        vec4 _2690 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2676)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 3u)).x));
                        uint _2696 = (_2674 * 48u) + 4u;
                        vec4 _2709 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2696)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 3u)).x));
                        uint _2715 = (_2674 * 48u) + 8u;
                        vec3 _2726 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x));
                        float _2730 = _2690.x - _2221;
                        float _2731 = _2690.y - _2222;
                        float _2732 = _2690.z - _2223;
                        float _2733 = dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732));
                        float _2736 = inversesqrt(_2733);
                        float _2737 = _2736 * _2730;
                        float _2738 = _2736 * _2731;
                        float _2739 = _2736 * _2732;
                        float _2740 = dot(vec3(_423, _426, _429), vec3(_2737, _2738, _2739));
                        float _2745 = 1.0 - (_2733 * _2690.w);
                        float _4074 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                        float _2746 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2747 = sqrt(_2733) * _2709.w;
                        float _2750 = 1.39999997615814208984375 / (_2747 + 1.39999997615814208984375);
                        float _2751 = _2750 * _2750;
                        float _2754 = ((1.0 - _2751) * _2740) + _2751;
                        float _2757 = _2747 * _2747;
                        float _2761 = ((isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0))) * _2746) / ((_2757 * 0.699999988079071044921875) + 1.0);
                        float _2765 = (-0.0) - _2221;
                        float _2766 = (-0.0) - _2222;
                        float _2767 = (-0.0) - _2223;
                        float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
                        float _2772 = _2771 * _2765;
                        float _2773 = _2771 * _2766;
                        float _2774 = _2771 * _2767;
                        float _2782 = exp2(log2(1.0 / ((_2757 * 3.5) + 5.0)) * 0.25);
                        float _2783 = 1.0 - _499;
                        float _2790 = sqrt(1.0 - ((1.0 - (_2783 * _2783)) * (1.0 - (_2782 * _2782))));
                        float _2791 = _2790 * _2790;
                        float _2792 = _2791 * _2791;
                        float _2793 = _2772 + _2737;
                        float _2794 = _2773 + _2738;
                        float _2795 = _2774 + _2739;
                        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
                        float _2803 = dot(vec3(_423, _426, _429), vec3(_2772, _2773, _2774));
                        float _4090 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2806 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                        float _2807 = dot(vec3(_423, _426, _429), vec3(_2799 * _2793, _2799 * _2794, _2799 * _2795));
                        float _4101 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2810 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2814 = ((_2810 * _2810) * (_2792 + (-1.0))) + 1.0;
                        float _2815 = _2750 * _2791;
                        float _2816 = _2815 * _2815;
                        float _2819 = ((1.0 - _2816) * _2740) + _2816;
                        float _4112 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2820 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2821 = 1.0 - _2791;
                        float _2831 = (0.5 / (((_2820 * ((_2806 * _2821) + _2791)) + 9.9999999392252902907785028219223e-09) + (((_2820 * _2821) + _2791) * _2806))) * _2820;
                        float _4123 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2842 = (((_2792 * 3.1415927410125732421875) * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) / ((_2814 * _2814) * ((_2757 * 2.1991131305694580078125) + 3.141590118408203125))) * _2746;
                        _2594 = (_2761 * _2709.x) + _2667;
                        _2595 = (_2761 * _2709.y) + _2668;
                        _2596 = (_2761 * _2709.z) + _2669;
                        _2591 = (_2842 * _2726.x) + _2664;
                        _2592 = (_2842 * _2726.y) + _2665;
                        _2593 = (_2842 * _2726.z) + _2666;
                        if (_2671 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2664 = _2591;
                            _2665 = _2592;
                            _2666 = _2593;
                            _2667 = _2594;
                            _2668 = _2595;
                            _2669 = _2596;
                            _2670 = _2671;
                        }
                    }
                    frontier_phi_68_pred = _2593;
                    frontier_phi_68_pred_1 = _2596;
                    frontier_phi_68_pred_2 = _2595;
                    frontier_phi_68_pred_3 = _2594;
                    frontier_phi_68_pred_4 = _2592;
                    frontier_phi_68_pred_5 = _2591;
                }
                _2372 = frontier_phi_68_pred;
                _2378 = frontier_phi_68_pred_1;
                _2376 = frontier_phi_68_pred_2;
                _2374 = frontier_phi_68_pred_3;
                _2370 = frontier_phi_68_pred_4;
                _2368 = frontier_phi_68_pred_5;
                uint _2526 = _2525 + 1u;
                if (_2526 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2519 = _2368;
                    _2520 = _2370;
                    _2521 = _2372;
                    _2522 = _2374;
                    _2523 = _2376;
                    _2524 = _2378;
                    _2525 = _2526;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
        }
        uvec4 _2381 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2382 = _2381.z;
        uint _2384 = (_2382 >> 8u) & 15u;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        if (((4294967295u << _2384) & _2267) == 0u)
        {
            _2487 = _2367;
            _2489 = _2369;
            _2491 = _2371;
            _2493 = _2373;
            _2495 = _2375;
            _2497 = _2377;
        }
        else
        {
            float _2512 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
            float _2513 = _2512 * _2221;
            float _2514 = _2512 * _2222;
            float _2515 = _2512 * _2223;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2384 < ((_2382 >> 12u) & 15u))
            {
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2647 = _2367;
                float _2648 = _2369;
                float _2649 = _2371;
                float _2650 = _2373;
                float _2651 = _2375;
                float _2652 = _2377;
                uint _2653 = _2384;
                uint _2662;
                bool _2663;
                for (;;)
                {
                    _2662 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2653 << 2u)) >> 2u)).x;
                    _2663 = _2662 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2663)
                    {
                        frontier_phi_79_pred = _2652;
                        frontier_phi_79_pred_1 = _2651;
                        frontier_phi_79_pred_2 = _2650;
                        frontier_phi_79_pred_3 = _2649;
                        frontier_phi_79_pred_4 = _2648;
                        frontier_phi_79_pred_5 = _2647;
                    }
                    else
                    {
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _2869 = _2647;
                        float _2870 = _2648;
                        float _2871 = _2649;
                        float _2872 = _2650;
                        float _2873 = _2651;
                        float _2874 = _2652;
                        uint _2875 = _2662;
                        uint _2876;
                        vec4 _2901;
                        float _2902;
                        vec4 _2917;
                        vec3 _2929;
                        vec4 _2945;
                        vec4 _2961;
                        float _3008;
                        bool _3009;
                        for (;;)
                        {
                            uint _2886 = ((_2653 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2875));
                            _2876 = (_2875 + 4294967295u) & _2875;
                            uint _2888 = _2886 * 40u;
                            _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            _2902 = _2901.w;
                            uint _2904 = (_2886 * 40u) + 4u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2919 = (_2886 * 40u) + 8u;
                            _2929 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x));
                            uint _2932 = (_2886 * 40u) + 16u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2948 = (_2886 * 40u) + 20u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            uint _2964 = (_2886 * 40u) + 24u;
                            vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2983 = (_2886 * 40u) + 28u;
                            vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            _3008 = fma(_2223, _2996.z, fma(_2222, _2996.y, _2996.x * _2221)) + _2996.w;
                            _3009 = !((fma(_2223, _2977.z, fma(_2222, _2977.y, _2977.x * _2221)) + _2977.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3009)
                            {
                                float _3036 = _2901.x - _2221;
                                float _3037 = _2901.y - _2222;
                                float _3038 = _2901.z - _2223;
                                float _3039 = dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038));
                                float _3042 = inversesqrt(_3039);
                                float _3043 = _3042 * _3036;
                                float _3044 = _3042 * _3037;
                                float _3045 = _3042 * _3038;
                                float _3049 = 1.0 - (_3039 / (_2902 * _2902));
                                float _4134 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3054 = sqrt(_3039) * _2917.w;
                                float _3056 = 1.39999997615814208984375 / (_3054 + 1.39999997615814208984375);
                                float _3057 = _3056 * _3056;
                                float _3060 = ((1.0 - _3057) * dot(vec3(_3043, _3044, _3045), vec3(_423, _426, _429))) + _3057;
                                float _3063 = _3054 * _3054;
                                float _3067 = (fma(_2223, _2945.z, fma(_2222, _2945.y, _2945.x * _2221)) + _2945.w) / _3008;
                                float _3068 = (fma(_2223, _2961.z, fma(_2222, _2961.y, _2961.x * _2221)) + _2961.w) / _3008;
                                float _3072 = 1.0 - dot(vec2(_3067, _3068), vec2(_3067, _3068));
                                float _4150 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                                float _3074 = _3073 * (((isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))) * _3050) / ((_3063 * 0.699999988079071044921875) + 1.0));
                                float _3086 = exp2(log2(1.0 / ((_3063 * 3.5) + 5.0)) * 0.25);
                                float _3087 = 1.0 - _499;
                                float _3094 = sqrt(1.0 - ((1.0 - (_3087 * _3087)) * (1.0 - (_3086 * _3086))));
                                float _3095 = _3094 * _3094;
                                float _3096 = _3095 * _3095;
                                float _3097 = _3043 - _2513;
                                float _3098 = _3044 - _2514;
                                float _3099 = _3045 - _2515;
                                float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                                float _3107 = dot(vec3(_423, _426, _429), vec3((-0.0) - _2513, (-0.0) - _2514, (-0.0) - _2515));
                                float _4161 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3110 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                                float _3111 = dot(vec3(_423, _426, _429), vec3(_3103 * _3097, _3103 * _3098, _3103 * _3099));
                                float _4172 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3114 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3118 = ((_3114 * _3114) * (_3096 + (-1.0))) + 1.0;
                                float _3119 = _3056 * _3095;
                                float _3120 = _3119 * _3119;
                                float _3126 = ((1.0 - _3120) * dot(vec3(_423, _426, _429), vec3(_3043, _3044, _3045))) + _3120;
                                float _4183 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3127 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3128 = 1.0 - _3095;
                                float _3138 = (0.5 / (((_3127 * ((_3110 * _3128) + _3095)) + 9.9999999392252902907785028219223e-09) + (((_3127 * _3128) + _3095) * _3110))) * _3127;
                                float _4194 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3148 = (_3073 * _3050) * (((_3096 * 3.1415927410125732421875) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) / ((_3118 * _3118) * ((_3063 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3074 * _2917.z;
                                frontier_phi_85_pred_1 = _3074 * _2917.y;
                                frontier_phi_85_pred_2 = _3074 * _2917.x;
                                frontier_phi_85_pred_3 = _3148 * _2929.z;
                                frontier_phi_85_pred_4 = _3148 * _2929.y;
                                frontier_phi_85_pred_5 = _3148 * _2929.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3157 = frontier_phi_85_pred;
                            _3156 = frontier_phi_85_pred_1;
                            _3155 = frontier_phi_85_pred_2;
                            _3154 = frontier_phi_85_pred_3;
                            _3153 = frontier_phi_85_pred_4;
                            _3152 = frontier_phi_85_pred_5;
                            _2859 = _3155 + _2872;
                            _2860 = _3156 + _2873;
                            _2861 = _3157 + _2874;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            if (_2876 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2876;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2861;
                        frontier_phi_79_pred_1 = _2860;
                        frontier_phi_79_pred_2 = _2859;
                        frontier_phi_79_pred_3 = _2858;
                        frontier_phi_79_pred_4 = _2857;
                        frontier_phi_79_pred_5 = _2856;
                    }
                    _2498 = frontier_phi_79_pred;
                    _2496 = frontier_phi_79_pred_1;
                    _2494 = frontier_phi_79_pred_2;
                    _2492 = frontier_phi_79_pred_3;
                    _2490 = frontier_phi_79_pred_4;
                    _2488 = frontier_phi_79_pred_5;
                    uint _2654 = _2653 + 1u;
                    if (_2654 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2647 = _2488;
                        _2648 = _2490;
                        _2649 = _2492;
                        _2650 = _2494;
                        _2651 = _2496;
                        _2652 = _2498;
                        _2653 = _2654;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2494;
                frontier_phi_60_61_ladder_1 = _2498;
                frontier_phi_60_61_ladder_2 = _2496;
                frontier_phi_60_61_ladder_3 = _2492;
                frontier_phi_60_61_ladder_4 = _2490;
                frontier_phi_60_61_ladder_5 = _2488;
            }
            else
            {
                frontier_phi_60_61_ladder = _2373;
                frontier_phi_60_61_ladder_1 = _2377;
                frontier_phi_60_61_ladder_2 = _2375;
                frontier_phi_60_61_ladder_3 = _2371;
                frontier_phi_60_61_ladder_4 = _2369;
                frontier_phi_60_61_ladder_5 = _2367;
            }
            _2487 = frontier_phi_60_61_ladder_5;
            _2489 = frontier_phi_60_61_ladder_4;
            _2491 = frontier_phi_60_61_ladder_3;
            _2493 = frontier_phi_60_61_ladder;
            _2495 = frontier_phi_60_61_ladder_2;
            _2497 = frontier_phi_60_61_ladder_1;
        }
        float _2502 = isnan(1.0) ? _483 : (isnan(_483) ? 1.0 : min(_483, 1.0));
        _2279 = (_2502 * _2493) + _1713;
        _2281 = (_2502 * _2495) + _1715;
        _2283 = (_2502 * _2497) + _1717;
        _2285 = ((_2487 * _468) * _2502) + _2061;
        _2287 = ((_2489 * _470) * _2502) + _2063;
        _2289 = ((_2491 * _471) * _2502) + _2065;
    }
    else
    {
        _2279 = _1713;
        _2281 = _1715;
        _2283 = _1717;
        _2285 = _2061;
        _2287 = _2063;
        _2289 = _2065;
    }
    float _4210 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4221 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4232 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _2306 = ((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2279 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _483))) + ((_2285 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1325)) * cbPerFrame._m0[3u].x);
    float _2307 = ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2281 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _483))) + ((_2287 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1325)) * cbPerFrame._m0[3u].x);
    float _2308 = ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2283 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _483))) + ((_2289 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1325)) * cbPerFrame._m0[3u].x);
    uint _2309 = _442 + 6u;
    float _2317 = _402 / cbSceneParam._m0[86u].x;
    float _2318 = _403 / cbSceneParam._m0[86u].y;
    vec4 _2332 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2317, _2318, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2334 = _2332.x;
    float _2335 = _2332.y;
    float _2336 = _2332.z;
    float _2337 = _2332.w;
    float _2429;
    float _2431;
    float _2433;
    float _2435;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _2392 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _2393 = _2392 / _323;
        float _2404 = _2393 * _374;
        float _2405 = _375 * _2393;
        float _2406 = (-0.0) - _2405;
        float _2407 = _2393 * _376;
        float _2409 = (cbSceneParam._m0[77u].w * _2406) / _2392;
        float _2410 = _2409 + cbSceneParam._m0[79u].w;
        float _2411 = cbSceneParam._m0[79u].w - _2405;
        float _2417 = sqrt(((_2404 * _2404) + (_2405 * _2405)) + (_2407 * _2407));
        float _2420 = (1.0 - (cbSceneParam._m0[77u].w / _2392)) * _2417;
        float _2425 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2427 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2604;
        if (abs((_2406 - _2409) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2604 = ((((_2410 > 0.0) ? exp2(_2425 * _2410) : (2.0 - exp2(_2427 * _2410))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2420;
        }
        else
        {
            float _2548 = 1.0 / cbSceneParam._m0[80u].x;
            float _2549 = isnan(_2411) ? _2410 : (isnan(_2410) ? _2411 : max(_2410, _2411));
            float _2550 = isnan(_2411) ? _2410 : (isnan(_2410) ? _2411 : min(_2410, _2411));
            float _2559 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : min(_2549, 0.0));
            float _2560 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : min(_2550, 0.0));
            _2604 = ((abs(_2417 / _2406) * cbSceneParam._m0[80u].y) * ((((_2559 - _2560) * 2.0) - ((exp2(_2425 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0)))) - exp2(_2425 * (isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0))))) * _2548)) - ((exp2(_2427 * _2559) - exp2(_2427 * _2560)) * _2548))) + (_2420 * cbSceneParam._m0[80u].z);
        }
        vec4 _2606 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2317, _2318, 1.0), 0.0);
        float _2615 = exp2((_2604 * (-1.44269502162933349609375)) * (1.0 - _2606.w));
        float _2616 = log2(_2615);
        float _2632 = log2(_2337);
        _2429 = (exp2(_2632 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2616 * cbSceneParam._m0[78u].x)) * _2606.x) / cbSceneParam._m0[78u].x)) + _2334;
        _2431 = (exp2(_2632 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2616 * cbSceneParam._m0[78u].y)) * _2606.y) / cbSceneParam._m0[78u].y)) + _2335;
        _2433 = (exp2(_2632 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2616 * cbSceneParam._m0[78u].z)) * _2606.z) / cbSceneParam._m0[78u].z)) + _2336;
        _2435 = _2615 * _2337;
    }
    else
    {
        _2429 = _2334;
        _2431 = _2335;
        _2433 = _2336;
        _2435 = _2337;
    }
    bool _2642;
    vec4 _2445;
    vec4 _2467;
    float _2469;
    float _2473;
    float _2474;
    float _2475;
    float _2476;
    bool _2486;
    for (;;)
    {
        _2445 = cbMatDynParam._m0[0u];
        float _2447 = roundEven(_2445.y);
        bool _2448 = _2447 == 3.0;
        float _2449 = log2(_2435);
        float _2456 = exp2(_2449 * cbSceneParam._m0[78u].x) * _2306;
        float _2457 = exp2(_2449 * cbSceneParam._m0[78u].y) * _2307;
        float _2458 = exp2(_2449 * cbSceneParam._m0[78u].z) * _2308;
        float _2465 = _390 + (-0.5);
        _2467 = cbMtdParam._m0[1u];
        _2469 = _2467.y * _2465;
        float _2472 = (_2447 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2473 = _2472 * (_2448 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2429)));
        _2474 = _2472 * (_2448 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2431)));
        _2475 = _2472 * (_2448 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2433)));
        _2476 = _2465 * 0.999000012874603271484375;
        _2486 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2486)
        {
            if ((cbInstanceData._m0[_442 + 7u].x + _2476) < 0.5)
            {
                _2642 = true;
                break;
            }
        }
        uint _2583 = _444 + uint(_2445.w);
        if ((cbInstanceData._m0[_2583].w < 1.0) && ((cbInstanceData._m0[_2583].w + _2476) < 0.5))
        {
            _2642 = true;
            break;
        }
        if ((_2469 + 1.0) < _2467.x)
        {
            _2642 = true;
            break;
        }
        _2642 = false;
        break;
    }
    float _2847;
    if (_2642)
    {
        discard_state = true;
        _2847 = 0.0;
    }
    else
    {
        _2847 = cbInstanceData._m0[_2309].w;
    }
    SV_Target.x = _2473;
    SV_Target.y = _2474;
    SV_Target.z = _2475;
    SV_Target.w = _2847;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2309].w;
    discard_exit();
}


