#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Scroll_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _906;
float _3579;
float _3580;
float _3581;
float _3582;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    float _238 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _239 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _252 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_238 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_239 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _258 = _252.x * cbMtdParam._m0[9u].x;
    float _259 = _252.y * cbMtdParam._m0[9u].y;
    float _260 = _252.z * cbMtdParam._m0[9u].z;
    vec4 _272 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _238) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _239) + cbTextureTilingScale._m0[2u].w));
    float _276 = cbMtdParam._m0[10u].x + _272.x;
    vec4 _288 = texture(sampler2D(M_AMSN_M1_Scroll_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _238) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _239) + cbTextureTilingScale._m0[1u].w));
    float _292 = _288.z;
    float _296 = (_288.x * 2.0) + (-1.0);
    float _298 = (_288.y * 2.0) + (-1.0);
    float _299 = dot(vec2(_296, _298), vec2(_296, _298));
    float _3591 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _305 = sqrt(1.0 - (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))));
    float _308 = fma(_305, _222, fma(_298, _214 * TANGENT.x, (_200 * _193) * _296));
    float _311 = fma(_305, _223, fma(_298, _214 * TANGENT.y, (_200 * _194) * _296));
    float _314 = fma(_305, _224, fma(_298, _214 * TANGENT.z, (_200 * _195) * _296));
    float _318 = inversesqrt(dot(vec3(_308, _311, _314), vec3(_308, _311, _314)));
    float _319 = _318 * _308;
    float _320 = _318 * _311;
    float _321 = _318 * _314;
    float _3602 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _322 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _3613 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3624 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3635 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3646 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _326 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _342 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _383 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _393 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _383);
    float _394 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _383);
    float _395 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _383);
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _393 * _399;
    float _401 = _394 * _399;
    float _402 = _395 * _399;
    vec4 _407 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _409 = _407.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _585 = sqrt(((_393 * _393) + (_394 * _394)) + (_395 * _395));
        float _591 = (cbMatDynParam._m0[5u].x * _585) + cbMatDynParam._m0[5u].y;
        float _3657 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _592 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _596 = (cbMatDynParam._m0[5u].z * _585) + cbMatDynParam._m0[5u].w;
        float _3668 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) - _592)) + _592) < ((_409 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _421 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _422 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _442 = fma(_321, cbSceneParam._m0[5u].z, fma(_320, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _319));
    float _445 = fma(_321, cbSceneParam._m0[6u].z, fma(_320, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _319));
    float _448 = fma(_321, cbSceneParam._m0[7u].z, fma(_320, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _319));
    uint _461 = uint(roundEven(NORMAL.w)) * 13u;
    uint _463 = _461 + 9u;
    uint _464 = _463 + uint(cbMatDynParam._m0[0u].w);
    float _470 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_464].x;
    float _471 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * cbInstanceData._m0[_464].y;
    float _472 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) * cbInstanceData._m0[_464].z;
    float _3679 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _476 = 1.0 - _326;
    float _477 = _473 * _476;
    float _478 = _474 * _476;
    float _479 = _475 * _476;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _326;
    float _485 = (_474 + (-0.039999999105930328369140625)) * _326;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _326;
    float _487 = _484 + 0.039999999105930328369140625;
    float _489 = _485 + 0.039999999105930328369140625;
    float _490 = _486 + 0.039999999105930328369140625;
    vec4 _499 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _421, cbSceneParam._m0[86u].y * _422));
    float _502 = _499.x * TEXCOORD.z;
    float _503 = dot(vec3(_319, _320, _321), vec3(_400, _401, _402));
    float _506 = _503 * 2.0;
    float _510 = (_506 * _319) - _400;
    float _511 = (_506 * _320) - _401;
    float _512 = (_506 * _321) - _402;
    float _516 = abs(dot(vec3(_400, _401, _402), vec3(_319, _320, _321)));
    float _3712 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _518 = sqrt(_322);
    float _531 = exp2((_518 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_518 * 3.0));
    float _537 = (1.0 - _531) * ((_518 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _538 = _531 * _518;
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _905;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _630 = fma(_574, cbModelParam._m0[26u].z, fma(_570, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _566));
        float _634 = fma(_574, cbModelParam._m0[27u].z, fma(_570, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _566));
        float _638 = fma(_574, cbModelParam._m0[28u].z, fma(_570, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _566));
        float _663 = _566 + _319;
        float _664 = _570 + _320;
        float _665 = _574 + _321;
        float _675 = fma(_665, cbModelParam._m0[26u].z, fma(_664, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _663)) - _630;
        float _676 = fma(_665, cbModelParam._m0[27u].z, fma(_664, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _663)) - _634;
        float _677 = fma(_665, cbModelParam._m0[28u].z, fma(_664, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _663)) - _638;
        float _681 = inversesqrt(dot(vec3(_675, _676, _677), vec3(_675, _676, _677)));
        float _694 = ((_681 * _675) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_630 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _695 = ((_681 * _676) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_634 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_681 * _677) / cbModelParam._m0[34u].z) + ((((((_638 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        float _733 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_699.x + (-0.5));
        float _735 = _733 * (_699.y + (-0.5));
        float _736 = _733 * (_699.z + (-0.5));
        float _743 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_706.x + (-0.5));
        float _745 = _743 * (_706.y + (-0.5));
        float _746 = _743 * (_706.z + (-0.5));
        float _753 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_713.x + (-0.5));
        float _755 = _753 * (_713.y + (-0.5));
        float _756 = _753 * (_713.z + (-0.5));
        float _763 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_720.x + (-0.5));
        float _765 = _763 * (_720.y + (-0.5));
        float _766 = _763 * (_720.z + (-0.5));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = _734 * 0.5;
        float _771 = _744 * 0.5;
        float _772 = _754 * 0.5;
        float _773 = dot(vec3(_770, _771, _772), vec3(_770, _771, _772));
        float _778 = (_773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_773);
        float _787 = (dot(vec3(_319, _320, _321), vec3(_778 * _770, _778 * _771, _778 * _772)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _797 = sqrt(((_771 * _771) + (_770 * _770)) + (_772 * _772)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3760 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_799 + 1.0))) + _804) * _767;
        float _814 = _735 * 0.5;
        float _815 = _745 * 0.5;
        float _816 = _755 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _830 = (dot(vec3(_319, _320, _321), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _839 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3793 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_841 + 1.0))) + _846) * _768;
        float _856 = _736 * 0.5;
        float _857 = _746 * 0.5;
        float _858 = _756 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _872 = (dot(vec3(_319, _320, _321), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _881 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3826 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_883 + 1.0))) + _888) * _769;
        _905 = _736;
        _907 = _735;
        _908 = _734;
        _909 = _746;
        _910 = _745;
        _911 = _744;
        _912 = _756;
        _913 = _755;
        _914 = _754;
        _915 = _769;
        _916 = _768;
        _917 = _767;
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
    }
    else
    {
        _905 = _906;
        _907 = _906;
        _908 = _906;
        _909 = _906;
        _910 = _906;
        _911 = _906;
        _912 = _906;
        _913 = _906;
        _914 = _906;
        _915 = _906;
        _916 = _906;
        _917 = _906;
        _918 = 0.0;
        _919 = 0.0;
        _920 = 0.0;
    }
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _949 = fma(_574, cbModelParam._m0[30u].z, fma(_570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _566));
        float _953 = fma(_574, cbModelParam._m0[31u].z, fma(_570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _566));
        float _957 = fma(_574, cbModelParam._m0[32u].z, fma(_570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _566));
        float _980 = _566 + _319;
        float _981 = _570 + _320;
        float _982 = _574 + _321;
        float _992 = fma(_982, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980)) - _949;
        float _993 = fma(_982, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980)) - _953;
        float _994 = fma(_982, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980)) - _957;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_949 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_953 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[35u].z) + ((((((_957 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1048 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1015.x + (-0.5));
        float _1050 = _1048 * (_1015.y + (-0.5));
        float _1051 = _1048 * (_1015.z + (-0.5));
        float _1058 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1022.x + (-0.5));
        float _1060 = _1058 * (_1022.y + (-0.5));
        float _1061 = _1058 * (_1022.z + (-0.5));
        float _1068 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1029.x + (-0.5));
        float _1070 = _1068 * (_1029.y + (-0.5));
        float _1071 = _1068 * (_1029.z + (-0.5));
        float _1078 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1036.x + (-0.5));
        float _1080 = _1078 * (_1036.y + (-0.5));
        float _1081 = _1078 * (_1036.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_319, _320, _321), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3889 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1112 + 1.0))) + _1117) * _1082;
        float _1127 = _1050 * 0.5;
        float _1128 = _1060 * 0.5;
        float _1129 = _1070 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_319, _320, _321), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3922 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1154 + 1.0))) + _1159) * _1083;
        float _1169 = _1051 * 0.5;
        float _1170 = _1061 * 0.5;
        float _1171 = _1071 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_319, _320, _321), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3955 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1196 + 1.0))) + _1201) * _1084;
        _1218 = _1051;
        _1219 = _1050;
        _1220 = _1049;
        _1221 = _1061;
        _1222 = _1060;
        _1223 = _1059;
        _1224 = _1071;
        _1225 = _1070;
        _1226 = _1069;
        _1227 = _1084;
        _1228 = _1083;
        _1229 = _1082;
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _906;
        _1219 = _906;
        _1220 = _906;
        _1221 = _906;
        _1222 = _906;
        _1223 = _906;
        _1224 = _906;
        _1225 = _906;
        _1226 = _906;
        _1227 = _906;
        _1228 = _906;
        _1229 = _906;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _918)) + _918;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _919)) + _919;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _920)) + _920;
    float _1265 = fma(_1244, cbSceneParam._m0[89u].z, fma(_1243, cbSceneParam._m0[89u].y, _1242 * cbSceneParam._m0[89u].x));
    float _1268 = fma(_1244, cbSceneParam._m0[90u].z, fma(_1243, cbSceneParam._m0[90u].y, _1242 * cbSceneParam._m0[90u].x));
    float _1271 = fma(_1244, cbSceneParam._m0[91u].z, fma(_1243, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1242));
    float _1286 = _510 * 0.5;
    float _1287 = _511 * 0.5;
    float _1288 = _512 * 0.5;
    float _1289 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1292 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1295 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1329;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1302 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_905, _909, _912, _915));
        float _1306 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_907, _910, _913, _916));
        float _1310 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_908, _911, _914, _917));
        float _1317 = dot(vec4(cbModelParam._m0[39u]), vec4(_1286, _1287, _1288, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1317) ? 0.0 : (isnan(0.0) ? _1317 : max(0.0, _1317))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1340;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1331 = dot(vec4(cbModelParam._m0[40u]), vec4(_1286, _1287, _1288, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1344 = (_1340 * cbModelParam._m0[1u].x) + (_1329 * (1.0 - cbModelParam._m0[1u].x));
    float _1354 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _322);
    float _1355 = isnan(_1354) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1354 : min(cbModelParam._m0[25u].z, _1354));
    float _1437;
    float _1439;
    float _1441;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1404 = fma(_574, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566)) + cbModelParam._m0[13u].w;
        float _1408 = fma(_574, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566)) + cbModelParam._m0[14u].w;
        float _1412 = fma(_574, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566)) + cbModelParam._m0[15u].w;
        float _1415 = fma(_512, cbModelParam._m0[13u].z, fma(_511, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _510));
        float _1418 = fma(_512, cbModelParam._m0[14u].z, fma(_511, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _510));
        float _1421 = fma(_512, cbModelParam._m0[15u].z, fma(_511, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _510));
        float _1449;
        if (_1415 > 0.0)
        {
            _1449 = abs((1.0 - _1404) / _1415);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1404 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1449 = frontier_phi_19_17_ladder;
        }
        float _1624;
        if (_1418 > 0.0)
        {
            _1624 = abs((1.0 - _1408) / _1418);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1408 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1624 = frontier_phi_28_24_ladder;
        }
        float _1920;
        if (_1421 > 0.0)
        {
            _1920 = abs((1.0 - _1412) / _1421);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1412 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1920 = frontier_phi_40_35_ladder;
        }
        float _1922 = isnan(_1624) ? _1449 : (isnan(_1449) ? _1624 : min(_1449, _1624));
        float _1923 = isnan(_1920) ? _1922 : (isnan(_1922) ? _1920 : min(_1922, _1920));
        float _1927 = (_1923 * _1415) + _1404;
        float _1928 = (_1923 * _1418) + _1408;
        float _1929 = (_1923 * _1421) + _1412;
        float _1930 = _1923 * 9.9999997473787516355514526367188e-05;
        float _1932 = (-1.0) - _1930;
        float _1934 = _1930 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1929 > _1934) || ((_1929 < _1932) || ((_1928 > _1934) || ((_1928 < _1932) || ((_1927 < _1932) || (_1927 > _1934))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1929, cbModelParam._m0[9u].z, fma(_1928, cbModelParam._m0[9u].y, _1927 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1929, cbModelParam._m0[10u].z, fma(_1928, cbModelParam._m0[10u].y, _1927 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1929, cbModelParam._m0[11u].z, fma(_1928, cbModelParam._m0[11u].y, _1927 * cbModelParam._m0[11u].x))), _1355);
            frontier_phi_18_40_ladder = _2074.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2074.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2074.x * cbModelParam._m0[1u].y;
        }
        _1437 = frontier_phi_18_40_ladder_2;
        _1439 = frontier_phi_18_40_ladder_1;
        _1441 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_510, _511, _512), _1355);
        _1437 = _1425.x * cbModelParam._m0[1u].y;
        _1439 = _1425.y * cbModelParam._m0[1u].y;
        _1441 = _1425.z * cbModelParam._m0[1u].y;
    }
    float _1445 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _322);
    float _1446 = isnan(_1445) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1445 : min(cbModelParam._m0[25u].w, _1445));
    float _1538;
    float _1540;
    float _1542;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1502 = fma(_574, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566)) + cbModelParam._m0[21u].w;
        float _1506 = fma(_574, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566)) + cbModelParam._m0[22u].w;
        float _1510 = fma(_574, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566)) + cbModelParam._m0[23u].w;
        float _1513 = fma(_512, cbModelParam._m0[21u].z, fma(_511, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _510));
        float _1516 = fma(_512, cbModelParam._m0[22u].z, fma(_511, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _510));
        float _1519 = fma(_512, cbModelParam._m0[23u].z, fma(_511, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _510));
        float _1629;
        if (_1513 > 0.0)
        {
            _1629 = abs((1.0 - _1502) / _1513);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1502 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1629 = frontier_phi_30_26_ladder;
        }
        float _1947;
        if (_1516 > 0.0)
        {
            _1947 = abs((1.0 - _1506) / _1516);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1506 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1947 = frontier_phi_42_37_ladder;
        }
        float _2285;
        if (_1519 > 0.0)
        {
            _2285 = abs((1.0 - _1510) / _1519);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1510 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2285 = frontier_phi_52_49_ladder;
        }
        float _2287 = isnan(_1947) ? _1629 : (isnan(_1629) ? _1947 : min(_1629, _1947));
        float _2288 = isnan(_2285) ? _2287 : (isnan(_2287) ? _2285 : min(_2287, _2285));
        float _2292 = (_2288 * _1513) + _1502;
        float _2293 = (_2288 * _1516) + _1506;
        float _2294 = (_2288 * _1519) + _1510;
        float _2295 = _2288 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2295;
        float _2298 = _2295 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2294 > _2298) || ((_2294 < _2296) || ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 < _2296) || (_2292 > _2298))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2416 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2294, cbModelParam._m0[17u].z, fma(_2293, cbModelParam._m0[17u].y, _2292 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2294, cbModelParam._m0[18u].z, fma(_2293, cbModelParam._m0[18u].y, _2292 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2294, cbModelParam._m0[19u].z, fma(_2293, cbModelParam._m0[19u].y, _2292 * cbModelParam._m0[19u].x))), _1446);
            frontier_phi_27_52_ladder = _2416.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2416.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2416.x * cbModelParam._m0[1u].z;
        }
        _1538 = frontier_phi_27_52_ladder_2;
        _1540 = frontier_phi_27_52_ladder_1;
        _1542 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1522 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_510, _511, _512), _1446);
        _1538 = _1522.x * cbModelParam._m0[1u].z;
        _1540 = _1522.y * cbModelParam._m0[1u].z;
        _1542 = _1522.z * cbModelParam._m0[1u].z;
    }
    float _1555 = (((_537 * _487) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1538 - _1437)) + _1437);
    float _1557 = (((_537 * _489) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1540 - _1439)) + _1439);
    float _1559 = (((_537 * _490) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1542 - _1441)) + _1441);
    float _1562 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1557, cbSceneParam._m0[89u].y, _1555 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1557, cbSceneParam._m0[90u].y, _1555 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1557, cbSceneParam._m0[91u].y, _1555 * cbSceneParam._m0[91u].x));
    float _1603 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1607 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1611 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1615 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1616 = _1603 / _1615;
    float _1617 = _1607 / _1615;
    float _1618 = _1611 / _1615;
    float _1765;
    float _1766;
    float _1767;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1645 = ((uint(_1618 > cbSceneParam._m0[59u].y) + uint(_1618 > cbSceneParam._m0[59u].x)) + uint(_1618 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1646 = _1645 + 43u;
        uint _1654 = _1645 + 44u;
        uint _1662 = _1645 + 45u;
        uint _1670 = _1645 + 46u;
        float _1681 = fma(_1615, cbSceneParam._m0[_1646].w, fma(_1611, cbSceneParam._m0[_1646].z, fma(_1607, cbSceneParam._m0[_1646].y, _1603 * cbSceneParam._m0[_1646].x)));
        float _1685 = fma(_1615, cbSceneParam._m0[_1654].w, fma(_1611, cbSceneParam._m0[_1654].z, fma(_1607, cbSceneParam._m0[_1654].y, _1603 * cbSceneParam._m0[_1654].x)));
        float _1693 = fma(_1615, cbSceneParam._m0[_1670].w, fma(_1611, cbSceneParam._m0[_1670].z, fma(_1607, cbSceneParam._m0[_1670].y, _1603 * cbSceneParam._m0[_1670].x)));
        float _1698 = cbSceneParam._m0[33u].z * _1693;
        float _1700 = cbSceneParam._m0[33u].w * _1693;
        float _1703 = fma(_1615, cbSceneParam._m0[_1662].w, fma(_1611, cbSceneParam._m0[_1662].z, fma(_1607, cbSceneParam._m0[_1662].y, _1603 * cbSceneParam._m0[_1662].x))) / _1693;
        float _1751 = (cbSceneParam._m0[33u].x - sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618))) * cbSceneParam._m0[33u].y;
        float _4081 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1758 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1698 + _1681) / _1693, (_1700 + _1685) / _1693), _1703), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1700 + _1681) / _1693, (_1685 - _1698) / _1693), _1703), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1681 - _1698) / _1693, (_1685 - _1700) / _1693), _1703), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1681 - _1700) / _1693, (_1698 + _1685) / _1693), _1703), 0.0)).x), vec4(0.25)));
        _1765 = 1.0 - (_1758 * cbSceneParam._m0[34u].x);
        _1766 = 1.0 - (_1758 * cbSceneParam._m0[34u].y);
        _1767 = 1.0 - (_1758 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1765 = 1.0;
        _1766 = 1.0;
        _1767 = 1.0;
    }
    float _1831;
    float _1833;
    float _1835;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1819 = fma(_1615, cbSceneParam._m0[63u].w, fma(_1611, cbSceneParam._m0[63u].z, fma(_1607, cbSceneParam._m0[63u].y, _1603 * cbSceneParam._m0[63u].x)));
        float _1820 = fma(_1615, cbSceneParam._m0[60u].w, fma(_1611, cbSceneParam._m0[60u].z, fma(_1607, cbSceneParam._m0[60u].y, _1603 * cbSceneParam._m0[60u].x))) / _1819;
        float _1821 = fma(_1615, cbSceneParam._m0[61u].w, fma(_1611, cbSceneParam._m0[61u].z, fma(_1607, cbSceneParam._m0[61u].y, _1603 * cbSceneParam._m0[61u].x))) / _1819;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1820 >= cbSceneParam._m0[64u].x) && (_1821 >= cbSceneParam._m0[64u].y)) && (_1820 <= cbSceneParam._m0[64u].z)) && (_1821 <= cbSceneParam._m0[64u].w))
        {
            float _1960 = fma(_1615, cbSceneParam._m0[62u].w, fma(_1611, cbSceneParam._m0[62u].z, fma(_1607, cbSceneParam._m0[62u].y, _1603 * cbSceneParam._m0[62u].x))) / _1819;
            float _1964 = isnan(cbSceneParam._m0[41u].w) ? _1960 : (isnan(_1960) ? cbSceneParam._m0[41u].w : max(_1960, cbSceneParam._m0[41u].w));
            float _2007 = (cbSceneParam._m0[33u].x - sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618))) * cbSceneParam._m0[33u].y;
            float _4097 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
            float _2014 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1820, cbSceneParam._m0[33u].w + _1821), _1964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1820, _1821 - cbSceneParam._m0[33u].z), _1964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1820 - cbSceneParam._m0[33u].z, _1821 - cbSceneParam._m0[33u].w), _1964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1820 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1821), _1964), 0.0)).x), vec4(0.25)));
            float _2018 = 1.0 - (_2014 * cbSceneParam._m0[34u].x);
            float _2019 = 1.0 - (_2014 * cbSceneParam._m0[34u].y);
            float _2020 = 1.0 - (_2014 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2019) ? _1766 : (isnan(_1766) ? _2019 : min(_1766, _2019));
            frontier_phi_39_38_ladder_1 = isnan(_2018) ? _1765 : (isnan(_1765) ? _2018 : min(_1765, _2018));
            frontier_phi_39_38_ladder_2 = isnan(_2020) ? _1767 : (isnan(_1767) ? _2020 : min(_1767, _2020));
        }
        else
        {
            frontier_phi_39_38_ladder = _1766;
            frontier_phi_39_38_ladder_1 = _1765;
            frontier_phi_39_38_ladder_2 = _1767;
        }
        _1831 = frontier_phi_39_38_ladder_1;
        _1833 = frontier_phi_39_38_ladder;
        _1835 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1831 = _1765;
        _1833 = _1766;
        _1835 = _1767;
    }
    uvec4 _1840 = floatBitsToUint(cbInstanceData._m0[_461 + 5u]);
    uint _1842 = _1840.x * 14u;
    uint _1843 = _1842 + 13u;
    float _1850 = _502 + (-1.0);
    float _1855 = (cbLight._m0[_1843].x * _1850) + 1.0;
    float _1856 = (cbLight._m0[_1843].y * _1850) + 1.0;
    float _1857 = (cbLight._m0[_1843].z * _1850) + 1.0;
    float _1858 = (cbLight._m0[_1843].w * _1850) + 1.0;
    uint _1859 = _1842 + 5u;
    float _1865 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
    uint _1869 = _1842 + 4u;
    float _1879 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
    uint _1883 = _1842 | 1u;
    float _1894 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_319, _320, _321));
    float _1897 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_319, _320, _321));
    float _4133 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _4144 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1902 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * 0.3183098733425140380859375;
    float _1904 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * 0.3183098733425140380859375;
    float _1911 = ((cbLight._m0[_1859].x * _1865) * _1904) + (((cbLight._m0[_1869].x * _1831) * _1879) * _1902);
    float _1912 = ((_1865 * cbLight._m0[_1859].y) * _1904) + (((cbLight._m0[_1869].y * _1833) * _1879) * _1902);
    float _1913 = ((_1865 * cbLight._m0[_1859].z) * _1904) + (((cbLight._m0[_1869].z * _1835) * _1879) * _1902);
    uvec4 _1917 = floatBitsToUint(cbLight._m0[_1842 + 12u]);
    bool _1919 = _1917.x == 0u;
    float _2021;
    float _2023;
    float _2025;
    if (_1919)
    {
        _2021 = _1911;
        _2023 = _1912;
        _2025 = _1913;
    }
    else
    {
        uint _2029 = _1842 + 6u;
        float _2045 = (dot(vec3(cbLight._m0[_1842 + 2u].xyz), vec3(_319, _320, _321)) * 0.5) + 0.5;
        float _2046 = _2045 * _2045;
        float _4155 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2047 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2048 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2021 = (((cbLight._m0[_2029].x * 0.3183098733425140380859375) * _2047) * _2048) + _1911;
        _2023 = (((cbLight._m0[_2029].y * 0.3183098733425140380859375) * _2047) * _2048) + _1912;
        _2025 = (((cbLight._m0[_2029].z * 0.3183098733425140380859375) * _2047) * _2048) + _1913;
    }
    bool _2028 = _1917.y == 0u;
    float _2083;
    float _2085;
    float _2087;
    if (_2028)
    {
        _2083 = _2021;
        _2085 = _2023;
        _2087 = _2025;
    }
    else
    {
        uint _2256 = _1842 + 7u;
        float _2272 = (dot(vec3(cbLight._m0[_1842 + 3u].xyz), vec3(_319, _320, _321)) * 0.5) + 0.5;
        float _2273 = _2272 * _2272;
        float _4171 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2274 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2275 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2083 = (((cbLight._m0[_2256].x * 0.3183098733425140380859375) * _2274) * _2275) + _2021;
        _2085 = (((cbLight._m0[_2256].y * 0.3183098733425140380859375) * _2274) * _2275) + _2023;
        _2087 = (((cbLight._m0[_2256].z * 0.3183098733425140380859375) * _2274) * _2275) + _2025;
    }
    uint _2090 = _1842 + 8u;
    float _2103 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1842].w)) * _322) * 0.949999988079071044921875);
    float _2104 = _2103 * _2103;
    float _2105 = cbLight._m0[_1842].x + _400;
    float _2106 = cbLight._m0[_1842].y + _401;
    float _2107 = cbLight._m0[_1842].z + _402;
    float _2111 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
    float _2112 = _2111 * _2105;
    float _2113 = _2111 * _2106;
    float _2114 = _2111 * _2107;
    float _2115 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1842].xyz));
    float _4187 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _4198 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _2119 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2120 = dot(vec3(_319, _320, _321), vec3(_2112, _2113, _2114));
    float _4209 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _2124 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_2112, _2113, _2114));
    float _4220 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2128 = _2104 * _2104;
    float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
    float _2140 = exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0);
    float _2141 = 0.959999978542327880859375 - _484;
    float _2143 = 0.959999978542327880859375 - _485;
    float _2144 = 0.959999978542327880859375 - _486;
    float _2151 = 1.0 - _2104;
    float _2162 = (0.5 / (((_2119 * ((_2118 * _2151) + _2104)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2151) + _2104) * _2118))) * _2118;
    float _4231 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2164 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
    uint _2178 = _1842 + 9u;
    float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _322) * 0.949999988079071044921875);
    float _2190 = _2189 * _2189;
    float _2191 = cbLight._m0[_1883].x + _400;
    float _2192 = cbLight._m0[_1883].y + _401;
    float _2193 = cbLight._m0[_1883].z + _402;
    float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
    float _2198 = _2197 * _2191;
    float _2199 = _2197 * _2192;
    float _2200 = _2197 * _2193;
    float _2201 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1883].xyz));
    float _4242 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _2205 = dot(vec3(_319, _320, _321), vec3(_2198, _2199, _2200));
    float _4253 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2209 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_2198, _2199, _2200));
    float _4264 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2213 = _2190 * _2190;
    float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
    float _2224 = exp2(log2(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * 5.0);
    float _2231 = 1.0 - _2190;
    float _2241 = (0.5 / (((_2119 * ((_2204 * _2231) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2231) + _2190) * _2204))) * _2204;
    float _4275 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2243 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
    float _2253 = (((((_2224 * _2141) + _487) * cbLight._m0[_2178].x) * _2243) * _1865) + ((((cbLight._m0[_2090].x * _1831) * ((_2140 * _2141) + _487)) * _2164) * _1879);
    float _2254 = (((((_2224 * _2143) + _489) * cbLight._m0[_2178].y) * _2243) * _1865) + ((((cbLight._m0[_2090].y * _1833) * ((_2140 * _2143) + _489)) * _2164) * _1879);
    float _2255 = (((((_2224 * _2144) + _490) * cbLight._m0[_2178].z) * _2243) * _1865) + ((((cbLight._m0[_2090].z * _1835) * ((_2140 * _2144) + _490)) * _2164) * _1879);
    float _2311;
    float _2313;
    float _2315;
    if (_1919)
    {
        _2311 = _2253;
        _2313 = _2254;
        _2315 = _2255;
    }
    else
    {
        uint _2317 = _1842 + 2u;
        uint _2321 = _1842 + 10u;
        float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2317].w)) * _322) * 0.949999988079071044921875);
        float _2336 = _2335 * _2335;
        float _2337 = cbLight._m0[_2317].x + _400;
        float _2338 = cbLight._m0[_2317].y + _401;
        float _2339 = cbLight._m0[_2317].z + _402;
        float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
        float _2344 = _2343 * _2337;
        float _2345 = _2343 * _2338;
        float _2346 = _2343 * _2339;
        float _2347 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_2317].xyz));
        float _4286 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2351 = dot(vec3(_319, _320, _321), vec3(_2344, _2345, _2346));
        float _4297 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2355 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_2344, _2345, _2346));
        float _4308 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2359 = _2336 * _2336;
        float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
        float _2370 = exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0);
        float _2377 = 1.0 - _2336;
        float _2387 = (0.5 / (((_2119 * ((_2350 * _2377) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2377) + _2336) * _2350))) * _2350;
        float _4319 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2389 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
        float _2390 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2311 = (((((_2370 * _2141) + _487) * cbLight._m0[_2321].x) * _2389) * _2390) + _2253;
        _2313 = (((((_2370 * _2143) + _489) * cbLight._m0[_2321].y) * _2389) * _2390) + _2254;
        _2315 = (((((_2370 * _2144) + _490) * cbLight._m0[_2321].z) * _2389) * _2390) + _2255;
    }
    float _2421;
    float _2423;
    float _2425;
    if (_2028)
    {
        _2421 = _2311;
        _2423 = _2313;
        _2425 = _2315;
    }
    else
    {
        uint _2432 = _1842 + 3u;
        uint _2436 = _1842 + 11u;
        float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _322) * 0.949999988079071044921875);
        float _2451 = _2450 * _2450;
        float _2452 = cbLight._m0[_2432].x + _400;
        float _2453 = cbLight._m0[_2432].y + _401;
        float _2454 = cbLight._m0[_2432].z + _402;
        float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
        float _2459 = _2458 * _2452;
        float _2460 = _2458 * _2453;
        float _2461 = _2458 * _2454;
        float _2462 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_2432].xyz));
        float _4335 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2466 = dot(vec3(_319, _320, _321), vec3(_2459, _2460, _2461));
        float _4346 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2470 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2459, _2460, _2461));
        float _4357 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2474 = _2451 * _2451;
        float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
        float _2485 = exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0);
        float _2492 = 1.0 - _2451;
        float _2502 = (0.5 / (((_2119 * ((_2465 * _2492) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2492) + _2451) * _2465))) * _2465;
        float _4368 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2504 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
        float _2505 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2421 = (((((_2485 * _2141) + _487) * cbLight._m0[_2436].x) * _2504) * _2505) + _2311;
        _2423 = (((((_2485 * _2143) + _489) * cbLight._m0[_2436].y) * _2504) * _2505) + _2313;
        _2425 = (((((_2485 * _2144) + _490) * cbLight._m0[_2436].z) * _2504) * _2505) + _2315;
    }
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    float _2580;
    if (_1840.y == 0u)
    {
        uvec4 _2526 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2527 = _2526.x;
        uint _2538 = uint((float(_2526.y) * floor(float(uint(cbSceneParam._m0[85u].y * _422) / _2527))) + floor(float(uint(cbSceneParam._m0[85u].x * _421) / _2527)));
        float _2548 = (log2(_1618 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2549 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        uint _2552 = uint(isnan(14.0) ? _2549 : (isnan(_2549) ? 14.0 : min(_2549, 14.0)));
        uvec4 _2557 = texelFetch(g_lightClusterGridBuffer, int(((_2552 << 2u) + (_2538 << 6u)) >> 2u));
        uint _2558 = _2557.x;
        uint _2559 = _2526.z;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        if (((((1u << ((_2559 >> 4u) & 15u)) + 4294967295u) & _2558) == 0u) || ((_2559 & 240u) == 0u))
        {
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
        }
        else
        {
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            uint _2795 = 0u;
            uint _2804;
            bool _2805;
            for (;;)
            {
                _2804 = texelFetch(g_lightClassification, int((((_2552 << 5u) + (_2538 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                _2805 = _2804 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2805)
                {
                    frontier_phi_73_pred = _2794;
                    frontier_phi_73_pred_1 = _2793;
                    frontier_phi_73_pred_2 = _2792;
                    frontier_phi_73_pred_3 = _2791;
                    frontier_phi_73_pred_4 = _2790;
                    frontier_phi_73_pred_5 = _2789;
                }
                else
                {
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    uint _2940;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2794;
                    _2940 = _2804;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    for (;;)
                    {
                        uint _2944 = uint(findLSB(_2940)) + (_2795 << 5u);
                        uint _2941 = (_2940 + 4294967295u) & _2940;
                        uint _2946 = _2944 * 48u;
                        vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 3u)).x));
                        uint _2966 = (_2944 * 48u) + 4u;
                        vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 3u)).x));
                        uint _2985 = (_2944 * 48u) + 8u;
                        vec3 _2996 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2985)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 2u)).x));
                        float _3000 = _2960.x - _1616;
                        float _3001 = _2960.y - _1617;
                        float _3002 = _2960.z - _1618;
                        float _3003 = dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002));
                        float _3006 = inversesqrt(_3003);
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3010 = dot(vec3(_442, _445, _448), vec3(_3007, _3008, _3009));
                        float _3015 = 1.0 - (_3003 * _2960.w);
                        float _4394 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3016 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _3017 = sqrt(_3003) * _2979.w;
                        float _3020 = 1.39999997615814208984375 / (_3017 + 1.39999997615814208984375);
                        float _3021 = _3020 * _3020;
                        float _3024 = ((1.0 - _3021) * _3010) + _3021;
                        float _3027 = _3017 * _3017;
                        float _3031 = ((isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))) * _3016) / ((_3027 * 0.699999988079071044921875) + 1.0);
                        float _3035 = (-0.0) - _1616;
                        float _3036 = (-0.0) - _1617;
                        float _3037 = (-0.0) - _1618;
                        float _3041 = inversesqrt(dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037)));
                        float _3042 = _3041 * _3035;
                        float _3043 = _3041 * _3036;
                        float _3044 = _3041 * _3037;
                        float _3051 = exp2(log2(1.0 / ((_3027 * 3.5) + 5.0)) * 0.25);
                        float _3052 = 1.0 - _518;
                        float _3059 = sqrt(1.0 - ((1.0 - (_3052 * _3052)) * (1.0 - (_3051 * _3051))));
                        float _3060 = _3059 * _3059;
                        float _3061 = _3060 * _3060;
                        float _3062 = _3042 + _3007;
                        float _3063 = _3043 + _3008;
                        float _3064 = _3044 + _3009;
                        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                        float _3072 = dot(vec3(_442, _445, _448), vec3(_3042, _3043, _3044));
                        float _4410 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3075 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3076 = dot(vec3(_442, _445, _448), vec3(_3068 * _3062, _3068 * _3063, _3068 * _3064));
                        float _4421 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3079 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3083 = ((_3079 * _3079) * (_3061 + (-1.0))) + 1.0;
                        float _3084 = _3020 * _3060;
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3010) + _3085;
                        float _4432 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3089 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3090 = 1.0 - _3060;
                        float _3100 = (0.5 / (((_3089 * ((_3075 * _3090) + _3060)) + 9.9999999392252902907785028219223e-09) + (((_3089 * _3090) + _3060) * _3075))) * _3089;
                        float _4443 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3111 = (((_3061 * 3.1415927410125732421875) * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) / ((_3083 * _3083) * ((_3027 * 2.1991131305694580078125) + 3.141590118408203125))) * _3016;
                        _2864 = (_3031 * _2979.x) + _2937;
                        _2865 = (_3031 * _2979.y) + _2938;
                        _2866 = (_3031 * _2979.z) + _2939;
                        _2861 = (_3111 * _2996.x) + _2934;
                        _2862 = (_3111 * _2996.y) + _2935;
                        _2863 = (_3111 * _2996.z) + _2936;
                        if (_2941 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2941;
                        }
                    }
                    frontier_phi_73_pred = _2866;
                    frontier_phi_73_pred_1 = _2865;
                    frontier_phi_73_pred_2 = _2864;
                    frontier_phi_73_pred_3 = _2863;
                    frontier_phi_73_pred_4 = _2862;
                    frontier_phi_73_pred_5 = _2861;
                }
                _2648 = frontier_phi_73_pred;
                _2646 = frontier_phi_73_pred_1;
                _2644 = frontier_phi_73_pred_2;
                _2642 = frontier_phi_73_pred_3;
                _2640 = frontier_phi_73_pred_4;
                _2638 = frontier_phi_73_pred_5;
                uint _2796 = _2795 + 1u;
                if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2789 = _2638;
                    _2790 = _2640;
                    _2791 = _2642;
                    _2792 = _2644;
                    _2793 = _2646;
                    _2794 = _2648;
                    _2795 = _2796;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
        }
        uvec4 _2651 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2652 = _2651.z;
        uint _2654 = (_2652 >> 8u) & 15u;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((4294967295u << _2654) & _2558) == 0u)
        {
            _2757 = _2637;
            _2759 = _2639;
            _2761 = _2641;
            _2763 = _2643;
            _2765 = _2645;
            _2767 = _2647;
        }
        else
        {
            float _2782 = inversesqrt(dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618)));
            float _2783 = _2782 * _1616;
            float _2784 = _2782 * _1617;
            float _2785 = _2782 * _1618;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2654 < ((_2652 >> 12u) & 15u))
            {
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2917 = _2637;
                float _2918 = _2639;
                float _2919 = _2641;
                float _2920 = _2643;
                float _2921 = _2645;
                float _2922 = _2647;
                uint _2923 = _2654;
                uint _2932;
                bool _2933;
                for (;;)
                {
                    _2932 = texelFetch(g_lightClassification, int((((_2552 << 5u) + (_2538 << 9u)) + (_2923 << 2u)) >> 2u)).x;
                    _2933 = _2932 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2933)
                    {
                        frontier_phi_84_pred = _2921;
                        frontier_phi_84_pred_1 = _2920;
                        frontier_phi_84_pred_2 = _2919;
                        frontier_phi_84_pred_3 = _2918;
                        frontier_phi_84_pred_4 = _2917;
                        frontier_phi_84_pred_5 = _2922;
                    }
                    else
                    {
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3138 = _2917;
                        float _3139 = _2918;
                        float _3140 = _2919;
                        float _3141 = _2920;
                        float _3142 = _2921;
                        float _3143 = _2922;
                        uint _3144 = _2932;
                        uint _3145;
                        vec4 _3170;
                        float _3171;
                        vec4 _3186;
                        vec3 _3198;
                        vec4 _3214;
                        vec4 _3230;
                        float _3277;
                        bool _3278;
                        for (;;)
                        {
                            uint _3155 = ((_2923 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3144));
                            _3145 = (_3144 + 4294967295u) & _3144;
                            uint _3157 = _3155 * 40u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            _3171 = _3170.w;
                            uint _3173 = (_3155 * 40u) + 4u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3188 = (_3155 * 40u) + 8u;
                            _3198 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x));
                            uint _3201 = (_3155 * 40u) + 16u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3217 = (_3155 * 40u) + 20u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3233 = (_3155 * 40u) + 24u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3252 = (_3155 * 40u) + 28u;
                            vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            _3277 = fma(_1618, _3265.z, fma(_1617, _3265.y, _3265.x * _1616)) + _3265.w;
                            _3278 = !((fma(_1618, _3246.z, fma(_1617, _3246.y, _3246.x * _1616)) + _3246.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3278)
                            {
                                float _3305 = _3170.x - _1616;
                                float _3306 = _3170.y - _1617;
                                float _3307 = _3170.z - _1618;
                                float _3308 = dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307));
                                float _3311 = inversesqrt(_3308);
                                float _3312 = _3311 * _3305;
                                float _3313 = _3311 * _3306;
                                float _3314 = _3311 * _3307;
                                float _3318 = 1.0 - (_3308 / (_3171 * _3171));
                                float _4454 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3323 = sqrt(_3308) * _3186.w;
                                float _3325 = 1.39999997615814208984375 / (_3323 + 1.39999997615814208984375);
                                float _3326 = _3325 * _3325;
                                float _3329 = ((1.0 - _3326) * dot(vec3(_3312, _3313, _3314), vec3(_442, _445, _448))) + _3326;
                                float _3332 = _3323 * _3323;
                                float _3336 = (fma(_1618, _3214.z, fma(_1617, _3214.y, _3214.x * _1616)) + _3214.w) / _3277;
                                float _3337 = (fma(_1618, _3230.z, fma(_1617, _3230.y, _3230.x * _1616)) + _3230.w) / _3277;
                                float _3341 = 1.0 - dot(vec2(_3336, _3337), vec2(_3336, _3337));
                                float _4470 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3343 = _3342 * (((isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))) * _3319) / ((_3332 * 0.699999988079071044921875) + 1.0));
                                float _3355 = exp2(log2(1.0 / ((_3332 * 3.5) + 5.0)) * 0.25);
                                float _3356 = 1.0 - _518;
                                float _3363 = sqrt(1.0 - ((1.0 - (_3356 * _3356)) * (1.0 - (_3355 * _3355))));
                                float _3364 = _3363 * _3363;
                                float _3365 = _3364 * _3364;
                                float _3366 = _3312 - _2783;
                                float _3367 = _3313 - _2784;
                                float _3368 = _3314 - _2785;
                                float _3372 = inversesqrt(dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368)));
                                float _3376 = dot(vec3(_442, _445, _448), vec3((-0.0) - _2783, (-0.0) - _2784, (-0.0) - _2785));
                                float _4481 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3379 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3380 = dot(vec3(_442, _445, _448), vec3(_3372 * _3366, _3372 * _3367, _3372 * _3368));
                                float _4492 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3383 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3387 = ((_3383 * _3383) * (_3365 + (-1.0))) + 1.0;
                                float _3388 = _3325 * _3364;
                                float _3389 = _3388 * _3388;
                                float _3395 = ((1.0 - _3389) * dot(vec3(_442, _445, _448), vec3(_3312, _3313, _3314))) + _3389;
                                float _4503 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3397 = 1.0 - _3364;
                                float _3407 = (0.5 / (((_3396 * ((_3379 * _3397) + _3364)) + 9.9999999392252902907785028219223e-09) + (((_3396 * _3397) + _3364) * _3379))) * _3396;
                                float _4514 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3417 = (_3342 * _3319) * (((_3365 * 3.1415927410125732421875) * (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) / ((_3387 * _3387) * ((_3332 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3343 * _3186.y;
                                frontier_phi_90_pred_1 = _3343 * _3186.x;
                                frontier_phi_90_pred_2 = _3417 * _3198.z;
                                frontier_phi_90_pred_3 = _3417 * _3198.y;
                                frontier_phi_90_pred_4 = _3417 * _3198.x;
                                frontier_phi_90_pred_5 = _3343 * _3186.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3425 = frontier_phi_90_pred;
                            _3424 = frontier_phi_90_pred_1;
                            _3423 = frontier_phi_90_pred_2;
                            _3422 = frontier_phi_90_pred_3;
                            _3421 = frontier_phi_90_pred_4;
                            _3426 = frontier_phi_90_pred_5;
                            _3128 = _3424 + _3141;
                            _3129 = _3425 + _3142;
                            _3130 = _3426 + _3143;
                            _3125 = _3421 + _3138;
                            _3126 = _3422 + _3139;
                            _3127 = _3423 + _3140;
                            if (_3145 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3145;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3129;
                        frontier_phi_84_pred_1 = _3128;
                        frontier_phi_84_pred_2 = _3127;
                        frontier_phi_84_pred_3 = _3126;
                        frontier_phi_84_pred_4 = _3125;
                        frontier_phi_84_pred_5 = _3130;
                    }
                    _2766 = frontier_phi_84_pred;
                    _2764 = frontier_phi_84_pred_1;
                    _2762 = frontier_phi_84_pred_2;
                    _2760 = frontier_phi_84_pred_3;
                    _2758 = frontier_phi_84_pred_4;
                    _2768 = frontier_phi_84_pred_5;
                    uint _2924 = _2923 + 1u;
                    if (_2924 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2917 = _2758;
                        _2918 = _2760;
                        _2919 = _2762;
                        _2920 = _2764;
                        _2921 = _2766;
                        _2922 = _2768;
                        _2923 = _2924;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2768;
                frontier_phi_65_66_ladder_1 = _2764;
                frontier_phi_65_66_ladder_2 = _2766;
                frontier_phi_65_66_ladder_3 = _2760;
                frontier_phi_65_66_ladder_4 = _2758;
                frontier_phi_65_66_ladder_5 = _2762;
            }
            else
            {
                frontier_phi_65_66_ladder = _2647;
                frontier_phi_65_66_ladder_1 = _2643;
                frontier_phi_65_66_ladder_2 = _2645;
                frontier_phi_65_66_ladder_3 = _2639;
                frontier_phi_65_66_ladder_4 = _2637;
                frontier_phi_65_66_ladder_5 = _2641;
            }
            _2757 = frontier_phi_65_66_ladder_4;
            _2759 = frontier_phi_65_66_ladder_3;
            _2761 = frontier_phi_65_66_ladder_5;
            _2763 = frontier_phi_65_66_ladder_1;
            _2765 = frontier_phi_65_66_ladder_2;
            _2767 = frontier_phi_65_66_ladder;
        }
        float _2772 = isnan(1.0) ? _502 : (isnan(_502) ? 1.0 : min(_502, 1.0));
        _2570 = (_2772 * _2763) + _2083;
        _2572 = (_2772 * _2765) + _2085;
        _2574 = (_2772 * _2767) + _2087;
        _2576 = ((_2757 * _487) * _2772) + _2421;
        _2578 = ((_2759 * _489) * _2772) + _2423;
        _2580 = ((_2761 * _490) * _2772) + _2425;
    }
    else
    {
        _2570 = _2083;
        _2572 = _2085;
        _2574 = _2087;
        _2576 = _2421;
        _2578 = _2423;
        _2580 = _2425;
    }
    float _4530 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4541 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _4552 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _2597 = ((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2570 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _502))) + ((_2576 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1344)) * cbPerFrame._m0[3u].x);
    float _2598 = ((isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2572 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _502))) + ((_2578 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1344)) * cbPerFrame._m0[3u].x);
    float _2599 = ((isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2574 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _502))) + ((_2580 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1344)) * cbPerFrame._m0[3u].x);
    uint _2600 = _461 + 6u;
    float _2608 = _421 / cbSceneParam._m0[86u].x;
    float _2609 = _422 / cbSceneParam._m0[86u].y;
    vec4 _2623 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2608, _2609, (log2((isnan(cbSceneParam._m0[77u].w) ? _342 : (isnan(_342) ? cbSceneParam._m0[77u].w : min(_342, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2625 = _2623.x;
    float _2626 = _2623.y;
    float _2627 = _2623.z;
    float _2628 = _2623.w;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    if (_342 > cbSceneParam._m0[78u].w)
    {
        float _2662 = isnan(_342) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _342 : min(cbSceneParam._m0[80u].w, _342));
        float _2663 = _2662 / _342;
        float _2674 = _2663 * _393;
        float _2675 = _394 * _2663;
        float _2676 = (-0.0) - _2675;
        float _2677 = _2663 * _395;
        float _2679 = (cbSceneParam._m0[77u].w * _2676) / _2662;
        float _2680 = _2679 + cbSceneParam._m0[79u].w;
        float _2681 = cbSceneParam._m0[79u].w - _2675;
        float _2687 = sqrt(((_2674 * _2674) + (_2675 * _2675)) + (_2677 * _2677));
        float _2690 = (1.0 - (cbSceneParam._m0[77u].w / _2662)) * _2687;
        float _2695 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2697 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2874;
        if (abs((_2676 - _2679) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2874 = ((((_2680 > 0.0) ? exp2(_2695 * _2680) : (2.0 - exp2(_2697 * _2680))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2690;
        }
        else
        {
            float _2818 = 1.0 / cbSceneParam._m0[80u].x;
            float _2819 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : max(_2680, _2681));
            float _2820 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : min(_2680, _2681));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            _2874 = ((abs(_2687 / _2676) * cbSceneParam._m0[80u].y) * ((((_2829 - _2830) * 2.0) - ((exp2(_2695 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0)))) - exp2(_2695 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))))) * _2818)) - ((exp2(_2697 * _2829) - exp2(_2697 * _2830)) * _2818))) + (_2690 * cbSceneParam._m0[80u].z);
        }
        vec4 _2876 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2608, _2609, 1.0), 0.0);
        float _2885 = exp2((_2874 * (-1.44269502162933349609375)) * (1.0 - _2876.w));
        float _2886 = log2(_2885);
        float _2902 = log2(_2628);
        _2699 = (exp2(_2902 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].x)) * _2876.x) / cbSceneParam._m0[78u].x)) + _2625;
        _2701 = (exp2(_2902 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].y)) * _2876.y) / cbSceneParam._m0[78u].y)) + _2626;
        _2703 = (exp2(_2902 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].z)) * _2876.z) / cbSceneParam._m0[78u].z)) + _2627;
        _2705 = _2885 * _2628;
    }
    else
    {
        _2699 = _2625;
        _2701 = _2626;
        _2703 = _2627;
        _2705 = _2628;
    }
    bool _2912;
    vec4 _2715;
    vec4 _2737;
    float _2739;
    float _2743;
    float _2744;
    float _2745;
    float _2746;
    bool _2756;
    for (;;)
    {
        _2715 = cbMatDynParam._m0[0u];
        float _2717 = roundEven(_2715.y);
        bool _2718 = _2717 == 3.0;
        float _2719 = log2(_2705);
        float _2726 = exp2(_2719 * cbSceneParam._m0[78u].x) * _2597;
        float _2727 = exp2(_2719 * cbSceneParam._m0[78u].y) * _2598;
        float _2728 = exp2(_2719 * cbSceneParam._m0[78u].z) * _2599;
        float _2735 = _409 + (-0.5);
        _2737 = cbMtdParam._m0[1u];
        _2739 = _2737.y * _2735;
        float _2742 = (_2717 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2743 = _2742 * (_2718 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2699)));
        _2744 = _2742 * (_2718 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2701)));
        _2745 = _2742 * (_2718 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2703)));
        _2746 = _2735 * 0.999000012874603271484375;
        _2756 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2756)
        {
            if ((cbInstanceData._m0[_461 + 7u].x + _2746) < 0.5)
            {
                _2912 = true;
                break;
            }
        }
        uint _2853 = _463 + uint(_2715.w);
        if ((cbInstanceData._m0[_2853].w < 1.0) && ((cbInstanceData._m0[_2853].w + _2746) < 0.5))
        {
            _2912 = true;
            break;
        }
        if ((_2739 + 1.0) < _2737.x)
        {
            _2912 = true;
            break;
        }
        _2912 = false;
        break;
    }
    float _3116;
    if (_2912)
    {
        discard_state = true;
        _3116 = 0.0;
    }
    else
    {
        _3116 = cbInstanceData._m0[_2600].w;
    }
    SV_Target.x = _2743;
    SV_Target.y = _2744;
    SV_Target.z = _2745;
    SV_Target.w = _3116;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2600].w;
    discard_exit();
}


