#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1244;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    float _293 = cbMtdParam._m0[13u].w - cbMtdParam._m0[13u].z;
    float _295 = (sqrt(((_278 * _278) + (_279 * _279)) + (_280 * _280)) - cbMtdParam._m0[13u].z) / (isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0)));
    float _300 = _295 / cbMtdParam._m0[15u].y;
    float _301 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _302 = isnan(8.0) ? _301 : (isnan(_301) ? 8.0 : min(_301, 8.0));
    float _309 = cbMtdParam._m0[10u].x * _302;
    float _310 = cbMtdParam._m0[10u].y * _302;
    float _311 = cbMtdParam._m0[10u].z * _302;
    float _312 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _313 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _314 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _328 = cbMtdParam._m0[14u].x + _295;
    float _333 = _328 * cbMtdParam._m0[16u].x;
    float _3500 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    vec4 _354 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _357 = _354.x;
    bool _364 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _380 = ((_364 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _357)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _357))) - POSITION_1.w) / cbMtdParam._m0[12u].w;
    float _3511 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _384 = 1.0 - (isnan(0.75) ? _381 : (isnan(_381) ? 0.75 : max(_381, 0.75)));
    float _386 = (cbMtdParam._m0[17u].z + TEXCOORD_3.x) - (_384 * cbMtdParam._m0[13u].y);
    float _396 = cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x;
    vec4 _412 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_2, SS_BumpMap), vec2((((_396 * cbMtdParam._m0[19u].x) + TEXCOORD) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_396 * cbMtdParam._m0[19u].y) + TEXCOORD_1) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _3527 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _418 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _419 = _412.z - _418;
    float _3538 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _432 = (_420 * 0.00999999977648258209228515625) + TEXCOORD;
    float _434 = (_420 * (-0.00999999977648258209228515625)) + TEXCOORD_1;
    vec4 _447 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((_432 + (cbMtdParam._m0[18u].z * _396)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_434 + (cbMtdParam._m0[18u].w * _396)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _451 = _447.z;
    vec4 _462 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((_432 + (cbMtdParam._m0[18u].x * _396)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_434 + (cbMtdParam._m0[18u].y * _396)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _466 = _462.z;
    float _469 = (_384 - _412.w) + (isnan(_466) ? _451 : (isnan(_451) ? _466 : max(_451, _466)));
    float _3554 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _471 = (_386 * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)));
    float _483 = (_471 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[11u].x * _420);
    float _484 = (_471 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[11u].y * _420);
    float _485 = (_471 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[11u].z * _420);
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    vec4 _528 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_508 / cbMtdParam._m0[14u].y) + (cbMtdParam._m0[19u].z * _396))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_512 / cbMtdParam._m0[14u].y) + (cbMtdParam._m0[19u].w * _396))) + cbTextureTilingScale._m0[1u].w));
    float _533 = _528.z * 0.099999986588954925537109375;
    float _3565 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _535 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _539 = cbMtdParam._m0[15u].w * _295;
    float _3576 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _554 = (_483 + (isnan(0.07999999821186065673828125) ? _312 : (isnan(_312) ? 0.07999999821186065673828125 : min(_312, 0.07999999821186065673828125)))) + (_540 * (((1.0 - _483) - _535) + _533));
    float _556 = (_484 + (isnan(0.07999999821186065673828125) ? _313 : (isnan(_313) ? 0.07999999821186065673828125 : min(_313, 0.07999999821186065673828125)))) + (_540 * (((1.0 - _484) - _535) + _533));
    float _558 = (_485 + (isnan(0.07999999821186065673828125) ? _314 : (isnan(_314) ? 0.07999999821186065673828125 : min(_314, 0.07999999821186065673828125)))) + (_540 * (((1.0 - _485) + _533) - _535));
    float _3587 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _560 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _568 = _295 / cbMtdParam._m0[17u].x;
    float _3620 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = (1.0 - (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbMtdParam._m0[16u].w;
    float _578 = ((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _418) + cbMtdParam._m0[12u].x;
    float _3631 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _579 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _588 = _295 / cbMtdParam._m0[15u].z;
    float _3642 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _590 = _420 * 0.23999999463558197021484375;
    float _592 = _420 * (-0.20000000298023223876953125);
    float _603 = cbMtdParam._m0[20u].z * TEXCOORD;
    float _604 = cbMtdParam._m0[20u].w * TEXCOORD_1;
    vec4 _613 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[20u].x * _396) + _590) + _603) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[20u].y * _396) + _592) + _604) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _632 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2((((_603 + _590) + (cbMtdParam._m0[21u].x * _396)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_604 + _592) + (cbMtdParam._m0[21u].y * _396)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _651 = (((_462.x + (-0.5)) * 0.5) + _447.x) + (((_613.x + (-1.0)) + _632.x) * cbMtdParam._m0[17u].y);
    float _652 = (((_462.y + (-0.5)) * 0.5) + _447.y) + (((_613.y + (-1.0)) + _632.y) * cbMtdParam._m0[17u].y);
    float _657 = ((_528.x - _651) * _589) + _651;
    float _658 = ((_528.y - _652) * _589) + _652;
    float _660 = _295 / cbMtdParam._m0[15u].x;
    float _3653 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _661 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _678 = ((((_579 * (0.5 - _414)) + _414) + (((_657 + (-0.5)) + ((0.5 - _657) * _661)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _679 = ((((_579 * (0.5 - _415)) + _415) + (((_658 + (-0.5)) + ((0.5 - _658) * _661)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _680 = dot(vec2(_678, _679), vec2(_678, _679));
    float _3664 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _685 = sqrt(1.0 - (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))));
    float _687 = cbMtdParam._m0[16u].y * _328;
    float _3675 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _692 = cbMtdParam._m0[14u].z * _328;
    float _3686 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _694 = (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * cbMtdParam._m0[17u].w;
    float _3697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _700 = ((cbMtdParam._m0[16u].z - cbMtdParam._m0[14u].w) * (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) + cbMtdParam._m0[14u].w;
    float _705 = _678 - (_700 * _678);
    float _706 = _679 - (_700 * _679);
    float _707 = (_700 * (1.0 - _685)) + _685;
    float _715 = fma(_685, _222, fma(_679, _215, _678 * _201));
    float _718 = fma(_685, _223, fma(_679, _216, _678 * _202));
    float _721 = fma(_685, _224, fma(_679, _217, _678 * _203));
    float _725 = inversesqrt(dot(vec3(_715, _718, _721), vec3(_715, _718, _721)));
    float _726 = _725 * _715;
    float _727 = _725 * _718;
    float _728 = _725 * _721;
    float _731 = fma(_707, _222, fma(_706, _215, _705 * _201));
    float _734 = fma(_707, _223, fma(_706, _216, _705 * _202));
    float _737 = fma(_707, _224, fma(_706, _217, _705 * _203));
    float _741 = inversesqrt(dot(vec3(_731, _734, _737), vec3(_731, _734, _737)));
    float _742 = _741 * _731;
    float _743 = _741 * _734;
    float _744 = _741 * _737;
    float _3708 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3719 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _746 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3741 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3752 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _754 = _364 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _783 = cbSceneParam._m0[71u].x - (_508 / _774);
    float _784 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _774);
    float _785 = cbSceneParam._m0[71u].z - (_512 / _774);
    float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
    float _790 = _783 * _789;
    float _791 = _784 * _789;
    float _792 = _785 * _789;
    float _797 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _798 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _819 = fma(_728, cbSceneParam._m0[5u].z, fma(_727, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _726));
    float _822 = fma(_728, cbSceneParam._m0[6u].z, fma(_727, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _726));
    float _825 = fma(_728, cbSceneParam._m0[7u].z, fma(_727, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _726));
    uint _838 = uint(roundEven(NORMAL.w)) * 13u;
    uint _840 = (_838 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _846 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_840].x;
    float _847 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_840].y;
    float _848 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_840].z;
    float _3763 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    vec4 _860 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _797, cbSceneParam._m0[86u].y * _798));
    float _863 = _860.x * TEXCOORD_3.w;
    float _867 = abs(dot(vec3(_790, _791, _792), vec3(_726, _727, _728)));
    float _3796 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _880 = dot(vec3(_742, _743, _744), vec3(_790, _791, _792)) * 2.0;
    float _884 = (_880 * _742) - _790;
    float _885 = (_880 * _743) - _791;
    float _886 = (_880 * _744) - _792;
    float _890 = abs(dot(vec3(_790, _791, _792), vec3(_742, _743, _744)));
    float _3807 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _892 = sqrt(_746);
    float _904 = exp2((_892 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_892 * 3.0));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1243;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _970 = fma(_943, cbModelParam._m0[26u].z, fma(_939, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _935));
        float _974 = fma(_943, cbModelParam._m0[27u].z, fma(_939, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _935));
        float _978 = fma(_943, cbModelParam._m0[28u].z, fma(_939, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _935));
        float _1001 = _935 + _742;
        float _1002 = _939 + _743;
        float _1003 = _943 + _744;
        float _1013 = fma(_1003, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1001)) - _970;
        float _1014 = fma(_1003, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1001)) - _974;
        float _1015 = fma(_1003, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1001)) - _978;
        float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
        float _1032 = ((_1019 * _1013) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_970 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1019 * _1014) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_974 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1019 * _1015) / cbModelParam._m0[34u].z) + ((((((_978 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        float _1071 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1037.x + (-0.5));
        float _1073 = _1071 * (_1037.y + (-0.5));
        float _1074 = _1071 * (_1037.z + (-0.5));
        float _1081 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1044.x + (-0.5));
        float _1083 = _1081 * (_1044.y + (-0.5));
        float _1084 = _1081 * (_1044.z + (-0.5));
        float _1091 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1051.x + (-0.5));
        float _1093 = _1091 * (_1051.y + (-0.5));
        float _1094 = _1091 * (_1051.z + (-0.5));
        float _1101 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1058.x + (-0.5));
        float _1103 = _1101 * (_1058.y + (-0.5));
        float _1104 = _1101 * (_1058.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1125 = (dot(vec3(_742, _743, _744), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1135 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3855 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1137 + 1.0))) + _1142) * _1105;
        float _1152 = _1073 * 0.5;
        float _1153 = _1083 * 0.5;
        float _1154 = _1093 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_742, _743, _744), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3888 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1179 + 1.0))) + _1184) * _1106;
        float _1194 = _1074 * 0.5;
        float _1195 = _1084 * 0.5;
        float _1196 = _1094 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_742, _743, _744), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3921 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1221 + 1.0))) + _1226) * _1107;
        _1243 = _1074;
        _1245 = _1073;
        _1246 = _1072;
        _1247 = _1084;
        _1248 = _1083;
        _1249 = _1082;
        _1250 = _1094;
        _1251 = _1093;
        _1252 = _1092;
        _1253 = _1107;
        _1254 = _1106;
        _1255 = _1105;
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _1244;
        _1245 = _1244;
        _1246 = _1244;
        _1247 = _1244;
        _1248 = _1244;
        _1249 = _1244;
        _1250 = _1244;
        _1251 = _1244;
        _1252 = _1244;
        _1253 = _1244;
        _1254 = _1244;
        _1255 = _1244;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1284 = fma(_943, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _935));
        float _1288 = fma(_943, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _935));
        float _1292 = fma(_943, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _935));
        float _1315 = _935 + _742;
        float _1316 = _939 + _743;
        float _1317 = _943 + _744;
        float _1327 = fma(_1317, cbModelParam._m0[30u].z, fma(_1316, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1315)) - _1284;
        float _1328 = fma(_1317, cbModelParam._m0[31u].z, fma(_1316, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1315)) - _1288;
        float _1329 = fma(_1317, cbModelParam._m0[32u].z, fma(_1316, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1315)) - _1292;
        float _1333 = inversesqrt(dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329)));
        float _1346 = ((_1333 * _1327) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1284 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1333 * _1328) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1288 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1333 * _1329) / cbModelParam._m0[35u].z) + ((((((_1292 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        float _1383 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1350.x + (-0.5));
        float _1385 = _1383 * (_1350.y + (-0.5));
        float _1386 = _1383 * (_1350.z + (-0.5));
        float _1393 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1357.x + (-0.5));
        float _1395 = _1393 * (_1357.y + (-0.5));
        float _1396 = _1393 * (_1357.z + (-0.5));
        float _1403 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1364.x + (-0.5));
        float _1405 = _1403 * (_1364.y + (-0.5));
        float _1406 = _1403 * (_1364.z + (-0.5));
        float _1413 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1371.x + (-0.5));
        float _1415 = _1413 * (_1371.y + (-0.5));
        float _1416 = _1413 * (_1371.z + (-0.5));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = _1384 * 0.5;
        float _1421 = _1394 * 0.5;
        float _1422 = _1404 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_742, _743, _744), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _3984 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1447 + 1.0))) + _1452) * _1417;
        float _1462 = _1385 * 0.5;
        float _1463 = _1395 * 0.5;
        float _1464 = _1405 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_742, _743, _744), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4017 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1489 + 1.0))) + _1494) * _1418;
        float _1504 = _1386 * 0.5;
        float _1505 = _1396 * 0.5;
        float _1506 = _1406 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_742, _743, _744), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4050 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1531 + 1.0))) + _1536) * _1419;
        _1553 = _1386;
        _1554 = _1385;
        _1555 = _1384;
        _1556 = _1396;
        _1557 = _1395;
        _1558 = _1394;
        _1559 = _1406;
        _1560 = _1405;
        _1561 = _1404;
        _1562 = _1419;
        _1563 = _1418;
        _1564 = _1417;
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    }
    else
    {
        _1553 = _1244;
        _1554 = _1244;
        _1555 = _1244;
        _1556 = _1244;
        _1557 = _1244;
        _1558 = _1244;
        _1559 = _1244;
        _1560 = _1244;
        _1561 = _1244;
        _1562 = _1244;
        _1563 = _1244;
        _1564 = _1244;
        _1565 = 0.0;
        _1566 = 0.0;
        _1567 = 0.0;
    }
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1256)) + _1256;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1257)) + _1257;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1258)) + _1258;
    float _1600 = fma(_1579, cbSceneParam._m0[89u].z, fma(_1578, cbSceneParam._m0[89u].y, _1577 * cbSceneParam._m0[89u].x));
    float _1603 = fma(_1579, cbSceneParam._m0[90u].z, fma(_1578, cbSceneParam._m0[90u].y, _1577 * cbSceneParam._m0[90u].x));
    float _1606 = fma(_1579, cbSceneParam._m0[91u].z, fma(_1578, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1577));
    float _1621 = _884 * 0.5;
    float _1622 = _885 * 0.5;
    float _1623 = _886 * 0.5;
    float _1624 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1627 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1630 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1664;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1637 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1243, _1247, _1250, _1253));
        float _1641 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1645 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1246, _1249, _1252, _1255));
        float _1652 = dot(vec4(cbModelParam._m0[39u]), vec4(_1621, _1622, _1623, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1675;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1666 = dot(vec4(cbModelParam._m0[40u]), vec4(_1621, _1622, _1623, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1679 = (_1675 * cbModelParam._m0[1u].x) + (_1664 * (1.0 - cbModelParam._m0[1u].x));
    float _1689 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _746);
    float _1690 = isnan(_1689) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1689 : min(cbModelParam._m0[25u].z, _1689));
    float _1770;
    float _1772;
    float _1774;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1737 = fma(_943, cbModelParam._m0[13u].z, fma(_939, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _935)) + cbModelParam._m0[13u].w;
        float _1741 = fma(_943, cbModelParam._m0[14u].z, fma(_939, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _935)) + cbModelParam._m0[14u].w;
        float _1745 = fma(_943, cbModelParam._m0[15u].z, fma(_939, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _935)) + cbModelParam._m0[15u].w;
        float _1748 = fma(_886, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _884));
        float _1751 = fma(_886, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _884));
        float _1754 = fma(_886, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _884));
        float _1782;
        if (_1748 > 0.0)
        {
            _1782 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1782 = frontier_phi_16_14_ladder;
        }
        float _2051;
        if (_1751 > 0.0)
        {
            _2051 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2051 = frontier_phi_25_21_ladder;
        }
        float _2467;
        if (_1754 > 0.0)
        {
            _2467 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2467 = frontier_phi_39_32_ladder;
        }
        float _2469 = isnan(_2051) ? _1782 : (isnan(_1782) ? _2051 : min(_1782, _2051));
        float _2470 = isnan(_2467) ? _2469 : (isnan(_2469) ? _2467 : min(_2469, _2467));
        float _2474 = (_2470 * _1748) + _1737;
        float _2475 = (_2470 * _1751) + _1741;
        float _2476 = (_2470 * _1754) + _1745;
        float _2477 = _2470 * 9.9999997473787516355514526367188e-05;
        float _2479 = (-1.0) - _2477;
        float _2481 = _2477 + 1.0;
        float frontier_phi_15_39_ladder;
        float frontier_phi_15_39_ladder_1;
        float frontier_phi_15_39_ladder_2;
        if ((_2476 > _2481) || ((_2476 < _2479) || ((_2475 > _2481) || ((_2475 < _2479) || ((_2474 < _2479) || (_2474 > _2481))))))
        {
            frontier_phi_15_39_ladder = 0.0;
            frontier_phi_15_39_ladder_1 = 0.0;
            frontier_phi_15_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2476, cbModelParam._m0[9u].z, fma(_2475, cbModelParam._m0[9u].y, _2474 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2476, cbModelParam._m0[10u].z, fma(_2475, cbModelParam._m0[10u].y, _2474 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2476, cbModelParam._m0[11u].z, fma(_2475, cbModelParam._m0[11u].y, _2474 * cbModelParam._m0[11u].x))), _1690);
            frontier_phi_15_39_ladder = _2685.z * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_1 = _2685.y * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_2 = _2685.x * cbModelParam._m0[1u].y;
        }
        _1770 = frontier_phi_15_39_ladder_2;
        _1772 = frontier_phi_15_39_ladder_1;
        _1774 = frontier_phi_15_39_ladder;
    }
    else
    {
        vec4 _1758 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_884, _885, _886), _1690);
        _1770 = _1758.x * cbModelParam._m0[1u].y;
        _1772 = _1758.y * cbModelParam._m0[1u].y;
        _1774 = _1758.z * cbModelParam._m0[1u].y;
    }
    float _1778 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _746);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1778 : min(cbModelParam._m0[25u].w, _1778));
    float _1868;
    float _1870;
    float _1872;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1832 = fma(_943, cbModelParam._m0[21u].z, fma(_939, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _935)) + cbModelParam._m0[21u].w;
        float _1836 = fma(_943, cbModelParam._m0[22u].z, fma(_939, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _935)) + cbModelParam._m0[22u].w;
        float _1840 = fma(_943, cbModelParam._m0[23u].z, fma(_939, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _935)) + cbModelParam._m0[23u].w;
        float _1843 = fma(_886, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _884));
        float _1846 = fma(_886, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _884));
        float _1849 = fma(_886, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _884));
        float _2056;
        if (_1843 > 0.0)
        {
            _2056 = abs((1.0 - _1832) / _1843);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1832 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2056 = frontier_phi_27_23_ladder;
        }
        float _2494;
        if (_1846 > 0.0)
        {
            _2494 = abs((1.0 - _1836) / _1846);
        }
        else
        {
            float frontier_phi_41_34_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_41_34_ladder = abs((_1836 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_41_34_ladder = 5000.0;
            }
            _2494 = frontier_phi_41_34_ladder;
        }
        float _2746;
        if (_1849 > 0.0)
        {
            _2746 = abs((1.0 - _1840) / _1849);
        }
        else
        {
            float frontier_phi_56_50_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_56_50_ladder = abs((_1840 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_56_50_ladder = 5000.0;
            }
            _2746 = frontier_phi_56_50_ladder;
        }
        float _2748 = isnan(_2494) ? _2056 : (isnan(_2056) ? _2494 : min(_2056, _2494));
        float _2749 = isnan(_2746) ? _2748 : (isnan(_2748) ? _2746 : min(_2748, _2746));
        float _2753 = (_2749 * _1843) + _1832;
        float _2754 = (_2749 * _1846) + _1836;
        float _2755 = (_2749 * _1849) + _1840;
        float _2756 = _2749 * 9.9999997473787516355514526367188e-05;
        float _2757 = (-1.0) - _2756;
        float _2759 = _2756 + 1.0;
        float frontier_phi_24_56_ladder;
        float frontier_phi_24_56_ladder_1;
        float frontier_phi_24_56_ladder_2;
        if ((_2755 > _2759) || ((_2755 < _2757) || ((_2754 > _2759) || ((_2754 < _2757) || ((_2753 < _2757) || (_2753 > _2759))))))
        {
            frontier_phi_24_56_ladder = 0.0;
            frontier_phi_24_56_ladder_1 = 0.0;
            frontier_phi_24_56_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3026 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2755, cbModelParam._m0[17u].z, fma(_2754, cbModelParam._m0[17u].y, _2753 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2755, cbModelParam._m0[18u].z, fma(_2754, cbModelParam._m0[18u].y, _2753 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2755, cbModelParam._m0[19u].z, fma(_2754, cbModelParam._m0[19u].y, _2753 * cbModelParam._m0[19u].x))), _1779);
            frontier_phi_24_56_ladder = _3026.y * cbModelParam._m0[1u].z;
            frontier_phi_24_56_ladder_1 = _3026.z * cbModelParam._m0[1u].z;
            frontier_phi_24_56_ladder_2 = _3026.x * cbModelParam._m0[1u].z;
        }
        _1868 = frontier_phi_24_56_ladder_2;
        _1870 = frontier_phi_24_56_ladder;
        _1872 = frontier_phi_24_56_ladder_1;
    }
    else
    {
        vec4 _1852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_884, _885, _886), _1779);
        _1868 = _1852.x * cbModelParam._m0[1u].z;
        _1870 = _1852.y * cbModelParam._m0[1u].z;
        _1872 = _1852.z * cbModelParam._m0[1u].z;
    }
    float _1884 = ((((1.0 - _904) * ((_892 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_904 * _892)) * _863;
    float _1885 = _1884 * ((cbModelParam._m0[1u].w * (_1868 - _1770)) + _1770);
    float _1886 = _1884 * ((cbModelParam._m0[1u].w * (_1870 - _1772)) + _1772);
    float _1887 = _1884 * ((cbModelParam._m0[1u].w * (_1872 - _1774)) + _1774);
    float _1890 = fma(_1887, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1885 * cbSceneParam._m0[89u].x));
    float _1893 = fma(_1887, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1885 * cbSceneParam._m0[90u].x));
    float _1896 = fma(_1887, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, _1885 * cbSceneParam._m0[91u].x));
    vec4 _1904 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_797, _798));
    float _1906 = _1904.w;
    float _1918 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1906);
    float _1919 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1906);
    float _1920 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1906);
    uint _1921 = _838 + 5u;
    uvec4 _1924 = floatBitsToUint(cbInstanceData._m0[_1921]);
    uint _1926 = _1924.x * 14u;
    float _1933 = (cbLight._m0[_1926 + 13u].x * (_863 + (-1.0))) + 1.0;
    uint _1934 = _1926 + 4u;
    float _1944 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
    float _1953 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_726, _727, _728));
    float _4181 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1957 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * 0.3183098733425140380859375;
    float _1959 = ((cbLight._m0[_1934].x * _1918) * _1944) * _1957;
    float _1960 = ((cbLight._m0[_1934].y * _1919) * _1944) * _1957;
    float _1961 = ((cbLight._m0[_1934].z * _1920) * _1944) * _1957;
    uint _1963 = _1926 + 8u;
    float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _746) * 0.949999988079071044921875);
    float _1977 = _1976 * _1976;
    float _1978 = cbLight._m0[_1926].x + _790;
    float _1979 = cbLight._m0[_1926].y + _791;
    float _1980 = cbLight._m0[_1926].z + _792;
    float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
    float _1985 = _1984 * _1978;
    float _1986 = _1984 * _1979;
    float _1987 = _1984 * _1980;
    float _1988 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_1926].xyz));
    float _4192 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _1992 = dot(vec3(_726, _727, _728), vec3(_790, _791, _792));
    float _4203 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1995 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _1996 = dot(vec3(_726, _727, _728), vec3(_1985, _1986, _1987));
    float _4214 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2000 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_1985, _1986, _1987));
    float _4225 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2004 = _1977 * _1977;
    float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
    float _2019 = (exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2020 = 1.0 - _1977;
    float _2031 = (0.5 / (((_1995 * ((_1991 * _2020) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2020) + _1977) * _1991))) * _1991;
    float _4236 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
    float _2037 = (((cbLight._m0[_1963].x * _1918) * _2019) * _2033) * _1944;
    float _2041 = (((cbLight._m0[_1963].y * _1919) * _2019) * _2033) * _1944;
    float _2045 = (((cbLight._m0[_1963].z * _1920) * _2019) * _2033) * _1944;
    float _2159;
    float _2161;
    float _2163;
    float _2165;
    float _2167;
    float _2169;
    if (_1924.y == 0u)
    {
        float _2100 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2101 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2100;
        float _2102 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2100;
        float _2103 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2100;
        uvec4 _2115 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2116 = _2115.x;
        uint _2127 = uint((float(_2115.y) * floor(float(uint(cbSceneParam._m0[85u].y * _798) / _2116))) + floor(float(uint(cbSceneParam._m0[85u].x * _797) / _2116)));
        float _2137 = (log2(_2103 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2138 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        uint _2141 = uint(isnan(14.0) ? _2138 : (isnan(_2138) ? 14.0 : min(_2138, 14.0)));
        uvec4 _2146 = texelFetch(g_lightClusterGridBuffer, int(((_2141 << 2u) + (_2127 << 6u)) >> 2u));
        uint _2147 = _2146.x;
        uint _2148 = _2115.z;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        float _2302;
        float _2304;
        if (((((1u << ((_2148 >> 4u) & 15u)) + 4294967295u) & _2147) == 0u) || ((_2148 & 240u) == 0u))
        {
            _2294 = 0.0;
            _2296 = 0.0;
            _2298 = 0.0;
            _2300 = 0.0;
            _2302 = 0.0;
            _2304 = 0.0;
        }
        else
        {
            float _2295;
            float _2297;
            float _2299;
            float _2301;
            float _2303;
            float _2305;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            uint _2537 = 0u;
            uint _2546;
            bool _2547;
            for (;;)
            {
                _2546 = texelFetch(g_lightClassification, int((((_2141 << 5u) + (_2127 << 9u)) + (_2537 << 2u)) >> 2u)).x;
                _2547 = _2546 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_2547)
                {
                    frontier_phi_52_pred = _2533;
                    frontier_phi_52_pred_1 = _2536;
                    frontier_phi_52_pred_2 = _2535;
                    frontier_phi_52_pred_3 = _2534;
                    frontier_phi_52_pred_4 = _2532;
                    frontier_phi_52_pred_5 = _2531;
                }
                else
                {
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    uint _2795;
                    _2789 = _2531;
                    _2790 = _2532;
                    _2791 = _2533;
                    _2792 = _2534;
                    _2793 = _2535;
                    _2794 = _2536;
                    _2795 = _2546;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    for (;;)
                    {
                        uint _2799 = uint(findLSB(_2795)) + (_2537 << 5u);
                        uint _2796 = (_2795 + 4294967295u) & _2795;
                        uint _2801 = _2799 * 48u;
                        vec4 _2815 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2801)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 3u)).x));
                        uint _2821 = (_2799 * 48u) + 4u;
                        vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 3u)).x));
                        uint _2840 = (_2799 * 48u) + 8u;
                        vec3 _2851 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x));
                        float _2855 = _2815.x - _2101;
                        float _2856 = _2815.y - _2102;
                        float _2857 = _2815.z - _2103;
                        float _2858 = dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857));
                        float _2861 = inversesqrt(_2858);
                        float _2862 = _2861 * _2855;
                        float _2863 = _2861 * _2856;
                        float _2864 = _2861 * _2857;
                        float _2865 = dot(vec3(_819, _822, _825), vec3(_2862, _2863, _2864));
                        float _2870 = 1.0 - (_2858 * _2815.w);
                        float _4257 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2871 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                        float _2872 = sqrt(_2858) * _2834.w;
                        float _2875 = 1.39999997615814208984375 / (_2872 + 1.39999997615814208984375);
                        float _2876 = _2875 * _2875;
                        float _2879 = ((1.0 - _2876) * _2865) + _2876;
                        float _2882 = _2872 * _2872;
                        float _2886 = ((isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))) * _2871) / ((_2882 * 0.699999988079071044921875) + 1.0);
                        float _2890 = (-0.0) - _2101;
                        float _2891 = (-0.0) - _2102;
                        float _2892 = (-0.0) - _2103;
                        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
                        float _2897 = _2896 * _2890;
                        float _2898 = _2896 * _2891;
                        float _2899 = _2896 * _2892;
                        float _2907 = exp2(log2(1.0 / ((_2882 * 3.5) + 5.0)) * 0.25);
                        float _2908 = 1.0 - _892;
                        float _2915 = sqrt(1.0 - ((1.0 - (_2908 * _2908)) * (1.0 - (_2907 * _2907))));
                        float _2916 = _2915 * _2915;
                        float _2917 = _2916 * _2916;
                        float _2918 = _2897 + _2862;
                        float _2919 = _2898 + _2863;
                        float _2920 = _2899 + _2864;
                        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
                        float _2928 = dot(vec3(_819, _822, _825), vec3(_2897, _2898, _2899));
                        float _4273 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2931 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                        float _2932 = dot(vec3(_819, _822, _825), vec3(_2924 * _2918, _2924 * _2919, _2924 * _2920));
                        float _4284 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _2939 = ((_2935 * _2935) * (_2917 + (-1.0))) + 1.0;
                        float _2940 = _2875 * _2916;
                        float _2941 = _2940 * _2940;
                        float _2944 = ((1.0 - _2941) * _2865) + _2941;
                        float _4295 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2945 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _2946 = 1.0 - _2916;
                        float _2956 = (0.5 / (((_2945 * ((_2931 * _2946) + _2916)) + 9.9999999392252902907785028219223e-09) + (((_2945 * _2946) + _2916) * _2931))) * _2945;
                        float _4306 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2967 = (((_2917 * 3.1415927410125732421875) * (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) / ((_2939 * _2939) * ((_2882 * 2.1991131305694580078125) + 3.141590118408203125))) * _2871;
                        _2697 = (_2886 * _2834.x) + _2792;
                        _2698 = (_2886 * _2834.y) + _2793;
                        _2699 = (_2886 * _2834.z) + _2794;
                        _2694 = (_2967 * _2851.x) + _2789;
                        _2695 = (_2967 * _2851.y) + _2790;
                        _2696 = (_2967 * _2851.z) + _2791;
                        if (_2796 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2789 = _2694;
                            _2790 = _2695;
                            _2791 = _2696;
                            _2792 = _2697;
                            _2793 = _2698;
                            _2794 = _2699;
                            _2795 = _2796;
                        }
                    }
                    frontier_phi_52_pred = _2696;
                    frontier_phi_52_pred_1 = _2699;
                    frontier_phi_52_pred_2 = _2698;
                    frontier_phi_52_pred_3 = _2697;
                    frontier_phi_52_pred_4 = _2695;
                    frontier_phi_52_pred_5 = _2694;
                }
                _2299 = frontier_phi_52_pred;
                _2305 = frontier_phi_52_pred_1;
                _2303 = frontier_phi_52_pred_2;
                _2301 = frontier_phi_52_pred_3;
                _2297 = frontier_phi_52_pred_4;
                _2295 = frontier_phi_52_pred_5;
                uint _2538 = _2537 + 1u;
                if (_2538 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2531 = _2295;
                    _2532 = _2297;
                    _2533 = _2299;
                    _2534 = _2301;
                    _2535 = _2303;
                    _2536 = _2305;
                    _2537 = _2538;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2294 = _2295;
            _2296 = _2297;
            _2298 = _2299;
            _2300 = _2301;
            _2302 = _2303;
            _2304 = _2305;
        }
        uvec4 _2308 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2309 = _2308.z;
        uint _2311 = (_2309 >> 8u) & 15u;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        if (((4294967295u << _2311) & _2147) == 0u)
        {
            _2499 = _2294;
            _2501 = _2296;
            _2503 = _2298;
            _2505 = _2300;
            _2507 = _2302;
            _2509 = _2304;
        }
        else
        {
            float _2524 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
            float _2525 = _2524 * _2101;
            float _2526 = _2524 * _2102;
            float _2527 = _2524 * _2103;
            float frontier_phi_43_44_ladder;
            float frontier_phi_43_44_ladder_1;
            float frontier_phi_43_44_ladder_2;
            float frontier_phi_43_44_ladder_3;
            float frontier_phi_43_44_ladder_4;
            float frontier_phi_43_44_ladder_5;
            if (_2311 < ((_2309 >> 12u) & 15u))
            {
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2510;
                float _2772 = _2294;
                float _2773 = _2296;
                float _2774 = _2298;
                float _2775 = _2300;
                float _2776 = _2302;
                float _2777 = _2304;
                uint _2778 = _2311;
                uint _2787;
                bool _2788;
                for (;;)
                {
                    _2787 = texelFetch(g_lightClassification, int((((_2141 << 5u) + (_2127 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                    _2788 = _2787 == 0u;
                    float frontier_phi_63_pred;
                    float frontier_phi_63_pred_1;
                    float frontier_phi_63_pred_2;
                    float frontier_phi_63_pred_3;
                    float frontier_phi_63_pred_4;
                    float frontier_phi_63_pred_5;
                    if (_2788)
                    {
                        frontier_phi_63_pred = _2777;
                        frontier_phi_63_pred_1 = _2776;
                        frontier_phi_63_pred_2 = _2775;
                        frontier_phi_63_pred_3 = _2774;
                        frontier_phi_63_pred_4 = _2773;
                        frontier_phi_63_pred_5 = _2772;
                    }
                    else
                    {
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3044 = _2772;
                        float _3045 = _2773;
                        float _3046 = _2774;
                        float _3047 = _2775;
                        float _3048 = _2776;
                        float _3049 = _2777;
                        uint _3050 = _2787;
                        uint _3051;
                        vec4 _3076;
                        float _3077;
                        vec4 _3092;
                        vec3 _3104;
                        vec4 _3119;
                        vec4 _3134;
                        float _3181;
                        bool _3182;
                        for (;;)
                        {
                            uint _3061 = ((_2778 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3050));
                            _3051 = (_3050 + 4294967295u) & _3050;
                            uint _3063 = _3061 * 40u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            _3077 = _3076.w;
                            uint _3079 = (_3061 * 40u) + 4u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3061 * 40u) + 8u;
                            _3104 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x));
                            uint _3106 = (_3061 * 40u) + 16u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3121 = (_3061 * 40u) + 20u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3137 = (_3061 * 40u) + 24u;
                            vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3156 = (_3061 * 40u) + 28u;
                            vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3181 = fma(_2103, _3169.z, fma(_2102, _3169.y, _3169.x * _2101)) + _3169.w;
                            _3182 = !((fma(_2103, _3150.z, fma(_2102, _3150.y, _3150.x * _2101)) + _3150.w) <= 0.0);
                            float frontier_phi_69_pred;
                            float frontier_phi_69_pred_1;
                            float frontier_phi_69_pred_2;
                            float frontier_phi_69_pred_3;
                            float frontier_phi_69_pred_4;
                            float frontier_phi_69_pred_5;
                            if (_3182)
                            {
                                float _3209 = _3076.x - _2101;
                                float _3210 = _3076.y - _2102;
                                float _3211 = _3076.z - _2103;
                                float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                                float _3215 = inversesqrt(_3212);
                                float _3216 = _3215 * _3209;
                                float _3217 = _3215 * _3210;
                                float _3218 = _3215 * _3211;
                                float _3222 = 1.0 - (_3212 / (_3077 * _3077));
                                float _4317 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3227 = sqrt(_3212) * _3092.w;
                                float _3229 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                                float _3230 = _3229 * _3229;
                                float _3233 = ((1.0 - _3230) * dot(vec3(_3216, _3217, _3218), vec3(_819, _822, _825))) + _3230;
                                float _3236 = _3227 * _3227;
                                float _3240 = (fma(_2103, _3119.z, fma(_2102, _3119.y, _3119.x * _2101)) + _3119.w) / _3181;
                                float _3241 = (fma(_2103, _3134.z, fma(_2102, _3134.y, _3134.x * _2101)) + _3134.w) / _3181;
                                float _3245 = 1.0 - dot(vec2(_3240, _3241), vec2(_3240, _3241));
                                float _4333 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3247 = _3246 * (((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3223) / ((_3236 * 0.699999988079071044921875) + 1.0));
                                float _3259 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                                float _3260 = 1.0 - _892;
                                float _3267 = sqrt(1.0 - ((1.0 - (_3260 * _3260)) * (1.0 - (_3259 * _3259))));
                                float _3268 = _3267 * _3267;
                                float _3269 = _3268 * _3268;
                                float _3270 = _3216 - _2525;
                                float _3271 = _3217 - _2526;
                                float _3272 = _3218 - _2527;
                                float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                                float _3280 = dot(vec3(_819, _822, _825), vec3((-0.0) - _2525, (-0.0) - _2526, (-0.0) - _2527));
                                float _4344 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3283 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3284 = dot(vec3(_819, _822, _825), vec3(_3276 * _3270, _3276 * _3271, _3276 * _3272));
                                float _4355 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3291 = ((_3287 * _3287) * (_3269 + (-1.0))) + 1.0;
                                float _3292 = _3229 * _3268;
                                float _3293 = _3292 * _3292;
                                float _3299 = ((1.0 - _3293) * dot(vec3(_819, _822, _825), vec3(_3216, _3217, _3218))) + _3293;
                                float _4366 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3301 = 1.0 - _3268;
                                float _3311 = (0.5 / (((_3300 * ((_3283 * _3301) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3268) * _3283))) * _3300;
                                float _4377 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3321 = (_3246 * _3223) * (((_3269 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3291 * _3291) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_69_pred = _3321 * _3104.z;
                                frontier_phi_69_pred_1 = _3247 * _3092.z;
                                frontier_phi_69_pred_2 = _3247 * _3092.y;
                                frontier_phi_69_pred_3 = _3247 * _3092.x;
                                frontier_phi_69_pred_4 = _3321 * _3104.y;
                                frontier_phi_69_pred_5 = _3321 * _3104.x;
                            }
                            else
                            {
                                frontier_phi_69_pred = 0.0;
                                frontier_phi_69_pred_1 = 0.0;
                                frontier_phi_69_pred_2 = 0.0;
                                frontier_phi_69_pred_3 = 0.0;
                                frontier_phi_69_pred_4 = 0.0;
                                frontier_phi_69_pred_5 = 0.0;
                            }
                            _3327 = frontier_phi_69_pred;
                            _3330 = frontier_phi_69_pred_1;
                            _3329 = frontier_phi_69_pred_2;
                            _3328 = frontier_phi_69_pred_3;
                            _3326 = frontier_phi_69_pred_4;
                            _3325 = frontier_phi_69_pred_5;
                            _3034 = _3328 + _3047;
                            _3035 = _3329 + _3048;
                            _3036 = _3330 + _3049;
                            _3031 = _3325 + _3044;
                            _3032 = _3326 + _3045;
                            _3033 = _3327 + _3046;
                            if (_3051 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3051;
                                continue;
                            }
                        }
                        frontier_phi_63_pred = _3036;
                        frontier_phi_63_pred_1 = _3035;
                        frontier_phi_63_pred_2 = _3034;
                        frontier_phi_63_pred_3 = _3033;
                        frontier_phi_63_pred_4 = _3032;
                        frontier_phi_63_pred_5 = _3031;
                    }
                    _2510 = frontier_phi_63_pred;
                    _2508 = frontier_phi_63_pred_1;
                    _2506 = frontier_phi_63_pred_2;
                    _2504 = frontier_phi_63_pred_3;
                    _2502 = frontier_phi_63_pred_4;
                    _2500 = frontier_phi_63_pred_5;
                    uint _2779 = _2778 + 1u;
                    if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2772 = _2500;
                        _2773 = _2502;
                        _2774 = _2504;
                        _2775 = _2506;
                        _2776 = _2508;
                        _2777 = _2510;
                        _2778 = _2779;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_43_44_ladder = _2510;
                frontier_phi_43_44_ladder_1 = _2500;
                frontier_phi_43_44_ladder_2 = _2508;
                frontier_phi_43_44_ladder_3 = _2506;
                frontier_phi_43_44_ladder_4 = _2504;
                frontier_phi_43_44_ladder_5 = _2502;
            }
            else
            {
                frontier_phi_43_44_ladder = _2304;
                frontier_phi_43_44_ladder_1 = _2294;
                frontier_phi_43_44_ladder_2 = _2302;
                frontier_phi_43_44_ladder_3 = _2300;
                frontier_phi_43_44_ladder_4 = _2298;
                frontier_phi_43_44_ladder_5 = _2296;
            }
            _2499 = frontier_phi_43_44_ladder_1;
            _2501 = frontier_phi_43_44_ladder_5;
            _2503 = frontier_phi_43_44_ladder_4;
            _2505 = frontier_phi_43_44_ladder_3;
            _2507 = frontier_phi_43_44_ladder_2;
            _2509 = frontier_phi_43_44_ladder;
        }
        float _2514 = isnan(1.0) ? _863 : (isnan(_863) ? 1.0 : min(_863, 1.0));
        _2159 = (_2514 * _2505) + _1959;
        _2161 = (_2514 * _2507) + _1960;
        _2163 = (_2514 * _2509) + _1961;
        _2165 = ((_2499 * 0.039999999105930328369140625) * _2514) + _2037;
        _2167 = ((_2501 * 0.039999999105930328369140625) * _2514) + _2041;
        _2169 = ((_2503 * 0.039999999105930328369140625) * _2514) + _2045;
    }
    else
    {
        _2159 = _1959;
        _2161 = _1960;
        _2163 = _1961;
        _2165 = _2037;
        _2167 = _2041;
        _2169 = _2045;
    }
    float _2189 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2190 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2191 = cbSceneParam._m0[86u].x * ((_797 / cbSceneParam._m0[86u].x) + (((10.0 / (_754 + 10.0)) * cbMtdParam._m0[12u].y) * dot(vec3(_726, _727, _728), vec3(_201, _202, _203))));
    float _2192 = isnan(_2189) ? _2191 : (isnan(_2191) ? _2189 : min(_2191, _2189));
    float _2193 = isnan(_2190) ? _798 : (isnan(_798) ? _2190 : min(_798, _2190));
    vec4 _2195 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2192, _2193), 0.0);
    float _2197 = _2195.x;
    bool _2217 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2197)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2197))) > _754;
    float _2218 = _2217 ? _2192 : _797;
    float _2219 = _2217 ? _2193 : _798;
    vec4 _2221 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2218, _2219));
    vec4 _2226 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2218, _2219));
    float _2228 = _2226.x;
    bool _2233 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2242 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2248 = (_2233 ? (_2242 / (cbSceneParam._m0[2u].x - _2228)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2228))) - _754;
    float _2250 = cbMtdParam._m0[21u].z + 0.008000000379979610443115234375;
    float _2252 = cbMtdParam._m0[21u].w + 0.008000000379979610443115234375;
    float _2253 = cbMtdParam._m0[22u].x + 0.008000000379979610443115234375;
    bool _2259 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2263 = (isnan(_2248) ? 0.0 : (isnan(0.0) ? _2248 : max(0.0, _2248))) * (-1.44269502162933349609375);
    float _4408 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4419 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4430 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _2394;
    float _2395;
    float _2396;
    if ((1.0 - _695) > 0.00999999977648258209228515625)
    {
        vec4 _2316 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2218, _2219), 0.0);
        float _2318 = _2316.x;
        float _2324 = (_2233 ? (_2242 / (cbSceneParam._m0[2u].x - _2318)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2318))) - _754;
        uint _2330 = floatBitsToUint(cbInstanceData._m0[_1921]).x * 14u;
        uint _2336 = _2330 + 4u;
        float _2345 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_222, _223, _224));
        float _2353 = dot(vec3((-0.0) - _790, (-0.0) - _791, (-0.0) - _792), vec3((-0.0) - _222, (-0.0) - _223, (-0.0) - _224));
        float _2358 = ((isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2345 : (isnan(_2345) ? 0.001000000047497451305389404296875 : max(_2345, 0.001000000047497451305389404296875)))) + 1.0;
        float _2360 = (-0.0) - ((isnan(_2324) ? 0.0 : (isnan(0.0) ? _2324 : max(0.0, _2324))) * _2358);
        _2394 = _2259 ? 0.0 : (((cbLight._m0[_2336].x * 0.00063661974854767322540283203125) / ((_2358 * _2250) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2250 * 1.44269502162933349609375) * _2360)));
        _2395 = _2259 ? 0.0 : (((cbLight._m0[_2336].y * 0.00063661974854767322540283203125) / ((_2358 * _2252) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2252 * 1.44269502162933349609375) * _2360)));
        _2396 = _2259 ? 0.0 : (((cbLight._m0[_2336].z * 0.00063661974854767322540283203125) / ((_2358 * _2253) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2253 * 1.44269502162933349609375) * _2360)));
    }
    else
    {
        _2394 = 0.0;
        _2395 = 0.0;
        _2396 = 0.0;
    }
    float _2413 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _2414 = (_2394 + ((exp2(_2263 * (_2259 ? 0.0 : _2250)) * _2221.x) * cbSceneParam._m0[72u].w)) * _2413;
    float _2415 = (_2395 + ((exp2(_2263 * (_2259 ? 0.0 : _2252)) * _2221.y) * cbSceneParam._m0[72u].w)) * _2413;
    float _2416 = (_2396 + ((exp2(_2263 * (_2259 ? 0.0 : _2253)) * _2221.z) * cbSceneParam._m0[72u].w)) * _2413;
    float _2438 = _797 / cbSceneParam._m0[86u].x;
    float _2439 = _798 / cbSceneParam._m0[86u].y;
    vec4 _2453 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2438, _2439, (log2((isnan(cbSceneParam._m0[77u].w) ? _754 : (isnan(_754) ? cbSceneParam._m0[77u].w : min(_754, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2455 = _2453.x;
    float _2456 = _2453.y;
    float _2457 = _2453.z;
    float _2458 = _2453.w;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    if (_754 > cbSceneParam._m0[78u].w)
    {
        float _2552 = isnan(_754) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _754 : min(cbSceneParam._m0[80u].w, _754));
        float _2553 = _2552 / _754;
        float _2564 = _2553 * _783;
        float _2565 = _784 * _2553;
        float _2566 = (-0.0) - _2565;
        float _2567 = _2553 * _785;
        float _2569 = (cbSceneParam._m0[77u].w * _2566) / _2552;
        float _2570 = _2569 + cbSceneParam._m0[79u].w;
        float _2571 = cbSceneParam._m0[79u].w - _2565;
        float _2577 = sqrt(((_2564 * _2564) + (_2565 * _2565)) + (_2567 * _2567));
        float _2580 = (1.0 - (cbSceneParam._m0[77u].w / _2552)) * _2577;
        float _2585 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2586 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2972;
        if (abs((_2566 - _2569) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2972 = ((((_2570 > 0.0) ? exp2(_2585 * _2570) : (2.0 - exp2(_2586 * _2570))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2580;
        }
        else
        {
            float _2719 = 1.0 / cbSceneParam._m0[80u].x;
            float _2720 = isnan(_2571) ? _2570 : (isnan(_2570) ? _2571 : max(_2570, _2571));
            float _2721 = isnan(_2571) ? _2570 : (isnan(_2570) ? _2571 : min(_2570, _2571));
            float _2730 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : min(_2720, 0.0));
            float _2731 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : min(_2721, 0.0));
            _2972 = ((abs(_2577 / _2566) * cbSceneParam._m0[80u].y) * ((((_2730 - _2731) * 2.0) - ((exp2(_2585 * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0)))) - exp2(_2585 * (isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0))))) * _2719)) - ((exp2(_2586 * _2730) - exp2(_2586 * _2731)) * _2719))) + (_2580 * cbSceneParam._m0[80u].z);
        }
        vec4 _2974 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2438, _2439, 1.0), 0.0);
        float _2983 = exp2((_2972 * (-1.44269502162933349609375)) * (1.0 - _2974.w));
        float _2984 = log2(_2983);
        float _3000 = log2(_2458);
        _2587 = (exp2(_3000 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].x)) * _2974.x) / cbSceneParam._m0[78u].x)) + _2455;
        _2589 = (exp2(_3000 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].y)) * _2974.y) / cbSceneParam._m0[78u].y)) + _2456;
        _2591 = (exp2(_3000 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].z)) * _2974.z) / cbSceneParam._m0[78u].z)) + _2457;
        _2593 = _2983 * _2458;
    }
    else
    {
        _2587 = _2455;
        _2589 = _2456;
        _2591 = _2457;
        _2593 = _2458;
    }
    bool _2605 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2606 = log2(_2593);
    float _2613 = exp2(_2606 * cbSceneParam._m0[78u].x) * ((_2414 + ((_2165 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1679)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2159 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _863))) - _2414) * _695));
    float _2614 = exp2(_2606 * cbSceneParam._m0[78u].y) * ((_2415 + ((_2167 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1679)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2161 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _863))) - _2415) * _695));
    float _2615 = exp2(_2606 * cbSceneParam._m0[78u].z) * ((_2416 + ((_2169 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1679)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2163 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _863))) - _2416) * _695));
    vec4 _2623 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_797, _798));
    float _2625 = _2623.x;
    float _2646 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2625)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2625))) - _754) * 3.0;
    float _4496 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2648 = (cbInstanceData._m0[_838 + 6u].w * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)));
    float _2657 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2657 * (_2605 ? _2613 : (_2613 + (cbSceneParam._m0[72u].w * _2587)));
    SV_Target.y = _2657 * (_2605 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2589)));
    SV_Target.z = _2657 * (_2605 ? _2615 : (_2615 + (cbSceneParam._m0[72u].w * _2591)));
    SV_Target.w = _2648;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2648;
}


