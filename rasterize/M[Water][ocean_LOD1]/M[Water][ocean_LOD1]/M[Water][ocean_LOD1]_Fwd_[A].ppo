#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1286;
float _3527;
float _3528;
float _3529;
float _3530;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    float _295 = cbMtdParam._m0[13u].w - cbMtdParam._m0[13u].z;
    float _297 = (sqrt(((_280 * _280) + (_281 * _281)) + (_282 * _282)) - cbMtdParam._m0[13u].z) / (isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0)));
    float _302 = _297 / cbMtdParam._m0[15u].y;
    float _303 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _304 = isnan(8.0) ? _303 : (isnan(_303) ? 8.0 : min(_303, 8.0));
    float _311 = cbMtdParam._m0[10u].x * _304;
    float _312 = cbMtdParam._m0[10u].y * _304;
    float _313 = cbMtdParam._m0[10u].z * _304;
    float _314 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _315 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _316 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _330 = cbMtdParam._m0[14u].x + _297;
    float _335 = _330 * cbMtdParam._m0[16u].x;
    float _3584 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    vec4 _356 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _359 = _356.x;
    bool _366 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _382 = ((_366 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _359)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _359))) - POSITION_1.w) / cbMtdParam._m0[12u].w;
    float _3595 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _386 = 1.0 - (isnan(0.75) ? _383 : (isnan(_383) ? 0.75 : max(_383, 0.75)));
    float _388 = (cbMtdParam._m0[17u].z + TEXCOORD_3.x) - (_386 * cbMtdParam._m0[13u].y);
    float _398 = cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x;
    vec4 _414 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_2, SS_BumpMap), vec2((((_398 * cbMtdParam._m0[19u].x) + TEXCOORD) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_398 * cbMtdParam._m0[19u].y) + TEXCOORD_1) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _3611 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _420 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _421 = _414.z - _420;
    float _3622 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _434 = (_422 * 0.00999999977648258209228515625) + TEXCOORD;
    float _436 = (_422 * (-0.00999999977648258209228515625)) + TEXCOORD_1;
    vec4 _449 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((_434 + (cbMtdParam._m0[18u].z * _398)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_436 + (cbMtdParam._m0[18u].w * _398)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _453 = _449.z;
    vec4 _464 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((_434 + (cbMtdParam._m0[18u].x * _398)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_436 + (cbMtdParam._m0[18u].y * _398)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _468 = _464.z;
    float _471 = (_386 - _414.w) + (isnan(_468) ? _453 : (isnan(_453) ? _468 : max(_453, _468)));
    float _3638 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _473 = (_388 * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)));
    float _485 = (_473 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[11u].x * _422);
    float _486 = (_473 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[11u].y * _422);
    float _487 = (_473 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[11u].z * _422);
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    vec4 _530 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_510 / cbMtdParam._m0[14u].y) + (cbMtdParam._m0[19u].z * _398))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_514 / cbMtdParam._m0[14u].y) + (cbMtdParam._m0[19u].w * _398))) + cbTextureTilingScale._m0[1u].w));
    float _535 = _530.z * 0.099999986588954925537109375;
    float _3649 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _537 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _541 = cbMtdParam._m0[15u].w * _297;
    float _3660 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _556 = (_485 + (isnan(0.07999999821186065673828125) ? _314 : (isnan(_314) ? 0.07999999821186065673828125 : min(_314, 0.07999999821186065673828125)))) + (_542 * (((1.0 - _485) - _537) + _535));
    float _558 = (_486 + (isnan(0.07999999821186065673828125) ? _315 : (isnan(_315) ? 0.07999999821186065673828125 : min(_315, 0.07999999821186065673828125)))) + (_542 * (((1.0 - _486) - _537) + _535));
    float _560 = (_487 + (isnan(0.07999999821186065673828125) ? _316 : (isnan(_316) ? 0.07999999821186065673828125 : min(_316, 0.07999999821186065673828125)))) + (_542 * (((1.0 - _487) + _535) - _537));
    float _3671 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _561 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _3682 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _562 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _570 = _297 / cbMtdParam._m0[17u].x;
    float _3704 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = (1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * cbMtdParam._m0[16u].w;
    float _580 = ((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _420) + cbMtdParam._m0[12u].x;
    float _3715 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _581 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _590 = _297 / cbMtdParam._m0[15u].z;
    float _3726 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _592 = _422 * 0.23999999463558197021484375;
    float _594 = _422 * (-0.20000000298023223876953125);
    float _605 = cbMtdParam._m0[20u].z * TEXCOORD;
    float _606 = cbMtdParam._m0[20u].w * TEXCOORD_1;
    vec4 _615 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[20u].x * _398) + _592) + _605) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[20u].y * _398) + _594) + _606) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _634 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2((((_605 + _592) + (cbMtdParam._m0[21u].x * _398)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_606 + _594) + (cbMtdParam._m0[21u].y * _398)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _653 = (((_464.x + (-0.5)) * 0.5) + _449.x) + (((_615.x + (-1.0)) + _634.x) * cbMtdParam._m0[17u].y);
    float _654 = (((_464.y + (-0.5)) * 0.5) + _449.y) + (((_615.y + (-1.0)) + _634.y) * cbMtdParam._m0[17u].y);
    float _659 = ((_530.x - _653) * _591) + _653;
    float _660 = ((_530.y - _654) * _591) + _654;
    float _662 = _297 / cbMtdParam._m0[15u].x;
    float _3737 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _680 = ((((_581 * (0.5 - _416)) + _416) + (((_659 + (-0.5)) + ((0.5 - _659) * _663)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _681 = ((((_581 * (0.5 - _417)) + _417) + (((_660 + (-0.5)) + ((0.5 - _660) * _663)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _682 = dot(vec2(_680, _681), vec2(_680, _681));
    float _3748 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _687 = sqrt(1.0 - (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))));
    float _689 = cbMtdParam._m0[16u].y * _330;
    float _3759 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _694 = cbMtdParam._m0[14u].z * _330;
    float _3770 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _696 = (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * cbMtdParam._m0[17u].w;
    float _3781 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _702 = ((cbMtdParam._m0[16u].z - cbMtdParam._m0[14u].w) * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) + cbMtdParam._m0[14u].w;
    float _707 = _680 - (_702 * _680);
    float _708 = _681 - (_702 * _681);
    float _709 = (_702 * (1.0 - _687)) + _687;
    float _717 = fma(_687, _224, fma(_681, _217, _680 * _203));
    float _720 = fma(_687, _225, fma(_681, _218, _680 * _204));
    float _723 = fma(_687, _226, fma(_681, _219, _680 * _205));
    float _727 = inversesqrt(dot(vec3(_717, _720, _723), vec3(_717, _720, _723)));
    float _728 = _727 * _717;
    float _729 = _727 * _720;
    float _730 = _727 * _723;
    float _733 = fma(_709, _224, fma(_708, _217, _707 * _203));
    float _736 = fma(_709, _225, fma(_708, _218, _707 * _204));
    float _739 = fma(_709, _226, fma(_708, _219, _707 * _205));
    float _743 = inversesqrt(dot(vec3(_733, _736, _739), vec3(_733, _736, _739)));
    float _744 = _743 * _733;
    float _745 = _743 * _736;
    float _746 = _743 * _739;
    float _3792 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3803 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _748 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3825 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3836 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _756 = _366 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _785 = cbSceneParam._m0[71u].x - (_510 / _776);
    float _786 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _776);
    float _787 = cbSceneParam._m0[71u].z - (_514 / _776);
    float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
    float _792 = _785 * _791;
    float _793 = _786 * _791;
    float _794 = _787 * _791;
    vec4 _799 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _801 = _799.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _968 = sqrt(((_785 * _785) + (_786 * _786)) + (_787 * _787));
        float _974 = (cbMatDynParam._m0[5u].x * _968) + cbMatDynParam._m0[5u].y;
        float _3847 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _979 = (cbMatDynParam._m0[5u].z * _968) + cbMatDynParam._m0[5u].w;
        float _3858 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) - _975)) + _975) < ((_801 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _812 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _813 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _833 = fma(_730, cbSceneParam._m0[5u].z, fma(_729, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _728));
    float _836 = fma(_730, cbSceneParam._m0[6u].z, fma(_729, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _728));
    float _839 = fma(_730, cbSceneParam._m0[7u].z, fma(_729, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _728));
    uint _852 = uint(roundEven(NORMAL.w)) * 13u;
    uint _853 = _852 + 9u;
    uint _854 = _853 + uint(cbMatDynParam._m0[0u].w);
    float _860 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * cbInstanceData._m0[_854].x;
    float _861 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_854].y;
    float _862 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_854].z;
    float _3869 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    vec4 _874 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _812, cbSceneParam._m0[86u].y * _813));
    float _877 = _874.x * TEXCOORD_3.w;
    float _881 = abs(dot(vec3(_792, _793, _794), vec3(_728, _729, _730)));
    float _3902 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _894 = dot(vec3(_744, _745, _746), vec3(_792, _793, _794)) * 2.0;
    float _898 = (_894 * _744) - _792;
    float _899 = (_894 * _745) - _793;
    float _900 = (_894 * _746) - _794;
    float _904 = abs(dot(vec3(_792, _793, _794), vec3(_744, _745, _746)));
    float _3913 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _906 = sqrt(_748);
    float _918 = exp2((_906 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_906 * 3.0));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1285;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1012 = fma(_957, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949));
        float _1016 = fma(_957, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949));
        float _1020 = fma(_957, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949));
        float _1043 = _949 + _744;
        float _1044 = _953 + _745;
        float _1045 = _957 + _746;
        float _1055 = fma(_1045, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043)) - _1012;
        float _1056 = fma(_1045, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043)) - _1016;
        float _1057 = fma(_1045, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043)) - _1020;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1012 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1016 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[34u].z) + ((((((_1020 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1113 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1079.x + (-0.5));
        float _1115 = _1113 * (_1079.y + (-0.5));
        float _1116 = _1113 * (_1079.z + (-0.5));
        float _1123 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1086.x + (-0.5));
        float _1125 = _1123 * (_1086.y + (-0.5));
        float _1126 = _1123 * (_1086.z + (-0.5));
        float _1133 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1093.x + (-0.5));
        float _1135 = _1133 * (_1093.y + (-0.5));
        float _1136 = _1133 * (_1093.z + (-0.5));
        float _1143 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1100.x + (-0.5));
        float _1145 = _1143 * (_1100.y + (-0.5));
        float _1146 = _1143 * (_1100.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1167 = (dot(vec3(_744, _745, _746), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1177 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3961 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1179 + 1.0))) + _1184) * _1147;
        float _1194 = _1115 * 0.5;
        float _1195 = _1125 * 0.5;
        float _1196 = _1135 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_744, _745, _746), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3994 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1221 + 1.0))) + _1226) * _1148;
        float _1236 = _1116 * 0.5;
        float _1237 = _1126 * 0.5;
        float _1238 = _1136 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_744, _745, _746), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4027 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1263 + 1.0))) + _1268) * _1149;
        _1285 = _1116;
        _1287 = _1115;
        _1288 = _1114;
        _1289 = _1126;
        _1290 = _1125;
        _1291 = _1124;
        _1292 = _1136;
        _1293 = _1135;
        _1294 = _1134;
        _1295 = _1149;
        _1296 = _1148;
        _1297 = _1147;
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
    }
    else
    {
        _1285 = _1286;
        _1287 = _1286;
        _1288 = _1286;
        _1289 = _1286;
        _1290 = _1286;
        _1291 = _1286;
        _1292 = _1286;
        _1293 = _1286;
        _1294 = _1286;
        _1295 = _1286;
        _1296 = _1286;
        _1297 = _1286;
        _1298 = 0.0;
        _1299 = 0.0;
        _1300 = 0.0;
    }
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1329 = fma(_957, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949));
        float _1333 = fma(_957, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949));
        float _1337 = fma(_957, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949));
        float _1360 = _949 + _744;
        float _1361 = _953 + _745;
        float _1362 = _957 + _746;
        float _1372 = fma(_1362, cbModelParam._m0[30u].z, fma(_1361, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1360)) - _1329;
        float _1373 = fma(_1362, cbModelParam._m0[31u].z, fma(_1361, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1360)) - _1333;
        float _1374 = fma(_1362, cbModelParam._m0[32u].z, fma(_1361, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1360)) - _1337;
        float _1378 = inversesqrt(dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374)));
        float _1391 = ((_1378 * _1372) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1329 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1378 * _1373) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1333 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1378 * _1374) / cbModelParam._m0[35u].z) + ((((((_1337 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        float _1428 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1395.x + (-0.5));
        float _1430 = _1428 * (_1395.y + (-0.5));
        float _1431 = _1428 * (_1395.z + (-0.5));
        float _1438 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1402.x + (-0.5));
        float _1440 = _1438 * (_1402.y + (-0.5));
        float _1441 = _1438 * (_1402.z + (-0.5));
        float _1448 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1409.x + (-0.5));
        float _1450 = _1448 * (_1409.y + (-0.5));
        float _1451 = _1448 * (_1409.z + (-0.5));
        float _1458 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1416.x + (-0.5));
        float _1460 = _1458 * (_1416.y + (-0.5));
        float _1461 = _1458 * (_1416.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_744, _745, _746), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4090 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1492 + 1.0))) + _1497) * _1462;
        float _1507 = _1430 * 0.5;
        float _1508 = _1440 * 0.5;
        float _1509 = _1450 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_744, _745, _746), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4123 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1534 + 1.0))) + _1539) * _1463;
        float _1549 = _1431 * 0.5;
        float _1550 = _1441 * 0.5;
        float _1551 = _1451 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_744, _745, _746), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4156 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1576 + 1.0))) + _1581) * _1464;
        _1598 = _1431;
        _1599 = _1430;
        _1600 = _1429;
        _1601 = _1441;
        _1602 = _1440;
        _1603 = _1439;
        _1604 = _1451;
        _1605 = _1450;
        _1606 = _1449;
        _1607 = _1464;
        _1608 = _1463;
        _1609 = _1462;
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
    }
    else
    {
        _1598 = _1286;
        _1599 = _1286;
        _1600 = _1286;
        _1601 = _1286;
        _1602 = _1286;
        _1603 = _1286;
        _1604 = _1286;
        _1605 = _1286;
        _1606 = _1286;
        _1607 = _1286;
        _1608 = _1286;
        _1609 = _1286;
        _1610 = 0.0;
        _1611 = 0.0;
        _1612 = 0.0;
    }
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1298)) + _1298;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1299)) + _1299;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1300)) + _1300;
    float _1645 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1622));
    float _1666 = _898 * 0.5;
    float _1667 = _899 * 0.5;
    float _1668 = _900 * 0.5;
    float _1669 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1672 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1675 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1709;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1682 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1285, _1289, _1292, _1295));
        float _1686 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1690 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1697 = dot(vec4(cbModelParam._m0[39u]), vec4(_1666, _1667, _1668, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1720;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1711 = dot(vec4(cbModelParam._m0[40u]), vec4(_1666, _1667, _1668, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1724 = (_1720 * cbModelParam._m0[1u].x) + (_1709 * (1.0 - cbModelParam._m0[1u].x));
    float _1734 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _748);
    float _1735 = isnan(_1734) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1734 : min(cbModelParam._m0[25u].z, _1734));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1782 = fma(_957, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949)) + cbModelParam._m0[13u].w;
        float _1786 = fma(_957, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949)) + cbModelParam._m0[14u].w;
        float _1790 = fma(_957, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949)) + cbModelParam._m0[15u].w;
        float _1793 = fma(_900, cbModelParam._m0[13u].z, fma(_899, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898));
        float _1796 = fma(_900, cbModelParam._m0[14u].z, fma(_899, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898));
        float _1799 = fma(_900, cbModelParam._m0[15u].z, fma(_899, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898));
        float _1827;
        if (_1793 > 0.0)
        {
            _1827 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1827 = frontier_phi_19_17_ladder;
        }
        float _2072;
        if (_1796 > 0.0)
        {
            _2072 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2072 = frontier_phi_28_24_ladder;
        }
        float _2488;
        if (_1799 > 0.0)
        {
            _2488 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2488 = frontier_phi_42_35_ladder;
        }
        float _2490 = isnan(_2072) ? _1827 : (isnan(_1827) ? _2072 : min(_1827, _2072));
        float _2491 = isnan(_2488) ? _2490 : (isnan(_2490) ? _2488 : min(_2490, _2488));
        float _2495 = (_2491 * _1793) + _1782;
        float _2496 = (_2491 * _1796) + _1786;
        float _2497 = (_2491 * _1799) + _1790;
        float _2498 = _2491 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2498;
        float _2502 = _2498 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 > _2502) || ((_2496 < _2500) || ((_2495 < _2500) || (_2495 > _2502))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2714 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2497, cbModelParam._m0[9u].z, fma(_2496, cbModelParam._m0[9u].y, _2495 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2497, cbModelParam._m0[10u].z, fma(_2496, cbModelParam._m0[10u].y, _2495 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2497, cbModelParam._m0[11u].z, fma(_2496, cbModelParam._m0[11u].y, _2495 * cbModelParam._m0[11u].x))), _1735);
            frontier_phi_18_42_ladder = _2714.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _2714.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _2714.x * cbModelParam._m0[1u].y;
        }
        _1815 = frontier_phi_18_42_ladder_2;
        _1817 = frontier_phi_18_42_ladder_1;
        _1819 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_898, _899, _900), _1735);
        _1815 = _1803.x * cbModelParam._m0[1u].y;
        _1817 = _1803.y * cbModelParam._m0[1u].y;
        _1819 = _1803.z * cbModelParam._m0[1u].y;
    }
    float _1823 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _748);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1823 : min(cbModelParam._m0[25u].w, _1823));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1877 = fma(_957, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949)) + cbModelParam._m0[21u].w;
        float _1881 = fma(_957, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949)) + cbModelParam._m0[22u].w;
        float _1885 = fma(_957, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949)) + cbModelParam._m0[23u].w;
        float _1888 = fma(_900, cbModelParam._m0[21u].z, fma(_899, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898));
        float _1891 = fma(_900, cbModelParam._m0[22u].z, fma(_899, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898));
        float _1894 = fma(_900, cbModelParam._m0[23u].z, fma(_899, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898));
        float _2077;
        if (_1888 > 0.0)
        {
            _2077 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2077 = frontier_phi_30_26_ladder;
        }
        float _2515;
        if (_1891 > 0.0)
        {
            _2515 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _2515 = frontier_phi_44_37_ladder;
        }
        float _2791;
        if (_1894 > 0.0)
        {
            _2791 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_61_53_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_61_53_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_61_53_ladder = 5000.0;
            }
            _2791 = frontier_phi_61_53_ladder;
        }
        float _2793 = isnan(_2515) ? _2077 : (isnan(_2077) ? _2515 : min(_2077, _2515));
        float _2794 = isnan(_2791) ? _2793 : (isnan(_2793) ? _2791 : min(_2793, _2791));
        float _2798 = (_2794 * _1888) + _1877;
        float _2799 = (_2794 * _1891) + _1881;
        float _2800 = (_2794 * _1894) + _1885;
        float _2801 = _2794 * 9.9999997473787516355514526367188e-05;
        float _2802 = (-1.0) - _2801;
        float _2804 = _2801 + 1.0;
        float frontier_phi_27_61_ladder;
        float frontier_phi_27_61_ladder_1;
        float frontier_phi_27_61_ladder_2;
        if ((_2800 > _2804) || ((_2800 < _2802) || ((_2799 > _2804) || ((_2799 < _2802) || ((_2798 < _2802) || (_2798 > _2804))))))
        {
            frontier_phi_27_61_ladder = 0.0;
            frontier_phi_27_61_ladder_1 = 0.0;
            frontier_phi_27_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3076 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2800, cbModelParam._m0[17u].z, fma(_2799, cbModelParam._m0[17u].y, _2798 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2800, cbModelParam._m0[18u].z, fma(_2799, cbModelParam._m0[18u].y, _2798 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2800, cbModelParam._m0[19u].z, fma(_2799, cbModelParam._m0[19u].y, _2798 * cbModelParam._m0[19u].x))), _1824);
            frontier_phi_27_61_ladder = _3076.y * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_1 = _3076.z * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_2 = _3076.x * cbModelParam._m0[1u].z;
        }
        _1913 = frontier_phi_27_61_ladder_2;
        _1915 = frontier_phi_27_61_ladder;
        _1917 = frontier_phi_27_61_ladder_1;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_898, _899, _900), _1824);
        _1913 = _1897.x * cbModelParam._m0[1u].z;
        _1915 = _1897.y * cbModelParam._m0[1u].z;
        _1917 = _1897.z * cbModelParam._m0[1u].z;
    }
    float _1929 = ((((1.0 - _918) * ((_906 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_918 * _906)) * _877;
    float _1930 = _1929 * ((cbModelParam._m0[1u].w * (_1913 - _1815)) + _1815);
    float _1931 = _1929 * ((cbModelParam._m0[1u].w * (_1915 - _1817)) + _1817);
    float _1932 = _1929 * ((cbModelParam._m0[1u].w * (_1917 - _1819)) + _1819);
    float _1935 = fma(_1932, cbSceneParam._m0[89u].z, fma(_1931, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1932, cbSceneParam._m0[90u].z, fma(_1931, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1932, cbSceneParam._m0[91u].z, fma(_1931, cbSceneParam._m0[91u].y, _1930 * cbSceneParam._m0[91u].x));
    uint _1948 = _852 + 5u;
    uvec4 _1951 = floatBitsToUint(cbInstanceData._m0[_1948]);
    uint _1953 = _1951.x * 14u;
    float _1960 = (cbLight._m0[_1953 + 13u].x * (_877 + (-1.0))) + 1.0;
    uint _1961 = _1953 + 4u;
    float _1968 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
    float _1977 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_728, _729, _730));
    float _4287 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1981 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * 0.3183098733425140380859375;
    float _1983 = (cbLight._m0[_1961].x * _1968) * _1981;
    float _1984 = (_1968 * cbLight._m0[_1961].y) * _1981;
    float _1985 = (_1968 * cbLight._m0[_1961].z) * _1981;
    uint _1987 = _1953 + 8u;
    float _2000 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _748) * 0.949999988079071044921875);
    float _2001 = _2000 * _2000;
    float _2002 = cbLight._m0[_1953].x + _792;
    float _2003 = cbLight._m0[_1953].y + _793;
    float _2004 = cbLight._m0[_1953].z + _794;
    float _2008 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
    float _2009 = _2008 * _2002;
    float _2010 = _2008 * _2003;
    float _2011 = _2008 * _2004;
    float _2012 = dot(vec3(_728, _729, _730), vec3(cbLight._m0[_1953].xyz));
    float _4298 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2016 = dot(vec3(_728, _729, _730), vec3(_792, _793, _794));
    float _4309 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2020 = dot(vec3(_728, _729, _730), vec3(_2009, _2010, _2011));
    float _4320 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2024 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_2009, _2010, _2011));
    float _4331 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2028 = _2001 * _2001;
    float _2032 = ((_2023 * _2023) * (_2028 + (-1.0))) + 1.0;
    float _2043 = (exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2044 = 1.0 - _2001;
    float _2055 = (0.5 / (((_2019 * ((_2015 * _2044) + _2001)) + 9.9999999392252902907785028219223e-09) + (((_2019 * _2044) + _2001) * _2015))) * _2015;
    float _4342 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2057 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2028 / ((_2032 * _2032) * 3.141590118408203125));
    float _2060 = ((_2043 * cbLight._m0[_1987].x) * _2057) * _1968;
    float _2063 = ((_2043 * cbLight._m0[_1987].y) * _2057) * _1968;
    float _2066 = ((_2043 * cbLight._m0[_1987].z) * _2057) * _1968;
    float _2180;
    float _2182;
    float _2184;
    float _2186;
    float _2188;
    float _2190;
    if (_1951.y == 0u)
    {
        float _2121 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2122 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2121;
        float _2123 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2121;
        float _2124 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2121;
        uvec4 _2136 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2137 = _2136.x;
        uint _2148 = uint((float(_2136.y) * floor(float(uint(cbSceneParam._m0[85u].y * _813) / _2137))) + floor(float(uint(cbSceneParam._m0[85u].x * _812) / _2137)));
        float _2158 = (log2(_2124 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2159 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        uint _2162 = uint(isnan(14.0) ? _2159 : (isnan(_2159) ? 14.0 : min(_2159, 14.0)));
        uvec4 _2167 = texelFetch(g_lightClusterGridBuffer, int(((_2162 << 2u) + (_2148 << 6u)) >> 2u));
        uint _2168 = _2167.x;
        uint _2169 = _2136.z;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        if (((((1u << ((_2169 >> 4u) & 15u)) + 4294967295u) & _2168) == 0u) || ((_2169 & 240u) == 0u))
        {
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
        }
        else
        {
            float _2316;
            float _2318;
            float _2320;
            float _2322;
            float _2324;
            float _2326;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            float _2557 = 0.0;
            uint _2558 = 0u;
            uint _2567;
            bool _2568;
            for (;;)
            {
                _2567 = texelFetch(g_lightClassification, int((((_2162 << 5u) + (_2148 << 9u)) + (_2558 << 2u)) >> 2u)).x;
                _2568 = _2567 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2568)
                {
                    frontier_phi_55_pred = _2556;
                    frontier_phi_55_pred_1 = _2557;
                    frontier_phi_55_pred_2 = _2555;
                    frontier_phi_55_pred_3 = _2554;
                    frontier_phi_55_pred_4 = _2553;
                    frontier_phi_55_pred_5 = _2552;
                }
                else
                {
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    uint _2840;
                    _2834 = _2552;
                    _2835 = _2553;
                    _2836 = _2554;
                    _2837 = _2555;
                    _2838 = _2556;
                    _2839 = _2557;
                    _2840 = _2567;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    for (;;)
                    {
                        uint _2844 = uint(findLSB(_2840)) + (_2558 << 5u);
                        uint _2841 = (_2840 + 4294967295u) & _2840;
                        uint _2846 = _2844 * 48u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2866 = (_2844 * 48u) + 4u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2885 = (_2844 * 48u) + 8u;
                        vec3 _2896 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x));
                        float _2900 = _2860.x - _2122;
                        float _2901 = _2860.y - _2123;
                        float _2902 = _2860.z - _2124;
                        float _2903 = dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902));
                        float _2906 = inversesqrt(_2903);
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2910 = dot(vec3(_833, _836, _839), vec3(_2907, _2908, _2909));
                        float _2915 = 1.0 - (_2903 * _2860.w);
                        float _4363 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _2917 = sqrt(_2903) * _2879.w;
                        float _2920 = 1.39999997615814208984375 / (_2917 + 1.39999997615814208984375);
                        float _2921 = _2920 * _2920;
                        float _2924 = ((1.0 - _2921) * _2910) + _2921;
                        float _2927 = _2917 * _2917;
                        float _2931 = ((isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0))) * _2916) / ((_2927 * 0.699999988079071044921875) + 1.0);
                        float _2935 = (-0.0) - _2122;
                        float _2936 = (-0.0) - _2123;
                        float _2937 = (-0.0) - _2124;
                        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
                        float _2942 = _2941 * _2935;
                        float _2943 = _2941 * _2936;
                        float _2944 = _2941 * _2937;
                        float _2952 = exp2(log2(1.0 / ((_2927 * 3.5) + 5.0)) * 0.25);
                        float _2953 = 1.0 - _906;
                        float _2960 = sqrt(1.0 - ((1.0 - (_2953 * _2953)) * (1.0 - (_2952 * _2952))));
                        float _2961 = _2960 * _2960;
                        float _2962 = _2961 * _2961;
                        float _2963 = _2942 + _2907;
                        float _2964 = _2943 + _2908;
                        float _2965 = _2944 + _2909;
                        float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
                        float _2973 = dot(vec3(_833, _836, _839), vec3(_2942, _2943, _2944));
                        float _4379 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2976 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _2977 = dot(vec3(_833, _836, _839), vec3(_2969 * _2963, _2969 * _2964, _2969 * _2965));
                        float _4390 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2980 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                        float _2984 = ((_2980 * _2980) * (_2962 + (-1.0))) + 1.0;
                        float _2985 = _2920 * _2961;
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2910) + _2986;
                        float _4401 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2990 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _2991 = 1.0 - _2961;
                        float _3001 = (0.5 / (((_2990 * ((_2976 * _2991) + _2961)) + 9.9999999392252902907785028219223e-09) + (((_2990 * _2991) + _2961) * _2976))) * _2990;
                        float _4412 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3012 = (((_2962 * 3.1415927410125732421875) * (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) / ((_2984 * _2984) * ((_2927 * 2.1991131305694580078125) + 3.141590118408203125))) * _2916;
                        _2726 = (_2931 * _2879.x) + _2837;
                        _2727 = (_2931 * _2879.y) + _2838;
                        _2728 = (_2931 * _2879.z) + _2839;
                        _2723 = (_3012 * _2896.x) + _2834;
                        _2724 = (_3012 * _2896.y) + _2835;
                        _2725 = (_3012 * _2896.z) + _2836;
                        if (_2841 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2834 = _2723;
                            _2835 = _2724;
                            _2836 = _2725;
                            _2837 = _2726;
                            _2838 = _2727;
                            _2839 = _2728;
                            _2840 = _2841;
                        }
                    }
                    frontier_phi_55_pred = _2727;
                    frontier_phi_55_pred_1 = _2728;
                    frontier_phi_55_pred_2 = _2726;
                    frontier_phi_55_pred_3 = _2725;
                    frontier_phi_55_pred_4 = _2724;
                    frontier_phi_55_pred_5 = _2723;
                }
                _2324 = frontier_phi_55_pred;
                _2326 = frontier_phi_55_pred_1;
                _2322 = frontier_phi_55_pred_2;
                _2320 = frontier_phi_55_pred_3;
                _2318 = frontier_phi_55_pred_4;
                _2316 = frontier_phi_55_pred_5;
                uint _2559 = _2558 + 1u;
                if (_2559 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2552 = _2316;
                    _2553 = _2318;
                    _2554 = _2320;
                    _2555 = _2322;
                    _2556 = _2324;
                    _2557 = _2326;
                    _2558 = _2559;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
        }
        uvec4 _2329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2330 = _2329.z;
        uint _2332 = (_2330 >> 8u) & 15u;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        if (((4294967295u << _2332) & _2168) == 0u)
        {
            _2520 = _2315;
            _2522 = _2317;
            _2524 = _2319;
            _2526 = _2321;
            _2528 = _2323;
            _2530 = _2325;
        }
        else
        {
            float _2545 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
            float _2546 = _2545 * _2122;
            float _2547 = _2545 * _2123;
            float _2548 = _2545 * _2124;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_2332 < ((_2330 >> 12u) & 15u))
            {
                float _2521;
                float _2523;
                float _2525;
                float _2527;
                float _2529;
                float _2531;
                float _2817 = _2315;
                float _2818 = _2317;
                float _2819 = _2319;
                float _2820 = _2321;
                float _2821 = _2323;
                float _2822 = _2325;
                uint _2823 = _2332;
                uint _2832;
                bool _2833;
                for (;;)
                {
                    _2832 = texelFetch(g_lightClassification, int((((_2162 << 5u) + (_2148 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                    _2833 = _2832 == 0u;
                    float frontier_phi_70_pred;
                    float frontier_phi_70_pred_1;
                    float frontier_phi_70_pred_2;
                    float frontier_phi_70_pred_3;
                    float frontier_phi_70_pred_4;
                    float frontier_phi_70_pred_5;
                    if (_2833)
                    {
                        frontier_phi_70_pred = _2817;
                        frontier_phi_70_pred_1 = _2822;
                        frontier_phi_70_pred_2 = _2821;
                        frontier_phi_70_pred_3 = _2820;
                        frontier_phi_70_pred_4 = _2819;
                        frontier_phi_70_pred_5 = _2818;
                    }
                    else
                    {
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3103 = _2817;
                        float _3104 = _2818;
                        float _3105 = _2819;
                        float _3106 = _2820;
                        float _3107 = _2821;
                        float _3108 = _2822;
                        uint _3109 = _2832;
                        uint _3110;
                        vec4 _3135;
                        float _3136;
                        vec4 _3151;
                        vec3 _3163;
                        vec4 _3178;
                        vec4 _3193;
                        float _3240;
                        bool _3241;
                        for (;;)
                        {
                            uint _3120 = ((_2823 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3109));
                            _3110 = (_3109 + 4294967295u) & _3109;
                            uint _3122 = _3120 * 40u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            _3136 = _3135.w;
                            uint _3138 = (_3120 * 40u) + 4u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3120 * 40u) + 8u;
                            _3163 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x));
                            uint _3165 = (_3120 * 40u) + 16u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3180 = (_3120 * 40u) + 20u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3196 = (_3120 * 40u) + 24u;
                            vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3215 = (_3120 * 40u) + 28u;
                            vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            _3240 = fma(_2124, _3228.z, fma(_2123, _3228.y, _3228.x * _2122)) + _3228.w;
                            _3241 = !((fma(_2124, _3209.z, fma(_2123, _3209.y, _3209.x * _2122)) + _3209.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_3241)
                            {
                                float _3268 = _3135.x - _2122;
                                float _3269 = _3135.y - _2123;
                                float _3270 = _3135.z - _2124;
                                float _3271 = dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270));
                                float _3274 = inversesqrt(_3271);
                                float _3275 = _3274 * _3268;
                                float _3276 = _3274 * _3269;
                                float _3277 = _3274 * _3270;
                                float _3281 = 1.0 - (_3271 / (_3136 * _3136));
                                float _4423 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3286 = sqrt(_3271) * _3151.w;
                                float _3288 = 1.39999997615814208984375 / (_3286 + 1.39999997615814208984375);
                                float _3289 = _3288 * _3288;
                                float _3292 = ((1.0 - _3289) * dot(vec3(_3275, _3276, _3277), vec3(_833, _836, _839))) + _3289;
                                float _3295 = _3286 * _3286;
                                float _3299 = (fma(_2124, _3178.z, fma(_2123, _3178.y, _3178.x * _2122)) + _3178.w) / _3240;
                                float _3300 = (fma(_2124, _3193.z, fma(_2123, _3193.y, _3193.x * _2122)) + _3193.w) / _3240;
                                float _3304 = 1.0 - dot(vec2(_3299, _3300), vec2(_3299, _3300));
                                float _4439 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3305 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3306 = _3305 * (((isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))) * _3282) / ((_3295 * 0.699999988079071044921875) + 1.0));
                                float _3318 = exp2(log2(1.0 / ((_3295 * 3.5) + 5.0)) * 0.25);
                                float _3319 = 1.0 - _906;
                                float _3326 = sqrt(1.0 - ((1.0 - (_3319 * _3319)) * (1.0 - (_3318 * _3318))));
                                float _3327 = _3326 * _3326;
                                float _3328 = _3327 * _3327;
                                float _3329 = _3275 - _2546;
                                float _3330 = _3276 - _2547;
                                float _3331 = _3277 - _2548;
                                float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                                float _3339 = dot(vec3(_833, _836, _839), vec3((-0.0) - _2546, (-0.0) - _2547, (-0.0) - _2548));
                                float _4450 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3342 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3343 = dot(vec3(_833, _836, _839), vec3(_3335 * _3329, _3335 * _3330, _3335 * _3331));
                                float _4461 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3346 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3350 = ((_3346 * _3346) * (_3328 + (-1.0))) + 1.0;
                                float _3351 = _3288 * _3327;
                                float _3352 = _3351 * _3351;
                                float _3358 = ((1.0 - _3352) * dot(vec3(_833, _836, _839), vec3(_3275, _3276, _3277))) + _3352;
                                float _4472 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3360 = 1.0 - _3327;
                                float _3370 = (0.5 / (((_3359 * ((_3342 * _3360) + _3327)) + 9.9999999392252902907785028219223e-09) + (((_3359 * _3360) + _3327) * _3342))) * _3359;
                                float _4483 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3380 = (_3305 * _3282) * (((_3328 * 3.1415927410125732421875) * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) / ((_3350 * _3350) * ((_3295 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _3380 * _3163.z;
                                frontier_phi_79_pred_1 = _3306 * _3151.z;
                                frontier_phi_79_pred_2 = _3306 * _3151.y;
                                frontier_phi_79_pred_3 = _3306 * _3151.x;
                                frontier_phi_79_pred_4 = _3380 * _3163.y;
                                frontier_phi_79_pred_5 = _3380 * _3163.x;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _3386 = frontier_phi_79_pred;
                            _3389 = frontier_phi_79_pred_1;
                            _3388 = frontier_phi_79_pred_2;
                            _3387 = frontier_phi_79_pred_3;
                            _3385 = frontier_phi_79_pred_4;
                            _3384 = frontier_phi_79_pred_5;
                            _3084 = _3387 + _3106;
                            _3085 = _3388 + _3107;
                            _3086 = _3389 + _3108;
                            _3081 = _3384 + _3103;
                            _3082 = _3385 + _3104;
                            _3083 = _3386 + _3105;
                            if (_3110 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3103 = _3081;
                                _3104 = _3082;
                                _3105 = _3083;
                                _3106 = _3084;
                                _3107 = _3085;
                                _3108 = _3086;
                                _3109 = _3110;
                                continue;
                            }
                        }
                        frontier_phi_70_pred = _3081;
                        frontier_phi_70_pred_1 = _3086;
                        frontier_phi_70_pred_2 = _3085;
                        frontier_phi_70_pred_3 = _3084;
                        frontier_phi_70_pred_4 = _3083;
                        frontier_phi_70_pred_5 = _3082;
                    }
                    _2521 = frontier_phi_70_pred;
                    _2531 = frontier_phi_70_pred_1;
                    _2529 = frontier_phi_70_pred_2;
                    _2527 = frontier_phi_70_pred_3;
                    _2525 = frontier_phi_70_pred_4;
                    _2523 = frontier_phi_70_pred_5;
                    uint _2824 = _2823 + 1u;
                    if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2817 = _2521;
                        _2818 = _2523;
                        _2819 = _2525;
                        _2820 = _2527;
                        _2821 = _2529;
                        _2822 = _2531;
                        _2823 = _2824;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _2525;
                frontier_phi_46_47_ladder_1 = _2527;
                frontier_phi_46_47_ladder_2 = _2529;
                frontier_phi_46_47_ladder_3 = _2531;
                frontier_phi_46_47_ladder_4 = _2523;
                frontier_phi_46_47_ladder_5 = _2521;
            }
            else
            {
                frontier_phi_46_47_ladder = _2319;
                frontier_phi_46_47_ladder_1 = _2321;
                frontier_phi_46_47_ladder_2 = _2323;
                frontier_phi_46_47_ladder_3 = _2325;
                frontier_phi_46_47_ladder_4 = _2317;
                frontier_phi_46_47_ladder_5 = _2315;
            }
            _2520 = frontier_phi_46_47_ladder_5;
            _2522 = frontier_phi_46_47_ladder_4;
            _2524 = frontier_phi_46_47_ladder;
            _2526 = frontier_phi_46_47_ladder_1;
            _2528 = frontier_phi_46_47_ladder_2;
            _2530 = frontier_phi_46_47_ladder_3;
        }
        float _2535 = isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0));
        _2180 = (_2535 * _2526) + _1983;
        _2182 = (_2535 * _2528) + _1984;
        _2184 = (_2535 * _2530) + _1985;
        _2186 = ((_2520 * 0.039999999105930328369140625) * _2535) + _2060;
        _2188 = ((_2522 * 0.039999999105930328369140625) * _2535) + _2063;
        _2190 = ((_2524 * 0.039999999105930328369140625) * _2535) + _2066;
    }
    else
    {
        _2180 = _1983;
        _2182 = _1984;
        _2184 = _1985;
        _2186 = _2060;
        _2188 = _2063;
        _2190 = _2066;
    }
    float _2210 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2211 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2212 = cbSceneParam._m0[86u].x * ((_812 / cbSceneParam._m0[86u].x) + (((10.0 / (_756 + 10.0)) * cbMtdParam._m0[12u].y) * dot(vec3(_728, _729, _730), vec3(_203, _204, _205))));
    float _2213 = isnan(_2210) ? _2212 : (isnan(_2212) ? _2210 : min(_2212, _2210));
    float _2214 = isnan(_2211) ? _813 : (isnan(_813) ? _2211 : min(_813, _2211));
    vec4 _2216 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2213, _2214), 0.0);
    float _2218 = _2216.x;
    bool _2238 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2218)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2218))) > _756;
    float _2239 = _2238 ? _2213 : _812;
    float _2240 = _2238 ? _2214 : _813;
    vec4 _2242 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2239, _2240));
    vec4 _2247 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2239, _2240));
    float _2249 = _2247.x;
    bool _2254 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2263 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2269 = (_2254 ? (_2263 / (cbSceneParam._m0[2u].x - _2249)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2249))) - _756;
    float _2271 = cbMtdParam._m0[21u].z + 0.008000000379979610443115234375;
    float _2273 = cbMtdParam._m0[21u].w + 0.008000000379979610443115234375;
    float _2274 = cbMtdParam._m0[22u].x + 0.008000000379979610443115234375;
    bool _2280 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2284 = (isnan(_2269) ? 0.0 : (isnan(0.0) ? _2269 : max(0.0, _2269))) * (-1.44269502162933349609375);
    float _4514 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4525 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4536 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2415;
    float _2416;
    float _2417;
    if ((1.0 - _697) > 0.00999999977648258209228515625)
    {
        vec4 _2337 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2239, _2240), 0.0);
        float _2339 = _2337.x;
        float _2345 = (_2254 ? (_2263 / (cbSceneParam._m0[2u].x - _2339)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2339))) - _756;
        uint _2351 = floatBitsToUint(cbInstanceData._m0[_1948]).x * 14u;
        uint _2357 = _2351 + 4u;
        float _2366 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_224, _225, _226));
        float _2374 = dot(vec3((-0.0) - _792, (-0.0) - _793, (-0.0) - _794), vec3((-0.0) - _224, (-0.0) - _225, (-0.0) - _226));
        float _2379 = ((isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2366 : (isnan(_2366) ? 0.001000000047497451305389404296875 : max(_2366, 0.001000000047497451305389404296875)))) + 1.0;
        float _2381 = (-0.0) - ((isnan(_2345) ? 0.0 : (isnan(0.0) ? _2345 : max(0.0, _2345))) * _2379);
        _2415 = _2280 ? 0.0 : (((cbLight._m0[_2357].x * 0.00063661974854767322540283203125) / ((_2379 * _2271) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2271 * 1.44269502162933349609375) * _2381)));
        _2416 = _2280 ? 0.0 : (((cbLight._m0[_2357].y * 0.00063661974854767322540283203125) / ((_2379 * _2273) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2273 * 1.44269502162933349609375) * _2381)));
        _2417 = _2280 ? 0.0 : (((cbLight._m0[_2357].z * 0.00063661974854767322540283203125) / ((_2379 * _2274) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2274 * 1.44269502162933349609375) * _2381)));
    }
    else
    {
        _2415 = 0.0;
        _2416 = 0.0;
        _2417 = 0.0;
    }
    float _2434 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _2435 = (_2415 + ((exp2(_2284 * (_2280 ? 0.0 : _2271)) * _2242.x) * cbSceneParam._m0[72u].w)) * _2434;
    float _2436 = (_2416 + ((exp2(_2284 * (_2280 ? 0.0 : _2273)) * _2242.y) * cbSceneParam._m0[72u].w)) * _2434;
    float _2437 = (_2417 + ((exp2(_2284 * (_2280 ? 0.0 : _2274)) * _2242.z) * cbSceneParam._m0[72u].w)) * _2434;
    float _2445 = (_2435 + ((_2186 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1724)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2180 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _877))) - _2435) * _697);
    float _2447 = (_2436 + ((_2188 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1724)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2182 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _877))) - _2436) * _697);
    float _2449 = (_2437 + ((_2190 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1724)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2184 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _877))) - _2437) * _697);
    float _2454 = cbInstanceData._m0[_852 + 6u].w * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)));
    float _2459 = _812 / cbSceneParam._m0[86u].x;
    float _2460 = _813 / cbSceneParam._m0[86u].y;
    vec4 _2474 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2459, _2460, (log2((isnan(cbSceneParam._m0[77u].w) ? _756 : (isnan(_756) ? cbSceneParam._m0[77u].w : min(_756, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2476 = _2474.x;
    float _2477 = _2474.y;
    float _2478 = _2474.z;
    float _2479 = _2474.w;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    if (_756 > cbSceneParam._m0[78u].w)
    {
        float _2573 = isnan(_756) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _756 : min(cbSceneParam._m0[80u].w, _756));
        float _2574 = _2573 / _756;
        float _2585 = _2574 * _785;
        float _2586 = _786 * _2574;
        float _2587 = (-0.0) - _2586;
        float _2588 = _2574 * _787;
        float _2590 = (cbSceneParam._m0[77u].w * _2587) / _2573;
        float _2591 = _2590 + cbSceneParam._m0[79u].w;
        float _2592 = cbSceneParam._m0[79u].w - _2586;
        float _2598 = sqrt(((_2585 * _2585) + (_2586 * _2586)) + (_2588 * _2588));
        float _2601 = (1.0 - (cbSceneParam._m0[77u].w / _2573)) * _2598;
        float _2606 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2607 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3017;
        if (abs((_2587 - _2590) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3017 = ((((_2591 > 0.0) ? exp2(_2606 * _2591) : (2.0 - exp2(_2607 * _2591))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2601;
        }
        else
        {
            float _2748 = 1.0 / cbSceneParam._m0[80u].x;
            float _2749 = isnan(_2592) ? _2591 : (isnan(_2591) ? _2592 : max(_2591, _2592));
            float _2750 = isnan(_2592) ? _2591 : (isnan(_2591) ? _2592 : min(_2591, _2592));
            float _2759 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : min(_2749, 0.0));
            float _2760 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : min(_2750, 0.0));
            _3017 = ((abs(_2598 / _2587) * cbSceneParam._m0[80u].y) * ((((_2759 - _2760) * 2.0) - ((exp2(_2606 * (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0)))) - exp2(_2606 * (isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0))))) * _2748)) - ((exp2(_2607 * _2759) - exp2(_2607 * _2760)) * _2748))) + (_2601 * cbSceneParam._m0[80u].z);
        }
        vec4 _3019 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2459, _2460, 1.0), 0.0);
        float _3028 = exp2((_3017 * (-1.44269502162933349609375)) * (1.0 - _3019.w));
        float _3029 = log2(_3028);
        float _3045 = log2(_2479);
        _2608 = (exp2(_3045 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].x)) * _3019.x) / cbSceneParam._m0[78u].x)) + _2476;
        _2610 = (exp2(_3045 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].y)) * _3019.y) / cbSceneParam._m0[78u].y)) + _2477;
        _2612 = (exp2(_3045 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].z)) * _3019.z) / cbSceneParam._m0[78u].z)) + _2478;
        _2614 = _3028 * _2479;
    }
    else
    {
        _2608 = _2476;
        _2610 = _2477;
        _2612 = _2478;
        _2614 = _2479;
    }
    bool _3055;
    float _2669;
    vec4 _2672;
    float _2674;
    vec4 _2676;
    float _2684;
    float _2685;
    float _2686;
    float _2687;
    bool _2697;
    for (;;)
    {
        bool _2626 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2627 = log2(_2614);
        float _2634 = exp2(_2627 * cbSceneParam._m0[78u].x) * _2445;
        float _2635 = exp2(_2627 * cbSceneParam._m0[78u].y) * _2447;
        float _2636 = exp2(_2627 * cbSceneParam._m0[78u].z) * _2449;
        vec4 _2644 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_812, _813));
        float _2646 = _2644.x;
        float _2667 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2646)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2646))) - _756) * 3.0;
        float _4602 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        _2669 = _2454 * (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)));
        float _2670 = _801 + (-0.5);
        _2672 = cbMtdParam._m0[1u];
        _2674 = _2672.y * _2670;
        _2676 = cbMatDynParam._m0[0u];
        float _2683 = (roundEven(_2676.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2684 = _2683 * (_2626 ? _2634 : (_2634 + (cbSceneParam._m0[72u].w * _2608)));
        _2685 = _2683 * (_2626 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2610)));
        _2686 = _2683 * (_2626 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2612)));
        _2687 = _2670 * 0.999000012874603271484375;
        _2697 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2697)
        {
            if ((cbInstanceData._m0[_852 + 7u].x + _2687) < 0.5)
            {
                _3055 = true;
                break;
            }
        }
        uint _2783 = _853 + uint(_2676.w);
        if ((cbInstanceData._m0[_2783].w < 1.0) && ((cbInstanceData._m0[_2783].w + _2687) < 0.5))
        {
            _3055 = true;
            break;
        }
        if ((_2674 + 1.0) < _2672.x)
        {
            _3055 = true;
            break;
        }
        _3055 = false;
        break;
    }
    float _3094;
    if (_3055)
    {
        discard_state = true;
        _3094 = 0.0;
    }
    else
    {
        _3094 = _2669;
    }
    SV_Target.x = _2684;
    SV_Target.y = _2685;
    SV_Target.z = _2686;
    SV_Target.w = _3094;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2669;
    discard_exit();
}


