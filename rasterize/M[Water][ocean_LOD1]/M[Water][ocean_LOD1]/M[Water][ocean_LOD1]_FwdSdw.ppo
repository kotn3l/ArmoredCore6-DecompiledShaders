#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1246;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    float _295 = cbMtdParam._m0[13u].w - cbMtdParam._m0[13u].z;
    float _297 = (sqrt(((_280 * _280) + (_281 * _281)) + (_282 * _282)) - cbMtdParam._m0[13u].z) / (isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0)));
    float _302 = _297 / cbMtdParam._m0[15u].y;
    float _303 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _304 = isnan(8.0) ? _303 : (isnan(_303) ? 8.0 : min(_303, 8.0));
    float _311 = cbMtdParam._m0[10u].x * _304;
    float _312 = cbMtdParam._m0[10u].y * _304;
    float _313 = cbMtdParam._m0[10u].z * _304;
    float _314 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _315 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _316 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _330 = cbMtdParam._m0[14u].x + _297;
    float _335 = _330 * cbMtdParam._m0[16u].x;
    float _3761 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    vec4 _356 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _359 = _356.x;
    bool _366 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _382 = ((_366 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _359)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _359))) - POSITION_1.w) / cbMtdParam._m0[12u].w;
    float _3772 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _386 = 1.0 - (isnan(0.75) ? _383 : (isnan(_383) ? 0.75 : max(_383, 0.75)));
    float _388 = (cbMtdParam._m0[17u].z + TEXCOORD_3.x) - (_386 * cbMtdParam._m0[13u].y);
    float _398 = cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x;
    vec4 _414 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_2, SS_BumpMap), vec2((((_398 * cbMtdParam._m0[19u].x) + TEXCOORD) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_398 * cbMtdParam._m0[19u].y) + TEXCOORD_1) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _3788 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _420 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _421 = _414.z - _420;
    float _3799 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _434 = (_422 * 0.00999999977648258209228515625) + TEXCOORD;
    float _436 = (_422 * (-0.00999999977648258209228515625)) + TEXCOORD_1;
    vec4 _449 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((_434 + (cbMtdParam._m0[18u].z * _398)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_436 + (cbMtdParam._m0[18u].w * _398)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _453 = _449.z;
    vec4 _464 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((_434 + (cbMtdParam._m0[18u].x * _398)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_436 + (cbMtdParam._m0[18u].y * _398)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _468 = _464.z;
    float _471 = (_386 - _414.w) + (isnan(_468) ? _453 : (isnan(_453) ? _468 : max(_453, _468)));
    float _3815 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _473 = (_388 * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)));
    float _485 = (_473 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[11u].x * _422);
    float _486 = (_473 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[11u].y * _422);
    float _487 = (_473 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[11u].z * _422);
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    vec4 _530 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_510 / cbMtdParam._m0[14u].y) + (cbMtdParam._m0[19u].z * _398))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_514 / cbMtdParam._m0[14u].y) + (cbMtdParam._m0[19u].w * _398))) + cbTextureTilingScale._m0[1u].w));
    float _535 = _530.z * 0.099999986588954925537109375;
    float _3826 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _537 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _541 = cbMtdParam._m0[15u].w * _297;
    float _3837 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _556 = (_485 + (isnan(0.07999999821186065673828125) ? _314 : (isnan(_314) ? 0.07999999821186065673828125 : min(_314, 0.07999999821186065673828125)))) + (_542 * (((1.0 - _485) - _537) + _535));
    float _558 = (_486 + (isnan(0.07999999821186065673828125) ? _315 : (isnan(_315) ? 0.07999999821186065673828125 : min(_315, 0.07999999821186065673828125)))) + (_542 * (((1.0 - _486) - _537) + _535));
    float _560 = (_487 + (isnan(0.07999999821186065673828125) ? _316 : (isnan(_316) ? 0.07999999821186065673828125 : min(_316, 0.07999999821186065673828125)))) + (_542 * (((1.0 - _487) + _535) - _537));
    float _3848 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _561 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _562 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _570 = _297 / cbMtdParam._m0[17u].x;
    float _3881 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = (1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbMtdParam._m0[16u].w;
    float _580 = ((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _420) + cbMtdParam._m0[12u].x;
    float _3892 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _581 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _590 = _297 / cbMtdParam._m0[15u].z;
    float _3903 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _592 = _422 * 0.23999999463558197021484375;
    float _594 = _422 * (-0.20000000298023223876953125);
    float _605 = cbMtdParam._m0[20u].z * TEXCOORD;
    float _606 = cbMtdParam._m0[20u].w * TEXCOORD_1;
    vec4 _615 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[20u].x * _398) + _592) + _605) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[20u].y * _398) + _594) + _606) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _634 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2((((_605 + _592) + (cbMtdParam._m0[21u].x * _398)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_606 + _594) + (cbMtdParam._m0[21u].y * _398)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _653 = (((_464.x + (-0.5)) * 0.5) + _449.x) + (((_615.x + (-1.0)) + _634.x) * cbMtdParam._m0[17u].y);
    float _654 = (((_464.y + (-0.5)) * 0.5) + _449.y) + (((_615.y + (-1.0)) + _634.y) * cbMtdParam._m0[17u].y);
    float _659 = ((_530.x - _653) * _591) + _653;
    float _660 = ((_530.y - _654) * _591) + _654;
    float _662 = _297 / cbMtdParam._m0[15u].x;
    float _3914 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _680 = ((((_581 * (0.5 - _416)) + _416) + (((_659 + (-0.5)) + ((0.5 - _659) * _663)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _681 = ((((_581 * (0.5 - _417)) + _417) + (((_660 + (-0.5)) + ((0.5 - _660) * _663)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _682 = dot(vec2(_680, _681), vec2(_680, _681));
    float _3925 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _687 = sqrt(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))));
    float _689 = cbMtdParam._m0[16u].y * _330;
    float _3936 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _694 = cbMtdParam._m0[14u].z * _330;
    float _3947 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _696 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * cbMtdParam._m0[17u].w;
    float _3958 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _702 = ((cbMtdParam._m0[16u].z - cbMtdParam._m0[14u].w) * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) + cbMtdParam._m0[14u].w;
    float _707 = _680 - (_702 * _680);
    float _708 = _681 - (_702 * _681);
    float _709 = (_702 * (1.0 - _687)) + _687;
    float _717 = fma(_687, _224, fma(_681, _217, _680 * _203));
    float _720 = fma(_687, _225, fma(_681, _218, _680 * _204));
    float _723 = fma(_687, _226, fma(_681, _219, _680 * _205));
    float _727 = inversesqrt(dot(vec3(_717, _720, _723), vec3(_717, _720, _723)));
    float _728 = _727 * _717;
    float _729 = _727 * _720;
    float _730 = _727 * _723;
    float _733 = fma(_709, _224, fma(_708, _217, _707 * _203));
    float _736 = fma(_709, _225, fma(_708, _218, _707 * _204));
    float _739 = fma(_709, _226, fma(_708, _219, _707 * _205));
    float _743 = inversesqrt(dot(vec3(_733, _736, _739), vec3(_733, _736, _739)));
    float _744 = _743 * _733;
    float _745 = _743 * _736;
    float _746 = _743 * _739;
    float _3969 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3980 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _748 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _4002 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4013 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _756 = _366 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _785 = cbSceneParam._m0[71u].x - (_510 / _776);
    float _786 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _776);
    float _787 = cbSceneParam._m0[71u].z - (_514 / _776);
    float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
    float _792 = _785 * _791;
    float _793 = _786 * _791;
    float _794 = _787 * _791;
    float _799 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _800 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _821 = fma(_730, cbSceneParam._m0[5u].z, fma(_729, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _728));
    float _824 = fma(_730, cbSceneParam._m0[6u].z, fma(_729, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _728));
    float _827 = fma(_730, cbSceneParam._m0[7u].z, fma(_729, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _728));
    uint _840 = uint(roundEven(NORMAL.w)) * 13u;
    uint _842 = (_840 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _848 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbInstanceData._m0[_842].x;
    float _849 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_842].y;
    float _850 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_842].z;
    float _4024 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    vec4 _862 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _799, cbSceneParam._m0[86u].y * _800));
    float _865 = _862.x * TEXCOORD_3.w;
    float _869 = abs(dot(vec3(_792, _793, _794), vec3(_728, _729, _730)));
    float _4057 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _882 = dot(vec3(_744, _745, _746), vec3(_792, _793, _794)) * 2.0;
    float _886 = (_882 * _744) - _792;
    float _887 = (_882 * _745) - _793;
    float _888 = (_882 * _746) - _794;
    float _892 = abs(dot(vec3(_792, _793, _794), vec3(_744, _745, _746)));
    float _4068 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _894 = sqrt(_748);
    float _906 = exp2((_894 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_894 * 3.0));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1245;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _972 = fma(_945, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937));
        float _976 = fma(_945, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937));
        float _980 = fma(_945, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937));
        float _1003 = _937 + _744;
        float _1004 = _941 + _745;
        float _1005 = _945 + _746;
        float _1015 = fma(_1005, cbModelParam._m0[26u].z, fma(_1004, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1003)) - _972;
        float _1016 = fma(_1005, cbModelParam._m0[27u].z, fma(_1004, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1003)) - _976;
        float _1017 = fma(_1005, cbModelParam._m0[28u].z, fma(_1004, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1003)) - _980;
        float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
        float _1034 = ((_1021 * _1015) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_972 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1021 * _1016) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_976 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1021 * _1017) / cbModelParam._m0[34u].z) + ((((((_980 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1073 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1039.x + (-0.5));
        float _1075 = _1073 * (_1039.y + (-0.5));
        float _1076 = _1073 * (_1039.z + (-0.5));
        float _1083 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1046.x + (-0.5));
        float _1085 = _1083 * (_1046.y + (-0.5));
        float _1086 = _1083 * (_1046.z + (-0.5));
        float _1093 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1053.x + (-0.5));
        float _1095 = _1093 * (_1053.y + (-0.5));
        float _1096 = _1093 * (_1053.z + (-0.5));
        float _1103 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1060.x + (-0.5));
        float _1105 = _1103 * (_1060.y + (-0.5));
        float _1106 = _1103 * (_1060.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1127 = (dot(vec3(_744, _745, _746), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1137 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _4116 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1139 + 1.0))) + _1144) * _1107;
        float _1154 = _1075 * 0.5;
        float _1155 = _1085 * 0.5;
        float _1156 = _1095 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_744, _745, _746), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _4149 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1181 + 1.0))) + _1186) * _1108;
        float _1196 = _1076 * 0.5;
        float _1197 = _1086 * 0.5;
        float _1198 = _1096 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_744, _745, _746), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _4182 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1223 + 1.0))) + _1228) * _1109;
        _1245 = _1076;
        _1247 = _1075;
        _1248 = _1074;
        _1249 = _1086;
        _1250 = _1085;
        _1251 = _1084;
        _1252 = _1096;
        _1253 = _1095;
        _1254 = _1094;
        _1255 = _1109;
        _1256 = _1108;
        _1257 = _1107;
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
    }
    else
    {
        _1245 = _1246;
        _1247 = _1246;
        _1248 = _1246;
        _1249 = _1246;
        _1250 = _1246;
        _1251 = _1246;
        _1252 = _1246;
        _1253 = _1246;
        _1254 = _1246;
        _1255 = _1246;
        _1256 = _1246;
        _1257 = _1246;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1286 = fma(_945, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _937));
        float _1290 = fma(_945, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _937));
        float _1294 = fma(_945, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _937));
        float _1317 = _937 + _744;
        float _1318 = _941 + _745;
        float _1319 = _945 + _746;
        float _1329 = fma(_1319, cbModelParam._m0[30u].z, fma(_1318, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1317)) - _1286;
        float _1330 = fma(_1319, cbModelParam._m0[31u].z, fma(_1318, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1317)) - _1290;
        float _1331 = fma(_1319, cbModelParam._m0[32u].z, fma(_1318, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1317)) - _1294;
        float _1335 = inversesqrt(dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331)));
        float _1348 = ((_1335 * _1329) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1286 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1335 * _1330) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1290 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1335 * _1331) / cbModelParam._m0[35u].z) + ((((((_1294 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        float _1385 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1352.x + (-0.5));
        float _1387 = _1385 * (_1352.y + (-0.5));
        float _1388 = _1385 * (_1352.z + (-0.5));
        float _1395 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1359.x + (-0.5));
        float _1397 = _1395 * (_1359.y + (-0.5));
        float _1398 = _1395 * (_1359.z + (-0.5));
        float _1405 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1366.x + (-0.5));
        float _1407 = _1405 * (_1366.y + (-0.5));
        float _1408 = _1405 * (_1366.z + (-0.5));
        float _1415 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1373.x + (-0.5));
        float _1417 = _1415 * (_1373.y + (-0.5));
        float _1418 = _1415 * (_1373.z + (-0.5));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = _1386 * 0.5;
        float _1423 = _1396 * 0.5;
        float _1424 = _1406 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_744, _745, _746), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4245 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1449 + 1.0))) + _1454) * _1419;
        float _1464 = _1387 * 0.5;
        float _1465 = _1397 * 0.5;
        float _1466 = _1407 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_744, _745, _746), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4278 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1491 + 1.0))) + _1496) * _1420;
        float _1506 = _1388 * 0.5;
        float _1507 = _1398 * 0.5;
        float _1508 = _1408 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_744, _745, _746), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4311 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1533 + 1.0))) + _1538) * _1421;
        _1555 = _1388;
        _1556 = _1387;
        _1557 = _1386;
        _1558 = _1398;
        _1559 = _1397;
        _1560 = _1396;
        _1561 = _1408;
        _1562 = _1407;
        _1563 = _1406;
        _1564 = _1421;
        _1565 = _1420;
        _1566 = _1419;
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    }
    else
    {
        _1555 = _1246;
        _1556 = _1246;
        _1557 = _1246;
        _1558 = _1246;
        _1559 = _1246;
        _1560 = _1246;
        _1561 = _1246;
        _1562 = _1246;
        _1563 = _1246;
        _1564 = _1246;
        _1565 = _1246;
        _1566 = _1246;
        _1567 = 0.0;
        _1568 = 0.0;
        _1569 = 0.0;
    }
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1258)) + _1258;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1259)) + _1259;
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1260)) + _1260;
    float _1602 = fma(_1581, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1581, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1581, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1579));
    float _1623 = _886 * 0.5;
    float _1624 = _887 * 0.5;
    float _1625 = _888 * 0.5;
    float _1626 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1629 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1632 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1666;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1639 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1245, _1249, _1252, _1255));
        float _1643 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1247, _1250, _1253, _1256));
        float _1647 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1654 = dot(vec4(cbModelParam._m0[39u]), vec4(_1623, _1624, _1625, 1.0));
        _1666 = dot(vec3(isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1666 = 1.0;
    }
    float _1677;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1668 = dot(vec4(cbModelParam._m0[40u]), vec4(_1623, _1624, _1625, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1681 = (_1677 * cbModelParam._m0[1u].x) + (_1666 * (1.0 - cbModelParam._m0[1u].x));
    float _1691 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _748);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1691 : min(cbModelParam._m0[25u].z, _1691));
    float _1772;
    float _1774;
    float _1776;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1739 = fma(_945, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937)) + cbModelParam._m0[13u].w;
        float _1743 = fma(_945, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937)) + cbModelParam._m0[14u].w;
        float _1747 = fma(_945, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937)) + cbModelParam._m0[15u].w;
        float _1750 = fma(_888, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _886));
        float _1753 = fma(_888, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _886));
        float _1756 = fma(_888, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _886));
        float _1784;
        if (_1750 > 0.0)
        {
            _1784 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1784 = frontier_phi_16_14_ladder;
        }
        float _1953;
        if (_1753 > 0.0)
        {
            _1953 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1953 = frontier_phi_25_21_ladder;
        }
        float _2296;
        if (_1756 > 0.0)
        {
            _2296 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2296 = frontier_phi_37_32_ladder;
        }
        float _2298 = isnan(_1953) ? _1784 : (isnan(_1784) ? _1953 : min(_1784, _1953));
        float _2299 = isnan(_2296) ? _2298 : (isnan(_2298) ? _2296 : min(_2298, _2296));
        float _2303 = (_2299 * _1750) + _1739;
        float _2304 = (_2299 * _1753) + _1743;
        float _2305 = (_2299 * _1756) + _1747;
        float _2306 = _2299 * 9.9999997473787516355514526367188e-05;
        float _2308 = (-1.0) - _2306;
        float _2310 = _2306 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2305 > _2310) || ((_2305 < _2308) || ((_2304 > _2310) || ((_2304 < _2308) || ((_2303 < _2308) || (_2303 > _2310))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2305, cbModelParam._m0[9u].z, fma(_2304, cbModelParam._m0[9u].y, _2303 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2305, cbModelParam._m0[10u].z, fma(_2304, cbModelParam._m0[10u].y, _2303 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2305, cbModelParam._m0[11u].z, fma(_2304, cbModelParam._m0[11u].y, _2303 * cbModelParam._m0[11u].x))), _1692);
            frontier_phi_15_37_ladder = _2595.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2595.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2595.x * cbModelParam._m0[1u].y;
        }
        _1772 = frontier_phi_15_37_ladder_2;
        _1774 = frontier_phi_15_37_ladder_1;
        _1776 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_886, _887, _888), _1692);
        _1772 = _1760.x * cbModelParam._m0[1u].y;
        _1774 = _1760.y * cbModelParam._m0[1u].y;
        _1776 = _1760.z * cbModelParam._m0[1u].y;
    }
    float _1780 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _748);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1780 : min(cbModelParam._m0[25u].w, _1780));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_945, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_945, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_945, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_888, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _886));
        float _1848 = fma(_888, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _886));
        float _1851 = fma(_888, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _886));
        float _1958;
        if (_1845 > 0.0)
        {
            _1958 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1958 = frontier_phi_27_23_ladder;
        }
        float _2323;
        if (_1848 > 0.0)
        {
            _2323 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2323 = frontier_phi_39_34_ladder;
        }
        float _2777;
        if (_1851 > 0.0)
        {
            _2777 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _2777 = frontier_phi_51_46_ladder;
        }
        float _2779 = isnan(_2323) ? _1958 : (isnan(_1958) ? _2323 : min(_1958, _2323));
        float _2780 = isnan(_2777) ? _2779 : (isnan(_2779) ? _2777 : min(_2779, _2777));
        float _2784 = (_2780 * _1845) + _1834;
        float _2785 = (_2780 * _1848) + _1838;
        float _2786 = (_2780 * _1851) + _1842;
        float _2787 = _2780 * 9.9999997473787516355514526367188e-05;
        float _2788 = (-1.0) - _2787;
        float _2790 = _2787 + 1.0;
        float frontier_phi_24_51_ladder;
        float frontier_phi_24_51_ladder_1;
        float frontier_phi_24_51_ladder_2;
        if ((_2786 > _2790) || ((_2786 < _2788) || ((_2785 > _2790) || ((_2785 < _2788) || ((_2784 < _2788) || (_2784 > _2790))))))
        {
            frontier_phi_24_51_ladder = 0.0;
            frontier_phi_24_51_ladder_1 = 0.0;
            frontier_phi_24_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2989 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2786, cbModelParam._m0[17u].z, fma(_2785, cbModelParam._m0[17u].y, _2784 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2786, cbModelParam._m0[18u].z, fma(_2785, cbModelParam._m0[18u].y, _2784 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2786, cbModelParam._m0[19u].z, fma(_2785, cbModelParam._m0[19u].y, _2784 * cbModelParam._m0[19u].x))), _1781);
            frontier_phi_24_51_ladder = _2989.z * cbModelParam._m0[1u].z;
            frontier_phi_24_51_ladder_1 = _2989.y * cbModelParam._m0[1u].z;
            frontier_phi_24_51_ladder_2 = _2989.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_24_51_ladder_2;
        _1872 = frontier_phi_24_51_ladder_1;
        _1874 = frontier_phi_24_51_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_886, _887, _888), _1781);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1886 = ((((1.0 - _906) * ((_894 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_906 * _894)) * _865;
    float _1887 = _1886 * ((cbModelParam._m0[1u].w * (_1870 - _1772)) + _1772);
    float _1888 = _1886 * ((cbModelParam._m0[1u].w * (_1872 - _1774)) + _1774);
    float _1889 = _1886 * ((cbModelParam._m0[1u].w * (_1874 - _1776)) + _1776);
    float _1892 = fma(_1889, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1895 = fma(_1889, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1898 = fma(_1889, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    float _1932 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1936 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1940 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1944 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1945 = _1932 / _1944;
    float _1946 = _1936 / _1944;
    float _1947 = _1940 / _1944;
    float _2094;
    float _2095;
    float _2096;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1974 = ((uint(_1947 > cbSceneParam._m0[59u].y) + uint(_1947 > cbSceneParam._m0[59u].x)) + uint(_1947 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1975 = _1974 + 43u;
        uint _1983 = _1974 + 44u;
        uint _1991 = _1974 + 45u;
        uint _1999 = _1974 + 46u;
        float _2010 = fma(_1944, cbSceneParam._m0[_1975].w, fma(_1940, cbSceneParam._m0[_1975].z, fma(_1936, cbSceneParam._m0[_1975].y, _1932 * cbSceneParam._m0[_1975].x)));
        float _2014 = fma(_1944, cbSceneParam._m0[_1983].w, fma(_1940, cbSceneParam._m0[_1983].z, fma(_1936, cbSceneParam._m0[_1983].y, _1932 * cbSceneParam._m0[_1983].x)));
        float _2022 = fma(_1944, cbSceneParam._m0[_1999].w, fma(_1940, cbSceneParam._m0[_1999].z, fma(_1936, cbSceneParam._m0[_1999].y, _1932 * cbSceneParam._m0[_1999].x)));
        float _2027 = cbSceneParam._m0[33u].z * _2022;
        float _2029 = cbSceneParam._m0[33u].w * _2022;
        float _2032 = fma(_1944, cbSceneParam._m0[_1991].w, fma(_1940, cbSceneParam._m0[_1991].z, fma(_1936, cbSceneParam._m0[_1991].y, _1932 * cbSceneParam._m0[_1991].x))) / _2022;
        float _2080 = (cbSceneParam._m0[33u].x - sqrt(((_1946 * _1946) + (_1945 * _1945)) + (_1947 * _1947))) * cbSceneParam._m0[33u].y;
        float _4437 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2087 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2027 + _2010) / _2022, (_2029 + _2014) / _2022), _2032), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2029 + _2010) / _2022, (_2014 - _2027) / _2022), _2032), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2010 - _2027) / _2022, (_2014 - _2029) / _2022), _2032), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2010 - _2029) / _2022, (_2027 + _2014) / _2022), _2032), 0.0)).x), vec4(0.25)));
        _2094 = 1.0 - (_2087 * cbSceneParam._m0[34u].x);
        _2095 = 1.0 - (_2087 * cbSceneParam._m0[34u].y);
        _2096 = 1.0 - (_2087 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2094 = 1.0;
        _2095 = 1.0;
        _2096 = 1.0;
    }
    float _2160;
    float _2162;
    float _2164;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2148 = fma(_1944, cbSceneParam._m0[63u].w, fma(_1940, cbSceneParam._m0[63u].z, fma(_1936, cbSceneParam._m0[63u].y, _1932 * cbSceneParam._m0[63u].x)));
        float _2149 = fma(_1944, cbSceneParam._m0[60u].w, fma(_1940, cbSceneParam._m0[60u].z, fma(_1936, cbSceneParam._m0[60u].y, _1932 * cbSceneParam._m0[60u].x))) / _2148;
        float _2150 = fma(_1944, cbSceneParam._m0[61u].w, fma(_1940, cbSceneParam._m0[61u].z, fma(_1936, cbSceneParam._m0[61u].y, _1932 * cbSceneParam._m0[61u].x))) / _2148;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2149 >= cbSceneParam._m0[64u].x) && (_2150 >= cbSceneParam._m0[64u].y)) && (_2149 <= cbSceneParam._m0[64u].z)) && (_2150 <= cbSceneParam._m0[64u].w))
        {
            float _2336 = fma(_1944, cbSceneParam._m0[62u].w, fma(_1940, cbSceneParam._m0[62u].z, fma(_1936, cbSceneParam._m0[62u].y, _1932 * cbSceneParam._m0[62u].x))) / _2148;
            float _2340 = isnan(cbSceneParam._m0[41u].w) ? _2336 : (isnan(_2336) ? cbSceneParam._m0[41u].w : max(_2336, cbSceneParam._m0[41u].w));
            float _2383 = (cbSceneParam._m0[33u].x - sqrt(((_1946 * _1946) + (_1945 * _1945)) + (_1947 * _1947))) * cbSceneParam._m0[33u].y;
            float _4453 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
            float _2390 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2149, cbSceneParam._m0[33u].w + _2150), _2340), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2149, _2150 - cbSceneParam._m0[33u].z), _2340), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2149 - cbSceneParam._m0[33u].z, _2150 - cbSceneParam._m0[33u].w), _2340), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2149 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2150), _2340), 0.0)).x), vec4(0.25)));
            float _2394 = 1.0 - (_2390 * cbSceneParam._m0[34u].x);
            float _2395 = 1.0 - (_2390 * cbSceneParam._m0[34u].y);
            float _2396 = 1.0 - (_2390 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2396) ? _2096 : (isnan(_2096) ? _2396 : min(_2096, _2396));
            frontier_phi_36_35_ladder_1 = isnan(_2395) ? _2095 : (isnan(_2095) ? _2395 : min(_2095, _2395));
            frontier_phi_36_35_ladder_2 = isnan(_2394) ? _2094 : (isnan(_2094) ? _2394 : min(_2094, _2394));
        }
        else
        {
            frontier_phi_36_35_ladder = _2096;
            frontier_phi_36_35_ladder_1 = _2095;
            frontier_phi_36_35_ladder_2 = _2094;
        }
        _2160 = frontier_phi_36_35_ladder_2;
        _2162 = frontier_phi_36_35_ladder_1;
        _2164 = frontier_phi_36_35_ladder;
    }
    else
    {
        _2160 = _2094;
        _2162 = _2095;
        _2164 = _2096;
    }
    uint _2166 = _840 + 5u;
    uvec4 _2169 = floatBitsToUint(cbInstanceData._m0[_2166]);
    uint _2171 = _2169.x * 14u;
    float _2178 = (cbLight._m0[_2171 + 13u].x * (_865 + (-1.0))) + 1.0;
    uint _2179 = _2171 + 4u;
    float _2189 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    float _2198 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_728, _729, _730));
    float _4484 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2202 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * 0.3183098733425140380859375;
    float _2204 = ((cbLight._m0[_2179].x * _2160) * _2189) * _2202;
    float _2205 = ((cbLight._m0[_2179].y * _2162) * _2189) * _2202;
    float _2206 = ((cbLight._m0[_2179].z * _2164) * _2189) * _2202;
    uint _2208 = _2171 + 8u;
    float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _748) * 0.949999988079071044921875);
    float _2222 = _2221 * _2221;
    float _2223 = cbLight._m0[_2171].x + _792;
    float _2224 = cbLight._m0[_2171].y + _793;
    float _2225 = cbLight._m0[_2171].z + _794;
    float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
    float _2230 = _2229 * _2223;
    float _2231 = _2229 * _2224;
    float _2232 = _2229 * _2225;
    float _2233 = dot(vec3(_728, _729, _730), vec3(cbLight._m0[_2171].xyz));
    float _4495 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2237 = dot(vec3(_728, _729, _730), vec3(_792, _793, _794));
    float _4506 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2240 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2241 = dot(vec3(_728, _729, _730), vec3(_2230, _2231, _2232));
    float _4517 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2245 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2230, _2231, _2232));
    float _4528 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2249 = _2222 * _2222;
    float _2253 = ((_2244 * _2244) * (_2249 + (-1.0))) + 1.0;
    float _2264 = (exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2265 = 1.0 - _2222;
    float _2276 = (0.5 / (((_2240 * ((_2236 * _2265) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2265) + _2222) * _2236))) * _2236;
    float _4539 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2278 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2249 / ((_2253 * _2253) * 3.141590118408203125));
    float _2282 = (((cbLight._m0[_2208].x * _2160) * _2264) * _2278) * _2189;
    float _2286 = (((cbLight._m0[_2208].y * _2162) * _2264) * _2278) * _2189;
    float _2290 = (((cbLight._m0[_2208].z * _2164) * _2264) * _2278) * _2189;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    if (_2169.y == 0u)
    {
        uvec4 _2408 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2409 = _2408.x;
        uint _2420 = uint((float(_2408.y) * floor(float(uint(cbSceneParam._m0[85u].y * _800) / _2409))) + floor(float(uint(cbSceneParam._m0[85u].x * _799) / _2409)));
        float _2430 = (log2(_1947 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2431 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        uint _2434 = uint(isnan(14.0) ? _2431 : (isnan(_2431) ? 14.0 : min(_2431, 14.0)));
        uvec4 _2439 = texelFetch(g_lightClusterGridBuffer, int(((_2434 << 2u) + (_2420 << 6u)) >> 2u));
        uint _2440 = _2439.x;
        uint _2441 = _2408.z;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        if (((((1u << ((_2441 >> 4u) & 15u)) + 4294967295u) & _2440) == 0u) || ((_2441 & 240u) == 0u))
        {
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
        }
        else
        {
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2615;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            uint _2841 = 0u;
            uint _2850;
            bool _2851;
            for (;;)
            {
                _2850 = texelFetch(g_lightClassification, int((((_2434 << 5u) + (_2420 << 9u)) + (_2841 << 2u)) >> 2u)).x;
                _2851 = _2850 == 0u;
                float frontier_phi_60_pred;
                float frontier_phi_60_pred_1;
                float frontier_phi_60_pred_2;
                float frontier_phi_60_pred_3;
                float frontier_phi_60_pred_4;
                float frontier_phi_60_pred_5;
                if (_2851)
                {
                    frontier_phi_60_pred = _2838;
                    frontier_phi_60_pred_1 = _2837;
                    frontier_phi_60_pred_2 = _2836;
                    frontier_phi_60_pred_3 = _2835;
                    frontier_phi_60_pred_4 = _2839;
                    frontier_phi_60_pred_5 = _2840;
                }
                else
                {
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    uint _3069;
                    _3063 = _2835;
                    _3064 = _2836;
                    _3065 = _2837;
                    _3066 = _2838;
                    _3067 = _2839;
                    _3068 = _2840;
                    _3069 = _2850;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    for (;;)
                    {
                        uint _3073 = uint(findLSB(_3069)) + (_2841 << 5u);
                        uint _3070 = (_3069 + 4294967295u) & _3069;
                        uint _3075 = _3073 * 48u;
                        vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 3u)).x));
                        uint _3095 = (_3073 * 48u) + 4u;
                        vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3095)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 3u)).x));
                        uint _3114 = (_3073 * 48u) + 8u;
                        vec3 _3125 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3114)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 2u)).x));
                        float _3129 = _3089.x - _1945;
                        float _3130 = _3089.y - _1946;
                        float _3131 = _3089.z - _1947;
                        float _3132 = dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131));
                        float _3135 = inversesqrt(_3132);
                        float _3136 = _3135 * _3129;
                        float _3137 = _3135 * _3130;
                        float _3138 = _3135 * _3131;
                        float _3139 = dot(vec3(_821, _824, _827), vec3(_3136, _3137, _3138));
                        float _3144 = 1.0 - (_3132 * _3089.w);
                        float _4560 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3145 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3146 = sqrt(_3132) * _3108.w;
                        float _3149 = 1.39999997615814208984375 / (_3146 + 1.39999997615814208984375);
                        float _3150 = _3149 * _3149;
                        float _3153 = ((1.0 - _3150) * _3139) + _3150;
                        float _3156 = _3146 * _3146;
                        float _3160 = ((isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))) * _3145) / ((_3156 * 0.699999988079071044921875) + 1.0);
                        float _3164 = (-0.0) - _1945;
                        float _3165 = (-0.0) - _1946;
                        float _3166 = (-0.0) - _1947;
                        float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                        float _3171 = _3170 * _3164;
                        float _3172 = _3170 * _3165;
                        float _3173 = _3170 * _3166;
                        float _3180 = exp2(log2(1.0 / ((_3156 * 3.5) + 5.0)) * 0.25);
                        float _3181 = 1.0 - _894;
                        float _3188 = sqrt(1.0 - ((1.0 - (_3181 * _3181)) * (1.0 - (_3180 * _3180))));
                        float _3189 = _3188 * _3188;
                        float _3190 = _3189 * _3189;
                        float _3191 = _3171 + _3136;
                        float _3192 = _3172 + _3137;
                        float _3193 = _3173 + _3138;
                        float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                        float _3201 = dot(vec3(_821, _824, _827), vec3(_3171, _3172, _3173));
                        float _4576 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3205 = dot(vec3(_821, _824, _827), vec3(_3197 * _3191, _3197 * _3192, _3197 * _3193));
                        float _4587 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3208 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3212 = ((_3208 * _3208) * (_3190 + (-1.0))) + 1.0;
                        float _3213 = _3149 * _3189;
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3139) + _3214;
                        float _4598 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3218 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3219 = 1.0 - _3189;
                        float _3229 = (0.5 / (((_3218 * ((_3204 * _3219) + _3189)) + 9.9999999392252902907785028219223e-09) + (((_3218 * _3219) + _3189) * _3204))) * _3218;
                        float _4609 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3240 = (((_3190 * 3.1415927410125732421875) * (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) / ((_3212 * _3212) * ((_3156 * 2.1991131305694580078125) + 3.141590118408203125))) * _3145;
                        _2997 = (_3160 * _3108.x) + _3066;
                        _2998 = (_3160 * _3108.y) + _3067;
                        _2999 = (_3160 * _3108.z) + _3068;
                        _2994 = (_3240 * _3125.x) + _3063;
                        _2995 = (_3240 * _3125.y) + _3064;
                        _2996 = (_3240 * _3125.z) + _3065;
                        if (_3070 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3063 = _2994;
                            _3064 = _2995;
                            _3065 = _2996;
                            _3066 = _2997;
                            _3067 = _2998;
                            _3068 = _2999;
                            _3069 = _3070;
                        }
                    }
                    frontier_phi_60_pred = _2997;
                    frontier_phi_60_pred_1 = _2996;
                    frontier_phi_60_pred_2 = _2995;
                    frontier_phi_60_pred_3 = _2994;
                    frontier_phi_60_pred_4 = _2998;
                    frontier_phi_60_pred_5 = _2999;
                }
                _2611 = frontier_phi_60_pred;
                _2609 = frontier_phi_60_pred_1;
                _2607 = frontier_phi_60_pred_2;
                _2605 = frontier_phi_60_pred_3;
                _2613 = frontier_phi_60_pred_4;
                _2615 = frontier_phi_60_pred_5;
                uint _2842 = _2841 + 1u;
                if (_2842 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2835 = _2605;
                    _2836 = _2607;
                    _2837 = _2609;
                    _2838 = _2611;
                    _2839 = _2613;
                    _2840 = _2615;
                    _2841 = _2842;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
        }
        uvec4 _2618 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2619 = _2618.z;
        uint _2621 = (_2619 >> 8u) & 15u;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        if (((4294967295u << _2621) & _2440) == 0u)
        {
            _2803 = _2604;
            _2805 = _2606;
            _2807 = _2608;
            _2809 = _2610;
            _2811 = _2612;
            _2813 = _2614;
        }
        else
        {
            float _2828 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
            float _2829 = _2828 * _1945;
            float _2830 = _2828 * _1946;
            float _2831 = _2828 * _1947;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2621 < ((_2619 >> 12u) & 15u))
            {
                float _2804;
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _3046 = _2604;
                float _3047 = _2606;
                float _3048 = _2608;
                float _3049 = _2610;
                float _3050 = _2612;
                float _3051 = _2614;
                uint _3052 = _2621;
                uint _3061;
                bool _3062;
                for (;;)
                {
                    _3061 = texelFetch(g_lightClassification, int((((_2434 << 5u) + (_2420 << 9u)) + (_3052 << 2u)) >> 2u)).x;
                    _3062 = _3061 == 0u;
                    float frontier_phi_68_pred;
                    float frontier_phi_68_pred_1;
                    float frontier_phi_68_pred_2;
                    float frontier_phi_68_pred_3;
                    float frontier_phi_68_pred_4;
                    float frontier_phi_68_pred_5;
                    if (_3062)
                    {
                        frontier_phi_68_pred = _3049;
                        frontier_phi_68_pred_1 = _3048;
                        frontier_phi_68_pred_2 = _3047;
                        frontier_phi_68_pred_3 = _3046;
                        frontier_phi_68_pred_4 = _3051;
                        frontier_phi_68_pred_5 = _3050;
                    }
                    else
                    {
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3296 = _3046;
                        float _3297 = _3047;
                        float _3298 = _3048;
                        float _3299 = _3049;
                        float _3300 = _3050;
                        float _3301 = _3051;
                        uint _3302 = _3061;
                        uint _3303;
                        vec4 _3328;
                        float _3329;
                        vec4 _3344;
                        vec3 _3356;
                        vec4 _3371;
                        vec4 _3386;
                        float _3433;
                        bool _3434;
                        for (;;)
                        {
                            uint _3313 = ((_3052 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3302));
                            _3303 = (_3302 + 4294967295u) & _3302;
                            uint _3315 = _3313 * 40u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            _3329 = _3328.w;
                            uint _3331 = (_3313 * 40u) + 4u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3346 = (_3313 * 40u) + 8u;
                            _3356 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x));
                            uint _3358 = (_3313 * 40u) + 16u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3313 * 40u) + 20u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3389 = (_3313 * 40u) + 24u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3408 = (_3313 * 40u) + 28u;
                            vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            _3433 = fma(_1947, _3421.z, fma(_1946, _3421.y, _3421.x * _1945)) + _3421.w;
                            _3434 = !((fma(_1947, _3402.z, fma(_1946, _3402.y, _3402.x * _1945)) + _3402.w) <= 0.0);
                            float frontier_phi_74_pred;
                            float frontier_phi_74_pred_1;
                            float frontier_phi_74_pred_2;
                            float frontier_phi_74_pred_3;
                            float frontier_phi_74_pred_4;
                            float frontier_phi_74_pred_5;
                            if (_3434)
                            {
                                float _3461 = _3328.x - _1945;
                                float _3462 = _3328.y - _1946;
                                float _3463 = _3328.z - _1947;
                                float _3464 = dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463));
                                float _3467 = inversesqrt(_3464);
                                float _3468 = _3467 * _3461;
                                float _3469 = _3467 * _3462;
                                float _3470 = _3467 * _3463;
                                float _3474 = 1.0 - (_3464 / (_3329 * _3329));
                                float _4620 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3479 = sqrt(_3464) * _3344.w;
                                float _3481 = 1.39999997615814208984375 / (_3479 + 1.39999997615814208984375);
                                float _3482 = _3481 * _3481;
                                float _3485 = ((1.0 - _3482) * dot(vec3(_3468, _3469, _3470), vec3(_821, _824, _827))) + _3482;
                                float _3488 = _3479 * _3479;
                                float _3492 = (fma(_1947, _3371.z, fma(_1946, _3371.y, _3371.x * _1945)) + _3371.w) / _3433;
                                float _3493 = (fma(_1947, _3386.z, fma(_1946, _3386.y, _3386.x * _1945)) + _3386.w) / _3433;
                                float _3497 = 1.0 - dot(vec2(_3492, _3493), vec2(_3492, _3493));
                                float _4636 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3499 = _3498 * (((isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0))) * _3475) / ((_3488 * 0.699999988079071044921875) + 1.0));
                                float _3511 = exp2(log2(1.0 / ((_3488 * 3.5) + 5.0)) * 0.25);
                                float _3512 = 1.0 - _894;
                                float _3519 = sqrt(1.0 - ((1.0 - (_3512 * _3512)) * (1.0 - (_3511 * _3511))));
                                float _3520 = _3519 * _3519;
                                float _3521 = _3520 * _3520;
                                float _3522 = _3468 - _2829;
                                float _3523 = _3469 - _2830;
                                float _3524 = _3470 - _2831;
                                float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                                float _3532 = dot(vec3(_821, _824, _827), vec3((-0.0) - _2829, (-0.0) - _2830, (-0.0) - _2831));
                                float _4647 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3535 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3536 = dot(vec3(_821, _824, _827), vec3(_3528 * _3522, _3528 * _3523, _3528 * _3524));
                                float _4658 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3543 = ((_3539 * _3539) * (_3521 + (-1.0))) + 1.0;
                                float _3544 = _3481 * _3520;
                                float _3545 = _3544 * _3544;
                                float _3551 = ((1.0 - _3545) * dot(vec3(_821, _824, _827), vec3(_3468, _3469, _3470))) + _3545;
                                float _4669 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3553 = 1.0 - _3520;
                                float _3563 = (0.5 / (((_3552 * ((_3535 * _3553) + _3520)) + 9.9999999392252902907785028219223e-09) + (((_3552 * _3553) + _3520) * _3535))) * _3552;
                                float _4680 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3573 = (_3498 * _3475) * (((_3521 * 3.1415927410125732421875) * (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) / ((_3543 * _3543) * ((_3488 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_74_pred = _3499 * _3344.x;
                                frontier_phi_74_pred_1 = _3573 * _3356.z;
                                frontier_phi_74_pred_2 = _3573 * _3356.y;
                                frontier_phi_74_pred_3 = _3573 * _3356.x;
                                frontier_phi_74_pred_4 = _3499 * _3344.y;
                                frontier_phi_74_pred_5 = _3499 * _3344.z;
                            }
                            else
                            {
                                frontier_phi_74_pred = 0.0;
                                frontier_phi_74_pred_1 = 0.0;
                                frontier_phi_74_pred_2 = 0.0;
                                frontier_phi_74_pred_3 = 0.0;
                                frontier_phi_74_pred_4 = 0.0;
                                frontier_phi_74_pred_5 = 0.0;
                            }
                            _3580 = frontier_phi_74_pred;
                            _3579 = frontier_phi_74_pred_1;
                            _3578 = frontier_phi_74_pred_2;
                            _3577 = frontier_phi_74_pred_3;
                            _3581 = frontier_phi_74_pred_4;
                            _3582 = frontier_phi_74_pred_5;
                            _3286 = _3580 + _3299;
                            _3287 = _3581 + _3300;
                            _3288 = _3582 + _3301;
                            _3283 = _3577 + _3296;
                            _3284 = _3578 + _3297;
                            _3285 = _3579 + _3298;
                            if (_3303 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3303;
                                continue;
                            }
                        }
                        frontier_phi_68_pred = _3286;
                        frontier_phi_68_pred_1 = _3285;
                        frontier_phi_68_pred_2 = _3284;
                        frontier_phi_68_pred_3 = _3283;
                        frontier_phi_68_pred_4 = _3288;
                        frontier_phi_68_pred_5 = _3287;
                    }
                    _2810 = frontier_phi_68_pred;
                    _2808 = frontier_phi_68_pred_1;
                    _2806 = frontier_phi_68_pred_2;
                    _2804 = frontier_phi_68_pred_3;
                    _2814 = frontier_phi_68_pred_4;
                    _2812 = frontier_phi_68_pred_5;
                    uint _3053 = _3052 + 1u;
                    if (_3053 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3046 = _2804;
                        _3047 = _2806;
                        _3048 = _2808;
                        _3049 = _2810;
                        _3050 = _2812;
                        _3051 = _2814;
                        _3052 = _3053;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2814;
                frontier_phi_53_54_ladder_1 = _2812;
                frontier_phi_53_54_ladder_2 = _2810;
                frontier_phi_53_54_ladder_3 = _2808;
                frontier_phi_53_54_ladder_4 = _2804;
                frontier_phi_53_54_ladder_5 = _2806;
            }
            else
            {
                frontier_phi_53_54_ladder = _2614;
                frontier_phi_53_54_ladder_1 = _2612;
                frontier_phi_53_54_ladder_2 = _2610;
                frontier_phi_53_54_ladder_3 = _2608;
                frontier_phi_53_54_ladder_4 = _2604;
                frontier_phi_53_54_ladder_5 = _2606;
            }
            _2803 = frontier_phi_53_54_ladder_4;
            _2805 = frontier_phi_53_54_ladder_5;
            _2807 = frontier_phi_53_54_ladder_3;
            _2809 = frontier_phi_53_54_ladder_2;
            _2811 = frontier_phi_53_54_ladder_1;
            _2813 = frontier_phi_53_54_ladder;
        }
        float _2818 = isnan(1.0) ? _865 : (isnan(_865) ? 1.0 : min(_865, 1.0));
        _2452 = (_2818 * _2809) + _2204;
        _2454 = (_2818 * _2811) + _2205;
        _2456 = (_2818 * _2813) + _2206;
        _2458 = ((_2803 * 0.039999999105930328369140625) * _2818) + _2282;
        _2460 = ((_2805 * 0.039999999105930328369140625) * _2818) + _2286;
        _2462 = ((_2807 * 0.039999999105930328369140625) * _2818) + _2290;
    }
    else
    {
        _2452 = _2204;
        _2454 = _2205;
        _2456 = _2206;
        _2458 = _2282;
        _2460 = _2286;
        _2462 = _2290;
    }
    float _2482 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2483 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2484 = cbSceneParam._m0[86u].x * ((_799 / cbSceneParam._m0[86u].x) + (((10.0 / (_756 + 10.0)) * cbMtdParam._m0[12u].y) * dot(vec3(_728, _729, _730), vec3(_203, _204, _205))));
    float _2485 = isnan(_2482) ? _2484 : (isnan(_2484) ? _2482 : min(_2484, _2482));
    float _2486 = isnan(_2483) ? _800 : (isnan(_800) ? _2483 : min(_800, _2483));
    vec4 _2488 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2485, _2486), 0.0);
    float _2490 = _2488.x;
    bool _2510 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2490)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2490))) > _756;
    float _2511 = _2510 ? _2485 : _799;
    float _2512 = _2510 ? _2486 : _800;
    vec4 _2514 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2511, _2512));
    vec4 _2519 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2511, _2512));
    float _2521 = _2519.x;
    bool _2526 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2535 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2541 = (_2526 ? (_2535 / (cbSceneParam._m0[2u].x - _2521)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2521))) - _756;
    float _2543 = cbMtdParam._m0[21u].z + 0.008000000379979610443115234375;
    float _2545 = cbMtdParam._m0[21u].w + 0.008000000379979610443115234375;
    float _2546 = cbMtdParam._m0[22u].x + 0.008000000379979610443115234375;
    bool _2552 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2556 = (isnan(_2541) ? 0.0 : (isnan(0.0) ? _2541 : max(0.0, _2541))) * (-1.44269502162933349609375);
    float _4711 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4722 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4733 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _2704;
    float _2705;
    float _2706;
    if ((1.0 - _697) > 0.00999999977648258209228515625)
    {
        vec4 _2626 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2511, _2512), 0.0);
        float _2628 = _2626.x;
        float _2634 = (_2526 ? (_2535 / (cbSceneParam._m0[2u].x - _2628)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2628))) - _756;
        uint _2640 = floatBitsToUint(cbInstanceData._m0[_2166]).x * 14u;
        uint _2646 = _2640 + 4u;
        float _2655 = dot(vec3(cbLight._m0[_2640].xyz), vec3(_224, _225, _226));
        float _2663 = dot(vec3((-0.0) - _792, (-0.0) - _793, (-0.0) - _794), vec3((-0.0) - _224, (-0.0) - _225, (-0.0) - _226));
        float _2668 = ((isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2655 : (isnan(_2655) ? 0.001000000047497451305389404296875 : max(_2655, 0.001000000047497451305389404296875)))) + 1.0;
        float _2670 = (-0.0) - ((isnan(_2634) ? 0.0 : (isnan(0.0) ? _2634 : max(0.0, _2634))) * _2668);
        _2704 = _2552 ? 0.0 : (((cbLight._m0[_2646].x * 0.00063661974854767322540283203125) / ((_2668 * _2543) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2543 * 1.44269502162933349609375) * _2670)));
        _2705 = _2552 ? 0.0 : (((cbLight._m0[_2646].y * 0.00063661974854767322540283203125) / ((_2668 * _2545) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2545 * 1.44269502162933349609375) * _2670)));
        _2706 = _2552 ? 0.0 : (((cbLight._m0[_2646].z * 0.00063661974854767322540283203125) / ((_2668 * _2546) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2546 * 1.44269502162933349609375) * _2670)));
    }
    else
    {
        _2704 = 0.0;
        _2705 = 0.0;
        _2706 = 0.0;
    }
    float _2723 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _2724 = (_2704 + ((exp2(_2556 * (_2552 ? 0.0 : _2543)) * _2514.x) * cbSceneParam._m0[72u].w)) * _2723;
    float _2725 = (_2705 + ((exp2(_2556 * (_2552 ? 0.0 : _2545)) * _2514.y) * cbSceneParam._m0[72u].w)) * _2723;
    float _2726 = (_2706 + ((exp2(_2556 * (_2552 ? 0.0 : _2546)) * _2514.z) * cbSceneParam._m0[72u].w)) * _2723;
    float _2748 = _799 / cbSceneParam._m0[86u].x;
    float _2749 = _800 / cbSceneParam._m0[86u].y;
    vec4 _2763 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2748, _2749, (log2((isnan(cbSceneParam._m0[77u].w) ? _756 : (isnan(_756) ? cbSceneParam._m0[77u].w : min(_756, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2765 = _2763.x;
    float _2766 = _2763.y;
    float _2767 = _2763.z;
    float _2768 = _2763.w;
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    if (_756 > cbSceneParam._m0[78u].w)
    {
        float _2856 = isnan(_756) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _756 : min(cbSceneParam._m0[80u].w, _756));
        float _2857 = _2856 / _756;
        float _2868 = _2857 * _785;
        float _2869 = _786 * _2857;
        float _2870 = (-0.0) - _2869;
        float _2871 = _2857 * _787;
        float _2873 = (cbSceneParam._m0[77u].w * _2870) / _2856;
        float _2874 = _2873 + cbSceneParam._m0[79u].w;
        float _2875 = cbSceneParam._m0[79u].w - _2869;
        float _2881 = sqrt(((_2868 * _2868) + (_2869 * _2869)) + (_2871 * _2871));
        float _2884 = (1.0 - (cbSceneParam._m0[77u].w / _2856)) * _2881;
        float _2889 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2890 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3245;
        if (abs((_2870 - _2873) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3245 = ((((_2874 > 0.0) ? exp2(_2889 * _2874) : (2.0 - exp2(_2890 * _2874))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2884;
        }
        else
        {
            float _3019 = 1.0 / cbSceneParam._m0[80u].x;
            float _3020 = isnan(_2875) ? _2874 : (isnan(_2874) ? _2875 : max(_2874, _2875));
            float _3021 = isnan(_2875) ? _2874 : (isnan(_2874) ? _2875 : min(_2874, _2875));
            float _3030 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : min(_3020, 0.0));
            float _3031 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : min(_3021, 0.0));
            _3245 = ((abs(_2881 / _2870) * cbSceneParam._m0[80u].y) * ((((_3030 - _3031) * 2.0) - ((exp2(_2889 * (isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0)))) - exp2(_2889 * (isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0))))) * _3019)) - ((exp2(_2890 * _3030) - exp2(_2890 * _3031)) * _3019))) + (_2884 * cbSceneParam._m0[80u].z);
        }
        vec4 _3247 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2748, _2749, 1.0), 0.0);
        float _3256 = exp2((_3245 * (-1.44269502162933349609375)) * (1.0 - _3247.w));
        float _3257 = log2(_3256);
        float _3273 = log2(_2768);
        _2891 = (exp2(_3273 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].x)) * _3247.x) / cbSceneParam._m0[78u].x)) + _2765;
        _2893 = (exp2(_3273 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].y)) * _3247.y) / cbSceneParam._m0[78u].y)) + _2766;
        _2895 = (exp2(_3273 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].z)) * _3247.z) / cbSceneParam._m0[78u].z)) + _2767;
        _2897 = _3256 * _2768;
    }
    else
    {
        _2891 = _2765;
        _2893 = _2766;
        _2895 = _2767;
        _2897 = _2768;
    }
    bool _2909 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2910 = log2(_2897);
    float _2917 = exp2(_2910 * cbSceneParam._m0[78u].x) * ((_2724 + ((_2458 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1681)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2452 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _865))) - _2724) * _697));
    float _2918 = exp2(_2910 * cbSceneParam._m0[78u].y) * ((_2725 + ((_2460 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1681)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2454 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _865))) - _2725) * _697));
    float _2919 = exp2(_2910 * cbSceneParam._m0[78u].z) * ((_2726 + ((_2462 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1681)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2456 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _865))) - _2726) * _697));
    vec4 _2927 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_799, _800));
    float _2929 = _2927.x;
    float _2950 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2929)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2929))) - _756) * 3.0;
    float _4799 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
    float _2952 = (cbInstanceData._m0[_840 + 6u].w * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)));
    float _2961 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2961 * (_2909 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2891)));
    SV_Target.y = _2961 * (_2909 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2893)));
    SV_Target.z = _2961 * (_2909 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2895)));
    SV_Target.w = _2952;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2952;
}


