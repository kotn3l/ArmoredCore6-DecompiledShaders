#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_ocean_LOD1_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1290;
float _3814;
float _3815;
float _3816;
float _3817;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    float _299 = cbMtdParam._m0[13u].w - cbMtdParam._m0[13u].z;
    float _301 = (sqrt(((_284 * _284) + (_285 * _285)) + (_286 * _286)) - cbMtdParam._m0[13u].z) / (isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0)));
    float _306 = _301 / cbMtdParam._m0[15u].y;
    float _307 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _308 = isnan(8.0) ? _307 : (isnan(_307) ? 8.0 : min(_307, 8.0));
    float _315 = cbMtdParam._m0[10u].x * _308;
    float _316 = cbMtdParam._m0[10u].y * _308;
    float _317 = cbMtdParam._m0[10u].z * _308;
    float _318 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _319 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _320 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _334 = cbMtdParam._m0[14u].x + _301;
    float _339 = _334 * cbMtdParam._m0[16u].x;
    float _3871 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    vec4 _360 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _363 = _360.x;
    bool _370 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _386 = ((_370 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _363)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _363))) - POSITION_1.w) / cbMtdParam._m0[12u].w;
    float _3882 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _390 = 1.0 - (isnan(0.75) ? _387 : (isnan(_387) ? 0.75 : max(_387, 0.75)));
    float _392 = (cbMtdParam._m0[17u].z + TEXCOORD_3.x) - (_390 * cbMtdParam._m0[13u].y);
    float _402 = cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x;
    vec4 _418 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_2, SS_BumpMap), vec2((((_402 * cbMtdParam._m0[19u].x) + TEXCOORD) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((_402 * cbMtdParam._m0[19u].y) + TEXCOORD_1) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _3898 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _424 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _425 = _418.z - _424;
    float _3909 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _438 = (_426 * 0.00999999977648258209228515625) + TEXCOORD;
    float _440 = (_426 * (-0.00999999977648258209228515625)) + TEXCOORD_1;
    vec4 _453 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((_438 + (cbMtdParam._m0[18u].z * _402)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_440 + (cbMtdParam._m0[18u].w * _402)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _457 = _453.z;
    vec4 _468 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((_438 + (cbMtdParam._m0[18u].x * _402)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_440 + (cbMtdParam._m0[18u].y * _402)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _472 = _468.z;
    float _475 = (_390 - _418.w) + (isnan(_472) ? _457 : (isnan(_457) ? _472 : max(_457, _472)));
    float _3925 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _477 = (_392 * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)));
    float _489 = (_477 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[11u].x * _426);
    float _490 = (_477 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[11u].y * _426);
    float _491 = (_477 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[11u].z * _426);
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    vec4 _534 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_514 / cbMtdParam._m0[14u].y) + (cbMtdParam._m0[19u].z * _402))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_518 / cbMtdParam._m0[14u].y) + (cbMtdParam._m0[19u].w * _402))) + cbTextureTilingScale._m0[1u].w));
    float _539 = _534.z * 0.099999986588954925537109375;
    float _3936 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _541 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _545 = cbMtdParam._m0[15u].w * _301;
    float _3947 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _560 = (_489 + (isnan(0.07999999821186065673828125) ? _318 : (isnan(_318) ? 0.07999999821186065673828125 : min(_318, 0.07999999821186065673828125)))) + (_546 * (((1.0 - _489) - _541) + _539));
    float _562 = (_490 + (isnan(0.07999999821186065673828125) ? _319 : (isnan(_319) ? 0.07999999821186065673828125 : min(_319, 0.07999999821186065673828125)))) + (_546 * (((1.0 - _490) - _541) + _539));
    float _564 = (_491 + (isnan(0.07999999821186065673828125) ? _320 : (isnan(_320) ? 0.07999999821186065673828125 : min(_320, 0.07999999821186065673828125)))) + (_546 * (((1.0 - _491) + _539) - _541));
    float _3958 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _565 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _566 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _574 = _301 / cbMtdParam._m0[17u].x;
    float _3991 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _577 = (1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbMtdParam._m0[16u].w;
    float _584 = ((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _424) + cbMtdParam._m0[12u].x;
    float _4002 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _585 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _594 = _301 / cbMtdParam._m0[15u].z;
    float _4013 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _596 = _426 * 0.23999999463558197021484375;
    float _598 = _426 * (-0.20000000298023223876953125);
    float _609 = cbMtdParam._m0[20u].z * TEXCOORD;
    float _610 = cbMtdParam._m0[20u].w * TEXCOORD_1;
    vec4 _619 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[20u].x * _402) + _596) + _609) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[20u].y * _402) + _598) + _610) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _638 = texture(sampler2D(M_Water_ocean_LOD1_snp_0_Texture2D_0, SS_BumpMap), vec2((((_609 + _596) + (cbMtdParam._m0[21u].x * _402)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_610 + _598) + (cbMtdParam._m0[21u].y * _402)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _657 = (((_468.x + (-0.5)) * 0.5) + _453.x) + (((_619.x + (-1.0)) + _638.x) * cbMtdParam._m0[17u].y);
    float _658 = (((_468.y + (-0.5)) * 0.5) + _453.y) + (((_619.y + (-1.0)) + _638.y) * cbMtdParam._m0[17u].y);
    float _663 = ((_534.x - _657) * _595) + _657;
    float _664 = ((_534.y - _658) * _595) + _658;
    float _666 = _301 / cbMtdParam._m0[15u].x;
    float _4024 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _684 = ((((_585 * (0.5 - _420)) + _420) + (((_663 + (-0.5)) + ((0.5 - _663) * _667)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _685 = ((((_585 * (0.5 - _421)) + _421) + (((_664 + (-0.5)) + ((0.5 - _664) * _667)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _686 = dot(vec2(_684, _685), vec2(_684, _685));
    float _4035 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _691 = sqrt(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))));
    float _693 = cbMtdParam._m0[16u].y * _334;
    float _4046 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _698 = cbMtdParam._m0[14u].z * _334;
    float _4057 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _700 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * cbMtdParam._m0[17u].w;
    float _4068 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _706 = ((cbMtdParam._m0[16u].z - cbMtdParam._m0[14u].w) * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) + cbMtdParam._m0[14u].w;
    float _711 = _684 - (_706 * _684);
    float _712 = _685 - (_706 * _685);
    float _713 = (_706 * (1.0 - _691)) + _691;
    float _721 = fma(_691, _228, fma(_685, _221, _684 * _207));
    float _724 = fma(_691, _229, fma(_685, _222, _684 * _208));
    float _727 = fma(_691, _230, fma(_685, _223, _684 * _209));
    float _731 = inversesqrt(dot(vec3(_721, _724, _727), vec3(_721, _724, _727)));
    float _732 = _731 * _721;
    float _733 = _731 * _724;
    float _734 = _731 * _727;
    float _737 = fma(_713, _228, fma(_712, _221, _711 * _207));
    float _740 = fma(_713, _229, fma(_712, _222, _711 * _208));
    float _743 = fma(_713, _230, fma(_712, _223, _711 * _209));
    float _747 = inversesqrt(dot(vec3(_737, _740, _743), vec3(_737, _740, _743)));
    float _748 = _747 * _737;
    float _749 = _747 * _740;
    float _750 = _747 * _743;
    float _4079 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4090 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _752 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4112 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4123 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _760 = _370 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _789 = cbSceneParam._m0[71u].x - (_514 / _780);
    float _790 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _780);
    float _791 = cbSceneParam._m0[71u].z - (_518 / _780);
    float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
    float _796 = _789 * _795;
    float _797 = _790 * _795;
    float _798 = _791 * _795;
    vec4 _803 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _805 = _803.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _972 = sqrt(((_789 * _789) + (_790 * _790)) + (_791 * _791));
        float _978 = (cbMatDynParam._m0[5u].x * _972) + cbMatDynParam._m0[5u].y;
        float _4134 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _983 = (cbMatDynParam._m0[5u].z * _972) + cbMatDynParam._m0[5u].w;
        float _4145 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) - _979)) + _979) < ((_805 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _816 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _817 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _837 = fma(_734, cbSceneParam._m0[5u].z, fma(_733, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _732));
    float _840 = fma(_734, cbSceneParam._m0[6u].z, fma(_733, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _732));
    float _843 = fma(_734, cbSceneParam._m0[7u].z, fma(_733, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _732));
    uint _856 = uint(roundEven(NORMAL.w)) * 13u;
    uint _857 = _856 + 9u;
    uint _858 = _857 + uint(cbMatDynParam._m0[0u].w);
    float _864 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * cbInstanceData._m0[_858].x;
    float _865 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * cbInstanceData._m0[_858].y;
    float _866 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_858].z;
    float _4156 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _4167 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _4178 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    vec4 _878 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _816, cbSceneParam._m0[86u].y * _817));
    float _881 = _878.x * TEXCOORD_3.w;
    float _885 = abs(dot(vec3(_796, _797, _798), vec3(_732, _733, _734)));
    float _4189 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _898 = dot(vec3(_748, _749, _750), vec3(_796, _797, _798)) * 2.0;
    float _902 = (_898 * _748) - _796;
    float _903 = (_898 * _749) - _797;
    float _904 = (_898 * _750) - _798;
    float _908 = abs(dot(vec3(_796, _797, _798), vec3(_748, _749, _750)));
    float _4200 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _910 = sqrt(_752);
    float _922 = exp2((_910 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_910 * 3.0));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1289;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1016 = fma(_961, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953));
        float _1020 = fma(_961, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953));
        float _1024 = fma(_961, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953));
        float _1047 = _953 + _748;
        float _1048 = _957 + _749;
        float _1049 = _961 + _750;
        float _1059 = fma(_1049, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047)) - _1016;
        float _1060 = fma(_1049, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047)) - _1020;
        float _1061 = fma(_1049, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047)) - _1024;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1016 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1020 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[34u].z) + ((((((_1024 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1117 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1083.x + (-0.5));
        float _1119 = _1117 * (_1083.y + (-0.5));
        float _1120 = _1117 * (_1083.z + (-0.5));
        float _1127 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1090.x + (-0.5));
        float _1129 = _1127 * (_1090.y + (-0.5));
        float _1130 = _1127 * (_1090.z + (-0.5));
        float _1137 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1097.x + (-0.5));
        float _1139 = _1137 * (_1097.y + (-0.5));
        float _1140 = _1137 * (_1097.z + (-0.5));
        float _1147 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1104.x + (-0.5));
        float _1149 = _1147 * (_1104.y + (-0.5));
        float _1150 = _1147 * (_1104.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1171 = (dot(vec3(_748, _749, _750), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1181 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _4248 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1183 + 1.0))) + _1188) * _1151;
        float _1198 = _1119 * 0.5;
        float _1199 = _1129 * 0.5;
        float _1200 = _1139 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_748, _749, _750), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _4281 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1225 + 1.0))) + _1230) * _1152;
        float _1240 = _1120 * 0.5;
        float _1241 = _1130 * 0.5;
        float _1242 = _1140 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_748, _749, _750), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4314 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1267 + 1.0))) + _1272) * _1153;
        _1289 = _1120;
        _1291 = _1119;
        _1292 = _1118;
        _1293 = _1130;
        _1294 = _1129;
        _1295 = _1128;
        _1296 = _1140;
        _1297 = _1139;
        _1298 = _1138;
        _1299 = _1153;
        _1300 = _1152;
        _1301 = _1151;
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _1290;
        _1291 = _1290;
        _1292 = _1290;
        _1293 = _1290;
        _1294 = _1290;
        _1295 = _1290;
        _1296 = _1290;
        _1297 = _1290;
        _1298 = _1290;
        _1299 = _1290;
        _1300 = _1290;
        _1301 = _1290;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1333 = fma(_961, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953));
        float _1337 = fma(_961, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953));
        float _1341 = fma(_961, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953));
        float _1364 = _953 + _748;
        float _1365 = _957 + _749;
        float _1366 = _961 + _750;
        float _1376 = fma(_1366, cbModelParam._m0[30u].z, fma(_1365, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1364)) - _1333;
        float _1377 = fma(_1366, cbModelParam._m0[31u].z, fma(_1365, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1364)) - _1337;
        float _1378 = fma(_1366, cbModelParam._m0[32u].z, fma(_1365, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1364)) - _1341;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1333 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1337 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[35u].z) + ((((((_1341 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1432 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1399.x + (-0.5));
        float _1434 = _1432 * (_1399.y + (-0.5));
        float _1435 = _1432 * (_1399.z + (-0.5));
        float _1442 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1406.x + (-0.5));
        float _1444 = _1442 * (_1406.y + (-0.5));
        float _1445 = _1442 * (_1406.z + (-0.5));
        float _1452 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1413.x + (-0.5));
        float _1454 = _1452 * (_1413.y + (-0.5));
        float _1455 = _1452 * (_1413.z + (-0.5));
        float _1462 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1420.x + (-0.5));
        float _1464 = _1462 * (_1420.y + (-0.5));
        float _1465 = _1462 * (_1420.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_748, _749, _750), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4355 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4366 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4377 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_1496 + 1.0))) + _1501) * _1466;
        float _1511 = _1434 * 0.5;
        float _1512 = _1444 * 0.5;
        float _1513 = _1454 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_748, _749, _750), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4388 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4399 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4410 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_1538 + 1.0))) + _1543) * _1467;
        float _1553 = _1435 * 0.5;
        float _1554 = _1445 * 0.5;
        float _1555 = _1455 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_748, _749, _750), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4421 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4432 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4443 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_1580 + 1.0))) + _1585) * _1468;
        _1602 = _1435;
        _1603 = _1434;
        _1604 = _1433;
        _1605 = _1445;
        _1606 = _1444;
        _1607 = _1443;
        _1608 = _1455;
        _1609 = _1454;
        _1610 = _1453;
        _1611 = _1468;
        _1612 = _1467;
        _1613 = _1466;
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
    }
    else
    {
        _1602 = _1290;
        _1603 = _1290;
        _1604 = _1290;
        _1605 = _1290;
        _1606 = _1290;
        _1607 = _1290;
        _1608 = _1290;
        _1609 = _1290;
        _1610 = _1290;
        _1611 = _1290;
        _1612 = _1290;
        _1613 = _1290;
        _1614 = 0.0;
        _1615 = 0.0;
        _1616 = 0.0;
    }
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1302)) + _1302;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1303)) + _1303;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1304)) + _1304;
    float _1649 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1626));
    float _1670 = _902 * 0.5;
    float _1671 = _903 * 0.5;
    float _1672 = _904 * 0.5;
    float _1673 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1676 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1679 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1713;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1686 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1289, _1293, _1296, _1299));
        float _1690 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1694 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1701 = dot(vec4(cbModelParam._m0[39u]), vec4(_1670, _1671, _1672, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1724;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1715 = dot(vec4(cbModelParam._m0[40u]), vec4(_1670, _1671, _1672, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1728 = (_1724 * cbModelParam._m0[1u].x) + (_1713 * (1.0 - cbModelParam._m0[1u].x));
    float _1738 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _752);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1738 : min(cbModelParam._m0[25u].z, _1738));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1786 = fma(_961, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953)) + cbModelParam._m0[13u].w;
        float _1790 = fma(_961, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953)) + cbModelParam._m0[14u].w;
        float _1794 = fma(_961, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953)) + cbModelParam._m0[15u].w;
        float _1797 = fma(_904, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _902));
        float _1800 = fma(_904, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _902));
        float _1803 = fma(_904, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _902));
        float _1831;
        if (_1797 > 0.0)
        {
            _1831 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1831 = frontier_phi_19_17_ladder;
        }
        float _2000;
        if (_1800 > 0.0)
        {
            _2000 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2000 = frontier_phi_28_24_ladder;
        }
        float _2343;
        if (_1803 > 0.0)
        {
            _2343 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2343 = frontier_phi_40_35_ladder;
        }
        float _2345 = isnan(_2000) ? _1831 : (isnan(_1831) ? _2000 : min(_1831, _2000));
        float _2346 = isnan(_2343) ? _2345 : (isnan(_2345) ? _2343 : min(_2345, _2343));
        float _2350 = (_2346 * _1797) + _1786;
        float _2351 = (_2346 * _1800) + _1790;
        float _2352 = (_2346 * _1803) + _1794;
        float _2353 = _2346 * 9.9999997473787516355514526367188e-05;
        float _2355 = (-1.0) - _2353;
        float _2357 = _2353 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2352 > _2357) || ((_2352 < _2355) || ((_2351 > _2357) || ((_2351 < _2355) || ((_2350 < _2355) || (_2350 > _2357))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2352, cbModelParam._m0[9u].z, fma(_2351, cbModelParam._m0[9u].y, _2350 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2352, cbModelParam._m0[10u].z, fma(_2351, cbModelParam._m0[10u].y, _2350 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2352, cbModelParam._m0[11u].z, fma(_2351, cbModelParam._m0[11u].y, _2350 * cbModelParam._m0[11u].x))), _1739);
            frontier_phi_18_40_ladder = _2642.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2642.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2642.x * cbModelParam._m0[1u].y;
        }
        _1819 = frontier_phi_18_40_ladder_2;
        _1821 = frontier_phi_18_40_ladder_1;
        _1823 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_902, _903, _904), _1739);
        _1819 = _1807.x * cbModelParam._m0[1u].y;
        _1821 = _1807.y * cbModelParam._m0[1u].y;
        _1823 = _1807.z * cbModelParam._m0[1u].y;
    }
    float _1827 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _752);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1827 : min(cbModelParam._m0[25u].w, _1827));
    float _1917;
    float _1919;
    float _1921;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1881 = fma(_961, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953)) + cbModelParam._m0[21u].w;
        float _1885 = fma(_961, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953)) + cbModelParam._m0[22u].w;
        float _1889 = fma(_961, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953)) + cbModelParam._m0[23u].w;
        float _1892 = fma(_904, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _902));
        float _1895 = fma(_904, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _902));
        float _1898 = fma(_904, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _902));
        float _2005;
        if (_1892 > 0.0)
        {
            _2005 = abs((1.0 - _1881) / _1892);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1881 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2005 = frontier_phi_30_26_ladder;
        }
        float _2370;
        if (_1895 > 0.0)
        {
            _2370 = abs((1.0 - _1885) / _1895);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1885 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2370 = frontier_phi_42_37_ladder;
        }
        float _2824;
        if (_1898 > 0.0)
        {
            _2824 = abs((1.0 - _1889) / _1898);
        }
        else
        {
            float frontier_phi_54_49_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_54_49_ladder = abs((_1889 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_54_49_ladder = 5000.0;
            }
            _2824 = frontier_phi_54_49_ladder;
        }
        float _2826 = isnan(_2370) ? _2005 : (isnan(_2005) ? _2370 : min(_2005, _2370));
        float _2827 = isnan(_2824) ? _2826 : (isnan(_2826) ? _2824 : min(_2826, _2824));
        float _2831 = (_2827 * _1892) + _1881;
        float _2832 = (_2827 * _1895) + _1885;
        float _2833 = (_2827 * _1898) + _1889;
        float _2834 = _2827 * 9.9999997473787516355514526367188e-05;
        float _2835 = (-1.0) - _2834;
        float _2837 = _2834 + 1.0;
        float frontier_phi_27_54_ladder;
        float frontier_phi_27_54_ladder_1;
        float frontier_phi_27_54_ladder_2;
        if ((_2833 > _2837) || ((_2833 < _2835) || ((_2832 > _2837) || ((_2832 < _2835) || ((_2831 < _2835) || (_2831 > _2837))))))
        {
            frontier_phi_27_54_ladder = 0.0;
            frontier_phi_27_54_ladder_1 = 0.0;
            frontier_phi_27_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3044 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2833, cbModelParam._m0[17u].z, fma(_2832, cbModelParam._m0[17u].y, _2831 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2833, cbModelParam._m0[18u].z, fma(_2832, cbModelParam._m0[18u].y, _2831 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2833, cbModelParam._m0[19u].z, fma(_2832, cbModelParam._m0[19u].y, _2831 * cbModelParam._m0[19u].x))), _1828);
            frontier_phi_27_54_ladder = _3044.z * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_1 = _3044.y * cbModelParam._m0[1u].z;
            frontier_phi_27_54_ladder_2 = _3044.x * cbModelParam._m0[1u].z;
        }
        _1917 = frontier_phi_27_54_ladder_2;
        _1919 = frontier_phi_27_54_ladder_1;
        _1921 = frontier_phi_27_54_ladder;
    }
    else
    {
        vec4 _1901 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_902, _903, _904), _1828);
        _1917 = _1901.x * cbModelParam._m0[1u].z;
        _1919 = _1901.y * cbModelParam._m0[1u].z;
        _1921 = _1901.z * cbModelParam._m0[1u].z;
    }
    float _1933 = ((((1.0 - _922) * ((_910 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_922 * _910)) * _881;
    float _1934 = _1933 * ((cbModelParam._m0[1u].w * (_1917 - _1819)) + _1819);
    float _1935 = _1933 * ((cbModelParam._m0[1u].w * (_1919 - _1821)) + _1821);
    float _1936 = _1933 * ((cbModelParam._m0[1u].w * (_1921 - _1823)) + _1823);
    float _1939 = fma(_1936, cbSceneParam._m0[89u].z, fma(_1935, cbSceneParam._m0[89u].y, _1934 * cbSceneParam._m0[89u].x));
    float _1942 = fma(_1936, cbSceneParam._m0[90u].z, fma(_1935, cbSceneParam._m0[90u].y, _1934 * cbSceneParam._m0[90u].x));
    float _1945 = fma(_1936, cbSceneParam._m0[91u].z, fma(_1935, cbSceneParam._m0[91u].y, _1934 * cbSceneParam._m0[91u].x));
    float _1979 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1983 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1987 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1991 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1992 = _1979 / _1991;
    float _1993 = _1983 / _1991;
    float _1994 = _1987 / _1991;
    float _2141;
    float _2142;
    float _2143;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2021 = ((uint(_1994 > cbSceneParam._m0[59u].y) + uint(_1994 > cbSceneParam._m0[59u].x)) + uint(_1994 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2022 = _2021 + 43u;
        uint _2030 = _2021 + 44u;
        uint _2038 = _2021 + 45u;
        uint _2046 = _2021 + 46u;
        float _2057 = fma(_1991, cbSceneParam._m0[_2022].w, fma(_1987, cbSceneParam._m0[_2022].z, fma(_1983, cbSceneParam._m0[_2022].y, _1979 * cbSceneParam._m0[_2022].x)));
        float _2061 = fma(_1991, cbSceneParam._m0[_2030].w, fma(_1987, cbSceneParam._m0[_2030].z, fma(_1983, cbSceneParam._m0[_2030].y, _1979 * cbSceneParam._m0[_2030].x)));
        float _2069 = fma(_1991, cbSceneParam._m0[_2046].w, fma(_1987, cbSceneParam._m0[_2046].z, fma(_1983, cbSceneParam._m0[_2046].y, _1979 * cbSceneParam._m0[_2046].x)));
        float _2074 = cbSceneParam._m0[33u].z * _2069;
        float _2076 = cbSceneParam._m0[33u].w * _2069;
        float _2079 = fma(_1991, cbSceneParam._m0[_2038].w, fma(_1987, cbSceneParam._m0[_2038].z, fma(_1983, cbSceneParam._m0[_2038].y, _1979 * cbSceneParam._m0[_2038].x))) / _2069;
        float _2127 = (cbSceneParam._m0[33u].x - sqrt(((_1993 * _1993) + (_1992 * _1992)) + (_1994 * _1994))) * cbSceneParam._m0[33u].y;
        float _4569 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2134 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 + _2057) / _2069, (_2076 + _2061) / _2069), _2079), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2076 + _2057) / _2069, (_2061 - _2074) / _2069), _2079), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2057 - _2074) / _2069, (_2061 - _2076) / _2069), _2079), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2057 - _2076) / _2069, (_2074 + _2061) / _2069), _2079), 0.0)).x), vec4(0.25)));
        _2141 = 1.0 - (_2134 * cbSceneParam._m0[34u].x);
        _2142 = 1.0 - (_2134 * cbSceneParam._m0[34u].y);
        _2143 = 1.0 - (_2134 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2141 = 1.0;
        _2142 = 1.0;
        _2143 = 1.0;
    }
    float _2207;
    float _2209;
    float _2211;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2195 = fma(_1991, cbSceneParam._m0[63u].w, fma(_1987, cbSceneParam._m0[63u].z, fma(_1983, cbSceneParam._m0[63u].y, _1979 * cbSceneParam._m0[63u].x)));
        float _2196 = fma(_1991, cbSceneParam._m0[60u].w, fma(_1987, cbSceneParam._m0[60u].z, fma(_1983, cbSceneParam._m0[60u].y, _1979 * cbSceneParam._m0[60u].x))) / _2195;
        float _2197 = fma(_1991, cbSceneParam._m0[61u].w, fma(_1987, cbSceneParam._m0[61u].z, fma(_1983, cbSceneParam._m0[61u].y, _1979 * cbSceneParam._m0[61u].x))) / _2195;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2196 >= cbSceneParam._m0[64u].x) && (_2197 >= cbSceneParam._m0[64u].y)) && (_2196 <= cbSceneParam._m0[64u].z)) && (_2197 <= cbSceneParam._m0[64u].w))
        {
            float _2383 = fma(_1991, cbSceneParam._m0[62u].w, fma(_1987, cbSceneParam._m0[62u].z, fma(_1983, cbSceneParam._m0[62u].y, _1979 * cbSceneParam._m0[62u].x))) / _2195;
            float _2387 = isnan(cbSceneParam._m0[41u].w) ? _2383 : (isnan(_2383) ? cbSceneParam._m0[41u].w : max(_2383, cbSceneParam._m0[41u].w));
            float _2430 = (cbSceneParam._m0[33u].x - sqrt(((_1993 * _1993) + (_1992 * _1992)) + (_1994 * _1994))) * cbSceneParam._m0[33u].y;
            float _4585 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
            float _2437 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2196, cbSceneParam._m0[33u].w + _2197), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2196, _2197 - cbSceneParam._m0[33u].z), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2196 - cbSceneParam._m0[33u].z, _2197 - cbSceneParam._m0[33u].w), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2196 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2197), _2387), 0.0)).x), vec4(0.25)));
            float _2441 = 1.0 - (_2437 * cbSceneParam._m0[34u].x);
            float _2442 = 1.0 - (_2437 * cbSceneParam._m0[34u].y);
            float _2443 = 1.0 - (_2437 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2443) ? _2143 : (isnan(_2143) ? _2443 : min(_2143, _2443));
            frontier_phi_39_38_ladder_1 = isnan(_2442) ? _2142 : (isnan(_2142) ? _2442 : min(_2142, _2442));
            frontier_phi_39_38_ladder_2 = isnan(_2441) ? _2141 : (isnan(_2141) ? _2441 : min(_2141, _2441));
        }
        else
        {
            frontier_phi_39_38_ladder = _2143;
            frontier_phi_39_38_ladder_1 = _2142;
            frontier_phi_39_38_ladder_2 = _2141;
        }
        _2207 = frontier_phi_39_38_ladder_2;
        _2209 = frontier_phi_39_38_ladder_1;
        _2211 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2207 = _2141;
        _2209 = _2142;
        _2211 = _2143;
    }
    uint _2213 = _856 + 5u;
    uvec4 _2216 = floatBitsToUint(cbInstanceData._m0[_2213]);
    uint _2218 = _2216.x * 14u;
    float _2225 = (cbLight._m0[_2218 + 13u].x * (_881 + (-1.0))) + 1.0;
    uint _2226 = _2218 + 4u;
    float _2236 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
    float _2245 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_732, _733, _734));
    float _4616 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2249 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * 0.3183098733425140380859375;
    float _2251 = ((cbLight._m0[_2226].x * _2207) * _2236) * _2249;
    float _2252 = ((cbLight._m0[_2226].y * _2209) * _2236) * _2249;
    float _2253 = ((cbLight._m0[_2226].z * _2211) * _2236) * _2249;
    uint _2255 = _2218 + 8u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _752) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_2218].x + _796;
    float _2271 = cbLight._m0[_2218].y + _797;
    float _2272 = cbLight._m0[_2218].z + _798;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_732, _733, _734), vec3(cbLight._m0[_2218].xyz));
    float _4627 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _2284 = dot(vec3(_732, _733, _734), vec3(_796, _797, _798));
    float _4638 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2288 = dot(vec3(_732, _733, _734), vec3(_2277, _2278, _2279));
    float _4649 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _2292 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2277, _2278, _2279));
    float _4660 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2296 = _2269 * _2269;
    float _2300 = ((_2291 * _2291) * (_2296 + (-1.0))) + 1.0;
    float _2311 = (exp2(log2(1.0 - (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2312 = 1.0 - _2269;
    float _2323 = (0.5 / (((_2287 * ((_2283 * _2312) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2312) + _2269) * _2283))) * _2283;
    float _4671 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2325 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2296 / ((_2300 * _2300) * 3.141590118408203125));
    float _2329 = (((cbLight._m0[_2255].x * _2207) * _2311) * _2325) * _2236;
    float _2333 = (((cbLight._m0[_2255].y * _2209) * _2311) * _2325) * _2236;
    float _2337 = (((cbLight._m0[_2255].z * _2211) * _2311) * _2325) * _2236;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    if (_2216.y == 0u)
    {
        uvec4 _2455 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2456 = _2455.x;
        uint _2467 = uint((float(_2455.y) * floor(float(uint(cbSceneParam._m0[85u].y * _817) / _2456))) + floor(float(uint(cbSceneParam._m0[85u].x * _816) / _2456)));
        float _2477 = (log2(_1994 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2478 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        uint _2481 = uint(isnan(14.0) ? _2478 : (isnan(_2478) ? 14.0 : min(_2478, 14.0)));
        uvec4 _2486 = texelFetch(g_lightClusterGridBuffer, int(((_2481 << 2u) + (_2467 << 6u)) >> 2u));
        uint _2487 = _2486.x;
        uint _2488 = _2455.z;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        if (((((1u << ((_2488 >> 4u) & 15u)) + 4294967295u) & _2487) == 0u) || ((_2488 & 240u) == 0u))
        {
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
        }
        else
        {
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            uint _2888 = 0u;
            uint _2897;
            bool _2898;
            for (;;)
            {
                _2897 = texelFetch(g_lightClassification, int((((_2481 << 5u) + (_2467 << 9u)) + (_2888 << 2u)) >> 2u)).x;
                _2898 = _2897 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2898)
                {
                    frontier_phi_63_pred = _2887;
                    frontier_phi_63_pred_1 = _2886;
                    frontier_phi_63_pred_2 = _2885;
                    frontier_phi_63_pred_3 = _2884;
                    frontier_phi_63_pred_4 = _2883;
                    frontier_phi_63_pred_5 = _2882;
                }
                else
                {
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    uint _3140;
                    _3134 = _2882;
                    _3135 = _2883;
                    _3136 = _2884;
                    _3137 = _2885;
                    _3138 = _2886;
                    _3139 = _2887;
                    _3140 = _2897;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    for (;;)
                    {
                        uint _3144 = uint(findLSB(_3140)) + (_2888 << 5u);
                        uint _3141 = (_3140 + 4294967295u) & _3140;
                        uint _3146 = _3144 * 48u;
                        vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3146)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 3u)).x));
                        uint _3166 = (_3144 * 48u) + 4u;
                        vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3166)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 3u)).x));
                        uint _3185 = (_3144 * 48u) + 8u;
                        vec3 _3196 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x));
                        float _3200 = _3160.x - _1992;
                        float _3201 = _3160.y - _1993;
                        float _3202 = _3160.z - _1994;
                        float _3203 = dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202));
                        float _3206 = inversesqrt(_3203);
                        float _3207 = _3206 * _3200;
                        float _3208 = _3206 * _3201;
                        float _3209 = _3206 * _3202;
                        float _3210 = dot(vec3(_837, _840, _843), vec3(_3207, _3208, _3209));
                        float _3215 = 1.0 - (_3203 * _3160.w);
                        float _4692 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3216 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                        float _3217 = sqrt(_3203) * _3179.w;
                        float _3220 = 1.39999997615814208984375 / (_3217 + 1.39999997615814208984375);
                        float _3221 = _3220 * _3220;
                        float _3224 = ((1.0 - _3221) * _3210) + _3221;
                        float _3227 = _3217 * _3217;
                        float _3231 = ((isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))) * _3216) / ((_3227 * 0.699999988079071044921875) + 1.0);
                        float _3235 = (-0.0) - _1992;
                        float _3236 = (-0.0) - _1993;
                        float _3237 = (-0.0) - _1994;
                        float _3241 = inversesqrt(dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237)));
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3251 = exp2(log2(1.0 / ((_3227 * 3.5) + 5.0)) * 0.25);
                        float _3252 = 1.0 - _910;
                        float _3259 = sqrt(1.0 - ((1.0 - (_3252 * _3252)) * (1.0 - (_3251 * _3251))));
                        float _3260 = _3259 * _3259;
                        float _3261 = _3260 * _3260;
                        float _3262 = _3242 + _3207;
                        float _3263 = _3243 + _3208;
                        float _3264 = _3244 + _3209;
                        float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                        float _3272 = dot(vec3(_837, _840, _843), vec3(_3242, _3243, _3244));
                        float _4708 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3275 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                        float _3276 = dot(vec3(_837, _840, _843), vec3(_3268 * _3262, _3268 * _3263, _3268 * _3264));
                        float _4719 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3283 = ((_3279 * _3279) * (_3261 + (-1.0))) + 1.0;
                        float _3284 = _3220 * _3260;
                        float _3285 = _3284 * _3284;
                        float _3288 = ((1.0 - _3285) * _3210) + _3285;
                        float _4730 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3290 = 1.0 - _3260;
                        float _3300 = (0.5 / (((_3289 * ((_3275 * _3290) + _3260)) + 9.9999999392252902907785028219223e-09) + (((_3289 * _3290) + _3260) * _3275))) * _3289;
                        float _4741 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3311 = (((_3261 * 3.1415927410125732421875) * (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) / ((_3283 * _3283) * ((_3227 * 2.1991131305694580078125) + 3.141590118408203125))) * _3216;
                        _3052 = (_3231 * _3179.x) + _3137;
                        _3053 = (_3231 * _3179.y) + _3138;
                        _3054 = (_3231 * _3179.z) + _3139;
                        _3049 = (_3311 * _3196.x) + _3134;
                        _3050 = (_3311 * _3196.y) + _3135;
                        _3051 = (_3311 * _3196.z) + _3136;
                        if (_3141 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3134 = _3049;
                            _3135 = _3050;
                            _3136 = _3051;
                            _3137 = _3052;
                            _3138 = _3053;
                            _3139 = _3054;
                            _3140 = _3141;
                        }
                    }
                    frontier_phi_63_pred = _3054;
                    frontier_phi_63_pred_1 = _3053;
                    frontier_phi_63_pred_2 = _3052;
                    frontier_phi_63_pred_3 = _3051;
                    frontier_phi_63_pred_4 = _3050;
                    frontier_phi_63_pred_5 = _3049;
                }
                _2662 = frontier_phi_63_pred;
                _2660 = frontier_phi_63_pred_1;
                _2658 = frontier_phi_63_pred_2;
                _2656 = frontier_phi_63_pred_3;
                _2654 = frontier_phi_63_pred_4;
                _2652 = frontier_phi_63_pred_5;
                uint _2889 = _2888 + 1u;
                if (_2889 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2882 = _2652;
                    _2883 = _2654;
                    _2884 = _2656;
                    _2885 = _2658;
                    _2886 = _2660;
                    _2887 = _2662;
                    _2888 = _2889;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
        }
        uvec4 _2665 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2666 = _2665.z;
        uint _2668 = (_2666 >> 8u) & 15u;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        if (((4294967295u << _2668) & _2487) == 0u)
        {
            _2850 = _2651;
            _2852 = _2653;
            _2854 = _2655;
            _2856 = _2657;
            _2858 = _2659;
            _2860 = _2661;
        }
        else
        {
            float _2875 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
            float _2876 = _2875 * _1992;
            float _2877 = _2875 * _1993;
            float _2878 = _2875 * _1994;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2668 < ((_2666 >> 12u) & 15u))
            {
                float _2851;
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _2861;
                float _3117 = _2651;
                float _3118 = _2653;
                float _3119 = _2655;
                float _3120 = _2657;
                float _3121 = _2659;
                float _3122 = _2661;
                uint _3123 = _2668;
                uint _3132;
                bool _3133;
                for (;;)
                {
                    _3132 = texelFetch(g_lightClassification, int((((_2481 << 5u) + (_2467 << 9u)) + (_3123 << 2u)) >> 2u)).x;
                    _3133 = _3132 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_3133)
                    {
                        frontier_phi_75_pred = _3121;
                        frontier_phi_75_pred_1 = _3120;
                        frontier_phi_75_pred_2 = _3119;
                        frontier_phi_75_pred_3 = _3118;
                        frontier_phi_75_pred_4 = _3117;
                        frontier_phi_75_pred_5 = _3122;
                    }
                    else
                    {
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3381 = _3117;
                        float _3382 = _3118;
                        float _3383 = _3119;
                        float _3384 = _3120;
                        float _3385 = _3121;
                        float _3386 = _3122;
                        uint _3387 = _3132;
                        uint _3388;
                        vec4 _3413;
                        float _3414;
                        vec4 _3429;
                        vec3 _3441;
                        vec4 _3456;
                        vec4 _3471;
                        float _3518;
                        bool _3519;
                        for (;;)
                        {
                            uint _3398 = ((_3123 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3387));
                            _3388 = (_3387 + 4294967295u) & _3387;
                            uint _3400 = _3398 * 40u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            _3414 = _3413.w;
                            uint _3416 = (_3398 * 40u) + 4u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3431 = (_3398 * 40u) + 8u;
                            _3441 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x));
                            uint _3443 = (_3398 * 40u) + 16u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3398 * 40u) + 20u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3474 = (_3398 * 40u) + 24u;
                            vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            uint _3493 = (_3398 * 40u) + 28u;
                            vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            _3518 = fma(_1994, _3506.z, fma(_1993, _3506.y, _3506.x * _1992)) + _3506.w;
                            _3519 = !((fma(_1994, _3487.z, fma(_1993, _3487.y, _3487.x * _1992)) + _3487.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3519)
                            {
                                float _3546 = _3413.x - _1992;
                                float _3547 = _3413.y - _1993;
                                float _3548 = _3413.z - _1994;
                                float _3549 = dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548));
                                float _3552 = inversesqrt(_3549);
                                float _3553 = _3552 * _3546;
                                float _3554 = _3552 * _3547;
                                float _3555 = _3552 * _3548;
                                float _3559 = 1.0 - (_3549 / (_3414 * _3414));
                                float _4752 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3564 = sqrt(_3549) * _3429.w;
                                float _3566 = 1.39999997615814208984375 / (_3564 + 1.39999997615814208984375);
                                float _3567 = _3566 * _3566;
                                float _3570 = ((1.0 - _3567) * dot(vec3(_3553, _3554, _3555), vec3(_837, _840, _843))) + _3567;
                                float _3573 = _3564 * _3564;
                                float _3577 = (fma(_1994, _3456.z, fma(_1993, _3456.y, _3456.x * _1992)) + _3456.w) / _3518;
                                float _3578 = (fma(_1994, _3471.z, fma(_1993, _3471.y, _3471.x * _1992)) + _3471.w) / _3518;
                                float _3582 = 1.0 - dot(vec2(_3577, _3578), vec2(_3577, _3578));
                                float _4768 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3583 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3584 = _3583 * (((isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0))) * _3560) / ((_3573 * 0.699999988079071044921875) + 1.0));
                                float _3596 = exp2(log2(1.0 / ((_3573 * 3.5) + 5.0)) * 0.25);
                                float _3597 = 1.0 - _910;
                                float _3604 = sqrt(1.0 - ((1.0 - (_3597 * _3597)) * (1.0 - (_3596 * _3596))));
                                float _3605 = _3604 * _3604;
                                float _3606 = _3605 * _3605;
                                float _3607 = _3553 - _2876;
                                float _3608 = _3554 - _2877;
                                float _3609 = _3555 - _2878;
                                float _3613 = inversesqrt(dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609)));
                                float _3617 = dot(vec3(_837, _840, _843), vec3((-0.0) - _2876, (-0.0) - _2877, (-0.0) - _2878));
                                float _4779 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3620 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3621 = dot(vec3(_837, _840, _843), vec3(_3613 * _3607, _3613 * _3608, _3613 * _3609));
                                float _4790 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3624 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3628 = ((_3624 * _3624) * (_3606 + (-1.0))) + 1.0;
                                float _3629 = _3566 * _3605;
                                float _3630 = _3629 * _3629;
                                float _3636 = ((1.0 - _3630) * dot(vec3(_837, _840, _843), vec3(_3553, _3554, _3555))) + _3630;
                                float _4801 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3637 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3638 = 1.0 - _3605;
                                float _3648 = (0.5 / (((_3637 * ((_3620 * _3638) + _3605)) + 9.9999999392252902907785028219223e-09) + (((_3637 * _3638) + _3605) * _3620))) * _3637;
                                float _4812 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3658 = (_3583 * _3560) * (((_3606 * 3.1415927410125732421875) * (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) / ((_3628 * _3628) * ((_3573 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3584 * _3429.z;
                                frontier_phi_84_pred_1 = _3584 * _3429.y;
                                frontier_phi_84_pred_2 = _3584 * _3429.x;
                                frontier_phi_84_pred_3 = _3658 * _3441.z;
                                frontier_phi_84_pred_4 = _3658 * _3441.y;
                                frontier_phi_84_pred_5 = _3658 * _3441.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3667 = frontier_phi_84_pred;
                            _3666 = frontier_phi_84_pred_1;
                            _3665 = frontier_phi_84_pred_2;
                            _3664 = frontier_phi_84_pred_3;
                            _3663 = frontier_phi_84_pred_4;
                            _3662 = frontier_phi_84_pred_5;
                            _3362 = _3665 + _3384;
                            _3363 = _3666 + _3385;
                            _3364 = _3667 + _3386;
                            _3359 = _3662 + _3381;
                            _3360 = _3663 + _3382;
                            _3361 = _3664 + _3383;
                            if (_3388 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3381 = _3359;
                                _3382 = _3360;
                                _3383 = _3361;
                                _3384 = _3362;
                                _3385 = _3363;
                                _3386 = _3364;
                                _3387 = _3388;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _3363;
                        frontier_phi_75_pred_1 = _3362;
                        frontier_phi_75_pred_2 = _3361;
                        frontier_phi_75_pred_3 = _3360;
                        frontier_phi_75_pred_4 = _3359;
                        frontier_phi_75_pred_5 = _3364;
                    }
                    _2859 = frontier_phi_75_pred;
                    _2857 = frontier_phi_75_pred_1;
                    _2855 = frontier_phi_75_pred_2;
                    _2853 = frontier_phi_75_pred_3;
                    _2851 = frontier_phi_75_pred_4;
                    _2861 = frontier_phi_75_pred_5;
                    uint _3124 = _3123 + 1u;
                    if (_3124 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3117 = _2851;
                        _3118 = _2853;
                        _3119 = _2855;
                        _3120 = _2857;
                        _3121 = _2859;
                        _3122 = _2861;
                        _3123 = _3124;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2861;
                frontier_phi_56_57_ladder_1 = _2859;
                frontier_phi_56_57_ladder_2 = _2857;
                frontier_phi_56_57_ladder_3 = _2855;
                frontier_phi_56_57_ladder_4 = _2853;
                frontier_phi_56_57_ladder_5 = _2851;
            }
            else
            {
                frontier_phi_56_57_ladder = _2661;
                frontier_phi_56_57_ladder_1 = _2659;
                frontier_phi_56_57_ladder_2 = _2657;
                frontier_phi_56_57_ladder_3 = _2655;
                frontier_phi_56_57_ladder_4 = _2653;
                frontier_phi_56_57_ladder_5 = _2651;
            }
            _2850 = frontier_phi_56_57_ladder_5;
            _2852 = frontier_phi_56_57_ladder_4;
            _2854 = frontier_phi_56_57_ladder_3;
            _2856 = frontier_phi_56_57_ladder_2;
            _2858 = frontier_phi_56_57_ladder_1;
            _2860 = frontier_phi_56_57_ladder;
        }
        float _2865 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
        _2499 = (_2865 * _2856) + _2251;
        _2501 = (_2865 * _2858) + _2252;
        _2503 = (_2865 * _2860) + _2253;
        _2505 = ((_2850 * 0.039999999105930328369140625) * _2865) + _2329;
        _2507 = ((_2852 * 0.039999999105930328369140625) * _2865) + _2333;
        _2509 = ((_2854 * 0.039999999105930328369140625) * _2865) + _2337;
    }
    else
    {
        _2499 = _2251;
        _2501 = _2252;
        _2503 = _2253;
        _2505 = _2329;
        _2507 = _2333;
        _2509 = _2337;
    }
    float _2529 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2530 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2531 = cbSceneParam._m0[86u].x * ((_816 / cbSceneParam._m0[86u].x) + (((10.0 / (_760 + 10.0)) * cbMtdParam._m0[12u].y) * dot(vec3(_732, _733, _734), vec3(_207, _208, _209))));
    float _2532 = isnan(_2529) ? _2531 : (isnan(_2531) ? _2529 : min(_2531, _2529));
    float _2533 = isnan(_2530) ? _817 : (isnan(_817) ? _2530 : min(_817, _2530));
    vec4 _2535 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2532, _2533), 0.0);
    float _2537 = _2535.x;
    bool _2557 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2537)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2537))) > _760;
    float _2558 = _2557 ? _2532 : _816;
    float _2559 = _2557 ? _2533 : _817;
    vec4 _2561 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2558, _2559));
    vec4 _2566 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2558, _2559));
    float _2568 = _2566.x;
    bool _2573 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _2582 = (-0.0) - cbSceneParam._m0[2u].z;
    float _2588 = (_2573 ? (_2582 / (cbSceneParam._m0[2u].x - _2568)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2568))) - _760;
    float _2590 = cbMtdParam._m0[21u].z + 0.008000000379979610443115234375;
    float _2592 = cbMtdParam._m0[21u].w + 0.008000000379979610443115234375;
    float _2593 = cbMtdParam._m0[22u].x + 0.008000000379979610443115234375;
    bool _2599 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2603 = (isnan(_2588) ? 0.0 : (isnan(0.0) ? _2588 : max(0.0, _2588))) * (-1.44269502162933349609375);
    float _4843 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4854 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4865 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2751;
    float _2752;
    float _2753;
    if ((1.0 - _701) > 0.00999999977648258209228515625)
    {
        vec4 _2673 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2558, _2559), 0.0);
        float _2675 = _2673.x;
        float _2681 = (_2573 ? (_2582 / (cbSceneParam._m0[2u].x - _2675)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2675))) - _760;
        uint _2687 = floatBitsToUint(cbInstanceData._m0[_2213]).x * 14u;
        uint _2693 = _2687 + 4u;
        float _2702 = dot(vec3(cbLight._m0[_2687].xyz), vec3(_228, _229, _230));
        float _2710 = dot(vec3((-0.0) - _796, (-0.0) - _797, (-0.0) - _798), vec3((-0.0) - _228, (-0.0) - _229, (-0.0) - _230));
        float _2715 = ((isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _2702 : (isnan(_2702) ? 0.001000000047497451305389404296875 : max(_2702, 0.001000000047497451305389404296875)))) + 1.0;
        float _2717 = (-0.0) - ((isnan(_2681) ? 0.0 : (isnan(0.0) ? _2681 : max(0.0, _2681))) * _2715);
        _2751 = _2599 ? 0.0 : (((cbLight._m0[_2693].x * 0.00063661974854767322540283203125) / ((_2715 * _2590) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2590 * 1.44269502162933349609375) * _2717)));
        _2752 = _2599 ? 0.0 : (((cbLight._m0[_2693].y * 0.00063661974854767322540283203125) / ((_2715 * _2592) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2592 * 1.44269502162933349609375) * _2717)));
        _2753 = _2599 ? 0.0 : (((cbLight._m0[_2693].z * 0.00063661974854767322540283203125) / ((_2715 * _2593) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_2593 * 1.44269502162933349609375) * _2717)));
    }
    else
    {
        _2751 = 0.0;
        _2752 = 0.0;
        _2753 = 0.0;
    }
    float _2770 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _2771 = (_2751 + ((exp2(_2603 * (_2599 ? 0.0 : _2590)) * _2561.x) * cbSceneParam._m0[72u].w)) * _2770;
    float _2772 = (_2752 + ((exp2(_2603 * (_2599 ? 0.0 : _2592)) * _2561.y) * cbSceneParam._m0[72u].w)) * _2770;
    float _2773 = (_2753 + ((exp2(_2603 * (_2599 ? 0.0 : _2593)) * _2561.z) * cbSceneParam._m0[72u].w)) * _2770;
    float _2781 = (_2771 + ((_2505 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1728)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2499 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _881))) - _2771) * _701);
    float _2783 = (_2772 + ((_2507 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1728)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_2501 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _881))) - _2772) * _701);
    float _2785 = (_2773 + ((_2509 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1728)) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2503 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _881))) - _2773) * _701);
    float _2790 = cbInstanceData._m0[_856 + 6u].w * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)));
    float _2795 = _816 / cbSceneParam._m0[86u].x;
    float _2796 = _817 / cbSceneParam._m0[86u].y;
    vec4 _2810 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2795, _2796, (log2((isnan(cbSceneParam._m0[77u].w) ? _760 : (isnan(_760) ? cbSceneParam._m0[77u].w : min(_760, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2812 = _2810.x;
    float _2813 = _2810.y;
    float _2814 = _2810.z;
    float _2815 = _2810.w;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_760 > cbSceneParam._m0[78u].w)
    {
        float _2903 = isnan(_760) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _760 : min(cbSceneParam._m0[80u].w, _760));
        float _2904 = _2903 / _760;
        float _2915 = _2904 * _789;
        float _2916 = _790 * _2904;
        float _2917 = (-0.0) - _2916;
        float _2918 = _2904 * _791;
        float _2920 = (cbSceneParam._m0[77u].w * _2917) / _2903;
        float _2921 = _2920 + cbSceneParam._m0[79u].w;
        float _2922 = cbSceneParam._m0[79u].w - _2916;
        float _2928 = sqrt(((_2915 * _2915) + (_2916 * _2916)) + (_2918 * _2918));
        float _2931 = (1.0 - (cbSceneParam._m0[77u].w / _2903)) * _2928;
        float _2936 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2937 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3316;
        if (abs((_2917 - _2920) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3316 = ((((_2921 > 0.0) ? exp2(_2936 * _2921) : (2.0 - exp2(_2937 * _2921))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2931;
        }
        else
        {
            float _3074 = 1.0 / cbSceneParam._m0[80u].x;
            float _3075 = isnan(_2922) ? _2921 : (isnan(_2921) ? _2922 : max(_2921, _2922));
            float _3076 = isnan(_2922) ? _2921 : (isnan(_2921) ? _2922 : min(_2921, _2922));
            float _3085 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : min(_3075, 0.0));
            float _3086 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : min(_3076, 0.0));
            _3316 = ((abs(_2928 / _2917) * cbSceneParam._m0[80u].y) * ((((_3085 - _3086) * 2.0) - ((exp2(_2936 * (isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0)))) - exp2(_2936 * (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))))) * _3074)) - ((exp2(_2937 * _3085) - exp2(_2937 * _3086)) * _3074))) + (_2931 * cbSceneParam._m0[80u].z);
        }
        vec4 _3318 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2795, _2796, 1.0), 0.0);
        float _3327 = exp2((_3316 * (-1.44269502162933349609375)) * (1.0 - _3318.w));
        float _3328 = log2(_3327);
        float _3344 = log2(_2815);
        _2938 = (exp2(_3344 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].x)) * _3318.x) / cbSceneParam._m0[78u].x)) + _2812;
        _2940 = (exp2(_3344 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].y)) * _3318.y) / cbSceneParam._m0[78u].y)) + _2813;
        _2942 = (exp2(_3344 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].z)) * _3318.z) / cbSceneParam._m0[78u].z)) + _2814;
        _2944 = _3327 * _2815;
    }
    else
    {
        _2938 = _2812;
        _2940 = _2813;
        _2942 = _2814;
        _2944 = _2815;
    }
    bool _3354;
    float _2999;
    vec4 _3002;
    float _3004;
    vec4 _3006;
    float _3014;
    float _3015;
    float _3016;
    float _3017;
    bool _3027;
    for (;;)
    {
        bool _2956 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2957 = log2(_2944);
        float _2964 = exp2(_2957 * cbSceneParam._m0[78u].x) * _2781;
        float _2965 = exp2(_2957 * cbSceneParam._m0[78u].y) * _2783;
        float _2966 = exp2(_2957 * cbSceneParam._m0[78u].z) * _2785;
        vec4 _2974 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_816, _817));
        float _2976 = _2974.x;
        float _2997 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2976)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2976))) - _760) * 3.0;
        float _4931 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        _2999 = _2790 * (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0)));
        float _3000 = _805 + (-0.5);
        _3002 = cbMtdParam._m0[1u];
        _3004 = _3002.y * _3000;
        _3006 = cbMatDynParam._m0[0u];
        float _3013 = (roundEven(_3006.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3014 = _3013 * (_2956 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2938)));
        _3015 = _3013 * (_2956 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2940)));
        _3016 = _3013 * (_2956 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2942)));
        _3017 = _3000 * 0.999000012874603271484375;
        _3027 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3027)
        {
            if ((cbInstanceData._m0[_856 + 7u].x + _3017) < 0.5)
            {
                _3354 = true;
                break;
            }
        }
        uint _3109 = _857 + uint(_3006.w);
        if ((cbInstanceData._m0[_3109].w < 1.0) && ((cbInstanceData._m0[_3109].w + _3017) < 0.5))
        {
            _3354 = true;
            break;
        }
        if ((_3004 + 1.0) < _3002.x)
        {
            _3354 = true;
            break;
        }
        _3354 = false;
        break;
    }
    float _3372;
    if (_3354)
    {
        discard_state = true;
        _3372 = 0.0;
    }
    else
    {
        _3372 = _2999;
    }
    SV_Target.x = _3014;
    SV_Target.y = _3015;
    SV_Target.z = _3016;
    SV_Target.w = _3372;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2999;
    discard_exit();
}


