#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D OverlayBlend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D OverlayBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D OverlayBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D OverlayBlend_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D OverlayBlend_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1050;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _238 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.w;
    vec4 _256 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _270 = ((_238.x * 4.55000019073486328125) * _256.x) * cbMtdParam._m0[9u].x;
    float _273 = ((_238.y * 4.55000019073486328125) * _256.y) * cbMtdParam._m0[9u].y;
    float _276 = ((_238.z * 4.55000019073486328125) * _256.z) * cbMtdParam._m0[9u].z;
    float _295 = cbMtdParam._m0[10u].y + texture(sampler2D(OverlayBlend_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x;
    vec4 _307 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _324 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _333 = (_307.z * 2.0) * (cbMtdParam._m0[10u].x + _324.z);
    float _342 = (_324.x * 2.0) + (-1.0);
    float _343 = (_324.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_342, _343), vec2(_342, _343));
    float _3382 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))));
    float _353 = (cbMtdParam._m0[10u].z * ((_307.x * 2.0) + (-1.0))) + _342;
    float _354 = (cbMtdParam._m0[10u].z * ((_307.y * 2.0) + (-1.0))) + _343;
    float _357 = fma(_350, _222, fma(_354, _214 * TANGENT.x, (_200 * _192) * _353));
    float _360 = fma(_350, _223, fma(_354, _214 * TANGENT.y, (_200 * _193) * _353));
    float _363 = fma(_350, _224, fma(_354, _214 * TANGENT.z, (_200 * _194) * _353));
    float _367 = inversesqrt(dot(vec3(_357, _360, _363), vec3(_357, _360, _363)));
    float _368 = _367 * _357;
    float _369 = _367 * _360;
    float _370 = _367 * _363;
    float _3393 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _371 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _372 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _373 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _374 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _375 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _376 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _392 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _443 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _433);
    float _444 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _433);
    float _445 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _433);
    float _449 = inversesqrt(dot(vec3(_443, _444, _445), vec3(_443, _444, _445)));
    float _450 = _443 * _449;
    float _451 = _444 * _449;
    float _452 = _445 * _449;
    float _458 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _459 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _461 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _463 = _461.w;
    float _484 = fma(_370, cbSceneParam._m0[5u].z, fma(_369, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _368));
    float _487 = fma(_370, cbSceneParam._m0[6u].z, fma(_369, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _368));
    float _490 = fma(_370, cbSceneParam._m0[7u].z, fma(_369, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _368));
    vec4 _492 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _494 = _492.x;
    float _506 = (((_492.y - _372) + (_492.w * _372)) * cbMtdParam._m0[3u].x) + _372;
    float _524 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_494 * _494)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _533 = (((cbMatDynParam._m0[15u].x - _376) * cbMatDynParam._m0[15u].w) * _524) + _376;
    float _542 = ((_524 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _506)) + _506;
    uint _566 = uint(roundEven(NORMAL.w)) * 13u;
    uint _569 = (_566 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _575 = (cbMtdParam._m0[0u].x * _373) * cbInstanceData._m0[_569].x;
    float _576 = (cbMtdParam._m0[0u].y * _374) * cbInstanceData._m0[_569].y;
    float _577 = (cbMtdParam._m0[0u].z * _375) * cbInstanceData._m0[_569].z;
    float _3459 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _579 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    vec4 _581 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _586 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _597 = (((_586.x - _533) + (_586.w * _533)) * cbMtdParam._m0[3u].x) + _533;
    float _610 = (cbMtdParam._m0[3u].x * (((_578 * _463) - _578) + _581.x)) + _578;
    float _611 = (cbMtdParam._m0[3u].x * (((_579 * _463) - _579) + _581.y)) + _579;
    float _612 = (cbMtdParam._m0[3u].x * (((_580 * _463) - _580) + _581.z)) + _580;
    vec4 _613 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _626 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_533 * (_373 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_533 * (_374 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_533 * (_375 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _613.z;
    float _630 = _626 * cbMatDynParam._m0[13u].w;
    float _640 = (_630 * (cbMatDynParam._m0[13u].x - _610)) + _610;
    float _641 = (_630 * (cbMatDynParam._m0[13u].y - _611)) + _611;
    float _642 = (_630 * (cbMatDynParam._m0[13u].z - _612)) + _612;
    float _650 = ((_626 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _597)) + _597;
    float _651 = 1.0 - _650;
    float _652 = _651 * _640;
    float _653 = _651 * _641;
    float _654 = _651 * _642;
    float _658 = (_640 + (-0.039999999105930328369140625)) * _650;
    float _659 = (_641 + (-0.039999999105930328369140625)) * _650;
    float _660 = (_642 + (-0.039999999105930328369140625)) * _650;
    float _661 = _658 + 0.039999999105930328369140625;
    float _662 = _659 + 0.039999999105930328369140625;
    float _663 = _660 + 0.039999999105930328369140625;
    vec4 _672 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _458, cbSceneParam._m0[86u].y * _459));
    float _675 = _672.x * TEXCOORD_4;
    float _676 = dot(vec3(_368, _369, _370), vec3(_450, _451, _452));
    float _679 = _676 * 2.0;
    float _683 = (_679 * _368) - _450;
    float _684 = (_679 * _369) - _451;
    float _685 = (_679 * _370) - _452;
    float _689 = abs(dot(vec3(_450, _451, _452), vec3(_368, _369, _370)));
    float _3492 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _691 = sqrt(_542);
    float _704 = exp2((_691 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_691 * 3.0));
    float _710 = (1.0 - _704) * ((_691 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _711 = _704 * _691;
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1049;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _774 = fma(_747, cbModelParam._m0[26u].z, fma(_743, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739));
        float _778 = fma(_747, cbModelParam._m0[27u].z, fma(_743, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739));
        float _782 = fma(_747, cbModelParam._m0[28u].z, fma(_743, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739));
        float _807 = _739 + _368;
        float _808 = _743 + _369;
        float _809 = _747 + _370;
        float _819 = fma(_809, cbModelParam._m0[26u].z, fma(_808, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807)) - _774;
        float _820 = fma(_809, cbModelParam._m0[27u].z, fma(_808, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807)) - _778;
        float _821 = fma(_809, cbModelParam._m0[28u].z, fma(_808, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807)) - _782;
        float _825 = inversesqrt(dot(vec3(_819, _820, _821), vec3(_819, _820, _821)));
        float _838 = ((_825 * _819) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_774 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_825 * _820) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_778 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_825 * _821) / cbModelParam._m0[34u].z) + ((((((_782 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        float _877 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_843.x + (-0.5));
        float _879 = _877 * (_843.y + (-0.5));
        float _880 = _877 * (_843.z + (-0.5));
        float _887 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_850.x + (-0.5));
        float _889 = _887 * (_850.y + (-0.5));
        float _890 = _887 * (_850.z + (-0.5));
        float _897 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_857.x + (-0.5));
        float _899 = _897 * (_857.y + (-0.5));
        float _900 = _897 * (_857.z + (-0.5));
        float _907 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_864.x + (-0.5));
        float _909 = _907 * (_864.y + (-0.5));
        float _910 = _907 * (_864.z + (-0.5));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = _878 * 0.5;
        float _915 = _888 * 0.5;
        float _916 = _898 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _931 = (dot(vec3(_368, _369, _370), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _941 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3540 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_943 + 1.0))) + _948) * _911;
        float _958 = _879 * 0.5;
        float _959 = _889 * 0.5;
        float _960 = _899 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_368, _369, _370), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3573 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_985 + 1.0))) + _990) * _912;
        float _1000 = _880 * 0.5;
        float _1001 = _890 * 0.5;
        float _1002 = _900 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_368, _369, _370), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3606 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1027 + 1.0))) + _1032) * _913;
        _1049 = _880;
        _1051 = _879;
        _1052 = _878;
        _1053 = _890;
        _1054 = _889;
        _1055 = _888;
        _1056 = _900;
        _1057 = _899;
        _1058 = _898;
        _1059 = _913;
        _1060 = _912;
        _1061 = _911;
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
    }
    else
    {
        _1049 = _1050;
        _1051 = _1050;
        _1052 = _1050;
        _1053 = _1050;
        _1054 = _1050;
        _1055 = _1050;
        _1056 = _1050;
        _1057 = _1050;
        _1058 = _1050;
        _1059 = _1050;
        _1060 = _1050;
        _1061 = _1050;
        _1062 = 0.0;
        _1063 = 0.0;
        _1064 = 0.0;
    }
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1090 = fma(_747, cbModelParam._m0[30u].z, fma(_743, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _739));
        float _1094 = fma(_747, cbModelParam._m0[31u].z, fma(_743, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _739));
        float _1098 = fma(_747, cbModelParam._m0[32u].z, fma(_743, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _739));
        float _1121 = _739 + _368;
        float _1122 = _743 + _369;
        float _1123 = _747 + _370;
        float _1133 = fma(_1123, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121)) - _1090;
        float _1134 = fma(_1123, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121)) - _1094;
        float _1135 = fma(_1123, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121)) - _1098;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1090 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1094 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[35u].z) + ((((((_1098 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1189 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1156.x + (-0.5));
        float _1191 = _1189 * (_1156.y + (-0.5));
        float _1192 = _1189 * (_1156.z + (-0.5));
        float _1199 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1163.x + (-0.5));
        float _1201 = _1199 * (_1163.y + (-0.5));
        float _1202 = _1199 * (_1163.z + (-0.5));
        float _1209 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1170.x + (-0.5));
        float _1211 = _1209 * (_1170.y + (-0.5));
        float _1212 = _1209 * (_1170.z + (-0.5));
        float _1219 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1177.x + (-0.5));
        float _1221 = _1219 * (_1177.y + (-0.5));
        float _1222 = _1219 * (_1177.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_368, _369, _370), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3669 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1253 + 1.0))) + _1258) * _1223;
        float _1268 = _1191 * 0.5;
        float _1269 = _1201 * 0.5;
        float _1270 = _1211 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_368, _369, _370), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3702 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1295 + 1.0))) + _1300) * _1224;
        float _1310 = _1192 * 0.5;
        float _1311 = _1202 * 0.5;
        float _1312 = _1212 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_368, _369, _370), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3735 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1337 + 1.0))) + _1342) * _1225;
        _1359 = _1192;
        _1360 = _1191;
        _1361 = _1190;
        _1362 = _1202;
        _1363 = _1201;
        _1364 = _1200;
        _1365 = _1212;
        _1366 = _1211;
        _1367 = _1210;
        _1368 = _1225;
        _1369 = _1224;
        _1370 = _1223;
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1050;
        _1360 = _1050;
        _1361 = _1050;
        _1362 = _1050;
        _1363 = _1050;
        _1364 = _1050;
        _1365 = _1050;
        _1366 = _1050;
        _1367 = _1050;
        _1368 = _1050;
        _1369 = _1050;
        _1370 = _1050;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1062)) + _1062;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1063)) + _1063;
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1064)) + _1064;
    float _1406 = fma(_1385, cbSceneParam._m0[89u].z, fma(_1384, cbSceneParam._m0[89u].y, _1383 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1385, cbSceneParam._m0[90u].z, fma(_1384, cbSceneParam._m0[90u].y, _1383 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1385, cbSceneParam._m0[91u].z, fma(_1384, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1383));
    float _1427 = _683 * 0.5;
    float _1428 = _684 * 0.5;
    float _1429 = _685 * 0.5;
    float _1430 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1433 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1436 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1467;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1443 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1049, _1053, _1056, _1059));
        float _1447 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1451 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1052, _1055, _1058, _1061));
        float _1458 = dot(vec4(cbModelParam._m0[39u]), vec4(_1427, _1428, _1429, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1478;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1469 = dot(vec4(cbModelParam._m0[40u]), vec4(_1427, _1428, _1429, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1482 = (_1478 * cbModelParam._m0[1u].x) + (_1467 * (1.0 - cbModelParam._m0[1u].x));
    float _1492 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _542);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1492 : min(cbModelParam._m0[25u].z, _1492));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_747, cbModelParam._m0[13u].z, fma(_743, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _739)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_747, cbModelParam._m0[14u].z, fma(_743, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _739)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_747, cbModelParam._m0[15u].z, fma(_743, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _739)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_685, cbModelParam._m0[13u].z, fma(_684, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _683));
        float _1554 = fma(_685, cbModelParam._m0[14u].z, fma(_684, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _683));
        float _1557 = fma(_685, cbModelParam._m0[15u].z, fma(_684, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _683));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1585 = frontier_phi_16_14_ladder;
        }
        float _1792;
        if (_1554 > 0.0)
        {
            _1792 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1792 = frontier_phi_25_21_ladder;
        }
        float _2046;
        if (_1557 > 0.0)
        {
            _2046 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2046 = frontier_phi_37_32_ladder;
        }
        float _2048 = isnan(_1792) ? _1585 : (isnan(_1585) ? _1792 : min(_1585, _1792));
        float _2049 = isnan(_2046) ? _2048 : (isnan(_2048) ? _2046 : min(_2048, _2046));
        float _2053 = (_2049 * _1551) + _1540;
        float _2054 = (_2049 * _1554) + _1544;
        float _2055 = (_2049 * _1557) + _1548;
        float _2056 = _2049 * 9.9999997473787516355514526367188e-05;
        float _2058 = (-1.0) - _2056;
        float _2060 = _2056 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2055 > _2060) || ((_2055 < _2058) || ((_2054 > _2060) || ((_2054 < _2058) || ((_2053 < _2058) || (_2053 > _2060))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2183 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2055, cbModelParam._m0[9u].z, fma(_2054, cbModelParam._m0[9u].y, _2053 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2055, cbModelParam._m0[10u].z, fma(_2054, cbModelParam._m0[10u].y, _2053 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2055, cbModelParam._m0[11u].z, fma(_2054, cbModelParam._m0[11u].y, _2053 * cbModelParam._m0[11u].x))), _1493);
            frontier_phi_15_37_ladder = _2183.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2183.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2183.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_15_37_ladder_2;
        _1575 = frontier_phi_15_37_ladder_1;
        _1577 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_683, _684, _685), _1493);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _542);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1639 = fma(_747, cbModelParam._m0[21u].z, fma(_743, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _739)) + cbModelParam._m0[21u].w;
        float _1643 = fma(_747, cbModelParam._m0[22u].z, fma(_743, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _739)) + cbModelParam._m0[22u].w;
        float _1647 = fma(_747, cbModelParam._m0[23u].z, fma(_743, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _739)) + cbModelParam._m0[23u].w;
        float _1650 = fma(_685, cbModelParam._m0[21u].z, fma(_684, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _683));
        float _1653 = fma(_685, cbModelParam._m0[22u].z, fma(_684, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _683));
        float _1656 = fma(_685, cbModelParam._m0[23u].z, fma(_684, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _683));
        float _1797;
        if (_1650 > 0.0)
        {
            _1797 = abs((1.0 - _1639) / _1650);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1639 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1797 = frontier_phi_27_23_ladder;
        }
        float _2073;
        if (_1653 > 0.0)
        {
            _2073 = abs((1.0 - _1643) / _1653);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1643 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2073 = frontier_phi_39_34_ladder;
        }
        float _2286;
        if (_1656 > 0.0)
        {
            _2286 = abs((1.0 - _1647) / _1656);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1647 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2286 = frontier_phi_48_45_ladder;
        }
        float _2288 = isnan(_2073) ? _1797 : (isnan(_1797) ? _2073 : min(_1797, _2073));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1650) + _1639;
        float _2294 = (_2289 * _1653) + _1643;
        float _2295 = (_2289 * _1656) + _1647;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2296;
        float _2299 = _2296 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2295 > _2299) || ((_2295 < _2297) || ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 < _2297) || (_2293 > _2299))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2495 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2295, cbModelParam._m0[17u].z, fma(_2294, cbModelParam._m0[17u].y, _2293 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2295, cbModelParam._m0[18u].z, fma(_2294, cbModelParam._m0[18u].y, _2293 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2295, cbModelParam._m0[19u].z, fma(_2294, cbModelParam._m0[19u].y, _2293 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_24_48_ladder = _2495.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2495.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2495.x * cbModelParam._m0[1u].z;
        }
        _1675 = frontier_phi_24_48_ladder_2;
        _1677 = frontier_phi_24_48_ladder_1;
        _1679 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_683, _684, _685), _1582);
        _1675 = _1659.x * cbModelParam._m0[1u].z;
        _1677 = _1659.y * cbModelParam._m0[1u].z;
        _1679 = _1659.z * cbModelParam._m0[1u].z;
    }
    float _1692 = (((_710 * _661) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1675 - _1573)) + _1573);
    float _1694 = (((_710 * _662) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1677 - _1575)) + _1575);
    float _1696 = (((_710 * _663) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1679 - _1577)) + _1577);
    float _1699 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, _1692 * cbSceneParam._m0[91u].x));
    uvec4 _1715 = floatBitsToUint(cbInstanceData._m0[_566 + 5u]);
    uint _1717 = _1715.x * 14u;
    uint _1718 = _1717 + 13u;
    float _1725 = _675 + (-1.0);
    float _1730 = (cbLight._m0[_1718].x * _1725) + 1.0;
    float _1731 = (cbLight._m0[_1718].y * _1725) + 1.0;
    float _1732 = (cbLight._m0[_1718].z * _1725) + 1.0;
    float _1733 = (cbLight._m0[_1718].w * _1725) + 1.0;
    uint _1734 = _1717 + 5u;
    float _1740 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1744 = _1717 + 4u;
    float _1750 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
    uint _1754 = _1717 | 1u;
    float _1765 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_368, _369, _370));
    float _1768 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_368, _369, _370));
    float _3871 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _3882 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1773 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.3183098733425140380859375;
    float _1775 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 0.3183098733425140380859375;
    float _1782 = ((cbLight._m0[_1734].x * _1740) * _1775) + ((cbLight._m0[_1744].x * _1750) * _1773);
    float _1783 = ((_1740 * cbLight._m0[_1734].y) * _1775) + ((_1750 * cbLight._m0[_1744].y) * _1773);
    float _1784 = ((_1740 * cbLight._m0[_1734].z) * _1775) + ((_1750 * cbLight._m0[_1744].z) * _1773);
    uvec4 _1789 = floatBitsToUint(cbLight._m0[_1717 + 12u]);
    bool _1791 = _1789.x == 0u;
    float _1802;
    float _1804;
    float _1806;
    if (_1791)
    {
        _1802 = _1782;
        _1804 = _1783;
        _1806 = _1784;
    }
    else
    {
        uint _1810 = _1717 + 6u;
        float _1826 = (dot(vec3(cbLight._m0[_1717 + 2u].xyz), vec3(_368, _369, _370)) * 0.5) + 0.5;
        float _1827 = _1826 * _1826;
        float _3893 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1829 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _1802 = (((cbLight._m0[_1810].x * 0.3183098733425140380859375) * _1828) * _1829) + _1782;
        _1804 = (((cbLight._m0[_1810].y * 0.3183098733425140380859375) * _1828) * _1829) + _1783;
        _1806 = (((cbLight._m0[_1810].z * 0.3183098733425140380859375) * _1828) * _1829) + _1784;
    }
    bool _1809 = _1789.y == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1809)
    {
        _1847 = _1802;
        _1849 = _1804;
        _1851 = _1806;
    }
    else
    {
        uint _2017 = _1717 + 7u;
        float _2033 = (dot(vec3(cbLight._m0[_1717 + 3u].xyz), vec3(_368, _369, _370)) * 0.5) + 0.5;
        float _2034 = _2033 * _2033;
        float _3909 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2035 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _2036 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _1847 = (((cbLight._m0[_2017].x * 0.3183098733425140380859375) * _2035) * _2036) + _1802;
        _1849 = (((cbLight._m0[_2017].y * 0.3183098733425140380859375) * _2035) * _2036) + _1804;
        _1851 = (((cbLight._m0[_2017].z * 0.3183098733425140380859375) * _2035) * _2036) + _1806;
    }
    uint _1854 = _1717 + 8u;
    float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1717].w)) * _542) * 0.949999988079071044921875);
    float _1868 = _1867 * _1867;
    float _1869 = cbLight._m0[_1717].x + _450;
    float _1870 = cbLight._m0[_1717].y + _451;
    float _1871 = cbLight._m0[_1717].z + _452;
    float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
    float _1876 = _1875 * _1869;
    float _1877 = _1875 * _1870;
    float _1878 = _1875 * _1871;
    float _1879 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1717].xyz));
    float _3925 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _1883 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1884 = dot(vec3(_368, _369, _370), vec3(_1876, _1877, _1878));
    float _3947 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1888 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_1876, _1877, _1878));
    float _3958 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1892 = _1868 * _1868;
    float _1896 = ((_1887 * _1887) * (_1892 + (-1.0))) + 1.0;
    float _1904 = exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0);
    float _1905 = 0.959999978542327880859375 - _658;
    float _1907 = 0.959999978542327880859375 - _659;
    float _1908 = 0.959999978542327880859375 - _660;
    float _1915 = 1.0 - _1868;
    float _1926 = (0.5 / (((_1883 * ((_1882 * _1915) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _1915) + _1868) * _1882))) * _1882;
    float _3969 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1928 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1892 / ((_1896 * _1896) * 3.141590118408203125));
    uint _1939 = _1717 + 9u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1754].w)) * _542) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1754].x + _450;
    float _1953 = cbLight._m0[_1754].y + _451;
    float _1954 = cbLight._m0[_1754].z + _452;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1754].xyz));
    float _3980 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1966 = dot(vec3(_368, _369, _370), vec3(_1959, _1960, _1961));
    float _3991 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1970 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_1959, _1960, _1961));
    float _4002 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1974 = _1951 * _1951;
    float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
    float _1985 = exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0);
    float _1992 = 1.0 - _1951;
    float _2002 = (0.5 / (((_1883 * ((_1965 * _1992) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _1992) + _1951) * _1965))) * _1965;
    float _4013 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
    float _2014 = (((((_1985 * _1905) + _661) * cbLight._m0[_1939].x) * _2004) * _1740) + (((((_1904 * _1905) + _661) * cbLight._m0[_1854].x) * _1928) * _1750);
    float _2015 = (((((_1985 * _1907) + _662) * cbLight._m0[_1939].y) * _2004) * _1740) + (((((_1904 * _1907) + _662) * cbLight._m0[_1854].y) * _1928) * _1750);
    float _2016 = (((((_1985 * _1908) + _663) * cbLight._m0[_1939].z) * _2004) * _1740) + (((((_1904 * _1908) + _663) * cbLight._m0[_1854].z) * _1928) * _1750);
    float _2078;
    float _2080;
    float _2082;
    if (_1791)
    {
        _2078 = _2014;
        _2080 = _2015;
        _2082 = _2016;
    }
    else
    {
        uint _2084 = _1717 + 2u;
        uint _2088 = _1717 + 10u;
        float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _542) * 0.949999988079071044921875);
        float _2103 = _2102 * _2102;
        float _2104 = cbLight._m0[_2084].x + _450;
        float _2105 = cbLight._m0[_2084].y + _451;
        float _2106 = cbLight._m0[_2084].z + _452;
        float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
        float _2111 = _2110 * _2104;
        float _2112 = _2110 * _2105;
        float _2113 = _2110 * _2106;
        float _2114 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_2084].xyz));
        float _4024 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2118 = dot(vec3(_368, _369, _370), vec3(_2111, _2112, _2113));
        float _4035 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2122 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2111, _2112, _2113));
        float _4046 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2126 = _2103 * _2103;
        float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
        float _2137 = exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0);
        float _2144 = 1.0 - _2103;
        float _2154 = (0.5 / (((_1883 * ((_2117 * _2144) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _2144) + _2103) * _2117))) * _2117;
        float _4057 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2156 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
        float _2157 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _2078 = (((((_2137 * _1905) + _661) * cbLight._m0[_2088].x) * _2156) * _2157) + _2014;
        _2080 = (((((_2137 * _1907) + _662) * cbLight._m0[_2088].y) * _2156) * _2157) + _2015;
        _2082 = (((((_2137 * _1908) + _663) * cbLight._m0[_2088].z) * _2156) * _2157) + _2016;
    }
    float _2192;
    float _2194;
    float _2196;
    if (_1809)
    {
        _2192 = _2078;
        _2194 = _2080;
        _2196 = _2082;
    }
    else
    {
        uint _2203 = _1717 + 3u;
        uint _2207 = _1717 + 11u;
        float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _542) * 0.949999988079071044921875);
        float _2222 = _2221 * _2221;
        float _2223 = cbLight._m0[_2203].x + _450;
        float _2224 = cbLight._m0[_2203].y + _451;
        float _2225 = cbLight._m0[_2203].z + _452;
        float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
        float _2230 = _2229 * _2223;
        float _2231 = _2229 * _2224;
        float _2232 = _2229 * _2225;
        float _2233 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_2203].xyz));
        float _4073 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2237 = dot(vec3(_368, _369, _370), vec3(_2230, _2231, _2232));
        float _4084 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2241 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2230, _2231, _2232));
        float _4095 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2245 = _2222 * _2222;
        float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
        float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0);
        float _2263 = 1.0 - _2222;
        float _2273 = (0.5 / (((_1883 * ((_2236 * _2263) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _2263) + _2222) * _2236))) * _2236;
        float _4106 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2275 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
        float _2276 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _2192 = (((((_2256 * _1905) + _661) * cbLight._m0[_2207].x) * _2275) * _2276) + _2078;
        _2194 = (((((_2256 * _1907) + _662) * cbLight._m0[_2207].y) * _2275) * _2276) + _2080;
        _2196 = (((((_2256 * _1908) + _663) * cbLight._m0[_2207].z) * _2275) * _2276) + _2082;
    }
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    if (_1715.y == 0u)
    {
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2351;
        float _2353 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2351;
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2351;
        uvec4 _2366 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2367 = _2366.x;
        uint _2378 = uint((float(_2366.y) * floor(float(uint(cbSceneParam._m0[85u].y * _459) / _2367))) + floor(float(uint(cbSceneParam._m0[85u].x * _458) / _2367)));
        float _2388 = (log2(_2354 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2389 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        uint _2392 = uint(isnan(14.0) ? _2389 : (isnan(_2389) ? 14.0 : min(_2389, 14.0)));
        uvec4 _2397 = texelFetch(g_lightClusterGridBuffer, int(((_2392 << 2u) + (_2378 << 6u)) >> 2u));
        uint _2398 = _2397.x;
        uint _2399 = _2366.z;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        if (((((1u << ((_2399 >> 4u) & 15u)) + 4294967295u) & _2398) == 0u) || ((_2399 & 240u) == 0u))
        {
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
            _2508 = 0.0;
            _2510 = 0.0;
        }
        else
        {
            float _2501;
            float _2503;
            float _2505;
            float _2507;
            float _2509;
            float _2511;
            float _2644 = 0.0;
            float _2645 = 0.0;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            uint _2650 = 0u;
            uint _2659;
            bool _2660;
            for (;;)
            {
                _2659 = texelFetch(g_lightClassification, int((((_2392 << 5u) + (_2378 << 9u)) + (_2650 << 2u)) >> 2u)).x;
                _2660 = _2659 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2660)
                {
                    frontier_phi_63_pred = _2649;
                    frontier_phi_63_pred_1 = _2648;
                    frontier_phi_63_pred_2 = _2647;
                    frontier_phi_63_pred_3 = _2646;
                    frontier_phi_63_pred_4 = _2645;
                    frontier_phi_63_pred_5 = _2644;
                }
                else
                {
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    uint _2774;
                    _2768 = _2644;
                    _2769 = _2645;
                    _2770 = _2646;
                    _2771 = _2647;
                    _2772 = _2648;
                    _2773 = _2649;
                    _2774 = _2659;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    for (;;)
                    {
                        uint _2778 = uint(findLSB(_2774)) + (_2650 << 5u);
                        uint _2775 = (_2774 + 4294967295u) & _2774;
                        uint _2780 = _2778 * 48u;
                        vec4 _2794 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2780)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 3u)).x));
                        uint _2800 = (_2778 * 48u) + 4u;
                        vec4 _2813 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2800)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 3u)).x));
                        uint _2819 = (_2778 * 48u) + 8u;
                        vec3 _2830 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2819)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 2u)).x));
                        float _2834 = _2794.x - _2352;
                        float _2835 = _2794.y - _2353;
                        float _2836 = _2794.z - _2354;
                        float _2837 = dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836));
                        float _2840 = inversesqrt(_2837);
                        float _2841 = _2840 * _2834;
                        float _2842 = _2840 * _2835;
                        float _2843 = _2840 * _2836;
                        float _2844 = dot(vec3(_484, _487, _490), vec3(_2841, _2842, _2843));
                        float _2849 = 1.0 - (_2837 * _2794.w);
                        float _4132 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2850 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                        float _2851 = sqrt(_2837) * _2813.w;
                        float _2854 = 1.39999997615814208984375 / (_2851 + 1.39999997615814208984375);
                        float _2855 = _2854 * _2854;
                        float _2858 = ((1.0 - _2855) * _2844) + _2855;
                        float _2861 = _2851 * _2851;
                        float _2865 = ((isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0))) * _2850) / ((_2861 * 0.699999988079071044921875) + 1.0);
                        float _2869 = (-0.0) - _2352;
                        float _2870 = (-0.0) - _2353;
                        float _2871 = (-0.0) - _2354;
                        float _2875 = inversesqrt(dot(vec3(_2869, _2870, _2871), vec3(_2869, _2870, _2871)));
                        float _2876 = _2875 * _2869;
                        float _2877 = _2875 * _2870;
                        float _2878 = _2875 * _2871;
                        float _2886 = exp2(log2(1.0 / ((_2861 * 3.5) + 5.0)) * 0.25);
                        float _2887 = 1.0 - _691;
                        float _2894 = sqrt(1.0 - ((1.0 - (_2887 * _2887)) * (1.0 - (_2886 * _2886))));
                        float _2895 = _2894 * _2894;
                        float _2896 = _2895 * _2895;
                        float _2897 = _2876 + _2841;
                        float _2898 = _2877 + _2842;
                        float _2899 = _2878 + _2843;
                        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
                        float _2907 = dot(vec3(_484, _487, _490), vec3(_2876, _2877, _2878));
                        float _4148 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2910 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2911 = dot(vec3(_484, _487, _490), vec3(_2903 * _2897, _2903 * _2898, _2903 * _2899));
                        float _4159 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2914 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2918 = ((_2914 * _2914) * (_2896 + (-1.0))) + 1.0;
                        float _2919 = _2854 * _2895;
                        float _2920 = _2919 * _2919;
                        float _2923 = ((1.0 - _2920) * _2844) + _2920;
                        float _4170 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2924 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2925 = 1.0 - _2895;
                        float _2935 = (0.5 / (((_2924 * ((_2910 * _2925) + _2895)) + 9.9999999392252902907785028219223e-09) + (((_2924 * _2925) + _2895) * _2910))) * _2924;
                        float _4181 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2946 = (((_2896 * 3.1415927410125732421875) * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) / ((_2918 * _2918) * ((_2861 * 2.1991131305694580078125) + 3.141590118408203125))) * _2850;
                        _2703 = (_2865 * _2813.x) + _2771;
                        _2704 = (_2865 * _2813.y) + _2772;
                        _2705 = (_2865 * _2813.z) + _2773;
                        _2700 = (_2946 * _2830.x) + _2768;
                        _2701 = (_2946 * _2830.y) + _2769;
                        _2702 = (_2946 * _2830.z) + _2770;
                        if (_2775 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2768 = _2700;
                            _2769 = _2701;
                            _2770 = _2702;
                            _2771 = _2703;
                            _2772 = _2704;
                            _2773 = _2705;
                            _2774 = _2775;
                        }
                    }
                    frontier_phi_63_pred = _2705;
                    frontier_phi_63_pred_1 = _2704;
                    frontier_phi_63_pred_2 = _2703;
                    frontier_phi_63_pred_3 = _2702;
                    frontier_phi_63_pred_4 = _2701;
                    frontier_phi_63_pred_5 = _2700;
                }
                _2511 = frontier_phi_63_pred;
                _2509 = frontier_phi_63_pred_1;
                _2507 = frontier_phi_63_pred_2;
                _2505 = frontier_phi_63_pred_3;
                _2503 = frontier_phi_63_pred_4;
                _2501 = frontier_phi_63_pred_5;
                uint _2651 = _2650 + 1u;
                if (_2651 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2644 = _2501;
                    _2645 = _2503;
                    _2646 = _2505;
                    _2647 = _2507;
                    _2648 = _2509;
                    _2649 = _2511;
                    _2650 = _2651;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
            _2508 = _2509;
            _2510 = _2511;
        }
        uvec4 _2514 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2515 = _2514.z;
        uint _2517 = (_2515 >> 8u) & 15u;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        if (((4294967295u << _2517) & _2398) == 0u)
        {
            _2612 = _2500;
            _2614 = _2502;
            _2616 = _2504;
            _2618 = _2506;
            _2620 = _2508;
            _2622 = _2510;
        }
        else
        {
            float _2637 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
            float _2638 = _2637 * _2352;
            float _2639 = _2637 * _2353;
            float _2640 = _2637 * _2354;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2517 < ((_2515 >> 12u) & 15u))
            {
                float _2613;
                float _2615;
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2751 = _2500;
                float _2752 = _2502;
                float _2753 = _2504;
                float _2754 = _2506;
                float _2755 = _2508;
                float _2756 = _2510;
                uint _2757 = _2517;
                uint _2766;
                bool _2767;
                for (;;)
                {
                    _2766 = texelFetch(g_lightClassification, int((((_2392 << 5u) + (_2378 << 9u)) + (_2757 << 2u)) >> 2u)).x;
                    _2767 = _2766 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2767)
                    {
                        frontier_phi_69_pred = _2756;
                        frontier_phi_69_pred_1 = _2755;
                        frontier_phi_69_pred_2 = _2754;
                        frontier_phi_69_pred_3 = _2753;
                        frontier_phi_69_pred_4 = _2752;
                        frontier_phi_69_pred_5 = _2751;
                    }
                    else
                    {
                        float _2951;
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _2964 = _2751;
                        float _2965 = _2752;
                        float _2966 = _2753;
                        float _2967 = _2754;
                        float _2968 = _2755;
                        float _2969 = _2756;
                        uint _2970 = _2766;
                        uint _2971;
                        vec4 _2996;
                        float _2997;
                        vec4 _3012;
                        vec3 _3024;
                        vec4 _3039;
                        vec4 _3055;
                        float _3102;
                        bool _3103;
                        for (;;)
                        {
                            uint _2981 = ((_2757 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2970));
                            _2971 = (_2970 + 4294967295u) & _2970;
                            uint _2983 = _2981 * 40u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            _2997 = _2996.w;
                            uint _2999 = (_2981 * 40u) + 4u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3014 = (_2981 * 40u) + 8u;
                            _3024 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x));
                            uint _3026 = (_2981 * 40u) + 16u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3042 = (_2981 * 40u) + 20u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3058 = (_2981 * 40u) + 24u;
                            vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3077 = (_2981 * 40u) + 28u;
                            vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            _3102 = fma(_2354, _3090.z, fma(_2353, _3090.y, _3090.x * _2352)) + _3090.w;
                            _3103 = !((fma(_2354, _3071.z, fma(_2353, _3071.y, _3071.x * _2352)) + _3071.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3103)
                            {
                                float _3130 = _2996.x - _2352;
                                float _3131 = _2996.y - _2353;
                                float _3132 = _2996.z - _2354;
                                float _3133 = dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132));
                                float _3136 = inversesqrt(_3133);
                                float _3137 = _3136 * _3130;
                                float _3138 = _3136 * _3131;
                                float _3139 = _3136 * _3132;
                                float _3143 = 1.0 - (_3133 / (_2997 * _2997));
                                float _4192 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3148 = sqrt(_3133) * _3012.w;
                                float _3150 = 1.39999997615814208984375 / (_3148 + 1.39999997615814208984375);
                                float _3151 = _3150 * _3150;
                                float _3154 = ((1.0 - _3151) * dot(vec3(_3137, _3138, _3139), vec3(_484, _487, _490))) + _3151;
                                float _3157 = _3148 * _3148;
                                float _3161 = (fma(_2354, _3039.z, fma(_2353, _3039.y, _3039.x * _2352)) + _3039.w) / _3102;
                                float _3162 = (fma(_2354, _3055.z, fma(_2353, _3055.y, _3055.x * _2352)) + _3055.w) / _3102;
                                float _3166 = 1.0 - dot(vec2(_3161, _3162), vec2(_3161, _3162));
                                float _4208 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3167 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3168 = _3167 * (((isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))) * _3144) / ((_3157 * 0.699999988079071044921875) + 1.0));
                                float _3180 = exp2(log2(1.0 / ((_3157 * 3.5) + 5.0)) * 0.25);
                                float _3181 = 1.0 - _691;
                                float _3188 = sqrt(1.0 - ((1.0 - (_3181 * _3181)) * (1.0 - (_3180 * _3180))));
                                float _3189 = _3188 * _3188;
                                float _3190 = _3189 * _3189;
                                float _3191 = _3137 - _2638;
                                float _3192 = _3138 - _2639;
                                float _3193 = _3139 - _2640;
                                float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                                float _3201 = dot(vec3(_484, _487, _490), vec3((-0.0) - _2638, (-0.0) - _2639, (-0.0) - _2640));
                                float _4219 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3204 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3205 = dot(vec3(_484, _487, _490), vec3(_3197 * _3191, _3197 * _3192, _3197 * _3193));
                                float _4230 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3208 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3212 = ((_3208 * _3208) * (_3190 + (-1.0))) + 1.0;
                                float _3213 = _3150 * _3189;
                                float _3214 = _3213 * _3213;
                                float _3220 = ((1.0 - _3214) * dot(vec3(_484, _487, _490), vec3(_3137, _3138, _3139))) + _3214;
                                float _4241 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3221 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3222 = 1.0 - _3189;
                                float _3232 = (0.5 / (((_3221 * ((_3204 * _3222) + _3189)) + 9.9999999392252902907785028219223e-09) + (((_3221 * _3222) + _3189) * _3204))) * _3221;
                                float _4252 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3242 = (_3167 * _3144) * (((_3190 * 3.1415927410125732421875) * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) / ((_3212 * _3212) * ((_3157 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3168 * _3012.z;
                                frontier_phi_75_pred_1 = _3168 * _3012.y;
                                frontier_phi_75_pred_2 = _3168 * _3012.x;
                                frontier_phi_75_pred_3 = _3242 * _3024.z;
                                frontier_phi_75_pred_4 = _3242 * _3024.y;
                                frontier_phi_75_pred_5 = _3242 * _3024.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3251 = frontier_phi_75_pred;
                            _3250 = frontier_phi_75_pred_1;
                            _3249 = frontier_phi_75_pred_2;
                            _3248 = frontier_phi_75_pred_3;
                            _3247 = frontier_phi_75_pred_4;
                            _3246 = frontier_phi_75_pred_5;
                            _2954 = _3249 + _2967;
                            _2955 = _3250 + _2968;
                            _2956 = _3251 + _2969;
                            _2951 = _3246 + _2964;
                            _2952 = _3247 + _2965;
                            _2953 = _3248 + _2966;
                            if (_2971 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2964 = _2951;
                                _2965 = _2952;
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2971;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2956;
                        frontier_phi_69_pred_1 = _2955;
                        frontier_phi_69_pred_2 = _2954;
                        frontier_phi_69_pred_3 = _2953;
                        frontier_phi_69_pred_4 = _2952;
                        frontier_phi_69_pred_5 = _2951;
                    }
                    _2623 = frontier_phi_69_pred;
                    _2621 = frontier_phi_69_pred_1;
                    _2619 = frontier_phi_69_pred_2;
                    _2617 = frontier_phi_69_pred_3;
                    _2615 = frontier_phi_69_pred_4;
                    _2613 = frontier_phi_69_pred_5;
                    uint _2758 = _2757 + 1u;
                    if (_2758 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2751 = _2613;
                        _2752 = _2615;
                        _2753 = _2617;
                        _2754 = _2619;
                        _2755 = _2621;
                        _2756 = _2623;
                        _2757 = _2758;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2623;
                frontier_phi_57_58_ladder_1 = _2621;
                frontier_phi_57_58_ladder_2 = _2619;
                frontier_phi_57_58_ladder_3 = _2617;
                frontier_phi_57_58_ladder_4 = _2615;
                frontier_phi_57_58_ladder_5 = _2613;
            }
            else
            {
                frontier_phi_57_58_ladder = _2510;
                frontier_phi_57_58_ladder_1 = _2508;
                frontier_phi_57_58_ladder_2 = _2506;
                frontier_phi_57_58_ladder_3 = _2504;
                frontier_phi_57_58_ladder_4 = _2502;
                frontier_phi_57_58_ladder_5 = _2500;
            }
            _2612 = frontier_phi_57_58_ladder_5;
            _2614 = frontier_phi_57_58_ladder_4;
            _2616 = frontier_phi_57_58_ladder_3;
            _2618 = frontier_phi_57_58_ladder_2;
            _2620 = frontier_phi_57_58_ladder_1;
            _2622 = frontier_phi_57_58_ladder;
        }
        float _2627 = isnan(1.0) ? _675 : (isnan(_675) ? 1.0 : min(_675, 1.0));
        _2410 = (_2627 * _2618) + _1847;
        _2412 = (_2627 * _2620) + _1849;
        _2414 = (_2627 * _2622) + _1851;
        _2416 = ((_2612 * _661) * _2627) + _2192;
        _2418 = ((_2614 * _662) * _2627) + _2194;
        _2420 = ((_2616 * _663) * _2627) + _2196;
    }
    else
    {
        _2410 = _1847;
        _2412 = _1849;
        _2414 = _1851;
        _2416 = _2192;
        _2418 = _2194;
        _2420 = _2196;
    }
    float _4268 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4279 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4290 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4301 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _2445 = cbInstanceData._m0[_566 + 6u].w * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)));
    float _2450 = _458 / cbSceneParam._m0[86u].x;
    float _2451 = _459 / cbSceneParam._m0[86u].y;
    vec4 _2465 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2450, _2451, (log2((isnan(cbSceneParam._m0[77u].w) ? _392 : (isnan(_392) ? cbSceneParam._m0[77u].w : min(_392, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2467 = _2465.x;
    float _2468 = _2465.y;
    float _2469 = _2465.z;
    float _2470 = _2465.w;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    if (_392 > cbSceneParam._m0[78u].w)
    {
        float _2525 = isnan(_392) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _392 : min(cbSceneParam._m0[80u].w, _392));
        float _2526 = _2525 / _392;
        float _2537 = _2526 * _443;
        float _2538 = _444 * _2526;
        float _2539 = (-0.0) - _2538;
        float _2540 = _2526 * _445;
        float _2542 = (cbSceneParam._m0[77u].w * _2539) / _2525;
        float _2543 = _2542 + cbSceneParam._m0[79u].w;
        float _2544 = cbSceneParam._m0[79u].w - _2538;
        float _2550 = sqrt(((_2537 * _2537) + (_2538 * _2538)) + (_2540 * _2540));
        float _2553 = (1.0 - (cbSceneParam._m0[77u].w / _2525)) * _2550;
        float _2558 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2560 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2713;
        if (abs((_2539 - _2542) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2713 = ((((_2543 > 0.0) ? exp2(_2558 * _2543) : (2.0 - exp2(_2560 * _2543))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2553;
        }
        else
        {
            float _2673 = 1.0 / cbSceneParam._m0[80u].x;
            float _2674 = isnan(_2544) ? _2543 : (isnan(_2543) ? _2544 : max(_2543, _2544));
            float _2675 = isnan(_2544) ? _2543 : (isnan(_2543) ? _2544 : min(_2543, _2544));
            float _2684 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : min(_2674, 0.0));
            float _2685 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : min(_2675, 0.0));
            _2713 = ((abs(_2550 / _2539) * cbSceneParam._m0[80u].y) * ((((_2684 - _2685) * 2.0) - ((exp2(_2558 * (isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0)))) - exp2(_2558 * (isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0))))) * _2673)) - ((exp2(_2560 * _2684) - exp2(_2560 * _2685)) * _2673))) + (_2553 * cbSceneParam._m0[80u].z);
        }
        vec4 _2715 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2450, _2451, 1.0), 0.0);
        float _2724 = exp2((_2713 * (-1.44269502162933349609375)) * (1.0 - _2715.w));
        float _2725 = log2(_2724);
        float _2741 = log2(_2470);
        _2562 = (exp2(_2741 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2725 * cbSceneParam._m0[78u].x)) * _2715.x) / cbSceneParam._m0[78u].x)) + _2467;
        _2564 = (exp2(_2741 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2725 * cbSceneParam._m0[78u].y)) * _2715.y) / cbSceneParam._m0[78u].y)) + _2468;
        _2566 = (exp2(_2741 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2725 * cbSceneParam._m0[78u].z)) * _2715.z) / cbSceneParam._m0[78u].z)) + _2469;
        _2568 = _2724 * _2470;
    }
    else
    {
        _2562 = _2467;
        _2564 = _2468;
        _2566 = _2469;
        _2568 = _2470;
    }
    float _2580 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2581 = _2580 == 3.0;
    float _2582 = log2(_2568);
    float _2589 = exp2(_2582 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2410 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _675))) + ((_2416 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1482)) * cbPerFrame._m0[3u].x));
    float _2590 = exp2(_2582 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2412 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _675))) + ((_2418 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1482)) * cbPerFrame._m0[3u].x));
    float _2591 = exp2(_2582 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2414 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _675))) + ((_2420 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1482)) * cbPerFrame._m0[3u].x));
    float _2600 = (_2580 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2600 * (_2581 ? _2589 : (_2589 + (cbSceneParam._m0[72u].w * _2562)));
    SV_Target.y = _2600 * (_2581 ? _2590 : (_2590 + (cbSceneParam._m0[72u].w * _2564)));
    SV_Target.z = _2600 * (_2581 ? _2591 : (_2591 + (cbSceneParam._m0[72u].w * _2566)));
    SV_Target.w = _2445;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2445;
}


