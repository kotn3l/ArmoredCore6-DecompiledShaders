#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D OverlayBlend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D OverlayBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D OverlayBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D OverlayBlend_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D OverlayBlend_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1054;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _242 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.w;
    vec4 _260 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _274 = ((_242.x * 4.55000019073486328125) * _260.x) * cbMtdParam._m0[9u].x;
    float _277 = ((_242.y * 4.55000019073486328125) * _260.y) * cbMtdParam._m0[9u].y;
    float _280 = ((_242.z * 4.55000019073486328125) * _260.z) * cbMtdParam._m0[9u].z;
    float _299 = cbMtdParam._m0[10u].y + texture(sampler2D(OverlayBlend_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x;
    vec4 _311 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _328 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _337 = (_311.z * 2.0) * (cbMtdParam._m0[10u].x + _328.z);
    float _346 = (_328.x * 2.0) + (-1.0);
    float _347 = (_328.y * 2.0) + (-1.0);
    float _348 = dot(vec2(_346, _347), vec2(_346, _347));
    float _3669 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _354 = sqrt(1.0 - (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))));
    float _357 = (cbMtdParam._m0[10u].z * ((_311.x * 2.0) + (-1.0))) + _346;
    float _358 = (cbMtdParam._m0[10u].z * ((_311.y * 2.0) + (-1.0))) + _347;
    float _361 = fma(_354, _226, fma(_358, _218 * TANGENT.x, (_204 * _196) * _357));
    float _364 = fma(_354, _227, fma(_358, _218 * TANGENT.y, (_204 * _197) * _357));
    float _367 = fma(_354, _228, fma(_358, _218 * TANGENT.z, (_204 * _198) * _357));
    float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    float _372 = _371 * _361;
    float _373 = _371 * _364;
    float _374 = _371 * _367;
    float _3680 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _375 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _376 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _377 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _378 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _379 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _380 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _396 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _447 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _437);
    float _448 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _437);
    float _449 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _437);
    float _453 = inversesqrt(dot(vec3(_447, _448, _449), vec3(_447, _448, _449)));
    float _454 = _447 * _453;
    float _455 = _448 * _453;
    float _456 = _449 * _453;
    float _462 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _463 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _465 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _467 = _465.w;
    float _488 = fma(_374, cbSceneParam._m0[5u].z, fma(_373, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _372));
    float _491 = fma(_374, cbSceneParam._m0[6u].z, fma(_373, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _372));
    float _494 = fma(_374, cbSceneParam._m0[7u].z, fma(_373, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _372));
    vec4 _496 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _498 = _496.x;
    float _510 = (((_496.y - _376) + (_496.w * _376)) * cbMtdParam._m0[3u].x) + _376;
    float _528 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_498 * _498)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _537 = (((cbMatDynParam._m0[15u].x - _380) * cbMatDynParam._m0[15u].w) * _528) + _380;
    float _546 = ((_528 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _510)) + _510;
    uint _570 = uint(roundEven(NORMAL.w)) * 13u;
    uint _573 = (_570 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _579 = (cbMtdParam._m0[0u].x * _377) * cbInstanceData._m0[_573].x;
    float _580 = (cbMtdParam._m0[0u].y * _378) * cbInstanceData._m0[_573].y;
    float _581 = (cbMtdParam._m0[0u].z * _379) * cbInstanceData._m0[_573].z;
    float _3746 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    vec4 _585 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _590 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _601 = (((_590.x - _537) + (_590.w * _537)) * cbMtdParam._m0[3u].x) + _537;
    float _614 = (cbMtdParam._m0[3u].x * (((_582 * _467) - _582) + _585.x)) + _582;
    float _615 = (cbMtdParam._m0[3u].x * (((_583 * _467) - _583) + _585.y)) + _583;
    float _616 = (cbMtdParam._m0[3u].x * (((_584 * _467) - _584) + _585.z)) + _584;
    vec4 _617 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _630 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_537 * (_377 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_537 * (_378 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_537 * (_379 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _617.z;
    float _634 = _630 * cbMatDynParam._m0[13u].w;
    float _644 = (_634 * (cbMatDynParam._m0[13u].x - _614)) + _614;
    float _645 = (_634 * (cbMatDynParam._m0[13u].y - _615)) + _615;
    float _646 = (_634 * (cbMatDynParam._m0[13u].z - _616)) + _616;
    float _654 = ((_630 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _601)) + _601;
    float _655 = 1.0 - _654;
    float _656 = _655 * _644;
    float _657 = _655 * _645;
    float _658 = _655 * _646;
    float _662 = (_644 + (-0.039999999105930328369140625)) * _654;
    float _663 = (_645 + (-0.039999999105930328369140625)) * _654;
    float _664 = (_646 + (-0.039999999105930328369140625)) * _654;
    float _665 = _662 + 0.039999999105930328369140625;
    float _666 = _663 + 0.039999999105930328369140625;
    float _667 = _664 + 0.039999999105930328369140625;
    vec4 _676 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _462, cbSceneParam._m0[86u].y * _463));
    float _679 = _676.x * TEXCOORD_4;
    float _680 = dot(vec3(_372, _373, _374), vec3(_454, _455, _456));
    float _683 = _680 * 2.0;
    float _687 = (_683 * _372) - _454;
    float _688 = (_683 * _373) - _455;
    float _689 = (_683 * _374) - _456;
    float _693 = abs(dot(vec3(_454, _455, _456), vec3(_372, _373, _374)));
    float _3779 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _695 = sqrt(_546);
    float _708 = exp2((_695 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_695 * 3.0));
    float _714 = (1.0 - _708) * ((_695 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _715 = _708 * _695;
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1053;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _778 = fma(_751, cbModelParam._m0[26u].z, fma(_747, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _743));
        float _782 = fma(_751, cbModelParam._m0[27u].z, fma(_747, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _743));
        float _786 = fma(_751, cbModelParam._m0[28u].z, fma(_747, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _743));
        float _811 = _743 + _372;
        float _812 = _747 + _373;
        float _813 = _751 + _374;
        float _823 = fma(_813, cbModelParam._m0[26u].z, fma(_812, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _811)) - _778;
        float _824 = fma(_813, cbModelParam._m0[27u].z, fma(_812, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _811)) - _782;
        float _825 = fma(_813, cbModelParam._m0[28u].z, fma(_812, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _811)) - _786;
        float _829 = inversesqrt(dot(vec3(_823, _824, _825), vec3(_823, _824, _825)));
        float _842 = ((_829 * _823) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_778 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_829 * _824) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_782 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_829 * _825) / cbModelParam._m0[34u].z) + ((((((_786 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        float _881 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_847.x + (-0.5));
        float _883 = _881 * (_847.y + (-0.5));
        float _884 = _881 * (_847.z + (-0.5));
        float _891 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_854.x + (-0.5));
        float _893 = _891 * (_854.y + (-0.5));
        float _894 = _891 * (_854.z + (-0.5));
        float _901 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_861.x + (-0.5));
        float _903 = _901 * (_861.y + (-0.5));
        float _904 = _901 * (_861.z + (-0.5));
        float _911 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_868.x + (-0.5));
        float _913 = _911 * (_868.y + (-0.5));
        float _914 = _911 * (_868.z + (-0.5));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = _882 * 0.5;
        float _919 = _892 * 0.5;
        float _920 = _902 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _935 = (dot(vec3(_372, _373, _374), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _945 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3827 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_947 + 1.0))) + _952) * _915;
        float _962 = _883 * 0.5;
        float _963 = _893 * 0.5;
        float _964 = _903 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_372, _373, _374), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3860 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_989 + 1.0))) + _994) * _916;
        float _1004 = _884 * 0.5;
        float _1005 = _894 * 0.5;
        float _1006 = _904 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_372, _373, _374), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3893 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1031 + 1.0))) + _1036) * _917;
        _1053 = _884;
        _1055 = _883;
        _1056 = _882;
        _1057 = _894;
        _1058 = _893;
        _1059 = _892;
        _1060 = _904;
        _1061 = _903;
        _1062 = _902;
        _1063 = _917;
        _1064 = _916;
        _1065 = _915;
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
    }
    else
    {
        _1053 = _1054;
        _1055 = _1054;
        _1056 = _1054;
        _1057 = _1054;
        _1058 = _1054;
        _1059 = _1054;
        _1060 = _1054;
        _1061 = _1054;
        _1062 = _1054;
        _1063 = _1054;
        _1064 = _1054;
        _1065 = _1054;
        _1066 = 0.0;
        _1067 = 0.0;
        _1068 = 0.0;
    }
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1094 = fma(_751, cbModelParam._m0[30u].z, fma(_747, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _743));
        float _1098 = fma(_751, cbModelParam._m0[31u].z, fma(_747, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _743));
        float _1102 = fma(_751, cbModelParam._m0[32u].z, fma(_747, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _743));
        float _1125 = _743 + _372;
        float _1126 = _747 + _373;
        float _1127 = _751 + _374;
        float _1137 = fma(_1127, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125)) - _1094;
        float _1138 = fma(_1127, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125)) - _1098;
        float _1139 = fma(_1127, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125)) - _1102;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1094 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1098 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[35u].z) + ((((((_1102 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1193 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1160.x + (-0.5));
        float _1195 = _1193 * (_1160.y + (-0.5));
        float _1196 = _1193 * (_1160.z + (-0.5));
        float _1203 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1167.x + (-0.5));
        float _1205 = _1203 * (_1167.y + (-0.5));
        float _1206 = _1203 * (_1167.z + (-0.5));
        float _1213 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1174.x + (-0.5));
        float _1215 = _1213 * (_1174.y + (-0.5));
        float _1216 = _1213 * (_1174.z + (-0.5));
        float _1223 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1181.x + (-0.5));
        float _1225 = _1223 * (_1181.y + (-0.5));
        float _1226 = _1223 * (_1181.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_372, _373, _374), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3956 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1257 + 1.0))) + _1262) * _1227;
        float _1272 = _1195 * 0.5;
        float _1273 = _1205 * 0.5;
        float _1274 = _1215 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_372, _373, _374), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3989 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1299 + 1.0))) + _1304) * _1228;
        float _1314 = _1196 * 0.5;
        float _1315 = _1206 * 0.5;
        float _1316 = _1216 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_372, _373, _374), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4022 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1341 + 1.0))) + _1346) * _1229;
        _1363 = _1196;
        _1364 = _1195;
        _1365 = _1194;
        _1366 = _1206;
        _1367 = _1205;
        _1368 = _1204;
        _1369 = _1216;
        _1370 = _1215;
        _1371 = _1214;
        _1372 = _1229;
        _1373 = _1228;
        _1374 = _1227;
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1054;
        _1364 = _1054;
        _1365 = _1054;
        _1366 = _1054;
        _1367 = _1054;
        _1368 = _1054;
        _1369 = _1054;
        _1370 = _1054;
        _1371 = _1054;
        _1372 = _1054;
        _1373 = _1054;
        _1374 = _1054;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1066)) + _1066;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1067)) + _1067;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1068)) + _1068;
    float _1410 = fma(_1389, cbSceneParam._m0[89u].z, fma(_1388, cbSceneParam._m0[89u].y, _1387 * cbSceneParam._m0[89u].x));
    float _1413 = fma(_1389, cbSceneParam._m0[90u].z, fma(_1388, cbSceneParam._m0[90u].y, _1387 * cbSceneParam._m0[90u].x));
    float _1416 = fma(_1389, cbSceneParam._m0[91u].z, fma(_1388, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1387));
    float _1431 = _687 * 0.5;
    float _1432 = _688 * 0.5;
    float _1433 = _689 * 0.5;
    float _1434 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1437 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1440 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1471;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1447 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1053, _1057, _1060, _1063));
        float _1451 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1055, _1058, _1061, _1064));
        float _1455 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1462 = dot(vec4(cbModelParam._m0[39u]), vec4(_1431, _1432, _1433, 1.0));
        _1471 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1471 = 1.0;
    }
    float _1482;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1473 = dot(vec4(cbModelParam._m0[40u]), vec4(_1431, _1432, _1433, 1.0));
        _1482 = dot(vec3(isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1473) ? 0.0 : (isnan(0.0) ? _1473 : max(0.0, _1473))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1482 = 1.0;
    }
    float _1486 = (_1482 * cbModelParam._m0[1u].x) + (_1471 * (1.0 - cbModelParam._m0[1u].x));
    float _1496 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _546);
    float _1497 = isnan(_1496) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1496 : min(cbModelParam._m0[25u].z, _1496));
    float _1577;
    float _1579;
    float _1581;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1544 = fma(_751, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _743)) + cbModelParam._m0[13u].w;
        float _1548 = fma(_751, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _743)) + cbModelParam._m0[14u].w;
        float _1552 = fma(_751, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _743)) + cbModelParam._m0[15u].w;
        float _1555 = fma(_689, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687));
        float _1558 = fma(_689, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687));
        float _1561 = fma(_689, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687));
        float _1589;
        if (_1555 > 0.0)
        {
            _1589 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1589 = frontier_phi_16_14_ladder;
        }
        float _1765;
        if (_1558 > 0.0)
        {
            _1765 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1765 = frontier_phi_25_21_ladder;
        }
        float _2060;
        if (_1561 > 0.0)
        {
            _2060 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2060 = frontier_phi_37_32_ladder;
        }
        float _2062 = isnan(_1765) ? _1589 : (isnan(_1589) ? _1765 : min(_1589, _1765));
        float _2063 = isnan(_2060) ? _2062 : (isnan(_2062) ? _2060 : min(_2062, _2060));
        float _2067 = (_2063 * _1555) + _1544;
        float _2068 = (_2063 * _1558) + _1548;
        float _2069 = (_2063 * _1561) + _1552;
        float _2070 = _2063 * 9.9999997473787516355514526367188e-05;
        float _2072 = (-1.0) - _2070;
        float _2074 = _2070 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2069 > _2074) || ((_2069 < _2072) || ((_2068 > _2074) || ((_2068 < _2072) || ((_2067 < _2072) || (_2067 > _2074))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2214 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2069, cbModelParam._m0[9u].z, fma(_2068, cbModelParam._m0[9u].y, _2067 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2069, cbModelParam._m0[10u].z, fma(_2068, cbModelParam._m0[10u].y, _2067 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2069, cbModelParam._m0[11u].z, fma(_2068, cbModelParam._m0[11u].y, _2067 * cbModelParam._m0[11u].x))), _1497);
            frontier_phi_15_37_ladder = _2214.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2214.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2214.z * cbModelParam._m0[1u].y;
        }
        _1577 = frontier_phi_15_37_ladder_1;
        _1579 = frontier_phi_15_37_ladder;
        _1581 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_687, _688, _689), _1497);
        _1577 = _1565.x * cbModelParam._m0[1u].y;
        _1579 = _1565.y * cbModelParam._m0[1u].y;
        _1581 = _1565.z * cbModelParam._m0[1u].y;
    }
    float _1585 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _546);
    float _1586 = isnan(_1585) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1585 : min(cbModelParam._m0[25u].w, _1585));
    float _1679;
    float _1681;
    float _1683;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1643 = fma(_751, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _743)) + cbModelParam._m0[21u].w;
        float _1647 = fma(_751, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _743)) + cbModelParam._m0[22u].w;
        float _1651 = fma(_751, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _743)) + cbModelParam._m0[23u].w;
        float _1654 = fma(_689, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687));
        float _1657 = fma(_689, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687));
        float _1660 = fma(_689, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687));
        float _1770;
        if (_1654 > 0.0)
        {
            _1770 = abs((1.0 - _1643) / _1654);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1643 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1770 = frontier_phi_27_23_ladder;
        }
        float _2087;
        if (_1657 > 0.0)
        {
            _2087 = abs((1.0 - _1647) / _1657);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1647 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2087 = frontier_phi_39_34_ladder;
        }
        float _2425;
        if (_1660 > 0.0)
        {
            _2425 = abs((1.0 - _1651) / _1660);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1651 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2425 = frontier_phi_49_46_ladder;
        }
        float _2427 = isnan(_2087) ? _1770 : (isnan(_1770) ? _2087 : min(_1770, _2087));
        float _2428 = isnan(_2425) ? _2427 : (isnan(_2427) ? _2425 : min(_2427, _2425));
        float _2432 = (_2428 * _1654) + _1643;
        float _2433 = (_2428 * _1657) + _1647;
        float _2434 = (_2428 * _1660) + _1651;
        float _2435 = _2428 * 9.9999997473787516355514526367188e-05;
        float _2436 = (-1.0) - _2435;
        float _2438 = _2435 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2434 > _2438) || ((_2434 < _2436) || ((_2433 > _2438) || ((_2433 < _2436) || ((_2432 < _2436) || (_2432 > _2438))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2556 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2434, cbModelParam._m0[17u].z, fma(_2433, cbModelParam._m0[17u].y, _2432 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2434, cbModelParam._m0[18u].z, fma(_2433, cbModelParam._m0[18u].y, _2432 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2434, cbModelParam._m0[19u].z, fma(_2433, cbModelParam._m0[19u].y, _2432 * cbModelParam._m0[19u].x))), _1586);
            frontier_phi_24_49_ladder = _2556.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2556.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2556.x * cbModelParam._m0[1u].z;
        }
        _1679 = frontier_phi_24_49_ladder_2;
        _1681 = frontier_phi_24_49_ladder_1;
        _1683 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1663 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_687, _688, _689), _1586);
        _1679 = _1663.x * cbModelParam._m0[1u].z;
        _1681 = _1663.y * cbModelParam._m0[1u].z;
        _1683 = _1663.z * cbModelParam._m0[1u].z;
    }
    float _1696 = (((_714 * _665) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1679 - _1577)) + _1577);
    float _1698 = (((_714 * _666) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1681 - _1579)) + _1579);
    float _1700 = (((_714 * _667) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1683 - _1581)) + _1581);
    float _1703 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1696 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1696 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, _1696 * cbSceneParam._m0[91u].x));
    float _1744 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1748 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1752 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1756 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1757 = _1744 / _1756;
    float _1758 = _1748 / _1756;
    float _1759 = _1752 / _1756;
    float _1906;
    float _1907;
    float _1908;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1786 = ((uint(_1759 > cbSceneParam._m0[59u].y) + uint(_1759 > cbSceneParam._m0[59u].x)) + uint(_1759 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1787 = _1786 + 43u;
        uint _1795 = _1786 + 44u;
        uint _1803 = _1786 + 45u;
        uint _1811 = _1786 + 46u;
        float _1822 = fma(_1756, cbSceneParam._m0[_1787].w, fma(_1752, cbSceneParam._m0[_1787].z, fma(_1748, cbSceneParam._m0[_1787].y, _1744 * cbSceneParam._m0[_1787].x)));
        float _1826 = fma(_1756, cbSceneParam._m0[_1795].w, fma(_1752, cbSceneParam._m0[_1795].z, fma(_1748, cbSceneParam._m0[_1795].y, _1744 * cbSceneParam._m0[_1795].x)));
        float _1834 = fma(_1756, cbSceneParam._m0[_1811].w, fma(_1752, cbSceneParam._m0[_1811].z, fma(_1748, cbSceneParam._m0[_1811].y, _1744 * cbSceneParam._m0[_1811].x)));
        float _1839 = cbSceneParam._m0[33u].z * _1834;
        float _1841 = cbSceneParam._m0[33u].w * _1834;
        float _1844 = fma(_1756, cbSceneParam._m0[_1803].w, fma(_1752, cbSceneParam._m0[_1803].z, fma(_1748, cbSceneParam._m0[_1803].y, _1744 * cbSceneParam._m0[_1803].x))) / _1834;
        float _1892 = (cbSceneParam._m0[33u].x - sqrt(((_1758 * _1758) + (_1757 * _1757)) + (_1759 * _1759))) * cbSceneParam._m0[33u].y;
        float _4148 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1899 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1839 + _1822) / _1834, (_1841 + _1826) / _1834), _1844), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1841 + _1822) / _1834, (_1826 - _1839) / _1834), _1844), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1822 - _1839) / _1834, (_1826 - _1841) / _1834), _1844), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1822 - _1841) / _1834, (_1839 + _1826) / _1834), _1844), 0.0)).x), vec4(0.25)));
        _1906 = 1.0 - (_1899 * cbSceneParam._m0[34u].x);
        _1907 = 1.0 - (_1899 * cbSceneParam._m0[34u].y);
        _1908 = 1.0 - (_1899 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1906 = 1.0;
        _1907 = 1.0;
        _1908 = 1.0;
    }
    float _1972;
    float _1974;
    float _1976;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1960 = fma(_1756, cbSceneParam._m0[63u].w, fma(_1752, cbSceneParam._m0[63u].z, fma(_1748, cbSceneParam._m0[63u].y, _1744 * cbSceneParam._m0[63u].x)));
        float _1961 = fma(_1756, cbSceneParam._m0[60u].w, fma(_1752, cbSceneParam._m0[60u].z, fma(_1748, cbSceneParam._m0[60u].y, _1744 * cbSceneParam._m0[60u].x))) / _1960;
        float _1962 = fma(_1756, cbSceneParam._m0[61u].w, fma(_1752, cbSceneParam._m0[61u].z, fma(_1748, cbSceneParam._m0[61u].y, _1744 * cbSceneParam._m0[61u].x))) / _1960;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1961 >= cbSceneParam._m0[64u].x) && (_1962 >= cbSceneParam._m0[64u].y)) && (_1961 <= cbSceneParam._m0[64u].z)) && (_1962 <= cbSceneParam._m0[64u].w))
        {
            float _2100 = fma(_1756, cbSceneParam._m0[62u].w, fma(_1752, cbSceneParam._m0[62u].z, fma(_1748, cbSceneParam._m0[62u].y, _1744 * cbSceneParam._m0[62u].x))) / _1960;
            float _2104 = isnan(cbSceneParam._m0[41u].w) ? _2100 : (isnan(_2100) ? cbSceneParam._m0[41u].w : max(_2100, cbSceneParam._m0[41u].w));
            float _2147 = (cbSceneParam._m0[33u].x - sqrt(((_1758 * _1758) + (_1757 * _1757)) + (_1759 * _1759))) * cbSceneParam._m0[33u].y;
            float _4164 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
            float _2154 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1961, cbSceneParam._m0[33u].w + _1962), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1961, _1962 - cbSceneParam._m0[33u].z), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1961 - cbSceneParam._m0[33u].z, _1962 - cbSceneParam._m0[33u].w), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1961 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1962), _2104), 0.0)).x), vec4(0.25)));
            float _2158 = 1.0 - (_2154 * cbSceneParam._m0[34u].x);
            float _2159 = 1.0 - (_2154 * cbSceneParam._m0[34u].y);
            float _2160 = 1.0 - (_2154 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2159) ? _1907 : (isnan(_1907) ? _2159 : min(_1907, _2159));
            frontier_phi_36_35_ladder_1 = isnan(_2160) ? _1908 : (isnan(_1908) ? _2160 : min(_1908, _2160));
            frontier_phi_36_35_ladder_2 = isnan(_2158) ? _1906 : (isnan(_1906) ? _2158 : min(_1906, _2158));
        }
        else
        {
            frontier_phi_36_35_ladder = _1907;
            frontier_phi_36_35_ladder_1 = _1908;
            frontier_phi_36_35_ladder_2 = _1906;
        }
        _1972 = frontier_phi_36_35_ladder_2;
        _1974 = frontier_phi_36_35_ladder;
        _1976 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1972 = _1906;
        _1974 = _1907;
        _1976 = _1908;
    }
    uvec4 _1981 = floatBitsToUint(cbInstanceData._m0[_570 + 5u]);
    uint _1983 = _1981.x * 14u;
    uint _1984 = _1983 + 13u;
    float _1991 = _679 + (-1.0);
    float _1996 = (cbLight._m0[_1984].x * _1991) + 1.0;
    float _1997 = (cbLight._m0[_1984].y * _1991) + 1.0;
    float _1998 = (cbLight._m0[_1984].z * _1991) + 1.0;
    float _1999 = (cbLight._m0[_1984].w * _1991) + 1.0;
    uint _2000 = _1983 + 5u;
    float _2006 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2010 = _1983 + 4u;
    float _2019 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2023 = _1983 | 1u;
    float _2034 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_372, _373, _374));
    float _2037 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_372, _373, _374));
    float _4200 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _4211 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2042 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * 0.3183098733425140380859375;
    float _2044 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.3183098733425140380859375;
    float _2051 = ((cbLight._m0[_2000].x * _2006) * _2044) + (((cbLight._m0[_2010].x * _1972) * _2019) * _2042);
    float _2052 = ((_2006 * cbLight._m0[_2000].y) * _2044) + (((cbLight._m0[_2010].y * _1974) * _2019) * _2042);
    float _2053 = ((_2006 * cbLight._m0[_2000].z) * _2044) + (((cbLight._m0[_2010].z * _1976) * _2019) * _2042);
    uvec4 _2057 = floatBitsToUint(cbLight._m0[_1983 + 12u]);
    bool _2059 = _2057.x == 0u;
    float _2161;
    float _2163;
    float _2165;
    if (_2059)
    {
        _2161 = _2051;
        _2163 = _2052;
        _2165 = _2053;
    }
    else
    {
        uint _2169 = _1983 + 6u;
        float _2185 = (dot(vec3(cbLight._m0[_1983 + 2u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _2186 = _2185 * _2185;
        float _4222 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2187 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2188 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2161 = (((cbLight._m0[_2169].x * 0.3183098733425140380859375) * _2187) * _2188) + _2051;
        _2163 = (((cbLight._m0[_2169].y * 0.3183098733425140380859375) * _2187) * _2188) + _2052;
        _2165 = (((cbLight._m0[_2169].z * 0.3183098733425140380859375) * _2187) * _2188) + _2053;
    }
    bool _2168 = _2057.y == 0u;
    float _2223;
    float _2225;
    float _2227;
    if (_2168)
    {
        _2223 = _2161;
        _2225 = _2163;
        _2227 = _2165;
    }
    else
    {
        uint _2396 = _1983 + 7u;
        float _2412 = (dot(vec3(cbLight._m0[_1983 + 3u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _2413 = _2412 * _2412;
        float _4238 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2414 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2415 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2223 = (((cbLight._m0[_2396].x * 0.3183098733425140380859375) * _2414) * _2415) + _2161;
        _2225 = (((cbLight._m0[_2396].y * 0.3183098733425140380859375) * _2414) * _2415) + _2163;
        _2227 = (((cbLight._m0[_2396].z * 0.3183098733425140380859375) * _2414) * _2415) + _2165;
    }
    uint _2230 = _1983 + 8u;
    float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _546) * 0.949999988079071044921875);
    float _2244 = _2243 * _2243;
    float _2245 = cbLight._m0[_1983].x + _454;
    float _2246 = cbLight._m0[_1983].y + _455;
    float _2247 = cbLight._m0[_1983].z + _456;
    float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
    float _2252 = _2251 * _2245;
    float _2253 = _2251 * _2246;
    float _2254 = _2251 * _2247;
    float _2255 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1983].xyz));
    float _4254 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _4265 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _2259 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2260 = dot(vec3(_372, _373, _374), vec3(_2252, _2253, _2254));
    float _4276 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2264 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2252, _2253, _2254));
    float _4287 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2268 = _2244 * _2244;
    float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
    float _2280 = exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0);
    float _2281 = 0.959999978542327880859375 - _662;
    float _2283 = 0.959999978542327880859375 - _663;
    float _2284 = 0.959999978542327880859375 - _664;
    float _2291 = 1.0 - _2244;
    float _2302 = (0.5 / (((_2259 * ((_2258 * _2291) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2291) + _2244) * _2258))) * _2258;
    float _4298 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2304 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
    uint _2318 = _1983 + 9u;
    float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _546) * 0.949999988079071044921875);
    float _2330 = _2329 * _2329;
    float _2331 = cbLight._m0[_2023].x + _454;
    float _2332 = cbLight._m0[_2023].y + _455;
    float _2333 = cbLight._m0[_2023].z + _456;
    float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
    float _2338 = _2337 * _2331;
    float _2339 = _2337 * _2332;
    float _2340 = _2337 * _2333;
    float _2341 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_2023].xyz));
    float _4309 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2345 = dot(vec3(_372, _373, _374), vec3(_2338, _2339, _2340));
    float _4320 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2349 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2338, _2339, _2340));
    float _4331 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2353 = _2330 * _2330;
    float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
    float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
    float _2371 = 1.0 - _2330;
    float _2381 = (0.5 / (((_2259 * ((_2344 * _2371) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2371) + _2330) * _2344))) * _2344;
    float _4342 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2383 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
    float _2393 = (((((_2364 * _2281) + _665) * cbLight._m0[_2318].x) * _2383) * _2006) + ((((cbLight._m0[_2230].x * _1972) * ((_2280 * _2281) + _665)) * _2304) * _2019);
    float _2394 = (((((_2364 * _2283) + _666) * cbLight._m0[_2318].y) * _2383) * _2006) + ((((cbLight._m0[_2230].y * _1974) * ((_2280 * _2283) + _666)) * _2304) * _2019);
    float _2395 = (((((_2364 * _2284) + _667) * cbLight._m0[_2318].z) * _2383) * _2006) + ((((cbLight._m0[_2230].z * _1976) * ((_2280 * _2284) + _667)) * _2304) * _2019);
    float _2451;
    float _2453;
    float _2455;
    if (_2059)
    {
        _2451 = _2393;
        _2453 = _2394;
        _2455 = _2395;
    }
    else
    {
        uint _2457 = _1983 + 2u;
        uint _2461 = _1983 + 10u;
        float _2475 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _546) * 0.949999988079071044921875);
        float _2476 = _2475 * _2475;
        float _2477 = cbLight._m0[_2457].x + _454;
        float _2478 = cbLight._m0[_2457].y + _455;
        float _2479 = cbLight._m0[_2457].z + _456;
        float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
        float _2484 = _2483 * _2477;
        float _2485 = _2483 * _2478;
        float _2486 = _2483 * _2479;
        float _2487 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_2457].xyz));
        float _4353 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2491 = dot(vec3(_372, _373, _374), vec3(_2484, _2485, _2486));
        float _4364 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2495 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2484, _2485, _2486));
        float _4375 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2499 = _2476 * _2476;
        float _2503 = ((_2494 * _2494) * (_2499 + (-1.0))) + 1.0;
        float _2510 = exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0);
        float _2517 = 1.0 - _2476;
        float _2527 = (0.5 / (((_2259 * ((_2490 * _2517) + _2476)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2517) + _2476) * _2490))) * _2490;
        float _4386 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2529 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2499 / ((_2503 * _2503) * 3.141590118408203125));
        float _2530 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2451 = (((((_2510 * _2281) + _665) * cbLight._m0[_2461].x) * _2529) * _2530) + _2393;
        _2453 = (((((_2510 * _2283) + _666) * cbLight._m0[_2461].y) * _2529) * _2530) + _2394;
        _2455 = (((((_2510 * _2284) + _667) * cbLight._m0[_2461].z) * _2529) * _2530) + _2395;
    }
    float _2561;
    float _2563;
    float _2565;
    if (_2168)
    {
        _2561 = _2451;
        _2563 = _2453;
        _2565 = _2455;
    }
    else
    {
        uint _2572 = _1983 + 3u;
        uint _2576 = _1983 + 11u;
        float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _546) * 0.949999988079071044921875);
        float _2591 = _2590 * _2590;
        float _2592 = cbLight._m0[_2572].x + _454;
        float _2593 = cbLight._m0[_2572].y + _455;
        float _2594 = cbLight._m0[_2572].z + _456;
        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
        float _2599 = _2598 * _2592;
        float _2600 = _2598 * _2593;
        float _2601 = _2598 * _2594;
        float _2602 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_2572].xyz));
        float _4402 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2606 = dot(vec3(_372, _373, _374), vec3(_2599, _2600, _2601));
        float _4413 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2610 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2599, _2600, _2601));
        float _4424 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2614 = _2591 * _2591;
        float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
        float _2625 = exp2(log2(1.0 - (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) * 5.0);
        float _2632 = 1.0 - _2591;
        float _2642 = (0.5 / (((_2259 * ((_2605 * _2632) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2632) + _2591) * _2605))) * _2605;
        float _4435 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2644 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
        float _2645 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2561 = (((((_2625 * _2281) + _665) * cbLight._m0[_2576].x) * _2644) * _2645) + _2451;
        _2563 = (((((_2625 * _2283) + _666) * cbLight._m0[_2576].y) * _2644) * _2645) + _2453;
        _2565 = (((((_2625 * _2284) + _667) * cbLight._m0[_2576].z) * _2644) * _2645) + _2455;
    }
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    if (_1981.y == 0u)
    {
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.x;
        uint _2678 = uint((float(_2666.y) * floor(float(uint(cbSceneParam._m0[85u].y * _463) / _2667))) + floor(float(uint(cbSceneParam._m0[85u].x * _462) / _2667)));
        float _2688 = (log2(_1759 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2689 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        uint _2692 = uint(isnan(14.0) ? _2689 : (isnan(_2689) ? 14.0 : min(_2689, 14.0)));
        uvec4 _2697 = texelFetch(g_lightClusterGridBuffer, int(((_2692 << 2u) + (_2678 << 6u)) >> 2u));
        uint _2698 = _2697.x;
        uint _2699 = _2666.z;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        if (((((1u << ((_2699 >> 4u) & 15u)) + 4294967295u) & _2698) == 0u) || ((_2699 & 240u) == 0u))
        {
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
        }
        else
        {
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            uint _2929 = 0u;
            uint _2938;
            bool _2939;
            for (;;)
            {
                _2938 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_2929 << 2u)) >> 2u)).x;
                _2939 = _2938 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2939)
                {
                    frontier_phi_68_pred = _2928;
                    frontier_phi_68_pred_1 = _2927;
                    frontier_phi_68_pred_2 = _2926;
                    frontier_phi_68_pred_3 = _2924;
                    frontier_phi_68_pred_4 = _2923;
                    frontier_phi_68_pred_5 = _2925;
                }
                else
                {
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    uint _3053;
                    _3047 = _2923;
                    _3048 = _2924;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2938;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    for (;;)
                    {
                        uint _3057 = uint(findLSB(_3053)) + (_2929 << 5u);
                        uint _3054 = (_3053 + 4294967295u) & _3053;
                        uint _3059 = _3057 * 48u;
                        vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 3u)).x));
                        uint _3079 = (_3057 * 48u) + 4u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 3u)).x));
                        uint _3098 = (_3057 * 48u) + 8u;
                        vec3 _3109 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x));
                        float _3113 = _3073.x - _1757;
                        float _3114 = _3073.y - _1758;
                        float _3115 = _3073.z - _1759;
                        float _3116 = dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115));
                        float _3119 = inversesqrt(_3116);
                        float _3120 = _3119 * _3113;
                        float _3121 = _3119 * _3114;
                        float _3122 = _3119 * _3115;
                        float _3123 = dot(vec3(_488, _491, _494), vec3(_3120, _3121, _3122));
                        float _3128 = 1.0 - (_3116 * _3073.w);
                        float _4461 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3129 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3130 = sqrt(_3116) * _3092.w;
                        float _3133 = 1.39999997615814208984375 / (_3130 + 1.39999997615814208984375);
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3123) + _3134;
                        float _3140 = _3130 * _3130;
                        float _3144 = ((isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0))) * _3129) / ((_3140 * 0.699999988079071044921875) + 1.0);
                        float _3148 = (-0.0) - _1757;
                        float _3149 = (-0.0) - _1758;
                        float _3150 = (-0.0) - _1759;
                        float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
                        float _3155 = _3154 * _3148;
                        float _3156 = _3154 * _3149;
                        float _3157 = _3154 * _3150;
                        float _3164 = exp2(log2(1.0 / ((_3140 * 3.5) + 5.0)) * 0.25);
                        float _3165 = 1.0 - _695;
                        float _3172 = sqrt(1.0 - ((1.0 - (_3165 * _3165)) * (1.0 - (_3164 * _3164))));
                        float _3173 = _3172 * _3172;
                        float _3174 = _3173 * _3173;
                        float _3175 = _3155 + _3120;
                        float _3176 = _3156 + _3121;
                        float _3177 = _3157 + _3122;
                        float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
                        float _3185 = dot(vec3(_488, _491, _494), vec3(_3155, _3156, _3157));
                        float _4477 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3188 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3189 = dot(vec3(_488, _491, _494), vec3(_3181 * _3175, _3181 * _3176, _3181 * _3177));
                        float _4488 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3192 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3196 = ((_3192 * _3192) * (_3174 + (-1.0))) + 1.0;
                        float _3197 = _3133 * _3173;
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3123) + _3198;
                        float _4499 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3202 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3203 = 1.0 - _3173;
                        float _3213 = (0.5 / (((_3202 * ((_3188 * _3203) + _3173)) + 9.9999999392252902907785028219223e-09) + (((_3202 * _3203) + _3173) * _3188))) * _3202;
                        float _4510 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3224 = (((_3174 * 3.1415927410125732421875) * (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) / ((_3196 * _3196) * ((_3140 * 2.1991131305694580078125) + 3.141590118408203125))) * _3129;
                        _2982 = (_3144 * _3092.x) + _3050;
                        _2983 = (_3144 * _3092.y) + _3051;
                        _2984 = (_3144 * _3092.z) + _3052;
                        _2979 = (_3224 * _3109.x) + _3047;
                        _2980 = (_3224 * _3109.y) + _3048;
                        _2981 = (_3224 * _3109.z) + _3049;
                        if (_3054 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3047 = _2979;
                            _3048 = _2980;
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _3054;
                        }
                    }
                    frontier_phi_68_pred = _2984;
                    frontier_phi_68_pred_1 = _2983;
                    frontier_phi_68_pred_2 = _2982;
                    frontier_phi_68_pred_3 = _2980;
                    frontier_phi_68_pred_4 = _2979;
                    frontier_phi_68_pred_5 = _2981;
                }
                _2790 = frontier_phi_68_pred;
                _2788 = frontier_phi_68_pred_1;
                _2786 = frontier_phi_68_pred_2;
                _2782 = frontier_phi_68_pred_3;
                _2780 = frontier_phi_68_pred_4;
                _2784 = frontier_phi_68_pred_5;
                uint _2930 = _2929 + 1u;
                if (_2930 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2923 = _2780;
                    _2924 = _2782;
                    _2925 = _2784;
                    _2926 = _2786;
                    _2927 = _2788;
                    _2928 = _2790;
                    _2929 = _2930;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
        }
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.z;
        uint _2796 = (_2794 >> 8u) & 15u;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        if (((4294967295u << _2796) & _2698) == 0u)
        {
            _2891 = _2779;
            _2893 = _2781;
            _2895 = _2783;
            _2897 = _2785;
            _2899 = _2787;
            _2901 = _2789;
        }
        else
        {
            float _2916 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
            float _2917 = _2916 * _1757;
            float _2918 = _2916 * _1758;
            float _2919 = _2916 * _1759;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2796 < ((_2794 >> 12u) & 15u))
            {
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _3030 = _2779;
                float _3031 = _2781;
                float _3032 = _2783;
                float _3033 = _2785;
                float _3034 = _2787;
                float _3035 = _2789;
                uint _3036 = _2796;
                uint _3045;
                bool _3046;
                for (;;)
                {
                    _3045 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_3036 << 2u)) >> 2u)).x;
                    _3046 = _3045 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3046)
                    {
                        frontier_phi_74_pred = _3032;
                        frontier_phi_74_pred_1 = _3031;
                        frontier_phi_74_pred_2 = _3030;
                        frontier_phi_74_pred_3 = _3035;
                        frontier_phi_74_pred_4 = _3034;
                        frontier_phi_74_pred_5 = _3033;
                    }
                    else
                    {
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3242 = _3030;
                        float _3243 = _3031;
                        float _3244 = _3032;
                        float _3245 = _3033;
                        float _3246 = _3034;
                        float _3247 = _3035;
                        uint _3248 = _3045;
                        uint _3249;
                        vec4 _3274;
                        float _3275;
                        vec4 _3290;
                        vec3 _3302;
                        vec4 _3317;
                        vec4 _3333;
                        float _3380;
                        bool _3381;
                        for (;;)
                        {
                            uint _3259 = ((_3036 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3248));
                            _3249 = (_3248 + 4294967295u) & _3248;
                            uint _3261 = _3259 * 40u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            _3275 = _3274.w;
                            uint _3277 = (_3259 * 40u) + 4u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3292 = (_3259 * 40u) + 8u;
                            _3302 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x));
                            uint _3304 = (_3259 * 40u) + 16u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3320 = (_3259 * 40u) + 20u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3336 = (_3259 * 40u) + 24u;
                            vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3355 = (_3259 * 40u) + 28u;
                            vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            _3380 = fma(_1759, _3368.z, fma(_1758, _3368.y, _3368.x * _1757)) + _3368.w;
                            _3381 = !((fma(_1759, _3349.z, fma(_1758, _3349.y, _3349.x * _1757)) + _3349.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3381)
                            {
                                float _3408 = _3274.x - _1757;
                                float _3409 = _3274.y - _1758;
                                float _3410 = _3274.z - _1759;
                                float _3411 = dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410));
                                float _3414 = inversesqrt(_3411);
                                float _3415 = _3414 * _3408;
                                float _3416 = _3414 * _3409;
                                float _3417 = _3414 * _3410;
                                float _3421 = 1.0 - (_3411 / (_3275 * _3275));
                                float _4521 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3426 = sqrt(_3411) * _3290.w;
                                float _3428 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                                float _3429 = _3428 * _3428;
                                float _3432 = ((1.0 - _3429) * dot(vec3(_3415, _3416, _3417), vec3(_488, _491, _494))) + _3429;
                                float _3435 = _3426 * _3426;
                                float _3439 = (fma(_1759, _3317.z, fma(_1758, _3317.y, _3317.x * _1757)) + _3317.w) / _3380;
                                float _3440 = (fma(_1759, _3333.z, fma(_1758, _3333.y, _3333.x * _1757)) + _3333.w) / _3380;
                                float _3444 = 1.0 - dot(vec2(_3439, _3440), vec2(_3439, _3440));
                                float _4537 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3446 = _3445 * (((isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0))) * _3422) / ((_3435 * 0.699999988079071044921875) + 1.0));
                                float _3458 = exp2(log2(1.0 / ((_3435 * 3.5) + 5.0)) * 0.25);
                                float _3459 = 1.0 - _695;
                                float _3466 = sqrt(1.0 - ((1.0 - (_3459 * _3459)) * (1.0 - (_3458 * _3458))));
                                float _3467 = _3466 * _3466;
                                float _3468 = _3467 * _3467;
                                float _3469 = _3415 - _2917;
                                float _3470 = _3416 - _2918;
                                float _3471 = _3417 - _2919;
                                float _3475 = inversesqrt(dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471)));
                                float _3479 = dot(vec3(_488, _491, _494), vec3((-0.0) - _2917, (-0.0) - _2918, (-0.0) - _2919));
                                float _4548 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3482 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3483 = dot(vec3(_488, _491, _494), vec3(_3475 * _3469, _3475 * _3470, _3475 * _3471));
                                float _4559 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3486 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3490 = ((_3486 * _3486) * (_3468 + (-1.0))) + 1.0;
                                float _3491 = _3428 * _3467;
                                float _3492 = _3491 * _3491;
                                float _3498 = ((1.0 - _3492) * dot(vec3(_488, _491, _494), vec3(_3415, _3416, _3417))) + _3492;
                                float _4570 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3500 = 1.0 - _3467;
                                float _3510 = (0.5 / (((_3499 * ((_3482 * _3500) + _3467)) + 9.9999999392252902907785028219223e-09) + (((_3499 * _3500) + _3467) * _3482))) * _3499;
                                float _4581 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3520 = (_3445 * _3422) * (((_3468 * 3.1415927410125732421875) * (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) / ((_3490 * _3490) * ((_3435 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3520 * _3302.z;
                                frontier_phi_80_pred_1 = _3520 * _3302.y;
                                frontier_phi_80_pred_2 = _3520 * _3302.x;
                                frontier_phi_80_pred_3 = _3446 * _3290.z;
                                frontier_phi_80_pred_4 = _3446 * _3290.y;
                                frontier_phi_80_pred_5 = _3446 * _3290.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3526 = frontier_phi_80_pred;
                            _3525 = frontier_phi_80_pred_1;
                            _3524 = frontier_phi_80_pred_2;
                            _3529 = frontier_phi_80_pred_3;
                            _3528 = frontier_phi_80_pred_4;
                            _3527 = frontier_phi_80_pred_5;
                            _3232 = _3527 + _3245;
                            _3233 = _3528 + _3246;
                            _3234 = _3529 + _3247;
                            _3229 = _3524 + _3242;
                            _3230 = _3525 + _3243;
                            _3231 = _3526 + _3244;
                            if (_3249 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3249;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3231;
                        frontier_phi_74_pred_1 = _3230;
                        frontier_phi_74_pred_2 = _3229;
                        frontier_phi_74_pred_3 = _3234;
                        frontier_phi_74_pred_4 = _3233;
                        frontier_phi_74_pred_5 = _3232;
                    }
                    _2896 = frontier_phi_74_pred;
                    _2894 = frontier_phi_74_pred_1;
                    _2892 = frontier_phi_74_pred_2;
                    _2902 = frontier_phi_74_pred_3;
                    _2900 = frontier_phi_74_pred_4;
                    _2898 = frontier_phi_74_pred_5;
                    uint _3037 = _3036 + 1u;
                    if (_3037 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3030 = _2892;
                        _3031 = _2894;
                        _3032 = _2896;
                        _3033 = _2898;
                        _3034 = _2900;
                        _3035 = _2902;
                        _3036 = _3037;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2900;
                frontier_phi_62_63_ladder_1 = _2898;
                frontier_phi_62_63_ladder_2 = _2896;
                frontier_phi_62_63_ladder_3 = _2902;
                frontier_phi_62_63_ladder_4 = _2894;
                frontier_phi_62_63_ladder_5 = _2892;
            }
            else
            {
                frontier_phi_62_63_ladder = _2787;
                frontier_phi_62_63_ladder_1 = _2785;
                frontier_phi_62_63_ladder_2 = _2783;
                frontier_phi_62_63_ladder_3 = _2789;
                frontier_phi_62_63_ladder_4 = _2781;
                frontier_phi_62_63_ladder_5 = _2779;
            }
            _2891 = frontier_phi_62_63_ladder_5;
            _2893 = frontier_phi_62_63_ladder_4;
            _2895 = frontier_phi_62_63_ladder_2;
            _2897 = frontier_phi_62_63_ladder_1;
            _2899 = frontier_phi_62_63_ladder;
            _2901 = frontier_phi_62_63_ladder_3;
        }
        float _2906 = isnan(1.0) ? _679 : (isnan(_679) ? 1.0 : min(_679, 1.0));
        _2710 = (_2906 * _2897) + _2223;
        _2712 = (_2906 * _2899) + _2225;
        _2714 = (_2906 * _2901) + _2227;
        _2716 = ((_2891 * _665) * _2906) + _2561;
        _2718 = ((_2893 * _666) * _2906) + _2563;
        _2720 = ((_2895 * _667) * _2906) + _2565;
    }
    else
    {
        _2710 = _2223;
        _2712 = _2225;
        _2714 = _2227;
        _2716 = _2561;
        _2718 = _2563;
        _2720 = _2565;
    }
    float _4597 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4608 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4619 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4630 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _2745 = cbInstanceData._m0[_570 + 6u].w * (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)));
    float _2750 = _462 / cbSceneParam._m0[86u].x;
    float _2751 = _463 / cbSceneParam._m0[86u].y;
    vec4 _2765 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2750, _2751, (log2((isnan(cbSceneParam._m0[77u].w) ? _396 : (isnan(_396) ? cbSceneParam._m0[77u].w : min(_396, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2767 = _2765.x;
    float _2768 = _2765.y;
    float _2769 = _2765.z;
    float _2770 = _2765.w;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    if (_396 > cbSceneParam._m0[78u].w)
    {
        float _2804 = isnan(_396) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _396 : min(cbSceneParam._m0[80u].w, _396));
        float _2805 = _2804 / _396;
        float _2816 = _2805 * _447;
        float _2817 = _448 * _2805;
        float _2818 = (-0.0) - _2817;
        float _2819 = _2805 * _449;
        float _2821 = (cbSceneParam._m0[77u].w * _2818) / _2804;
        float _2822 = _2821 + cbSceneParam._m0[79u].w;
        float _2823 = cbSceneParam._m0[79u].w - _2817;
        float _2829 = sqrt(((_2816 * _2816) + (_2817 * _2817)) + (_2819 * _2819));
        float _2832 = (1.0 - (cbSceneParam._m0[77u].w / _2804)) * _2829;
        float _2837 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2839 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2992;
        if (abs((_2818 - _2821) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2992 = ((((_2822 > 0.0) ? exp2(_2837 * _2822) : (2.0 - exp2(_2839 * _2822))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2832;
        }
        else
        {
            float _2952 = 1.0 / cbSceneParam._m0[80u].x;
            float _2953 = isnan(_2823) ? _2822 : (isnan(_2822) ? _2823 : max(_2822, _2823));
            float _2954 = isnan(_2823) ? _2822 : (isnan(_2822) ? _2823 : min(_2822, _2823));
            float _2963 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : min(_2953, 0.0));
            float _2964 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : min(_2954, 0.0));
            _2992 = ((abs(_2829 / _2818) * cbSceneParam._m0[80u].y) * ((((_2963 - _2964) * 2.0) - ((exp2(_2837 * (isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0)))) - exp2(_2837 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0))))) * _2952)) - ((exp2(_2839 * _2963) - exp2(_2839 * _2964)) * _2952))) + (_2832 * cbSceneParam._m0[80u].z);
        }
        vec4 _2994 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2750, _2751, 1.0), 0.0);
        float _3003 = exp2((_2992 * (-1.44269502162933349609375)) * (1.0 - _2994.w));
        float _3004 = log2(_3003);
        float _3020 = log2(_2770);
        _2841 = (exp2(_3020 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].x)) * _2994.x) / cbSceneParam._m0[78u].x)) + _2767;
        _2843 = (exp2(_3020 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].y)) * _2994.y) / cbSceneParam._m0[78u].y)) + _2768;
        _2845 = (exp2(_3020 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].z)) * _2994.z) / cbSceneParam._m0[78u].z)) + _2769;
        _2847 = _3003 * _2770;
    }
    else
    {
        _2841 = _2767;
        _2843 = _2768;
        _2845 = _2769;
        _2847 = _2770;
    }
    float _2859 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2860 = _2859 == 3.0;
    float _2861 = log2(_2847);
    float _2868 = exp2(_2861 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2710 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _679))) + ((_2716 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1486)) * cbPerFrame._m0[3u].x));
    float _2869 = exp2(_2861 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2712 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _679))) + ((_2718 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1486)) * cbPerFrame._m0[3u].x));
    float _2870 = exp2(_2861 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2714 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _679))) + ((_2720 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1486)) * cbPerFrame._m0[3u].x));
    float _2879 = (_2859 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2879 * (_2860 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2841)));
    SV_Target.y = _2879 * (_2860 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2843)));
    SV_Target.z = _2879 * (_2860 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2845)));
    SV_Target.w = _2745;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2745;
}


