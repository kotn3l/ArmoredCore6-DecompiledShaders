#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D OverlayBlend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D OverlayBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D OverlayBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D OverlayBlend_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D OverlayBlend_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1095;
float _3481;
float _3482;
float _3483;
float _3484;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _242 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.w;
    vec4 _260 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _274 = ((_242.x * 4.55000019073486328125) * _260.x) * cbMtdParam._m0[9u].x;
    float _277 = ((_242.y * 4.55000019073486328125) * _260.y) * cbMtdParam._m0[9u].y;
    float _280 = ((_242.z * 4.55000019073486328125) * _260.z) * cbMtdParam._m0[9u].z;
    vec4 _292 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _299 = cbMtdParam._m0[10u].y + _292.x;
    vec4 _311 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _328 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _337 = (_311.z * 2.0) * (cbMtdParam._m0[10u].x + _328.z);
    float _346 = (_328.x * 2.0) + (-1.0);
    float _347 = (_328.y * 2.0) + (-1.0);
    float _348 = dot(vec2(_346, _347), vec2(_346, _347));
    float _3493 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _354 = sqrt(1.0 - (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))));
    float _357 = (cbMtdParam._m0[10u].z * ((_311.x * 2.0) + (-1.0))) + _346;
    float _358 = (cbMtdParam._m0[10u].z * ((_311.y * 2.0) + (-1.0))) + _347;
    float _361 = fma(_354, _226, fma(_358, _218 * TANGENT.x, (_204 * _196) * _357));
    float _364 = fma(_354, _227, fma(_358, _218 * TANGENT.y, (_204 * _197) * _357));
    float _367 = fma(_354, _228, fma(_358, _218 * TANGENT.z, (_204 * _198) * _357));
    float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    float _372 = _371 * _361;
    float _373 = _371 * _364;
    float _374 = _371 * _367;
    float _3504 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _375 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _376 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _3526 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _377 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _378 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _379 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _380 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _396 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _447 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _437);
    float _448 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _437);
    float _449 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _437);
    float _453 = inversesqrt(dot(vec3(_447, _448, _449), vec3(_447, _448, _449)));
    float _454 = _447 * _453;
    float _455 = _448 * _453;
    float _456 = _449 * _453;
    vec4 _461 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _463 = _461.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _774 = sqrt(((_447 * _447) + (_448 * _448)) + (_449 * _449));
        float _780 = (cbMatDynParam._m0[5u].x * _774) + cbMatDynParam._m0[5u].y;
        float _3570 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _785 = (cbMatDynParam._m0[5u].z * _774) + cbMatDynParam._m0[5u].w;
        float _3581 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) - _781)) + _781) < ((_463 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _475 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _476 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _478 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _480 = _478.w;
    float _500 = fma(_374, cbSceneParam._m0[5u].z, fma(_373, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _372));
    float _503 = fma(_374, cbSceneParam._m0[6u].z, fma(_373, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _372));
    float _506 = fma(_374, cbSceneParam._m0[7u].z, fma(_373, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _372));
    vec4 _508 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _510 = _508.x;
    float _522 = (((_508.y - _376) + (_508.w * _376)) * cbMtdParam._m0[3u].x) + _376;
    float _540 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_510 * _510)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _549 = (((cbMatDynParam._m0[15u].x - _380) * cbMatDynParam._m0[15u].w) * _540) + _380;
    float _558 = ((_540 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _522)) + _522;
    uint _582 = uint(roundEven(NORMAL.w)) * 13u;
    uint _584 = _582 + 9u;
    uint _585 = _584 + uint(cbMatDynParam._m0[0u].w);
    float _591 = (cbMtdParam._m0[0u].x * _377) * cbInstanceData._m0[_585].x;
    float _592 = (cbMtdParam._m0[0u].y * _378) * cbInstanceData._m0[_585].y;
    float _593 = (cbMtdParam._m0[0u].z * _379) * cbInstanceData._m0[_585].z;
    float _3592 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    vec4 _597 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _602 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _613 = (((_602.x - _549) + (_602.w * _549)) * cbMtdParam._m0[3u].x) + _549;
    float _626 = (cbMtdParam._m0[3u].x * (((_594 * _480) - _594) + _597.x)) + _594;
    float _627 = (cbMtdParam._m0[3u].x * (((_595 * _480) - _595) + _597.y)) + _595;
    float _628 = (cbMtdParam._m0[3u].x * (((_596 * _480) - _596) + _597.z)) + _596;
    vec4 _629 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _642 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_549 * (_377 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_549 * (_378 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_549 * (_379 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _629.z;
    float _646 = _642 * cbMatDynParam._m0[13u].w;
    float _656 = (_646 * (cbMatDynParam._m0[13u].x - _626)) + _626;
    float _657 = (_646 * (cbMatDynParam._m0[13u].y - _627)) + _627;
    float _658 = (_646 * (cbMatDynParam._m0[13u].z - _628)) + _628;
    float _666 = ((_642 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _613)) + _613;
    float _667 = 1.0 - _666;
    float _668 = _667 * _656;
    float _669 = _667 * _657;
    float _670 = _667 * _658;
    float _674 = (_656 + (-0.039999999105930328369140625)) * _666;
    float _675 = (_657 + (-0.039999999105930328369140625)) * _666;
    float _676 = (_658 + (-0.039999999105930328369140625)) * _666;
    float _677 = _674 + 0.039999999105930328369140625;
    float _678 = _675 + 0.039999999105930328369140625;
    float _679 = _676 + 0.039999999105930328369140625;
    vec4 _688 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _475, cbSceneParam._m0[86u].y * _476));
    float _691 = _688.x * TEXCOORD_4;
    float _692 = dot(vec3(_372, _373, _374), vec3(_454, _455, _456));
    float _695 = _692 * 2.0;
    float _699 = (_695 * _372) - _454;
    float _700 = (_695 * _373) - _455;
    float _701 = (_695 * _374) - _456;
    float _705 = abs(dot(vec3(_454, _455, _456), vec3(_372, _373, _374)));
    float _3625 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _707 = sqrt(_558);
    float _720 = exp2((_707 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_707 * 3.0));
    float _726 = (1.0 - _720) * ((_707 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _727 = _720 * _707;
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1094;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _819 = fma(_763, cbModelParam._m0[26u].z, fma(_759, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _755));
        float _823 = fma(_763, cbModelParam._m0[27u].z, fma(_759, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _755));
        float _827 = fma(_763, cbModelParam._m0[28u].z, fma(_759, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _755));
        float _852 = _755 + _372;
        float _853 = _759 + _373;
        float _854 = _763 + _374;
        float _864 = fma(_854, cbModelParam._m0[26u].z, fma(_853, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _852)) - _819;
        float _865 = fma(_854, cbModelParam._m0[27u].z, fma(_853, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _852)) - _823;
        float _866 = fma(_854, cbModelParam._m0[28u].z, fma(_853, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _852)) - _827;
        float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
        float _883 = ((_870 * _864) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_819 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_870 * _865) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_823 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_870 * _866) / cbModelParam._m0[34u].z) + ((((((_827 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        float _922 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_888.x + (-0.5));
        float _924 = _922 * (_888.y + (-0.5));
        float _925 = _922 * (_888.z + (-0.5));
        float _932 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_895.x + (-0.5));
        float _934 = _932 * (_895.y + (-0.5));
        float _935 = _932 * (_895.z + (-0.5));
        float _942 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_902.x + (-0.5));
        float _944 = _942 * (_902.y + (-0.5));
        float _945 = _942 * (_902.z + (-0.5));
        float _952 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_909.x + (-0.5));
        float _954 = _952 * (_909.y + (-0.5));
        float _955 = _952 * (_909.z + (-0.5));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = _923 * 0.5;
        float _960 = _933 * 0.5;
        float _961 = _943 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _976 = (dot(vec3(_372, _373, _374), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _986 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3673 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_988 + 1.0))) + _993) * _956;
        float _1003 = _924 * 0.5;
        float _1004 = _934 * 0.5;
        float _1005 = _944 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_372, _373, _374), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3706 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1030 + 1.0))) + _1035) * _957;
        float _1045 = _925 * 0.5;
        float _1046 = _935 * 0.5;
        float _1047 = _945 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_372, _373, _374), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3739 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1072 + 1.0))) + _1077) * _958;
        _1094 = _925;
        _1096 = _924;
        _1097 = _923;
        _1098 = _935;
        _1099 = _934;
        _1100 = _933;
        _1101 = _945;
        _1102 = _944;
        _1103 = _943;
        _1104 = _958;
        _1105 = _957;
        _1106 = _956;
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
    }
    else
    {
        _1094 = _1095;
        _1096 = _1095;
        _1097 = _1095;
        _1098 = _1095;
        _1099 = _1095;
        _1100 = _1095;
        _1101 = _1095;
        _1102 = _1095;
        _1103 = _1095;
        _1104 = _1095;
        _1105 = _1095;
        _1106 = _1095;
        _1107 = 0.0;
        _1108 = 0.0;
        _1109 = 0.0;
    }
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1138 = fma(_763, cbModelParam._m0[30u].z, fma(_759, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _755));
        float _1142 = fma(_763, cbModelParam._m0[31u].z, fma(_759, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _755));
        float _1146 = fma(_763, cbModelParam._m0[32u].z, fma(_759, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _755));
        float _1169 = _755 + _372;
        float _1170 = _759 + _373;
        float _1171 = _763 + _374;
        float _1181 = fma(_1171, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1169)) - _1138;
        float _1182 = fma(_1171, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1169)) - _1142;
        float _1183 = fma(_1171, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1169)) - _1146;
        float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
        float _1200 = ((_1187 * _1181) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1138 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1187 * _1182) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1142 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1187 * _1183) / cbModelParam._m0[35u].z) + ((((((_1146 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        float _1237 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1204.x + (-0.5));
        float _1239 = _1237 * (_1204.y + (-0.5));
        float _1240 = _1237 * (_1204.z + (-0.5));
        float _1247 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1211.x + (-0.5));
        float _1249 = _1247 * (_1211.y + (-0.5));
        float _1250 = _1247 * (_1211.z + (-0.5));
        float _1257 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1218.x + (-0.5));
        float _1259 = _1257 * (_1218.y + (-0.5));
        float _1260 = _1257 * (_1218.z + (-0.5));
        float _1267 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1225.x + (-0.5));
        float _1269 = _1267 * (_1225.y + (-0.5));
        float _1270 = _1267 * (_1225.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_372, _373, _374), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3802 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1301 + 1.0))) + _1306) * _1271;
        float _1316 = _1239 * 0.5;
        float _1317 = _1249 * 0.5;
        float _1318 = _1259 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_372, _373, _374), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3835 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1343 + 1.0))) + _1348) * _1272;
        float _1358 = _1240 * 0.5;
        float _1359 = _1250 * 0.5;
        float _1360 = _1260 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_372, _373, _374), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3868 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1385 + 1.0))) + _1390) * _1273;
        _1407 = _1240;
        _1408 = _1239;
        _1409 = _1238;
        _1410 = _1250;
        _1411 = _1249;
        _1412 = _1248;
        _1413 = _1260;
        _1414 = _1259;
        _1415 = _1258;
        _1416 = _1273;
        _1417 = _1272;
        _1418 = _1271;
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
    }
    else
    {
        _1407 = _1095;
        _1408 = _1095;
        _1409 = _1095;
        _1410 = _1095;
        _1411 = _1095;
        _1412 = _1095;
        _1413 = _1095;
        _1414 = _1095;
        _1415 = _1095;
        _1416 = _1095;
        _1417 = _1095;
        _1418 = _1095;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1107)) + _1107;
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1108)) + _1108;
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1109)) + _1109;
    float _1454 = fma(_1433, cbSceneParam._m0[89u].z, fma(_1432, cbSceneParam._m0[89u].y, _1431 * cbSceneParam._m0[89u].x));
    float _1457 = fma(_1433, cbSceneParam._m0[90u].z, fma(_1432, cbSceneParam._m0[90u].y, _1431 * cbSceneParam._m0[90u].x));
    float _1460 = fma(_1433, cbSceneParam._m0[91u].z, fma(_1432, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1431));
    float _1475 = _699 * 0.5;
    float _1476 = _700 * 0.5;
    float _1477 = _701 * 0.5;
    float _1478 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1481 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1484 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1515;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1491 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1094, _1098, _1101, _1104));
        float _1495 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1499 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1097, _1100, _1103, _1106));
        float _1506 = dot(vec4(cbModelParam._m0[39u]), vec4(_1475, _1476, _1477, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1506) ? 0.0 : (isnan(0.0) ? _1506 : max(0.0, _1506))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1526;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1517 = dot(vec4(cbModelParam._m0[40u]), vec4(_1475, _1476, _1477, 1.0));
        _1526 = dot(vec3(isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1526 = 1.0;
    }
    float _1530 = (_1526 * cbModelParam._m0[1u].x) + (_1515 * (1.0 - cbModelParam._m0[1u].x));
    float _1540 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _558);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1540 : min(cbModelParam._m0[25u].z, _1540));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_763, cbModelParam._m0[13u].z, fma(_759, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _755)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_763, cbModelParam._m0[14u].z, fma(_759, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _755)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_763, cbModelParam._m0[15u].z, fma(_759, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _755)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_701, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _699));
        float _1602 = fma(_701, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _699));
        float _1605 = fma(_701, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _699));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1633 = frontier_phi_19_17_ladder;
        }
        float _1840;
        if (_1602 > 0.0)
        {
            _1840 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1840 = frontier_phi_28_24_ladder;
        }
        float _2094;
        if (_1605 > 0.0)
        {
            _2094 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2094 = frontier_phi_40_35_ladder;
        }
        float _2096 = isnan(_1840) ? _1633 : (isnan(_1633) ? _1840 : min(_1633, _1840));
        float _2097 = isnan(_2094) ? _2096 : (isnan(_2096) ? _2094 : min(_2096, _2094));
        float _2101 = (_2097 * _1599) + _1588;
        float _2102 = (_2097 * _1602) + _1592;
        float _2103 = (_2097 * _1605) + _1596;
        float _2104 = _2097 * 9.9999997473787516355514526367188e-05;
        float _2106 = (-1.0) - _2104;
        float _2108 = _2104 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2103 > _2108) || ((_2103 < _2106) || ((_2102 > _2108) || ((_2102 < _2106) || ((_2101 < _2106) || (_2101 > _2108))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2231 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2103, cbModelParam._m0[9u].z, fma(_2102, cbModelParam._m0[9u].y, _2101 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2103, cbModelParam._m0[10u].z, fma(_2102, cbModelParam._m0[10u].y, _2101 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2103, cbModelParam._m0[11u].z, fma(_2102, cbModelParam._m0[11u].y, _2101 * cbModelParam._m0[11u].x))), _1541);
            frontier_phi_18_40_ladder = _2231.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2231.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2231.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_18_40_ladder_2;
        _1623 = frontier_phi_18_40_ladder_1;
        _1625 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_699, _700, _701), _1541);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _558);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1687 = fma(_763, cbModelParam._m0[21u].z, fma(_759, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _755)) + cbModelParam._m0[21u].w;
        float _1691 = fma(_763, cbModelParam._m0[22u].z, fma(_759, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _755)) + cbModelParam._m0[22u].w;
        float _1695 = fma(_763, cbModelParam._m0[23u].z, fma(_759, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _755)) + cbModelParam._m0[23u].w;
        float _1698 = fma(_701, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _699));
        float _1701 = fma(_701, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _699));
        float _1704 = fma(_701, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _699));
        float _1845;
        if (_1698 > 0.0)
        {
            _1845 = abs((1.0 - _1687) / _1698);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1687 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1845 = frontier_phi_30_26_ladder;
        }
        float _2121;
        if (_1701 > 0.0)
        {
            _2121 = abs((1.0 - _1691) / _1701);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1691 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2121 = frontier_phi_42_37_ladder;
        }
        float _2334;
        if (_1704 > 0.0)
        {
            _2334 = abs((1.0 - _1695) / _1704);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1695 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2334 = frontier_phi_51_48_ladder;
        }
        float _2336 = isnan(_2121) ? _1845 : (isnan(_1845) ? _2121 : min(_1845, _2121));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1698) + _1687;
        float _2342 = (_2337 * _1701) + _1691;
        float _2343 = (_2337 * _1704) + _1695;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2344;
        float _2347 = _2344 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2343 > _2347) || ((_2343 < _2345) || ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 < _2345) || (_2341 > _2347))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2343, cbModelParam._m0[17u].z, fma(_2342, cbModelParam._m0[17u].y, _2341 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2343, cbModelParam._m0[18u].z, fma(_2342, cbModelParam._m0[18u].y, _2341 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2343, cbModelParam._m0[19u].z, fma(_2342, cbModelParam._m0[19u].y, _2341 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_27_51_ladder = _2543.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2543.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2543.x * cbModelParam._m0[1u].z;
        }
        _1723 = frontier_phi_27_51_ladder_2;
        _1725 = frontier_phi_27_51_ladder_1;
        _1727 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_699, _700, _701), _1630);
        _1723 = _1707.x * cbModelParam._m0[1u].z;
        _1725 = _1707.y * cbModelParam._m0[1u].z;
        _1727 = _1707.z * cbModelParam._m0[1u].z;
    }
    float _1740 = (((_726 * _677) + _727) * _691) * ((cbModelParam._m0[1u].w * (_1723 - _1621)) + _1621);
    float _1742 = (((_726 * _678) + _727) * _691) * ((cbModelParam._m0[1u].w * (_1725 - _1623)) + _1623);
    float _1744 = (((_726 * _679) + _727) * _691) * ((cbModelParam._m0[1u].w * (_1727 - _1625)) + _1625);
    float _1747 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, _1740 * cbSceneParam._m0[91u].x));
    uvec4 _1763 = floatBitsToUint(cbInstanceData._m0[_582 + 5u]);
    uint _1765 = _1763.x * 14u;
    uint _1766 = _1765 + 13u;
    float _1773 = _691 + (-1.0);
    float _1778 = (cbLight._m0[_1766].x * _1773) + 1.0;
    float _1779 = (cbLight._m0[_1766].y * _1773) + 1.0;
    float _1780 = (cbLight._m0[_1766].z * _1773) + 1.0;
    float _1781 = (cbLight._m0[_1766].w * _1773) + 1.0;
    uint _1782 = _1765 + 5u;
    float _1788 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
    uint _1792 = _1765 + 4u;
    float _1798 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
    uint _1802 = _1765 | 1u;
    float _1813 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_372, _373, _374));
    float _1816 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_372, _373, _374));
    float _4004 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _4015 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1821 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * 0.3183098733425140380859375;
    float _1823 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * 0.3183098733425140380859375;
    float _1830 = ((cbLight._m0[_1782].x * _1788) * _1823) + ((cbLight._m0[_1792].x * _1798) * _1821);
    float _1831 = ((_1788 * cbLight._m0[_1782].y) * _1823) + ((_1798 * cbLight._m0[_1792].y) * _1821);
    float _1832 = ((_1788 * cbLight._m0[_1782].z) * _1823) + ((_1798 * cbLight._m0[_1792].z) * _1821);
    uvec4 _1837 = floatBitsToUint(cbLight._m0[_1765 + 12u]);
    bool _1839 = _1837.x == 0u;
    float _1850;
    float _1852;
    float _1854;
    if (_1839)
    {
        _1850 = _1830;
        _1852 = _1831;
        _1854 = _1832;
    }
    else
    {
        uint _1858 = _1765 + 6u;
        float _1874 = (dot(vec3(cbLight._m0[_1765 + 2u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _1875 = _1874 * _1874;
        float _4026 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1877 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _1850 = (((cbLight._m0[_1858].x * 0.3183098733425140380859375) * _1876) * _1877) + _1830;
        _1852 = (((cbLight._m0[_1858].y * 0.3183098733425140380859375) * _1876) * _1877) + _1831;
        _1854 = (((cbLight._m0[_1858].z * 0.3183098733425140380859375) * _1876) * _1877) + _1832;
    }
    bool _1857 = _1837.y == 0u;
    float _1895;
    float _1897;
    float _1899;
    if (_1857)
    {
        _1895 = _1850;
        _1897 = _1852;
        _1899 = _1854;
    }
    else
    {
        uint _2065 = _1765 + 7u;
        float _2081 = (dot(vec3(cbLight._m0[_1765 + 3u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _2082 = _2081 * _2081;
        float _4042 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2083 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2084 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _1895 = (((cbLight._m0[_2065].x * 0.3183098733425140380859375) * _2083) * _2084) + _1850;
        _1897 = (((cbLight._m0[_2065].y * 0.3183098733425140380859375) * _2083) * _2084) + _1852;
        _1899 = (((cbLight._m0[_2065].z * 0.3183098733425140380859375) * _2083) * _2084) + _1854;
    }
    uint _1902 = _1765 + 8u;
    float _1915 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1765].w)) * _558) * 0.949999988079071044921875);
    float _1916 = _1915 * _1915;
    float _1917 = cbLight._m0[_1765].x + _454;
    float _1918 = cbLight._m0[_1765].y + _455;
    float _1919 = cbLight._m0[_1765].z + _456;
    float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
    float _1924 = _1923 * _1917;
    float _1925 = _1923 * _1918;
    float _1926 = _1923 * _1919;
    float _1927 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1765].xyz));
    float _4058 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _1931 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _1932 = dot(vec3(_372, _373, _374), vec3(_1924, _1925, _1926));
    float _4080 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1924, _1925, _1926));
    float _4091 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1916 * _1916;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1952 = exp2(log2(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * 5.0);
    float _1953 = 0.959999978542327880859375 - _674;
    float _1955 = 0.959999978542327880859375 - _675;
    float _1956 = 0.959999978542327880859375 - _676;
    float _1963 = 1.0 - _1916;
    float _1974 = (0.5 / (((_1931 * ((_1930 * _1963) + _1916)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _1963) + _1916) * _1930))) * _1930;
    float _4102 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1976 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    uint _1987 = _1765 + 9u;
    float _1998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1802].w)) * _558) * 0.949999988079071044921875);
    float _1999 = _1998 * _1998;
    float _2000 = cbLight._m0[_1802].x + _454;
    float _2001 = cbLight._m0[_1802].y + _455;
    float _2002 = cbLight._m0[_1802].z + _456;
    float _2006 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
    float _2007 = _2006 * _2000;
    float _2008 = _2006 * _2001;
    float _2009 = _2006 * _2002;
    float _2010 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1802].xyz));
    float _4113 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _2014 = dot(vec3(_372, _373, _374), vec3(_2007, _2008, _2009));
    float _4124 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _2018 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_2007, _2008, _2009));
    float _4135 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2022 = _1999 * _1999;
    float _2026 = ((_2017 * _2017) * (_2022 + (-1.0))) + 1.0;
    float _2033 = exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0);
    float _2040 = 1.0 - _1999;
    float _2050 = (0.5 / (((_1931 * ((_2013 * _2040) + _1999)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2040) + _1999) * _2013))) * _2013;
    float _4146 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2052 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2022 / ((_2026 * _2026) * 3.141590118408203125));
    float _2062 = (((((_2033 * _1953) + _677) * cbLight._m0[_1987].x) * _2052) * _1788) + (((((_1952 * _1953) + _677) * cbLight._m0[_1902].x) * _1976) * _1798);
    float _2063 = (((((_2033 * _1955) + _678) * cbLight._m0[_1987].y) * _2052) * _1788) + (((((_1952 * _1955) + _678) * cbLight._m0[_1902].y) * _1976) * _1798);
    float _2064 = (((((_2033 * _1956) + _679) * cbLight._m0[_1987].z) * _2052) * _1788) + (((((_1952 * _1956) + _679) * cbLight._m0[_1902].z) * _1976) * _1798);
    float _2126;
    float _2128;
    float _2130;
    if (_1839)
    {
        _2126 = _2062;
        _2128 = _2063;
        _2130 = _2064;
    }
    else
    {
        uint _2132 = _1765 + 2u;
        uint _2136 = _1765 + 10u;
        float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _558) * 0.949999988079071044921875);
        float _2151 = _2150 * _2150;
        float _2152 = cbLight._m0[_2132].x + _454;
        float _2153 = cbLight._m0[_2132].y + _455;
        float _2154 = cbLight._m0[_2132].z + _456;
        float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
        float _2159 = _2158 * _2152;
        float _2160 = _2158 * _2153;
        float _2161 = _2158 * _2154;
        float _2162 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_2132].xyz));
        float _4157 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _2166 = dot(vec3(_372, _373, _374), vec3(_2159, _2160, _2161));
        float _4168 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2170 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2159, _2160, _2161));
        float _4179 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2174 = _2151 * _2151;
        float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
        float _2185 = exp2(log2(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * 5.0);
        float _2192 = 1.0 - _2151;
        float _2202 = (0.5 / (((_1931 * ((_2165 * _2192) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2192) + _2151) * _2165))) * _2165;
        float _4190 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2204 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
        float _2205 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _2126 = (((((_2185 * _1953) + _677) * cbLight._m0[_2136].x) * _2204) * _2205) + _2062;
        _2128 = (((((_2185 * _1955) + _678) * cbLight._m0[_2136].y) * _2204) * _2205) + _2063;
        _2130 = (((((_2185 * _1956) + _679) * cbLight._m0[_2136].z) * _2204) * _2205) + _2064;
    }
    float _2240;
    float _2242;
    float _2244;
    if (_1857)
    {
        _2240 = _2126;
        _2242 = _2128;
        _2244 = _2130;
    }
    else
    {
        uint _2251 = _1765 + 3u;
        uint _2255 = _1765 + 11u;
        float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _558) * 0.949999988079071044921875);
        float _2270 = _2269 * _2269;
        float _2271 = cbLight._m0[_2251].x + _454;
        float _2272 = cbLight._m0[_2251].y + _455;
        float _2273 = cbLight._m0[_2251].z + _456;
        float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
        float _2278 = _2277 * _2271;
        float _2279 = _2277 * _2272;
        float _2280 = _2277 * _2273;
        float _2281 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_2251].xyz));
        float _4206 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2285 = dot(vec3(_372, _373, _374), vec3(_2278, _2279, _2280));
        float _4217 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2289 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2278, _2279, _2280));
        float _4228 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2293 = _2270 * _2270;
        float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
        float _2304 = exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0);
        float _2311 = 1.0 - _2270;
        float _2321 = (0.5 / (((_1931 * ((_2284 * _2311) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2311) + _2270) * _2284))) * _2284;
        float _4239 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2323 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
        float _2324 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _2240 = (((((_2304 * _1953) + _677) * cbLight._m0[_2255].x) * _2323) * _2324) + _2126;
        _2242 = (((((_2304 * _1955) + _678) * cbLight._m0[_2255].y) * _2323) * _2324) + _2128;
        _2244 = (((((_2304 * _1956) + _679) * cbLight._m0[_2255].z) * _2323) * _2324) + _2130;
    }
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    if (_1763.y == 0u)
    {
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2399;
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2399;
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2399;
        uvec4 _2414 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2415 = _2414.x;
        uint _2426 = uint((float(_2414.y) * floor(float(uint(cbSceneParam._m0[85u].y * _476) / _2415))) + floor(float(uint(cbSceneParam._m0[85u].x * _475) / _2415)));
        float _2436 = (log2(_2402 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2437 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        uint _2440 = uint(isnan(14.0) ? _2437 : (isnan(_2437) ? 14.0 : min(_2437, 14.0)));
        uvec4 _2445 = texelFetch(g_lightClusterGridBuffer, int(((_2440 << 2u) + (_2426 << 6u)) >> 2u));
        uint _2446 = _2445.x;
        uint _2447 = _2414.z;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        if (((((1u << ((_2447 >> 4u) & 15u)) + 4294967295u) & _2446) == 0u) || ((_2447 & 240u) == 0u))
        {
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
        }
        else
        {
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2557;
            float _2559;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            uint _2706 = 0u;
            uint _2715;
            bool _2716;
            for (;;)
            {
                _2715 = texelFetch(g_lightClassification, int((((_2440 << 5u) + (_2426 << 9u)) + (_2706 << 2u)) >> 2u)).x;
                _2716 = _2715 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2716)
                {
                    frontier_phi_68_pred = _2702;
                    frontier_phi_68_pred_1 = _2705;
                    frontier_phi_68_pred_2 = _2704;
                    frontier_phi_68_pred_3 = _2703;
                    frontier_phi_68_pred_4 = _2701;
                    frontier_phi_68_pred_5 = _2700;
                }
                else
                {
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    uint _2851;
                    _2845 = _2700;
                    _2846 = _2701;
                    _2847 = _2702;
                    _2848 = _2703;
                    _2849 = _2704;
                    _2850 = _2705;
                    _2851 = _2715;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    for (;;)
                    {
                        uint _2855 = uint(findLSB(_2851)) + (_2706 << 5u);
                        uint _2852 = (_2851 + 4294967295u) & _2851;
                        uint _2857 = _2855 * 48u;
                        vec4 _2871 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2857)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 3u)).x));
                        uint _2877 = (_2855 * 48u) + 4u;
                        vec4 _2890 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2877)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 3u)).x));
                        uint _2896 = (_2855 * 48u) + 8u;
                        vec3 _2907 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2896)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 2u)).x));
                        float _2911 = _2871.x - _2400;
                        float _2912 = _2871.y - _2401;
                        float _2913 = _2871.z - _2402;
                        float _2914 = dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913));
                        float _2917 = inversesqrt(_2914);
                        float _2918 = _2917 * _2911;
                        float _2919 = _2917 * _2912;
                        float _2920 = _2917 * _2913;
                        float _2921 = dot(vec3(_500, _503, _506), vec3(_2918, _2919, _2920));
                        float _2926 = 1.0 - (_2914 * _2871.w);
                        float _4265 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2927 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2928 = sqrt(_2914) * _2890.w;
                        float _2931 = 1.39999997615814208984375 / (_2928 + 1.39999997615814208984375);
                        float _2932 = _2931 * _2931;
                        float _2935 = ((1.0 - _2932) * _2921) + _2932;
                        float _2938 = _2928 * _2928;
                        float _2942 = ((isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0))) * _2927) / ((_2938 * 0.699999988079071044921875) + 1.0);
                        float _2946 = (-0.0) - _2400;
                        float _2947 = (-0.0) - _2401;
                        float _2948 = (-0.0) - _2402;
                        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
                        float _2953 = _2952 * _2946;
                        float _2954 = _2952 * _2947;
                        float _2955 = _2952 * _2948;
                        float _2963 = exp2(log2(1.0 / ((_2938 * 3.5) + 5.0)) * 0.25);
                        float _2964 = 1.0 - _707;
                        float _2971 = sqrt(1.0 - ((1.0 - (_2964 * _2964)) * (1.0 - (_2963 * _2963))));
                        float _2972 = _2971 * _2971;
                        float _2973 = _2972 * _2972;
                        float _2974 = _2953 + _2918;
                        float _2975 = _2954 + _2919;
                        float _2976 = _2955 + _2920;
                        float _2980 = inversesqrt(dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976)));
                        float _2984 = dot(vec3(_500, _503, _506), vec3(_2953, _2954, _2955));
                        float _4281 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2987 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                        float _2988 = dot(vec3(_500, _503, _506), vec3(_2980 * _2974, _2980 * _2975, _2980 * _2976));
                        float _4292 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2991 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                        float _2995 = ((_2991 * _2991) * (_2973 + (-1.0))) + 1.0;
                        float _2996 = _2931 * _2972;
                        float _2997 = _2996 * _2996;
                        float _3000 = ((1.0 - _2997) * _2921) + _2997;
                        float _4303 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3001 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _3002 = 1.0 - _2972;
                        float _3012 = (0.5 / (((_3001 * ((_2987 * _3002) + _2972)) + 9.9999999392252902907785028219223e-09) + (((_3001 * _3002) + _2972) * _2987))) * _3001;
                        float _4314 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3023 = (((_2973 * 3.1415927410125732421875) * (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) / ((_2995 * _2995) * ((_2938 * 2.1991131305694580078125) + 3.141590118408203125))) * _2927;
                        _2775 = (_2942 * _2890.x) + _2848;
                        _2776 = (_2942 * _2890.y) + _2849;
                        _2777 = (_2942 * _2890.z) + _2850;
                        _2772 = (_3023 * _2907.x) + _2845;
                        _2773 = (_3023 * _2907.y) + _2846;
                        _2774 = (_3023 * _2907.z) + _2847;
                        if (_2852 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2845 = _2772;
                            _2846 = _2773;
                            _2847 = _2774;
                            _2848 = _2775;
                            _2849 = _2776;
                            _2850 = _2777;
                            _2851 = _2852;
                        }
                    }
                    frontier_phi_68_pred = _2774;
                    frontier_phi_68_pred_1 = _2777;
                    frontier_phi_68_pred_2 = _2776;
                    frontier_phi_68_pred_3 = _2775;
                    frontier_phi_68_pred_4 = _2773;
                    frontier_phi_68_pred_5 = _2772;
                }
                _2553 = frontier_phi_68_pred;
                _2559 = frontier_phi_68_pred_1;
                _2557 = frontier_phi_68_pred_2;
                _2555 = frontier_phi_68_pred_3;
                _2551 = frontier_phi_68_pred_4;
                _2549 = frontier_phi_68_pred_5;
                uint _2707 = _2706 + 1u;
                if (_2707 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2700 = _2549;
                    _2701 = _2551;
                    _2702 = _2553;
                    _2703 = _2555;
                    _2704 = _2557;
                    _2705 = _2559;
                    _2706 = _2707;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
        }
        uvec4 _2562 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2563 = _2562.z;
        uint _2565 = (_2563 >> 8u) & 15u;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        if (((4294967295u << _2565) & _2446) == 0u)
        {
            _2668 = _2548;
            _2670 = _2550;
            _2672 = _2552;
            _2674 = _2554;
            _2676 = _2556;
            _2678 = _2558;
        }
        else
        {
            float _2693 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
            float _2694 = _2693 * _2400;
            float _2695 = _2693 * _2401;
            float _2696 = _2693 * _2402;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2565 < ((_2563 >> 12u) & 15u))
            {
                float _2669;
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2828 = _2548;
                float _2829 = _2550;
                float _2830 = _2552;
                float _2831 = _2554;
                float _2832 = _2556;
                float _2833 = _2558;
                uint _2834 = _2565;
                uint _2843;
                bool _2844;
                for (;;)
                {
                    _2843 = texelFetch(g_lightClassification, int((((_2440 << 5u) + (_2426 << 9u)) + (_2834 << 2u)) >> 2u)).x;
                    _2844 = _2843 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2844)
                    {
                        frontier_phi_79_pred = _2833;
                        frontier_phi_79_pred_1 = _2832;
                        frontier_phi_79_pred_2 = _2831;
                        frontier_phi_79_pred_3 = _2830;
                        frontier_phi_79_pred_4 = _2829;
                        frontier_phi_79_pred_5 = _2828;
                    }
                    else
                    {
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3050 = _2828;
                        float _3051 = _2829;
                        float _3052 = _2830;
                        float _3053 = _2831;
                        float _3054 = _2832;
                        float _3055 = _2833;
                        uint _3056 = _2843;
                        uint _3057;
                        vec4 _3082;
                        float _3083;
                        vec4 _3098;
                        vec3 _3110;
                        vec4 _3125;
                        vec4 _3141;
                        float _3188;
                        bool _3189;
                        for (;;)
                        {
                            uint _3067 = ((_2834 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3056));
                            _3057 = (_3056 + 4294967295u) & _3056;
                            uint _3069 = _3067 * 40u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            _3083 = _3082.w;
                            uint _3085 = (_3067 * 40u) + 4u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3100 = (_3067 * 40u) + 8u;
                            _3110 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x));
                            uint _3112 = (_3067 * 40u) + 16u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3128 = (_3067 * 40u) + 20u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3144 = (_3067 * 40u) + 24u;
                            vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3163 = (_3067 * 40u) + 28u;
                            vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            _3188 = fma(_2402, _3176.z, fma(_2401, _3176.y, _3176.x * _2400)) + _3176.w;
                            _3189 = !((fma(_2402, _3157.z, fma(_2401, _3157.y, _3157.x * _2400)) + _3157.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3189)
                            {
                                float _3216 = _3082.x - _2400;
                                float _3217 = _3082.y - _2401;
                                float _3218 = _3082.z - _2402;
                                float _3219 = dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218));
                                float _3222 = inversesqrt(_3219);
                                float _3223 = _3222 * _3216;
                                float _3224 = _3222 * _3217;
                                float _3225 = _3222 * _3218;
                                float _3229 = 1.0 - (_3219 / (_3083 * _3083));
                                float _4325 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3230 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3234 = sqrt(_3219) * _3098.w;
                                float _3236 = 1.39999997615814208984375 / (_3234 + 1.39999997615814208984375);
                                float _3237 = _3236 * _3236;
                                float _3240 = ((1.0 - _3237) * dot(vec3(_3223, _3224, _3225), vec3(_500, _503, _506))) + _3237;
                                float _3243 = _3234 * _3234;
                                float _3247 = (fma(_2402, _3125.z, fma(_2401, _3125.y, _3125.x * _2400)) + _3125.w) / _3188;
                                float _3248 = (fma(_2402, _3141.z, fma(_2401, _3141.y, _3141.x * _2400)) + _3141.w) / _3188;
                                float _3252 = 1.0 - dot(vec2(_3247, _3248), vec2(_3247, _3248));
                                float _4341 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3254 = _3253 * (((isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))) * _3230) / ((_3243 * 0.699999988079071044921875) + 1.0));
                                float _3266 = exp2(log2(1.0 / ((_3243 * 3.5) + 5.0)) * 0.25);
                                float _3267 = 1.0 - _707;
                                float _3274 = sqrt(1.0 - ((1.0 - (_3267 * _3267)) * (1.0 - (_3266 * _3266))));
                                float _3275 = _3274 * _3274;
                                float _3276 = _3275 * _3275;
                                float _3277 = _3223 - _2694;
                                float _3278 = _3224 - _2695;
                                float _3279 = _3225 - _2696;
                                float _3283 = inversesqrt(dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279)));
                                float _3287 = dot(vec3(_500, _503, _506), vec3((-0.0) - _2694, (-0.0) - _2695, (-0.0) - _2696));
                                float _4352 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3290 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                                float _3291 = dot(vec3(_500, _503, _506), vec3(_3283 * _3277, _3283 * _3278, _3283 * _3279));
                                float _4363 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3294 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3298 = ((_3294 * _3294) * (_3276 + (-1.0))) + 1.0;
                                float _3299 = _3236 * _3275;
                                float _3300 = _3299 * _3299;
                                float _3306 = ((1.0 - _3300) * dot(vec3(_500, _503, _506), vec3(_3223, _3224, _3225))) + _3300;
                                float _4374 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3308 = 1.0 - _3275;
                                float _3318 = (0.5 / (((_3307 * ((_3290 * _3308) + _3275)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3275) * _3290))) * _3307;
                                float _4385 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3328 = (_3253 * _3230) * (((_3276 * 3.1415927410125732421875) * (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) / ((_3298 * _3298) * ((_3243 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3254 * _3098.z;
                                frontier_phi_85_pred_1 = _3254 * _3098.y;
                                frontier_phi_85_pred_2 = _3254 * _3098.x;
                                frontier_phi_85_pred_3 = _3328 * _3110.z;
                                frontier_phi_85_pred_4 = _3328 * _3110.y;
                                frontier_phi_85_pred_5 = _3328 * _3110.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3337 = frontier_phi_85_pred;
                            _3336 = frontier_phi_85_pred_1;
                            _3335 = frontier_phi_85_pred_2;
                            _3334 = frontier_phi_85_pred_3;
                            _3333 = frontier_phi_85_pred_4;
                            _3332 = frontier_phi_85_pred_5;
                            _3040 = _3335 + _3053;
                            _3041 = _3336 + _3054;
                            _3042 = _3337 + _3055;
                            _3037 = _3332 + _3050;
                            _3038 = _3333 + _3051;
                            _3039 = _3334 + _3052;
                            if (_3057 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3057;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3042;
                        frontier_phi_79_pred_1 = _3041;
                        frontier_phi_79_pred_2 = _3040;
                        frontier_phi_79_pred_3 = _3039;
                        frontier_phi_79_pred_4 = _3038;
                        frontier_phi_79_pred_5 = _3037;
                    }
                    _2679 = frontier_phi_79_pred;
                    _2677 = frontier_phi_79_pred_1;
                    _2675 = frontier_phi_79_pred_2;
                    _2673 = frontier_phi_79_pred_3;
                    _2671 = frontier_phi_79_pred_4;
                    _2669 = frontier_phi_79_pred_5;
                    uint _2835 = _2834 + 1u;
                    if (_2835 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2828 = _2669;
                        _2829 = _2671;
                        _2830 = _2673;
                        _2831 = _2675;
                        _2832 = _2677;
                        _2833 = _2679;
                        _2834 = _2835;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2675;
                frontier_phi_60_61_ladder_1 = _2679;
                frontier_phi_60_61_ladder_2 = _2677;
                frontier_phi_60_61_ladder_3 = _2673;
                frontier_phi_60_61_ladder_4 = _2671;
                frontier_phi_60_61_ladder_5 = _2669;
            }
            else
            {
                frontier_phi_60_61_ladder = _2554;
                frontier_phi_60_61_ladder_1 = _2558;
                frontier_phi_60_61_ladder_2 = _2556;
                frontier_phi_60_61_ladder_3 = _2552;
                frontier_phi_60_61_ladder_4 = _2550;
                frontier_phi_60_61_ladder_5 = _2548;
            }
            _2668 = frontier_phi_60_61_ladder_5;
            _2670 = frontier_phi_60_61_ladder_4;
            _2672 = frontier_phi_60_61_ladder_3;
            _2674 = frontier_phi_60_61_ladder;
            _2676 = frontier_phi_60_61_ladder_2;
            _2678 = frontier_phi_60_61_ladder_1;
        }
        float _2683 = isnan(1.0) ? _691 : (isnan(_691) ? 1.0 : min(_691, 1.0));
        _2458 = (_2683 * _2674) + _1895;
        _2460 = (_2683 * _2676) + _1897;
        _2462 = (_2683 * _2678) + _1899;
        _2464 = ((_2668 * _677) * _2683) + _2240;
        _2466 = ((_2670 * _678) * _2683) + _2242;
        _2468 = ((_2672 * _679) * _2683) + _2244;
    }
    else
    {
        _2458 = _1895;
        _2460 = _1897;
        _2462 = _1899;
        _2464 = _2240;
        _2466 = _2242;
        _2468 = _2244;
    }
    float _4401 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4412 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4423 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4434 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _2486 = ((isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2458 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _691))) + ((_2464 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1530)) * cbPerFrame._m0[3u].x);
    float _2487 = ((isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2460 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _691))) + ((_2466 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1530)) * cbPerFrame._m0[3u].x);
    float _2488 = ((isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2462 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _691))) + ((_2468 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1530)) * cbPerFrame._m0[3u].x);
    float _2493 = cbInstanceData._m0[_582 + 6u].w * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)));
    float _2498 = _475 / cbSceneParam._m0[86u].x;
    float _2499 = _476 / cbSceneParam._m0[86u].y;
    vec4 _2513 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, (log2((isnan(cbSceneParam._m0[77u].w) ? _396 : (isnan(_396) ? cbSceneParam._m0[77u].w : min(_396, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2515 = _2513.x;
    float _2516 = _2513.y;
    float _2517 = _2513.z;
    float _2518 = _2513.w;
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    if (_396 > cbSceneParam._m0[78u].w)
    {
        float _2573 = isnan(_396) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _396 : min(cbSceneParam._m0[80u].w, _396));
        float _2574 = _2573 / _396;
        float _2585 = _2574 * _447;
        float _2586 = _448 * _2574;
        float _2587 = (-0.0) - _2586;
        float _2588 = _2574 * _449;
        float _2590 = (cbSceneParam._m0[77u].w * _2587) / _2573;
        float _2591 = _2590 + cbSceneParam._m0[79u].w;
        float _2592 = cbSceneParam._m0[79u].w - _2586;
        float _2598 = sqrt(((_2585 * _2585) + (_2586 * _2586)) + (_2588 * _2588));
        float _2601 = (1.0 - (cbSceneParam._m0[77u].w / _2573)) * _2598;
        float _2606 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2608 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2785;
        if (abs((_2587 - _2590) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2785 = ((((_2591 > 0.0) ? exp2(_2606 * _2591) : (2.0 - exp2(_2608 * _2591))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2601;
        }
        else
        {
            float _2729 = 1.0 / cbSceneParam._m0[80u].x;
            float _2730 = isnan(_2592) ? _2591 : (isnan(_2591) ? _2592 : max(_2591, _2592));
            float _2731 = isnan(_2592) ? _2591 : (isnan(_2591) ? _2592 : min(_2591, _2592));
            float _2740 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : min(_2730, 0.0));
            float _2741 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : min(_2731, 0.0));
            _2785 = ((abs(_2598 / _2587) * cbSceneParam._m0[80u].y) * ((((_2740 - _2741) * 2.0) - ((exp2(_2606 * (isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0)))) - exp2(_2606 * (isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0))))) * _2729)) - ((exp2(_2608 * _2740) - exp2(_2608 * _2741)) * _2729))) + (_2601 * cbSceneParam._m0[80u].z);
        }
        vec4 _2787 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, 1.0), 0.0);
        float _2796 = exp2((_2785 * (-1.44269502162933349609375)) * (1.0 - _2787.w));
        float _2797 = log2(_2796);
        float _2813 = log2(_2518);
        _2610 = (exp2(_2813 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2797 * cbSceneParam._m0[78u].x)) * _2787.x) / cbSceneParam._m0[78u].x)) + _2515;
        _2612 = (exp2(_2813 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2797 * cbSceneParam._m0[78u].y)) * _2787.y) / cbSceneParam._m0[78u].y)) + _2516;
        _2614 = (exp2(_2813 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2797 * cbSceneParam._m0[78u].z)) * _2787.z) / cbSceneParam._m0[78u].z)) + _2517;
        _2616 = _2796 * _2518;
    }
    else
    {
        _2610 = _2515;
        _2612 = _2516;
        _2614 = _2517;
        _2616 = _2518;
    }
    bool _2823;
    vec4 _2626;
    vec4 _2648;
    float _2650;
    float _2654;
    float _2655;
    float _2656;
    float _2657;
    bool _2667;
    for (;;)
    {
        _2626 = cbMatDynParam._m0[0u];
        float _2628 = roundEven(_2626.y);
        bool _2629 = _2628 == 3.0;
        float _2630 = log2(_2616);
        float _2637 = exp2(_2630 * cbSceneParam._m0[78u].x) * _2486;
        float _2638 = exp2(_2630 * cbSceneParam._m0[78u].y) * _2487;
        float _2639 = exp2(_2630 * cbSceneParam._m0[78u].z) * _2488;
        float _2646 = _463 + (-0.5);
        _2648 = cbMtdParam._m0[1u];
        _2650 = _2648.y * _2646;
        float _2653 = (_2628 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2654 = _2653 * (_2629 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2610)));
        _2655 = _2653 * (_2629 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2612)));
        _2656 = _2653 * (_2629 ? _2639 : (_2639 + (cbSceneParam._m0[72u].w * _2614)));
        _2657 = _2646 * 0.999000012874603271484375;
        _2667 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2667)
        {
            if ((cbInstanceData._m0[_582 + 7u].x + _2657) < 0.5)
            {
                _2823 = true;
                break;
            }
        }
        uint _2764 = _584 + uint(_2626.w);
        if ((cbInstanceData._m0[_2764].w < 1.0) && ((cbInstanceData._m0[_2764].w + _2657) < 0.5))
        {
            _2823 = true;
            break;
        }
        if ((_2650 + _248) < _2648.x)
        {
            _2823 = true;
            break;
        }
        _2823 = false;
        break;
    }
    float _3028;
    if (_2823)
    {
        discard_state = true;
        _3028 = 0.0;
    }
    else
    {
        _3028 = _2493;
    }
    SV_Target.x = _2654;
    SV_Target.y = _2655;
    SV_Target.z = _2656;
    SV_Target.w = _3028;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2493;
    discard_exit();
}


