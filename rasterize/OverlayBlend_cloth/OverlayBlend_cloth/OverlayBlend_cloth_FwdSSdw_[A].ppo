#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D OverlayBlend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D OverlayBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D OverlayBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D OverlayBlend_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D OverlayBlend_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1097;
float _3507;
float _3508;
float _3509;
float _3510;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _244 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.w;
    vec4 _262 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _276 = ((_244.x * 4.55000019073486328125) * _262.x) * cbMtdParam._m0[9u].x;
    float _279 = ((_244.y * 4.55000019073486328125) * _262.y) * cbMtdParam._m0[9u].y;
    float _282 = ((_244.z * 4.55000019073486328125) * _262.z) * cbMtdParam._m0[9u].z;
    vec4 _294 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _301 = cbMtdParam._m0[10u].y + _294.x;
    vec4 _313 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _330 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _339 = (_313.z * 2.0) * (cbMtdParam._m0[10u].x + _330.z);
    float _348 = (_330.x * 2.0) + (-1.0);
    float _349 = (_330.y * 2.0) + (-1.0);
    float _350 = dot(vec2(_348, _349), vec2(_348, _349));
    float _3519 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _356 = sqrt(1.0 - (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))));
    float _359 = (cbMtdParam._m0[10u].z * ((_313.x * 2.0) + (-1.0))) + _348;
    float _360 = (cbMtdParam._m0[10u].z * ((_313.y * 2.0) + (-1.0))) + _349;
    float _363 = fma(_356, _228, fma(_360, _220 * TANGENT.x, (_206 * _198) * _359));
    float _366 = fma(_356, _229, fma(_360, _220 * TANGENT.y, (_206 * _199) * _359));
    float _369 = fma(_356, _230, fma(_360, _220 * TANGENT.z, (_206 * _200) * _359));
    float _373 = inversesqrt(dot(vec3(_363, _366, _369), vec3(_363, _366, _369)));
    float _374 = _373 * _363;
    float _375 = _373 * _366;
    float _376 = _373 * _369;
    float _3530 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _377 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _378 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _379 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _380 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _3574 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _381 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _382 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _398 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _449 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _439);
    float _450 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _439);
    float _451 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _439);
    float _455 = inversesqrt(dot(vec3(_449, _450, _451), vec3(_449, _450, _451)));
    float _456 = _449 * _455;
    float _457 = _450 * _455;
    float _458 = _451 * _455;
    vec4 _463 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _465 = _463.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _776 = sqrt(((_449 * _449) + (_450 * _450)) + (_451 * _451));
        float _782 = (cbMatDynParam._m0[5u].x * _776) + cbMatDynParam._m0[5u].y;
        float _3596 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _787 = (cbMatDynParam._m0[5u].z * _776) + cbMatDynParam._m0[5u].w;
        float _3607 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) - _783)) + _783) < ((_465 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _477 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _478 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _480 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _482 = _480.w;
    float _502 = fma(_376, cbSceneParam._m0[5u].z, fma(_375, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _374));
    float _505 = fma(_376, cbSceneParam._m0[6u].z, fma(_375, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _374));
    float _508 = fma(_376, cbSceneParam._m0[7u].z, fma(_375, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _374));
    vec4 _510 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _512 = _510.x;
    float _524 = (((_510.y - _378) + (_510.w * _378)) * cbMtdParam._m0[3u].x) + _378;
    float _542 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_512 * _512)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _551 = (((cbMatDynParam._m0[15u].x - _382) * cbMatDynParam._m0[15u].w) * _542) + _382;
    float _560 = ((_542 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _524)) + _524;
    uint _584 = uint(roundEven(NORMAL.w)) * 13u;
    uint _586 = _584 + 9u;
    uint _587 = _586 + uint(cbMatDynParam._m0[0u].w);
    float _593 = (cbMtdParam._m0[0u].x * _379) * cbInstanceData._m0[_587].x;
    float _594 = (cbMtdParam._m0[0u].y * _380) * cbInstanceData._m0[_587].y;
    float _595 = (cbMtdParam._m0[0u].z * _381) * cbInstanceData._m0[_587].z;
    float _3618 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    vec4 _599 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _604 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _615 = (((_604.x - _551) + (_604.w * _551)) * cbMtdParam._m0[3u].x) + _551;
    float _628 = (cbMtdParam._m0[3u].x * (((_596 * _482) - _596) + _599.x)) + _596;
    float _629 = (cbMtdParam._m0[3u].x * (((_597 * _482) - _597) + _599.y)) + _597;
    float _630 = (cbMtdParam._m0[3u].x * (((_598 * _482) - _598) + _599.z)) + _598;
    vec4 _631 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _644 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_551 * (_379 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_551 * (_380 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_551 * (_381 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _631.z;
    float _648 = _644 * cbMatDynParam._m0[13u].w;
    float _658 = (_648 * (cbMatDynParam._m0[13u].x - _628)) + _628;
    float _659 = (_648 * (cbMatDynParam._m0[13u].y - _629)) + _629;
    float _660 = (_648 * (cbMatDynParam._m0[13u].z - _630)) + _630;
    float _668 = ((_644 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _615)) + _615;
    float _669 = 1.0 - _668;
    float _670 = _669 * _658;
    float _671 = _669 * _659;
    float _672 = _669 * _660;
    float _676 = (_658 + (-0.039999999105930328369140625)) * _668;
    float _677 = (_659 + (-0.039999999105930328369140625)) * _668;
    float _678 = (_660 + (-0.039999999105930328369140625)) * _668;
    float _679 = _676 + 0.039999999105930328369140625;
    float _680 = _677 + 0.039999999105930328369140625;
    float _681 = _678 + 0.039999999105930328369140625;
    vec4 _690 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _477, cbSceneParam._m0[86u].y * _478));
    float _693 = _690.x * TEXCOORD_4;
    float _694 = dot(vec3(_374, _375, _376), vec3(_456, _457, _458));
    float _697 = _694 * 2.0;
    float _701 = (_697 * _374) - _456;
    float _702 = (_697 * _375) - _457;
    float _703 = (_697 * _376) - _458;
    float _707 = abs(dot(vec3(_456, _457, _458), vec3(_374, _375, _376)));
    float _3651 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _709 = sqrt(_560);
    float _722 = exp2((_709 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_709 * 3.0));
    float _728 = (1.0 - _722) * ((_709 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _729 = _722 * _709;
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1096;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _821 = fma(_765, cbModelParam._m0[26u].z, fma(_761, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _757));
        float _825 = fma(_765, cbModelParam._m0[27u].z, fma(_761, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _757));
        float _829 = fma(_765, cbModelParam._m0[28u].z, fma(_761, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _757));
        float _854 = _757 + _374;
        float _855 = _761 + _375;
        float _856 = _765 + _376;
        float _866 = fma(_856, cbModelParam._m0[26u].z, fma(_855, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _854)) - _821;
        float _867 = fma(_856, cbModelParam._m0[27u].z, fma(_855, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _854)) - _825;
        float _868 = fma(_856, cbModelParam._m0[28u].z, fma(_855, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _854)) - _829;
        float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
        float _885 = ((_872 * _866) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_821 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_872 * _867) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_825 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_872 * _868) / cbModelParam._m0[34u].z) + ((((((_829 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        float _924 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_890.x + (-0.5));
        float _926 = _924 * (_890.y + (-0.5));
        float _927 = _924 * (_890.z + (-0.5));
        float _934 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_897.x + (-0.5));
        float _936 = _934 * (_897.y + (-0.5));
        float _937 = _934 * (_897.z + (-0.5));
        float _944 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_904.x + (-0.5));
        float _946 = _944 * (_904.y + (-0.5));
        float _947 = _944 * (_904.z + (-0.5));
        float _954 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_911.x + (-0.5));
        float _956 = _954 * (_911.y + (-0.5));
        float _957 = _954 * (_911.z + (-0.5));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = _925 * 0.5;
        float _962 = _935 * 0.5;
        float _963 = _945 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _978 = (dot(vec3(_374, _375, _376), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _988 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3699 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_990 + 1.0))) + _995) * _958;
        float _1005 = _926 * 0.5;
        float _1006 = _936 * 0.5;
        float _1007 = _946 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_374, _375, _376), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3732 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1032 + 1.0))) + _1037) * _959;
        float _1047 = _927 * 0.5;
        float _1048 = _937 * 0.5;
        float _1049 = _947 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_374, _375, _376), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3765 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1074 + 1.0))) + _1079) * _960;
        _1096 = _927;
        _1098 = _926;
        _1099 = _925;
        _1100 = _937;
        _1101 = _936;
        _1102 = _935;
        _1103 = _947;
        _1104 = _946;
        _1105 = _945;
        _1106 = _960;
        _1107 = _959;
        _1108 = _958;
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
    }
    else
    {
        _1096 = _1097;
        _1098 = _1097;
        _1099 = _1097;
        _1100 = _1097;
        _1101 = _1097;
        _1102 = _1097;
        _1103 = _1097;
        _1104 = _1097;
        _1105 = _1097;
        _1106 = _1097;
        _1107 = _1097;
        _1108 = _1097;
        _1109 = 0.0;
        _1110 = 0.0;
        _1111 = 0.0;
    }
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1140 = fma(_765, cbModelParam._m0[30u].z, fma(_761, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _757));
        float _1144 = fma(_765, cbModelParam._m0[31u].z, fma(_761, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _757));
        float _1148 = fma(_765, cbModelParam._m0[32u].z, fma(_761, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _757));
        float _1171 = _757 + _374;
        float _1172 = _761 + _375;
        float _1173 = _765 + _376;
        float _1183 = fma(_1173, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171)) - _1140;
        float _1184 = fma(_1173, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171)) - _1144;
        float _1185 = fma(_1173, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171)) - _1148;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1140 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1144 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[35u].z) + ((((((_1148 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1239 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1206.x + (-0.5));
        float _1241 = _1239 * (_1206.y + (-0.5));
        float _1242 = _1239 * (_1206.z + (-0.5));
        float _1249 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1213.x + (-0.5));
        float _1251 = _1249 * (_1213.y + (-0.5));
        float _1252 = _1249 * (_1213.z + (-0.5));
        float _1259 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1220.x + (-0.5));
        float _1261 = _1259 * (_1220.y + (-0.5));
        float _1262 = _1259 * (_1220.z + (-0.5));
        float _1269 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1227.x + (-0.5));
        float _1271 = _1269 * (_1227.y + (-0.5));
        float _1272 = _1269 * (_1227.z + (-0.5));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = _1240 * 0.5;
        float _1277 = _1250 * 0.5;
        float _1278 = _1260 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_374, _375, _376), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3828 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1303 + 1.0))) + _1308) * _1273;
        float _1318 = _1241 * 0.5;
        float _1319 = _1251 * 0.5;
        float _1320 = _1261 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_374, _375, _376), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3861 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1345 + 1.0))) + _1350) * _1274;
        float _1360 = _1242 * 0.5;
        float _1361 = _1252 * 0.5;
        float _1362 = _1262 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_374, _375, _376), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _3894 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1387 + 1.0))) + _1392) * _1275;
        _1409 = _1242;
        _1410 = _1241;
        _1411 = _1240;
        _1412 = _1252;
        _1413 = _1251;
        _1414 = _1250;
        _1415 = _1262;
        _1416 = _1261;
        _1417 = _1260;
        _1418 = _1275;
        _1419 = _1274;
        _1420 = _1273;
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1097;
        _1410 = _1097;
        _1411 = _1097;
        _1412 = _1097;
        _1413 = _1097;
        _1414 = _1097;
        _1415 = _1097;
        _1416 = _1097;
        _1417 = _1097;
        _1418 = _1097;
        _1419 = _1097;
        _1420 = _1097;
        _1421 = 0.0;
        _1422 = 0.0;
        _1423 = 0.0;
    }
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1109)) + _1109;
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1110)) + _1110;
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1111)) + _1111;
    float _1456 = fma(_1435, cbSceneParam._m0[89u].z, fma(_1434, cbSceneParam._m0[89u].y, _1433 * cbSceneParam._m0[89u].x));
    float _1459 = fma(_1435, cbSceneParam._m0[90u].z, fma(_1434, cbSceneParam._m0[90u].y, _1433 * cbSceneParam._m0[90u].x));
    float _1462 = fma(_1435, cbSceneParam._m0[91u].z, fma(_1434, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1433));
    float _1477 = _701 * 0.5;
    float _1478 = _702 * 0.5;
    float _1479 = _703 * 0.5;
    float _1480 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1483 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1486 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1517;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1493 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1096, _1100, _1103, _1106));
        float _1497 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1501 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1508 = dot(vec4(cbModelParam._m0[39u]), vec4(_1477, _1478, _1479, 1.0));
        _1517 = dot(vec3(isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1508) ? 0.0 : (isnan(0.0) ? _1508 : max(0.0, _1508))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1517 = 1.0;
    }
    float _1528;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1519 = dot(vec4(cbModelParam._m0[40u]), vec4(_1477, _1478, _1479, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1519) ? 0.0 : (isnan(0.0) ? _1519 : max(0.0, _1519))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1532 = (_1528 * cbModelParam._m0[1u].x) + (_1517 * (1.0 - cbModelParam._m0[1u].x));
    float _1542 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _560);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1542 : min(cbModelParam._m0[25u].z, _1542));
    float _1623;
    float _1625;
    float _1627;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1590 = fma(_765, cbModelParam._m0[13u].z, fma(_761, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _757)) + cbModelParam._m0[13u].w;
        float _1594 = fma(_765, cbModelParam._m0[14u].z, fma(_761, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _757)) + cbModelParam._m0[14u].w;
        float _1598 = fma(_765, cbModelParam._m0[15u].z, fma(_761, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _757)) + cbModelParam._m0[15u].w;
        float _1601 = fma(_703, cbModelParam._m0[13u].z, fma(_702, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _701));
        float _1604 = fma(_703, cbModelParam._m0[14u].z, fma(_702, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _701));
        float _1607 = fma(_703, cbModelParam._m0[15u].z, fma(_702, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _701));
        float _1635;
        if (_1601 > 0.0)
        {
            _1635 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1635 = frontier_phi_19_17_ladder;
        }
        float _1863;
        if (_1604 > 0.0)
        {
            _1863 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1863 = frontier_phi_28_24_ladder;
        }
        float _2120;
        if (_1607 > 0.0)
        {
            _2120 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2120 = frontier_phi_40_35_ladder;
        }
        float _2122 = isnan(_1863) ? _1635 : (isnan(_1635) ? _1863 : min(_1635, _1863));
        float _2123 = isnan(_2120) ? _2122 : (isnan(_2122) ? _2120 : min(_2122, _2120));
        float _2127 = (_2123 * _1601) + _1590;
        float _2128 = (_2123 * _1604) + _1594;
        float _2129 = (_2123 * _1607) + _1598;
        float _2130 = _2123 * 9.9999997473787516355514526367188e-05;
        float _2132 = (-1.0) - _2130;
        float _2134 = _2130 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2129 > _2134) || ((_2129 < _2132) || ((_2128 > _2134) || ((_2128 < _2132) || ((_2127 < _2132) || (_2127 > _2134))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2257 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2129, cbModelParam._m0[9u].z, fma(_2128, cbModelParam._m0[9u].y, _2127 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2129, cbModelParam._m0[10u].z, fma(_2128, cbModelParam._m0[10u].y, _2127 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2129, cbModelParam._m0[11u].z, fma(_2128, cbModelParam._m0[11u].y, _2127 * cbModelParam._m0[11u].x))), _1543);
            frontier_phi_18_40_ladder = _2257.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2257.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2257.x * cbModelParam._m0[1u].y;
        }
        _1623 = frontier_phi_18_40_ladder_2;
        _1625 = frontier_phi_18_40_ladder_1;
        _1627 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_701, _702, _703), _1543);
        _1623 = _1611.x * cbModelParam._m0[1u].y;
        _1625 = _1611.y * cbModelParam._m0[1u].y;
        _1627 = _1611.z * cbModelParam._m0[1u].y;
    }
    float _1631 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _560);
    float _1632 = isnan(_1631) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1631 : min(cbModelParam._m0[25u].w, _1631));
    float _1725;
    float _1727;
    float _1729;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1689 = fma(_765, cbModelParam._m0[21u].z, fma(_761, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _757)) + cbModelParam._m0[21u].w;
        float _1693 = fma(_765, cbModelParam._m0[22u].z, fma(_761, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _757)) + cbModelParam._m0[22u].w;
        float _1697 = fma(_765, cbModelParam._m0[23u].z, fma(_761, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _757)) + cbModelParam._m0[23u].w;
        float _1700 = fma(_703, cbModelParam._m0[21u].z, fma(_702, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _701));
        float _1703 = fma(_703, cbModelParam._m0[22u].z, fma(_702, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _701));
        float _1706 = fma(_703, cbModelParam._m0[23u].z, fma(_702, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _701));
        float _1868;
        if (_1700 > 0.0)
        {
            _1868 = abs((1.0 - _1689) / _1700);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1689 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1868 = frontier_phi_30_26_ladder;
        }
        float _2147;
        if (_1703 > 0.0)
        {
            _2147 = abs((1.0 - _1693) / _1703);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1693 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2147 = frontier_phi_42_37_ladder;
        }
        float _2360;
        if (_1706 > 0.0)
        {
            _2360 = abs((1.0 - _1697) / _1706);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1697 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2360 = frontier_phi_51_48_ladder;
        }
        float _2362 = isnan(_2147) ? _1868 : (isnan(_1868) ? _2147 : min(_1868, _2147));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1700) + _1689;
        float _2368 = (_2363 * _1703) + _1693;
        float _2369 = (_2363 * _1706) + _1697;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2371 = (-1.0) - _2370;
        float _2373 = _2370 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2369 > _2373) || ((_2369 < _2371) || ((_2368 > _2373) || ((_2368 < _2371) || ((_2367 < _2371) || (_2367 > _2373))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2369, cbModelParam._m0[17u].z, fma(_2368, cbModelParam._m0[17u].y, _2367 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2369, cbModelParam._m0[18u].z, fma(_2368, cbModelParam._m0[18u].y, _2367 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2369, cbModelParam._m0[19u].z, fma(_2368, cbModelParam._m0[19u].y, _2367 * cbModelParam._m0[19u].x))), _1632);
            frontier_phi_27_51_ladder = _2569.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2569.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2569.x * cbModelParam._m0[1u].z;
        }
        _1725 = frontier_phi_27_51_ladder_2;
        _1727 = frontier_phi_27_51_ladder_1;
        _1729 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_701, _702, _703), _1632);
        _1725 = _1709.x * cbModelParam._m0[1u].z;
        _1727 = _1709.y * cbModelParam._m0[1u].z;
        _1729 = _1709.z * cbModelParam._m0[1u].z;
    }
    float _1742 = (((_728 * _679) + _729) * _693) * ((cbModelParam._m0[1u].w * (_1725 - _1623)) + _1623);
    float _1744 = (((_728 * _680) + _729) * _693) * ((cbModelParam._m0[1u].w * (_1727 - _1625)) + _1625);
    float _1746 = (((_728 * _681) + _729) * _693) * ((cbModelParam._m0[1u].w * (_1729 - _1627)) + _1627);
    float _1749 = fma(_1746, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1752 = fma(_1746, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1755 = fma(_1746, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, _1742 * cbSceneParam._m0[91u].x));
    vec4 _1763 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_477, _478));
    float _1765 = _1763.w;
    float _1777 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1765);
    float _1778 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1765);
    float _1779 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1765);
    uvec4 _1783 = floatBitsToUint(cbInstanceData._m0[_584 + 5u]);
    uint _1785 = _1783.x * 14u;
    uint _1786 = _1785 + 13u;
    float _1793 = _693 + (-1.0);
    float _1798 = (cbLight._m0[_1786].x * _1793) + 1.0;
    float _1799 = (cbLight._m0[_1786].y * _1793) + 1.0;
    float _1800 = (cbLight._m0[_1786].z * _1793) + 1.0;
    float _1801 = (cbLight._m0[_1786].w * _1793) + 1.0;
    uint _1802 = _1785 + 5u;
    float _1808 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1812 = _1785 + 4u;
    float _1821 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1825 = _1785 | 1u;
    float _1836 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_374, _375, _376));
    float _1839 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_374, _375, _376));
    float _4030 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _4041 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1844 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.3183098733425140380859375;
    float _1846 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.3183098733425140380859375;
    float _1853 = ((cbLight._m0[_1802].x * _1808) * _1846) + (((cbLight._m0[_1812].x * _1777) * _1821) * _1844);
    float _1854 = ((_1808 * cbLight._m0[_1802].y) * _1846) + (((cbLight._m0[_1812].y * _1778) * _1821) * _1844);
    float _1855 = ((_1808 * cbLight._m0[_1802].z) * _1846) + (((cbLight._m0[_1812].z * _1779) * _1821) * _1844);
    uvec4 _1860 = floatBitsToUint(cbLight._m0[_1785 + 12u]);
    bool _1862 = _1860.x == 0u;
    float _1873;
    float _1875;
    float _1877;
    if (_1862)
    {
        _1873 = _1853;
        _1875 = _1854;
        _1877 = _1855;
    }
    else
    {
        uint _1881 = _1785 + 6u;
        float _1897 = (dot(vec3(cbLight._m0[_1785 + 2u].xyz), vec3(_374, _375, _376)) * 0.5) + 0.5;
        float _1898 = _1897 * _1897;
        float _4052 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1900 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _1873 = (((cbLight._m0[_1881].x * 0.3183098733425140380859375) * _1899) * _1900) + _1853;
        _1875 = (((cbLight._m0[_1881].y * 0.3183098733425140380859375) * _1899) * _1900) + _1854;
        _1877 = (((cbLight._m0[_1881].z * 0.3183098733425140380859375) * _1899) * _1900) + _1855;
    }
    bool _1880 = _1860.y == 0u;
    float _1918;
    float _1920;
    float _1922;
    if (_1880)
    {
        _1918 = _1873;
        _1920 = _1875;
        _1922 = _1877;
    }
    else
    {
        uint _2091 = _1785 + 7u;
        float _2107 = (dot(vec3(cbLight._m0[_1785 + 3u].xyz), vec3(_374, _375, _376)) * 0.5) + 0.5;
        float _2108 = _2107 * _2107;
        float _4068 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2109 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2110 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1918 = (((cbLight._m0[_2091].x * 0.3183098733425140380859375) * _2109) * _2110) + _1873;
        _1920 = (((cbLight._m0[_2091].y * 0.3183098733425140380859375) * _2109) * _2110) + _1875;
        _1922 = (((cbLight._m0[_2091].z * 0.3183098733425140380859375) * _2109) * _2110) + _1877;
    }
    uint _1925 = _1785 + 8u;
    float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _560) * 0.949999988079071044921875);
    float _1939 = _1938 * _1938;
    float _1940 = cbLight._m0[_1785].x + _456;
    float _1941 = cbLight._m0[_1785].y + _457;
    float _1942 = cbLight._m0[_1785].z + _458;
    float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
    float _1947 = _1946 * _1940;
    float _1948 = _1946 * _1941;
    float _1949 = _1946 * _1942;
    float _1950 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_1785].xyz));
    float _4084 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _1954 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _1955 = dot(vec3(_374, _375, _376), vec3(_1947, _1948, _1949));
    float _4106 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _1959 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_1947, _1948, _1949));
    float _4117 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1963 = _1939 * _1939;
    float _1967 = ((_1958 * _1958) * (_1963 + (-1.0))) + 1.0;
    float _1975 = exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0);
    float _1976 = 0.959999978542327880859375 - _676;
    float _1978 = 0.959999978542327880859375 - _677;
    float _1979 = 0.959999978542327880859375 - _678;
    float _1986 = 1.0 - _1939;
    float _1997 = (0.5 / (((_1954 * ((_1953 * _1986) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1954 * _1986) + _1939) * _1953))) * _1953;
    float _4128 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _1999 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1963 / ((_1967 * _1967) * 3.141590118408203125));
    uint _2013 = _1785 + 9u;
    float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1825].w)) * _560) * 0.949999988079071044921875);
    float _2025 = _2024 * _2024;
    float _2026 = cbLight._m0[_1825].x + _456;
    float _2027 = cbLight._m0[_1825].y + _457;
    float _2028 = cbLight._m0[_1825].z + _458;
    float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
    float _2033 = _2032 * _2026;
    float _2034 = _2032 * _2027;
    float _2035 = _2032 * _2028;
    float _2036 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_1825].xyz));
    float _4139 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2040 = dot(vec3(_374, _375, _376), vec3(_2033, _2034, _2035));
    float _4150 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2044 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_2033, _2034, _2035));
    float _4161 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2048 = _2025 * _2025;
    float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
    float _2059 = exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0);
    float _2066 = 1.0 - _2025;
    float _2076 = (0.5 / (((_1954 * ((_2039 * _2066) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_1954 * _2066) + _2025) * _2039))) * _2039;
    float _4172 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2078 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
    float _2088 = (((((_2059 * _1976) + _679) * cbLight._m0[_2013].x) * _2078) * _1808) + ((((cbLight._m0[_1925].x * _1777) * ((_1975 * _1976) + _679)) * _1999) * _1821);
    float _2089 = (((((_2059 * _1978) + _680) * cbLight._m0[_2013].y) * _2078) * _1808) + ((((cbLight._m0[_1925].y * _1778) * ((_1975 * _1978) + _680)) * _1999) * _1821);
    float _2090 = (((((_2059 * _1979) + _681) * cbLight._m0[_2013].z) * _2078) * _1808) + ((((cbLight._m0[_1925].z * _1779) * ((_1975 * _1979) + _681)) * _1999) * _1821);
    float _2152;
    float _2154;
    float _2156;
    if (_1862)
    {
        _2152 = _2088;
        _2154 = _2089;
        _2156 = _2090;
    }
    else
    {
        uint _2158 = _1785 + 2u;
        uint _2162 = _1785 + 10u;
        float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _560) * 0.949999988079071044921875);
        float _2177 = _2176 * _2176;
        float _2178 = cbLight._m0[_2158].x + _456;
        float _2179 = cbLight._m0[_2158].y + _457;
        float _2180 = cbLight._m0[_2158].z + _458;
        float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
        float _2185 = _2184 * _2178;
        float _2186 = _2184 * _2179;
        float _2187 = _2184 * _2180;
        float _2188 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_2158].xyz));
        float _4183 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2192 = dot(vec3(_374, _375, _376), vec3(_2185, _2186, _2187));
        float _4194 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2196 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2185, _2186, _2187));
        float _4205 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2200 = _2177 * _2177;
        float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
        float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * 5.0);
        float _2218 = 1.0 - _2177;
        float _2228 = (0.5 / (((_1954 * ((_2191 * _2218) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_1954 * _2218) + _2177) * _2191))) * _2191;
        float _4216 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2230 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
        float _2231 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _2152 = (((((_2211 * _1976) + _679) * cbLight._m0[_2162].x) * _2230) * _2231) + _2088;
        _2154 = (((((_2211 * _1978) + _680) * cbLight._m0[_2162].y) * _2230) * _2231) + _2089;
        _2156 = (((((_2211 * _1979) + _681) * cbLight._m0[_2162].z) * _2230) * _2231) + _2090;
    }
    float _2266;
    float _2268;
    float _2270;
    if (_1880)
    {
        _2266 = _2152;
        _2268 = _2154;
        _2270 = _2156;
    }
    else
    {
        uint _2277 = _1785 + 3u;
        uint _2281 = _1785 + 11u;
        float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _560) * 0.949999988079071044921875);
        float _2296 = _2295 * _2295;
        float _2297 = cbLight._m0[_2277].x + _456;
        float _2298 = cbLight._m0[_2277].y + _457;
        float _2299 = cbLight._m0[_2277].z + _458;
        float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
        float _2304 = _2303 * _2297;
        float _2305 = _2303 * _2298;
        float _2306 = _2303 * _2299;
        float _2307 = dot(vec3(_374, _375, _376), vec3(cbLight._m0[_2277].xyz));
        float _4232 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2311 = dot(vec3(_374, _375, _376), vec3(_2304, _2305, _2306));
        float _4243 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2315 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2304, _2305, _2306));
        float _4254 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2319 = _2296 * _2296;
        float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
        float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0);
        float _2337 = 1.0 - _2296;
        float _2347 = (0.5 / (((_1954 * ((_2310 * _2337) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_1954 * _2337) + _2296) * _2310))) * _2310;
        float _4265 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2349 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
        float _2350 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2266 = (((((_2330 * _1976) + _679) * cbLight._m0[_2281].x) * _2349) * _2350) + _2152;
        _2268 = (((((_2330 * _1978) + _680) * cbLight._m0[_2281].y) * _2349) * _2350) + _2154;
        _2270 = (((((_2330 * _1979) + _681) * cbLight._m0[_2281].z) * _2349) * _2350) + _2156;
    }
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    if (_1783.y == 0u)
    {
        float _2425 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2426 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2425;
        float _2427 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2425;
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2425;
        uvec4 _2440 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2441 = _2440.x;
        uint _2452 = uint((float(_2440.y) * floor(float(uint(cbSceneParam._m0[85u].y * _478) / _2441))) + floor(float(uint(cbSceneParam._m0[85u].x * _477) / _2441)));
        float _2462 = (log2(_2428 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2463 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        uint _2466 = uint(isnan(14.0) ? _2463 : (isnan(_2463) ? 14.0 : min(_2463, 14.0)));
        uvec4 _2471 = texelFetch(g_lightClusterGridBuffer, int(((_2466 << 2u) + (_2452 << 6u)) >> 2u));
        uint _2472 = _2471.x;
        uint _2473 = _2440.z;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        if (((((1u << ((_2473 >> 4u) & 15u)) + 4294967295u) & _2472) == 0u) || ((_2473 & 240u) == 0u))
        {
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
        }
        else
        {
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            uint _2732 = 0u;
            uint _2741;
            bool _2742;
            for (;;)
            {
                _2741 = texelFetch(g_lightClassification, int((((_2466 << 5u) + (_2452 << 9u)) + (_2732 << 2u)) >> 2u)).x;
                _2742 = _2741 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2742)
                {
                    frontier_phi_68_pred = _2728;
                    frontier_phi_68_pred_1 = _2731;
                    frontier_phi_68_pred_2 = _2730;
                    frontier_phi_68_pred_3 = _2729;
                    frontier_phi_68_pred_4 = _2727;
                    frontier_phi_68_pred_5 = _2726;
                }
                else
                {
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    uint _2877;
                    _2871 = _2726;
                    _2872 = _2727;
                    _2873 = _2728;
                    _2874 = _2729;
                    _2875 = _2730;
                    _2876 = _2731;
                    _2877 = _2741;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    for (;;)
                    {
                        uint _2881 = uint(findLSB(_2877)) + (_2732 << 5u);
                        uint _2878 = (_2877 + 4294967295u) & _2877;
                        uint _2883 = _2881 * 48u;
                        vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 3u)).x));
                        uint _2903 = (_2881 * 48u) + 4u;
                        vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 3u)).x));
                        uint _2922 = (_2881 * 48u) + 8u;
                        vec3 _2933 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x));
                        float _2937 = _2897.x - _2426;
                        float _2938 = _2897.y - _2427;
                        float _2939 = _2897.z - _2428;
                        float _2940 = dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939));
                        float _2943 = inversesqrt(_2940);
                        float _2944 = _2943 * _2937;
                        float _2945 = _2943 * _2938;
                        float _2946 = _2943 * _2939;
                        float _2947 = dot(vec3(_502, _505, _508), vec3(_2944, _2945, _2946));
                        float _2952 = 1.0 - (_2940 * _2897.w);
                        float _4291 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2953 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _2954 = sqrt(_2940) * _2916.w;
                        float _2957 = 1.39999997615814208984375 / (_2954 + 1.39999997615814208984375);
                        float _2958 = _2957 * _2957;
                        float _2961 = ((1.0 - _2958) * _2947) + _2958;
                        float _2964 = _2954 * _2954;
                        float _2968 = ((isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))) * _2953) / ((_2964 * 0.699999988079071044921875) + 1.0);
                        float _2972 = (-0.0) - _2426;
                        float _2973 = (-0.0) - _2427;
                        float _2974 = (-0.0) - _2428;
                        float _2978 = inversesqrt(dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974)));
                        float _2979 = _2978 * _2972;
                        float _2980 = _2978 * _2973;
                        float _2981 = _2978 * _2974;
                        float _2989 = exp2(log2(1.0 / ((_2964 * 3.5) + 5.0)) * 0.25);
                        float _2990 = 1.0 - _709;
                        float _2997 = sqrt(1.0 - ((1.0 - (_2990 * _2990)) * (1.0 - (_2989 * _2989))));
                        float _2998 = _2997 * _2997;
                        float _2999 = _2998 * _2998;
                        float _3000 = _2979 + _2944;
                        float _3001 = _2980 + _2945;
                        float _3002 = _2981 + _2946;
                        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                        float _3010 = dot(vec3(_502, _505, _508), vec3(_2979, _2980, _2981));
                        float _4307 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3013 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _3014 = dot(vec3(_502, _505, _508), vec3(_3006 * _3000, _3006 * _3001, _3006 * _3002));
                        float _4318 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3017 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3021 = ((_3017 * _3017) * (_2999 + (-1.0))) + 1.0;
                        float _3022 = _2957 * _2998;
                        float _3023 = _3022 * _3022;
                        float _3026 = ((1.0 - _3023) * _2947) + _3023;
                        float _4329 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3027 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3028 = 1.0 - _2998;
                        float _3038 = (0.5 / (((_3027 * ((_3013 * _3028) + _2998)) + 9.9999999392252902907785028219223e-09) + (((_3027 * _3028) + _2998) * _3013))) * _3027;
                        float _4340 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3049 = (((_2999 * 3.1415927410125732421875) * (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) / ((_3021 * _3021) * ((_2964 * 2.1991131305694580078125) + 3.141590118408203125))) * _2953;
                        _2801 = (_2968 * _2916.x) + _2874;
                        _2802 = (_2968 * _2916.y) + _2875;
                        _2803 = (_2968 * _2916.z) + _2876;
                        _2798 = (_3049 * _2933.x) + _2871;
                        _2799 = (_3049 * _2933.y) + _2872;
                        _2800 = (_3049 * _2933.z) + _2873;
                        if (_2878 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2871 = _2798;
                            _2872 = _2799;
                            _2873 = _2800;
                            _2874 = _2801;
                            _2875 = _2802;
                            _2876 = _2803;
                            _2877 = _2878;
                        }
                    }
                    frontier_phi_68_pred = _2800;
                    frontier_phi_68_pred_1 = _2803;
                    frontier_phi_68_pred_2 = _2802;
                    frontier_phi_68_pred_3 = _2801;
                    frontier_phi_68_pred_4 = _2799;
                    frontier_phi_68_pred_5 = _2798;
                }
                _2579 = frontier_phi_68_pred;
                _2585 = frontier_phi_68_pred_1;
                _2583 = frontier_phi_68_pred_2;
                _2581 = frontier_phi_68_pred_3;
                _2577 = frontier_phi_68_pred_4;
                _2575 = frontier_phi_68_pred_5;
                uint _2733 = _2732 + 1u;
                if (_2733 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2726 = _2575;
                    _2727 = _2577;
                    _2728 = _2579;
                    _2729 = _2581;
                    _2730 = _2583;
                    _2731 = _2585;
                    _2732 = _2733;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
        }
        uvec4 _2588 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2589 = _2588.z;
        uint _2591 = (_2589 >> 8u) & 15u;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        if (((4294967295u << _2591) & _2472) == 0u)
        {
            _2694 = _2574;
            _2696 = _2576;
            _2698 = _2578;
            _2700 = _2580;
            _2702 = _2582;
            _2704 = _2584;
        }
        else
        {
            float _2719 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
            float _2720 = _2719 * _2426;
            float _2721 = _2719 * _2427;
            float _2722 = _2719 * _2428;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2591 < ((_2589 >> 12u) & 15u))
            {
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2703;
                float _2705;
                float _2854 = _2574;
                float _2855 = _2576;
                float _2856 = _2578;
                float _2857 = _2580;
                float _2858 = _2582;
                float _2859 = _2584;
                uint _2860 = _2591;
                uint _2869;
                bool _2870;
                for (;;)
                {
                    _2869 = texelFetch(g_lightClassification, int((((_2466 << 5u) + (_2452 << 9u)) + (_2860 << 2u)) >> 2u)).x;
                    _2870 = _2869 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2870)
                    {
                        frontier_phi_79_pred = _2859;
                        frontier_phi_79_pred_1 = _2858;
                        frontier_phi_79_pred_2 = _2857;
                        frontier_phi_79_pred_3 = _2856;
                        frontier_phi_79_pred_4 = _2855;
                        frontier_phi_79_pred_5 = _2854;
                    }
                    else
                    {
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3076 = _2854;
                        float _3077 = _2855;
                        float _3078 = _2856;
                        float _3079 = _2857;
                        float _3080 = _2858;
                        float _3081 = _2859;
                        uint _3082 = _2869;
                        uint _3083;
                        vec4 _3108;
                        float _3109;
                        vec4 _3124;
                        vec3 _3136;
                        vec4 _3151;
                        vec4 _3167;
                        float _3214;
                        bool _3215;
                        for (;;)
                        {
                            uint _3093 = ((_2860 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3082));
                            _3083 = (_3082 + 4294967295u) & _3082;
                            uint _3095 = _3093 * 40u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            _3109 = _3108.w;
                            uint _3111 = (_3093 * 40u) + 4u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3126 = (_3093 * 40u) + 8u;
                            _3136 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x));
                            uint _3138 = (_3093 * 40u) + 16u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3154 = (_3093 * 40u) + 20u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3170 = (_3093 * 40u) + 24u;
                            vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3189 = (_3093 * 40u) + 28u;
                            vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            _3214 = fma(_2428, _3202.z, fma(_2427, _3202.y, _3202.x * _2426)) + _3202.w;
                            _3215 = !((fma(_2428, _3183.z, fma(_2427, _3183.y, _3183.x * _2426)) + _3183.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3215)
                            {
                                float _3242 = _3108.x - _2426;
                                float _3243 = _3108.y - _2427;
                                float _3244 = _3108.z - _2428;
                                float _3245 = dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244));
                                float _3248 = inversesqrt(_3245);
                                float _3249 = _3248 * _3242;
                                float _3250 = _3248 * _3243;
                                float _3251 = _3248 * _3244;
                                float _3255 = 1.0 - (_3245 / (_3109 * _3109));
                                float _4351 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3260 = sqrt(_3245) * _3124.w;
                                float _3262 = 1.39999997615814208984375 / (_3260 + 1.39999997615814208984375);
                                float _3263 = _3262 * _3262;
                                float _3266 = ((1.0 - _3263) * dot(vec3(_3249, _3250, _3251), vec3(_502, _505, _508))) + _3263;
                                float _3269 = _3260 * _3260;
                                float _3273 = (fma(_2428, _3151.z, fma(_2427, _3151.y, _3151.x * _2426)) + _3151.w) / _3214;
                                float _3274 = (fma(_2428, _3167.z, fma(_2427, _3167.y, _3167.x * _2426)) + _3167.w) / _3214;
                                float _3278 = 1.0 - dot(vec2(_3273, _3274), vec2(_3273, _3274));
                                float _4367 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3280 = _3279 * (((isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))) * _3256) / ((_3269 * 0.699999988079071044921875) + 1.0));
                                float _3292 = exp2(log2(1.0 / ((_3269 * 3.5) + 5.0)) * 0.25);
                                float _3293 = 1.0 - _709;
                                float _3300 = sqrt(1.0 - ((1.0 - (_3293 * _3293)) * (1.0 - (_3292 * _3292))));
                                float _3301 = _3300 * _3300;
                                float _3302 = _3301 * _3301;
                                float _3303 = _3249 - _2720;
                                float _3304 = _3250 - _2721;
                                float _3305 = _3251 - _2722;
                                float _3309 = inversesqrt(dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305)));
                                float _3313 = dot(vec3(_502, _505, _508), vec3((-0.0) - _2720, (-0.0) - _2721, (-0.0) - _2722));
                                float _4378 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3316 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3317 = dot(vec3(_502, _505, _508), vec3(_3309 * _3303, _3309 * _3304, _3309 * _3305));
                                float _4389 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3320 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3324 = ((_3320 * _3320) * (_3302 + (-1.0))) + 1.0;
                                float _3325 = _3262 * _3301;
                                float _3326 = _3325 * _3325;
                                float _3332 = ((1.0 - _3326) * dot(vec3(_502, _505, _508), vec3(_3249, _3250, _3251))) + _3326;
                                float _4400 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3334 = 1.0 - _3301;
                                float _3344 = (0.5 / (((_3333 * ((_3316 * _3334) + _3301)) + 9.9999999392252902907785028219223e-09) + (((_3333 * _3334) + _3301) * _3316))) * _3333;
                                float _4411 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3354 = (_3279 * _3256) * (((_3302 * 3.1415927410125732421875) * (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) / ((_3324 * _3324) * ((_3269 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3280 * _3124.z;
                                frontier_phi_85_pred_1 = _3280 * _3124.y;
                                frontier_phi_85_pred_2 = _3280 * _3124.x;
                                frontier_phi_85_pred_3 = _3354 * _3136.z;
                                frontier_phi_85_pred_4 = _3354 * _3136.y;
                                frontier_phi_85_pred_5 = _3354 * _3136.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3363 = frontier_phi_85_pred;
                            _3362 = frontier_phi_85_pred_1;
                            _3361 = frontier_phi_85_pred_2;
                            _3360 = frontier_phi_85_pred_3;
                            _3359 = frontier_phi_85_pred_4;
                            _3358 = frontier_phi_85_pred_5;
                            _3066 = _3361 + _3079;
                            _3067 = _3362 + _3080;
                            _3068 = _3363 + _3081;
                            _3063 = _3358 + _3076;
                            _3064 = _3359 + _3077;
                            _3065 = _3360 + _3078;
                            if (_3083 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3083;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3068;
                        frontier_phi_79_pred_1 = _3067;
                        frontier_phi_79_pred_2 = _3066;
                        frontier_phi_79_pred_3 = _3065;
                        frontier_phi_79_pred_4 = _3064;
                        frontier_phi_79_pred_5 = _3063;
                    }
                    _2705 = frontier_phi_79_pred;
                    _2703 = frontier_phi_79_pred_1;
                    _2701 = frontier_phi_79_pred_2;
                    _2699 = frontier_phi_79_pred_3;
                    _2697 = frontier_phi_79_pred_4;
                    _2695 = frontier_phi_79_pred_5;
                    uint _2861 = _2860 + 1u;
                    if (_2861 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2854 = _2695;
                        _2855 = _2697;
                        _2856 = _2699;
                        _2857 = _2701;
                        _2858 = _2703;
                        _2859 = _2705;
                        _2860 = _2861;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2701;
                frontier_phi_60_61_ladder_1 = _2705;
                frontier_phi_60_61_ladder_2 = _2703;
                frontier_phi_60_61_ladder_3 = _2699;
                frontier_phi_60_61_ladder_4 = _2697;
                frontier_phi_60_61_ladder_5 = _2695;
            }
            else
            {
                frontier_phi_60_61_ladder = _2580;
                frontier_phi_60_61_ladder_1 = _2584;
                frontier_phi_60_61_ladder_2 = _2582;
                frontier_phi_60_61_ladder_3 = _2578;
                frontier_phi_60_61_ladder_4 = _2576;
                frontier_phi_60_61_ladder_5 = _2574;
            }
            _2694 = frontier_phi_60_61_ladder_5;
            _2696 = frontier_phi_60_61_ladder_4;
            _2698 = frontier_phi_60_61_ladder_3;
            _2700 = frontier_phi_60_61_ladder;
            _2702 = frontier_phi_60_61_ladder_2;
            _2704 = frontier_phi_60_61_ladder_1;
        }
        float _2709 = isnan(1.0) ? _693 : (isnan(_693) ? 1.0 : min(_693, 1.0));
        _2484 = (_2709 * _2700) + _1918;
        _2486 = (_2709 * _2702) + _1920;
        _2488 = (_2709 * _2704) + _1922;
        _2490 = ((_2694 * _679) * _2709) + _2266;
        _2492 = ((_2696 * _680) * _2709) + _2268;
        _2494 = ((_2698 * _681) * _2709) + _2270;
    }
    else
    {
        _2484 = _1918;
        _2486 = _1920;
        _2488 = _1922;
        _2490 = _2266;
        _2492 = _2268;
        _2494 = _2270;
    }
    float _4427 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4438 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4449 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4460 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _2512 = ((isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2484 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _693))) + ((_2490 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1532)) * cbPerFrame._m0[3u].x);
    float _2513 = ((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2486 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _693))) + ((_2492 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1532)) * cbPerFrame._m0[3u].x);
    float _2514 = ((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2488 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _693))) + ((_2494 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1532)) * cbPerFrame._m0[3u].x);
    float _2519 = cbInstanceData._m0[_584 + 6u].w * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)));
    float _2524 = _477 / cbSceneParam._m0[86u].x;
    float _2525 = _478 / cbSceneParam._m0[86u].y;
    vec4 _2539 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, (log2((isnan(cbSceneParam._m0[77u].w) ? _398 : (isnan(_398) ? cbSceneParam._m0[77u].w : min(_398, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2541 = _2539.x;
    float _2542 = _2539.y;
    float _2543 = _2539.z;
    float _2544 = _2539.w;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    if (_398 > cbSceneParam._m0[78u].w)
    {
        float _2599 = isnan(_398) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _398 : min(cbSceneParam._m0[80u].w, _398));
        float _2600 = _2599 / _398;
        float _2611 = _2600 * _449;
        float _2612 = _450 * _2600;
        float _2613 = (-0.0) - _2612;
        float _2614 = _2600 * _451;
        float _2616 = (cbSceneParam._m0[77u].w * _2613) / _2599;
        float _2617 = _2616 + cbSceneParam._m0[79u].w;
        float _2618 = cbSceneParam._m0[79u].w - _2612;
        float _2624 = sqrt(((_2611 * _2611) + (_2612 * _2612)) + (_2614 * _2614));
        float _2627 = (1.0 - (cbSceneParam._m0[77u].w / _2599)) * _2624;
        float _2632 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2634 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2811;
        if (abs((_2613 - _2616) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2811 = ((((_2617 > 0.0) ? exp2(_2632 * _2617) : (2.0 - exp2(_2634 * _2617))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2627;
        }
        else
        {
            float _2755 = 1.0 / cbSceneParam._m0[80u].x;
            float _2756 = isnan(_2618) ? _2617 : (isnan(_2617) ? _2618 : max(_2617, _2618));
            float _2757 = isnan(_2618) ? _2617 : (isnan(_2617) ? _2618 : min(_2617, _2618));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            float _2767 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : min(_2757, 0.0));
            _2811 = ((abs(_2624 / _2613) * cbSceneParam._m0[80u].y) * ((((_2766 - _2767) * 2.0) - ((exp2(_2632 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0)))) - exp2(_2632 * (isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0))))) * _2755)) - ((exp2(_2634 * _2766) - exp2(_2634 * _2767)) * _2755))) + (_2627 * cbSceneParam._m0[80u].z);
        }
        vec4 _2813 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, 1.0), 0.0);
        float _2822 = exp2((_2811 * (-1.44269502162933349609375)) * (1.0 - _2813.w));
        float _2823 = log2(_2822);
        float _2839 = log2(_2544);
        _2636 = (exp2(_2839 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].x)) * _2813.x) / cbSceneParam._m0[78u].x)) + _2541;
        _2638 = (exp2(_2839 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].y)) * _2813.y) / cbSceneParam._m0[78u].y)) + _2542;
        _2640 = (exp2(_2839 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].z)) * _2813.z) / cbSceneParam._m0[78u].z)) + _2543;
        _2642 = _2822 * _2544;
    }
    else
    {
        _2636 = _2541;
        _2638 = _2542;
        _2640 = _2543;
        _2642 = _2544;
    }
    bool _2849;
    vec4 _2652;
    vec4 _2674;
    float _2676;
    float _2680;
    float _2681;
    float _2682;
    float _2683;
    bool _2693;
    for (;;)
    {
        _2652 = cbMatDynParam._m0[0u];
        float _2654 = roundEven(_2652.y);
        bool _2655 = _2654 == 3.0;
        float _2656 = log2(_2642);
        float _2663 = exp2(_2656 * cbSceneParam._m0[78u].x) * _2512;
        float _2664 = exp2(_2656 * cbSceneParam._m0[78u].y) * _2513;
        float _2665 = exp2(_2656 * cbSceneParam._m0[78u].z) * _2514;
        float _2672 = _465 + (-0.5);
        _2674 = cbMtdParam._m0[1u];
        _2676 = _2674.y * _2672;
        float _2679 = (_2654 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2680 = _2679 * (_2655 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2636)));
        _2681 = _2679 * (_2655 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2638)));
        _2682 = _2679 * (_2655 ? _2665 : (_2665 + (cbSceneParam._m0[72u].w * _2640)));
        _2683 = _2672 * 0.999000012874603271484375;
        _2693 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2693)
        {
            if ((cbInstanceData._m0[_584 + 7u].x + _2683) < 0.5)
            {
                _2849 = true;
                break;
            }
        }
        uint _2790 = _586 + uint(_2652.w);
        if ((cbInstanceData._m0[_2790].w < 1.0) && ((cbInstanceData._m0[_2790].w + _2683) < 0.5))
        {
            _2849 = true;
            break;
        }
        if ((_2676 + _250) < _2674.x)
        {
            _2849 = true;
            break;
        }
        _2849 = false;
        break;
    }
    float _3054;
    if (_2849)
    {
        discard_state = true;
        _3054 = 0.0;
    }
    else
    {
        _3054 = _2519;
    }
    SV_Target.x = _2680;
    SV_Target.y = _2681;
    SV_Target.z = _2682;
    SV_Target.w = _3054;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2519;
    discard_exit();
}


