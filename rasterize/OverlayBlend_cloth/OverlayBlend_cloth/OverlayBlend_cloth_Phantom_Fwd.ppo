#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D OverlayBlend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D OverlayBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D OverlayBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D OverlayBlend_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D OverlayBlend_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1050;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _238 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.w;
    vec4 _256 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _270 = ((_238.x * 4.55000019073486328125) * _256.x) * cbMtdParam._m0[9u].x;
    float _273 = ((_238.y * 4.55000019073486328125) * _256.y) * cbMtdParam._m0[9u].y;
    float _276 = ((_238.z * 4.55000019073486328125) * _256.z) * cbMtdParam._m0[9u].z;
    float _295 = cbMtdParam._m0[10u].y + texture(sampler2D(OverlayBlend_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x;
    vec4 _307 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _324 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _333 = (_307.z * 2.0) * (cbMtdParam._m0[10u].x + _324.z);
    float _342 = (_324.x * 2.0) + (-1.0);
    float _343 = (_324.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_342, _343), vec2(_342, _343));
    float _3465 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))));
    float _353 = (cbMtdParam._m0[10u].z * ((_307.x * 2.0) + (-1.0))) + _342;
    float _354 = (cbMtdParam._m0[10u].z * ((_307.y * 2.0) + (-1.0))) + _343;
    float _357 = fma(_350, _222, fma(_354, _214 * TANGENT.x, (_200 * _192) * _353));
    float _360 = fma(_350, _223, fma(_354, _214 * TANGENT.y, (_200 * _193) * _353));
    float _363 = fma(_350, _224, fma(_354, _214 * TANGENT.z, (_200 * _194) * _353));
    float _367 = inversesqrt(dot(vec3(_357, _360, _363), vec3(_357, _360, _363)));
    float _368 = _367 * _357;
    float _369 = _367 * _360;
    float _370 = _367 * _363;
    float _3476 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _371 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _3487 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _372 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _373 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _3509 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _374 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _375 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _3531 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _376 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _392 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _443 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _433);
    float _444 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _433);
    float _445 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _433);
    float _449 = inversesqrt(dot(vec3(_443, _444, _445), vec3(_443, _444, _445)));
    float _450 = _443 * _449;
    float _451 = _444 * _449;
    float _452 = _445 * _449;
    float _458 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _459 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _461 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _463 = _461.w;
    float _484 = fma(_370, cbSceneParam._m0[5u].z, fma(_369, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _368));
    float _487 = fma(_370, cbSceneParam._m0[6u].z, fma(_369, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _368));
    float _490 = fma(_370, cbSceneParam._m0[7u].z, fma(_369, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _368));
    vec4 _492 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _494 = _492.x;
    float _506 = (((_492.y - _372) + (_492.w * _372)) * cbMtdParam._m0[3u].x) + _372;
    float _524 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_494 * _494)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _533 = (((cbMatDynParam._m0[15u].x - _376) * cbMatDynParam._m0[15u].w) * _524) + _376;
    float _542 = ((_524 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _506)) + _506;
    uint _566 = uint(roundEven(NORMAL.w)) * 13u;
    uint _569 = (_566 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _575 = (cbMtdParam._m0[0u].x * _373) * cbInstanceData._m0[_569].x;
    float _576 = (cbMtdParam._m0[0u].y * _374) * cbInstanceData._m0[_569].y;
    float _577 = (cbMtdParam._m0[0u].z * _375) * cbInstanceData._m0[_569].z;
    float _3542 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _3553 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _579 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    vec4 _581 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _586 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _597 = (((_586.x - _533) + (_586.w * _533)) * cbMtdParam._m0[3u].x) + _533;
    float _610 = (cbMtdParam._m0[3u].x * (((_578 * _463) - _578) + _581.x)) + _578;
    float _611 = (cbMtdParam._m0[3u].x * (((_579 * _463) - _579) + _581.y)) + _579;
    float _612 = (cbMtdParam._m0[3u].x * (((_580 * _463) - _580) + _581.z)) + _580;
    vec4 _613 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _626 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_533 * (_373 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_533 * (_374 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_533 * (_375 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _613.z;
    float _630 = _626 * cbMatDynParam._m0[13u].w;
    float _640 = (_630 * (cbMatDynParam._m0[13u].x - _610)) + _610;
    float _641 = (_630 * (cbMatDynParam._m0[13u].y - _611)) + _611;
    float _642 = (_630 * (cbMatDynParam._m0[13u].z - _612)) + _612;
    float _650 = ((_626 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _597)) + _597;
    float _651 = 1.0 - _650;
    float _658 = (_640 + (-0.039999999105930328369140625)) * _650;
    float _659 = (_641 + (-0.039999999105930328369140625)) * _650;
    float _660 = (_642 + (-0.039999999105930328369140625)) * _650;
    float _661 = _658 + 0.039999999105930328369140625;
    float _662 = _659 + 0.039999999105930328369140625;
    float _663 = _660 + 0.039999999105930328369140625;
    vec4 _672 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _458, cbSceneParam._m0[86u].y * _459));
    float _675 = _672.x * TEXCOORD_4;
    float _676 = dot(vec3(_368, _369, _370), vec3(_450, _451, _452));
    float _679 = _676 * 2.0;
    float _683 = (_679 * _368) - _450;
    float _684 = (_679 * _369) - _451;
    float _685 = (_679 * _370) - _452;
    float _689 = abs(dot(vec3(_450, _451, _452), vec3(_368, _369, _370)));
    float _3575 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _691 = sqrt(_542);
    float _704 = exp2((_691 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_691 * 3.0));
    float _710 = (1.0 - _704) * ((_691 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _711 = _704 * _691;
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1049;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _774 = fma(_747, cbModelParam._m0[26u].z, fma(_743, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739));
        float _778 = fma(_747, cbModelParam._m0[27u].z, fma(_743, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739));
        float _782 = fma(_747, cbModelParam._m0[28u].z, fma(_743, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739));
        float _807 = _739 + _368;
        float _808 = _743 + _369;
        float _809 = _747 + _370;
        float _819 = fma(_809, cbModelParam._m0[26u].z, fma(_808, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807)) - _774;
        float _820 = fma(_809, cbModelParam._m0[27u].z, fma(_808, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807)) - _778;
        float _821 = fma(_809, cbModelParam._m0[28u].z, fma(_808, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807)) - _782;
        float _825 = inversesqrt(dot(vec3(_819, _820, _821), vec3(_819, _820, _821)));
        float _838 = ((_825 * _819) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_774 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_825 * _820) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_778 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_825 * _821) / cbModelParam._m0[34u].z) + ((((((_782 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        float _877 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_843.x + (-0.5));
        float _879 = _877 * (_843.y + (-0.5));
        float _880 = _877 * (_843.z + (-0.5));
        float _887 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_850.x + (-0.5));
        float _889 = _887 * (_850.y + (-0.5));
        float _890 = _887 * (_850.z + (-0.5));
        float _897 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_857.x + (-0.5));
        float _899 = _897 * (_857.y + (-0.5));
        float _900 = _897 * (_857.z + (-0.5));
        float _907 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_864.x + (-0.5));
        float _909 = _907 * (_864.y + (-0.5));
        float _910 = _907 * (_864.z + (-0.5));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = _878 * 0.5;
        float _915 = _888 * 0.5;
        float _916 = _898 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _931 = (dot(vec3(_368, _369, _370), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _941 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3623 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_943 + 1.0))) + _948) * _911;
        float _958 = _879 * 0.5;
        float _959 = _889 * 0.5;
        float _960 = _899 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_368, _369, _370), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3656 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_985 + 1.0))) + _990) * _912;
        float _1000 = _880 * 0.5;
        float _1001 = _890 * 0.5;
        float _1002 = _900 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_368, _369, _370), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3689 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1027 + 1.0))) + _1032) * _913;
        _1049 = _880;
        _1051 = _879;
        _1052 = _878;
        _1053 = _890;
        _1054 = _889;
        _1055 = _888;
        _1056 = _900;
        _1057 = _899;
        _1058 = _898;
        _1059 = _913;
        _1060 = _912;
        _1061 = _911;
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
    }
    else
    {
        _1049 = _1050;
        _1051 = _1050;
        _1052 = _1050;
        _1053 = _1050;
        _1054 = _1050;
        _1055 = _1050;
        _1056 = _1050;
        _1057 = _1050;
        _1058 = _1050;
        _1059 = _1050;
        _1060 = _1050;
        _1061 = _1050;
        _1062 = 0.0;
        _1063 = 0.0;
        _1064 = 0.0;
    }
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1090 = fma(_747, cbModelParam._m0[30u].z, fma(_743, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _739));
        float _1094 = fma(_747, cbModelParam._m0[31u].z, fma(_743, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _739));
        float _1098 = fma(_747, cbModelParam._m0[32u].z, fma(_743, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _739));
        float _1121 = _739 + _368;
        float _1122 = _743 + _369;
        float _1123 = _747 + _370;
        float _1133 = fma(_1123, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121)) - _1090;
        float _1134 = fma(_1123, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121)) - _1094;
        float _1135 = fma(_1123, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121)) - _1098;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1090 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1094 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[35u].z) + ((((((_1098 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1189 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1156.x + (-0.5));
        float _1191 = _1189 * (_1156.y + (-0.5));
        float _1192 = _1189 * (_1156.z + (-0.5));
        float _1199 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1163.x + (-0.5));
        float _1201 = _1199 * (_1163.y + (-0.5));
        float _1202 = _1199 * (_1163.z + (-0.5));
        float _1209 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1170.x + (-0.5));
        float _1211 = _1209 * (_1170.y + (-0.5));
        float _1212 = _1209 * (_1170.z + (-0.5));
        float _1219 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1177.x + (-0.5));
        float _1221 = _1219 * (_1177.y + (-0.5));
        float _1222 = _1219 * (_1177.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_368, _369, _370), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3752 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1253 + 1.0))) + _1258) * _1223;
        float _1268 = _1191 * 0.5;
        float _1269 = _1201 * 0.5;
        float _1270 = _1211 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_368, _369, _370), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3785 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1295 + 1.0))) + _1300) * _1224;
        float _1310 = _1192 * 0.5;
        float _1311 = _1202 * 0.5;
        float _1312 = _1212 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_368, _369, _370), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3818 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1337 + 1.0))) + _1342) * _1225;
        _1359 = _1192;
        _1360 = _1191;
        _1361 = _1190;
        _1362 = _1202;
        _1363 = _1201;
        _1364 = _1200;
        _1365 = _1212;
        _1366 = _1211;
        _1367 = _1210;
        _1368 = _1225;
        _1369 = _1224;
        _1370 = _1223;
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1050;
        _1360 = _1050;
        _1361 = _1050;
        _1362 = _1050;
        _1363 = _1050;
        _1364 = _1050;
        _1365 = _1050;
        _1366 = _1050;
        _1367 = _1050;
        _1368 = _1050;
        _1369 = _1050;
        _1370 = _1050;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1062)) + _1062;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1063)) + _1063;
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1064)) + _1064;
    float _1406 = fma(_1385, cbSceneParam._m0[89u].z, fma(_1384, cbSceneParam._m0[89u].y, _1383 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1385, cbSceneParam._m0[90u].z, fma(_1384, cbSceneParam._m0[90u].y, _1383 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1385, cbSceneParam._m0[91u].z, fma(_1384, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1383));
    float _1427 = _683 * 0.5;
    float _1428 = _684 * 0.5;
    float _1429 = _685 * 0.5;
    float _1430 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1433 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1436 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1467;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1443 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1049, _1053, _1056, _1059));
        float _1447 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1451 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1052, _1055, _1058, _1061));
        float _1458 = dot(vec4(cbModelParam._m0[39u]), vec4(_1427, _1428, _1429, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1478;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1469 = dot(vec4(cbModelParam._m0[40u]), vec4(_1427, _1428, _1429, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1482 = (_1478 * cbModelParam._m0[1u].x) + (_1467 * (1.0 - cbModelParam._m0[1u].x));
    float _1492 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _542);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1492 : min(cbModelParam._m0[25u].z, _1492));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_747, cbModelParam._m0[13u].z, fma(_743, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _739)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_747, cbModelParam._m0[14u].z, fma(_743, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _739)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_747, cbModelParam._m0[15u].z, fma(_743, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _739)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_685, cbModelParam._m0[13u].z, fma(_684, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _683));
        float _1554 = fma(_685, cbModelParam._m0[14u].z, fma(_684, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _683));
        float _1557 = fma(_685, cbModelParam._m0[15u].z, fma(_684, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _683));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1585 = frontier_phi_16_14_ladder;
        }
        float _1792;
        if (_1554 > 0.0)
        {
            _1792 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1792 = frontier_phi_25_21_ladder;
        }
        float _2046;
        if (_1557 > 0.0)
        {
            _2046 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2046 = frontier_phi_37_32_ladder;
        }
        float _2048 = isnan(_1792) ? _1585 : (isnan(_1585) ? _1792 : min(_1585, _1792));
        float _2049 = isnan(_2046) ? _2048 : (isnan(_2048) ? _2046 : min(_2048, _2046));
        float _2053 = (_2049 * _1551) + _1540;
        float _2054 = (_2049 * _1554) + _1544;
        float _2055 = (_2049 * _1557) + _1548;
        float _2056 = _2049 * 9.9999997473787516355514526367188e-05;
        float _2058 = (-1.0) - _2056;
        float _2060 = _2056 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2055 > _2060) || ((_2055 < _2058) || ((_2054 > _2060) || ((_2054 < _2058) || ((_2053 < _2058) || (_2053 > _2060))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2183 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2055, cbModelParam._m0[9u].z, fma(_2054, cbModelParam._m0[9u].y, _2053 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2055, cbModelParam._m0[10u].z, fma(_2054, cbModelParam._m0[10u].y, _2053 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2055, cbModelParam._m0[11u].z, fma(_2054, cbModelParam._m0[11u].y, _2053 * cbModelParam._m0[11u].x))), _1493);
            frontier_phi_15_37_ladder = _2183.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2183.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2183.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_15_37_ladder_2;
        _1575 = frontier_phi_15_37_ladder_1;
        _1577 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_683, _684, _685), _1493);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _542);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1639 = fma(_747, cbModelParam._m0[21u].z, fma(_743, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _739)) + cbModelParam._m0[21u].w;
        float _1643 = fma(_747, cbModelParam._m0[22u].z, fma(_743, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _739)) + cbModelParam._m0[22u].w;
        float _1647 = fma(_747, cbModelParam._m0[23u].z, fma(_743, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _739)) + cbModelParam._m0[23u].w;
        float _1650 = fma(_685, cbModelParam._m0[21u].z, fma(_684, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _683));
        float _1653 = fma(_685, cbModelParam._m0[22u].z, fma(_684, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _683));
        float _1656 = fma(_685, cbModelParam._m0[23u].z, fma(_684, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _683));
        float _1797;
        if (_1650 > 0.0)
        {
            _1797 = abs((1.0 - _1639) / _1650);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1639 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1797 = frontier_phi_27_23_ladder;
        }
        float _2073;
        if (_1653 > 0.0)
        {
            _2073 = abs((1.0 - _1643) / _1653);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1643 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2073 = frontier_phi_39_34_ladder;
        }
        float _2286;
        if (_1656 > 0.0)
        {
            _2286 = abs((1.0 - _1647) / _1656);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1647 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2286 = frontier_phi_48_45_ladder;
        }
        float _2288 = isnan(_2073) ? _1797 : (isnan(_1797) ? _2073 : min(_1797, _2073));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1650) + _1639;
        float _2294 = (_2289 * _1653) + _1643;
        float _2295 = (_2289 * _1656) + _1647;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2296;
        float _2299 = _2296 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2295 > _2299) || ((_2295 < _2297) || ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 < _2297) || (_2293 > _2299))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2579 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2295, cbModelParam._m0[17u].z, fma(_2294, cbModelParam._m0[17u].y, _2293 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2295, cbModelParam._m0[18u].z, fma(_2294, cbModelParam._m0[18u].y, _2293 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2295, cbModelParam._m0[19u].z, fma(_2294, cbModelParam._m0[19u].y, _2293 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_24_48_ladder = _2579.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2579.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2579.x * cbModelParam._m0[1u].z;
        }
        _1675 = frontier_phi_24_48_ladder_2;
        _1677 = frontier_phi_24_48_ladder_1;
        _1679 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_683, _684, _685), _1582);
        _1675 = _1659.x * cbModelParam._m0[1u].z;
        _1677 = _1659.y * cbModelParam._m0[1u].z;
        _1679 = _1659.z * cbModelParam._m0[1u].z;
    }
    float _1692 = (((_710 * _661) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1675 - _1573)) + _1573);
    float _1694 = (((_710 * _662) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1677 - _1575)) + _1575);
    float _1696 = (((_710 * _663) + _711) * _675) * ((cbModelParam._m0[1u].w * (_1679 - _1577)) + _1577);
    float _1699 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, _1692 * cbSceneParam._m0[91u].x));
    uvec4 _1715 = floatBitsToUint(cbInstanceData._m0[_566 + 5u]);
    uint _1717 = _1715.x * 14u;
    uint _1718 = _1717 + 13u;
    float _1725 = _675 + (-1.0);
    float _1730 = (cbLight._m0[_1718].x * _1725) + 1.0;
    float _1731 = (cbLight._m0[_1718].y * _1725) + 1.0;
    float _1732 = (cbLight._m0[_1718].z * _1725) + 1.0;
    float _1733 = (cbLight._m0[_1718].w * _1725) + 1.0;
    uint _1734 = _1717 + 5u;
    float _1740 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1744 = _1717 + 4u;
    float _1750 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
    uint _1754 = _1717 | 1u;
    float _1765 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_368, _369, _370));
    float _1768 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_368, _369, _370));
    float _3954 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _3965 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1773 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * 0.3183098733425140380859375;
    float _1775 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * 0.3183098733425140380859375;
    float _1782 = ((cbLight._m0[_1734].x * _1740) * _1775) + ((cbLight._m0[_1744].x * _1750) * _1773);
    float _1783 = ((_1740 * cbLight._m0[_1734].y) * _1775) + ((_1750 * cbLight._m0[_1744].y) * _1773);
    float _1784 = ((_1740 * cbLight._m0[_1734].z) * _1775) + ((_1750 * cbLight._m0[_1744].z) * _1773);
    uvec4 _1789 = floatBitsToUint(cbLight._m0[_1717 + 12u]);
    bool _1791 = _1789.x == 0u;
    float _1802;
    float _1804;
    float _1806;
    if (_1791)
    {
        _1802 = _1782;
        _1804 = _1783;
        _1806 = _1784;
    }
    else
    {
        uint _1810 = _1717 + 6u;
        float _1826 = (dot(vec3(cbLight._m0[_1717 + 2u].xyz), vec3(_368, _369, _370)) * 0.5) + 0.5;
        float _1827 = _1826 * _1826;
        float _3976 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1829 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _1802 = (((cbLight._m0[_1810].x * 0.3183098733425140380859375) * _1828) * _1829) + _1782;
        _1804 = (((cbLight._m0[_1810].y * 0.3183098733425140380859375) * _1828) * _1829) + _1783;
        _1806 = (((cbLight._m0[_1810].z * 0.3183098733425140380859375) * _1828) * _1829) + _1784;
    }
    bool _1809 = _1789.y == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1809)
    {
        _1847 = _1802;
        _1849 = _1804;
        _1851 = _1806;
    }
    else
    {
        uint _2017 = _1717 + 7u;
        float _2033 = (dot(vec3(cbLight._m0[_1717 + 3u].xyz), vec3(_368, _369, _370)) * 0.5) + 0.5;
        float _2034 = _2033 * _2033;
        float _3992 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2035 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _2036 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _1847 = (((cbLight._m0[_2017].x * 0.3183098733425140380859375) * _2035) * _2036) + _1802;
        _1849 = (((cbLight._m0[_2017].y * 0.3183098733425140380859375) * _2035) * _2036) + _1804;
        _1851 = (((cbLight._m0[_2017].z * 0.3183098733425140380859375) * _2035) * _2036) + _1806;
    }
    uint _1854 = _1717 + 8u;
    float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1717].w)) * _542) * 0.949999988079071044921875);
    float _1868 = _1867 * _1867;
    float _1869 = cbLight._m0[_1717].x + _450;
    float _1870 = cbLight._m0[_1717].y + _451;
    float _1871 = cbLight._m0[_1717].z + _452;
    float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
    float _1876 = _1875 * _1869;
    float _1877 = _1875 * _1870;
    float _1878 = _1875 * _1871;
    float _1879 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1717].xyz));
    float _4008 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _1883 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _1884 = dot(vec3(_368, _369, _370), vec3(_1876, _1877, _1878));
    float _4030 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1888 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_1876, _1877, _1878));
    float _4041 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1892 = _1868 * _1868;
    float _1896 = ((_1887 * _1887) * (_1892 + (-1.0))) + 1.0;
    float _1904 = exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0);
    float _1905 = 0.959999978542327880859375 - _658;
    float _1907 = 0.959999978542327880859375 - _659;
    float _1908 = 0.959999978542327880859375 - _660;
    float _1915 = 1.0 - _1868;
    float _1926 = (0.5 / (((_1883 * ((_1882 * _1915) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _1915) + _1868) * _1882))) * _1882;
    float _4052 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1928 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1892 / ((_1896 * _1896) * 3.141590118408203125));
    uint _1939 = _1717 + 9u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1754].w)) * _542) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1754].x + _450;
    float _1953 = cbLight._m0[_1754].y + _451;
    float _1954 = cbLight._m0[_1754].z + _452;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1754].xyz));
    float _4063 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _1966 = dot(vec3(_368, _369, _370), vec3(_1959, _1960, _1961));
    float _4074 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _1970 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_1959, _1960, _1961));
    float _4085 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1974 = _1951 * _1951;
    float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
    float _1985 = exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0);
    float _1992 = 1.0 - _1951;
    float _2002 = (0.5 / (((_1883 * ((_1965 * _1992) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _1992) + _1951) * _1965))) * _1965;
    float _4096 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
    float _2014 = (((((_1985 * _1905) + _661) * cbLight._m0[_1939].x) * _2004) * _1740) + (((((_1904 * _1905) + _661) * cbLight._m0[_1854].x) * _1928) * _1750);
    float _2015 = (((((_1985 * _1907) + _662) * cbLight._m0[_1939].y) * _2004) * _1740) + (((((_1904 * _1907) + _662) * cbLight._m0[_1854].y) * _1928) * _1750);
    float _2016 = (((((_1985 * _1908) + _663) * cbLight._m0[_1939].z) * _2004) * _1740) + (((((_1904 * _1908) + _663) * cbLight._m0[_1854].z) * _1928) * _1750);
    float _2078;
    float _2080;
    float _2082;
    if (_1791)
    {
        _2078 = _2014;
        _2080 = _2015;
        _2082 = _2016;
    }
    else
    {
        uint _2084 = _1717 + 2u;
        uint _2088 = _1717 + 10u;
        float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _542) * 0.949999988079071044921875);
        float _2103 = _2102 * _2102;
        float _2104 = cbLight._m0[_2084].x + _450;
        float _2105 = cbLight._m0[_2084].y + _451;
        float _2106 = cbLight._m0[_2084].z + _452;
        float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
        float _2111 = _2110 * _2104;
        float _2112 = _2110 * _2105;
        float _2113 = _2110 * _2106;
        float _2114 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_2084].xyz));
        float _4107 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2118 = dot(vec3(_368, _369, _370), vec3(_2111, _2112, _2113));
        float _4118 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2122 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2111, _2112, _2113));
        float _4129 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2126 = _2103 * _2103;
        float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
        float _2137 = exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0);
        float _2144 = 1.0 - _2103;
        float _2154 = (0.5 / (((_1883 * ((_2117 * _2144) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _2144) + _2103) * _2117))) * _2117;
        float _4140 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2156 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
        float _2157 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _2078 = (((((_2137 * _1905) + _661) * cbLight._m0[_2088].x) * _2156) * _2157) + _2014;
        _2080 = (((((_2137 * _1907) + _662) * cbLight._m0[_2088].y) * _2156) * _2157) + _2015;
        _2082 = (((((_2137 * _1908) + _663) * cbLight._m0[_2088].z) * _2156) * _2157) + _2016;
    }
    float _2192;
    float _2194;
    float _2196;
    if (_1809)
    {
        _2192 = _2078;
        _2194 = _2080;
        _2196 = _2082;
    }
    else
    {
        uint _2203 = _1717 + 3u;
        uint _2207 = _1717 + 11u;
        float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _542) * 0.949999988079071044921875);
        float _2222 = _2221 * _2221;
        float _2223 = cbLight._m0[_2203].x + _450;
        float _2224 = cbLight._m0[_2203].y + _451;
        float _2225 = cbLight._m0[_2203].z + _452;
        float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
        float _2230 = _2229 * _2223;
        float _2231 = _2229 * _2224;
        float _2232 = _2229 * _2225;
        float _2233 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_2203].xyz));
        float _4156 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2237 = dot(vec3(_368, _369, _370), vec3(_2230, _2231, _2232));
        float _4167 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2241 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2230, _2231, _2232));
        float _4178 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2245 = _2222 * _2222;
        float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
        float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0);
        float _2263 = 1.0 - _2222;
        float _2273 = (0.5 / (((_1883 * ((_2236 * _2263) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _2263) + _2222) * _2236))) * _2236;
        float _4189 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2275 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
        float _2276 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _2192 = (((((_2256 * _1905) + _661) * cbLight._m0[_2207].x) * _2275) * _2276) + _2078;
        _2194 = (((((_2256 * _1907) + _662) * cbLight._m0[_2207].y) * _2275) * _2276) + _2080;
        _2196 = (((((_2256 * _1908) + _663) * cbLight._m0[_2207].z) * _2275) * _2276) + _2082;
    }
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    if (_1715.y == 0u)
    {
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2351;
        float _2353 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2351;
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2351;
        uvec4 _2366 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2367 = _2366.x;
        uint _2378 = uint((float(_2366.y) * floor(float(uint(cbSceneParam._m0[85u].y * _459) / _2367))) + floor(float(uint(cbSceneParam._m0[85u].x * _458) / _2367)));
        float _2388 = (log2(_2354 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2389 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        uint _2392 = uint(isnan(14.0) ? _2389 : (isnan(_2389) ? 14.0 : min(_2389, 14.0)));
        uvec4 _2397 = texelFetch(g_lightClusterGridBuffer, int(((_2392 << 2u) + (_2378 << 6u)) >> 2u));
        uint _2398 = _2397.x;
        uint _2399 = _2366.z;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        if (((((1u << ((_2399 >> 4u) & 15u)) + 4294967295u) & _2398) == 0u) || ((_2399 & 240u) == 0u))
        {
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
        }
        else
        {
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            uint _2734 = 0u;
            uint _2743;
            bool _2744;
            for (;;)
            {
                _2743 = texelFetch(g_lightClassification, int((((_2392 << 5u) + (_2378 << 9u)) + (_2734 << 2u)) >> 2u)).x;
                _2744 = _2743 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2744)
                {
                    frontier_phi_63_pred = _2733;
                    frontier_phi_63_pred_1 = _2732;
                    frontier_phi_63_pred_2 = _2731;
                    frontier_phi_63_pred_3 = _2730;
                    frontier_phi_63_pred_4 = _2729;
                    frontier_phi_63_pred_5 = _2728;
                }
                else
                {
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    uint _2858;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2733;
                    _2858 = _2743;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    for (;;)
                    {
                        uint _2862 = uint(findLSB(_2858)) + (_2734 << 5u);
                        uint _2859 = (_2858 + 4294967295u) & _2858;
                        uint _2864 = _2862 * 48u;
                        vec4 _2878 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 3u)).x));
                        uint _2884 = (_2862 * 48u) + 4u;
                        vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 3u)).x));
                        uint _2903 = (_2862 * 48u) + 8u;
                        vec3 _2914 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x));
                        float _2918 = _2878.x - _2352;
                        float _2919 = _2878.y - _2353;
                        float _2920 = _2878.z - _2354;
                        float _2921 = dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920));
                        float _2924 = inversesqrt(_2921);
                        float _2925 = _2924 * _2918;
                        float _2926 = _2924 * _2919;
                        float _2927 = _2924 * _2920;
                        float _2928 = dot(vec3(_484, _487, _490), vec3(_2925, _2926, _2927));
                        float _2933 = 1.0 - (_2921 * _2878.w);
                        float _4215 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2934 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2935 = sqrt(_2921) * _2897.w;
                        float _2938 = 1.39999997615814208984375 / (_2935 + 1.39999997615814208984375);
                        float _2939 = _2938 * _2938;
                        float _2942 = ((1.0 - _2939) * _2928) + _2939;
                        float _2945 = _2935 * _2935;
                        float _2948 = ((isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0))) * _2934) / ((_2945 * 0.699999988079071044921875) + 1.0);
                        float _2952 = (-0.0) - _2352;
                        float _2953 = (-0.0) - _2353;
                        float _2954 = (-0.0) - _2354;
                        float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
                        float _2959 = _2958 * _2952;
                        float _2960 = _2958 * _2953;
                        float _2961 = _2958 * _2954;
                        float _2969 = exp2(log2(1.0 / ((_2945 * 3.5) + 5.0)) * 0.25);
                        float _2970 = 1.0 - _691;
                        float _2977 = sqrt(1.0 - ((1.0 - (_2970 * _2970)) * (1.0 - (_2969 * _2969))));
                        float _2978 = _2977 * _2977;
                        float _2979 = _2978 * _2978;
                        float _2980 = _2959 + _2925;
                        float _2981 = _2960 + _2926;
                        float _2982 = _2961 + _2927;
                        float _2986 = inversesqrt(dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982)));
                        float _2990 = dot(vec3(_484, _487, _490), vec3(_2959, _2960, _2961));
                        float _4231 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2993 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _2994 = dot(vec3(_484, _487, _490), vec3(_2986 * _2980, _2986 * _2981, _2986 * _2982));
                        float _4242 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2997 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                        float _3001 = ((_2997 * _2997) * (_2979 + (-1.0))) + 1.0;
                        float _3002 = _2938 * _2978;
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2928) + _3003;
                        float _4253 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3007 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _3008 = 1.0 - _2978;
                        float _3018 = (0.5 / (((_3007 * ((_2993 * _3008) + _2978)) + 9.9999999392252902907785028219223e-09) + (((_3007 * _3008) + _2978) * _2993))) * _3007;
                        float _4264 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3029 = (((_2979 * 3.1415927410125732421875) * (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) / ((_3001 * _3001) * ((_2945 * 2.1991131305694580078125) + 3.141590118408203125))) * _2934;
                        _2787 = (_2948 * _2897.x) + _2855;
                        _2788 = (_2948 * _2897.y) + _2856;
                        _2789 = (_2948 * _2897.z) + _2857;
                        _2784 = (_3029 * _2914.x) + _2852;
                        _2785 = (_3029 * _2914.y) + _2853;
                        _2786 = (_3029 * _2914.z) + _2854;
                        if (_2859 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2859;
                        }
                    }
                    frontier_phi_63_pred = _2789;
                    frontier_phi_63_pred_1 = _2788;
                    frontier_phi_63_pred_2 = _2787;
                    frontier_phi_63_pred_3 = _2786;
                    frontier_phi_63_pred_4 = _2785;
                    frontier_phi_63_pred_5 = _2784;
                }
                _2595 = frontier_phi_63_pred;
                _2593 = frontier_phi_63_pred_1;
                _2591 = frontier_phi_63_pred_2;
                _2589 = frontier_phi_63_pred_3;
                _2587 = frontier_phi_63_pred_4;
                _2585 = frontier_phi_63_pred_5;
                uint _2735 = _2734 + 1u;
                if (_2735 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2728 = _2585;
                    _2729 = _2587;
                    _2730 = _2589;
                    _2731 = _2591;
                    _2732 = _2593;
                    _2733 = _2595;
                    _2734 = _2735;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
        }
        uvec4 _2598 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2599 = _2598.z;
        uint _2601 = (_2599 >> 8u) & 15u;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        if (((4294967295u << _2601) & _2398) == 0u)
        {
            _2696 = _2584;
            _2698 = _2586;
            _2700 = _2588;
            _2702 = _2590;
            _2704 = _2592;
            _2706 = _2594;
        }
        else
        {
            float _2721 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
            float _2722 = _2721 * _2352;
            float _2723 = _2721 * _2353;
            float _2724 = _2721 * _2354;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2601 < ((_2599 >> 12u) & 15u))
            {
                float _2697;
                float _2699;
                float _2701;
                float _2703;
                float _2705;
                float _2707;
                float _2835 = _2584;
                float _2836 = _2586;
                float _2837 = _2588;
                float _2838 = _2590;
                float _2839 = _2592;
                float _2840 = _2594;
                uint _2841 = _2601;
                uint _2850;
                bool _2851;
                for (;;)
                {
                    _2850 = texelFetch(g_lightClassification, int((((_2392 << 5u) + (_2378 << 9u)) + (_2841 << 2u)) >> 2u)).x;
                    _2851 = _2850 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2851)
                    {
                        frontier_phi_69_pred = _2840;
                        frontier_phi_69_pred_1 = _2839;
                        frontier_phi_69_pred_2 = _2838;
                        frontier_phi_69_pred_3 = _2837;
                        frontier_phi_69_pred_4 = _2836;
                        frontier_phi_69_pred_5 = _2835;
                    }
                    else
                    {
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3047 = _2835;
                        float _3048 = _2836;
                        float _3049 = _2837;
                        float _3050 = _2838;
                        float _3051 = _2839;
                        float _3052 = _2840;
                        uint _3053 = _2850;
                        uint _3054;
                        vec4 _3079;
                        float _3080;
                        vec4 _3095;
                        vec3 _3107;
                        vec4 _3122;
                        vec4 _3138;
                        float _3185;
                        bool _3186;
                        for (;;)
                        {
                            uint _3064 = ((_2841 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3053));
                            _3054 = (_3053 + 4294967295u) & _3053;
                            uint _3066 = _3064 * 40u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            _3080 = _3079.w;
                            uint _3082 = (_3064 * 40u) + 4u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3097 = (_3064 * 40u) + 8u;
                            _3107 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x));
                            uint _3109 = (_3064 * 40u) + 16u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3125 = (_3064 * 40u) + 20u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3141 = (_3064 * 40u) + 24u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3160 = (_3064 * 40u) + 28u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            _3185 = fma(_2354, _3173.z, fma(_2353, _3173.y, _3173.x * _2352)) + _3173.w;
                            _3186 = !((fma(_2354, _3154.z, fma(_2353, _3154.y, _3154.x * _2352)) + _3154.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3186)
                            {
                                float _3213 = _3079.x - _2352;
                                float _3214 = _3079.y - _2353;
                                float _3215 = _3079.z - _2354;
                                float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                                float _3219 = inversesqrt(_3216);
                                float _3220 = _3219 * _3213;
                                float _3221 = _3219 * _3214;
                                float _3222 = _3219 * _3215;
                                float _3226 = 1.0 - (_3216 / (_3080 * _3080));
                                float _4275 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3231 = sqrt(_3216) * _3095.w;
                                float _3233 = 1.39999997615814208984375 / (_3231 + 1.39999997615814208984375);
                                float _3234 = _3233 * _3233;
                                float _3237 = ((1.0 - _3234) * dot(vec3(_3220, _3221, _3222), vec3(_484, _487, _490))) + _3234;
                                float _3240 = _3231 * _3231;
                                float _3244 = (fma(_2354, _3122.z, fma(_2353, _3122.y, _3122.x * _2352)) + _3122.w) / _3185;
                                float _3245 = (fma(_2354, _3138.z, fma(_2353, _3138.y, _3138.x * _2352)) + _3138.w) / _3185;
                                float _3249 = 1.0 - dot(vec2(_3244, _3245), vec2(_3244, _3245));
                                float _4291 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3251 = _3250 * (((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3227) / ((_3240 * 0.699999988079071044921875) + 1.0));
                                float _3263 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                                float _3264 = 1.0 - _691;
                                float _3271 = sqrt(1.0 - ((1.0 - (_3264 * _3264)) * (1.0 - (_3263 * _3263))));
                                float _3272 = _3271 * _3271;
                                float _3273 = _3272 * _3272;
                                float _3274 = _3220 - _2722;
                                float _3275 = _3221 - _2723;
                                float _3276 = _3222 - _2724;
                                float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                                float _3284 = dot(vec3(_484, _487, _490), vec3((-0.0) - _2722, (-0.0) - _2723, (-0.0) - _2724));
                                float _4302 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                                float _3288 = dot(vec3(_484, _487, _490), vec3(_3280 * _3274, _3280 * _3275, _3280 * _3276));
                                float _4313 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3295 = ((_3291 * _3291) * (_3273 + (-1.0))) + 1.0;
                                float _3296 = _3233 * _3272;
                                float _3297 = _3296 * _3296;
                                float _3303 = ((1.0 - _3297) * dot(vec3(_484, _487, _490), vec3(_3220, _3221, _3222))) + _3297;
                                float _4324 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3305 = 1.0 - _3272;
                                float _3315 = (0.5 / (((_3304 * ((_3287 * _3305) + _3272)) + 9.9999999392252902907785028219223e-09) + (((_3304 * _3305) + _3272) * _3287))) * _3304;
                                float _4335 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3325 = (_3250 * _3227) * (((_3273 * 3.1415927410125732421875) * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) / ((_3295 * _3295) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3251 * _3095.z;
                                frontier_phi_75_pred_1 = _3251 * _3095.y;
                                frontier_phi_75_pred_2 = _3251 * _3095.x;
                                frontier_phi_75_pred_3 = _3325 * _3107.z;
                                frontier_phi_75_pred_4 = _3325 * _3107.y;
                                frontier_phi_75_pred_5 = _3325 * _3107.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3334 = frontier_phi_75_pred;
                            _3333 = frontier_phi_75_pred_1;
                            _3332 = frontier_phi_75_pred_2;
                            _3331 = frontier_phi_75_pred_3;
                            _3330 = frontier_phi_75_pred_4;
                            _3329 = frontier_phi_75_pred_5;
                            _3037 = _3332 + _3050;
                            _3038 = _3333 + _3051;
                            _3039 = _3334 + _3052;
                            _3034 = _3329 + _3047;
                            _3035 = _3330 + _3048;
                            _3036 = _3331 + _3049;
                            if (_3054 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3054;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3039;
                        frontier_phi_69_pred_1 = _3038;
                        frontier_phi_69_pred_2 = _3037;
                        frontier_phi_69_pred_3 = _3036;
                        frontier_phi_69_pred_4 = _3035;
                        frontier_phi_69_pred_5 = _3034;
                    }
                    _2707 = frontier_phi_69_pred;
                    _2705 = frontier_phi_69_pred_1;
                    _2703 = frontier_phi_69_pred_2;
                    _2701 = frontier_phi_69_pred_3;
                    _2699 = frontier_phi_69_pred_4;
                    _2697 = frontier_phi_69_pred_5;
                    uint _2842 = _2841 + 1u;
                    if (_2842 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2835 = _2697;
                        _2836 = _2699;
                        _2837 = _2701;
                        _2838 = _2703;
                        _2839 = _2705;
                        _2840 = _2707;
                        _2841 = _2842;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2707;
                frontier_phi_57_58_ladder_1 = _2705;
                frontier_phi_57_58_ladder_2 = _2703;
                frontier_phi_57_58_ladder_3 = _2701;
                frontier_phi_57_58_ladder_4 = _2699;
                frontier_phi_57_58_ladder_5 = _2697;
            }
            else
            {
                frontier_phi_57_58_ladder = _2594;
                frontier_phi_57_58_ladder_1 = _2592;
                frontier_phi_57_58_ladder_2 = _2590;
                frontier_phi_57_58_ladder_3 = _2588;
                frontier_phi_57_58_ladder_4 = _2586;
                frontier_phi_57_58_ladder_5 = _2584;
            }
            _2696 = frontier_phi_57_58_ladder_5;
            _2698 = frontier_phi_57_58_ladder_4;
            _2700 = frontier_phi_57_58_ladder_3;
            _2702 = frontier_phi_57_58_ladder_2;
            _2704 = frontier_phi_57_58_ladder_1;
            _2706 = frontier_phi_57_58_ladder;
        }
        float _2711 = isnan(1.0) ? _675 : (isnan(_675) ? 1.0 : min(_675, 1.0));
        _2410 = (_2711 * _2702) + _1847;
        _2412 = (_2711 * _2704) + _1849;
        _2414 = (_2711 * _2706) + _1851;
        _2416 = ((_2696 * _661) * _2711) + _2192;
        _2418 = ((_2698 * _662) * _2711) + _2194;
        _2420 = ((_2700 * _663) * _2711) + _2196;
    }
    else
    {
        _2410 = _1847;
        _2412 = _1849;
        _2414 = _1851;
        _2416 = _2192;
        _2418 = _2194;
        _2420 = _2196;
    }
    float _2427 = (_651 * _640) * cbMatDynParam._m0[9u].x;
    float _2428 = (_651 * _641) * cbMatDynParam._m0[9u].y;
    float _2429 = (_651 * _642) * cbMatDynParam._m0[9u].z;
    float _2440 = dot(vec3(_368, _369, _370), vec3(0.0, -1.0, 0.0));
    float _4351 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2447 = dot(vec3(_683, _684, _685), vec3(0.0, -1.0, 0.0));
    float _4362 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2453 = exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 4.0);
    float _4373 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _4384 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _4395 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _4406 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _2498 = abs(exp2(log2(_676) * cbMatDynParam._m0[12u].x));
    float _2499 = isnan(0.100000001490116119384765625) ? _2498 : (isnan(_2498) ? 0.100000001490116119384765625 : max(_2498, 0.100000001490116119384765625));
    float _2505 = ((isnan(0.699999988079071044921875) ? _2499 : (isnan(_2499) ? 0.699999988079071044921875 : min(_2499, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _2515 = ((((cbMatDynParam._m0[10u].x * cbPerFrame._m0[3u].x) * ((_2416 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1482)) + (_2453 * cbMatDynParam._m0[11u].x))) + ((isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * ((_2410 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _675)) + (_2443 * cbMatDynParam._m0[11u].x)))) + cbMatDynParam._m0[7u].x) + (_2505 * (cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x));
    float _2518 = ((((cbMatDynParam._m0[10u].y * cbPerFrame._m0[3u].x) * ((_2418 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1482)) + (_2453 * cbMatDynParam._m0[11u].y))) + ((isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * ((_2412 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _675)) + (_2443 * cbMatDynParam._m0[11u].y)))) + cbMatDynParam._m0[7u].y) + (_2505 * (cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y));
    float _2521 = ((((cbMatDynParam._m0[10u].z * cbPerFrame._m0[3u].x) * ((_2420 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1482)) + (_2453 * cbMatDynParam._m0[11u].z))) + ((isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * ((_2414 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _675)) + (_2443 * cbMatDynParam._m0[11u].z)))) + cbMatDynParam._m0[7u].z) + (_2505 * (cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z));
    float _2529 = cbInstanceData._m0[_566 + 6u].w * (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)));
    float _2534 = _458 / cbSceneParam._m0[86u].x;
    float _2535 = _459 / cbSceneParam._m0[86u].y;
    vec4 _2549 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, (log2((isnan(cbSceneParam._m0[77u].w) ? _392 : (isnan(_392) ? cbSceneParam._m0[77u].w : min(_392, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2551 = _2549.x;
    float _2552 = _2549.y;
    float _2553 = _2549.z;
    float _2554 = _2549.w;
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    if (_392 > cbSceneParam._m0[78u].w)
    {
        float _2609 = isnan(_392) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _392 : min(cbSceneParam._m0[80u].w, _392));
        float _2610 = _2609 / _392;
        float _2621 = _2610 * _443;
        float _2622 = _444 * _2610;
        float _2623 = (-0.0) - _2622;
        float _2624 = _2610 * _445;
        float _2626 = (cbSceneParam._m0[77u].w * _2623) / _2609;
        float _2627 = _2626 + cbSceneParam._m0[79u].w;
        float _2628 = cbSceneParam._m0[79u].w - _2622;
        float _2634 = sqrt(((_2621 * _2621) + (_2622 * _2622)) + (_2624 * _2624));
        float _2637 = (1.0 - (cbSceneParam._m0[77u].w / _2609)) * _2634;
        float _2642 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2644 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2797;
        if (abs((_2623 - _2626) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2797 = ((((_2627 > 0.0) ? exp2(_2642 * _2627) : (2.0 - exp2(_2644 * _2627))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2637;
        }
        else
        {
            float _2757 = 1.0 / cbSceneParam._m0[80u].x;
            float _2758 = isnan(_2628) ? _2627 : (isnan(_2627) ? _2628 : max(_2627, _2628));
            float _2759 = isnan(_2628) ? _2627 : (isnan(_2627) ? _2628 : min(_2627, _2628));
            float _2768 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : min(_2758, 0.0));
            float _2769 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : min(_2759, 0.0));
            _2797 = ((abs(_2634 / _2623) * cbSceneParam._m0[80u].y) * ((((_2768 - _2769) * 2.0) - ((exp2(_2642 * (isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0)))) - exp2(_2642 * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0))))) * _2757)) - ((exp2(_2644 * _2768) - exp2(_2644 * _2769)) * _2757))) + (_2637 * cbSceneParam._m0[80u].z);
        }
        vec4 _2799 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, 1.0), 0.0);
        float _2808 = exp2((_2797 * (-1.44269502162933349609375)) * (1.0 - _2799.w));
        float _2809 = log2(_2808);
        float _2825 = log2(_2554);
        _2646 = (exp2(_2825 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].x)) * _2799.x) / cbSceneParam._m0[78u].x)) + _2551;
        _2648 = (exp2(_2825 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].y)) * _2799.y) / cbSceneParam._m0[78u].y)) + _2552;
        _2650 = (exp2(_2825 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2809 * cbSceneParam._m0[78u].z)) * _2799.z) / cbSceneParam._m0[78u].z)) + _2553;
        _2652 = _2808 * _2554;
    }
    else
    {
        _2646 = _2551;
        _2648 = _2552;
        _2650 = _2553;
        _2652 = _2554;
    }
    float _2664 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2665 = _2664 == 3.0;
    float _2666 = log2(_2652);
    float _2673 = exp2(_2666 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0)));
    float _2674 = exp2(_2666 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0)));
    float _2675 = exp2(_2666 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0)));
    float _2684 = (_2664 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2684 * (_2665 ? _2673 : (_2673 + (cbSceneParam._m0[72u].w * _2646)));
    SV_Target.y = _2684 * (_2665 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2648)));
    SV_Target.z = _2684 * (_2665 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2650)));
    SV_Target.w = _2529;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2529;
}


