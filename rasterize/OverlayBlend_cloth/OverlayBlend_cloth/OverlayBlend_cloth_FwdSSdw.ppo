#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D OverlayBlend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D OverlayBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D OverlayBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D OverlayBlend_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D OverlayBlend_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1052;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _240 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.w;
    vec4 _258 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _272 = ((_240.x * 4.55000019073486328125) * _258.x) * cbMtdParam._m0[9u].x;
    float _275 = ((_240.y * 4.55000019073486328125) * _258.y) * cbMtdParam._m0[9u].y;
    float _278 = ((_240.z * 4.55000019073486328125) * _258.z) * cbMtdParam._m0[9u].z;
    float _297 = cbMtdParam._m0[10u].y + texture(sampler2D(OverlayBlend_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x;
    vec4 _309 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _326 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _335 = (_309.z * 2.0) * (cbMtdParam._m0[10u].x + _326.z);
    float _344 = (_326.x * 2.0) + (-1.0);
    float _345 = (_326.y * 2.0) + (-1.0);
    float _346 = dot(vec2(_344, _345), vec2(_344, _345));
    float _3408 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _352 = sqrt(1.0 - (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))));
    float _355 = (cbMtdParam._m0[10u].z * ((_309.x * 2.0) + (-1.0))) + _344;
    float _356 = (cbMtdParam._m0[10u].z * ((_309.y * 2.0) + (-1.0))) + _345;
    float _359 = fma(_352, _224, fma(_356, _216 * TANGENT.x, (_202 * _194) * _355));
    float _362 = fma(_352, _225, fma(_356, _216 * TANGENT.y, (_202 * _195) * _355));
    float _365 = fma(_352, _226, fma(_356, _216 * TANGENT.z, (_202 * _196) * _355));
    float _369 = inversesqrt(dot(vec3(_359, _362, _365), vec3(_359, _362, _365)));
    float _370 = _369 * _359;
    float _371 = _369 * _362;
    float _372 = _369 * _365;
    float _3419 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _373 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _374 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _375 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _376 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _377 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _378 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _394 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _445 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _435);
    float _446 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _435);
    float _447 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _435);
    float _451 = inversesqrt(dot(vec3(_445, _446, _447), vec3(_445, _446, _447)));
    float _452 = _445 * _451;
    float _453 = _446 * _451;
    float _454 = _447 * _451;
    float _460 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _461 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _463 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _465 = _463.w;
    float _486 = fma(_372, cbSceneParam._m0[5u].z, fma(_371, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _370));
    float _489 = fma(_372, cbSceneParam._m0[6u].z, fma(_371, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _370));
    float _492 = fma(_372, cbSceneParam._m0[7u].z, fma(_371, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _370));
    vec4 _494 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _496 = _494.x;
    float _508 = (((_494.y - _374) + (_494.w * _374)) * cbMtdParam._m0[3u].x) + _374;
    float _526 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_496 * _496)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _535 = (((cbMatDynParam._m0[15u].x - _378) * cbMatDynParam._m0[15u].w) * _526) + _378;
    float _544 = ((_526 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _508)) + _508;
    uint _568 = uint(roundEven(NORMAL.w)) * 13u;
    uint _571 = (_568 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _577 = (cbMtdParam._m0[0u].x * _375) * cbInstanceData._m0[_571].x;
    float _578 = (cbMtdParam._m0[0u].y * _376) * cbInstanceData._m0[_571].y;
    float _579 = (cbMtdParam._m0[0u].z * _377) * cbInstanceData._m0[_571].z;
    float _3485 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    vec4 _583 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _588 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _599 = (((_588.x - _535) + (_588.w * _535)) * cbMtdParam._m0[3u].x) + _535;
    float _612 = (cbMtdParam._m0[3u].x * (((_580 * _465) - _580) + _583.x)) + _580;
    float _613 = (cbMtdParam._m0[3u].x * (((_581 * _465) - _581) + _583.y)) + _581;
    float _614 = (cbMtdParam._m0[3u].x * (((_582 * _465) - _582) + _583.z)) + _582;
    vec4 _615 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _628 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_535 * (_375 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_535 * (_376 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_535 * (_377 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _615.z;
    float _632 = _628 * cbMatDynParam._m0[13u].w;
    float _642 = (_632 * (cbMatDynParam._m0[13u].x - _612)) + _612;
    float _643 = (_632 * (cbMatDynParam._m0[13u].y - _613)) + _613;
    float _644 = (_632 * (cbMatDynParam._m0[13u].z - _614)) + _614;
    float _652 = ((_628 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _599)) + _599;
    float _653 = 1.0 - _652;
    float _654 = _653 * _642;
    float _655 = _653 * _643;
    float _656 = _653 * _644;
    float _660 = (_642 + (-0.039999999105930328369140625)) * _652;
    float _661 = (_643 + (-0.039999999105930328369140625)) * _652;
    float _662 = (_644 + (-0.039999999105930328369140625)) * _652;
    float _663 = _660 + 0.039999999105930328369140625;
    float _664 = _661 + 0.039999999105930328369140625;
    float _665 = _662 + 0.039999999105930328369140625;
    vec4 _674 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _460, cbSceneParam._m0[86u].y * _461));
    float _677 = _674.x * TEXCOORD_4;
    float _678 = dot(vec3(_370, _371, _372), vec3(_452, _453, _454));
    float _681 = _678 * 2.0;
    float _685 = (_681 * _370) - _452;
    float _686 = (_681 * _371) - _453;
    float _687 = (_681 * _372) - _454;
    float _691 = abs(dot(vec3(_452, _453, _454), vec3(_370, _371, _372)));
    float _3518 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _693 = sqrt(_544);
    float _706 = exp2((_693 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_693 * 3.0));
    float _712 = (1.0 - _706) * ((_693 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _713 = _706 * _693;
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1051;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _776 = fma(_749, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741));
        float _780 = fma(_749, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741));
        float _784 = fma(_749, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741));
        float _809 = _741 + _370;
        float _810 = _745 + _371;
        float _811 = _749 + _372;
        float _821 = fma(_811, cbModelParam._m0[26u].z, fma(_810, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809)) - _776;
        float _822 = fma(_811, cbModelParam._m0[27u].z, fma(_810, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809)) - _780;
        float _823 = fma(_811, cbModelParam._m0[28u].z, fma(_810, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809)) - _784;
        float _827 = inversesqrt(dot(vec3(_821, _822, _823), vec3(_821, _822, _823)));
        float _840 = ((_827 * _821) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_776 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_827 * _822) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_780 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_827 * _823) / cbModelParam._m0[34u].z) + ((((((_784 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        float _879 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_845.x + (-0.5));
        float _881 = _879 * (_845.y + (-0.5));
        float _882 = _879 * (_845.z + (-0.5));
        float _889 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_852.x + (-0.5));
        float _891 = _889 * (_852.y + (-0.5));
        float _892 = _889 * (_852.z + (-0.5));
        float _899 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_859.x + (-0.5));
        float _901 = _899 * (_859.y + (-0.5));
        float _902 = _899 * (_859.z + (-0.5));
        float _909 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_866.x + (-0.5));
        float _911 = _909 * (_866.y + (-0.5));
        float _912 = _909 * (_866.z + (-0.5));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = _880 * 0.5;
        float _917 = _890 * 0.5;
        float _918 = _900 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _933 = (dot(vec3(_370, _371, _372), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _943 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3566 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_945 + 1.0))) + _950) * _913;
        float _960 = _881 * 0.5;
        float _961 = _891 * 0.5;
        float _962 = _901 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_370, _371, _372), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3599 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_987 + 1.0))) + _992) * _914;
        float _1002 = _882 * 0.5;
        float _1003 = _892 * 0.5;
        float _1004 = _902 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_370, _371, _372), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3632 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1029 + 1.0))) + _1034) * _915;
        _1051 = _882;
        _1053 = _881;
        _1054 = _880;
        _1055 = _892;
        _1056 = _891;
        _1057 = _890;
        _1058 = _902;
        _1059 = _901;
        _1060 = _900;
        _1061 = _915;
        _1062 = _914;
        _1063 = _913;
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
    }
    else
    {
        _1051 = _1052;
        _1053 = _1052;
        _1054 = _1052;
        _1055 = _1052;
        _1056 = _1052;
        _1057 = _1052;
        _1058 = _1052;
        _1059 = _1052;
        _1060 = _1052;
        _1061 = _1052;
        _1062 = _1052;
        _1063 = _1052;
        _1064 = 0.0;
        _1065 = 0.0;
        _1066 = 0.0;
    }
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1092 = fma(_749, cbModelParam._m0[30u].z, fma(_745, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _741));
        float _1096 = fma(_749, cbModelParam._m0[31u].z, fma(_745, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _741));
        float _1100 = fma(_749, cbModelParam._m0[32u].z, fma(_745, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _741));
        float _1123 = _741 + _370;
        float _1124 = _745 + _371;
        float _1125 = _749 + _372;
        float _1135 = fma(_1125, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123)) - _1092;
        float _1136 = fma(_1125, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123)) - _1096;
        float _1137 = fma(_1125, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123)) - _1100;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1092 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1096 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[35u].z) + ((((((_1100 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1191 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1158.x + (-0.5));
        float _1193 = _1191 * (_1158.y + (-0.5));
        float _1194 = _1191 * (_1158.z + (-0.5));
        float _1201 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1165.x + (-0.5));
        float _1203 = _1201 * (_1165.y + (-0.5));
        float _1204 = _1201 * (_1165.z + (-0.5));
        float _1211 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1172.x + (-0.5));
        float _1213 = _1211 * (_1172.y + (-0.5));
        float _1214 = _1211 * (_1172.z + (-0.5));
        float _1221 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1179.x + (-0.5));
        float _1223 = _1221 * (_1179.y + (-0.5));
        float _1224 = _1221 * (_1179.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_370, _371, _372), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3695 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1255 + 1.0))) + _1260) * _1225;
        float _1270 = _1193 * 0.5;
        float _1271 = _1203 * 0.5;
        float _1272 = _1213 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_370, _371, _372), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3728 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1297 + 1.0))) + _1302) * _1226;
        float _1312 = _1194 * 0.5;
        float _1313 = _1204 * 0.5;
        float _1314 = _1214 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_370, _371, _372), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3761 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1339 + 1.0))) + _1344) * _1227;
        _1361 = _1194;
        _1362 = _1193;
        _1363 = _1192;
        _1364 = _1204;
        _1365 = _1203;
        _1366 = _1202;
        _1367 = _1214;
        _1368 = _1213;
        _1369 = _1212;
        _1370 = _1227;
        _1371 = _1226;
        _1372 = _1225;
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1052;
        _1362 = _1052;
        _1363 = _1052;
        _1364 = _1052;
        _1365 = _1052;
        _1366 = _1052;
        _1367 = _1052;
        _1368 = _1052;
        _1369 = _1052;
        _1370 = _1052;
        _1371 = _1052;
        _1372 = _1052;
        _1373 = 0.0;
        _1374 = 0.0;
        _1375 = 0.0;
    }
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1064)) + _1064;
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1065)) + _1065;
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1066)) + _1066;
    float _1408 = fma(_1387, cbSceneParam._m0[89u].z, fma(_1386, cbSceneParam._m0[89u].y, _1385 * cbSceneParam._m0[89u].x));
    float _1411 = fma(_1387, cbSceneParam._m0[90u].z, fma(_1386, cbSceneParam._m0[90u].y, _1385 * cbSceneParam._m0[90u].x));
    float _1414 = fma(_1387, cbSceneParam._m0[91u].z, fma(_1386, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1385));
    float _1429 = _685 * 0.5;
    float _1430 = _686 * 0.5;
    float _1431 = _687 * 0.5;
    float _1432 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1435 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1438 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1469;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1445 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1051, _1055, _1058, _1061));
        float _1449 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1453 = dot(vec4(_1429, _1430, _1431, 1.0), vec4(_1054, _1057, _1060, _1063));
        float _1460 = dot(vec4(cbModelParam._m0[39u]), vec4(_1429, _1430, _1431, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1480;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1471 = dot(vec4(cbModelParam._m0[40u]), vec4(_1429, _1430, _1431, 1.0));
        _1480 = dot(vec3(isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1480 = 1.0;
    }
    float _1484 = (_1480 * cbModelParam._m0[1u].x) + (_1469 * (1.0 - cbModelParam._m0[1u].x));
    float _1494 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _544);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1494 : min(cbModelParam._m0[25u].z, _1494));
    float _1575;
    float _1577;
    float _1579;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1542 = fma(_749, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _741)) + cbModelParam._m0[13u].w;
        float _1546 = fma(_749, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _741)) + cbModelParam._m0[14u].w;
        float _1550 = fma(_749, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _741)) + cbModelParam._m0[15u].w;
        float _1553 = fma(_687, cbModelParam._m0[13u].z, fma(_686, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685));
        float _1556 = fma(_687, cbModelParam._m0[14u].z, fma(_686, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685));
        float _1559 = fma(_687, cbModelParam._m0[15u].z, fma(_686, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685));
        float _1587;
        if (_1553 > 0.0)
        {
            _1587 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1587 = frontier_phi_16_14_ladder;
        }
        float _1815;
        if (_1556 > 0.0)
        {
            _1815 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1815 = frontier_phi_25_21_ladder;
        }
        float _2072;
        if (_1559 > 0.0)
        {
            _2072 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2072 = frontier_phi_37_32_ladder;
        }
        float _2074 = isnan(_1815) ? _1587 : (isnan(_1587) ? _1815 : min(_1587, _1815));
        float _2075 = isnan(_2072) ? _2074 : (isnan(_2074) ? _2072 : min(_2074, _2072));
        float _2079 = (_2075 * _1553) + _1542;
        float _2080 = (_2075 * _1556) + _1546;
        float _2081 = (_2075 * _1559) + _1550;
        float _2082 = _2075 * 9.9999997473787516355514526367188e-05;
        float _2084 = (-1.0) - _2082;
        float _2086 = _2082 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2081 > _2086) || ((_2081 < _2084) || ((_2080 > _2086) || ((_2080 < _2084) || ((_2079 < _2084) || (_2079 > _2086))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2209 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2081, cbModelParam._m0[9u].z, fma(_2080, cbModelParam._m0[9u].y, _2079 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2081, cbModelParam._m0[10u].z, fma(_2080, cbModelParam._m0[10u].y, _2079 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2081, cbModelParam._m0[11u].z, fma(_2080, cbModelParam._m0[11u].y, _2079 * cbModelParam._m0[11u].x))), _1495);
            frontier_phi_15_37_ladder = _2209.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2209.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2209.x * cbModelParam._m0[1u].y;
        }
        _1575 = frontier_phi_15_37_ladder_2;
        _1577 = frontier_phi_15_37_ladder_1;
        _1579 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_685, _686, _687), _1495);
        _1575 = _1563.x * cbModelParam._m0[1u].y;
        _1577 = _1563.y * cbModelParam._m0[1u].y;
        _1579 = _1563.z * cbModelParam._m0[1u].y;
    }
    float _1583 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _544);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1583 : min(cbModelParam._m0[25u].w, _1583));
    float _1677;
    float _1679;
    float _1681;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1641 = fma(_749, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _741)) + cbModelParam._m0[21u].w;
        float _1645 = fma(_749, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _741)) + cbModelParam._m0[22u].w;
        float _1649 = fma(_749, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _741)) + cbModelParam._m0[23u].w;
        float _1652 = fma(_687, cbModelParam._m0[21u].z, fma(_686, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685));
        float _1655 = fma(_687, cbModelParam._m0[22u].z, fma(_686, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685));
        float _1658 = fma(_687, cbModelParam._m0[23u].z, fma(_686, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685));
        float _1820;
        if (_1652 > 0.0)
        {
            _1820 = abs((1.0 - _1641) / _1652);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1641 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1820 = frontier_phi_27_23_ladder;
        }
        float _2099;
        if (_1655 > 0.0)
        {
            _2099 = abs((1.0 - _1645) / _1655);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1645 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2099 = frontier_phi_39_34_ladder;
        }
        float _2312;
        if (_1658 > 0.0)
        {
            _2312 = abs((1.0 - _1649) / _1658);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1649 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2312 = frontier_phi_48_45_ladder;
        }
        float _2314 = isnan(_2099) ? _1820 : (isnan(_1820) ? _2099 : min(_1820, _2099));
        float _2315 = isnan(_2312) ? _2314 : (isnan(_2314) ? _2312 : min(_2314, _2312));
        float _2319 = (_2315 * _1652) + _1641;
        float _2320 = (_2315 * _1655) + _1645;
        float _2321 = (_2315 * _1658) + _1649;
        float _2322 = _2315 * 9.9999997473787516355514526367188e-05;
        float _2323 = (-1.0) - _2322;
        float _2325 = _2322 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2321 > _2325) || ((_2321 < _2323) || ((_2320 > _2325) || ((_2320 < _2323) || ((_2319 < _2323) || (_2319 > _2325))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2321, cbModelParam._m0[17u].z, fma(_2320, cbModelParam._m0[17u].y, _2319 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2321, cbModelParam._m0[18u].z, fma(_2320, cbModelParam._m0[18u].y, _2319 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2321, cbModelParam._m0[19u].z, fma(_2320, cbModelParam._m0[19u].y, _2319 * cbModelParam._m0[19u].x))), _1584);
            frontier_phi_24_48_ladder = _2521.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2521.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2521.x * cbModelParam._m0[1u].z;
        }
        _1677 = frontier_phi_24_48_ladder_2;
        _1679 = frontier_phi_24_48_ladder_1;
        _1681 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1661 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_685, _686, _687), _1584);
        _1677 = _1661.x * cbModelParam._m0[1u].z;
        _1679 = _1661.y * cbModelParam._m0[1u].z;
        _1681 = _1661.z * cbModelParam._m0[1u].z;
    }
    float _1694 = (((_712 * _663) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1677 - _1575)) + _1575);
    float _1696 = (((_712 * _664) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1679 - _1577)) + _1577);
    float _1698 = (((_712 * _665) + _713) * _677) * ((cbModelParam._m0[1u].w * (_1681 - _1579)) + _1579);
    float _1701 = fma(_1698, cbSceneParam._m0[89u].z, fma(_1696, cbSceneParam._m0[89u].y, _1694 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1698, cbSceneParam._m0[90u].z, fma(_1696, cbSceneParam._m0[90u].y, _1694 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1698, cbSceneParam._m0[91u].z, fma(_1696, cbSceneParam._m0[91u].y, _1694 * cbSceneParam._m0[91u].x));
    vec4 _1715 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_460, _461));
    float _1717 = _1715.w;
    float _1729 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1717);
    float _1730 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1717);
    float _1731 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1717);
    uvec4 _1735 = floatBitsToUint(cbInstanceData._m0[_568 + 5u]);
    uint _1737 = _1735.x * 14u;
    uint _1738 = _1737 + 13u;
    float _1745 = _677 + (-1.0);
    float _1750 = (cbLight._m0[_1738].x * _1745) + 1.0;
    float _1751 = (cbLight._m0[_1738].y * _1745) + 1.0;
    float _1752 = (cbLight._m0[_1738].z * _1745) + 1.0;
    float _1753 = (cbLight._m0[_1738].w * _1745) + 1.0;
    uint _1754 = _1737 + 5u;
    float _1760 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
    uint _1764 = _1737 + 4u;
    float _1773 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
    uint _1777 = _1737 | 1u;
    float _1788 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_370, _371, _372));
    float _1791 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_370, _371, _372));
    float _3897 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _3908 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1796 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
    float _1798 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1805 = ((cbLight._m0[_1754].x * _1760) * _1798) + (((cbLight._m0[_1764].x * _1729) * _1773) * _1796);
    float _1806 = ((_1760 * cbLight._m0[_1754].y) * _1798) + (((cbLight._m0[_1764].y * _1730) * _1773) * _1796);
    float _1807 = ((_1760 * cbLight._m0[_1754].z) * _1798) + (((cbLight._m0[_1764].z * _1731) * _1773) * _1796);
    uvec4 _1812 = floatBitsToUint(cbLight._m0[_1737 + 12u]);
    bool _1814 = _1812.x == 0u;
    float _1825;
    float _1827;
    float _1829;
    if (_1814)
    {
        _1825 = _1805;
        _1827 = _1806;
        _1829 = _1807;
    }
    else
    {
        uint _1833 = _1737 + 6u;
        float _1849 = (dot(vec3(cbLight._m0[_1737 + 2u].xyz), vec3(_370, _371, _372)) * 0.5) + 0.5;
        float _1850 = _1849 * _1849;
        float _3919 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1852 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _1825 = (((cbLight._m0[_1833].x * 0.3183098733425140380859375) * _1851) * _1852) + _1805;
        _1827 = (((cbLight._m0[_1833].y * 0.3183098733425140380859375) * _1851) * _1852) + _1806;
        _1829 = (((cbLight._m0[_1833].z * 0.3183098733425140380859375) * _1851) * _1852) + _1807;
    }
    bool _1832 = _1812.y == 0u;
    float _1870;
    float _1872;
    float _1874;
    if (_1832)
    {
        _1870 = _1825;
        _1872 = _1827;
        _1874 = _1829;
    }
    else
    {
        uint _2043 = _1737 + 7u;
        float _2059 = (dot(vec3(cbLight._m0[_1737 + 3u].xyz), vec3(_370, _371, _372)) * 0.5) + 0.5;
        float _2060 = _2059 * _2059;
        float _3935 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2061 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _2062 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _1870 = (((cbLight._m0[_2043].x * 0.3183098733425140380859375) * _2061) * _2062) + _1825;
        _1872 = (((cbLight._m0[_2043].y * 0.3183098733425140380859375) * _2061) * _2062) + _1827;
        _1874 = (((cbLight._m0[_2043].z * 0.3183098733425140380859375) * _2061) * _2062) + _1829;
    }
    uint _1877 = _1737 + 8u;
    float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1737].w)) * _544) * 0.949999988079071044921875);
    float _1891 = _1890 * _1890;
    float _1892 = cbLight._m0[_1737].x + _452;
    float _1893 = cbLight._m0[_1737].y + _453;
    float _1894 = cbLight._m0[_1737].z + _454;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1899 = _1898 * _1892;
    float _1900 = _1898 * _1893;
    float _1901 = _1898 * _1894;
    float _1902 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_1737].xyz));
    float _3951 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _1906 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1907 = dot(vec3(_370, _371, _372), vec3(_1899, _1900, _1901));
    float _3973 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1911 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_1899, _1900, _1901));
    float _3984 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1915 = _1891 * _1891;
    float _1919 = ((_1910 * _1910) * (_1915 + (-1.0))) + 1.0;
    float _1927 = exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0);
    float _1928 = 0.959999978542327880859375 - _660;
    float _1930 = 0.959999978542327880859375 - _661;
    float _1931 = 0.959999978542327880859375 - _662;
    float _1938 = 1.0 - _1891;
    float _1949 = (0.5 / (((_1906 * ((_1905 * _1938) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _1938) + _1891) * _1905))) * _1905;
    float _3995 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1951 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1915 / ((_1919 * _1919) * 3.141590118408203125));
    uint _1965 = _1737 + 9u;
    float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * _544) * 0.949999988079071044921875);
    float _1977 = _1976 * _1976;
    float _1978 = cbLight._m0[_1777].x + _452;
    float _1979 = cbLight._m0[_1777].y + _453;
    float _1980 = cbLight._m0[_1777].z + _454;
    float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
    float _1985 = _1984 * _1978;
    float _1986 = _1984 * _1979;
    float _1987 = _1984 * _1980;
    float _1988 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_1777].xyz));
    float _4006 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1992 = dot(vec3(_370, _371, _372), vec3(_1985, _1986, _1987));
    float _4017 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1995 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1996 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1985, _1986, _1987));
    float _4028 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2000 = _1977 * _1977;
    float _2004 = ((_1995 * _1995) * (_2000 + (-1.0))) + 1.0;
    float _2011 = exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0);
    float _2018 = 1.0 - _1977;
    float _2028 = (0.5 / (((_1906 * ((_1991 * _2018) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2018) + _1977) * _1991))) * _1991;
    float _4039 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2030 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_2000 / ((_2004 * _2004) * 3.141590118408203125));
    float _2040 = (((((_2011 * _1928) + _663) * cbLight._m0[_1965].x) * _2030) * _1760) + ((((cbLight._m0[_1877].x * _1729) * ((_1927 * _1928) + _663)) * _1951) * _1773);
    float _2041 = (((((_2011 * _1930) + _664) * cbLight._m0[_1965].y) * _2030) * _1760) + ((((cbLight._m0[_1877].y * _1730) * ((_1927 * _1930) + _664)) * _1951) * _1773);
    float _2042 = (((((_2011 * _1931) + _665) * cbLight._m0[_1965].z) * _2030) * _1760) + ((((cbLight._m0[_1877].z * _1731) * ((_1927 * _1931) + _665)) * _1951) * _1773);
    float _2104;
    float _2106;
    float _2108;
    if (_1814)
    {
        _2104 = _2040;
        _2106 = _2041;
        _2108 = _2042;
    }
    else
    {
        uint _2110 = _1737 + 2u;
        uint _2114 = _1737 + 10u;
        float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _544) * 0.949999988079071044921875);
        float _2129 = _2128 * _2128;
        float _2130 = cbLight._m0[_2110].x + _452;
        float _2131 = cbLight._m0[_2110].y + _453;
        float _2132 = cbLight._m0[_2110].z + _454;
        float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
        float _2137 = _2136 * _2130;
        float _2138 = _2136 * _2131;
        float _2139 = _2136 * _2132;
        float _2140 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_2110].xyz));
        float _4050 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2144 = dot(vec3(_370, _371, _372), vec3(_2137, _2138, _2139));
        float _4061 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2148 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2137, _2138, _2139));
        float _4072 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2152 = _2129 * _2129;
        float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
        float _2163 = exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0);
        float _2170 = 1.0 - _2129;
        float _2180 = (0.5 / (((_1906 * ((_2143 * _2170) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2170) + _2129) * _2143))) * _2143;
        float _4083 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2182 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
        float _2183 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _2104 = (((((_2163 * _1928) + _663) * cbLight._m0[_2114].x) * _2182) * _2183) + _2040;
        _2106 = (((((_2163 * _1930) + _664) * cbLight._m0[_2114].y) * _2182) * _2183) + _2041;
        _2108 = (((((_2163 * _1931) + _665) * cbLight._m0[_2114].z) * _2182) * _2183) + _2042;
    }
    float _2218;
    float _2220;
    float _2222;
    if (_1832)
    {
        _2218 = _2104;
        _2220 = _2106;
        _2222 = _2108;
    }
    else
    {
        uint _2229 = _1737 + 3u;
        uint _2233 = _1737 + 11u;
        float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _544) * 0.949999988079071044921875);
        float _2248 = _2247 * _2247;
        float _2249 = cbLight._m0[_2229].x + _452;
        float _2250 = cbLight._m0[_2229].y + _453;
        float _2251 = cbLight._m0[_2229].z + _454;
        float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
        float _2256 = _2255 * _2249;
        float _2257 = _2255 * _2250;
        float _2258 = _2255 * _2251;
        float _2259 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_2229].xyz));
        float _4099 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2262 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2263 = dot(vec3(_370, _371, _372), vec3(_2256, _2257, _2258));
        float _4110 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2266 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2267 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2256, _2257, _2258));
        float _4121 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2271 = _2248 * _2248;
        float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
        float _2282 = exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0);
        float _2289 = 1.0 - _2248;
        float _2299 = (0.5 / (((_1906 * ((_2262 * _2289) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2289) + _2248) * _2262))) * _2262;
        float _4132 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2301 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
        float _2302 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
        _2218 = (((((_2282 * _1928) + _663) * cbLight._m0[_2233].x) * _2301) * _2302) + _2104;
        _2220 = (((((_2282 * _1930) + _664) * cbLight._m0[_2233].y) * _2301) * _2302) + _2106;
        _2222 = (((((_2282 * _1931) + _665) * cbLight._m0[_2233].z) * _2301) * _2302) + _2108;
    }
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_1735.y == 0u)
    {
        float _2377 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2378 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2377;
        float _2379 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2377;
        float _2380 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2377;
        uvec4 _2392 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2393 = _2392.x;
        uint _2404 = uint((float(_2392.y) * floor(float(uint(cbSceneParam._m0[85u].y * _461) / _2393))) + floor(float(uint(cbSceneParam._m0[85u].x * _460) / _2393)));
        float _2414 = (log2(_2380 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2415 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        uint _2418 = uint(isnan(14.0) ? _2415 : (isnan(_2415) ? 14.0 : min(_2415, 14.0)));
        uvec4 _2423 = texelFetch(g_lightClusterGridBuffer, int(((_2418 << 2u) + (_2404 << 6u)) >> 2u));
        uint _2424 = _2423.x;
        uint _2425 = _2392.z;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        if (((((1u << ((_2425 >> 4u) & 15u)) + 4294967295u) & _2424) == 0u) || ((_2425 & 240u) == 0u))
        {
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
            _2536 = 0.0;
        }
        else
        {
            float _2527;
            float _2529;
            float _2531;
            float _2533;
            float _2535;
            float _2537;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            uint _2676 = 0u;
            uint _2685;
            bool _2686;
            for (;;)
            {
                _2685 = texelFetch(g_lightClassification, int((((_2418 << 5u) + (_2404 << 9u)) + (_2676 << 2u)) >> 2u)).x;
                _2686 = _2685 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2686)
                {
                    frontier_phi_63_pred = _2675;
                    frontier_phi_63_pred_1 = _2674;
                    frontier_phi_63_pred_2 = _2673;
                    frontier_phi_63_pred_3 = _2672;
                    frontier_phi_63_pred_4 = _2671;
                    frontier_phi_63_pred_5 = _2670;
                }
                else
                {
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    uint _2800;
                    _2794 = _2670;
                    _2795 = _2671;
                    _2796 = _2672;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2685;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    for (;;)
                    {
                        uint _2804 = uint(findLSB(_2800)) + (_2676 << 5u);
                        uint _2801 = (_2800 + 4294967295u) & _2800;
                        uint _2806 = _2804 * 48u;
                        vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 3u)).x));
                        uint _2826 = (_2804 * 48u) + 4u;
                        vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 3u)).x));
                        uint _2845 = (_2804 * 48u) + 8u;
                        vec3 _2856 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x));
                        float _2860 = _2820.x - _2378;
                        float _2861 = _2820.y - _2379;
                        float _2862 = _2820.z - _2380;
                        float _2863 = dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862));
                        float _2866 = inversesqrt(_2863);
                        float _2867 = _2866 * _2860;
                        float _2868 = _2866 * _2861;
                        float _2869 = _2866 * _2862;
                        float _2870 = dot(vec3(_486, _489, _492), vec3(_2867, _2868, _2869));
                        float _2875 = 1.0 - (_2863 * _2820.w);
                        float _4158 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2876 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2877 = sqrt(_2863) * _2839.w;
                        float _2880 = 1.39999997615814208984375 / (_2877 + 1.39999997615814208984375);
                        float _2881 = _2880 * _2880;
                        float _2884 = ((1.0 - _2881) * _2870) + _2881;
                        float _2887 = _2877 * _2877;
                        float _2891 = ((isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0))) * _2876) / ((_2887 * 0.699999988079071044921875) + 1.0);
                        float _2895 = (-0.0) - _2378;
                        float _2896 = (-0.0) - _2379;
                        float _2897 = (-0.0) - _2380;
                        float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
                        float _2902 = _2901 * _2895;
                        float _2903 = _2901 * _2896;
                        float _2904 = _2901 * _2897;
                        float _2912 = exp2(log2(1.0 / ((_2887 * 3.5) + 5.0)) * 0.25);
                        float _2913 = 1.0 - _693;
                        float _2920 = sqrt(1.0 - ((1.0 - (_2913 * _2913)) * (1.0 - (_2912 * _2912))));
                        float _2921 = _2920 * _2920;
                        float _2922 = _2921 * _2921;
                        float _2923 = _2902 + _2867;
                        float _2924 = _2903 + _2868;
                        float _2925 = _2904 + _2869;
                        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                        float _2933 = dot(vec3(_486, _489, _492), vec3(_2902, _2903, _2904));
                        float _4174 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2936 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2937 = dot(vec3(_486, _489, _492), vec3(_2929 * _2923, _2929 * _2924, _2929 * _2925));
                        float _4185 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2940 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2944 = ((_2940 * _2940) * (_2922 + (-1.0))) + 1.0;
                        float _2945 = _2880 * _2921;
                        float _2946 = _2945 * _2945;
                        float _2949 = ((1.0 - _2946) * _2870) + _2946;
                        float _4196 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2950 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2951 = 1.0 - _2921;
                        float _2961 = (0.5 / (((_2950 * ((_2936 * _2951) + _2921)) + 9.9999999392252902907785028219223e-09) + (((_2950 * _2951) + _2921) * _2936))) * _2950;
                        float _4207 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2972 = (((_2922 * 3.1415927410125732421875) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) / ((_2944 * _2944) * ((_2887 * 2.1991131305694580078125) + 3.141590118408203125))) * _2876;
                        _2729 = (_2891 * _2839.x) + _2797;
                        _2730 = (_2891 * _2839.y) + _2798;
                        _2731 = (_2891 * _2839.z) + _2799;
                        _2726 = (_2972 * _2856.x) + _2794;
                        _2727 = (_2972 * _2856.y) + _2795;
                        _2728 = (_2972 * _2856.z) + _2796;
                        if (_2801 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2794 = _2726;
                            _2795 = _2727;
                            _2796 = _2728;
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2801;
                        }
                    }
                    frontier_phi_63_pred = _2731;
                    frontier_phi_63_pred_1 = _2730;
                    frontier_phi_63_pred_2 = _2729;
                    frontier_phi_63_pred_3 = _2728;
                    frontier_phi_63_pred_4 = _2727;
                    frontier_phi_63_pred_5 = _2726;
                }
                _2537 = frontier_phi_63_pred;
                _2535 = frontier_phi_63_pred_1;
                _2533 = frontier_phi_63_pred_2;
                _2531 = frontier_phi_63_pred_3;
                _2529 = frontier_phi_63_pred_4;
                _2527 = frontier_phi_63_pred_5;
                uint _2677 = _2676 + 1u;
                if (_2677 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2670 = _2527;
                    _2671 = _2529;
                    _2672 = _2531;
                    _2673 = _2533;
                    _2674 = _2535;
                    _2675 = _2537;
                    _2676 = _2677;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
            _2536 = _2537;
        }
        uvec4 _2540 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2541 = _2540.z;
        uint _2543 = (_2541 >> 8u) & 15u;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        if (((4294967295u << _2543) & _2424) == 0u)
        {
            _2638 = _2526;
            _2640 = _2528;
            _2642 = _2530;
            _2644 = _2532;
            _2646 = _2534;
            _2648 = _2536;
        }
        else
        {
            float _2663 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
            float _2664 = _2663 * _2378;
            float _2665 = _2663 * _2379;
            float _2666 = _2663 * _2380;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2543 < ((_2541 >> 12u) & 15u))
            {
                float _2639;
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2777 = _2526;
                float _2778 = _2528;
                float _2779 = _2530;
                float _2780 = _2532;
                float _2781 = _2534;
                float _2782 = _2536;
                uint _2783 = _2543;
                uint _2792;
                bool _2793;
                for (;;)
                {
                    _2792 = texelFetch(g_lightClassification, int((((_2418 << 5u) + (_2404 << 9u)) + (_2783 << 2u)) >> 2u)).x;
                    _2793 = _2792 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2793)
                    {
                        frontier_phi_69_pred = _2782;
                        frontier_phi_69_pred_1 = _2781;
                        frontier_phi_69_pred_2 = _2780;
                        frontier_phi_69_pred_3 = _2779;
                        frontier_phi_69_pred_4 = _2778;
                        frontier_phi_69_pred_5 = _2777;
                    }
                    else
                    {
                        float _2977;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _2990 = _2777;
                        float _2991 = _2778;
                        float _2992 = _2779;
                        float _2993 = _2780;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        uint _2996 = _2792;
                        uint _2997;
                        vec4 _3022;
                        float _3023;
                        vec4 _3038;
                        vec3 _3050;
                        vec4 _3065;
                        vec4 _3081;
                        float _3128;
                        bool _3129;
                        for (;;)
                        {
                            uint _3007 = ((_2783 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2996));
                            _2997 = (_2996 + 4294967295u) & _2996;
                            uint _3009 = _3007 * 40u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            _3023 = _3022.w;
                            uint _3025 = (_3007 * 40u) + 4u;
                            _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            uint _3040 = (_3007 * 40u) + 8u;
                            _3050 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x));
                            uint _3052 = (_3007 * 40u) + 16u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3068 = (_3007 * 40u) + 20u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3084 = (_3007 * 40u) + 24u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3103 = (_3007 * 40u) + 28u;
                            vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            _3128 = fma(_2380, _3116.z, fma(_2379, _3116.y, _3116.x * _2378)) + _3116.w;
                            _3129 = !((fma(_2380, _3097.z, fma(_2379, _3097.y, _3097.x * _2378)) + _3097.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3129)
                            {
                                float _3156 = _3022.x - _2378;
                                float _3157 = _3022.y - _2379;
                                float _3158 = _3022.z - _2380;
                                float _3159 = dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158));
                                float _3162 = inversesqrt(_3159);
                                float _3163 = _3162 * _3156;
                                float _3164 = _3162 * _3157;
                                float _3165 = _3162 * _3158;
                                float _3169 = 1.0 - (_3159 / (_3023 * _3023));
                                float _4218 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3174 = sqrt(_3159) * _3038.w;
                                float _3176 = 1.39999997615814208984375 / (_3174 + 1.39999997615814208984375);
                                float _3177 = _3176 * _3176;
                                float _3180 = ((1.0 - _3177) * dot(vec3(_3163, _3164, _3165), vec3(_486, _489, _492))) + _3177;
                                float _3183 = _3174 * _3174;
                                float _3187 = (fma(_2380, _3065.z, fma(_2379, _3065.y, _3065.x * _2378)) + _3065.w) / _3128;
                                float _3188 = (fma(_2380, _3081.z, fma(_2379, _3081.y, _3081.x * _2378)) + _3081.w) / _3128;
                                float _3192 = 1.0 - dot(vec2(_3187, _3188), vec2(_3187, _3188));
                                float _4234 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3194 = _3193 * (((isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))) * _3170) / ((_3183 * 0.699999988079071044921875) + 1.0));
                                float _3206 = exp2(log2(1.0 / ((_3183 * 3.5) + 5.0)) * 0.25);
                                float _3207 = 1.0 - _693;
                                float _3214 = sqrt(1.0 - ((1.0 - (_3207 * _3207)) * (1.0 - (_3206 * _3206))));
                                float _3215 = _3214 * _3214;
                                float _3216 = _3215 * _3215;
                                float _3217 = _3163 - _2664;
                                float _3218 = _3164 - _2665;
                                float _3219 = _3165 - _2666;
                                float _3223 = inversesqrt(dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219)));
                                float _3227 = dot(vec3(_486, _489, _492), vec3((-0.0) - _2664, (-0.0) - _2665, (-0.0) - _2666));
                                float _4245 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3230 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3231 = dot(vec3(_486, _489, _492), vec3(_3223 * _3217, _3223 * _3218, _3223 * _3219));
                                float _4256 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3234 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3238 = ((_3234 * _3234) * (_3216 + (-1.0))) + 1.0;
                                float _3239 = _3176 * _3215;
                                float _3240 = _3239 * _3239;
                                float _3246 = ((1.0 - _3240) * dot(vec3(_486, _489, _492), vec3(_3163, _3164, _3165))) + _3240;
                                float _4267 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3247 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3248 = 1.0 - _3215;
                                float _3258 = (0.5 / (((_3247 * ((_3230 * _3248) + _3215)) + 9.9999999392252902907785028219223e-09) + (((_3247 * _3248) + _3215) * _3230))) * _3247;
                                float _4278 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3268 = (_3193 * _3170) * (((_3216 * 3.1415927410125732421875) * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) / ((_3238 * _3238) * ((_3183 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3194 * _3038.z;
                                frontier_phi_75_pred_1 = _3194 * _3038.y;
                                frontier_phi_75_pred_2 = _3194 * _3038.x;
                                frontier_phi_75_pred_3 = _3268 * _3050.z;
                                frontier_phi_75_pred_4 = _3268 * _3050.y;
                                frontier_phi_75_pred_5 = _3268 * _3050.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3277 = frontier_phi_75_pred;
                            _3276 = frontier_phi_75_pred_1;
                            _3275 = frontier_phi_75_pred_2;
                            _3274 = frontier_phi_75_pred_3;
                            _3273 = frontier_phi_75_pred_4;
                            _3272 = frontier_phi_75_pred_5;
                            _2980 = _3275 + _2993;
                            _2981 = _3276 + _2994;
                            _2982 = _3277 + _2995;
                            _2977 = _3272 + _2990;
                            _2978 = _3273 + _2991;
                            _2979 = _3274 + _2992;
                            if (_2997 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2997;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2982;
                        frontier_phi_69_pred_1 = _2981;
                        frontier_phi_69_pred_2 = _2980;
                        frontier_phi_69_pred_3 = _2979;
                        frontier_phi_69_pred_4 = _2978;
                        frontier_phi_69_pred_5 = _2977;
                    }
                    _2649 = frontier_phi_69_pred;
                    _2647 = frontier_phi_69_pred_1;
                    _2645 = frontier_phi_69_pred_2;
                    _2643 = frontier_phi_69_pred_3;
                    _2641 = frontier_phi_69_pred_4;
                    _2639 = frontier_phi_69_pred_5;
                    uint _2784 = _2783 + 1u;
                    if (_2784 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2777 = _2639;
                        _2778 = _2641;
                        _2779 = _2643;
                        _2780 = _2645;
                        _2781 = _2647;
                        _2782 = _2649;
                        _2783 = _2784;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2649;
                frontier_phi_57_58_ladder_1 = _2647;
                frontier_phi_57_58_ladder_2 = _2645;
                frontier_phi_57_58_ladder_3 = _2643;
                frontier_phi_57_58_ladder_4 = _2641;
                frontier_phi_57_58_ladder_5 = _2639;
            }
            else
            {
                frontier_phi_57_58_ladder = _2536;
                frontier_phi_57_58_ladder_1 = _2534;
                frontier_phi_57_58_ladder_2 = _2532;
                frontier_phi_57_58_ladder_3 = _2530;
                frontier_phi_57_58_ladder_4 = _2528;
                frontier_phi_57_58_ladder_5 = _2526;
            }
            _2638 = frontier_phi_57_58_ladder_5;
            _2640 = frontier_phi_57_58_ladder_4;
            _2642 = frontier_phi_57_58_ladder_3;
            _2644 = frontier_phi_57_58_ladder_2;
            _2646 = frontier_phi_57_58_ladder_1;
            _2648 = frontier_phi_57_58_ladder;
        }
        float _2653 = isnan(1.0) ? _677 : (isnan(_677) ? 1.0 : min(_677, 1.0));
        _2436 = (_2653 * _2644) + _1870;
        _2438 = (_2653 * _2646) + _1872;
        _2440 = (_2653 * _2648) + _1874;
        _2442 = ((_2638 * _663) * _2653) + _2218;
        _2444 = ((_2640 * _664) * _2653) + _2220;
        _2446 = ((_2642 * _665) * _2653) + _2222;
    }
    else
    {
        _2436 = _1870;
        _2438 = _1872;
        _2440 = _1874;
        _2442 = _2218;
        _2444 = _2220;
        _2446 = _2222;
    }
    float _4294 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4305 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4316 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4327 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _2471 = cbInstanceData._m0[_568 + 6u].w * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)));
    float _2476 = _460 / cbSceneParam._m0[86u].x;
    float _2477 = _461 / cbSceneParam._m0[86u].y;
    vec4 _2491 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2476, _2477, (log2((isnan(cbSceneParam._m0[77u].w) ? _394 : (isnan(_394) ? cbSceneParam._m0[77u].w : min(_394, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2493 = _2491.x;
    float _2494 = _2491.y;
    float _2495 = _2491.z;
    float _2496 = _2491.w;
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    if (_394 > cbSceneParam._m0[78u].w)
    {
        float _2551 = isnan(_394) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _394 : min(cbSceneParam._m0[80u].w, _394));
        float _2552 = _2551 / _394;
        float _2563 = _2552 * _445;
        float _2564 = _446 * _2552;
        float _2565 = (-0.0) - _2564;
        float _2566 = _2552 * _447;
        float _2568 = (cbSceneParam._m0[77u].w * _2565) / _2551;
        float _2569 = _2568 + cbSceneParam._m0[79u].w;
        float _2570 = cbSceneParam._m0[79u].w - _2564;
        float _2576 = sqrt(((_2563 * _2563) + (_2564 * _2564)) + (_2566 * _2566));
        float _2579 = (1.0 - (cbSceneParam._m0[77u].w / _2551)) * _2576;
        float _2584 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2586 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2739;
        if (abs((_2565 - _2568) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2739 = ((((_2569 > 0.0) ? exp2(_2584 * _2569) : (2.0 - exp2(_2586 * _2569))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2579;
        }
        else
        {
            float _2699 = 1.0 / cbSceneParam._m0[80u].x;
            float _2700 = isnan(_2570) ? _2569 : (isnan(_2569) ? _2570 : max(_2569, _2570));
            float _2701 = isnan(_2570) ? _2569 : (isnan(_2569) ? _2570 : min(_2569, _2570));
            float _2710 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : min(_2700, 0.0));
            float _2711 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : min(_2701, 0.0));
            _2739 = ((abs(_2576 / _2565) * cbSceneParam._m0[80u].y) * ((((_2710 - _2711) * 2.0) - ((exp2(_2584 * (isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0)))) - exp2(_2584 * (isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0))))) * _2699)) - ((exp2(_2586 * _2710) - exp2(_2586 * _2711)) * _2699))) + (_2579 * cbSceneParam._m0[80u].z);
        }
        vec4 _2741 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2476, _2477, 1.0), 0.0);
        float _2750 = exp2((_2739 * (-1.44269502162933349609375)) * (1.0 - _2741.w));
        float _2751 = log2(_2750);
        float _2767 = log2(_2496);
        _2588 = (exp2(_2767 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].x)) * _2741.x) / cbSceneParam._m0[78u].x)) + _2493;
        _2590 = (exp2(_2767 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].y)) * _2741.y) / cbSceneParam._m0[78u].y)) + _2494;
        _2592 = (exp2(_2767 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].z)) * _2741.z) / cbSceneParam._m0[78u].z)) + _2495;
        _2594 = _2750 * _2496;
    }
    else
    {
        _2588 = _2493;
        _2590 = _2494;
        _2592 = _2495;
        _2594 = _2496;
    }
    float _2606 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2607 = _2606 == 3.0;
    float _2608 = log2(_2594);
    float _2615 = exp2(_2608 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2436 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _677))) + ((_2442 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1484)) * cbPerFrame._m0[3u].x));
    float _2616 = exp2(_2608 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2438 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _677))) + ((_2444 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1484)) * cbPerFrame._m0[3u].x));
    float _2617 = exp2(_2608 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2440 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _677))) + ((_2446 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1484)) * cbPerFrame._m0[3u].x));
    float _2626 = (_2606 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2626 * (_2607 ? _2615 : (_2615 + (cbSceneParam._m0[72u].w * _2588)));
    SV_Target.y = _2626 * (_2607 ? _2616 : (_2616 + (cbSceneParam._m0[72u].w * _2590)));
    SV_Target.z = _2626 * (_2607 ? _2617 : (_2617 + (cbSceneParam._m0[72u].w * _2592)));
    SV_Target.w = _2471;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2471;
}


