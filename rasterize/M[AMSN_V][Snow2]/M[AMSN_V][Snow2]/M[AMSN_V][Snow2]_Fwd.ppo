#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _894;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _238 = _233.z;
    float _242 = (_233.x * 2.0) + (-1.0);
    float _244 = (_233.y * 2.0) + (-1.0);
    float _245 = dot(vec2(_242, _244), vec2(_242, _244));
    float _3210 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _251 = sqrt(1.0 - (isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0))));
    float _254 = fma(_251, _211, fma(_244, _204, _242 * _190));
    float _257 = fma(_251, _212, fma(_244, _205, _242 * _191));
    float _260 = fma(_251, _213, fma(_244, _206, _242 * _192));
    float _264 = inversesqrt(dot(vec3(_254, _257, _260), vec3(_254, _257, _260)));
    float _272 = cbMtdParam._m0[9u].x + dot(vec4(_264 * _254, _264 * _257, _264 * _260, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _3221 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _273 = isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0));
    vec4 _285 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _301 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _303 = _301.x;
    float _304 = _301.y;
    float _305 = _301.z;
    float _312 = ((_285.x - _303) * _273) + _303;
    float _313 = ((_285.y - _304) * _273) + _304;
    float _314 = ((_285.z - _305) * _273) + _305;
    vec4 _326 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _333 = (_326.x * 2.0) + (-1.0);
    float _334 = (_326.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_333, _334), vec2(_333, _334));
    float _3232 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _343 = ((_326.z - _238) * _273) + _238;
    float _350 = ((_333 - _242) * _273) + _242;
    float _351 = ((_334 - _244) * _273) + _244;
    float _352 = ((sqrt(1.0 - (isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0)))) - _251) * _273) + _251;
    float _355 = fma(_352, _211, fma(_351, _204, _350 * _190));
    float _358 = fma(_352, _212, fma(_351, _205, _350 * _191));
    float _361 = fma(_352, _213, fma(_351, _206, _350 * _192));
    float _365 = inversesqrt(dot(vec3(_355, _358, _361), vec3(_355, _358, _361)));
    float _366 = _365 * _355;
    float _367 = _365 * _358;
    float _368 = _365 * _361;
    float _3243 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _369 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
    float _3254 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3265 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3276 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _388 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _430 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _440 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _430);
    float _441 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _430);
    float _442 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _430);
    float _446 = inversesqrt(dot(vec3(_440, _441, _442), vec3(_440, _441, _442)));
    float _447 = _440 * _446;
    float _448 = _441 * _446;
    float _449 = _442 * _446;
    float _455 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _456 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _477 = fma(_368, cbSceneParam._m0[5u].z, fma(_367, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _366));
    float _480 = fma(_368, cbSceneParam._m0[6u].z, fma(_367, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _366));
    float _483 = fma(_368, cbSceneParam._m0[7u].z, fma(_367, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _366));
    uint _496 = uint(roundEven(NORMAL.w)) * 13u;
    uint _499 = (_496 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _505 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0)))) * cbInstanceData._m0[_499].x;
    float _506 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0)))) * cbInstanceData._m0[_499].y;
    float _507 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0)))) * cbInstanceData._m0[_499].z;
    float _3287 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _508 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _3298 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _509 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    float _3309 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _510 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    vec4 _519 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _455, cbSceneParam._m0[86u].y * _456));
    float _522 = _519.x * TEXCOORD.z;
    float _523 = dot(vec3(_366, _367, _368), vec3(_447, _448, _449));
    float _526 = _523 * 2.0;
    float _530 = (_526 * _366) - _447;
    float _531 = (_526 * _367) - _448;
    float _532 = (_526 * _368) - _449;
    float _536 = abs(dot(vec3(_447, _448, _449), vec3(_366, _367, _368)));
    float _3320 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _538 = sqrt(_369);
    float _551 = exp2((_538 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_538 * 3.0));
    float _583 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _587 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _591 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _893;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _618 = fma(_591, cbModelParam._m0[26u].z, fma(_587, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _583));
        float _622 = fma(_591, cbModelParam._m0[27u].z, fma(_587, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _583));
        float _626 = fma(_591, cbModelParam._m0[28u].z, fma(_587, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _583));
        float _651 = _583 + _366;
        float _652 = _587 + _367;
        float _653 = _591 + _368;
        float _663 = fma(_653, cbModelParam._m0[26u].z, fma(_652, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _651)) - _618;
        float _664 = fma(_653, cbModelParam._m0[27u].z, fma(_652, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _651)) - _622;
        float _665 = fma(_653, cbModelParam._m0[28u].z, fma(_652, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _651)) - _626;
        float _669 = inversesqrt(dot(vec3(_663, _664, _665), vec3(_663, _664, _665)));
        float _682 = ((_669 * _663) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_618 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _683 = ((_669 * _664) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_622 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _684 = ((_669 * _665) / cbModelParam._m0[34u].z) + ((((((_626 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_682, _683, _684), 0.0);
        float _721 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_687.x + (-0.5));
        float _723 = _721 * (_687.y + (-0.5));
        float _724 = _721 * (_687.z + (-0.5));
        float _731 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_694.x + (-0.5));
        float _733 = _731 * (_694.y + (-0.5));
        float _734 = _731 * (_694.z + (-0.5));
        float _741 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_701.x + (-0.5));
        float _743 = _741 * (_701.y + (-0.5));
        float _744 = _741 * (_701.z + (-0.5));
        float _751 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_708.x + (-0.5));
        float _753 = _751 * (_708.y + (-0.5));
        float _754 = _751 * (_708.z + (-0.5));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = _722 * 0.5;
        float _759 = _732 * 0.5;
        float _760 = _742 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _775 = (dot(vec3(_366, _367, _368), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3346 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _785 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3357 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _787 = _786 * 2.0;
        float _791 = (1.0 - _786) / (_786 + 1.0);
        float _3368 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _801 = ((((1.0 - _792) * (_787 + 2.0)) * exp2(log2(isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * (_787 + 1.0))) + _792) * _755;
        float _802 = _723 * 0.5;
        float _803 = _733 * 0.5;
        float _804 = _743 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _818 = (dot(vec3(_366, _367, _368), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _827 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3401 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_829 + 1.0))) + _834) * _756;
        float _844 = _724 * 0.5;
        float _845 = _734 * 0.5;
        float _846 = _744 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _860 = (dot(vec3(_366, _367, _368), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3412 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _869 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3423 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3434 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * (_871 + 1.0))) + _876) * _757;
        _893 = _724;
        _895 = _723;
        _896 = _722;
        _897 = _734;
        _898 = _733;
        _899 = _732;
        _900 = _744;
        _901 = _743;
        _902 = _742;
        _903 = _757;
        _904 = _756;
        _905 = _755;
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0)));
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
    }
    else
    {
        _893 = _894;
        _895 = _894;
        _896 = _894;
        _897 = _894;
        _898 = _894;
        _899 = _894;
        _900 = _894;
        _901 = _894;
        _902 = _894;
        _903 = _894;
        _904 = _894;
        _905 = _894;
        _906 = 0.0;
        _907 = 0.0;
        _908 = 0.0;
    }
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _934 = fma(_591, cbModelParam._m0[30u].z, fma(_587, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _583));
        float _938 = fma(_591, cbModelParam._m0[31u].z, fma(_587, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _583));
        float _942 = fma(_591, cbModelParam._m0[32u].z, fma(_587, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _583));
        float _965 = _583 + _366;
        float _966 = _587 + _367;
        float _967 = _591 + _368;
        float _977 = fma(_967, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965)) - _934;
        float _978 = fma(_967, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965)) - _938;
        float _979 = fma(_967, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965)) - _942;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_934 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_938 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[35u].z) + ((((((_942 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1033 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_1000.x + (-0.5));
        float _1035 = _1033 * (_1000.y + (-0.5));
        float _1036 = _1033 * (_1000.z + (-0.5));
        float _1043 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1007.x + (-0.5));
        float _1045 = _1043 * (_1007.y + (-0.5));
        float _1046 = _1043 * (_1007.z + (-0.5));
        float _1053 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1014.x + (-0.5));
        float _1055 = _1053 * (_1014.y + (-0.5));
        float _1056 = _1053 * (_1014.z + (-0.5));
        float _1063 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1021.x + (-0.5));
        float _1065 = _1063 * (_1021.y + (-0.5));
        float _1066 = _1063 * (_1021.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_366, _367, _368), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3497 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_1097 + 1.0))) + _1102) * _1067;
        float _1112 = _1035 * 0.5;
        float _1113 = _1045 * 0.5;
        float _1114 = _1055 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_366, _367, _368), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3530 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_1139 + 1.0))) + _1144) * _1068;
        float _1154 = _1036 * 0.5;
        float _1155 = _1046 * 0.5;
        float _1156 = _1056 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_366, _367, _368), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3563 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_1181 + 1.0))) + _1186) * _1069;
        _1203 = _1036;
        _1204 = _1035;
        _1205 = _1034;
        _1206 = _1046;
        _1207 = _1045;
        _1208 = _1044;
        _1209 = _1056;
        _1210 = _1055;
        _1211 = _1054;
        _1212 = _1069;
        _1213 = _1068;
        _1214 = _1067;
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
    }
    else
    {
        _1203 = _894;
        _1204 = _894;
        _1205 = _894;
        _1206 = _894;
        _1207 = _894;
        _1208 = _894;
        _1209 = _894;
        _1210 = _894;
        _1211 = _894;
        _1212 = _894;
        _1213 = _894;
        _1214 = _894;
        _1215 = 0.0;
        _1216 = 0.0;
        _1217 = 0.0;
    }
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _906)) + _906;
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _907)) + _907;
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _908)) + _908;
    float _1250 = fma(_1229, cbSceneParam._m0[89u].z, fma(_1228, cbSceneParam._m0[89u].y, _1227 * cbSceneParam._m0[89u].x));
    float _1253 = fma(_1229, cbSceneParam._m0[90u].z, fma(_1228, cbSceneParam._m0[90u].y, _1227 * cbSceneParam._m0[90u].x));
    float _1256 = fma(_1229, cbSceneParam._m0[91u].z, fma(_1228, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1227));
    float _1271 = _530 * 0.5;
    float _1272 = _531 * 0.5;
    float _1273 = _532 * 0.5;
    float _1274 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1277 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1280 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1314;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1287 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_893, _897, _900, _903));
        float _1291 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_895, _898, _901, _904));
        float _1295 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_896, _899, _902, _905));
        float _1302 = dot(vec4(cbModelParam._m0[39u]), vec4(_1271, _1272, _1273, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1302) ? 0.0 : (isnan(0.0) ? _1302 : max(0.0, _1302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1325;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1316 = dot(vec4(cbModelParam._m0[40u]), vec4(_1271, _1272, _1273, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1316) ? 0.0 : (isnan(0.0) ? _1316 : max(0.0, _1316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1329 = (_1325 * cbModelParam._m0[1u].x) + (_1314 * (1.0 - cbModelParam._m0[1u].x));
    float _1339 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _369);
    float _1340 = isnan(_1339) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1339 : min(cbModelParam._m0[25u].z, _1339));
    float _1422;
    float _1424;
    float _1426;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1389 = fma(_591, cbModelParam._m0[13u].z, fma(_587, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _583)) + cbModelParam._m0[13u].w;
        float _1393 = fma(_591, cbModelParam._m0[14u].z, fma(_587, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _583)) + cbModelParam._m0[14u].w;
        float _1397 = fma(_591, cbModelParam._m0[15u].z, fma(_587, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _583)) + cbModelParam._m0[15u].w;
        float _1400 = fma(_532, cbModelParam._m0[13u].z, fma(_531, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _530));
        float _1403 = fma(_532, cbModelParam._m0[14u].z, fma(_531, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _530));
        float _1406 = fma(_532, cbModelParam._m0[15u].z, fma(_531, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _530));
        float _1434;
        if (_1400 > 0.0)
        {
            _1434 = abs((1.0 - _1389) / _1400);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1389 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1434 = frontier_phi_16_14_ladder;
        }
        float _1640;
        if (_1403 > 0.0)
        {
            _1640 = abs((1.0 - _1393) / _1403);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1393 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1640 = frontier_phi_25_21_ladder;
        }
        float _1883;
        if (_1406 > 0.0)
        {
            _1883 = abs((1.0 - _1397) / _1406);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1397 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1883 = frontier_phi_37_32_ladder;
        }
        float _1885 = isnan(_1640) ? _1434 : (isnan(_1434) ? _1640 : min(_1434, _1640));
        float _1886 = isnan(_1883) ? _1885 : (isnan(_1885) ? _1883 : min(_1885, _1883));
        float _1890 = (_1886 * _1400) + _1389;
        float _1891 = (_1886 * _1403) + _1393;
        float _1892 = (_1886 * _1406) + _1397;
        float _1893 = _1886 * 9.9999997473787516355514526367188e-05;
        float _1895 = (-1.0) - _1893;
        float _1897 = _1893 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1892 > _1897) || ((_1892 < _1895) || ((_1891 > _1897) || ((_1891 < _1895) || ((_1890 < _1895) || (_1890 > _1897))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1892, cbModelParam._m0[9u].z, fma(_1891, cbModelParam._m0[9u].y, _1890 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1892, cbModelParam._m0[10u].z, fma(_1891, cbModelParam._m0[10u].y, _1890 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1892, cbModelParam._m0[11u].z, fma(_1891, cbModelParam._m0[11u].y, _1890 * cbModelParam._m0[11u].x))), _1340);
            frontier_phi_15_37_ladder = _2016.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2016.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2016.x * cbModelParam._m0[1u].y;
        }
        _1422 = frontier_phi_15_37_ladder_2;
        _1424 = frontier_phi_15_37_ladder_1;
        _1426 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_530, _531, _532), _1340);
        _1422 = _1410.x * cbModelParam._m0[1u].y;
        _1424 = _1410.y * cbModelParam._m0[1u].y;
        _1426 = _1410.z * cbModelParam._m0[1u].y;
    }
    float _1430 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _369);
    float _1431 = isnan(_1430) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1430 : min(cbModelParam._m0[25u].w, _1430));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1488 = fma(_591, cbModelParam._m0[21u].z, fma(_587, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _583)) + cbModelParam._m0[21u].w;
        float _1492 = fma(_591, cbModelParam._m0[22u].z, fma(_587, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _583)) + cbModelParam._m0[22u].w;
        float _1496 = fma(_591, cbModelParam._m0[23u].z, fma(_587, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _583)) + cbModelParam._m0[23u].w;
        float _1499 = fma(_532, cbModelParam._m0[21u].z, fma(_531, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _530));
        float _1502 = fma(_532, cbModelParam._m0[22u].z, fma(_531, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _530));
        float _1505 = fma(_532, cbModelParam._m0[23u].z, fma(_531, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _530));
        float _1645;
        if (_1499 > 0.0)
        {
            _1645 = abs((1.0 - _1488) / _1499);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1488 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1645 = frontier_phi_27_23_ladder;
        }
        float _1910;
        if (_1502 > 0.0)
        {
            _1910 = abs((1.0 - _1492) / _1502);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1492 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1910 = frontier_phi_39_34_ladder;
        }
        float _2115;
        if (_1505 > 0.0)
        {
            _2115 = abs((1.0 - _1496) / _1505);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1496 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2115 = frontier_phi_48_45_ladder;
        }
        float _2117 = isnan(_1910) ? _1645 : (isnan(_1645) ? _1910 : min(_1645, _1910));
        float _2118 = isnan(_2115) ? _2117 : (isnan(_2117) ? _2115 : min(_2117, _2115));
        float _2122 = (_2118 * _1499) + _1488;
        float _2123 = (_2118 * _1502) + _1492;
        float _2124 = (_2118 * _1505) + _1496;
        float _2125 = _2118 * 9.9999997473787516355514526367188e-05;
        float _2126 = (-1.0) - _2125;
        float _2128 = _2125 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2124 > _2128) || ((_2124 < _2126) || ((_2123 > _2128) || ((_2123 < _2126) || ((_2122 < _2126) || (_2122 > _2128))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2124, cbModelParam._m0[17u].z, fma(_2123, cbModelParam._m0[17u].y, _2122 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2124, cbModelParam._m0[18u].z, fma(_2123, cbModelParam._m0[18u].y, _2122 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2124, cbModelParam._m0[19u].z, fma(_2123, cbModelParam._m0[19u].y, _2122 * cbModelParam._m0[19u].x))), _1431);
            frontier_phi_24_48_ladder = _2322.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2322.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2322.x * cbModelParam._m0[1u].z;
        }
        _1524 = frontier_phi_24_48_ladder_2;
        _1526 = frontier_phi_24_48_ladder_1;
        _1528 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_530, _531, _532), _1431);
        _1524 = _1508.x * cbModelParam._m0[1u].z;
        _1526 = _1508.y * cbModelParam._m0[1u].z;
        _1528 = _1508.z * cbModelParam._m0[1u].z;
    }
    float _1540 = ((((1.0 - _551) * ((_538 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_551 * _538)) * _522;
    float _1541 = _1540 * ((cbModelParam._m0[1u].w * (_1524 - _1422)) + _1422);
    float _1542 = _1540 * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1543 = _1540 * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1546 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1549 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1552 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, _1541 * cbSceneParam._m0[91u].x));
    uvec4 _1562 = floatBitsToUint(cbInstanceData._m0[_496 + 5u]);
    uint _1564 = _1562.x * 14u;
    uint _1565 = _1564 + 13u;
    float _1572 = _522 + (-1.0);
    float _1577 = (cbLight._m0[_1565].x * _1572) + 1.0;
    float _1578 = (cbLight._m0[_1565].y * _1572) + 1.0;
    float _1579 = (cbLight._m0[_1565].z * _1572) + 1.0;
    float _1580 = (cbLight._m0[_1565].w * _1572) + 1.0;
    uint _1581 = _1564 + 5u;
    float _1587 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
    uint _1591 = _1564 + 4u;
    float _1598 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
    uint _1602 = _1564 | 1u;
    float _1613 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_366, _367, _368));
    float _1616 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_366, _367, _368));
    float _3699 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _3710 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _1621 = (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.3183098733425140380859375;
    float _1623 = (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * 0.3183098733425140380859375;
    float _1630 = ((cbLight._m0[_1581].x * _1587) * _1623) + ((cbLight._m0[_1591].x * _1598) * _1621);
    float _1631 = ((_1587 * cbLight._m0[_1581].y) * _1623) + ((_1598 * cbLight._m0[_1591].y) * _1621);
    float _1632 = ((_1587 * cbLight._m0[_1581].z) * _1623) + ((_1598 * cbLight._m0[_1591].z) * _1621);
    uvec4 _1637 = floatBitsToUint(cbLight._m0[_1564 + 12u]);
    bool _1639 = _1637.x == 0u;
    float _1650;
    float _1652;
    float _1654;
    if (_1639)
    {
        _1650 = _1630;
        _1652 = _1631;
        _1654 = _1632;
    }
    else
    {
        uint _1658 = _1564 + 6u;
        float _1674 = (dot(vec3(cbLight._m0[_1564 + 2u].xyz), vec3(_366, _367, _368)) * 0.5) + 0.5;
        float _1675 = _1674 * _1674;
        float _3721 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1677 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1650 = (((cbLight._m0[_1658].x * 0.3183098733425140380859375) * _1676) * _1677) + _1630;
        _1652 = (((cbLight._m0[_1658].y * 0.3183098733425140380859375) * _1676) * _1677) + _1631;
        _1654 = (((cbLight._m0[_1658].z * 0.3183098733425140380859375) * _1676) * _1677) + _1632;
    }
    bool _1657 = _1637.y == 0u;
    float _1695;
    float _1697;
    float _1699;
    if (_1657)
    {
        _1695 = _1650;
        _1697 = _1652;
        _1699 = _1654;
    }
    else
    {
        uint _1854 = _1564 + 7u;
        float _1870 = (dot(vec3(cbLight._m0[_1564 + 3u].xyz), vec3(_366, _367, _368)) * 0.5) + 0.5;
        float _1871 = _1870 * _1870;
        float _3737 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1873 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        _1695 = (((cbLight._m0[_1854].x * 0.3183098733425140380859375) * _1872) * _1873) + _1650;
        _1697 = (((cbLight._m0[_1854].y * 0.3183098733425140380859375) * _1872) * _1873) + _1652;
        _1699 = (((cbLight._m0[_1854].z * 0.3183098733425140380859375) * _1872) * _1873) + _1654;
    }
    uint _1702 = _1564 + 8u;
    float _1715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1564].w)) * _369) * 0.949999988079071044921875);
    float _1716 = _1715 * _1715;
    float _1717 = cbLight._m0[_1564].x + _447;
    float _1718 = cbLight._m0[_1564].y + _448;
    float _1719 = cbLight._m0[_1564].z + _449;
    float _1723 = inversesqrt(dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719)));
    float _1724 = _1723 * _1717;
    float _1725 = _1723 * _1718;
    float _1726 = _1723 * _1719;
    float _1727 = dot(vec3(_366, _367, _368), vec3(cbLight._m0[_1564].xyz));
    float _3753 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1730 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _1731 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _1732 = dot(vec3(_366, _367, _368), vec3(_1724, _1725, _1726));
    float _3775 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1735 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _1736 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_1724, _1725, _1726));
    float _3786 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1740 = _1716 * _1716;
    float _1744 = ((_1735 * _1735) * (_1740 + (-1.0))) + 1.0;
    float _1755 = (exp2(log2(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1756 = 1.0 - _1716;
    float _1767 = (0.5 / (((_1731 * ((_1730 * _1756) + _1716)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1756) + _1716) * _1730))) * _1730;
    float _3797 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1769 = (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1740 / ((_1744 * _1744) * 3.141590118408203125));
    uint _1780 = _1564 + 9u;
    float _1791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1602].w)) * _369) * 0.949999988079071044921875);
    float _1792 = _1791 * _1791;
    float _1793 = cbLight._m0[_1602].x + _447;
    float _1794 = cbLight._m0[_1602].y + _448;
    float _1795 = cbLight._m0[_1602].z + _449;
    float _1799 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
    float _1800 = _1799 * _1793;
    float _1801 = _1799 * _1794;
    float _1802 = _1799 * _1795;
    float _1803 = dot(vec3(_366, _367, _368), vec3(cbLight._m0[_1602].xyz));
    float _3808 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _1807 = dot(vec3(_366, _367, _368), vec3(_1800, _1801, _1802));
    float _3819 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _1811 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_1800, _1801, _1802));
    float _3830 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1815 = _1792 * _1792;
    float _1819 = ((_1810 * _1810) * (_1815 + (-1.0))) + 1.0;
    float _1828 = (exp2(log2(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1829 = 1.0 - _1792;
    float _1839 = (0.5 / (((_1731 * ((_1806 * _1829) + _1792)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1829) + _1792) * _1806))) * _1806;
    float _3841 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1841 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1815 / ((_1819 * _1819) * 3.141590118408203125));
    float _1851 = (((_1828 * cbLight._m0[_1780].x) * _1841) * _1587) + (((_1755 * cbLight._m0[_1702].x) * _1769) * _1598);
    float _1852 = (((_1828 * cbLight._m0[_1780].y) * _1841) * _1587) + (((_1755 * cbLight._m0[_1702].y) * _1769) * _1598);
    float _1853 = (((_1828 * cbLight._m0[_1780].z) * _1841) * _1587) + (((_1755 * cbLight._m0[_1702].z) * _1769) * _1598);
    float _1915;
    float _1917;
    float _1919;
    if (_1639)
    {
        _1915 = _1851;
        _1917 = _1852;
        _1919 = _1853;
    }
    else
    {
        uint _1921 = _1564 + 2u;
        uint _1925 = _1564 + 10u;
        float _1939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _369) * 0.949999988079071044921875);
        float _1940 = _1939 * _1939;
        float _1941 = cbLight._m0[_1921].x + _447;
        float _1942 = cbLight._m0[_1921].y + _448;
        float _1943 = cbLight._m0[_1921].z + _449;
        float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
        float _1948 = _1947 * _1941;
        float _1949 = _1947 * _1942;
        float _1950 = _1947 * _1943;
        float _1951 = dot(vec3(_366, _367, _368), vec3(cbLight._m0[_1921].xyz));
        float _3852 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1954 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1955 = dot(vec3(_366, _367, _368), vec3(_1948, _1949, _1950));
        float _3863 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1958 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1959 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_1948, _1949, _1950));
        float _3874 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1963 = _1940 * _1940;
        float _1967 = ((_1958 * _1958) * (_1963 + (-1.0))) + 1.0;
        float _1976 = (exp2(log2(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1977 = 1.0 - _1940;
        float _1987 = (0.5 / (((_1731 * ((_1954 * _1977) + _1940)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1977) + _1940) * _1954))) * _1954;
        float _3885 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1989 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1963 / ((_1967 * _1967) * 3.141590118408203125));
        float _1990 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1915 = (((_1976 * cbLight._m0[_1925].x) * _1989) * _1990) + _1851;
        _1917 = (((_1976 * cbLight._m0[_1925].y) * _1989) * _1990) + _1852;
        _1919 = (((_1976 * cbLight._m0[_1925].z) * _1989) * _1990) + _1853;
    }
    float _2025;
    float _2027;
    float _2029;
    if (_1657)
    {
        _2025 = _1915;
        _2027 = _1917;
        _2029 = _1919;
    }
    else
    {
        uint _2036 = _1564 + 3u;
        uint _2040 = _1564 + 11u;
        float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _369) * 0.949999988079071044921875);
        float _2055 = _2054 * _2054;
        float _2056 = cbLight._m0[_2036].x + _447;
        float _2057 = cbLight._m0[_2036].y + _448;
        float _2058 = cbLight._m0[_2036].z + _449;
        float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
        float _2063 = _2062 * _2056;
        float _2064 = _2062 * _2057;
        float _2065 = _2062 * _2058;
        float _2066 = dot(vec3(_366, _367, _368), vec3(cbLight._m0[_2036].xyz));
        float _3901 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _2070 = dot(vec3(_366, _367, _368), vec3(_2063, _2064, _2065));
        float _3912 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _2074 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2063, _2064, _2065));
        float _3923 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2078 = _2055 * _2055;
        float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
        float _2091 = (exp2(log2(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2092 = 1.0 - _2055;
        float _2102 = (0.5 / (((_1731 * ((_2069 * _2092) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _2092) + _2055) * _2069))) * _2069;
        float _3934 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2104 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
        float _2105 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        _2025 = (((_2091 * cbLight._m0[_2040].x) * _2104) * _2105) + _1915;
        _2027 = (((_2091 * cbLight._m0[_2040].y) * _2104) * _2105) + _1917;
        _2029 = (((_2091 * cbLight._m0[_2040].z) * _2104) * _2105) + _1919;
    }
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    if (_1562.y == 0u)
    {
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2180;
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2180;
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2180;
        uvec4 _2195 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2196 = _2195.x;
        uint _2207 = uint((float(_2195.y) * floor(float(uint(cbSceneParam._m0[85u].y * _456) / _2196))) + floor(float(uint(cbSceneParam._m0[85u].x * _455) / _2196)));
        float _2217 = (log2(_2183 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2218 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        uint _2221 = uint(isnan(14.0) ? _2218 : (isnan(_2218) ? 14.0 : min(_2218, 14.0)));
        uvec4 _2226 = texelFetch(g_lightClusterGridBuffer, int(((_2221 << 2u) + (_2207 << 6u)) >> 2u));
        uint _2227 = _2226.x;
        uint _2228 = _2195.z;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        if (((((1u << ((_2228 >> 4u) & 15u)) + 4294967295u) & _2227) == 0u) || ((_2228 & 240u) == 0u))
        {
            _2327 = 0.0;
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
        }
        else
        {
            float _2328;
            float _2330;
            float _2332;
            float _2334;
            float _2336;
            float _2338;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            uint _2477 = 0u;
            uint _2486;
            bool _2487;
            for (;;)
            {
                _2486 = texelFetch(g_lightClassification, int((((_2221 << 5u) + (_2207 << 9u)) + (_2477 << 2u)) >> 2u)).x;
                _2487 = _2486 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2487)
                {
                    frontier_phi_63_pred = _2476;
                    frontier_phi_63_pred_1 = _2475;
                    frontier_phi_63_pred_2 = _2474;
                    frontier_phi_63_pred_3 = _2473;
                    frontier_phi_63_pred_4 = _2472;
                    frontier_phi_63_pred_5 = _2471;
                }
                else
                {
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    uint _2601;
                    _2595 = _2471;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2474;
                    _2599 = _2475;
                    _2600 = _2476;
                    _2601 = _2486;
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    for (;;)
                    {
                        uint _2605 = uint(findLSB(_2601)) + (_2477 << 5u);
                        uint _2602 = (_2601 + 4294967295u) & _2601;
                        uint _2607 = _2605 * 48u;
                        vec4 _2621 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2607)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 3u)).x));
                        uint _2627 = (_2605 * 48u) + 4u;
                        vec4 _2640 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2627)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 3u)).x));
                        uint _2646 = (_2605 * 48u) + 8u;
                        vec3 _2657 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x));
                        float _2661 = _2621.x - _2181;
                        float _2662 = _2621.y - _2182;
                        float _2663 = _2621.z - _2183;
                        float _2664 = dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663));
                        float _2667 = inversesqrt(_2664);
                        float _2668 = _2667 * _2661;
                        float _2669 = _2667 * _2662;
                        float _2670 = _2667 * _2663;
                        float _2671 = dot(vec3(_477, _480, _483), vec3(_2668, _2669, _2670));
                        float _2676 = 1.0 - (_2664 * _2621.w);
                        float _3960 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
                        float _2677 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                        float _2678 = sqrt(_2664) * _2640.w;
                        float _2681 = 1.39999997615814208984375 / (_2678 + 1.39999997615814208984375);
                        float _2682 = _2681 * _2681;
                        float _2685 = ((1.0 - _2682) * _2671) + _2682;
                        float _2688 = _2678 * _2678;
                        float _2692 = ((isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0))) * _2677) / ((_2688 * 0.699999988079071044921875) + 1.0);
                        float _2696 = (-0.0) - _2181;
                        float _2697 = (-0.0) - _2182;
                        float _2698 = (-0.0) - _2183;
                        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
                        float _2703 = _2702 * _2696;
                        float _2704 = _2702 * _2697;
                        float _2705 = _2702 * _2698;
                        float _2713 = exp2(log2(1.0 / ((_2688 * 3.5) + 5.0)) * 0.25);
                        float _2714 = 1.0 - _538;
                        float _2721 = sqrt(1.0 - ((1.0 - (_2714 * _2714)) * (1.0 - (_2713 * _2713))));
                        float _2722 = _2721 * _2721;
                        float _2723 = _2722 * _2722;
                        float _2724 = _2703 + _2668;
                        float _2725 = _2704 + _2669;
                        float _2726 = _2705 + _2670;
                        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
                        float _2734 = dot(vec3(_477, _480, _483), vec3(_2703, _2704, _2705));
                        float _3976 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2737 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
                        float _2738 = dot(vec3(_477, _480, _483), vec3(_2730 * _2724, _2730 * _2725, _2730 * _2726));
                        float _3987 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2741 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                        float _2745 = ((_2741 * _2741) * (_2723 + (-1.0))) + 1.0;
                        float _2746 = _2681 * _2722;
                        float _2747 = _2746 * _2746;
                        float _2750 = ((1.0 - _2747) * _2671) + _2747;
                        float _3998 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2751 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _2752 = 1.0 - _2722;
                        float _2762 = (0.5 / (((_2751 * ((_2737 * _2752) + _2722)) + 9.9999999392252902907785028219223e-09) + (((_2751 * _2752) + _2722) * _2737))) * _2751;
                        float _4009 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2773 = (((_2723 * 3.1415927410125732421875) * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) / ((_2745 * _2745) * ((_2688 * 2.1991131305694580078125) + 3.141590118408203125))) * _2677;
                        _2530 = (_2692 * _2640.x) + _2598;
                        _2531 = (_2692 * _2640.y) + _2599;
                        _2532 = (_2692 * _2640.z) + _2600;
                        _2527 = (_2773 * _2657.x) + _2595;
                        _2528 = (_2773 * _2657.y) + _2596;
                        _2529 = (_2773 * _2657.z) + _2597;
                        if (_2602 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2595 = _2527;
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2530;
                            _2599 = _2531;
                            _2600 = _2532;
                            _2601 = _2602;
                        }
                    }
                    frontier_phi_63_pred = _2532;
                    frontier_phi_63_pred_1 = _2531;
                    frontier_phi_63_pred_2 = _2530;
                    frontier_phi_63_pred_3 = _2529;
                    frontier_phi_63_pred_4 = _2528;
                    frontier_phi_63_pred_5 = _2527;
                }
                _2338 = frontier_phi_63_pred;
                _2336 = frontier_phi_63_pred_1;
                _2334 = frontier_phi_63_pred_2;
                _2332 = frontier_phi_63_pred_3;
                _2330 = frontier_phi_63_pred_4;
                _2328 = frontier_phi_63_pred_5;
                uint _2478 = _2477 + 1u;
                if (_2478 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2471 = _2328;
                    _2472 = _2330;
                    _2473 = _2332;
                    _2474 = _2334;
                    _2475 = _2336;
                    _2476 = _2338;
                    _2477 = _2478;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2327 = _2328;
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
        }
        uvec4 _2341 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2342 = _2341.z;
        uint _2344 = (_2342 >> 8u) & 15u;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        if (((4294967295u << _2344) & _2227) == 0u)
        {
            _2439 = _2327;
            _2441 = _2329;
            _2443 = _2331;
            _2445 = _2333;
            _2447 = _2335;
            _2449 = _2337;
        }
        else
        {
            float _2464 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
            float _2465 = _2464 * _2181;
            float _2466 = _2464 * _2182;
            float _2467 = _2464 * _2183;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2344 < ((_2342 >> 12u) & 15u))
            {
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2448;
                float _2450;
                float _2578 = _2327;
                float _2579 = _2329;
                float _2580 = _2331;
                float _2581 = _2333;
                float _2582 = _2335;
                float _2583 = _2337;
                uint _2584 = _2344;
                uint _2593;
                bool _2594;
                for (;;)
                {
                    _2593 = texelFetch(g_lightClassification, int((((_2221 << 5u) + (_2207 << 9u)) + (_2584 << 2u)) >> 2u)).x;
                    _2594 = _2593 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2594)
                    {
                        frontier_phi_69_pred = _2583;
                        frontier_phi_69_pred_1 = _2582;
                        frontier_phi_69_pred_2 = _2581;
                        frontier_phi_69_pred_3 = _2580;
                        frontier_phi_69_pred_4 = _2579;
                        frontier_phi_69_pred_5 = _2578;
                    }
                    else
                    {
                        float _2778;
                        float _2779;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _2791 = _2578;
                        float _2792 = _2579;
                        float _2793 = _2580;
                        float _2794 = _2581;
                        float _2795 = _2582;
                        float _2796 = _2583;
                        uint _2797 = _2593;
                        uint _2798;
                        vec4 _2823;
                        float _2824;
                        vec4 _2839;
                        vec3 _2851;
                        vec4 _2867;
                        vec4 _2883;
                        float _2930;
                        bool _2931;
                        for (;;)
                        {
                            uint _2808 = ((_2584 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2797));
                            _2798 = (_2797 + 4294967295u) & _2797;
                            uint _2810 = _2808 * 40u;
                            _2823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 3u)).x));
                            _2824 = _2823.w;
                            uint _2826 = (_2808 * 40u) + 4u;
                            _2839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 3u)).x));
                            uint _2841 = (_2808 * 40u) + 8u;
                            _2851 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x));
                            uint _2854 = (_2808 * 40u) + 16u;
                            _2867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 3u)).x));
                            uint _2870 = (_2808 * 40u) + 20u;
                            _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            uint _2886 = (_2808 * 40u) + 24u;
                            vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2905 = (_2808 * 40u) + 28u;
                            vec4 _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            _2930 = fma(_2183, _2918.z, fma(_2182, _2918.y, _2918.x * _2181)) + _2918.w;
                            _2931 = !((fma(_2183, _2899.z, fma(_2182, _2899.y, _2899.x * _2181)) + _2899.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2931)
                            {
                                float _2958 = _2823.x - _2181;
                                float _2959 = _2823.y - _2182;
                                float _2960 = _2823.z - _2183;
                                float _2961 = dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960));
                                float _2964 = inversesqrt(_2961);
                                float _2965 = _2964 * _2958;
                                float _2966 = _2964 * _2959;
                                float _2967 = _2964 * _2960;
                                float _2971 = 1.0 - (_2961 / (_2824 * _2824));
                                float _4020 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                                float _2972 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _2976 = sqrt(_2961) * _2839.w;
                                float _2978 = 1.39999997615814208984375 / (_2976 + 1.39999997615814208984375);
                                float _2979 = _2978 * _2978;
                                float _2982 = ((1.0 - _2979) * dot(vec3(_2965, _2966, _2967), vec3(_477, _480, _483))) + _2979;
                                float _2985 = _2976 * _2976;
                                float _2989 = (fma(_2183, _2867.z, fma(_2182, _2867.y, _2867.x * _2181)) + _2867.w) / _2930;
                                float _2990 = (fma(_2183, _2883.z, fma(_2182, _2883.y, _2883.x * _2181)) + _2883.w) / _2930;
                                float _2994 = 1.0 - dot(vec2(_2989, _2990), vec2(_2989, _2990));
                                float _4036 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _2995 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                                float _2996 = _2995 * (((isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0))) * _2972) / ((_2985 * 0.699999988079071044921875) + 1.0));
                                float _3008 = exp2(log2(1.0 / ((_2985 * 3.5) + 5.0)) * 0.25);
                                float _3009 = 1.0 - _538;
                                float _3016 = sqrt(1.0 - ((1.0 - (_3009 * _3009)) * (1.0 - (_3008 * _3008))));
                                float _3017 = _3016 * _3016;
                                float _3018 = _3017 * _3017;
                                float _3019 = _2965 - _2465;
                                float _3020 = _2966 - _2466;
                                float _3021 = _2967 - _2467;
                                float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                                float _3029 = dot(vec3(_477, _480, _483), vec3((-0.0) - _2465, (-0.0) - _2466, (-0.0) - _2467));
                                float _4047 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3032 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                                float _3033 = dot(vec3(_477, _480, _483), vec3(_3025 * _3019, _3025 * _3020, _3025 * _3021));
                                float _4058 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3036 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3040 = ((_3036 * _3036) * (_3018 + (-1.0))) + 1.0;
                                float _3041 = _2978 * _3017;
                                float _3042 = _3041 * _3041;
                                float _3048 = ((1.0 - _3042) * dot(vec3(_477, _480, _483), vec3(_2965, _2966, _2967))) + _3042;
                                float _4069 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3049 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3050 = 1.0 - _3017;
                                float _3060 = (0.5 / (((_3049 * ((_3032 * _3050) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_3049 * _3050) + _3017) * _3032))) * _3049;
                                float _4080 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3070 = (_2995 * _2972) * (((_3018 * 3.1415927410125732421875) * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) / ((_3040 * _3040) * ((_2985 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2996 * _2839.z;
                                frontier_phi_75_pred_1 = _2996 * _2839.y;
                                frontier_phi_75_pred_2 = _2996 * _2839.x;
                                frontier_phi_75_pred_3 = _3070 * _2851.z;
                                frontier_phi_75_pred_4 = _3070 * _2851.y;
                                frontier_phi_75_pred_5 = _3070 * _2851.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3079 = frontier_phi_75_pred;
                            _3078 = frontier_phi_75_pred_1;
                            _3077 = frontier_phi_75_pred_2;
                            _3076 = frontier_phi_75_pred_3;
                            _3075 = frontier_phi_75_pred_4;
                            _3074 = frontier_phi_75_pred_5;
                            _2781 = _3077 + _2794;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            _2778 = _3074 + _2791;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            if (_2798 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2798;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2783;
                        frontier_phi_69_pred_1 = _2782;
                        frontier_phi_69_pred_2 = _2781;
                        frontier_phi_69_pred_3 = _2780;
                        frontier_phi_69_pred_4 = _2779;
                        frontier_phi_69_pred_5 = _2778;
                    }
                    _2450 = frontier_phi_69_pred;
                    _2448 = frontier_phi_69_pred_1;
                    _2446 = frontier_phi_69_pred_2;
                    _2444 = frontier_phi_69_pred_3;
                    _2442 = frontier_phi_69_pred_4;
                    _2440 = frontier_phi_69_pred_5;
                    uint _2585 = _2584 + 1u;
                    if (_2585 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2578 = _2440;
                        _2579 = _2442;
                        _2580 = _2444;
                        _2581 = _2446;
                        _2582 = _2448;
                        _2583 = _2450;
                        _2584 = _2585;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2450;
                frontier_phi_57_58_ladder_1 = _2448;
                frontier_phi_57_58_ladder_2 = _2446;
                frontier_phi_57_58_ladder_3 = _2444;
                frontier_phi_57_58_ladder_4 = _2442;
                frontier_phi_57_58_ladder_5 = _2440;
            }
            else
            {
                frontier_phi_57_58_ladder = _2337;
                frontier_phi_57_58_ladder_1 = _2335;
                frontier_phi_57_58_ladder_2 = _2333;
                frontier_phi_57_58_ladder_3 = _2331;
                frontier_phi_57_58_ladder_4 = _2329;
                frontier_phi_57_58_ladder_5 = _2327;
            }
            _2439 = frontier_phi_57_58_ladder_5;
            _2441 = frontier_phi_57_58_ladder_4;
            _2443 = frontier_phi_57_58_ladder_3;
            _2445 = frontier_phi_57_58_ladder_2;
            _2447 = frontier_phi_57_58_ladder_1;
            _2449 = frontier_phi_57_58_ladder;
        }
        float _2454 = isnan(1.0) ? _522 : (isnan(_522) ? 1.0 : min(_522, 1.0));
        _2239 = (_2454 * _2445) + _1695;
        _2241 = (_2454 * _2447) + _1697;
        _2243 = (_2454 * _2449) + _1699;
        _2245 = ((_2439 * 0.039999999105930328369140625) * _2454) + _2025;
        _2247 = ((_2441 * 0.039999999105930328369140625) * _2454) + _2027;
        _2249 = ((_2443 * 0.039999999105930328369140625) * _2454) + _2029;
    }
    else
    {
        _2239 = _1695;
        _2241 = _1697;
        _2243 = _1699;
        _2245 = _2025;
        _2247 = _2027;
        _2249 = _2029;
    }
    float _4096 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _4107 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4118 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    uint _2269 = _496 + 6u;
    float _2277 = _455 / cbSceneParam._m0[86u].x;
    float _2278 = _456 / cbSceneParam._m0[86u].y;
    vec4 _2292 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2277, _2278, (log2((isnan(cbSceneParam._m0[77u].w) ? _388 : (isnan(_388) ? cbSceneParam._m0[77u].w : min(_388, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2294 = _2292.x;
    float _2295 = _2292.y;
    float _2296 = _2292.z;
    float _2297 = _2292.w;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    if (_388 > cbSceneParam._m0[78u].w)
    {
        float _2352 = isnan(_388) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _388 : min(cbSceneParam._m0[80u].w, _388));
        float _2353 = _2352 / _388;
        float _2364 = _2353 * _440;
        float _2365 = _441 * _2353;
        float _2366 = (-0.0) - _2365;
        float _2367 = _2353 * _442;
        float _2369 = (cbSceneParam._m0[77u].w * _2366) / _2352;
        float _2370 = _2369 + cbSceneParam._m0[79u].w;
        float _2371 = cbSceneParam._m0[79u].w - _2365;
        float _2377 = sqrt(((_2364 * _2364) + (_2365 * _2365)) + (_2367 * _2367));
        float _2380 = (1.0 - (cbSceneParam._m0[77u].w / _2352)) * _2377;
        float _2385 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2387 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2540;
        if (abs((_2366 - _2369) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2540 = ((((_2370 > 0.0) ? exp2(_2385 * _2370) : (2.0 - exp2(_2387 * _2370))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2380;
        }
        else
        {
            float _2500 = 1.0 / cbSceneParam._m0[80u].x;
            float _2501 = isnan(_2371) ? _2370 : (isnan(_2370) ? _2371 : max(_2370, _2371));
            float _2502 = isnan(_2371) ? _2370 : (isnan(_2370) ? _2371 : min(_2370, _2371));
            float _2511 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : min(_2501, 0.0));
            float _2512 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : min(_2502, 0.0));
            _2540 = ((abs(_2377 / _2366) * cbSceneParam._m0[80u].y) * ((((_2511 - _2512) * 2.0) - ((exp2(_2385 * (isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0)))) - exp2(_2385 * (isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0))))) * _2500)) - ((exp2(_2387 * _2511) - exp2(_2387 * _2512)) * _2500))) + (_2380 * cbSceneParam._m0[80u].z);
        }
        vec4 _2542 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2277, _2278, 1.0), 0.0);
        float _2551 = exp2((_2540 * (-1.44269502162933349609375)) * (1.0 - _2542.w));
        float _2552 = log2(_2551);
        float _2568 = log2(_2297);
        _2389 = (exp2(_2568 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2552 * cbSceneParam._m0[78u].x)) * _2542.x) / cbSceneParam._m0[78u].x)) + _2294;
        _2391 = (exp2(_2568 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2552 * cbSceneParam._m0[78u].y)) * _2542.y) / cbSceneParam._m0[78u].y)) + _2295;
        _2393 = (exp2(_2568 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2552 * cbSceneParam._m0[78u].z)) * _2542.z) / cbSceneParam._m0[78u].z)) + _2296;
        _2395 = _2551 * _2297;
    }
    else
    {
        _2389 = _2294;
        _2391 = _2295;
        _2393 = _2296;
        _2395 = _2297;
    }
    float _2407 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2408 = _2407 == 3.0;
    float _2409 = log2(_2395);
    float _2416 = exp2(_2409 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2239 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _522))) + ((_2245 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1329)) * cbPerFrame._m0[3u].x));
    float _2417 = exp2(_2409 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2241 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _522))) + ((_2247 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1329)) * cbPerFrame._m0[3u].x));
    float _2418 = exp2(_2409 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2243 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _522))) + ((_2249 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1329)) * cbPerFrame._m0[3u].x));
    float _2427 = (_2407 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2427 * (_2408 ? _2416 : (_2416 + (cbSceneParam._m0[72u].w * _2389)));
    SV_Target.y = _2427 * (_2408 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2391)));
    SV_Target.z = _2427 * (_2408 ? _2418 : (_2418 + (cbSceneParam._m0[72u].w * _2393)));
    SV_Target.w = cbInstanceData._m0[_2269].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2269].w;
}


