#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _896;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _240 = _235.z;
    float _244 = (_235.x * 2.0) + (-1.0);
    float _246 = (_235.y * 2.0) + (-1.0);
    float _247 = dot(vec2(_244, _246), vec2(_244, _246));
    float _3236 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _253 = sqrt(1.0 - (isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0))));
    float _256 = fma(_253, _213, fma(_246, _206, _244 * _192));
    float _259 = fma(_253, _214, fma(_246, _207, _244 * _193));
    float _262 = fma(_253, _215, fma(_246, _208, _244 * _194));
    float _266 = inversesqrt(dot(vec3(_256, _259, _262), vec3(_256, _259, _262)));
    float _274 = cbMtdParam._m0[9u].x + dot(vec4(_266 * _256, _266 * _259, _266 * _262, 0.0), vec4(cbMtdParam._m0[9u].yzw, 0.0));
    float _3247 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _275 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
    vec4 _287 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _303 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _305 = _303.x;
    float _306 = _303.y;
    float _307 = _303.z;
    float _314 = ((_287.x - _305) * _275) + _305;
    float _315 = ((_287.y - _306) * _275) + _306;
    float _316 = ((_287.z - _307) * _275) + _307;
    vec4 _328 = texture(sampler2D(M_AMSN_V_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _335 = (_328.x * 2.0) + (-1.0);
    float _336 = (_328.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_335, _336), vec2(_335, _336));
    float _3258 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _345 = ((_328.z - _240) * _275) + _240;
    float _352 = ((_335 - _244) * _275) + _244;
    float _353 = ((_336 - _246) * _275) + _246;
    float _354 = ((sqrt(1.0 - (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) - _253) * _275) + _253;
    float _357 = fma(_354, _213, fma(_353, _206, _352 * _192));
    float _360 = fma(_354, _214, fma(_353, _207, _352 * _193));
    float _363 = fma(_354, _215, fma(_353, _208, _352 * _194));
    float _367 = inversesqrt(dot(vec3(_357, _360, _363), vec3(_357, _360, _363)));
    float _368 = _367 * _357;
    float _369 = _367 * _360;
    float _370 = _367 * _363;
    float _3269 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _371 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
    float _3280 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3291 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3302 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _390 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _432 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _442 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _432);
    float _443 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _432);
    float _444 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _432);
    float _448 = inversesqrt(dot(vec3(_442, _443, _444), vec3(_442, _443, _444)));
    float _449 = _442 * _448;
    float _450 = _443 * _448;
    float _451 = _444 * _448;
    float _457 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _458 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _479 = fma(_370, cbSceneParam._m0[5u].z, fma(_369, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _368));
    float _482 = fma(_370, cbSceneParam._m0[6u].z, fma(_369, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _368));
    float _485 = fma(_370, cbSceneParam._m0[7u].z, fma(_369, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _368));
    uint _498 = uint(roundEven(NORMAL.w)) * 13u;
    uint _501 = (_498 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _507 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) * cbInstanceData._m0[_501].x;
    float _508 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0)))) * cbInstanceData._m0[_501].y;
    float _509 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0)))) * cbInstanceData._m0[_501].z;
    float _3313 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _510 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _511 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _3335 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _512 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    vec4 _521 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _457, cbSceneParam._m0[86u].y * _458));
    float _524 = _521.x * TEXCOORD.z;
    float _525 = dot(vec3(_368, _369, _370), vec3(_449, _450, _451));
    float _528 = _525 * 2.0;
    float _532 = (_528 * _368) - _449;
    float _533 = (_528 * _369) - _450;
    float _534 = (_528 * _370) - _451;
    float _538 = abs(dot(vec3(_449, _450, _451), vec3(_368, _369, _370)));
    float _3346 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _540 = sqrt(_371);
    float _553 = exp2((_540 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_540 * 3.0));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _593 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _895;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _620 = fma(_593, cbModelParam._m0[26u].z, fma(_589, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _585));
        float _624 = fma(_593, cbModelParam._m0[27u].z, fma(_589, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _585));
        float _628 = fma(_593, cbModelParam._m0[28u].z, fma(_589, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _585));
        float _653 = _585 + _368;
        float _654 = _589 + _369;
        float _655 = _593 + _370;
        float _665 = fma(_655, cbModelParam._m0[26u].z, fma(_654, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _653)) - _620;
        float _666 = fma(_655, cbModelParam._m0[27u].z, fma(_654, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _653)) - _624;
        float _667 = fma(_655, cbModelParam._m0[28u].z, fma(_654, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _653)) - _628;
        float _671 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
        float _684 = ((_671 * _665) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_620 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _685 = ((_671 * _666) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_624 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_671 * _667) / cbModelParam._m0[34u].z) + ((((((_628 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        float _723 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_689.x + (-0.5));
        float _725 = _723 * (_689.y + (-0.5));
        float _726 = _723 * (_689.z + (-0.5));
        float _733 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_696.x + (-0.5));
        float _735 = _733 * (_696.y + (-0.5));
        float _736 = _733 * (_696.z + (-0.5));
        float _743 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_703.x + (-0.5));
        float _745 = _743 * (_703.y + (-0.5));
        float _746 = _743 * (_703.z + (-0.5));
        float _753 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_710.x + (-0.5));
        float _755 = _753 * (_710.y + (-0.5));
        float _756 = _753 * (_710.z + (-0.5));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = _724 * 0.5;
        float _761 = _734 * 0.5;
        float _762 = _744 * 0.5;
        float _763 = dot(vec3(_760, _761, _762), vec3(_760, _761, _762));
        float _768 = (_763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_763);
        float _777 = (dot(vec3(_368, _369, _370), vec3(_768 * _760, _768 * _761, _768 * _762)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _787 = sqrt(((_761 * _761) + (_760 * _760)) + (_762 * _762)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3394 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_789 + 1.0))) + _794) * _757;
        float _804 = _725 * 0.5;
        float _805 = _735 * 0.5;
        float _806 = _745 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_368, _369, _370), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3427 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_831 + 1.0))) + _836) * _758;
        float _846 = _726 * 0.5;
        float _847 = _736 * 0.5;
        float _848 = _746 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _862 = (dot(vec3(_368, _369, _370), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _871 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3460 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_873 + 1.0))) + _878) * _759;
        _895 = _726;
        _897 = _725;
        _898 = _724;
        _899 = _736;
        _900 = _735;
        _901 = _734;
        _902 = _746;
        _903 = _745;
        _904 = _744;
        _905 = _759;
        _906 = _758;
        _907 = _757;
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
    }
    else
    {
        _895 = _896;
        _897 = _896;
        _898 = _896;
        _899 = _896;
        _900 = _896;
        _901 = _896;
        _902 = _896;
        _903 = _896;
        _904 = _896;
        _905 = _896;
        _906 = _896;
        _907 = _896;
        _908 = 0.0;
        _909 = 0.0;
        _910 = 0.0;
    }
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _936 = fma(_593, cbModelParam._m0[30u].z, fma(_589, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _585));
        float _940 = fma(_593, cbModelParam._m0[31u].z, fma(_589, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _585));
        float _944 = fma(_593, cbModelParam._m0[32u].z, fma(_589, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _585));
        float _967 = _585 + _368;
        float _968 = _589 + _369;
        float _969 = _593 + _370;
        float _979 = fma(_969, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967)) - _936;
        float _980 = fma(_969, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967)) - _940;
        float _981 = fma(_969, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967)) - _944;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_936 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_940 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[35u].z) + ((((((_944 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1035 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1002.x + (-0.5));
        float _1037 = _1035 * (_1002.y + (-0.5));
        float _1038 = _1035 * (_1002.z + (-0.5));
        float _1045 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1009.x + (-0.5));
        float _1047 = _1045 * (_1009.y + (-0.5));
        float _1048 = _1045 * (_1009.z + (-0.5));
        float _1055 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1016.x + (-0.5));
        float _1057 = _1055 * (_1016.y + (-0.5));
        float _1058 = _1055 * (_1016.z + (-0.5));
        float _1065 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1023.x + (-0.5));
        float _1067 = _1065 * (_1023.y + (-0.5));
        float _1068 = _1065 * (_1023.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_368, _369, _370), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3523 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_1099 + 1.0))) + _1104) * _1069;
        float _1114 = _1037 * 0.5;
        float _1115 = _1047 * 0.5;
        float _1116 = _1057 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_368, _369, _370), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3556 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1141 + 1.0))) + _1146) * _1070;
        float _1156 = _1038 * 0.5;
        float _1157 = _1048 * 0.5;
        float _1158 = _1058 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_368, _369, _370), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3589 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_1183 + 1.0))) + _1188) * _1071;
        _1205 = _1038;
        _1206 = _1037;
        _1207 = _1036;
        _1208 = _1048;
        _1209 = _1047;
        _1210 = _1046;
        _1211 = _1058;
        _1212 = _1057;
        _1213 = _1056;
        _1214 = _1071;
        _1215 = _1070;
        _1216 = _1069;
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _896;
        _1206 = _896;
        _1207 = _896;
        _1208 = _896;
        _1209 = _896;
        _1210 = _896;
        _1211 = _896;
        _1212 = _896;
        _1213 = _896;
        _1214 = _896;
        _1215 = _896;
        _1216 = _896;
        _1217 = 0.0;
        _1218 = 0.0;
        _1219 = 0.0;
    }
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _908)) + _908;
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _909)) + _909;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _910)) + _910;
    float _1252 = fma(_1231, cbSceneParam._m0[89u].z, fma(_1230, cbSceneParam._m0[89u].y, _1229 * cbSceneParam._m0[89u].x));
    float _1255 = fma(_1231, cbSceneParam._m0[90u].z, fma(_1230, cbSceneParam._m0[90u].y, _1229 * cbSceneParam._m0[90u].x));
    float _1258 = fma(_1231, cbSceneParam._m0[91u].z, fma(_1230, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1229));
    float _1273 = _532 * 0.5;
    float _1274 = _533 * 0.5;
    float _1275 = _534 * 0.5;
    float _1276 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1279 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1282 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1316;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1289 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_895, _899, _902, _905));
        float _1293 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_897, _900, _903, _906));
        float _1297 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_898, _901, _904, _907));
        float _1304 = dot(vec4(cbModelParam._m0[39u]), vec4(_1273, _1274, _1275, 1.0));
        _1316 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1316 = 1.0;
    }
    float _1327;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1318 = dot(vec4(cbModelParam._m0[40u]), vec4(_1273, _1274, _1275, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1331 = (_1327 * cbModelParam._m0[1u].x) + (_1316 * (1.0 - cbModelParam._m0[1u].x));
    float _1341 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _371);
    float _1342 = isnan(_1341) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1341 : min(cbModelParam._m0[25u].z, _1341));
    float _1424;
    float _1426;
    float _1428;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1391 = fma(_593, cbModelParam._m0[13u].z, fma(_589, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _585)) + cbModelParam._m0[13u].w;
        float _1395 = fma(_593, cbModelParam._m0[14u].z, fma(_589, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _585)) + cbModelParam._m0[14u].w;
        float _1399 = fma(_593, cbModelParam._m0[15u].z, fma(_589, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _585)) + cbModelParam._m0[15u].w;
        float _1402 = fma(_534, cbModelParam._m0[13u].z, fma(_533, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _532));
        float _1405 = fma(_534, cbModelParam._m0[14u].z, fma(_533, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _532));
        float _1408 = fma(_534, cbModelParam._m0[15u].z, fma(_533, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _532));
        float _1436;
        if (_1402 > 0.0)
        {
            _1436 = abs((1.0 - _1391) / _1402);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1391 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1436 = frontier_phi_16_14_ladder;
        }
        float _1663;
        if (_1405 > 0.0)
        {
            _1663 = abs((1.0 - _1395) / _1405);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1395 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1663 = frontier_phi_25_21_ladder;
        }
        float _1909;
        if (_1408 > 0.0)
        {
            _1909 = abs((1.0 - _1399) / _1408);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1399 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1909 = frontier_phi_37_32_ladder;
        }
        float _1911 = isnan(_1663) ? _1436 : (isnan(_1436) ? _1663 : min(_1436, _1663));
        float _1912 = isnan(_1909) ? _1911 : (isnan(_1911) ? _1909 : min(_1911, _1909));
        float _1916 = (_1912 * _1402) + _1391;
        float _1917 = (_1912 * _1405) + _1395;
        float _1918 = (_1912 * _1408) + _1399;
        float _1919 = _1912 * 9.9999997473787516355514526367188e-05;
        float _1921 = (-1.0) - _1919;
        float _1923 = _1919 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1918 > _1923) || ((_1918 < _1921) || ((_1917 > _1923) || ((_1917 < _1921) || ((_1916 < _1921) || (_1916 > _1923))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2042 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1918, cbModelParam._m0[9u].z, fma(_1917, cbModelParam._m0[9u].y, _1916 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1918, cbModelParam._m0[10u].z, fma(_1917, cbModelParam._m0[10u].y, _1916 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1918, cbModelParam._m0[11u].z, fma(_1917, cbModelParam._m0[11u].y, _1916 * cbModelParam._m0[11u].x))), _1342);
            frontier_phi_15_37_ladder = _2042.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2042.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2042.x * cbModelParam._m0[1u].y;
        }
        _1424 = frontier_phi_15_37_ladder_2;
        _1426 = frontier_phi_15_37_ladder_1;
        _1428 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_532, _533, _534), _1342);
        _1424 = _1412.x * cbModelParam._m0[1u].y;
        _1426 = _1412.y * cbModelParam._m0[1u].y;
        _1428 = _1412.z * cbModelParam._m0[1u].y;
    }
    float _1432 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _371);
    float _1433 = isnan(_1432) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1432 : min(cbModelParam._m0[25u].w, _1432));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1490 = fma(_593, cbModelParam._m0[21u].z, fma(_589, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _585)) + cbModelParam._m0[21u].w;
        float _1494 = fma(_593, cbModelParam._m0[22u].z, fma(_589, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _585)) + cbModelParam._m0[22u].w;
        float _1498 = fma(_593, cbModelParam._m0[23u].z, fma(_589, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _585)) + cbModelParam._m0[23u].w;
        float _1501 = fma(_534, cbModelParam._m0[21u].z, fma(_533, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _532));
        float _1504 = fma(_534, cbModelParam._m0[22u].z, fma(_533, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _532));
        float _1507 = fma(_534, cbModelParam._m0[23u].z, fma(_533, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _532));
        float _1668;
        if (_1501 > 0.0)
        {
            _1668 = abs((1.0 - _1490) / _1501);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1490 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1668 = frontier_phi_27_23_ladder;
        }
        float _1936;
        if (_1504 > 0.0)
        {
            _1936 = abs((1.0 - _1494) / _1504);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1494 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1936 = frontier_phi_39_34_ladder;
        }
        float _2141;
        if (_1507 > 0.0)
        {
            _2141 = abs((1.0 - _1498) / _1507);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1498 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2141 = frontier_phi_48_45_ladder;
        }
        float _2143 = isnan(_1936) ? _1668 : (isnan(_1668) ? _1936 : min(_1668, _1936));
        float _2144 = isnan(_2141) ? _2143 : (isnan(_2143) ? _2141 : min(_2143, _2141));
        float _2148 = (_2144 * _1501) + _1490;
        float _2149 = (_2144 * _1504) + _1494;
        float _2150 = (_2144 * _1507) + _1498;
        float _2151 = _2144 * 9.9999997473787516355514526367188e-05;
        float _2152 = (-1.0) - _2151;
        float _2154 = _2151 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2150 > _2154) || ((_2150 < _2152) || ((_2149 > _2154) || ((_2149 < _2152) || ((_2148 < _2152) || (_2148 > _2154))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2348 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2150, cbModelParam._m0[17u].z, fma(_2149, cbModelParam._m0[17u].y, _2148 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2150, cbModelParam._m0[18u].z, fma(_2149, cbModelParam._m0[18u].y, _2148 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2150, cbModelParam._m0[19u].z, fma(_2149, cbModelParam._m0[19u].y, _2148 * cbModelParam._m0[19u].x))), _1433);
            frontier_phi_24_48_ladder = _2348.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2348.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2348.x * cbModelParam._m0[1u].z;
        }
        _1526 = frontier_phi_24_48_ladder_2;
        _1528 = frontier_phi_24_48_ladder_1;
        _1530 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1510 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_532, _533, _534), _1433);
        _1526 = _1510.x * cbModelParam._m0[1u].z;
        _1528 = _1510.y * cbModelParam._m0[1u].z;
        _1530 = _1510.z * cbModelParam._m0[1u].z;
    }
    float _1542 = ((((1.0 - _553) * ((_540 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_553 * _540)) * _524;
    float _1543 = _1542 * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1544 = _1542 * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1545 = _1542 * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1548 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1544, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1544, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1544, cbSceneParam._m0[91u].y, _1543 * cbSceneParam._m0[91u].x));
    vec4 _1562 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_457, _458));
    float _1564 = _1562.w;
    float _1576 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1564);
    float _1577 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1564);
    float _1578 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1564);
    uvec4 _1582 = floatBitsToUint(cbInstanceData._m0[_498 + 5u]);
    uint _1584 = _1582.x * 14u;
    uint _1585 = _1584 + 13u;
    float _1592 = _524 + (-1.0);
    float _1597 = (cbLight._m0[_1585].x * _1592) + 1.0;
    float _1598 = (cbLight._m0[_1585].y * _1592) + 1.0;
    float _1599 = (cbLight._m0[_1585].z * _1592) + 1.0;
    float _1600 = (cbLight._m0[_1585].w * _1592) + 1.0;
    uint _1601 = _1584 + 5u;
    float _1607 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
    uint _1611 = _1584 + 4u;
    float _1621 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
    uint _1625 = _1584 | 1u;
    float _1636 = dot(vec3(cbLight._m0[_1584].xyz), vec3(_368, _369, _370));
    float _1639 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_368, _369, _370));
    float _3725 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _3736 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _1644 = (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.3183098733425140380859375;
    float _1646 = (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * 0.3183098733425140380859375;
    float _1653 = ((cbLight._m0[_1601].x * _1607) * _1646) + (((cbLight._m0[_1611].x * _1576) * _1621) * _1644);
    float _1654 = ((_1607 * cbLight._m0[_1601].y) * _1646) + (((cbLight._m0[_1611].y * _1577) * _1621) * _1644);
    float _1655 = ((_1607 * cbLight._m0[_1601].z) * _1646) + (((cbLight._m0[_1611].z * _1578) * _1621) * _1644);
    uvec4 _1660 = floatBitsToUint(cbLight._m0[_1584 + 12u]);
    bool _1662 = _1660.x == 0u;
    float _1673;
    float _1675;
    float _1677;
    if (_1662)
    {
        _1673 = _1653;
        _1675 = _1654;
        _1677 = _1655;
    }
    else
    {
        uint _1681 = _1584 + 6u;
        float _1697 = (dot(vec3(cbLight._m0[_1584 + 2u].xyz), vec3(_368, _369, _370)) * 0.5) + 0.5;
        float _1698 = _1697 * _1697;
        float _3747 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1700 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1673 = (((cbLight._m0[_1681].x * 0.3183098733425140380859375) * _1699) * _1700) + _1653;
        _1675 = (((cbLight._m0[_1681].y * 0.3183098733425140380859375) * _1699) * _1700) + _1654;
        _1677 = (((cbLight._m0[_1681].z * 0.3183098733425140380859375) * _1699) * _1700) + _1655;
    }
    bool _1680 = _1660.y == 0u;
    float _1718;
    float _1720;
    float _1722;
    if (_1680)
    {
        _1718 = _1673;
        _1720 = _1675;
        _1722 = _1677;
    }
    else
    {
        uint _1880 = _1584 + 7u;
        float _1896 = (dot(vec3(cbLight._m0[_1584 + 3u].xyz), vec3(_368, _369, _370)) * 0.5) + 0.5;
        float _1897 = _1896 * _1896;
        float _3763 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1899 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _1718 = (((cbLight._m0[_1880].x * 0.3183098733425140380859375) * _1898) * _1899) + _1673;
        _1720 = (((cbLight._m0[_1880].y * 0.3183098733425140380859375) * _1898) * _1899) + _1675;
        _1722 = (((cbLight._m0[_1880].z * 0.3183098733425140380859375) * _1898) * _1899) + _1677;
    }
    uint _1725 = _1584 + 8u;
    float _1738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1584].w)) * _371) * 0.949999988079071044921875);
    float _1739 = _1738 * _1738;
    float _1740 = cbLight._m0[_1584].x + _449;
    float _1741 = cbLight._m0[_1584].y + _450;
    float _1742 = cbLight._m0[_1584].z + _451;
    float _1746 = inversesqrt(dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742)));
    float _1747 = _1746 * _1740;
    float _1748 = _1746 * _1741;
    float _1749 = _1746 * _1742;
    float _1750 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1584].xyz));
    float _3779 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _3790 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _1754 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _1755 = dot(vec3(_368, _369, _370), vec3(_1747, _1748, _1749));
    float _3801 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1758 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _1759 = dot(vec3(cbLight._m0[_1584].xyz), vec3(_1747, _1748, _1749));
    float _3812 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1763 = _1739 * _1739;
    float _1767 = ((_1758 * _1758) * (_1763 + (-1.0))) + 1.0;
    float _1778 = (exp2(log2(1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1779 = 1.0 - _1739;
    float _1790 = (0.5 / (((_1754 * ((_1753 * _1779) + _1739)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _1779) + _1739) * _1753))) * _1753;
    float _3823 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1792 = (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1763 / ((_1767 * _1767) * 3.141590118408203125));
    uint _1806 = _1584 + 9u;
    float _1817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1625].w)) * _371) * 0.949999988079071044921875);
    float _1818 = _1817 * _1817;
    float _1819 = cbLight._m0[_1625].x + _449;
    float _1820 = cbLight._m0[_1625].y + _450;
    float _1821 = cbLight._m0[_1625].z + _451;
    float _1825 = inversesqrt(dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821)));
    float _1826 = _1825 * _1819;
    float _1827 = _1825 * _1820;
    float _1828 = _1825 * _1821;
    float _1829 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1625].xyz));
    float _3834 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _1833 = dot(vec3(_368, _369, _370), vec3(_1826, _1827, _1828));
    float _3845 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _1837 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_1826, _1827, _1828));
    float _3856 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1841 = _1818 * _1818;
    float _1845 = ((_1836 * _1836) * (_1841 + (-1.0))) + 1.0;
    float _1854 = (exp2(log2(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1855 = 1.0 - _1818;
    float _1865 = (0.5 / (((_1754 * ((_1832 * _1855) + _1818)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _1855) + _1818) * _1832))) * _1832;
    float _3867 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1867 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1841 / ((_1845 * _1845) * 3.141590118408203125));
    float _1877 = (((_1854 * cbLight._m0[_1806].x) * _1867) * _1607) + ((((cbLight._m0[_1725].x * _1576) * _1778) * _1792) * _1621);
    float _1878 = (((_1854 * cbLight._m0[_1806].y) * _1867) * _1607) + ((((cbLight._m0[_1725].y * _1577) * _1778) * _1792) * _1621);
    float _1879 = (((_1854 * cbLight._m0[_1806].z) * _1867) * _1607) + ((((cbLight._m0[_1725].z * _1578) * _1778) * _1792) * _1621);
    float _1941;
    float _1943;
    float _1945;
    if (_1662)
    {
        _1941 = _1877;
        _1943 = _1878;
        _1945 = _1879;
    }
    else
    {
        uint _1947 = _1584 + 2u;
        uint _1951 = _1584 + 10u;
        float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _371) * 0.949999988079071044921875);
        float _1966 = _1965 * _1965;
        float _1967 = cbLight._m0[_1947].x + _449;
        float _1968 = cbLight._m0[_1947].y + _450;
        float _1969 = cbLight._m0[_1947].z + _451;
        float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
        float _1974 = _1973 * _1967;
        float _1975 = _1973 * _1968;
        float _1976 = _1973 * _1969;
        float _1977 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1947].xyz));
        float _3878 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1980 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1981 = dot(vec3(_368, _369, _370), vec3(_1974, _1975, _1976));
        float _3889 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1984 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1985 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_1974, _1975, _1976));
        float _3900 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1989 = _1966 * _1966;
        float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
        float _2002 = (exp2(log2(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2003 = 1.0 - _1966;
        float _2013 = (0.5 / (((_1754 * ((_1980 * _2003) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _2003) + _1966) * _1980))) * _1980;
        float _3911 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2015 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
        float _2016 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1941 = (((_2002 * cbLight._m0[_1951].x) * _2015) * _2016) + _1877;
        _1943 = (((_2002 * cbLight._m0[_1951].y) * _2015) * _2016) + _1878;
        _1945 = (((_2002 * cbLight._m0[_1951].z) * _2015) * _2016) + _1879;
    }
    float _2051;
    float _2053;
    float _2055;
    if (_1680)
    {
        _2051 = _1941;
        _2053 = _1943;
        _2055 = _1945;
    }
    else
    {
        uint _2062 = _1584 + 3u;
        uint _2066 = _1584 + 11u;
        float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _371) * 0.949999988079071044921875);
        float _2081 = _2080 * _2080;
        float _2082 = cbLight._m0[_2062].x + _449;
        float _2083 = cbLight._m0[_2062].y + _450;
        float _2084 = cbLight._m0[_2062].z + _451;
        float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
        float _2089 = _2088 * _2082;
        float _2090 = _2088 * _2083;
        float _2091 = _2088 * _2084;
        float _2092 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_2062].xyz));
        float _3927 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _2096 = dot(vec3(_368, _369, _370), vec3(_2089, _2090, _2091));
        float _3938 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _2100 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2089, _2090, _2091));
        float _3949 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2104 = _2081 * _2081;
        float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
        float _2117 = (exp2(log2(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2118 = 1.0 - _2081;
        float _2128 = (0.5 / (((_1754 * ((_2095 * _2118) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _2118) + _2081) * _2095))) * _2095;
        float _3960 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2130 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
        float _2131 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _2051 = (((_2117 * cbLight._m0[_2066].x) * _2130) * _2131) + _1941;
        _2053 = (((_2117 * cbLight._m0[_2066].y) * _2130) * _2131) + _1943;
        _2055 = (((_2117 * cbLight._m0[_2066].z) * _2130) * _2131) + _1945;
    }
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    if (_1582.y == 0u)
    {
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2206;
        float _2208 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2206;
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2206;
        uvec4 _2221 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2222 = _2221.x;
        uint _2233 = uint((float(_2221.y) * floor(float(uint(cbSceneParam._m0[85u].y * _458) / _2222))) + floor(float(uint(cbSceneParam._m0[85u].x * _457) / _2222)));
        float _2243 = (log2(_2209 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2244 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        uint _2247 = uint(isnan(14.0) ? _2244 : (isnan(_2244) ? 14.0 : min(_2244, 14.0)));
        uvec4 _2252 = texelFetch(g_lightClusterGridBuffer, int(((_2247 << 2u) + (_2233 << 6u)) >> 2u));
        uint _2253 = _2252.x;
        uint _2254 = _2221.z;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        if (((((1u << ((_2254 >> 4u) & 15u)) + 4294967295u) & _2253) == 0u) || ((_2254 & 240u) == 0u))
        {
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
        }
        else
        {
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            uint _2503 = 0u;
            uint _2512;
            bool _2513;
            for (;;)
            {
                _2512 = texelFetch(g_lightClassification, int((((_2247 << 5u) + (_2233 << 9u)) + (_2503 << 2u)) >> 2u)).x;
                _2513 = _2512 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2513)
                {
                    frontier_phi_63_pred = _2502;
                    frontier_phi_63_pred_1 = _2501;
                    frontier_phi_63_pred_2 = _2500;
                    frontier_phi_63_pred_3 = _2499;
                    frontier_phi_63_pred_4 = _2498;
                    frontier_phi_63_pred_5 = _2497;
                }
                else
                {
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    uint _2627;
                    _2621 = _2497;
                    _2622 = _2498;
                    _2623 = _2499;
                    _2624 = _2500;
                    _2625 = _2501;
                    _2626 = _2502;
                    _2627 = _2512;
                    float _2553;
                    float _2554;
                    float _2555;
                    float _2556;
                    float _2557;
                    float _2558;
                    for (;;)
                    {
                        uint _2631 = uint(findLSB(_2627)) + (_2503 << 5u);
                        uint _2628 = (_2627 + 4294967295u) & _2627;
                        uint _2633 = _2631 * 48u;
                        vec4 _2647 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2633)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 3u)).x));
                        uint _2653 = (_2631 * 48u) + 4u;
                        vec4 _2666 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2653)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 3u)).x));
                        uint _2672 = (_2631 * 48u) + 8u;
                        vec3 _2683 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2672)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 2u)).x));
                        float _2687 = _2647.x - _2207;
                        float _2688 = _2647.y - _2208;
                        float _2689 = _2647.z - _2209;
                        float _2690 = dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689));
                        float _2693 = inversesqrt(_2690);
                        float _2694 = _2693 * _2687;
                        float _2695 = _2693 * _2688;
                        float _2696 = _2693 * _2689;
                        float _2697 = dot(vec3(_479, _482, _485), vec3(_2694, _2695, _2696));
                        float _2702 = 1.0 - (_2690 * _2647.w);
                        float _3986 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
                        float _2703 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
                        float _2704 = sqrt(_2690) * _2666.w;
                        float _2707 = 1.39999997615814208984375 / (_2704 + 1.39999997615814208984375);
                        float _2708 = _2707 * _2707;
                        float _2711 = ((1.0 - _2708) * _2697) + _2708;
                        float _2714 = _2704 * _2704;
                        float _2718 = ((isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0))) * _2703) / ((_2714 * 0.699999988079071044921875) + 1.0);
                        float _2722 = (-0.0) - _2207;
                        float _2723 = (-0.0) - _2208;
                        float _2724 = (-0.0) - _2209;
                        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
                        float _2729 = _2728 * _2722;
                        float _2730 = _2728 * _2723;
                        float _2731 = _2728 * _2724;
                        float _2739 = exp2(log2(1.0 / ((_2714 * 3.5) + 5.0)) * 0.25);
                        float _2740 = 1.0 - _540;
                        float _2747 = sqrt(1.0 - ((1.0 - (_2740 * _2740)) * (1.0 - (_2739 * _2739))));
                        float _2748 = _2747 * _2747;
                        float _2749 = _2748 * _2748;
                        float _2750 = _2729 + _2694;
                        float _2751 = _2730 + _2695;
                        float _2752 = _2731 + _2696;
                        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
                        float _2760 = dot(vec3(_479, _482, _485), vec3(_2729, _2730, _2731));
                        float _4002 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2763 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2764 = dot(vec3(_479, _482, _485), vec3(_2756 * _2750, _2756 * _2751, _2756 * _2752));
                        float _4013 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2767 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2771 = ((_2767 * _2767) * (_2749 + (-1.0))) + 1.0;
                        float _2772 = _2707 * _2748;
                        float _2773 = _2772 * _2772;
                        float _2776 = ((1.0 - _2773) * _2697) + _2773;
                        float _4024 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2777 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2778 = 1.0 - _2748;
                        float _2788 = (0.5 / (((_2777 * ((_2763 * _2778) + _2748)) + 9.9999999392252902907785028219223e-09) + (((_2777 * _2778) + _2748) * _2763))) * _2777;
                        float _4035 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2799 = (((_2749 * 3.1415927410125732421875) * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) / ((_2771 * _2771) * ((_2714 * 2.1991131305694580078125) + 3.141590118408203125))) * _2703;
                        _2556 = (_2718 * _2666.x) + _2624;
                        _2557 = (_2718 * _2666.y) + _2625;
                        _2558 = (_2718 * _2666.z) + _2626;
                        _2553 = (_2799 * _2683.x) + _2621;
                        _2554 = (_2799 * _2683.y) + _2622;
                        _2555 = (_2799 * _2683.z) + _2623;
                        if (_2628 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2621 = _2553;
                            _2622 = _2554;
                            _2623 = _2555;
                            _2624 = _2556;
                            _2625 = _2557;
                            _2626 = _2558;
                            _2627 = _2628;
                        }
                    }
                    frontier_phi_63_pred = _2558;
                    frontier_phi_63_pred_1 = _2557;
                    frontier_phi_63_pred_2 = _2556;
                    frontier_phi_63_pred_3 = _2555;
                    frontier_phi_63_pred_4 = _2554;
                    frontier_phi_63_pred_5 = _2553;
                }
                _2364 = frontier_phi_63_pred;
                _2362 = frontier_phi_63_pred_1;
                _2360 = frontier_phi_63_pred_2;
                _2358 = frontier_phi_63_pred_3;
                _2356 = frontier_phi_63_pred_4;
                _2354 = frontier_phi_63_pred_5;
                uint _2504 = _2503 + 1u;
                if (_2504 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2497 = _2354;
                    _2498 = _2356;
                    _2499 = _2358;
                    _2500 = _2360;
                    _2501 = _2362;
                    _2502 = _2364;
                    _2503 = _2504;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
        }
        uvec4 _2367 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2368 = _2367.z;
        uint _2370 = (_2368 >> 8u) & 15u;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        if (((4294967295u << _2370) & _2253) == 0u)
        {
            _2465 = _2353;
            _2467 = _2355;
            _2469 = _2357;
            _2471 = _2359;
            _2473 = _2361;
            _2475 = _2363;
        }
        else
        {
            float _2490 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
            float _2491 = _2490 * _2207;
            float _2492 = _2490 * _2208;
            float _2493 = _2490 * _2209;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2370 < ((_2368 >> 12u) & 15u))
            {
                float _2466;
                float _2468;
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2604 = _2353;
                float _2605 = _2355;
                float _2606 = _2357;
                float _2607 = _2359;
                float _2608 = _2361;
                float _2609 = _2363;
                uint _2610 = _2370;
                uint _2619;
                bool _2620;
                for (;;)
                {
                    _2619 = texelFetch(g_lightClassification, int((((_2247 << 5u) + (_2233 << 9u)) + (_2610 << 2u)) >> 2u)).x;
                    _2620 = _2619 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2620)
                    {
                        frontier_phi_69_pred = _2609;
                        frontier_phi_69_pred_1 = _2608;
                        frontier_phi_69_pred_2 = _2607;
                        frontier_phi_69_pred_3 = _2606;
                        frontier_phi_69_pred_4 = _2605;
                        frontier_phi_69_pred_5 = _2604;
                    }
                    else
                    {
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2808;
                        float _2809;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _2817 = _2604;
                        float _2818 = _2605;
                        float _2819 = _2606;
                        float _2820 = _2607;
                        float _2821 = _2608;
                        float _2822 = _2609;
                        uint _2823 = _2619;
                        uint _2824;
                        vec4 _2849;
                        float _2850;
                        vec4 _2865;
                        vec3 _2877;
                        vec4 _2893;
                        vec4 _2909;
                        float _2956;
                        bool _2957;
                        for (;;)
                        {
                            uint _2834 = ((_2610 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2823));
                            _2824 = (_2823 + 4294967295u) & _2823;
                            uint _2836 = _2834 * 40u;
                            _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            _2850 = _2849.w;
                            uint _2852 = (_2834 * 40u) + 4u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            uint _2867 = (_2834 * 40u) + 8u;
                            _2877 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x));
                            uint _2880 = (_2834 * 40u) + 16u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2896 = (_2834 * 40u) + 20u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2912 = (_2834 * 40u) + 24u;
                            vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2931 = (_2834 * 40u) + 28u;
                            vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            _2956 = fma(_2209, _2944.z, fma(_2208, _2944.y, _2944.x * _2207)) + _2944.w;
                            _2957 = !((fma(_2209, _2925.z, fma(_2208, _2925.y, _2925.x * _2207)) + _2925.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2957)
                            {
                                float _2984 = _2849.x - _2207;
                                float _2985 = _2849.y - _2208;
                                float _2986 = _2849.z - _2209;
                                float _2987 = dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986));
                                float _2990 = inversesqrt(_2987);
                                float _2991 = _2990 * _2984;
                                float _2992 = _2990 * _2985;
                                float _2993 = _2990 * _2986;
                                float _2997 = 1.0 - (_2987 / (_2850 * _2850));
                                float _4046 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _2998 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3002 = sqrt(_2987) * _2865.w;
                                float _3004 = 1.39999997615814208984375 / (_3002 + 1.39999997615814208984375);
                                float _3005 = _3004 * _3004;
                                float _3008 = ((1.0 - _3005) * dot(vec3(_2991, _2992, _2993), vec3(_479, _482, _485))) + _3005;
                                float _3011 = _3002 * _3002;
                                float _3015 = (fma(_2209, _2893.z, fma(_2208, _2893.y, _2893.x * _2207)) + _2893.w) / _2956;
                                float _3016 = (fma(_2209, _2909.z, fma(_2208, _2909.y, _2909.x * _2207)) + _2909.w) / _2956;
                                float _3020 = 1.0 - dot(vec2(_3015, _3016), vec2(_3015, _3016));
                                float _4062 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3021 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3022 = _3021 * (((isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))) * _2998) / ((_3011 * 0.699999988079071044921875) + 1.0));
                                float _3034 = exp2(log2(1.0 / ((_3011 * 3.5) + 5.0)) * 0.25);
                                float _3035 = 1.0 - _540;
                                float _3042 = sqrt(1.0 - ((1.0 - (_3035 * _3035)) * (1.0 - (_3034 * _3034))));
                                float _3043 = _3042 * _3042;
                                float _3044 = _3043 * _3043;
                                float _3045 = _2991 - _2491;
                                float _3046 = _2992 - _2492;
                                float _3047 = _2993 - _2493;
                                float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                                float _3055 = dot(vec3(_479, _482, _485), vec3((-0.0) - _2491, (-0.0) - _2492, (-0.0) - _2493));
                                float _4073 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3058 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3059 = dot(vec3(_479, _482, _485), vec3(_3051 * _3045, _3051 * _3046, _3051 * _3047));
                                float _4084 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3062 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3066 = ((_3062 * _3062) * (_3044 + (-1.0))) + 1.0;
                                float _3067 = _3004 * _3043;
                                float _3068 = _3067 * _3067;
                                float _3074 = ((1.0 - _3068) * dot(vec3(_479, _482, _485), vec3(_2991, _2992, _2993))) + _3068;
                                float _4095 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3075 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3076 = 1.0 - _3043;
                                float _3086 = (0.5 / (((_3075 * ((_3058 * _3076) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_3075 * _3076) + _3043) * _3058))) * _3075;
                                float _4106 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3096 = (_3021 * _2998) * (((_3044 * 3.1415927410125732421875) * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) / ((_3066 * _3066) * ((_3011 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3022 * _2865.z;
                                frontier_phi_75_pred_1 = _3022 * _2865.y;
                                frontier_phi_75_pred_2 = _3022 * _2865.x;
                                frontier_phi_75_pred_3 = _3096 * _2877.z;
                                frontier_phi_75_pred_4 = _3096 * _2877.y;
                                frontier_phi_75_pred_5 = _3096 * _2877.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3105 = frontier_phi_75_pred;
                            _3104 = frontier_phi_75_pred_1;
                            _3103 = frontier_phi_75_pred_2;
                            _3102 = frontier_phi_75_pred_3;
                            _3101 = frontier_phi_75_pred_4;
                            _3100 = frontier_phi_75_pred_5;
                            _2807 = _3103 + _2820;
                            _2808 = _3104 + _2821;
                            _2809 = _3105 + _2822;
                            _2804 = _3100 + _2817;
                            _2805 = _3101 + _2818;
                            _2806 = _3102 + _2819;
                            if (_2824 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2824;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2809;
                        frontier_phi_69_pred_1 = _2808;
                        frontier_phi_69_pred_2 = _2807;
                        frontier_phi_69_pred_3 = _2806;
                        frontier_phi_69_pred_4 = _2805;
                        frontier_phi_69_pred_5 = _2804;
                    }
                    _2476 = frontier_phi_69_pred;
                    _2474 = frontier_phi_69_pred_1;
                    _2472 = frontier_phi_69_pred_2;
                    _2470 = frontier_phi_69_pred_3;
                    _2468 = frontier_phi_69_pred_4;
                    _2466 = frontier_phi_69_pred_5;
                    uint _2611 = _2610 + 1u;
                    if (_2611 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2604 = _2466;
                        _2605 = _2468;
                        _2606 = _2470;
                        _2607 = _2472;
                        _2608 = _2474;
                        _2609 = _2476;
                        _2610 = _2611;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2476;
                frontier_phi_57_58_ladder_1 = _2474;
                frontier_phi_57_58_ladder_2 = _2472;
                frontier_phi_57_58_ladder_3 = _2470;
                frontier_phi_57_58_ladder_4 = _2468;
                frontier_phi_57_58_ladder_5 = _2466;
            }
            else
            {
                frontier_phi_57_58_ladder = _2363;
                frontier_phi_57_58_ladder_1 = _2361;
                frontier_phi_57_58_ladder_2 = _2359;
                frontier_phi_57_58_ladder_3 = _2357;
                frontier_phi_57_58_ladder_4 = _2355;
                frontier_phi_57_58_ladder_5 = _2353;
            }
            _2465 = frontier_phi_57_58_ladder_5;
            _2467 = frontier_phi_57_58_ladder_4;
            _2469 = frontier_phi_57_58_ladder_3;
            _2471 = frontier_phi_57_58_ladder_2;
            _2473 = frontier_phi_57_58_ladder_1;
            _2475 = frontier_phi_57_58_ladder;
        }
        float _2480 = isnan(1.0) ? _524 : (isnan(_524) ? 1.0 : min(_524, 1.0));
        _2265 = (_2480 * _2471) + _1718;
        _2267 = (_2480 * _2473) + _1720;
        _2269 = (_2480 * _2475) + _1722;
        _2271 = ((_2465 * 0.039999999105930328369140625) * _2480) + _2051;
        _2273 = ((_2467 * 0.039999999105930328369140625) * _2480) + _2053;
        _2275 = ((_2469 * 0.039999999105930328369140625) * _2480) + _2055;
    }
    else
    {
        _2265 = _1718;
        _2267 = _1720;
        _2269 = _1722;
        _2271 = _2051;
        _2273 = _2053;
        _2275 = _2055;
    }
    float _4122 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4133 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4144 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    uint _2295 = _498 + 6u;
    float _2303 = _457 / cbSceneParam._m0[86u].x;
    float _2304 = _458 / cbSceneParam._m0[86u].y;
    vec4 _2318 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2303, _2304, (log2((isnan(cbSceneParam._m0[77u].w) ? _390 : (isnan(_390) ? cbSceneParam._m0[77u].w : min(_390, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2320 = _2318.x;
    float _2321 = _2318.y;
    float _2322 = _2318.z;
    float _2323 = _2318.w;
    float _2415;
    float _2417;
    float _2419;
    float _2421;
    if (_390 > cbSceneParam._m0[78u].w)
    {
        float _2378 = isnan(_390) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _390 : min(cbSceneParam._m0[80u].w, _390));
        float _2379 = _2378 / _390;
        float _2390 = _2379 * _442;
        float _2391 = _443 * _2379;
        float _2392 = (-0.0) - _2391;
        float _2393 = _2379 * _444;
        float _2395 = (cbSceneParam._m0[77u].w * _2392) / _2378;
        float _2396 = _2395 + cbSceneParam._m0[79u].w;
        float _2397 = cbSceneParam._m0[79u].w - _2391;
        float _2403 = sqrt(((_2390 * _2390) + (_2391 * _2391)) + (_2393 * _2393));
        float _2406 = (1.0 - (cbSceneParam._m0[77u].w / _2378)) * _2403;
        float _2411 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2413 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2566;
        if (abs((_2392 - _2395) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2566 = ((((_2396 > 0.0) ? exp2(_2411 * _2396) : (2.0 - exp2(_2413 * _2396))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2406;
        }
        else
        {
            float _2526 = 1.0 / cbSceneParam._m0[80u].x;
            float _2527 = isnan(_2397) ? _2396 : (isnan(_2396) ? _2397 : max(_2396, _2397));
            float _2528 = isnan(_2397) ? _2396 : (isnan(_2396) ? _2397 : min(_2396, _2397));
            float _2537 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : min(_2527, 0.0));
            float _2538 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : min(_2528, 0.0));
            _2566 = ((abs(_2403 / _2392) * cbSceneParam._m0[80u].y) * ((((_2537 - _2538) * 2.0) - ((exp2(_2411 * (isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0)))) - exp2(_2411 * (isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0))))) * _2526)) - ((exp2(_2413 * _2537) - exp2(_2413 * _2538)) * _2526))) + (_2406 * cbSceneParam._m0[80u].z);
        }
        vec4 _2568 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2303, _2304, 1.0), 0.0);
        float _2577 = exp2((_2566 * (-1.44269502162933349609375)) * (1.0 - _2568.w));
        float _2578 = log2(_2577);
        float _2594 = log2(_2323);
        _2415 = (exp2(_2594 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2578 * cbSceneParam._m0[78u].x)) * _2568.x) / cbSceneParam._m0[78u].x)) + _2320;
        _2417 = (exp2(_2594 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2578 * cbSceneParam._m0[78u].y)) * _2568.y) / cbSceneParam._m0[78u].y)) + _2321;
        _2419 = (exp2(_2594 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2578 * cbSceneParam._m0[78u].z)) * _2568.z) / cbSceneParam._m0[78u].z)) + _2322;
        _2421 = _2577 * _2323;
    }
    else
    {
        _2415 = _2320;
        _2417 = _2321;
        _2419 = _2322;
        _2421 = _2323;
    }
    float _2433 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2434 = _2433 == 3.0;
    float _2435 = log2(_2421);
    float _2442 = exp2(_2435 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2265 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _524))) + ((_2271 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1331)) * cbPerFrame._m0[3u].x));
    float _2443 = exp2(_2435 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2267 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _524))) + ((_2273 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1331)) * cbPerFrame._m0[3u].x));
    float _2444 = exp2(_2435 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2269 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _524))) + ((_2275 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1331)) * cbPerFrame._m0[3u].x));
    float _2453 = (_2433 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2453 * (_2434 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2415)));
    SV_Target.y = _2453 * (_2434 ? _2443 : (_2443 + (cbSceneParam._m0[72u].w * _2417)));
    SV_Target.z = _2453 * (_2434 ? _2444 : (_2444 + (cbSceneParam._m0[72u].w * _2419)));
    SV_Target.w = cbInstanceData._m0[_2295].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2295].w;
}


